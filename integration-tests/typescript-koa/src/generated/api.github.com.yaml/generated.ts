/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  EmptyObject,
  t_ActionsAddCustomLabelsToSelfHostedRunnerForOrgBodySchema,
  t_ActionsAddCustomLabelsToSelfHostedRunnerForOrgParamSchema,
  t_ActionsAddCustomLabelsToSelfHostedRunnerForRepoBodySchema,
  t_ActionsAddCustomLabelsToSelfHostedRunnerForRepoParamSchema,
  t_ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgParamSchema,
  t_ActionsAddSelectedRepoToOrgSecretParamSchema,
  t_ActionsAddSelectedRepoToOrgVariableParamSchema,
  t_ActionsAddSelfHostedRunnerToGroupForOrgParamSchema,
  t_ActionsApproveWorkflowRunParamSchema,
  t_ActionsCancelWorkflowRunParamSchema,
  t_ActionsCreateEnvironmentVariableBodySchema,
  t_ActionsCreateEnvironmentVariableParamSchema,
  t_ActionsCreateHostedRunnerForOrgBodySchema,
  t_ActionsCreateHostedRunnerForOrgParamSchema,
  t_ActionsCreateOrUpdateEnvironmentSecretBodySchema,
  t_ActionsCreateOrUpdateEnvironmentSecretParamSchema,
  t_ActionsCreateOrUpdateOrgSecretBodySchema,
  t_ActionsCreateOrUpdateOrgSecretParamSchema,
  t_ActionsCreateOrUpdateRepoSecretBodySchema,
  t_ActionsCreateOrUpdateRepoSecretParamSchema,
  t_ActionsCreateOrgVariableBodySchema,
  t_ActionsCreateOrgVariableParamSchema,
  t_ActionsCreateRegistrationTokenForOrgParamSchema,
  t_ActionsCreateRegistrationTokenForRepoParamSchema,
  t_ActionsCreateRemoveTokenForOrgParamSchema,
  t_ActionsCreateRemoveTokenForRepoParamSchema,
  t_ActionsCreateRepoVariableBodySchema,
  t_ActionsCreateRepoVariableParamSchema,
  t_ActionsCreateSelfHostedRunnerGroupForOrgBodySchema,
  t_ActionsCreateSelfHostedRunnerGroupForOrgParamSchema,
  t_ActionsCreateWorkflowDispatchBodySchema,
  t_ActionsCreateWorkflowDispatchParamSchema,
  t_ActionsDeleteActionsCacheByIdParamSchema,
  t_ActionsDeleteActionsCacheByKeyParamSchema,
  t_ActionsDeleteActionsCacheByKeyQuerySchema,
  t_ActionsDeleteArtifactParamSchema,
  t_ActionsDeleteEnvironmentSecretParamSchema,
  t_ActionsDeleteEnvironmentVariableParamSchema,
  t_ActionsDeleteHostedRunnerForOrgParamSchema,
  t_ActionsDeleteOrgSecretParamSchema,
  t_ActionsDeleteOrgVariableParamSchema,
  t_ActionsDeleteRepoSecretParamSchema,
  t_ActionsDeleteRepoVariableParamSchema,
  t_ActionsDeleteSelfHostedRunnerFromOrgParamSchema,
  t_ActionsDeleteSelfHostedRunnerFromRepoParamSchema,
  t_ActionsDeleteSelfHostedRunnerGroupFromOrgParamSchema,
  t_ActionsDeleteWorkflowRunLogsParamSchema,
  t_ActionsDeleteWorkflowRunParamSchema,
  t_ActionsDisableSelectedRepositoryGithubActionsOrganizationParamSchema,
  t_ActionsDisableWorkflowParamSchema,
  t_ActionsDownloadArtifactParamSchema,
  t_ActionsDownloadJobLogsForWorkflowRunParamSchema,
  t_ActionsDownloadWorkflowRunAttemptLogsParamSchema,
  t_ActionsDownloadWorkflowRunLogsParamSchema,
  t_ActionsEnableSelectedRepositoryGithubActionsOrganizationParamSchema,
  t_ActionsEnableWorkflowParamSchema,
  t_ActionsForceCancelWorkflowRunParamSchema,
  t_ActionsGenerateRunnerJitconfigForOrgBodySchema,
  t_ActionsGenerateRunnerJitconfigForOrgParamSchema,
  t_ActionsGenerateRunnerJitconfigForRepoBodySchema,
  t_ActionsGenerateRunnerJitconfigForRepoParamSchema,
  t_ActionsGetActionsCacheListParamSchema,
  t_ActionsGetActionsCacheListQuerySchema,
  t_ActionsGetActionsCacheUsageByRepoForOrgParamSchema,
  t_ActionsGetActionsCacheUsageByRepoForOrgQuerySchema,
  t_ActionsGetActionsCacheUsageForOrgParamSchema,
  t_ActionsGetActionsCacheUsageParamSchema,
  t_ActionsGetAllowedActionsOrganizationParamSchema,
  t_ActionsGetAllowedActionsRepositoryParamSchema,
  t_ActionsGetArtifactParamSchema,
  t_ActionsGetCustomOidcSubClaimForRepoParamSchema,
  t_ActionsGetEnvironmentPublicKeyParamSchema,
  t_ActionsGetEnvironmentSecretParamSchema,
  t_ActionsGetEnvironmentVariableParamSchema,
  t_ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema,
  t_ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema,
  t_ActionsGetGithubActionsPermissionsOrganizationParamSchema,
  t_ActionsGetGithubActionsPermissionsRepositoryParamSchema,
  t_ActionsGetHostedRunnerForOrgParamSchema,
  t_ActionsGetHostedRunnersGithubOwnedImagesForOrgParamSchema,
  t_ActionsGetHostedRunnersLimitsForOrgParamSchema,
  t_ActionsGetHostedRunnersMachineSpecsForOrgParamSchema,
  t_ActionsGetHostedRunnersPartnerImagesForOrgParamSchema,
  t_ActionsGetHostedRunnersPlatformsForOrgParamSchema,
  t_ActionsGetJobForWorkflowRunParamSchema,
  t_ActionsGetOrgPublicKeyParamSchema,
  t_ActionsGetOrgSecretParamSchema,
  t_ActionsGetOrgVariableParamSchema,
  t_ActionsGetPendingDeploymentsForRunParamSchema,
  t_ActionsGetRepoPublicKeyParamSchema,
  t_ActionsGetRepoSecretParamSchema,
  t_ActionsGetRepoVariableParamSchema,
  t_ActionsGetReviewsForRunParamSchema,
  t_ActionsGetSelfHostedRunnerForOrgParamSchema,
  t_ActionsGetSelfHostedRunnerForRepoParamSchema,
  t_ActionsGetSelfHostedRunnerGroupForOrgParamSchema,
  t_ActionsGetWorkflowAccessToRepositoryParamSchema,
  t_ActionsGetWorkflowParamSchema,
  t_ActionsGetWorkflowRunAttemptParamSchema,
  t_ActionsGetWorkflowRunAttemptQuerySchema,
  t_ActionsGetWorkflowRunParamSchema,
  t_ActionsGetWorkflowRunQuerySchema,
  t_ActionsGetWorkflowRunUsageParamSchema,
  t_ActionsGetWorkflowUsageParamSchema,
  t_ActionsListArtifactsForRepoParamSchema,
  t_ActionsListArtifactsForRepoQuerySchema,
  t_ActionsListEnvironmentSecretsParamSchema,
  t_ActionsListEnvironmentSecretsQuerySchema,
  t_ActionsListEnvironmentVariablesParamSchema,
  t_ActionsListEnvironmentVariablesQuerySchema,
  t_ActionsListGithubHostedRunnersInGroupForOrgParamSchema,
  t_ActionsListGithubHostedRunnersInGroupForOrgQuerySchema,
  t_ActionsListHostedRunnersForOrgParamSchema,
  t_ActionsListHostedRunnersForOrgQuerySchema,
  t_ActionsListJobsForWorkflowRunAttemptParamSchema,
  t_ActionsListJobsForWorkflowRunAttemptQuerySchema,
  t_ActionsListJobsForWorkflowRunParamSchema,
  t_ActionsListJobsForWorkflowRunQuerySchema,
  t_ActionsListLabelsForSelfHostedRunnerForOrgParamSchema,
  t_ActionsListLabelsForSelfHostedRunnerForRepoParamSchema,
  t_ActionsListOrgSecretsParamSchema,
  t_ActionsListOrgSecretsQuerySchema,
  t_ActionsListOrgVariablesParamSchema,
  t_ActionsListOrgVariablesQuerySchema,
  t_ActionsListRepoAccessToSelfHostedRunnerGroupInOrgParamSchema,
  t_ActionsListRepoAccessToSelfHostedRunnerGroupInOrgQuerySchema,
  t_ActionsListRepoOrganizationSecretsParamSchema,
  t_ActionsListRepoOrganizationSecretsQuerySchema,
  t_ActionsListRepoOrganizationVariablesParamSchema,
  t_ActionsListRepoOrganizationVariablesQuerySchema,
  t_ActionsListRepoSecretsParamSchema,
  t_ActionsListRepoSecretsQuerySchema,
  t_ActionsListRepoVariablesParamSchema,
  t_ActionsListRepoVariablesQuerySchema,
  t_ActionsListRepoWorkflowsParamSchema,
  t_ActionsListRepoWorkflowsQuerySchema,
  t_ActionsListRunnerApplicationsForOrgParamSchema,
  t_ActionsListRunnerApplicationsForRepoParamSchema,
  t_ActionsListSelectedReposForOrgSecretParamSchema,
  t_ActionsListSelectedReposForOrgSecretQuerySchema,
  t_ActionsListSelectedReposForOrgVariableParamSchema,
  t_ActionsListSelectedReposForOrgVariableQuerySchema,
  t_ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema,
  t_ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationQuerySchema,
  t_ActionsListSelfHostedRunnerGroupsForOrgParamSchema,
  t_ActionsListSelfHostedRunnerGroupsForOrgQuerySchema,
  t_ActionsListSelfHostedRunnersForOrgParamSchema,
  t_ActionsListSelfHostedRunnersForOrgQuerySchema,
  t_ActionsListSelfHostedRunnersForRepoParamSchema,
  t_ActionsListSelfHostedRunnersForRepoQuerySchema,
  t_ActionsListSelfHostedRunnersInGroupForOrgParamSchema,
  t_ActionsListSelfHostedRunnersInGroupForOrgQuerySchema,
  t_ActionsListWorkflowRunArtifactsParamSchema,
  t_ActionsListWorkflowRunArtifactsQuerySchema,
  t_ActionsListWorkflowRunsForRepoParamSchema,
  t_ActionsListWorkflowRunsForRepoQuerySchema,
  t_ActionsListWorkflowRunsParamSchema,
  t_ActionsListWorkflowRunsQuerySchema,
  t_ActionsReRunJobForWorkflowRunBodySchema,
  t_ActionsReRunJobForWorkflowRunParamSchema,
  t_ActionsReRunWorkflowBodySchema,
  t_ActionsReRunWorkflowFailedJobsBodySchema,
  t_ActionsReRunWorkflowFailedJobsParamSchema,
  t_ActionsReRunWorkflowParamSchema,
  t_ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgParamSchema,
  t_ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoParamSchema,
  t_ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgParamSchema,
  t_ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoParamSchema,
  t_ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgParamSchema,
  t_ActionsRemoveSelectedRepoFromOrgSecretParamSchema,
  t_ActionsRemoveSelectedRepoFromOrgVariableParamSchema,
  t_ActionsRemoveSelfHostedRunnerFromGroupForOrgParamSchema,
  t_ActionsReviewCustomGatesForRunBodySchema,
  t_ActionsReviewCustomGatesForRunParamSchema,
  t_ActionsReviewPendingDeploymentsForRunBodySchema,
  t_ActionsReviewPendingDeploymentsForRunParamSchema,
  t_ActionsSetAllowedActionsOrganizationBodySchema,
  t_ActionsSetAllowedActionsOrganizationParamSchema,
  t_ActionsSetAllowedActionsRepositoryBodySchema,
  t_ActionsSetAllowedActionsRepositoryParamSchema,
  t_ActionsSetCustomLabelsForSelfHostedRunnerForOrgBodySchema,
  t_ActionsSetCustomLabelsForSelfHostedRunnerForOrgParamSchema,
  t_ActionsSetCustomLabelsForSelfHostedRunnerForRepoBodySchema,
  t_ActionsSetCustomLabelsForSelfHostedRunnerForRepoParamSchema,
  t_ActionsSetCustomOidcSubClaimForRepoBodySchema,
  t_ActionsSetCustomOidcSubClaimForRepoParamSchema,
  t_ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationBodySchema,
  t_ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema,
  t_ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryBodySchema,
  t_ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema,
  t_ActionsSetGithubActionsPermissionsOrganizationBodySchema,
  t_ActionsSetGithubActionsPermissionsOrganizationParamSchema,
  t_ActionsSetGithubActionsPermissionsRepositoryBodySchema,
  t_ActionsSetGithubActionsPermissionsRepositoryParamSchema,
  t_ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgBodySchema,
  t_ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgParamSchema,
  t_ActionsSetSelectedReposForOrgSecretBodySchema,
  t_ActionsSetSelectedReposForOrgSecretParamSchema,
  t_ActionsSetSelectedReposForOrgVariableBodySchema,
  t_ActionsSetSelectedReposForOrgVariableParamSchema,
  t_ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationBodySchema,
  t_ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema,
  t_ActionsSetSelfHostedRunnersInGroupForOrgBodySchema,
  t_ActionsSetSelfHostedRunnersInGroupForOrgParamSchema,
  t_ActionsSetWorkflowAccessToRepositoryBodySchema,
  t_ActionsSetWorkflowAccessToRepositoryParamSchema,
  t_ActionsUpdateEnvironmentVariableBodySchema,
  t_ActionsUpdateEnvironmentVariableParamSchema,
  t_ActionsUpdateHostedRunnerForOrgBodySchema,
  t_ActionsUpdateHostedRunnerForOrgParamSchema,
  t_ActionsUpdateOrgVariableBodySchema,
  t_ActionsUpdateOrgVariableParamSchema,
  t_ActionsUpdateRepoVariableBodySchema,
  t_ActionsUpdateRepoVariableParamSchema,
  t_ActionsUpdateSelfHostedRunnerGroupForOrgBodySchema,
  t_ActionsUpdateSelfHostedRunnerGroupForOrgParamSchema,
  t_ActivityCheckRepoIsStarredByAuthenticatedUserParamSchema,
  t_ActivityDeleteRepoSubscriptionParamSchema,
  t_ActivityDeleteThreadSubscriptionParamSchema,
  t_ActivityGetRepoSubscriptionParamSchema,
  t_ActivityGetThreadParamSchema,
  t_ActivityGetThreadSubscriptionForAuthenticatedUserParamSchema,
  t_ActivityListEventsForAuthenticatedUserParamSchema,
  t_ActivityListEventsForAuthenticatedUserQuerySchema,
  t_ActivityListNotificationsForAuthenticatedUserQuerySchema,
  t_ActivityListOrgEventsForAuthenticatedUserParamSchema,
  t_ActivityListOrgEventsForAuthenticatedUserQuerySchema,
  t_ActivityListPublicEventsForRepoNetworkParamSchema,
  t_ActivityListPublicEventsForRepoNetworkQuerySchema,
  t_ActivityListPublicEventsForUserParamSchema,
  t_ActivityListPublicEventsForUserQuerySchema,
  t_ActivityListPublicEventsQuerySchema,
  t_ActivityListPublicOrgEventsParamSchema,
  t_ActivityListPublicOrgEventsQuerySchema,
  t_ActivityListReceivedEventsForUserParamSchema,
  t_ActivityListReceivedEventsForUserQuerySchema,
  t_ActivityListReceivedPublicEventsForUserParamSchema,
  t_ActivityListReceivedPublicEventsForUserQuerySchema,
  t_ActivityListRepoEventsParamSchema,
  t_ActivityListRepoEventsQuerySchema,
  t_ActivityListRepoNotificationsForAuthenticatedUserParamSchema,
  t_ActivityListRepoNotificationsForAuthenticatedUserQuerySchema,
  t_ActivityListReposStarredByAuthenticatedUserQuerySchema,
  t_ActivityListReposStarredByUserParamSchema,
  t_ActivityListReposStarredByUserQuerySchema,
  t_ActivityListReposWatchedByUserParamSchema,
  t_ActivityListReposWatchedByUserQuerySchema,
  t_ActivityListStargazersForRepoParamSchema,
  t_ActivityListStargazersForRepoQuerySchema,
  t_ActivityListWatchedReposForAuthenticatedUserQuerySchema,
  t_ActivityListWatchersForRepoParamSchema,
  t_ActivityListWatchersForRepoQuerySchema,
  t_ActivityMarkNotificationsAsReadBodySchema,
  t_ActivityMarkRepoNotificationsAsReadBodySchema,
  t_ActivityMarkRepoNotificationsAsReadParamSchema,
  t_ActivityMarkThreadAsDoneParamSchema,
  t_ActivityMarkThreadAsReadParamSchema,
  t_ActivitySetRepoSubscriptionBodySchema,
  t_ActivitySetRepoSubscriptionParamSchema,
  t_ActivitySetThreadSubscriptionBodySchema,
  t_ActivitySetThreadSubscriptionParamSchema,
  t_ActivityStarRepoForAuthenticatedUserParamSchema,
  t_ActivityUnstarRepoForAuthenticatedUserParamSchema,
  t_ApiInsightsGetRouteStatsByActorParamSchema,
  t_ApiInsightsGetRouteStatsByActorQuerySchema,
  t_ApiInsightsGetSubjectStatsParamSchema,
  t_ApiInsightsGetSubjectStatsQuerySchema,
  t_ApiInsightsGetSummaryStatsByActorParamSchema,
  t_ApiInsightsGetSummaryStatsByActorQuerySchema,
  t_ApiInsightsGetSummaryStatsByUserParamSchema,
  t_ApiInsightsGetSummaryStatsByUserQuerySchema,
  t_ApiInsightsGetSummaryStatsParamSchema,
  t_ApiInsightsGetSummaryStatsQuerySchema,
  t_ApiInsightsGetTimeStatsByActorParamSchema,
  t_ApiInsightsGetTimeStatsByActorQuerySchema,
  t_ApiInsightsGetTimeStatsByUserParamSchema,
  t_ApiInsightsGetTimeStatsByUserQuerySchema,
  t_ApiInsightsGetTimeStatsParamSchema,
  t_ApiInsightsGetTimeStatsQuerySchema,
  t_ApiInsightsGetUserStatsParamSchema,
  t_ApiInsightsGetUserStatsQuerySchema,
  t_AppsAddRepoToInstallationForAuthenticatedUserParamSchema,
  t_AppsCheckTokenBodySchema,
  t_AppsCheckTokenParamSchema,
  t_AppsCreateFromManifestParamSchema,
  t_AppsCreateInstallationAccessTokenBodySchema,
  t_AppsCreateInstallationAccessTokenParamSchema,
  t_AppsDeleteAuthorizationBodySchema,
  t_AppsDeleteAuthorizationParamSchema,
  t_AppsDeleteInstallationParamSchema,
  t_AppsDeleteTokenBodySchema,
  t_AppsDeleteTokenParamSchema,
  t_AppsGetBySlugParamSchema,
  t_AppsGetInstallationParamSchema,
  t_AppsGetOrgInstallationParamSchema,
  t_AppsGetRepoInstallationParamSchema,
  t_AppsGetSubscriptionPlanForAccountParamSchema,
  t_AppsGetSubscriptionPlanForAccountStubbedParamSchema,
  t_AppsGetUserInstallationParamSchema,
  t_AppsGetWebhookDeliveryParamSchema,
  t_AppsListAccountsForPlanParamSchema,
  t_AppsListAccountsForPlanQuerySchema,
  t_AppsListAccountsForPlanStubbedParamSchema,
  t_AppsListAccountsForPlanStubbedQuerySchema,
  t_AppsListInstallationReposForAuthenticatedUserParamSchema,
  t_AppsListInstallationReposForAuthenticatedUserQuerySchema,
  t_AppsListInstallationRequestsForAuthenticatedAppQuerySchema,
  t_AppsListInstallationsForAuthenticatedUserQuerySchema,
  t_AppsListInstallationsQuerySchema,
  t_AppsListPlansQuerySchema,
  t_AppsListPlansStubbedQuerySchema,
  t_AppsListReposAccessibleToInstallationQuerySchema,
  t_AppsListSubscriptionsForAuthenticatedUserQuerySchema,
  t_AppsListSubscriptionsForAuthenticatedUserStubbedQuerySchema,
  t_AppsListWebhookDeliveriesQuerySchema,
  t_AppsRedeliverWebhookDeliveryParamSchema,
  t_AppsRemoveRepoFromInstallationForAuthenticatedUserParamSchema,
  t_AppsResetTokenBodySchema,
  t_AppsResetTokenParamSchema,
  t_AppsScopeTokenBodySchema,
  t_AppsScopeTokenParamSchema,
  t_AppsSuspendInstallationParamSchema,
  t_AppsUnsuspendInstallationParamSchema,
  t_AppsUpdateWebhookConfigForAppBodySchema,
  t_BillingGetGithubActionsBillingOrgParamSchema,
  t_BillingGetGithubActionsBillingUserParamSchema,
  t_BillingGetGithubBillingUsageReportOrgParamSchema,
  t_BillingGetGithubBillingUsageReportOrgQuerySchema,
  t_BillingGetGithubPackagesBillingOrgParamSchema,
  t_BillingGetGithubPackagesBillingUserParamSchema,
  t_BillingGetSharedStorageBillingOrgParamSchema,
  t_BillingGetSharedStorageBillingUserParamSchema,
  t_CampaignsCreateCampaignBodySchema,
  t_CampaignsCreateCampaignParamSchema,
  t_CampaignsDeleteCampaignParamSchema,
  t_CampaignsGetCampaignSummaryParamSchema,
  t_CampaignsListOrgCampaignsParamSchema,
  t_CampaignsListOrgCampaignsQuerySchema,
  t_CampaignsUpdateCampaignBodySchema,
  t_CampaignsUpdateCampaignParamSchema,
  t_ChecksCreateBodySchema,
  t_ChecksCreateParamSchema,
  t_ChecksCreateSuiteBodySchema,
  t_ChecksCreateSuiteParamSchema,
  t_ChecksGetParamSchema,
  t_ChecksGetSuiteParamSchema,
  t_ChecksListAnnotationsParamSchema,
  t_ChecksListAnnotationsQuerySchema,
  t_ChecksListForRefParamSchema,
  t_ChecksListForRefQuerySchema,
  t_ChecksListForSuiteParamSchema,
  t_ChecksListForSuiteQuerySchema,
  t_ChecksListSuitesForRefParamSchema,
  t_ChecksListSuitesForRefQuerySchema,
  t_ChecksRerequestRunParamSchema,
  t_ChecksRerequestSuiteParamSchema,
  t_ChecksSetSuitesPreferencesBodySchema,
  t_ChecksSetSuitesPreferencesParamSchema,
  t_ChecksUpdateBodySchema,
  t_ChecksUpdateParamSchema,
  t_ClassroomGetAClassroomParamSchema,
  t_ClassroomGetAnAssignmentParamSchema,
  t_ClassroomGetAssignmentGradesParamSchema,
  t_ClassroomListAcceptedAssignmentsForAnAssignmentParamSchema,
  t_ClassroomListAcceptedAssignmentsForAnAssignmentQuerySchema,
  t_ClassroomListAssignmentsForAClassroomParamSchema,
  t_ClassroomListAssignmentsForAClassroomQuerySchema,
  t_ClassroomListClassroomsQuerySchema,
  t_CodeScanningCommitAutofixBodySchema,
  t_CodeScanningCommitAutofixParamSchema,
  t_CodeScanningCreateAutofixParamSchema,
  t_CodeScanningCreateVariantAnalysisBodySchema,
  t_CodeScanningCreateVariantAnalysisParamSchema,
  t_CodeScanningDeleteAnalysisParamSchema,
  t_CodeScanningDeleteAnalysisQuerySchema,
  t_CodeScanningDeleteCodeqlDatabaseParamSchema,
  t_CodeScanningGetAlertParamSchema,
  t_CodeScanningGetAnalysisParamSchema,
  t_CodeScanningGetAutofixParamSchema,
  t_CodeScanningGetCodeqlDatabaseParamSchema,
  t_CodeScanningGetDefaultSetupParamSchema,
  t_CodeScanningGetSarifParamSchema,
  t_CodeScanningGetVariantAnalysisParamSchema,
  t_CodeScanningGetVariantAnalysisRepoTaskParamSchema,
  t_CodeScanningListAlertInstancesParamSchema,
  t_CodeScanningListAlertInstancesQuerySchema,
  t_CodeScanningListAlertsForOrgParamSchema,
  t_CodeScanningListAlertsForOrgQuerySchema,
  t_CodeScanningListAlertsForRepoParamSchema,
  t_CodeScanningListAlertsForRepoQuerySchema,
  t_CodeScanningListCodeqlDatabasesParamSchema,
  t_CodeScanningListRecentAnalysesParamSchema,
  t_CodeScanningListRecentAnalysesQuerySchema,
  t_CodeScanningUpdateAlertBodySchema,
  t_CodeScanningUpdateAlertParamSchema,
  t_CodeScanningUpdateDefaultSetupBodySchema,
  t_CodeScanningUpdateDefaultSetupParamSchema,
  t_CodeScanningUploadSarifBodySchema,
  t_CodeScanningUploadSarifParamSchema,
  t_CodeSecurityAttachConfigurationBodySchema,
  t_CodeSecurityAttachConfigurationParamSchema,
  t_CodeSecurityAttachEnterpriseConfigurationBodySchema,
  t_CodeSecurityAttachEnterpriseConfigurationParamSchema,
  t_CodeSecurityCreateConfigurationBodySchema,
  t_CodeSecurityCreateConfigurationForEnterpriseBodySchema,
  t_CodeSecurityCreateConfigurationForEnterpriseParamSchema,
  t_CodeSecurityCreateConfigurationParamSchema,
  t_CodeSecurityDeleteConfigurationForEnterpriseParamSchema,
  t_CodeSecurityDeleteConfigurationParamSchema,
  t_CodeSecurityDetachConfigurationBodySchema,
  t_CodeSecurityDetachConfigurationParamSchema,
  t_CodeSecurityGetConfigurationForRepositoryParamSchema,
  t_CodeSecurityGetConfigurationParamSchema,
  t_CodeSecurityGetConfigurationsForEnterpriseParamSchema,
  t_CodeSecurityGetConfigurationsForEnterpriseQuerySchema,
  t_CodeSecurityGetConfigurationsForOrgParamSchema,
  t_CodeSecurityGetConfigurationsForOrgQuerySchema,
  t_CodeSecurityGetDefaultConfigurationsForEnterpriseParamSchema,
  t_CodeSecurityGetDefaultConfigurationsParamSchema,
  t_CodeSecurityGetRepositoriesForConfigurationParamSchema,
  t_CodeSecurityGetRepositoriesForConfigurationQuerySchema,
  t_CodeSecurityGetRepositoriesForEnterpriseConfigurationParamSchema,
  t_CodeSecurityGetRepositoriesForEnterpriseConfigurationQuerySchema,
  t_CodeSecurityGetSingleConfigurationForEnterpriseParamSchema,
  t_CodeSecuritySetConfigurationAsDefaultBodySchema,
  t_CodeSecuritySetConfigurationAsDefaultForEnterpriseBodySchema,
  t_CodeSecuritySetConfigurationAsDefaultForEnterpriseParamSchema,
  t_CodeSecuritySetConfigurationAsDefaultParamSchema,
  t_CodeSecurityUpdateConfigurationBodySchema,
  t_CodeSecurityUpdateConfigurationParamSchema,
  t_CodeSecurityUpdateEnterpriseConfigurationBodySchema,
  t_CodeSecurityUpdateEnterpriseConfigurationParamSchema,
  t_CodesOfConductGetConductCodeParamSchema,
  t_CodespacesAddRepositoryForSecretForAuthenticatedUserParamSchema,
  t_CodespacesAddSelectedRepoToOrgSecretParamSchema,
  t_CodespacesCheckPermissionsForDevcontainerParamSchema,
  t_CodespacesCheckPermissionsForDevcontainerQuerySchema,
  t_CodespacesCodespaceMachinesForAuthenticatedUserParamSchema,
  t_CodespacesCreateForAuthenticatedUserBodySchema,
  t_CodespacesCreateOrUpdateOrgSecretBodySchema,
  t_CodespacesCreateOrUpdateOrgSecretParamSchema,
  t_CodespacesCreateOrUpdateRepoSecretBodySchema,
  t_CodespacesCreateOrUpdateRepoSecretParamSchema,
  t_CodespacesCreateOrUpdateSecretForAuthenticatedUserBodySchema,
  t_CodespacesCreateOrUpdateSecretForAuthenticatedUserParamSchema,
  t_CodespacesCreateWithPrForAuthenticatedUserBodySchema,
  t_CodespacesCreateWithPrForAuthenticatedUserParamSchema,
  t_CodespacesCreateWithRepoForAuthenticatedUserBodySchema,
  t_CodespacesCreateWithRepoForAuthenticatedUserParamSchema,
  t_CodespacesDeleteCodespacesAccessUsersBodySchema,
  t_CodespacesDeleteCodespacesAccessUsersParamSchema,
  t_CodespacesDeleteForAuthenticatedUserParamSchema,
  t_CodespacesDeleteFromOrganizationParamSchema,
  t_CodespacesDeleteOrgSecretParamSchema,
  t_CodespacesDeleteRepoSecretParamSchema,
  t_CodespacesDeleteSecretForAuthenticatedUserParamSchema,
  t_CodespacesExportForAuthenticatedUserParamSchema,
  t_CodespacesGetCodespacesForUserInOrgParamSchema,
  t_CodespacesGetCodespacesForUserInOrgQuerySchema,
  t_CodespacesGetExportDetailsForAuthenticatedUserParamSchema,
  t_CodespacesGetForAuthenticatedUserParamSchema,
  t_CodespacesGetOrgPublicKeyParamSchema,
  t_CodespacesGetOrgSecretParamSchema,
  t_CodespacesGetRepoPublicKeyParamSchema,
  t_CodespacesGetRepoSecretParamSchema,
  t_CodespacesGetSecretForAuthenticatedUserParamSchema,
  t_CodespacesListDevcontainersInRepositoryForAuthenticatedUserParamSchema,
  t_CodespacesListDevcontainersInRepositoryForAuthenticatedUserQuerySchema,
  t_CodespacesListForAuthenticatedUserQuerySchema,
  t_CodespacesListInOrganizationParamSchema,
  t_CodespacesListInOrganizationQuerySchema,
  t_CodespacesListInRepositoryForAuthenticatedUserParamSchema,
  t_CodespacesListInRepositoryForAuthenticatedUserQuerySchema,
  t_CodespacesListOrgSecretsParamSchema,
  t_CodespacesListOrgSecretsQuerySchema,
  t_CodespacesListRepoSecretsParamSchema,
  t_CodespacesListRepoSecretsQuerySchema,
  t_CodespacesListRepositoriesForSecretForAuthenticatedUserParamSchema,
  t_CodespacesListSecretsForAuthenticatedUserQuerySchema,
  t_CodespacesListSelectedReposForOrgSecretParamSchema,
  t_CodespacesListSelectedReposForOrgSecretQuerySchema,
  t_CodespacesPreFlightWithRepoForAuthenticatedUserParamSchema,
  t_CodespacesPreFlightWithRepoForAuthenticatedUserQuerySchema,
  t_CodespacesPublishForAuthenticatedUserBodySchema,
  t_CodespacesPublishForAuthenticatedUserParamSchema,
  t_CodespacesRemoveRepositoryForSecretForAuthenticatedUserParamSchema,
  t_CodespacesRemoveSelectedRepoFromOrgSecretParamSchema,
  t_CodespacesRepoMachinesForAuthenticatedUserParamSchema,
  t_CodespacesRepoMachinesForAuthenticatedUserQuerySchema,
  t_CodespacesSetCodespacesAccessBodySchema,
  t_CodespacesSetCodespacesAccessParamSchema,
  t_CodespacesSetCodespacesAccessUsersBodySchema,
  t_CodespacesSetCodespacesAccessUsersParamSchema,
  t_CodespacesSetRepositoriesForSecretForAuthenticatedUserBodySchema,
  t_CodespacesSetRepositoriesForSecretForAuthenticatedUserParamSchema,
  t_CodespacesSetSelectedReposForOrgSecretBodySchema,
  t_CodespacesSetSelectedReposForOrgSecretParamSchema,
  t_CodespacesStartForAuthenticatedUserParamSchema,
  t_CodespacesStopForAuthenticatedUserParamSchema,
  t_CodespacesStopInOrganizationParamSchema,
  t_CodespacesUpdateForAuthenticatedUserBodySchema,
  t_CodespacesUpdateForAuthenticatedUserParamSchema,
  t_CopilotAddCopilotSeatsForTeamsBodySchema,
  t_CopilotAddCopilotSeatsForTeamsParamSchema,
  t_CopilotAddCopilotSeatsForUsersBodySchema,
  t_CopilotAddCopilotSeatsForUsersParamSchema,
  t_CopilotCancelCopilotSeatAssignmentForTeamsBodySchema,
  t_CopilotCancelCopilotSeatAssignmentForTeamsParamSchema,
  t_CopilotCancelCopilotSeatAssignmentForUsersBodySchema,
  t_CopilotCancelCopilotSeatAssignmentForUsersParamSchema,
  t_CopilotCopilotMetricsForOrganizationParamSchema,
  t_CopilotCopilotMetricsForOrganizationQuerySchema,
  t_CopilotCopilotMetricsForTeamParamSchema,
  t_CopilotCopilotMetricsForTeamQuerySchema,
  t_CopilotGetCopilotOrganizationDetailsParamSchema,
  t_CopilotGetCopilotSeatDetailsForUserParamSchema,
  t_CopilotListCopilotSeatsParamSchema,
  t_CopilotListCopilotSeatsQuerySchema,
  t_DependabotAddSelectedRepoToOrgSecretParamSchema,
  t_DependabotCreateOrUpdateOrgSecretBodySchema,
  t_DependabotCreateOrUpdateOrgSecretParamSchema,
  t_DependabotCreateOrUpdateRepoSecretBodySchema,
  t_DependabotCreateOrUpdateRepoSecretParamSchema,
  t_DependabotDeleteOrgSecretParamSchema,
  t_DependabotDeleteRepoSecretParamSchema,
  t_DependabotGetAlertParamSchema,
  t_DependabotGetOrgPublicKeyParamSchema,
  t_DependabotGetOrgSecretParamSchema,
  t_DependabotGetRepoPublicKeyParamSchema,
  t_DependabotGetRepoSecretParamSchema,
  t_DependabotListAlertsForEnterpriseParamSchema,
  t_DependabotListAlertsForEnterpriseQuerySchema,
  t_DependabotListAlertsForOrgParamSchema,
  t_DependabotListAlertsForOrgQuerySchema,
  t_DependabotListAlertsForRepoParamSchema,
  t_DependabotListAlertsForRepoQuerySchema,
  t_DependabotListOrgSecretsParamSchema,
  t_DependabotListOrgSecretsQuerySchema,
  t_DependabotListRepoSecretsParamSchema,
  t_DependabotListRepoSecretsQuerySchema,
  t_DependabotListSelectedReposForOrgSecretParamSchema,
  t_DependabotListSelectedReposForOrgSecretQuerySchema,
  t_DependabotRemoveSelectedRepoFromOrgSecretParamSchema,
  t_DependabotSetSelectedReposForOrgSecretBodySchema,
  t_DependabotSetSelectedReposForOrgSecretParamSchema,
  t_DependabotUpdateAlertBodySchema,
  t_DependabotUpdateAlertParamSchema,
  t_DependencyGraphCreateRepositorySnapshotBodySchema,
  t_DependencyGraphCreateRepositorySnapshotParamSchema,
  t_DependencyGraphDiffRangeParamSchema,
  t_DependencyGraphDiffRangeQuerySchema,
  t_DependencyGraphExportSbomParamSchema,
  t_GistsCheckIsStarredParamSchema,
  t_GistsCreateBodySchema,
  t_GistsCreateCommentBodySchema,
  t_GistsCreateCommentParamSchema,
  t_GistsDeleteCommentParamSchema,
  t_GistsDeleteParamSchema,
  t_GistsForkParamSchema,
  t_GistsGetCommentParamSchema,
  t_GistsGetParamSchema,
  t_GistsGetRevisionParamSchema,
  t_GistsListCommentsParamSchema,
  t_GistsListCommentsQuerySchema,
  t_GistsListCommitsParamSchema,
  t_GistsListCommitsQuerySchema,
  t_GistsListForUserParamSchema,
  t_GistsListForUserQuerySchema,
  t_GistsListForksParamSchema,
  t_GistsListForksQuerySchema,
  t_GistsListPublicQuerySchema,
  t_GistsListQuerySchema,
  t_GistsListStarredQuerySchema,
  t_GistsStarParamSchema,
  t_GistsUnstarParamSchema,
  t_GistsUpdateBodySchema,
  t_GistsUpdateCommentBodySchema,
  t_GistsUpdateCommentParamSchema,
  t_GistsUpdateParamSchema,
  t_GitCreateBlobBodySchema,
  t_GitCreateBlobParamSchema,
  t_GitCreateCommitBodySchema,
  t_GitCreateCommitParamSchema,
  t_GitCreateRefBodySchema,
  t_GitCreateRefParamSchema,
  t_GitCreateTagBodySchema,
  t_GitCreateTagParamSchema,
  t_GitCreateTreeBodySchema,
  t_GitCreateTreeParamSchema,
  t_GitDeleteRefParamSchema,
  t_GitGetBlobParamSchema,
  t_GitGetCommitParamSchema,
  t_GitGetRefParamSchema,
  t_GitGetTagParamSchema,
  t_GitGetTreeParamSchema,
  t_GitGetTreeQuerySchema,
  t_GitListMatchingRefsParamSchema,
  t_GitUpdateRefBodySchema,
  t_GitUpdateRefParamSchema,
  t_GitignoreGetTemplateParamSchema,
  t_HostedComputeCreateNetworkConfigurationForOrgBodySchema,
  t_HostedComputeCreateNetworkConfigurationForOrgParamSchema,
  t_HostedComputeDeleteNetworkConfigurationFromOrgParamSchema,
  t_HostedComputeGetNetworkConfigurationForOrgParamSchema,
  t_HostedComputeGetNetworkSettingsForOrgParamSchema,
  t_HostedComputeListNetworkConfigurationsForOrgParamSchema,
  t_HostedComputeListNetworkConfigurationsForOrgQuerySchema,
  t_HostedComputeUpdateNetworkConfigurationForOrgBodySchema,
  t_HostedComputeUpdateNetworkConfigurationForOrgParamSchema,
  t_InteractionsGetRestrictionsForOrgParamSchema,
  t_InteractionsGetRestrictionsForRepoParamSchema,
  t_InteractionsRemoveRestrictionsForOrgParamSchema,
  t_InteractionsRemoveRestrictionsForRepoParamSchema,
  t_InteractionsSetRestrictionsForAuthenticatedUserBodySchema,
  t_InteractionsSetRestrictionsForOrgBodySchema,
  t_InteractionsSetRestrictionsForOrgParamSchema,
  t_InteractionsSetRestrictionsForRepoBodySchema,
  t_InteractionsSetRestrictionsForRepoParamSchema,
  t_IssuesAddAssigneesBodySchema,
  t_IssuesAddAssigneesParamSchema,
  t_IssuesAddLabelsBodySchema,
  t_IssuesAddLabelsParamSchema,
  t_IssuesAddSubIssueBodySchema,
  t_IssuesAddSubIssueParamSchema,
  t_IssuesCheckUserCanBeAssignedParamSchema,
  t_IssuesCheckUserCanBeAssignedToIssueParamSchema,
  t_IssuesCreateBodySchema,
  t_IssuesCreateCommentBodySchema,
  t_IssuesCreateCommentParamSchema,
  t_IssuesCreateLabelBodySchema,
  t_IssuesCreateLabelParamSchema,
  t_IssuesCreateMilestoneBodySchema,
  t_IssuesCreateMilestoneParamSchema,
  t_IssuesCreateParamSchema,
  t_IssuesDeleteCommentParamSchema,
  t_IssuesDeleteLabelParamSchema,
  t_IssuesDeleteMilestoneParamSchema,
  t_IssuesGetCommentParamSchema,
  t_IssuesGetEventParamSchema,
  t_IssuesGetLabelParamSchema,
  t_IssuesGetMilestoneParamSchema,
  t_IssuesGetParamSchema,
  t_IssuesListAssigneesParamSchema,
  t_IssuesListAssigneesQuerySchema,
  t_IssuesListCommentsForRepoParamSchema,
  t_IssuesListCommentsForRepoQuerySchema,
  t_IssuesListCommentsParamSchema,
  t_IssuesListCommentsQuerySchema,
  t_IssuesListEventsForRepoParamSchema,
  t_IssuesListEventsForRepoQuerySchema,
  t_IssuesListEventsForTimelineParamSchema,
  t_IssuesListEventsForTimelineQuerySchema,
  t_IssuesListEventsParamSchema,
  t_IssuesListEventsQuerySchema,
  t_IssuesListForAuthenticatedUserQuerySchema,
  t_IssuesListForOrgParamSchema,
  t_IssuesListForOrgQuerySchema,
  t_IssuesListForRepoParamSchema,
  t_IssuesListForRepoQuerySchema,
  t_IssuesListLabelsForMilestoneParamSchema,
  t_IssuesListLabelsForMilestoneQuerySchema,
  t_IssuesListLabelsForRepoParamSchema,
  t_IssuesListLabelsForRepoQuerySchema,
  t_IssuesListLabelsOnIssueParamSchema,
  t_IssuesListLabelsOnIssueQuerySchema,
  t_IssuesListMilestonesParamSchema,
  t_IssuesListMilestonesQuerySchema,
  t_IssuesListQuerySchema,
  t_IssuesListSubIssuesParamSchema,
  t_IssuesListSubIssuesQuerySchema,
  t_IssuesLockBodySchema,
  t_IssuesLockParamSchema,
  t_IssuesRemoveAllLabelsParamSchema,
  t_IssuesRemoveAssigneesBodySchema,
  t_IssuesRemoveAssigneesParamSchema,
  t_IssuesRemoveLabelParamSchema,
  t_IssuesRemoveSubIssueBodySchema,
  t_IssuesRemoveSubIssueParamSchema,
  t_IssuesReprioritizeSubIssueBodySchema,
  t_IssuesReprioritizeSubIssueParamSchema,
  t_IssuesSetLabelsBodySchema,
  t_IssuesSetLabelsParamSchema,
  t_IssuesUnlockParamSchema,
  t_IssuesUpdateBodySchema,
  t_IssuesUpdateCommentBodySchema,
  t_IssuesUpdateCommentParamSchema,
  t_IssuesUpdateLabelBodySchema,
  t_IssuesUpdateLabelParamSchema,
  t_IssuesUpdateMilestoneBodySchema,
  t_IssuesUpdateMilestoneParamSchema,
  t_IssuesUpdateParamSchema,
  t_LicensesGetAllCommonlyUsedQuerySchema,
  t_LicensesGetForRepoParamSchema,
  t_LicensesGetForRepoQuerySchema,
  t_LicensesGetParamSchema,
  t_MarkdownRenderBodySchema,
  t_MarkdownRenderRawBodySchema,
  t_MetaGetOctocatQuerySchema,
  t_MigrationsCancelImportParamSchema,
  t_MigrationsDeleteArchiveForAuthenticatedUserParamSchema,
  t_MigrationsDeleteArchiveForOrgParamSchema,
  t_MigrationsDownloadArchiveForOrgParamSchema,
  t_MigrationsGetArchiveForAuthenticatedUserParamSchema,
  t_MigrationsGetCommitAuthorsParamSchema,
  t_MigrationsGetCommitAuthorsQuerySchema,
  t_MigrationsGetImportStatusParamSchema,
  t_MigrationsGetLargeFilesParamSchema,
  t_MigrationsGetStatusForAuthenticatedUserParamSchema,
  t_MigrationsGetStatusForAuthenticatedUserQuerySchema,
  t_MigrationsGetStatusForOrgParamSchema,
  t_MigrationsGetStatusForOrgQuerySchema,
  t_MigrationsListForAuthenticatedUserQuerySchema,
  t_MigrationsListForOrgParamSchema,
  t_MigrationsListForOrgQuerySchema,
  t_MigrationsListReposForAuthenticatedUserParamSchema,
  t_MigrationsListReposForAuthenticatedUserQuerySchema,
  t_MigrationsListReposForOrgParamSchema,
  t_MigrationsListReposForOrgQuerySchema,
  t_MigrationsMapCommitAuthorBodySchema,
  t_MigrationsMapCommitAuthorParamSchema,
  t_MigrationsSetLfsPreferenceBodySchema,
  t_MigrationsSetLfsPreferenceParamSchema,
  t_MigrationsStartForAuthenticatedUserBodySchema,
  t_MigrationsStartForOrgBodySchema,
  t_MigrationsStartForOrgParamSchema,
  t_MigrationsStartImportBodySchema,
  t_MigrationsStartImportParamSchema,
  t_MigrationsUnlockRepoForAuthenticatedUserParamSchema,
  t_MigrationsUnlockRepoForOrgParamSchema,
  t_MigrationsUpdateImportBodySchema,
  t_MigrationsUpdateImportParamSchema,
  t_OidcGetOidcCustomSubTemplateForOrgParamSchema,
  t_OidcUpdateOidcCustomSubTemplateForOrgBodySchema,
  t_OidcUpdateOidcCustomSubTemplateForOrgParamSchema,
  t_OrgsAddSecurityManagerTeamParamSchema,
  t_OrgsAssignTeamToOrgRoleParamSchema,
  t_OrgsAssignUserToOrgRoleParamSchema,
  t_OrgsBlockUserParamSchema,
  t_OrgsCancelInvitationParamSchema,
  t_OrgsCheckBlockedUserParamSchema,
  t_OrgsCheckMembershipForUserParamSchema,
  t_OrgsCheckPublicMembershipForUserParamSchema,
  t_OrgsConvertMemberToOutsideCollaboratorBodySchema,
  t_OrgsConvertMemberToOutsideCollaboratorParamSchema,
  t_OrgsCreateInvitationBodySchema,
  t_OrgsCreateInvitationParamSchema,
  t_OrgsCreateIssueTypeBodySchema,
  t_OrgsCreateIssueTypeParamSchema,
  t_OrgsCreateOrUpdateCustomPropertiesBodySchema,
  t_OrgsCreateOrUpdateCustomPropertiesParamSchema,
  t_OrgsCreateOrUpdateCustomPropertiesValuesForReposBodySchema,
  t_OrgsCreateOrUpdateCustomPropertiesValuesForReposParamSchema,
  t_OrgsCreateOrUpdateCustomPropertyBodySchema,
  t_OrgsCreateOrUpdateCustomPropertyParamSchema,
  t_OrgsCreateWebhookBodySchema,
  t_OrgsCreateWebhookParamSchema,
  t_OrgsDeleteIssueTypeParamSchema,
  t_OrgsDeleteParamSchema,
  t_OrgsDeleteWebhookParamSchema,
  t_OrgsEnableOrDisableSecurityProductOnAllOrgReposBodySchema,
  t_OrgsEnableOrDisableSecurityProductOnAllOrgReposParamSchema,
  t_OrgsGetAllCustomPropertiesParamSchema,
  t_OrgsGetCustomPropertyParamSchema,
  t_OrgsGetMembershipForAuthenticatedUserParamSchema,
  t_OrgsGetMembershipForUserParamSchema,
  t_OrgsGetOrgRoleParamSchema,
  t_OrgsGetOrgRulesetHistoryParamSchema,
  t_OrgsGetOrgRulesetHistoryQuerySchema,
  t_OrgsGetOrgRulesetVersionParamSchema,
  t_OrgsGetParamSchema,
  t_OrgsGetWebhookConfigForOrgParamSchema,
  t_OrgsGetWebhookDeliveryParamSchema,
  t_OrgsGetWebhookParamSchema,
  t_OrgsListAppInstallationsParamSchema,
  t_OrgsListAppInstallationsQuerySchema,
  t_OrgsListAttestationsParamSchema,
  t_OrgsListAttestationsQuerySchema,
  t_OrgsListBlockedUsersParamSchema,
  t_OrgsListBlockedUsersQuerySchema,
  t_OrgsListCustomPropertiesValuesForReposParamSchema,
  t_OrgsListCustomPropertiesValuesForReposQuerySchema,
  t_OrgsListFailedInvitationsParamSchema,
  t_OrgsListFailedInvitationsQuerySchema,
  t_OrgsListForAuthenticatedUserQuerySchema,
  t_OrgsListForUserParamSchema,
  t_OrgsListForUserQuerySchema,
  t_OrgsListInvitationTeamsParamSchema,
  t_OrgsListInvitationTeamsQuerySchema,
  t_OrgsListIssueTypesParamSchema,
  t_OrgsListMembersParamSchema,
  t_OrgsListMembersQuerySchema,
  t_OrgsListMembershipsForAuthenticatedUserQuerySchema,
  t_OrgsListOrgRoleTeamsParamSchema,
  t_OrgsListOrgRoleTeamsQuerySchema,
  t_OrgsListOrgRoleUsersParamSchema,
  t_OrgsListOrgRoleUsersQuerySchema,
  t_OrgsListOrgRolesParamSchema,
  t_OrgsListOutsideCollaboratorsParamSchema,
  t_OrgsListOutsideCollaboratorsQuerySchema,
  t_OrgsListPatGrantRepositoriesParamSchema,
  t_OrgsListPatGrantRepositoriesQuerySchema,
  t_OrgsListPatGrantRequestRepositoriesParamSchema,
  t_OrgsListPatGrantRequestRepositoriesQuerySchema,
  t_OrgsListPatGrantRequestsParamSchema,
  t_OrgsListPatGrantRequestsQuerySchema,
  t_OrgsListPatGrantsParamSchema,
  t_OrgsListPatGrantsQuerySchema,
  t_OrgsListPendingInvitationsParamSchema,
  t_OrgsListPendingInvitationsQuerySchema,
  t_OrgsListPublicMembersParamSchema,
  t_OrgsListPublicMembersQuerySchema,
  t_OrgsListQuerySchema,
  t_OrgsListSecurityManagerTeamsParamSchema,
  t_OrgsListWebhookDeliveriesParamSchema,
  t_OrgsListWebhookDeliveriesQuerySchema,
  t_OrgsListWebhooksParamSchema,
  t_OrgsListWebhooksQuerySchema,
  t_OrgsPingWebhookParamSchema,
  t_OrgsRedeliverWebhookDeliveryParamSchema,
  t_OrgsRemoveCustomPropertyParamSchema,
  t_OrgsRemoveMemberParamSchema,
  t_OrgsRemoveMembershipForUserParamSchema,
  t_OrgsRemoveOutsideCollaboratorParamSchema,
  t_OrgsRemovePublicMembershipForAuthenticatedUserParamSchema,
  t_OrgsRemoveSecurityManagerTeamParamSchema,
  t_OrgsReviewPatGrantRequestBodySchema,
  t_OrgsReviewPatGrantRequestParamSchema,
  t_OrgsReviewPatGrantRequestsInBulkBodySchema,
  t_OrgsReviewPatGrantRequestsInBulkParamSchema,
  t_OrgsRevokeAllOrgRolesTeamParamSchema,
  t_OrgsRevokeAllOrgRolesUserParamSchema,
  t_OrgsRevokeOrgRoleTeamParamSchema,
  t_OrgsRevokeOrgRoleUserParamSchema,
  t_OrgsSetMembershipForUserBodySchema,
  t_OrgsSetMembershipForUserParamSchema,
  t_OrgsSetPublicMembershipForAuthenticatedUserParamSchema,
  t_OrgsUnblockUserParamSchema,
  t_OrgsUpdateBodySchema,
  t_OrgsUpdateIssueTypeBodySchema,
  t_OrgsUpdateIssueTypeParamSchema,
  t_OrgsUpdateMembershipForAuthenticatedUserBodySchema,
  t_OrgsUpdateMembershipForAuthenticatedUserParamSchema,
  t_OrgsUpdateParamSchema,
  t_OrgsUpdatePatAccessBodySchema,
  t_OrgsUpdatePatAccessParamSchema,
  t_OrgsUpdatePatAccessesBodySchema,
  t_OrgsUpdatePatAccessesParamSchema,
  t_OrgsUpdateWebhookBodySchema,
  t_OrgsUpdateWebhookConfigForOrgBodySchema,
  t_OrgsUpdateWebhookConfigForOrgParamSchema,
  t_OrgsUpdateWebhookParamSchema,
  t_PackagesDeletePackageForAuthenticatedUserParamSchema,
  t_PackagesDeletePackageForOrgParamSchema,
  t_PackagesDeletePackageForUserParamSchema,
  t_PackagesDeletePackageVersionForAuthenticatedUserParamSchema,
  t_PackagesDeletePackageVersionForOrgParamSchema,
  t_PackagesDeletePackageVersionForUserParamSchema,
  t_PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParamSchema,
  t_PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQuerySchema,
  t_PackagesGetAllPackageVersionsForPackageOwnedByOrgParamSchema,
  t_PackagesGetAllPackageVersionsForPackageOwnedByOrgQuerySchema,
  t_PackagesGetAllPackageVersionsForPackageOwnedByUserParamSchema,
  t_PackagesGetPackageForAuthenticatedUserParamSchema,
  t_PackagesGetPackageForOrganizationParamSchema,
  t_PackagesGetPackageForUserParamSchema,
  t_PackagesGetPackageVersionForAuthenticatedUserParamSchema,
  t_PackagesGetPackageVersionForOrganizationParamSchema,
  t_PackagesGetPackageVersionForUserParamSchema,
  t_PackagesListDockerMigrationConflictingPackagesForOrganizationParamSchema,
  t_PackagesListDockerMigrationConflictingPackagesForUserParamSchema,
  t_PackagesListPackagesForAuthenticatedUserQuerySchema,
  t_PackagesListPackagesForOrganizationParamSchema,
  t_PackagesListPackagesForOrganizationQuerySchema,
  t_PackagesListPackagesForUserParamSchema,
  t_PackagesListPackagesForUserQuerySchema,
  t_PackagesRestorePackageForAuthenticatedUserParamSchema,
  t_PackagesRestorePackageForAuthenticatedUserQuerySchema,
  t_PackagesRestorePackageForOrgParamSchema,
  t_PackagesRestorePackageForOrgQuerySchema,
  t_PackagesRestorePackageForUserParamSchema,
  t_PackagesRestorePackageForUserQuerySchema,
  t_PackagesRestorePackageVersionForAuthenticatedUserParamSchema,
  t_PackagesRestorePackageVersionForOrgParamSchema,
  t_PackagesRestorePackageVersionForUserParamSchema,
  t_PrivateRegistriesCreateOrgPrivateRegistryBodySchema,
  t_PrivateRegistriesCreateOrgPrivateRegistryParamSchema,
  t_PrivateRegistriesDeleteOrgPrivateRegistryParamSchema,
  t_PrivateRegistriesGetOrgPrivateRegistryParamSchema,
  t_PrivateRegistriesGetOrgPublicKeyParamSchema,
  t_PrivateRegistriesListOrgPrivateRegistriesParamSchema,
  t_PrivateRegistriesListOrgPrivateRegistriesQuerySchema,
  t_PrivateRegistriesUpdateOrgPrivateRegistryBodySchema,
  t_PrivateRegistriesUpdateOrgPrivateRegistryParamSchema,
  t_ProjectsAddCollaboratorBodySchema,
  t_ProjectsAddCollaboratorParamSchema,
  t_ProjectsCreateCardBodySchema,
  t_ProjectsCreateCardParamSchema,
  t_ProjectsCreateColumnBodySchema,
  t_ProjectsCreateColumnParamSchema,
  t_ProjectsCreateForAuthenticatedUserBodySchema,
  t_ProjectsCreateForOrgBodySchema,
  t_ProjectsCreateForOrgParamSchema,
  t_ProjectsCreateForRepoBodySchema,
  t_ProjectsCreateForRepoParamSchema,
  t_ProjectsDeleteCardParamSchema,
  t_ProjectsDeleteColumnParamSchema,
  t_ProjectsDeleteParamSchema,
  t_ProjectsGetCardParamSchema,
  t_ProjectsGetColumnParamSchema,
  t_ProjectsGetParamSchema,
  t_ProjectsGetPermissionForUserParamSchema,
  t_ProjectsListCardsParamSchema,
  t_ProjectsListCardsQuerySchema,
  t_ProjectsListCollaboratorsParamSchema,
  t_ProjectsListCollaboratorsQuerySchema,
  t_ProjectsListColumnsParamSchema,
  t_ProjectsListColumnsQuerySchema,
  t_ProjectsListForOrgParamSchema,
  t_ProjectsListForOrgQuerySchema,
  t_ProjectsListForRepoParamSchema,
  t_ProjectsListForRepoQuerySchema,
  t_ProjectsListForUserParamSchema,
  t_ProjectsListForUserQuerySchema,
  t_ProjectsMoveCardBodySchema,
  t_ProjectsMoveCardParamSchema,
  t_ProjectsMoveColumnBodySchema,
  t_ProjectsMoveColumnParamSchema,
  t_ProjectsRemoveCollaboratorParamSchema,
  t_ProjectsUpdateBodySchema,
  t_ProjectsUpdateCardBodySchema,
  t_ProjectsUpdateCardParamSchema,
  t_ProjectsUpdateColumnBodySchema,
  t_ProjectsUpdateColumnParamSchema,
  t_ProjectsUpdateParamSchema,
  t_PullsCheckIfMergedParamSchema,
  t_PullsCreateBodySchema,
  t_PullsCreateParamSchema,
  t_PullsCreateReplyForReviewCommentBodySchema,
  t_PullsCreateReplyForReviewCommentParamSchema,
  t_PullsCreateReviewBodySchema,
  t_PullsCreateReviewCommentBodySchema,
  t_PullsCreateReviewCommentParamSchema,
  t_PullsCreateReviewParamSchema,
  t_PullsDeletePendingReviewParamSchema,
  t_PullsDeleteReviewCommentParamSchema,
  t_PullsDismissReviewBodySchema,
  t_PullsDismissReviewParamSchema,
  t_PullsGetParamSchema,
  t_PullsGetReviewCommentParamSchema,
  t_PullsGetReviewParamSchema,
  t_PullsListCommentsForReviewParamSchema,
  t_PullsListCommentsForReviewQuerySchema,
  t_PullsListCommitsParamSchema,
  t_PullsListCommitsQuerySchema,
  t_PullsListFilesParamSchema,
  t_PullsListFilesQuerySchema,
  t_PullsListParamSchema,
  t_PullsListQuerySchema,
  t_PullsListRequestedReviewersParamSchema,
  t_PullsListReviewCommentsForRepoParamSchema,
  t_PullsListReviewCommentsForRepoQuerySchema,
  t_PullsListReviewCommentsParamSchema,
  t_PullsListReviewCommentsQuerySchema,
  t_PullsListReviewsParamSchema,
  t_PullsListReviewsQuerySchema,
  t_PullsMergeBodySchema,
  t_PullsMergeParamSchema,
  t_PullsRemoveRequestedReviewersBodySchema,
  t_PullsRemoveRequestedReviewersParamSchema,
  t_PullsRequestReviewersBodySchema,
  t_PullsRequestReviewersParamSchema,
  t_PullsSubmitReviewBodySchema,
  t_PullsSubmitReviewParamSchema,
  t_PullsUpdateBodySchema,
  t_PullsUpdateBranchBodySchema,
  t_PullsUpdateBranchParamSchema,
  t_PullsUpdateParamSchema,
  t_PullsUpdateReviewBodySchema,
  t_PullsUpdateReviewCommentBodySchema,
  t_PullsUpdateReviewCommentParamSchema,
  t_PullsUpdateReviewParamSchema,
  t_ReactionsCreateForCommitCommentBodySchema,
  t_ReactionsCreateForCommitCommentParamSchema,
  t_ReactionsCreateForIssueBodySchema,
  t_ReactionsCreateForIssueCommentBodySchema,
  t_ReactionsCreateForIssueCommentParamSchema,
  t_ReactionsCreateForIssueParamSchema,
  t_ReactionsCreateForPullRequestReviewCommentBodySchema,
  t_ReactionsCreateForPullRequestReviewCommentParamSchema,
  t_ReactionsCreateForReleaseBodySchema,
  t_ReactionsCreateForReleaseParamSchema,
  t_ReactionsCreateForTeamDiscussionCommentInOrgBodySchema,
  t_ReactionsCreateForTeamDiscussionCommentInOrgParamSchema,
  t_ReactionsCreateForTeamDiscussionCommentLegacyBodySchema,
  t_ReactionsCreateForTeamDiscussionCommentLegacyParamSchema,
  t_ReactionsCreateForTeamDiscussionInOrgBodySchema,
  t_ReactionsCreateForTeamDiscussionInOrgParamSchema,
  t_ReactionsCreateForTeamDiscussionLegacyBodySchema,
  t_ReactionsCreateForTeamDiscussionLegacyParamSchema,
  t_ReactionsDeleteForCommitCommentParamSchema,
  t_ReactionsDeleteForIssueCommentParamSchema,
  t_ReactionsDeleteForIssueParamSchema,
  t_ReactionsDeleteForPullRequestCommentParamSchema,
  t_ReactionsDeleteForReleaseParamSchema,
  t_ReactionsDeleteForTeamDiscussionCommentParamSchema,
  t_ReactionsDeleteForTeamDiscussionParamSchema,
  t_ReactionsListForCommitCommentParamSchema,
  t_ReactionsListForCommitCommentQuerySchema,
  t_ReactionsListForIssueCommentParamSchema,
  t_ReactionsListForIssueCommentQuerySchema,
  t_ReactionsListForIssueParamSchema,
  t_ReactionsListForIssueQuerySchema,
  t_ReactionsListForPullRequestReviewCommentParamSchema,
  t_ReactionsListForPullRequestReviewCommentQuerySchema,
  t_ReactionsListForReleaseParamSchema,
  t_ReactionsListForReleaseQuerySchema,
  t_ReactionsListForTeamDiscussionCommentInOrgParamSchema,
  t_ReactionsListForTeamDiscussionCommentInOrgQuerySchema,
  t_ReactionsListForTeamDiscussionCommentLegacyParamSchema,
  t_ReactionsListForTeamDiscussionCommentLegacyQuerySchema,
  t_ReactionsListForTeamDiscussionInOrgParamSchema,
  t_ReactionsListForTeamDiscussionInOrgQuerySchema,
  t_ReactionsListForTeamDiscussionLegacyParamSchema,
  t_ReactionsListForTeamDiscussionLegacyQuerySchema,
  t_ReposAcceptInvitationForAuthenticatedUserParamSchema,
  t_ReposAddAppAccessRestrictionsBodySchema,
  t_ReposAddAppAccessRestrictionsParamSchema,
  t_ReposAddCollaboratorBodySchema,
  t_ReposAddCollaboratorParamSchema,
  t_ReposAddStatusCheckContextsBodySchema,
  t_ReposAddStatusCheckContextsParamSchema,
  t_ReposAddTeamAccessRestrictionsBodySchema,
  t_ReposAddTeamAccessRestrictionsParamSchema,
  t_ReposAddUserAccessRestrictionsBodySchema,
  t_ReposAddUserAccessRestrictionsParamSchema,
  t_ReposCancelPagesDeploymentParamSchema,
  t_ReposCheckAutomatedSecurityFixesParamSchema,
  t_ReposCheckCollaboratorParamSchema,
  t_ReposCheckPrivateVulnerabilityReportingParamSchema,
  t_ReposCheckVulnerabilityAlertsParamSchema,
  t_ReposCodeownersErrorsParamSchema,
  t_ReposCodeownersErrorsQuerySchema,
  t_ReposCompareCommitsParamSchema,
  t_ReposCompareCommitsQuerySchema,
  t_ReposCreateAttestationBodySchema,
  t_ReposCreateAttestationParamSchema,
  t_ReposCreateAutolinkBodySchema,
  t_ReposCreateAutolinkParamSchema,
  t_ReposCreateCommitCommentBodySchema,
  t_ReposCreateCommitCommentParamSchema,
  t_ReposCreateCommitSignatureProtectionParamSchema,
  t_ReposCreateCommitStatusBodySchema,
  t_ReposCreateCommitStatusParamSchema,
  t_ReposCreateDeployKeyBodySchema,
  t_ReposCreateDeployKeyParamSchema,
  t_ReposCreateDeploymentBodySchema,
  t_ReposCreateDeploymentBranchPolicyBodySchema,
  t_ReposCreateDeploymentBranchPolicyParamSchema,
  t_ReposCreateDeploymentParamSchema,
  t_ReposCreateDeploymentProtectionRuleBodySchema,
  t_ReposCreateDeploymentProtectionRuleParamSchema,
  t_ReposCreateDeploymentStatusBodySchema,
  t_ReposCreateDeploymentStatusParamSchema,
  t_ReposCreateDispatchEventBodySchema,
  t_ReposCreateDispatchEventParamSchema,
  t_ReposCreateForAuthenticatedUserBodySchema,
  t_ReposCreateForkBodySchema,
  t_ReposCreateForkParamSchema,
  t_ReposCreateInOrgBodySchema,
  t_ReposCreateInOrgParamSchema,
  t_ReposCreateOrUpdateCustomPropertiesValuesBodySchema,
  t_ReposCreateOrUpdateCustomPropertiesValuesParamSchema,
  t_ReposCreateOrUpdateEnvironmentBodySchema,
  t_ReposCreateOrUpdateEnvironmentParamSchema,
  t_ReposCreateOrUpdateFileContentsBodySchema,
  t_ReposCreateOrUpdateFileContentsParamSchema,
  t_ReposCreateOrgRulesetBodySchema,
  t_ReposCreateOrgRulesetParamSchema,
  t_ReposCreatePagesDeploymentBodySchema,
  t_ReposCreatePagesDeploymentParamSchema,
  t_ReposCreatePagesSiteBodySchema,
  t_ReposCreatePagesSiteParamSchema,
  t_ReposCreateReleaseBodySchema,
  t_ReposCreateReleaseParamSchema,
  t_ReposCreateRepoRulesetBodySchema,
  t_ReposCreateRepoRulesetParamSchema,
  t_ReposCreateTagProtectionBodySchema,
  t_ReposCreateTagProtectionParamSchema,
  t_ReposCreateUsingTemplateBodySchema,
  t_ReposCreateUsingTemplateParamSchema,
  t_ReposCreateWebhookBodySchema,
  t_ReposCreateWebhookParamSchema,
  t_ReposDeclineInvitationForAuthenticatedUserParamSchema,
  t_ReposDeleteAccessRestrictionsParamSchema,
  t_ReposDeleteAdminBranchProtectionParamSchema,
  t_ReposDeleteAnEnvironmentParamSchema,
  t_ReposDeleteAutolinkParamSchema,
  t_ReposDeleteBranchProtectionParamSchema,
  t_ReposDeleteCommitCommentParamSchema,
  t_ReposDeleteCommitSignatureProtectionParamSchema,
  t_ReposDeleteDeployKeyParamSchema,
  t_ReposDeleteDeploymentBranchPolicyParamSchema,
  t_ReposDeleteDeploymentParamSchema,
  t_ReposDeleteFileBodySchema,
  t_ReposDeleteFileParamSchema,
  t_ReposDeleteInvitationParamSchema,
  t_ReposDeleteOrgRulesetParamSchema,
  t_ReposDeletePagesSiteParamSchema,
  t_ReposDeleteParamSchema,
  t_ReposDeletePullRequestReviewProtectionParamSchema,
  t_ReposDeleteReleaseAssetParamSchema,
  t_ReposDeleteReleaseParamSchema,
  t_ReposDeleteRepoRulesetParamSchema,
  t_ReposDeleteTagProtectionParamSchema,
  t_ReposDeleteWebhookParamSchema,
  t_ReposDisableAutomatedSecurityFixesParamSchema,
  t_ReposDisableDeploymentProtectionRuleParamSchema,
  t_ReposDisablePrivateVulnerabilityReportingParamSchema,
  t_ReposDisableVulnerabilityAlertsParamSchema,
  t_ReposDownloadTarballArchiveParamSchema,
  t_ReposDownloadZipballArchiveParamSchema,
  t_ReposEnableAutomatedSecurityFixesParamSchema,
  t_ReposEnablePrivateVulnerabilityReportingParamSchema,
  t_ReposEnableVulnerabilityAlertsParamSchema,
  t_ReposGenerateReleaseNotesBodySchema,
  t_ReposGenerateReleaseNotesParamSchema,
  t_ReposGetAccessRestrictionsParamSchema,
  t_ReposGetAdminBranchProtectionParamSchema,
  t_ReposGetAllDeploymentProtectionRulesParamSchema,
  t_ReposGetAllEnvironmentsParamSchema,
  t_ReposGetAllEnvironmentsQuerySchema,
  t_ReposGetAllStatusCheckContextsParamSchema,
  t_ReposGetAllTopicsParamSchema,
  t_ReposGetAllTopicsQuerySchema,
  t_ReposGetAppsWithAccessToProtectedBranchParamSchema,
  t_ReposGetAutolinkParamSchema,
  t_ReposGetBranchParamSchema,
  t_ReposGetBranchProtectionParamSchema,
  t_ReposGetBranchRulesParamSchema,
  t_ReposGetBranchRulesQuerySchema,
  t_ReposGetClonesParamSchema,
  t_ReposGetClonesQuerySchema,
  t_ReposGetCodeFrequencyStatsParamSchema,
  t_ReposGetCollaboratorPermissionLevelParamSchema,
  t_ReposGetCombinedStatusForRefParamSchema,
  t_ReposGetCombinedStatusForRefQuerySchema,
  t_ReposGetCommitActivityStatsParamSchema,
  t_ReposGetCommitCommentParamSchema,
  t_ReposGetCommitParamSchema,
  t_ReposGetCommitQuerySchema,
  t_ReposGetCommitSignatureProtectionParamSchema,
  t_ReposGetCommunityProfileMetricsParamSchema,
  t_ReposGetContentParamSchema,
  t_ReposGetContentQuerySchema,
  t_ReposGetContributorsStatsParamSchema,
  t_ReposGetCustomDeploymentProtectionRuleParamSchema,
  t_ReposGetCustomPropertiesValuesParamSchema,
  t_ReposGetDeployKeyParamSchema,
  t_ReposGetDeploymentBranchPolicyParamSchema,
  t_ReposGetDeploymentParamSchema,
  t_ReposGetDeploymentStatusParamSchema,
  t_ReposGetEnvironmentParamSchema,
  t_ReposGetLatestPagesBuildParamSchema,
  t_ReposGetLatestReleaseParamSchema,
  t_ReposGetOrgRuleSuiteParamSchema,
  t_ReposGetOrgRuleSuitesParamSchema,
  t_ReposGetOrgRuleSuitesQuerySchema,
  t_ReposGetOrgRulesetParamSchema,
  t_ReposGetOrgRulesetsParamSchema,
  t_ReposGetOrgRulesetsQuerySchema,
  t_ReposGetPagesBuildParamSchema,
  t_ReposGetPagesDeploymentParamSchema,
  t_ReposGetPagesHealthCheckParamSchema,
  t_ReposGetPagesParamSchema,
  t_ReposGetParamSchema,
  t_ReposGetParticipationStatsParamSchema,
  t_ReposGetPullRequestReviewProtectionParamSchema,
  t_ReposGetPunchCardStatsParamSchema,
  t_ReposGetReadmeInDirectoryParamSchema,
  t_ReposGetReadmeInDirectoryQuerySchema,
  t_ReposGetReadmeParamSchema,
  t_ReposGetReadmeQuerySchema,
  t_ReposGetReleaseAssetParamSchema,
  t_ReposGetReleaseByTagParamSchema,
  t_ReposGetReleaseParamSchema,
  t_ReposGetRepoRuleSuiteParamSchema,
  t_ReposGetRepoRuleSuitesParamSchema,
  t_ReposGetRepoRuleSuitesQuerySchema,
  t_ReposGetRepoRulesetHistoryParamSchema,
  t_ReposGetRepoRulesetHistoryQuerySchema,
  t_ReposGetRepoRulesetParamSchema,
  t_ReposGetRepoRulesetQuerySchema,
  t_ReposGetRepoRulesetVersionParamSchema,
  t_ReposGetRepoRulesetsParamSchema,
  t_ReposGetRepoRulesetsQuerySchema,
  t_ReposGetStatusChecksProtectionParamSchema,
  t_ReposGetTeamsWithAccessToProtectedBranchParamSchema,
  t_ReposGetTopPathsParamSchema,
  t_ReposGetTopReferrersParamSchema,
  t_ReposGetUsersWithAccessToProtectedBranchParamSchema,
  t_ReposGetViewsParamSchema,
  t_ReposGetViewsQuerySchema,
  t_ReposGetWebhookConfigForRepoParamSchema,
  t_ReposGetWebhookDeliveryParamSchema,
  t_ReposGetWebhookParamSchema,
  t_ReposListActivitiesParamSchema,
  t_ReposListActivitiesQuerySchema,
  t_ReposListAttestationsParamSchema,
  t_ReposListAttestationsQuerySchema,
  t_ReposListAutolinksParamSchema,
  t_ReposListBranchesForHeadCommitParamSchema,
  t_ReposListBranchesParamSchema,
  t_ReposListBranchesQuerySchema,
  t_ReposListCollaboratorsParamSchema,
  t_ReposListCollaboratorsQuerySchema,
  t_ReposListCommentsForCommitParamSchema,
  t_ReposListCommentsForCommitQuerySchema,
  t_ReposListCommitCommentsForRepoParamSchema,
  t_ReposListCommitCommentsForRepoQuerySchema,
  t_ReposListCommitStatusesForRefParamSchema,
  t_ReposListCommitStatusesForRefQuerySchema,
  t_ReposListCommitsParamSchema,
  t_ReposListCommitsQuerySchema,
  t_ReposListContributorsParamSchema,
  t_ReposListContributorsQuerySchema,
  t_ReposListCustomDeploymentRuleIntegrationsParamSchema,
  t_ReposListCustomDeploymentRuleIntegrationsQuerySchema,
  t_ReposListDeployKeysParamSchema,
  t_ReposListDeployKeysQuerySchema,
  t_ReposListDeploymentBranchPoliciesParamSchema,
  t_ReposListDeploymentBranchPoliciesQuerySchema,
  t_ReposListDeploymentStatusesParamSchema,
  t_ReposListDeploymentStatusesQuerySchema,
  t_ReposListDeploymentsParamSchema,
  t_ReposListDeploymentsQuerySchema,
  t_ReposListForAuthenticatedUserQuerySchema,
  t_ReposListForOrgParamSchema,
  t_ReposListForOrgQuerySchema,
  t_ReposListForUserParamSchema,
  t_ReposListForUserQuerySchema,
  t_ReposListForksParamSchema,
  t_ReposListForksQuerySchema,
  t_ReposListInvitationsForAuthenticatedUserQuerySchema,
  t_ReposListInvitationsParamSchema,
  t_ReposListInvitationsQuerySchema,
  t_ReposListLanguagesParamSchema,
  t_ReposListPagesBuildsParamSchema,
  t_ReposListPagesBuildsQuerySchema,
  t_ReposListPublicQuerySchema,
  t_ReposListPullRequestsAssociatedWithCommitParamSchema,
  t_ReposListPullRequestsAssociatedWithCommitQuerySchema,
  t_ReposListReleaseAssetsParamSchema,
  t_ReposListReleaseAssetsQuerySchema,
  t_ReposListReleasesParamSchema,
  t_ReposListReleasesQuerySchema,
  t_ReposListTagProtectionParamSchema,
  t_ReposListTagsParamSchema,
  t_ReposListTagsQuerySchema,
  t_ReposListTeamsParamSchema,
  t_ReposListTeamsQuerySchema,
  t_ReposListWebhookDeliveriesParamSchema,
  t_ReposListWebhookDeliveriesQuerySchema,
  t_ReposListWebhooksParamSchema,
  t_ReposListWebhooksQuerySchema,
  t_ReposMergeBodySchema,
  t_ReposMergeParamSchema,
  t_ReposMergeUpstreamBodySchema,
  t_ReposMergeUpstreamParamSchema,
  t_ReposPingWebhookParamSchema,
  t_ReposRedeliverWebhookDeliveryParamSchema,
  t_ReposRemoveAppAccessRestrictionsBodySchema,
  t_ReposRemoveAppAccessRestrictionsParamSchema,
  t_ReposRemoveCollaboratorParamSchema,
  t_ReposRemoveStatusCheckContextsBodySchema,
  t_ReposRemoveStatusCheckContextsParamSchema,
  t_ReposRemoveStatusCheckProtectionParamSchema,
  t_ReposRemoveTeamAccessRestrictionsBodySchema,
  t_ReposRemoveTeamAccessRestrictionsParamSchema,
  t_ReposRemoveUserAccessRestrictionsBodySchema,
  t_ReposRemoveUserAccessRestrictionsParamSchema,
  t_ReposRenameBranchBodySchema,
  t_ReposRenameBranchParamSchema,
  t_ReposReplaceAllTopicsBodySchema,
  t_ReposReplaceAllTopicsParamSchema,
  t_ReposRequestPagesBuildParamSchema,
  t_ReposSetAdminBranchProtectionParamSchema,
  t_ReposSetAppAccessRestrictionsBodySchema,
  t_ReposSetAppAccessRestrictionsParamSchema,
  t_ReposSetStatusCheckContextsBodySchema,
  t_ReposSetStatusCheckContextsParamSchema,
  t_ReposSetTeamAccessRestrictionsBodySchema,
  t_ReposSetTeamAccessRestrictionsParamSchema,
  t_ReposSetUserAccessRestrictionsBodySchema,
  t_ReposSetUserAccessRestrictionsParamSchema,
  t_ReposTestPushWebhookParamSchema,
  t_ReposTransferBodySchema,
  t_ReposTransferParamSchema,
  t_ReposUpdateBodySchema,
  t_ReposUpdateBranchProtectionBodySchema,
  t_ReposUpdateBranchProtectionParamSchema,
  t_ReposUpdateCommitCommentBodySchema,
  t_ReposUpdateCommitCommentParamSchema,
  t_ReposUpdateDeploymentBranchPolicyBodySchema,
  t_ReposUpdateDeploymentBranchPolicyParamSchema,
  t_ReposUpdateInformationAboutPagesSiteBodySchema,
  t_ReposUpdateInformationAboutPagesSiteParamSchema,
  t_ReposUpdateInvitationBodySchema,
  t_ReposUpdateInvitationParamSchema,
  t_ReposUpdateOrgRulesetBodySchema,
  t_ReposUpdateOrgRulesetParamSchema,
  t_ReposUpdateParamSchema,
  t_ReposUpdatePullRequestReviewProtectionBodySchema,
  t_ReposUpdatePullRequestReviewProtectionParamSchema,
  t_ReposUpdateReleaseAssetBodySchema,
  t_ReposUpdateReleaseAssetParamSchema,
  t_ReposUpdateReleaseBodySchema,
  t_ReposUpdateReleaseParamSchema,
  t_ReposUpdateRepoRulesetBodySchema,
  t_ReposUpdateRepoRulesetParamSchema,
  t_ReposUpdateStatusCheckProtectionBodySchema,
  t_ReposUpdateStatusCheckProtectionParamSchema,
  t_ReposUpdateWebhookBodySchema,
  t_ReposUpdateWebhookConfigForRepoBodySchema,
  t_ReposUpdateWebhookConfigForRepoParamSchema,
  t_ReposUpdateWebhookParamSchema,
  t_ReposUploadReleaseAssetBodySchema,
  t_ReposUploadReleaseAssetParamSchema,
  t_ReposUploadReleaseAssetQuerySchema,
  t_SearchCodeQuerySchema,
  t_SearchCommitsQuerySchema,
  t_SearchIssuesAndPullRequestsQuerySchema,
  t_SearchLabelsQuerySchema,
  t_SearchReposQuerySchema,
  t_SearchTopicsQuerySchema,
  t_SearchUsersQuerySchema,
  t_SecretScanningCreatePushProtectionBypassBodySchema,
  t_SecretScanningCreatePushProtectionBypassParamSchema,
  t_SecretScanningGetAlertParamSchema,
  t_SecretScanningGetScanHistoryParamSchema,
  t_SecretScanningListAlertsForEnterpriseParamSchema,
  t_SecretScanningListAlertsForEnterpriseQuerySchema,
  t_SecretScanningListAlertsForOrgParamSchema,
  t_SecretScanningListAlertsForOrgQuerySchema,
  t_SecretScanningListAlertsForRepoParamSchema,
  t_SecretScanningListAlertsForRepoQuerySchema,
  t_SecretScanningListLocationsForAlertParamSchema,
  t_SecretScanningListLocationsForAlertQuerySchema,
  t_SecretScanningUpdateAlertBodySchema,
  t_SecretScanningUpdateAlertParamSchema,
  t_SecurityAdvisoriesCreateForkParamSchema,
  t_SecurityAdvisoriesCreatePrivateVulnerabilityReportBodySchema,
  t_SecurityAdvisoriesCreatePrivateVulnerabilityReportParamSchema,
  t_SecurityAdvisoriesCreateRepositoryAdvisoryBodySchema,
  t_SecurityAdvisoriesCreateRepositoryAdvisoryCveRequestParamSchema,
  t_SecurityAdvisoriesCreateRepositoryAdvisoryParamSchema,
  t_SecurityAdvisoriesGetGlobalAdvisoryParamSchema,
  t_SecurityAdvisoriesGetRepositoryAdvisoryParamSchema,
  t_SecurityAdvisoriesListGlobalAdvisoriesQuerySchema,
  t_SecurityAdvisoriesListOrgRepositoryAdvisoriesParamSchema,
  t_SecurityAdvisoriesListOrgRepositoryAdvisoriesQuerySchema,
  t_SecurityAdvisoriesListRepositoryAdvisoriesParamSchema,
  t_SecurityAdvisoriesListRepositoryAdvisoriesQuerySchema,
  t_SecurityAdvisoriesUpdateRepositoryAdvisoryBodySchema,
  t_SecurityAdvisoriesUpdateRepositoryAdvisoryParamSchema,
  t_TeamsAddMemberLegacyParamSchema,
  t_TeamsAddOrUpdateMembershipForUserInOrgBodySchema,
  t_TeamsAddOrUpdateMembershipForUserInOrgParamSchema,
  t_TeamsAddOrUpdateMembershipForUserLegacyBodySchema,
  t_TeamsAddOrUpdateMembershipForUserLegacyParamSchema,
  t_TeamsAddOrUpdateProjectPermissionsInOrgBodySchema,
  t_TeamsAddOrUpdateProjectPermissionsInOrgParamSchema,
  t_TeamsAddOrUpdateProjectPermissionsLegacyBodySchema,
  t_TeamsAddOrUpdateProjectPermissionsLegacyParamSchema,
  t_TeamsAddOrUpdateRepoPermissionsInOrgBodySchema,
  t_TeamsAddOrUpdateRepoPermissionsInOrgParamSchema,
  t_TeamsAddOrUpdateRepoPermissionsLegacyBodySchema,
  t_TeamsAddOrUpdateRepoPermissionsLegacyParamSchema,
  t_TeamsCheckPermissionsForProjectInOrgParamSchema,
  t_TeamsCheckPermissionsForProjectLegacyParamSchema,
  t_TeamsCheckPermissionsForRepoInOrgParamSchema,
  t_TeamsCheckPermissionsForRepoLegacyParamSchema,
  t_TeamsCreateBodySchema,
  t_TeamsCreateDiscussionCommentInOrgBodySchema,
  t_TeamsCreateDiscussionCommentInOrgParamSchema,
  t_TeamsCreateDiscussionCommentLegacyBodySchema,
  t_TeamsCreateDiscussionCommentLegacyParamSchema,
  t_TeamsCreateDiscussionInOrgBodySchema,
  t_TeamsCreateDiscussionInOrgParamSchema,
  t_TeamsCreateDiscussionLegacyBodySchema,
  t_TeamsCreateDiscussionLegacyParamSchema,
  t_TeamsCreateParamSchema,
  t_TeamsDeleteDiscussionCommentInOrgParamSchema,
  t_TeamsDeleteDiscussionCommentLegacyParamSchema,
  t_TeamsDeleteDiscussionInOrgParamSchema,
  t_TeamsDeleteDiscussionLegacyParamSchema,
  t_TeamsDeleteInOrgParamSchema,
  t_TeamsDeleteLegacyParamSchema,
  t_TeamsGetByNameParamSchema,
  t_TeamsGetDiscussionCommentInOrgParamSchema,
  t_TeamsGetDiscussionCommentLegacyParamSchema,
  t_TeamsGetDiscussionInOrgParamSchema,
  t_TeamsGetDiscussionLegacyParamSchema,
  t_TeamsGetLegacyParamSchema,
  t_TeamsGetMemberLegacyParamSchema,
  t_TeamsGetMembershipForUserInOrgParamSchema,
  t_TeamsGetMembershipForUserLegacyParamSchema,
  t_TeamsListChildInOrgParamSchema,
  t_TeamsListChildInOrgQuerySchema,
  t_TeamsListChildLegacyParamSchema,
  t_TeamsListChildLegacyQuerySchema,
  t_TeamsListDiscussionCommentsInOrgParamSchema,
  t_TeamsListDiscussionCommentsInOrgQuerySchema,
  t_TeamsListDiscussionCommentsLegacyParamSchema,
  t_TeamsListDiscussionCommentsLegacyQuerySchema,
  t_TeamsListDiscussionsInOrgParamSchema,
  t_TeamsListDiscussionsInOrgQuerySchema,
  t_TeamsListDiscussionsLegacyParamSchema,
  t_TeamsListDiscussionsLegacyQuerySchema,
  t_TeamsListForAuthenticatedUserQuerySchema,
  t_TeamsListMembersInOrgParamSchema,
  t_TeamsListMembersInOrgQuerySchema,
  t_TeamsListMembersLegacyParamSchema,
  t_TeamsListMembersLegacyQuerySchema,
  t_TeamsListParamSchema,
  t_TeamsListPendingInvitationsInOrgParamSchema,
  t_TeamsListPendingInvitationsInOrgQuerySchema,
  t_TeamsListPendingInvitationsLegacyParamSchema,
  t_TeamsListPendingInvitationsLegacyQuerySchema,
  t_TeamsListProjectsInOrgParamSchema,
  t_TeamsListProjectsInOrgQuerySchema,
  t_TeamsListProjectsLegacyParamSchema,
  t_TeamsListProjectsLegacyQuerySchema,
  t_TeamsListQuerySchema,
  t_TeamsListReposInOrgParamSchema,
  t_TeamsListReposInOrgQuerySchema,
  t_TeamsListReposLegacyParamSchema,
  t_TeamsListReposLegacyQuerySchema,
  t_TeamsRemoveMemberLegacyParamSchema,
  t_TeamsRemoveMembershipForUserInOrgParamSchema,
  t_TeamsRemoveMembershipForUserLegacyParamSchema,
  t_TeamsRemoveProjectInOrgParamSchema,
  t_TeamsRemoveProjectLegacyParamSchema,
  t_TeamsRemoveRepoInOrgParamSchema,
  t_TeamsRemoveRepoLegacyParamSchema,
  t_TeamsUpdateDiscussionCommentInOrgBodySchema,
  t_TeamsUpdateDiscussionCommentInOrgParamSchema,
  t_TeamsUpdateDiscussionCommentLegacyBodySchema,
  t_TeamsUpdateDiscussionCommentLegacyParamSchema,
  t_TeamsUpdateDiscussionInOrgBodySchema,
  t_TeamsUpdateDiscussionInOrgParamSchema,
  t_TeamsUpdateDiscussionLegacyBodySchema,
  t_TeamsUpdateDiscussionLegacyParamSchema,
  t_TeamsUpdateInOrgBodySchema,
  t_TeamsUpdateInOrgParamSchema,
  t_TeamsUpdateLegacyBodySchema,
  t_TeamsUpdateLegacyParamSchema,
  t_UsersAddEmailForAuthenticatedUserBodySchema,
  t_UsersAddSocialAccountForAuthenticatedUserBodySchema,
  t_UsersBlockParamSchema,
  t_UsersCheckBlockedParamSchema,
  t_UsersCheckFollowingForUserParamSchema,
  t_UsersCheckPersonIsFollowedByAuthenticatedParamSchema,
  t_UsersCreateGpgKeyForAuthenticatedUserBodySchema,
  t_UsersCreatePublicSshKeyForAuthenticatedUserBodySchema,
  t_UsersCreateSshSigningKeyForAuthenticatedUserBodySchema,
  t_UsersDeleteEmailForAuthenticatedUserBodySchema,
  t_UsersDeleteGpgKeyForAuthenticatedUserParamSchema,
  t_UsersDeletePublicSshKeyForAuthenticatedUserParamSchema,
  t_UsersDeleteSocialAccountForAuthenticatedUserBodySchema,
  t_UsersDeleteSshSigningKeyForAuthenticatedUserParamSchema,
  t_UsersFollowParamSchema,
  t_UsersGetByIdParamSchema,
  t_UsersGetByUsernameParamSchema,
  t_UsersGetContextForUserParamSchema,
  t_UsersGetContextForUserQuerySchema,
  t_UsersGetGpgKeyForAuthenticatedUserParamSchema,
  t_UsersGetPublicSshKeyForAuthenticatedUserParamSchema,
  t_UsersGetSshSigningKeyForAuthenticatedUserParamSchema,
  t_UsersListAttestationsParamSchema,
  t_UsersListAttestationsQuerySchema,
  t_UsersListBlockedByAuthenticatedUserQuerySchema,
  t_UsersListEmailsForAuthenticatedUserQuerySchema,
  t_UsersListFollowedByAuthenticatedUserQuerySchema,
  t_UsersListFollowersForAuthenticatedUserQuerySchema,
  t_UsersListFollowersForUserParamSchema,
  t_UsersListFollowersForUserQuerySchema,
  t_UsersListFollowingForUserParamSchema,
  t_UsersListFollowingForUserQuerySchema,
  t_UsersListGpgKeysForAuthenticatedUserQuerySchema,
  t_UsersListGpgKeysForUserParamSchema,
  t_UsersListGpgKeysForUserQuerySchema,
  t_UsersListPublicEmailsForAuthenticatedUserQuerySchema,
  t_UsersListPublicKeysForUserParamSchema,
  t_UsersListPublicKeysForUserQuerySchema,
  t_UsersListPublicSshKeysForAuthenticatedUserQuerySchema,
  t_UsersListQuerySchema,
  t_UsersListSocialAccountsForAuthenticatedUserQuerySchema,
  t_UsersListSocialAccountsForUserParamSchema,
  t_UsersListSocialAccountsForUserQuerySchema,
  t_UsersListSshSigningKeysForAuthenticatedUserQuerySchema,
  t_UsersListSshSigningKeysForUserParamSchema,
  t_UsersListSshSigningKeysForUserQuerySchema,
  t_UsersSetPrimaryEmailVisibilityForAuthenticatedUserBodySchema,
  t_UsersUnblockParamSchema,
  t_UsersUnfollowParamSchema,
  t_UsersUpdateAuthenticatedBodySchema,
  t_actions_billing_usage,
  t_actions_cache_list,
  t_actions_cache_usage_by_repository,
  t_actions_cache_usage_org_enterprise,
  t_actions_get_default_workflow_permissions,
  t_actions_hosted_runner,
  t_actions_hosted_runner_image,
  t_actions_hosted_runner_limits,
  t_actions_hosted_runner_machine_spec,
  t_actions_organization_permissions,
  t_actions_public_key,
  t_actions_repository_permissions,
  t_actions_secret,
  t_actions_variable,
  t_actions_workflow_access_to_repository,
  t_activity,
  t_api_insights_route_stats,
  t_api_insights_subject_stats,
  t_api_insights_summary_stats,
  t_api_insights_time_stats,
  t_api_insights_user_stats,
  t_api_overview,
  t_artifact,
  t_authentication_token,
  t_authorization,
  t_autolink,
  t_base_gist,
  t_basic_error,
  t_billing_usage_report,
  t_blob,
  t_branch_protection,
  t_branch_restriction_policy,
  t_branch_short,
  t_branch_with_protection,
  t_campaign_summary,
  t_check_annotation,
  t_check_automated_security_fixes,
  t_check_run,
  t_check_suite,
  t_check_suite_preference,
  t_classroom,
  t_classroom_accepted_assignment,
  t_classroom_assignment,
  t_classroom_assignment_grade,
  t_clone_traffic,
  t_code_frequency_stat,
  t_code_of_conduct,
  t_code_scanning_alert,
  t_code_scanning_alert_instance,
  t_code_scanning_alert_items,
  t_code_scanning_analysis,
  t_code_scanning_analysis_deletion,
  t_code_scanning_autofix,
  t_code_scanning_autofix_commits_response,
  t_code_scanning_codeql_database,
  t_code_scanning_default_setup,
  t_code_scanning_default_setup_update_response,
  t_code_scanning_organization_alert_items,
  t_code_scanning_sarifs_receipt,
  t_code_scanning_sarifs_status,
  t_code_scanning_variant_analysis,
  t_code_scanning_variant_analysis_repo_task,
  t_code_search_result_item,
  t_code_security_configuration,
  t_code_security_configuration_for_repository,
  t_code_security_configuration_repositories,
  t_code_security_default_configurations,
  t_codeowners_errors,
  t_codespace,
  t_codespace_export_details,
  t_codespace_machine,
  t_codespace_with_full_repository,
  t_codespaces_org_secret,
  t_codespaces_permissions_check_for_devcontainer,
  t_codespaces_public_key,
  t_codespaces_secret,
  t_codespaces_user_public_key,
  t_collaborator,
  t_combined_billing_usage,
  t_combined_commit_status,
  t_commit,
  t_commit_activity,
  t_commit_comment,
  t_commit_comparison,
  t_commit_search_result_item,
  t_community_profile,
  t_content_directory,
  t_content_file,
  t_content_submodule,
  t_content_symlink,
  t_content_traffic,
  t_contributor,
  t_contributor_activity,
  t_copilot_organization_details,
  t_copilot_seat_details,
  t_copilot_usage_metrics_day,
  t_custom_deployment_rule_app,
  t_custom_property,
  t_custom_property_value,
  t_dependabot_alert,
  t_dependabot_alert_with_repository,
  t_dependabot_public_key,
  t_dependabot_secret,
  t_dependency_graph_diff,
  t_dependency_graph_spdx_sbom,
  t_deploy_key,
  t_deployment,
  t_deployment_branch_policy,
  t_deployment_protection_rule,
  t_deployment_status,
  t_diff_entry,
  t_email,
  t_empty_object,
  t_environment,
  t_environment_approvals,
  t_event,
  t_feed,
  t_file_commit,
  t_full_repository,
  t_gist_comment,
  t_gist_commit,
  t_gist_simple,
  t_git_commit,
  t_git_ref,
  t_git_tag,
  t_git_tree,
  t_gitignore_template,
  t_global_advisory,
  t_gpg_key,
  t_hook,
  t_hook_delivery,
  t_hook_delivery_item,
  t_hovercard,
  t_import,
  t_installation,
  t_installation_token,
  t_integration,
  t_integration_installation_request,
  t_interaction_limit_response,
  t_issue,
  t_issue_comment,
  t_issue_event,
  t_issue_event_for_issue,
  t_issue_search_result_item,
  t_issue_type,
  t_job,
  t_key,
  t_key_simple,
  t_label,
  t_label_search_result_item,
  t_language,
  t_license,
  t_license_content,
  t_license_simple,
  t_marketplace_listing_plan,
  t_marketplace_purchase,
  t_merged_upstream,
  t_migration,
  t_milestone,
  t_minimal_repository,
  t_network_configuration,
  t_network_settings,
  t_oidc_custom_sub,
  t_oidc_custom_sub_repo,
  t_org_hook,
  t_org_membership,
  t_org_private_registry_configuration,
  t_org_private_registry_configuration_with_selected_repositories,
  t_org_repo_custom_property_values,
  t_organization_actions_secret,
  t_organization_actions_variable,
  t_organization_dependabot_secret,
  t_organization_full,
  t_organization_invitation,
  t_organization_programmatic_access_grant,
  t_organization_programmatic_access_grant_request,
  t_organization_role,
  t_organization_secret_scanning_alert,
  t_organization_simple,
  t_package,
  t_package_version,
  t_packages_billing_usage,
  t_page,
  t_page_build,
  t_page_build_status,
  t_page_deployment,
  t_pages_deployment_status,
  t_pages_health_check,
  t_participation_stats,
  t_pending_deployment,
  t_porter_author,
  t_porter_large_file,
  t_private_user,
  t_project,
  t_project_card,
  t_project_collaborator_permission,
  t_project_column,
  t_protected_branch,
  t_protected_branch_admin_enforced,
  t_protected_branch_pull_request_review,
  t_public_user,
  t_pull_request,
  t_pull_request_merge_result,
  t_pull_request_review,
  t_pull_request_review_comment,
  t_pull_request_review_request,
  t_pull_request_simple,
  t_rate_limit_overview,
  t_reaction,
  t_referrer_traffic,
  t_release,
  t_release_asset,
  t_release_notes_content,
  t_repo_codespaces_secret,
  t_repo_search_result_item,
  t_repository,
  t_repository_advisory,
  t_repository_collaborator_permission,
  t_repository_invitation,
  t_repository_rule_detailed,
  t_repository_rule_violation_error,
  t_repository_ruleset,
  t_repository_subscription,
  t_review_comment,
  t_root,
  t_rule_suite,
  t_rule_suites,
  t_ruleset_version,
  t_ruleset_version_with_state,
  t_runner,
  t_runner_application,
  t_runner_groups_org,
  t_runner_label,
  t_scim_error,
  t_secret_scanning_alert,
  t_secret_scanning_location,
  t_secret_scanning_push_protection_bypass,
  t_secret_scanning_scan_history,
  t_selected_actions,
  t_short_blob,
  t_short_branch,
  t_simple_classroom,
  t_simple_classroom_assignment,
  t_simple_user,
  t_social_account,
  t_ssh_signing_key,
  t_stargazer,
  t_starred_repository,
  t_status,
  t_status_check_policy,
  t_tag,
  t_tag_protection,
  t_team,
  t_team_discussion,
  t_team_discussion_comment,
  t_team_full,
  t_team_membership,
  t_team_project,
  t_team_repository,
  t_team_role_assignment,
  t_team_simple,
  t_thread,
  t_thread_subscription,
  t_timeline_issue_events,
  t_topic,
  t_topic_search_result_item,
  t_user_marketplace_purchase,
  t_user_role_assignment,
  t_user_search_result_item,
  t_validation_error,
  t_validation_error_simple,
  t_view_traffic,
  t_webhook_config,
  t_workflow,
  t_workflow_run,
  t_workflow_run_usage,
  t_workflow_usage,
} from "./models"
import {
  PermissiveBoolean,
  s_actions_billing_usage,
  s_actions_cache_list,
  s_actions_cache_usage_by_repository,
  s_actions_cache_usage_org_enterprise,
  s_actions_enabled,
  s_actions_get_default_workflow_permissions,
  s_actions_hosted_runner,
  s_actions_hosted_runner_image,
  s_actions_hosted_runner_limits,
  s_actions_hosted_runner_machine_spec,
  s_actions_organization_permissions,
  s_actions_public_key,
  s_actions_repository_permissions,
  s_actions_secret,
  s_actions_set_default_workflow_permissions,
  s_actions_variable,
  s_actions_workflow_access_to_repository,
  s_activity,
  s_alert_number,
  s_allowed_actions,
  s_api_insights_route_stats,
  s_api_insights_subject_stats,
  s_api_insights_summary_stats,
  s_api_insights_time_stats,
  s_api_insights_user_stats,
  s_api_overview,
  s_app_permissions,
  s_artifact,
  s_authentication_token,
  s_authorization,
  s_autolink,
  s_base_gist,
  s_basic_error,
  s_billing_usage_report,
  s_blob,
  s_branch_protection,
  s_branch_restriction_policy,
  s_branch_short,
  s_branch_with_protection,
  s_campaign_state,
  s_campaign_summary,
  s_check_annotation,
  s_check_automated_security_fixes,
  s_check_run,
  s_check_suite,
  s_check_suite_preference,
  s_classroom,
  s_classroom_accepted_assignment,
  s_classroom_assignment,
  s_classroom_assignment_grade,
  s_clone_traffic,
  s_code_frequency_stat,
  s_code_of_conduct,
  s_code_scanning_alert,
  s_code_scanning_alert_create_request,
  s_code_scanning_alert_dismissed_comment,
  s_code_scanning_alert_dismissed_reason,
  s_code_scanning_alert_instance,
  s_code_scanning_alert_items,
  s_code_scanning_alert_set_state,
  s_code_scanning_alert_severity,
  s_code_scanning_alert_state_query,
  s_code_scanning_analysis,
  s_code_scanning_analysis_commit_sha,
  s_code_scanning_analysis_deletion,
  s_code_scanning_analysis_sarif_file,
  s_code_scanning_analysis_sarif_id,
  s_code_scanning_analysis_tool_guid,
  s_code_scanning_analysis_tool_name,
  s_code_scanning_autofix,
  s_code_scanning_autofix_commits,
  s_code_scanning_autofix_commits_response,
  s_code_scanning_codeql_database,
  s_code_scanning_default_setup,
  s_code_scanning_default_setup_options,
  s_code_scanning_default_setup_update,
  s_code_scanning_default_setup_update_response,
  s_code_scanning_organization_alert_items,
  s_code_scanning_ref,
  s_code_scanning_ref_full,
  s_code_scanning_sarifs_receipt,
  s_code_scanning_sarifs_status,
  s_code_scanning_variant_analysis,
  s_code_scanning_variant_analysis_repo_task,
  s_code_search_result_item,
  s_code_security_configuration,
  s_code_security_configuration_for_repository,
  s_code_security_configuration_repositories,
  s_code_security_default_configurations,
  s_codeowners_errors,
  s_codespace,
  s_codespace_export_details,
  s_codespace_machine,
  s_codespace_with_full_repository,
  s_codespaces_org_secret,
  s_codespaces_permissions_check_for_devcontainer,
  s_codespaces_public_key,
  s_codespaces_secret,
  s_codespaces_user_public_key,
  s_collaborator,
  s_combined_billing_usage,
  s_combined_commit_status,
  s_commit,
  s_commit_activity,
  s_commit_comment,
  s_commit_comparison,
  s_commit_search_result_item,
  s_community_profile,
  s_content_directory,
  s_content_file,
  s_content_submodule,
  s_content_symlink,
  s_content_traffic,
  s_contributor,
  s_contributor_activity,
  s_copilot_organization_details,
  s_copilot_seat_details,
  s_copilot_usage_metrics_day,
  s_custom_deployment_rule_app,
  s_custom_property,
  s_custom_property_set_payload,
  s_custom_property_value,
  s_dependabot_alert,
  s_dependabot_alert_with_repository,
  s_dependabot_public_key,
  s_dependabot_secret,
  s_dependency_graph_diff,
  s_dependency_graph_spdx_sbom,
  s_deploy_key,
  s_deployment,
  s_deployment_branch_policy,
  s_deployment_branch_policy_name_pattern,
  s_deployment_branch_policy_name_pattern_with_type,
  s_deployment_branch_policy_settings,
  s_deployment_protection_rule,
  s_deployment_reviewer_type,
  s_deployment_status,
  s_diff_entry,
  s_email,
  s_empty_object,
  s_enabled_repositories,
  s_environment,
  s_environment_approvals,
  s_event,
  s_feed,
  s_file_commit,
  s_full_repository,
  s_gist_comment,
  s_gist_commit,
  s_gist_simple,
  s_git_commit,
  s_git_ref,
  s_git_tag,
  s_git_tree,
  s_gitignore_template,
  s_global_advisory,
  s_gpg_key,
  s_hook,
  s_hook_delivery,
  s_hook_delivery_item,
  s_hovercard,
  s_import,
  s_installation,
  s_installation_token,
  s_integration,
  s_integration_installation_request,
  s_interaction_limit,
  s_interaction_limit_response,
  s_issue,
  s_issue_comment,
  s_issue_event,
  s_issue_event_for_issue,
  s_issue_search_result_item,
  s_issue_type,
  s_job,
  s_key,
  s_key_simple,
  s_label,
  s_label_search_result_item,
  s_language,
  s_license,
  s_license_content,
  s_license_simple,
  s_marketplace_listing_plan,
  s_marketplace_purchase,
  s_merged_upstream,
  s_migration,
  s_milestone,
  s_minimal_repository,
  s_network_configuration,
  s_network_settings,
  s_oidc_custom_sub,
  s_oidc_custom_sub_repo,
  s_org_hook,
  s_org_membership,
  s_org_private_registry_configuration,
  s_org_private_registry_configuration_with_selected_repositories,
  s_org_repo_custom_property_values,
  s_org_ruleset_conditions,
  s_organization_actions_secret,
  s_organization_actions_variable,
  s_organization_create_issue_type,
  s_organization_dependabot_secret,
  s_organization_full,
  s_organization_invitation,
  s_organization_programmatic_access_grant,
  s_organization_programmatic_access_grant_request,
  s_organization_role,
  s_organization_secret_scanning_alert,
  s_organization_simple,
  s_organization_update_issue_type,
  s_package,
  s_package_version,
  s_packages_billing_usage,
  s_page,
  s_page_build,
  s_page_build_status,
  s_page_deployment,
  s_pages_deployment_status,
  s_pages_health_check,
  s_participation_stats,
  s_pending_deployment,
  s_porter_author,
  s_porter_large_file,
  s_prevent_self_review,
  s_private_user,
  s_private_vulnerability_report_create,
  s_project,
  s_project_card,
  s_project_collaborator_permission,
  s_project_column,
  s_protected_branch,
  s_protected_branch_admin_enforced,
  s_protected_branch_pull_request_review,
  s_public_user,
  s_pull_request,
  s_pull_request_merge_result,
  s_pull_request_review,
  s_pull_request_review_comment,
  s_pull_request_review_request,
  s_pull_request_simple,
  s_rate_limit_overview,
  s_reaction,
  s_referrer_traffic,
  s_release,
  s_release_asset,
  s_release_notes_content,
  s_repo_codespaces_secret,
  s_repo_search_result_item,
  s_repository,
  s_repository_advisory,
  s_repository_advisory_create,
  s_repository_advisory_update,
  s_repository_collaborator_permission,
  s_repository_invitation,
  s_repository_rule,
  s_repository_rule_detailed,
  s_repository_rule_enforcement,
  s_repository_rule_violation_error,
  s_repository_ruleset,
  s_repository_ruleset_bypass_actor,
  s_repository_ruleset_conditions,
  s_repository_subscription,
  s_review_comment,
  s_review_custom_gates_comment_required,
  s_review_custom_gates_state_required,
  s_root,
  s_rule_suite,
  s_rule_suites,
  s_ruleset_version,
  s_ruleset_version_with_state,
  s_runner,
  s_runner_application,
  s_runner_groups_org,
  s_runner_label,
  s_scim_error,
  s_secret_scanning_alert,
  s_secret_scanning_alert_resolution,
  s_secret_scanning_alert_resolution_comment,
  s_secret_scanning_alert_state,
  s_secret_scanning_location,
  s_secret_scanning_push_protection_bypass,
  s_secret_scanning_push_protection_bypass_placeholder_id,
  s_secret_scanning_push_protection_bypass_reason,
  s_secret_scanning_scan_history,
  s_security_advisory_ecosystems,
  s_selected_actions,
  s_short_blob,
  s_short_branch,
  s_simple_classroom,
  s_simple_classroom_assignment,
  s_simple_user,
  s_snapshot,
  s_social_account,
  s_ssh_signing_key,
  s_stargazer,
  s_starred_repository,
  s_status,
  s_status_check_policy,
  s_tag,
  s_tag_protection,
  s_team,
  s_team_discussion,
  s_team_discussion_comment,
  s_team_full,
  s_team_membership,
  s_team_project,
  s_team_repository,
  s_team_role_assignment,
  s_team_simple,
  s_thread,
  s_thread_subscription,
  s_timeline_issue_events,
  s_topic,
  s_topic_search_result_item,
  s_user_marketplace_purchase,
  s_user_role_assignment,
  s_user_search_result_item,
  s_validation_error,
  s_validation_error_simple,
  s_view_traffic,
  s_wait_timer,
  s_webhook_config,
  s_webhook_config_content_type,
  s_webhook_config_insecure_ssl,
  s_webhook_config_secret,
  s_webhook_config_url,
  s_workflow,
  s_workflow_run,
  s_workflow_run_usage,
  s_workflow_usage,
} from "./schemas"
import KoaRouter, { RouterContext } from "@koa/router"
import {
  KoaRuntimeError,
  RequestInputType,
} from "@nahkies/typescript-koa-runtime/errors"
import {
  KoaRuntimeResponder,
  KoaRuntimeResponse,
  Params,
  Response,
  ServerConfig,
  r,
  startServer,
} from "@nahkies/typescript-koa-runtime/server"
import {
  parseRequestInput,
  responseValidationFactory,
} from "@nahkies/typescript-koa-runtime/zod"
import { z } from "zod"

const metaRootResponder = {
  with200: r.with200<t_root>,
  withStatus: r.withStatus,
}

type MetaRootResponder = typeof metaRootResponder & KoaRuntimeResponder

const metaRootResponseValidator = responseValidationFactory(
  [["200", s_root]],
  undefined,
)

export type MetaRoot = (
  params: Params<void, void, void, void>,
  respond: MetaRootResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_root>>

const securityAdvisoriesListGlobalAdvisoriesResponder = {
  with200: r.with200<t_global_advisory[]>,
  with422: r.with422<t_validation_error_simple>,
  with429: r.with429<t_basic_error>,
  withStatus: r.withStatus,
}

type SecurityAdvisoriesListGlobalAdvisoriesResponder =
  typeof securityAdvisoriesListGlobalAdvisoriesResponder & KoaRuntimeResponder

const securityAdvisoriesListGlobalAdvisoriesResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_global_advisory)],
      ["422", s_validation_error_simple],
      ["429", s_basic_error],
    ],
    undefined,
  )

export type SecurityAdvisoriesListGlobalAdvisories = (
  params: Params<
    void,
    t_SecurityAdvisoriesListGlobalAdvisoriesQuerySchema,
    void,
    void
  >,
  respond: SecurityAdvisoriesListGlobalAdvisoriesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_global_advisory[]>
  | Response<422, t_validation_error_simple>
  | Response<429, t_basic_error>
>

const securityAdvisoriesGetGlobalAdvisoryResponder = {
  with200: r.with200<t_global_advisory>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type SecurityAdvisoriesGetGlobalAdvisoryResponder =
  typeof securityAdvisoriesGetGlobalAdvisoryResponder & KoaRuntimeResponder

const securityAdvisoriesGetGlobalAdvisoryResponseValidator =
  responseValidationFactory(
    [
      ["200", s_global_advisory],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type SecurityAdvisoriesGetGlobalAdvisory = (
  params: Params<
    t_SecurityAdvisoriesGetGlobalAdvisoryParamSchema,
    void,
    void,
    void
  >,
  respond: SecurityAdvisoriesGetGlobalAdvisoryResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_global_advisory>
  | Response<404, t_basic_error>
>

const appsGetAuthenticatedResponder = {
  with200: r.with200<t_integration>,
  withStatus: r.withStatus,
}

type AppsGetAuthenticatedResponder = typeof appsGetAuthenticatedResponder &
  KoaRuntimeResponder

const appsGetAuthenticatedResponseValidator = responseValidationFactory(
  [["200", s_integration]],
  undefined,
)

export type AppsGetAuthenticated = (
  params: Params<void, void, void, void>,
  respond: AppsGetAuthenticatedResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_integration>>

const appsCreateFromManifestResponder = {
  with201: r.with201<
    t_integration & {
      client_id: string
      client_secret: string
      pem: string
      webhook_secret: string | null
      [key: string]: unknown | undefined
    }
  >,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type AppsCreateFromManifestResponder = typeof appsCreateFromManifestResponder &
  KoaRuntimeResponder

const appsCreateFromManifestResponseValidator = responseValidationFactory(
  [
    [
      "201",
      z.intersection(
        s_integration,
        z.intersection(
          z.object({
            client_id: z.string(),
            client_secret: z.string(),
            webhook_secret: z.string().nullable(),
            pem: z.string(),
          }),
          z.record(z.unknown()),
        ),
      ),
    ],
    ["404", s_basic_error],
    ["422", s_validation_error_simple],
  ],
  undefined,
)

export type AppsCreateFromManifest = (
  params: Params<t_AppsCreateFromManifestParamSchema, void, void, void>,
  respond: AppsCreateFromManifestResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      201,
      t_integration & {
        client_id: string
        client_secret: string
        pem: string
        webhook_secret: string | null
        [key: string]: unknown | undefined
      }
    >
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const appsGetWebhookConfigForAppResponder = {
  with200: r.with200<t_webhook_config>,
  withStatus: r.withStatus,
}

type AppsGetWebhookConfigForAppResponder =
  typeof appsGetWebhookConfigForAppResponder & KoaRuntimeResponder

const appsGetWebhookConfigForAppResponseValidator = responseValidationFactory(
  [["200", s_webhook_config]],
  undefined,
)

export type AppsGetWebhookConfigForApp = (
  params: Params<void, void, void, void>,
  respond: AppsGetWebhookConfigForAppResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_webhook_config>>

const appsUpdateWebhookConfigForAppResponder = {
  with200: r.with200<t_webhook_config>,
  withStatus: r.withStatus,
}

type AppsUpdateWebhookConfigForAppResponder =
  typeof appsUpdateWebhookConfigForAppResponder & KoaRuntimeResponder

const appsUpdateWebhookConfigForAppResponseValidator =
  responseValidationFactory([["200", s_webhook_config]], undefined)

export type AppsUpdateWebhookConfigForApp = (
  params: Params<void, void, t_AppsUpdateWebhookConfigForAppBodySchema, void>,
  respond: AppsUpdateWebhookConfigForAppResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_webhook_config>>

const appsListWebhookDeliveriesResponder = {
  with200: r.with200<t_hook_delivery_item[]>,
  with400: r.with400<t_scim_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type AppsListWebhookDeliveriesResponder =
  typeof appsListWebhookDeliveriesResponder & KoaRuntimeResponder

const appsListWebhookDeliveriesResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_hook_delivery_item)],
    ["400", s_scim_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type AppsListWebhookDeliveries = (
  params: Params<void, t_AppsListWebhookDeliveriesQuerySchema, void, void>,
  respond: AppsListWebhookDeliveriesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_hook_delivery_item[]>
  | Response<400, t_scim_error>
  | Response<422, t_validation_error>
>

const appsGetWebhookDeliveryResponder = {
  with200: r.with200<t_hook_delivery>,
  with400: r.with400<t_scim_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type AppsGetWebhookDeliveryResponder = typeof appsGetWebhookDeliveryResponder &
  KoaRuntimeResponder

const appsGetWebhookDeliveryResponseValidator = responseValidationFactory(
  [
    ["200", s_hook_delivery],
    ["400", s_scim_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type AppsGetWebhookDelivery = (
  params: Params<t_AppsGetWebhookDeliveryParamSchema, void, void, void>,
  respond: AppsGetWebhookDeliveryResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_hook_delivery>
  | Response<400, t_scim_error>
  | Response<422, t_validation_error>
>

const appsRedeliverWebhookDeliveryResponder = {
  with202: r.with202<{
    [key: string]: unknown | undefined
  }>,
  with400: r.with400<t_scim_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type AppsRedeliverWebhookDeliveryResponder =
  typeof appsRedeliverWebhookDeliveryResponder & KoaRuntimeResponder

const appsRedeliverWebhookDeliveryResponseValidator = responseValidationFactory(
  [
    ["202", z.record(z.unknown())],
    ["400", s_scim_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type AppsRedeliverWebhookDelivery = (
  params: Params<t_AppsRedeliverWebhookDeliveryParamSchema, void, void, void>,
  respond: AppsRedeliverWebhookDeliveryResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      202,
      {
        [key: string]: unknown | undefined
      }
    >
  | Response<400, t_scim_error>
  | Response<422, t_validation_error>
>

const appsListInstallationRequestsForAuthenticatedAppResponder = {
  with200: r.with200<t_integration_installation_request[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  withStatus: r.withStatus,
}

type AppsListInstallationRequestsForAuthenticatedAppResponder =
  typeof appsListInstallationRequestsForAuthenticatedAppResponder &
    KoaRuntimeResponder

const appsListInstallationRequestsForAuthenticatedAppResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_integration_installation_request)],
      ["304", z.undefined()],
      ["401", s_basic_error],
    ],
    undefined,
  )

export type AppsListInstallationRequestsForAuthenticatedApp = (
  params: Params<
    void,
    t_AppsListInstallationRequestsForAuthenticatedAppQuerySchema,
    void,
    void
  >,
  respond: AppsListInstallationRequestsForAuthenticatedAppResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_integration_installation_request[]>
  | Response<304, void>
  | Response<401, t_basic_error>
>

const appsListInstallationsResponder = {
  with200: r.with200<t_installation[]>,
  withStatus: r.withStatus,
}

type AppsListInstallationsResponder = typeof appsListInstallationsResponder &
  KoaRuntimeResponder

const appsListInstallationsResponseValidator = responseValidationFactory(
  [["200", z.array(s_installation)]],
  undefined,
)

export type AppsListInstallations = (
  params: Params<void, t_AppsListInstallationsQuerySchema, void, void>,
  respond: AppsListInstallationsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_installation[]>>

const appsGetInstallationResponder = {
  with200: r.with200<t_installation>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type AppsGetInstallationResponder = typeof appsGetInstallationResponder &
  KoaRuntimeResponder

const appsGetInstallationResponseValidator = responseValidationFactory(
  [
    ["200", s_installation],
    ["404", s_basic_error],
  ],
  undefined,
)

export type AppsGetInstallation = (
  params: Params<t_AppsGetInstallationParamSchema, void, void, void>,
  respond: AppsGetInstallationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_installation>
  | Response<404, t_basic_error>
>

const appsDeleteInstallationResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type AppsDeleteInstallationResponder = typeof appsDeleteInstallationResponder &
  KoaRuntimeResponder

const appsDeleteInstallationResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
  ],
  undefined,
)

export type AppsDeleteInstallation = (
  params: Params<t_AppsDeleteInstallationParamSchema, void, void, void>,
  respond: AppsDeleteInstallationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

const appsCreateInstallationAccessTokenResponder = {
  with201: r.with201<t_installation_token>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type AppsCreateInstallationAccessTokenResponder =
  typeof appsCreateInstallationAccessTokenResponder & KoaRuntimeResponder

const appsCreateInstallationAccessTokenResponseValidator =
  responseValidationFactory(
    [
      ["201", s_installation_token],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type AppsCreateInstallationAccessToken = (
  params: Params<
    t_AppsCreateInstallationAccessTokenParamSchema,
    void,
    t_AppsCreateInstallationAccessTokenBodySchema | undefined,
    void
  >,
  respond: AppsCreateInstallationAccessTokenResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_installation_token>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const appsSuspendInstallationResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type AppsSuspendInstallationResponder =
  typeof appsSuspendInstallationResponder & KoaRuntimeResponder

const appsSuspendInstallationResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
  ],
  undefined,
)

export type AppsSuspendInstallation = (
  params: Params<t_AppsSuspendInstallationParamSchema, void, void, void>,
  respond: AppsSuspendInstallationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

const appsUnsuspendInstallationResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type AppsUnsuspendInstallationResponder =
  typeof appsUnsuspendInstallationResponder & KoaRuntimeResponder

const appsUnsuspendInstallationResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
  ],
  undefined,
)

export type AppsUnsuspendInstallation = (
  params: Params<t_AppsUnsuspendInstallationParamSchema, void, void, void>,
  respond: AppsUnsuspendInstallationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

const appsDeleteAuthorizationResponder = {
  with204: r.with204<void>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type AppsDeleteAuthorizationResponder =
  typeof appsDeleteAuthorizationResponder & KoaRuntimeResponder

const appsDeleteAuthorizationResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["422", s_validation_error],
  ],
  undefined,
)

export type AppsDeleteAuthorization = (
  params: Params<
    t_AppsDeleteAuthorizationParamSchema,
    void,
    t_AppsDeleteAuthorizationBodySchema,
    void
  >,
  respond: AppsDeleteAuthorizationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<422, t_validation_error>
>

const appsCheckTokenResponder = {
  with200: r.with200<t_authorization>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type AppsCheckTokenResponder = typeof appsCheckTokenResponder &
  KoaRuntimeResponder

const appsCheckTokenResponseValidator = responseValidationFactory(
  [
    ["200", s_authorization],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type AppsCheckToken = (
  params: Params<
    t_AppsCheckTokenParamSchema,
    void,
    t_AppsCheckTokenBodySchema,
    void
  >,
  respond: AppsCheckTokenResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_authorization>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const appsResetTokenResponder = {
  with200: r.with200<t_authorization>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type AppsResetTokenResponder = typeof appsResetTokenResponder &
  KoaRuntimeResponder

const appsResetTokenResponseValidator = responseValidationFactory(
  [
    ["200", s_authorization],
    ["422", s_validation_error],
  ],
  undefined,
)

export type AppsResetToken = (
  params: Params<
    t_AppsResetTokenParamSchema,
    void,
    t_AppsResetTokenBodySchema,
    void
  >,
  respond: AppsResetTokenResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_authorization>
  | Response<422, t_validation_error>
>

const appsDeleteTokenResponder = {
  with204: r.with204<void>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type AppsDeleteTokenResponder = typeof appsDeleteTokenResponder &
  KoaRuntimeResponder

const appsDeleteTokenResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["422", s_validation_error],
  ],
  undefined,
)

export type AppsDeleteToken = (
  params: Params<
    t_AppsDeleteTokenParamSchema,
    void,
    t_AppsDeleteTokenBodySchema,
    void
  >,
  respond: AppsDeleteTokenResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<422, t_validation_error>
>

const appsScopeTokenResponder = {
  with200: r.with200<t_authorization>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type AppsScopeTokenResponder = typeof appsScopeTokenResponder &
  KoaRuntimeResponder

const appsScopeTokenResponseValidator = responseValidationFactory(
  [
    ["200", s_authorization],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type AppsScopeToken = (
  params: Params<
    t_AppsScopeTokenParamSchema,
    void,
    t_AppsScopeTokenBodySchema,
    void
  >,
  respond: AppsScopeTokenResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_authorization>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const appsGetBySlugResponder = {
  with200: r.with200<t_integration>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type AppsGetBySlugResponder = typeof appsGetBySlugResponder &
  KoaRuntimeResponder

const appsGetBySlugResponseValidator = responseValidationFactory(
  [
    ["200", s_integration],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type AppsGetBySlug = (
  params: Params<t_AppsGetBySlugParamSchema, void, void, void>,
  respond: AppsGetBySlugResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_integration>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const classroomGetAnAssignmentResponder = {
  with200: r.with200<t_classroom_assignment>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ClassroomGetAnAssignmentResponder =
  typeof classroomGetAnAssignmentResponder & KoaRuntimeResponder

const classroomGetAnAssignmentResponseValidator = responseValidationFactory(
  [
    ["200", s_classroom_assignment],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ClassroomGetAnAssignment = (
  params: Params<t_ClassroomGetAnAssignmentParamSchema, void, void, void>,
  respond: ClassroomGetAnAssignmentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_classroom_assignment>
  | Response<404, t_basic_error>
>

const classroomListAcceptedAssignmentsForAnAssignmentResponder = {
  with200: r.with200<t_classroom_accepted_assignment[]>,
  withStatus: r.withStatus,
}

type ClassroomListAcceptedAssignmentsForAnAssignmentResponder =
  typeof classroomListAcceptedAssignmentsForAnAssignmentResponder &
    KoaRuntimeResponder

const classroomListAcceptedAssignmentsForAnAssignmentResponseValidator =
  responseValidationFactory(
    [["200", z.array(s_classroom_accepted_assignment)]],
    undefined,
  )

export type ClassroomListAcceptedAssignmentsForAnAssignment = (
  params: Params<
    t_ClassroomListAcceptedAssignmentsForAnAssignmentParamSchema,
    t_ClassroomListAcceptedAssignmentsForAnAssignmentQuerySchema,
    void,
    void
  >,
  respond: ClassroomListAcceptedAssignmentsForAnAssignmentResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_classroom_accepted_assignment[]>
>

const classroomGetAssignmentGradesResponder = {
  with200: r.with200<t_classroom_assignment_grade[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ClassroomGetAssignmentGradesResponder =
  typeof classroomGetAssignmentGradesResponder & KoaRuntimeResponder

const classroomGetAssignmentGradesResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_classroom_assignment_grade)],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ClassroomGetAssignmentGrades = (
  params: Params<t_ClassroomGetAssignmentGradesParamSchema, void, void, void>,
  respond: ClassroomGetAssignmentGradesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_classroom_assignment_grade[]>
  | Response<404, t_basic_error>
>

const classroomListClassroomsResponder = {
  with200: r.with200<t_simple_classroom[]>,
  withStatus: r.withStatus,
}

type ClassroomListClassroomsResponder =
  typeof classroomListClassroomsResponder & KoaRuntimeResponder

const classroomListClassroomsResponseValidator = responseValidationFactory(
  [["200", z.array(s_simple_classroom)]],
  undefined,
)

export type ClassroomListClassrooms = (
  params: Params<void, t_ClassroomListClassroomsQuerySchema, void, void>,
  respond: ClassroomListClassroomsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_simple_classroom[]>>

const classroomGetAClassroomResponder = {
  with200: r.with200<t_classroom>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ClassroomGetAClassroomResponder = typeof classroomGetAClassroomResponder &
  KoaRuntimeResponder

const classroomGetAClassroomResponseValidator = responseValidationFactory(
  [
    ["200", s_classroom],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ClassroomGetAClassroom = (
  params: Params<t_ClassroomGetAClassroomParamSchema, void, void, void>,
  respond: ClassroomGetAClassroomResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_classroom>
  | Response<404, t_basic_error>
>

const classroomListAssignmentsForAClassroomResponder = {
  with200: r.with200<t_simple_classroom_assignment[]>,
  withStatus: r.withStatus,
}

type ClassroomListAssignmentsForAClassroomResponder =
  typeof classroomListAssignmentsForAClassroomResponder & KoaRuntimeResponder

const classroomListAssignmentsForAClassroomResponseValidator =
  responseValidationFactory(
    [["200", z.array(s_simple_classroom_assignment)]],
    undefined,
  )

export type ClassroomListAssignmentsForAClassroom = (
  params: Params<
    t_ClassroomListAssignmentsForAClassroomParamSchema,
    t_ClassroomListAssignmentsForAClassroomQuerySchema,
    void,
    void
  >,
  respond: ClassroomListAssignmentsForAClassroomResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_simple_classroom_assignment[]>
>

const codesOfConductGetAllCodesOfConductResponder = {
  with200: r.with200<t_code_of_conduct[]>,
  with304: r.with304<void>,
  withStatus: r.withStatus,
}

type CodesOfConductGetAllCodesOfConductResponder =
  typeof codesOfConductGetAllCodesOfConductResponder & KoaRuntimeResponder

const codesOfConductGetAllCodesOfConductResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_code_of_conduct)],
      ["304", z.undefined()],
    ],
    undefined,
  )

export type CodesOfConductGetAllCodesOfConduct = (
  params: Params<void, void, void, void>,
  respond: CodesOfConductGetAllCodesOfConductResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_of_conduct[]>
  | Response<304, void>
>

const codesOfConductGetConductCodeResponder = {
  with200: r.with200<t_code_of_conduct>,
  with304: r.with304<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type CodesOfConductGetConductCodeResponder =
  typeof codesOfConductGetConductCodeResponder & KoaRuntimeResponder

const codesOfConductGetConductCodeResponseValidator = responseValidationFactory(
  [
    ["200", s_code_of_conduct],
    ["304", z.undefined()],
    ["404", s_basic_error],
  ],
  undefined,
)

export type CodesOfConductGetConductCode = (
  params: Params<t_CodesOfConductGetConductCodeParamSchema, void, void, void>,
  respond: CodesOfConductGetConductCodeResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_of_conduct>
  | Response<304, void>
  | Response<404, t_basic_error>
>

const emojisGetResponder = {
  with200: r.with200<{
    [key: string]: string | undefined
  }>,
  with304: r.with304<void>,
  withStatus: r.withStatus,
}

type EmojisGetResponder = typeof emojisGetResponder & KoaRuntimeResponder

const emojisGetResponseValidator = responseValidationFactory(
  [
    ["200", z.record(z.string())],
    ["304", z.undefined()],
  ],
  undefined,
)

export type EmojisGet = (
  params: Params<void, void, void, void>,
  respond: EmojisGetResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        [key: string]: string | undefined
      }
    >
  | Response<304, void>
>

const codeSecurityGetConfigurationsForEnterpriseResponder = {
  with200: r.with200<t_code_security_configuration[]>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type CodeSecurityGetConfigurationsForEnterpriseResponder =
  typeof codeSecurityGetConfigurationsForEnterpriseResponder &
    KoaRuntimeResponder

const codeSecurityGetConfigurationsForEnterpriseResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_code_security_configuration)],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type CodeSecurityGetConfigurationsForEnterprise = (
  params: Params<
    t_CodeSecurityGetConfigurationsForEnterpriseParamSchema,
    t_CodeSecurityGetConfigurationsForEnterpriseQuerySchema,
    void,
    void
  >,
  respond: CodeSecurityGetConfigurationsForEnterpriseResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_security_configuration[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const codeSecurityCreateConfigurationForEnterpriseResponder = {
  with201: r.with201<t_code_security_configuration>,
  with400: r.with400<t_scim_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type CodeSecurityCreateConfigurationForEnterpriseResponder =
  typeof codeSecurityCreateConfigurationForEnterpriseResponder &
    KoaRuntimeResponder

const codeSecurityCreateConfigurationForEnterpriseResponseValidator =
  responseValidationFactory(
    [
      ["201", s_code_security_configuration],
      ["400", s_scim_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type CodeSecurityCreateConfigurationForEnterprise = (
  params: Params<
    t_CodeSecurityCreateConfigurationForEnterpriseParamSchema,
    void,
    t_CodeSecurityCreateConfigurationForEnterpriseBodySchema,
    void
  >,
  respond: CodeSecurityCreateConfigurationForEnterpriseResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_code_security_configuration>
  | Response<400, t_scim_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const codeSecurityGetDefaultConfigurationsForEnterpriseResponder = {
  with200: r.with200<t_code_security_default_configurations>,
  withStatus: r.withStatus,
}

type CodeSecurityGetDefaultConfigurationsForEnterpriseResponder =
  typeof codeSecurityGetDefaultConfigurationsForEnterpriseResponder &
    KoaRuntimeResponder

const codeSecurityGetDefaultConfigurationsForEnterpriseResponseValidator =
  responseValidationFactory(
    [["200", s_code_security_default_configurations]],
    undefined,
  )

export type CodeSecurityGetDefaultConfigurationsForEnterprise = (
  params: Params<
    t_CodeSecurityGetDefaultConfigurationsForEnterpriseParamSchema,
    void,
    void,
    void
  >,
  respond: CodeSecurityGetDefaultConfigurationsForEnterpriseResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_security_default_configurations>
>

const codeSecurityGetSingleConfigurationForEnterpriseResponder = {
  with200: r.with200<t_code_security_configuration>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type CodeSecurityGetSingleConfigurationForEnterpriseResponder =
  typeof codeSecurityGetSingleConfigurationForEnterpriseResponder &
    KoaRuntimeResponder

const codeSecurityGetSingleConfigurationForEnterpriseResponseValidator =
  responseValidationFactory(
    [
      ["200", s_code_security_configuration],
      ["304", z.undefined()],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type CodeSecurityGetSingleConfigurationForEnterprise = (
  params: Params<
    t_CodeSecurityGetSingleConfigurationForEnterpriseParamSchema,
    void,
    void,
    void
  >,
  respond: CodeSecurityGetSingleConfigurationForEnterpriseResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_security_configuration>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const codeSecurityUpdateEnterpriseConfigurationResponder = {
  with200: r.with200<t_code_security_configuration>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error>,
  withStatus: r.withStatus,
}

type CodeSecurityUpdateEnterpriseConfigurationResponder =
  typeof codeSecurityUpdateEnterpriseConfigurationResponder &
    KoaRuntimeResponder

const codeSecurityUpdateEnterpriseConfigurationResponseValidator =
  responseValidationFactory(
    [
      ["200", s_code_security_configuration],
      ["304", z.undefined()],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["409", s_basic_error],
    ],
    undefined,
  )

export type CodeSecurityUpdateEnterpriseConfiguration = (
  params: Params<
    t_CodeSecurityUpdateEnterpriseConfigurationParamSchema,
    void,
    t_CodeSecurityUpdateEnterpriseConfigurationBodySchema,
    void
  >,
  respond: CodeSecurityUpdateEnterpriseConfigurationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_security_configuration>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
>

const codeSecurityDeleteConfigurationForEnterpriseResponder = {
  with204: r.with204<void>,
  with400: r.with400<t_scim_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error>,
  withStatus: r.withStatus,
}

type CodeSecurityDeleteConfigurationForEnterpriseResponder =
  typeof codeSecurityDeleteConfigurationForEnterpriseResponder &
    KoaRuntimeResponder

const codeSecurityDeleteConfigurationForEnterpriseResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["400", s_scim_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["409", s_basic_error],
    ],
    undefined,
  )

export type CodeSecurityDeleteConfigurationForEnterprise = (
  params: Params<
    t_CodeSecurityDeleteConfigurationForEnterpriseParamSchema,
    void,
    void,
    void
  >,
  respond: CodeSecurityDeleteConfigurationForEnterpriseResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<400, t_scim_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
>

const codeSecurityAttachEnterpriseConfigurationResponder = {
  with202: r.with202<{
    [key: string]: unknown | undefined
  }>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error>,
  withStatus: r.withStatus,
}

type CodeSecurityAttachEnterpriseConfigurationResponder =
  typeof codeSecurityAttachEnterpriseConfigurationResponder &
    KoaRuntimeResponder

const codeSecurityAttachEnterpriseConfigurationResponseValidator =
  responseValidationFactory(
    [
      ["202", z.record(z.unknown())],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["409", s_basic_error],
    ],
    undefined,
  )

export type CodeSecurityAttachEnterpriseConfiguration = (
  params: Params<
    t_CodeSecurityAttachEnterpriseConfigurationParamSchema,
    void,
    t_CodeSecurityAttachEnterpriseConfigurationBodySchema,
    void
  >,
  respond: CodeSecurityAttachEnterpriseConfigurationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      202,
      {
        [key: string]: unknown | undefined
      }
    >
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
>

const codeSecuritySetConfigurationAsDefaultForEnterpriseResponder = {
  with200: r.with200<{
    configuration?: t_code_security_configuration
    default_for_new_repos?: "all" | "none" | "private_and_internal" | "public"
  }>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type CodeSecuritySetConfigurationAsDefaultForEnterpriseResponder =
  typeof codeSecuritySetConfigurationAsDefaultForEnterpriseResponder &
    KoaRuntimeResponder

const codeSecuritySetConfigurationAsDefaultForEnterpriseResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          default_for_new_repos: z
            .enum(["all", "none", "private_and_internal", "public"])
            .optional(),
          configuration: s_code_security_configuration.optional(),
        }),
      ],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type CodeSecuritySetConfigurationAsDefaultForEnterprise = (
  params: Params<
    t_CodeSecuritySetConfigurationAsDefaultForEnterpriseParamSchema,
    void,
    t_CodeSecuritySetConfigurationAsDefaultForEnterpriseBodySchema,
    void
  >,
  respond: CodeSecuritySetConfigurationAsDefaultForEnterpriseResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        configuration?: t_code_security_configuration
        default_for_new_repos?:
          | "all"
          | "none"
          | "private_and_internal"
          | "public"
      }
    >
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const codeSecurityGetRepositoriesForEnterpriseConfigurationResponder = {
  with200: r.with200<t_code_security_configuration_repositories[]>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type CodeSecurityGetRepositoriesForEnterpriseConfigurationResponder =
  typeof codeSecurityGetRepositoriesForEnterpriseConfigurationResponder &
    KoaRuntimeResponder

const codeSecurityGetRepositoriesForEnterpriseConfigurationResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_code_security_configuration_repositories)],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type CodeSecurityGetRepositoriesForEnterpriseConfiguration = (
  params: Params<
    t_CodeSecurityGetRepositoriesForEnterpriseConfigurationParamSchema,
    t_CodeSecurityGetRepositoriesForEnterpriseConfigurationQuerySchema,
    void,
    void
  >,
  respond: CodeSecurityGetRepositoriesForEnterpriseConfigurationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_security_configuration_repositories[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const dependabotListAlertsForEnterpriseResponder = {
  with200: r.with200<t_dependabot_alert_with_repository[]>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type DependabotListAlertsForEnterpriseResponder =
  typeof dependabotListAlertsForEnterpriseResponder & KoaRuntimeResponder

const dependabotListAlertsForEnterpriseResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_dependabot_alert_with_repository)],
      ["304", z.undefined()],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

export type DependabotListAlertsForEnterprise = (
  params: Params<
    t_DependabotListAlertsForEnterpriseParamSchema,
    t_DependabotListAlertsForEnterpriseQuerySchema,
    void,
    void
  >,
  respond: DependabotListAlertsForEnterpriseResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_dependabot_alert_with_repository[]>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const secretScanningListAlertsForEnterpriseResponder = {
  with200: r.with200<t_organization_secret_scanning_alert[]>,
  with404: r.with404<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type SecretScanningListAlertsForEnterpriseResponder =
  typeof secretScanningListAlertsForEnterpriseResponder & KoaRuntimeResponder

const secretScanningListAlertsForEnterpriseResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_organization_secret_scanning_alert)],
      ["404", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

export type SecretScanningListAlertsForEnterprise = (
  params: Params<
    t_SecretScanningListAlertsForEnterpriseParamSchema,
    t_SecretScanningListAlertsForEnterpriseQuerySchema,
    void,
    void
  >,
  respond: SecretScanningListAlertsForEnterpriseResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_organization_secret_scanning_alert[]>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const activityListPublicEventsResponder = {
  with200: r.with200<t_event[]>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type ActivityListPublicEventsResponder =
  typeof activityListPublicEventsResponder & KoaRuntimeResponder

const activityListPublicEventsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_event)],
    ["304", z.undefined()],
    ["403", s_basic_error],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type ActivityListPublicEvents = (
  params: Params<void, t_ActivityListPublicEventsQuerySchema, void, void>,
  respond: ActivityListPublicEventsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_event[]>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const activityGetFeedsResponder = {
  with200: r.with200<t_feed>,
  withStatus: r.withStatus,
}

type ActivityGetFeedsResponder = typeof activityGetFeedsResponder &
  KoaRuntimeResponder

const activityGetFeedsResponseValidator = responseValidationFactory(
  [["200", s_feed]],
  undefined,
)

export type ActivityGetFeeds = (
  params: Params<void, void, void, void>,
  respond: ActivityGetFeedsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_feed>>

const gistsListResponder = {
  with200: r.with200<t_base_gist[]>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type GistsListResponder = typeof gistsListResponder & KoaRuntimeResponder

const gistsListResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_base_gist)],
    ["304", z.undefined()],
    ["403", s_basic_error],
  ],
  undefined,
)

export type GistsList = (
  params: Params<void, t_GistsListQuerySchema, void, void>,
  respond: GistsListResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_base_gist[]>
  | Response<304, void>
  | Response<403, t_basic_error>
>

const gistsCreateResponder = {
  with201: r.with201<t_gist_simple>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type GistsCreateResponder = typeof gistsCreateResponder & KoaRuntimeResponder

const gistsCreateResponseValidator = responseValidationFactory(
  [
    ["201", s_gist_simple],
    ["304", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type GistsCreate = (
  params: Params<void, void, t_GistsCreateBodySchema, void>,
  respond: GistsCreateResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_gist_simple>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const gistsListPublicResponder = {
  with200: r.with200<t_base_gist[]>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type GistsListPublicResponder = typeof gistsListPublicResponder &
  KoaRuntimeResponder

const gistsListPublicResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_base_gist)],
    ["304", z.undefined()],
    ["403", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type GistsListPublic = (
  params: Params<void, t_GistsListPublicQuerySchema, void, void>,
  respond: GistsListPublicResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_base_gist[]>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

const gistsListStarredResponder = {
  with200: r.with200<t_base_gist[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type GistsListStarredResponder = typeof gistsListStarredResponder &
  KoaRuntimeResponder

const gistsListStarredResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_base_gist)],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
  ],
  undefined,
)

export type GistsListStarred = (
  params: Params<void, t_GistsListStarredQuerySchema, void, void>,
  respond: GistsListStarredResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_base_gist[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const gistsGetResponder = {
  with200: r.with200<t_gist_simple>,
  with304: r.with304<void>,
  with403: r.with403<{
    block?: {
      created_at?: string
      html_url?: string | null
      reason?: string
    }
    documentation_url?: string
    message?: string
  }>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type GistsGetResponder = typeof gistsGetResponder & KoaRuntimeResponder

const gistsGetResponseValidator = responseValidationFactory(
  [
    ["200", s_gist_simple],
    ["304", z.undefined()],
    [
      "403",
      z.object({
        block: z
          .object({
            reason: z.string().optional(),
            created_at: z.string().optional(),
            html_url: z.string().nullable().optional(),
          })
          .optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
    ["404", s_basic_error],
  ],
  undefined,
)

export type GistsGet = (
  params: Params<t_GistsGetParamSchema, void, void, void>,
  respond: GistsGetResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_gist_simple>
  | Response<304, void>
  | Response<
      403,
      {
        block?: {
          created_at?: string
          html_url?: string | null
          reason?: string
        }
        documentation_url?: string
        message?: string
      }
    >
  | Response<404, t_basic_error>
>

const gistsUpdateResponder = {
  with200: r.with200<t_gist_simple>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type GistsUpdateResponder = typeof gistsUpdateResponder & KoaRuntimeResponder

const gistsUpdateResponseValidator = responseValidationFactory(
  [
    ["200", s_gist_simple],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type GistsUpdate = (
  params: Params<t_GistsUpdateParamSchema, void, t_GistsUpdateBodySchema, void>,
  respond: GistsUpdateResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_gist_simple>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const gistsDeleteResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type GistsDeleteResponder = typeof gistsDeleteResponder & KoaRuntimeResponder

const gistsDeleteResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["304", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type GistsDelete = (
  params: Params<t_GistsDeleteParamSchema, void, void, void>,
  respond: GistsDeleteResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const gistsListCommentsResponder = {
  with200: r.with200<t_gist_comment[]>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type GistsListCommentsResponder = typeof gistsListCommentsResponder &
  KoaRuntimeResponder

const gistsListCommentsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_gist_comment)],
    ["304", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type GistsListComments = (
  params: Params<
    t_GistsListCommentsParamSchema,
    t_GistsListCommentsQuerySchema,
    void,
    void
  >,
  respond: GistsListCommentsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_gist_comment[]>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const gistsCreateCommentResponder = {
  with201: r.with201<t_gist_comment>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type GistsCreateCommentResponder = typeof gistsCreateCommentResponder &
  KoaRuntimeResponder

const gistsCreateCommentResponseValidator = responseValidationFactory(
  [
    ["201", s_gist_comment],
    ["304", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type GistsCreateComment = (
  params: Params<
    t_GistsCreateCommentParamSchema,
    void,
    t_GistsCreateCommentBodySchema,
    void
  >,
  respond: GistsCreateCommentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_gist_comment>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const gistsGetCommentResponder = {
  with200: r.with200<t_gist_comment>,
  with304: r.with304<void>,
  with403: r.with403<{
    block?: {
      created_at?: string
      html_url?: string | null
      reason?: string
    }
    documentation_url?: string
    message?: string
  }>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type GistsGetCommentResponder = typeof gistsGetCommentResponder &
  KoaRuntimeResponder

const gistsGetCommentResponseValidator = responseValidationFactory(
  [
    ["200", s_gist_comment],
    ["304", z.undefined()],
    [
      "403",
      z.object({
        block: z
          .object({
            reason: z.string().optional(),
            created_at: z.string().optional(),
            html_url: z.string().nullable().optional(),
          })
          .optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
    ["404", s_basic_error],
  ],
  undefined,
)

export type GistsGetComment = (
  params: Params<t_GistsGetCommentParamSchema, void, void, void>,
  respond: GistsGetCommentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_gist_comment>
  | Response<304, void>
  | Response<
      403,
      {
        block?: {
          created_at?: string
          html_url?: string | null
          reason?: string
        }
        documentation_url?: string
        message?: string
      }
    >
  | Response<404, t_basic_error>
>

const gistsUpdateCommentResponder = {
  with200: r.with200<t_gist_comment>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type GistsUpdateCommentResponder = typeof gistsUpdateCommentResponder &
  KoaRuntimeResponder

const gistsUpdateCommentResponseValidator = responseValidationFactory(
  [
    ["200", s_gist_comment],
    ["404", s_basic_error],
  ],
  undefined,
)

export type GistsUpdateComment = (
  params: Params<
    t_GistsUpdateCommentParamSchema,
    void,
    t_GistsUpdateCommentBodySchema,
    void
  >,
  respond: GistsUpdateCommentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_gist_comment>
  | Response<404, t_basic_error>
>

const gistsDeleteCommentResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type GistsDeleteCommentResponder = typeof gistsDeleteCommentResponder &
  KoaRuntimeResponder

const gistsDeleteCommentResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["304", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type GistsDeleteComment = (
  params: Params<t_GistsDeleteCommentParamSchema, void, void, void>,
  respond: GistsDeleteCommentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const gistsListCommitsResponder = {
  with200: r.with200<t_gist_commit[]>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type GistsListCommitsResponder = typeof gistsListCommitsResponder &
  KoaRuntimeResponder

const gistsListCommitsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_gist_commit)],
    ["304", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type GistsListCommits = (
  params: Params<
    t_GistsListCommitsParamSchema,
    t_GistsListCommitsQuerySchema,
    void,
    void
  >,
  respond: GistsListCommitsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_gist_commit[]>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const gistsListForksResponder = {
  with200: r.with200<t_gist_simple[]>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type GistsListForksResponder = typeof gistsListForksResponder &
  KoaRuntimeResponder

const gistsListForksResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_gist_simple)],
    ["304", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type GistsListForks = (
  params: Params<
    t_GistsListForksParamSchema,
    t_GistsListForksQuerySchema,
    void,
    void
  >,
  respond: GistsListForksResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_gist_simple[]>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const gistsForkResponder = {
  with201: r.with201<t_base_gist>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type GistsForkResponder = typeof gistsForkResponder & KoaRuntimeResponder

const gistsForkResponseValidator = responseValidationFactory(
  [
    ["201", s_base_gist],
    ["304", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type GistsFork = (
  params: Params<t_GistsForkParamSchema, void, void, void>,
  respond: GistsForkResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_base_gist>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const gistsCheckIsStarredResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<EmptyObject>,
  withStatus: r.withStatus,
}

type GistsCheckIsStarredResponder = typeof gistsCheckIsStarredResponder &
  KoaRuntimeResponder

const gistsCheckIsStarredResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["304", z.undefined()],
    ["403", s_basic_error],
    ["404", z.object({})],
  ],
  undefined,
)

export type GistsCheckIsStarred = (
  params: Params<t_GistsCheckIsStarredParamSchema, void, void, void>,
  respond: GistsCheckIsStarredResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, EmptyObject>
>

const gistsStarResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type GistsStarResponder = typeof gistsStarResponder & KoaRuntimeResponder

const gistsStarResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["304", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type GistsStar = (
  params: Params<t_GistsStarParamSchema, void, void, void>,
  respond: GistsStarResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const gistsUnstarResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type GistsUnstarResponder = typeof gistsUnstarResponder & KoaRuntimeResponder

const gistsUnstarResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["304", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type GistsUnstar = (
  params: Params<t_GistsUnstarParamSchema, void, void, void>,
  respond: GistsUnstarResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const gistsGetRevisionResponder = {
  with200: r.with200<t_gist_simple>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type GistsGetRevisionResponder = typeof gistsGetRevisionResponder &
  KoaRuntimeResponder

const gistsGetRevisionResponseValidator = responseValidationFactory(
  [
    ["200", s_gist_simple],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type GistsGetRevision = (
  params: Params<t_GistsGetRevisionParamSchema, void, void, void>,
  respond: GistsGetRevisionResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_gist_simple>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const gitignoreGetAllTemplatesResponder = {
  with200: r.with200<string[]>,
  with304: r.with304<void>,
  withStatus: r.withStatus,
}

type GitignoreGetAllTemplatesResponder =
  typeof gitignoreGetAllTemplatesResponder & KoaRuntimeResponder

const gitignoreGetAllTemplatesResponseValidator = responseValidationFactory(
  [
    ["200", z.array(z.string())],
    ["304", z.undefined()],
  ],
  undefined,
)

export type GitignoreGetAllTemplates = (
  params: Params<void, void, void, void>,
  respond: GitignoreGetAllTemplatesResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, string[]> | Response<304, void>
>

const gitignoreGetTemplateResponder = {
  with200: r.with200<t_gitignore_template>,
  with304: r.with304<void>,
  withStatus: r.withStatus,
}

type GitignoreGetTemplateResponder = typeof gitignoreGetTemplateResponder &
  KoaRuntimeResponder

const gitignoreGetTemplateResponseValidator = responseValidationFactory(
  [
    ["200", s_gitignore_template],
    ["304", z.undefined()],
  ],
  undefined,
)

export type GitignoreGetTemplate = (
  params: Params<t_GitignoreGetTemplateParamSchema, void, void, void>,
  respond: GitignoreGetTemplateResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_gitignore_template>
  | Response<304, void>
>

const appsListReposAccessibleToInstallationResponder = {
  with200: r.with200<{
    repositories: t_repository[]
    repository_selection?: string
    total_count: number
  }>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type AppsListReposAccessibleToInstallationResponder =
  typeof appsListReposAccessibleToInstallationResponder & KoaRuntimeResponder

const appsListReposAccessibleToInstallationResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          repositories: z.array(s_repository),
          repository_selection: z.string().optional(),
        }),
      ],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
    ],
    undefined,
  )

export type AppsListReposAccessibleToInstallation = (
  params: Params<
    void,
    t_AppsListReposAccessibleToInstallationQuerySchema,
    void,
    void
  >,
  respond: AppsListReposAccessibleToInstallationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        repositories: t_repository[]
        repository_selection?: string
        total_count: number
      }
    >
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const appsRevokeInstallationAccessTokenResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type AppsRevokeInstallationAccessTokenResponder =
  typeof appsRevokeInstallationAccessTokenResponder & KoaRuntimeResponder

const appsRevokeInstallationAccessTokenResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type AppsRevokeInstallationAccessToken = (
  params: Params<void, void, void, void>,
  respond: AppsRevokeInstallationAccessTokenResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const issuesListResponder = {
  with200: r.with200<t_issue[]>,
  with304: r.with304<void>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type IssuesListResponder = typeof issuesListResponder & KoaRuntimeResponder

const issuesListResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_issue)],
    ["304", z.undefined()],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type IssuesList = (
  params: Params<void, t_IssuesListQuerySchema, void, void>,
  respond: IssuesListResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue[]>
  | Response<304, void>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const licensesGetAllCommonlyUsedResponder = {
  with200: r.with200<t_license_simple[]>,
  with304: r.with304<void>,
  withStatus: r.withStatus,
}

type LicensesGetAllCommonlyUsedResponder =
  typeof licensesGetAllCommonlyUsedResponder & KoaRuntimeResponder

const licensesGetAllCommonlyUsedResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_license_simple)],
    ["304", z.undefined()],
  ],
  undefined,
)

export type LicensesGetAllCommonlyUsed = (
  params: Params<void, t_LicensesGetAllCommonlyUsedQuerySchema, void, void>,
  respond: LicensesGetAllCommonlyUsedResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_license_simple[]>
  | Response<304, void>
>

const licensesGetResponder = {
  with200: r.with200<t_license>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type LicensesGetResponder = typeof licensesGetResponder & KoaRuntimeResponder

const licensesGetResponseValidator = responseValidationFactory(
  [
    ["200", s_license],
    ["304", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type LicensesGet = (
  params: Params<t_LicensesGetParamSchema, void, void, void>,
  respond: LicensesGetResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_license>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const markdownRenderResponder = {
  with200: r.with200<string>,
  with304: r.with304<void>,
  withStatus: r.withStatus,
}

type MarkdownRenderResponder = typeof markdownRenderResponder &
  KoaRuntimeResponder

const markdownRenderResponseValidator = responseValidationFactory(
  [
    ["200", z.string()],
    ["304", z.undefined()],
  ],
  undefined,
)

export type MarkdownRender = (
  params: Params<void, void, t_MarkdownRenderBodySchema, void>,
  respond: MarkdownRenderResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, string> | Response<304, void>
>

const markdownRenderRawResponder = {
  with200: r.with200<string>,
  with304: r.with304<void>,
  withStatus: r.withStatus,
}

type MarkdownRenderRawResponder = typeof markdownRenderRawResponder &
  KoaRuntimeResponder

const markdownRenderRawResponseValidator = responseValidationFactory(
  [
    ["200", z.string()],
    ["304", z.undefined()],
  ],
  undefined,
)

export type MarkdownRenderRaw = (
  params: Params<void, void, t_MarkdownRenderRawBodySchema | undefined, void>,
  respond: MarkdownRenderRawResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, string> | Response<304, void>
>

const appsGetSubscriptionPlanForAccountResponder = {
  with200: r.with200<t_marketplace_purchase>,
  with401: r.with401<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type AppsGetSubscriptionPlanForAccountResponder =
  typeof appsGetSubscriptionPlanForAccountResponder & KoaRuntimeResponder

const appsGetSubscriptionPlanForAccountResponseValidator =
  responseValidationFactory(
    [
      ["200", s_marketplace_purchase],
      ["401", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type AppsGetSubscriptionPlanForAccount = (
  params: Params<
    t_AppsGetSubscriptionPlanForAccountParamSchema,
    void,
    void,
    void
  >,
  respond: AppsGetSubscriptionPlanForAccountResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_marketplace_purchase>
  | Response<401, t_basic_error>
  | Response<404, t_basic_error>
>

const appsListPlansResponder = {
  with200: r.with200<t_marketplace_listing_plan[]>,
  with401: r.with401<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type AppsListPlansResponder = typeof appsListPlansResponder &
  KoaRuntimeResponder

const appsListPlansResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_marketplace_listing_plan)],
    ["401", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type AppsListPlans = (
  params: Params<void, t_AppsListPlansQuerySchema, void, void>,
  respond: AppsListPlansResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_marketplace_listing_plan[]>
  | Response<401, t_basic_error>
  | Response<404, t_basic_error>
>

const appsListAccountsForPlanResponder = {
  with200: r.with200<t_marketplace_purchase[]>,
  with401: r.with401<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type AppsListAccountsForPlanResponder =
  typeof appsListAccountsForPlanResponder & KoaRuntimeResponder

const appsListAccountsForPlanResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_marketplace_purchase)],
    ["401", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type AppsListAccountsForPlan = (
  params: Params<
    t_AppsListAccountsForPlanParamSchema,
    t_AppsListAccountsForPlanQuerySchema,
    void,
    void
  >,
  respond: AppsListAccountsForPlanResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_marketplace_purchase[]>
  | Response<401, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const appsGetSubscriptionPlanForAccountStubbedResponder = {
  with200: r.with200<t_marketplace_purchase>,
  with401: r.with401<t_basic_error>,
  with404: r.with404<void>,
  withStatus: r.withStatus,
}

type AppsGetSubscriptionPlanForAccountStubbedResponder =
  typeof appsGetSubscriptionPlanForAccountStubbedResponder & KoaRuntimeResponder

const appsGetSubscriptionPlanForAccountStubbedResponseValidator =
  responseValidationFactory(
    [
      ["200", s_marketplace_purchase],
      ["401", s_basic_error],
      ["404", z.undefined()],
    ],
    undefined,
  )

export type AppsGetSubscriptionPlanForAccountStubbed = (
  params: Params<
    t_AppsGetSubscriptionPlanForAccountStubbedParamSchema,
    void,
    void,
    void
  >,
  respond: AppsGetSubscriptionPlanForAccountStubbedResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_marketplace_purchase>
  | Response<401, t_basic_error>
  | Response<404, void>
>

const appsListPlansStubbedResponder = {
  with200: r.with200<t_marketplace_listing_plan[]>,
  with401: r.with401<t_basic_error>,
  withStatus: r.withStatus,
}

type AppsListPlansStubbedResponder = typeof appsListPlansStubbedResponder &
  KoaRuntimeResponder

const appsListPlansStubbedResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_marketplace_listing_plan)],
    ["401", s_basic_error],
  ],
  undefined,
)

export type AppsListPlansStubbed = (
  params: Params<void, t_AppsListPlansStubbedQuerySchema, void, void>,
  respond: AppsListPlansStubbedResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_marketplace_listing_plan[]>
  | Response<401, t_basic_error>
>

const appsListAccountsForPlanStubbedResponder = {
  with200: r.with200<t_marketplace_purchase[]>,
  with401: r.with401<t_basic_error>,
  withStatus: r.withStatus,
}

type AppsListAccountsForPlanStubbedResponder =
  typeof appsListAccountsForPlanStubbedResponder & KoaRuntimeResponder

const appsListAccountsForPlanStubbedResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_marketplace_purchase)],
      ["401", s_basic_error],
    ],
    undefined,
  )

export type AppsListAccountsForPlanStubbed = (
  params: Params<
    t_AppsListAccountsForPlanStubbedParamSchema,
    t_AppsListAccountsForPlanStubbedQuerySchema,
    void,
    void
  >,
  respond: AppsListAccountsForPlanStubbedResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_marketplace_purchase[]>
  | Response<401, t_basic_error>
>

const metaGetResponder = {
  with200: r.with200<t_api_overview>,
  with304: r.with304<void>,
  withStatus: r.withStatus,
}

type MetaGetResponder = typeof metaGetResponder & KoaRuntimeResponder

const metaGetResponseValidator = responseValidationFactory(
  [
    ["200", s_api_overview],
    ["304", z.undefined()],
  ],
  undefined,
)

export type MetaGet = (
  params: Params<void, void, void, void>,
  respond: MetaGetResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_api_overview>
  | Response<304, void>
>

const activityListPublicEventsForRepoNetworkResponder = {
  with200: r.with200<t_event[]>,
  with301: r.with301<t_basic_error>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ActivityListPublicEventsForRepoNetworkResponder =
  typeof activityListPublicEventsForRepoNetworkResponder & KoaRuntimeResponder

const activityListPublicEventsForRepoNetworkResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_event)],
      ["301", s_basic_error],
      ["304", z.undefined()],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ActivityListPublicEventsForRepoNetwork = (
  params: Params<
    t_ActivityListPublicEventsForRepoNetworkParamSchema,
    t_ActivityListPublicEventsForRepoNetworkQuerySchema,
    void,
    void
  >,
  respond: ActivityListPublicEventsForRepoNetworkResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_event[]>
  | Response<301, t_basic_error>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const activityListNotificationsForAuthenticatedUserResponder = {
  with200: r.with200<t_thread[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ActivityListNotificationsForAuthenticatedUserResponder =
  typeof activityListNotificationsForAuthenticatedUserResponder &
    KoaRuntimeResponder

const activityListNotificationsForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_thread)],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type ActivityListNotificationsForAuthenticatedUser = (
  params: Params<
    void,
    t_ActivityListNotificationsForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: ActivityListNotificationsForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_thread[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

const activityMarkNotificationsAsReadResponder = {
  with202: r.with202<{
    message?: string
  }>,
  with205: r.with205<void>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type ActivityMarkNotificationsAsReadResponder =
  typeof activityMarkNotificationsAsReadResponder & KoaRuntimeResponder

const activityMarkNotificationsAsReadResponseValidator =
  responseValidationFactory(
    [
      ["202", z.object({ message: z.string().optional() })],
      ["205", z.undefined()],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
    ],
    undefined,
  )

export type ActivityMarkNotificationsAsRead = (
  params: Params<
    void,
    void,
    t_ActivityMarkNotificationsAsReadBodySchema | undefined,
    void
  >,
  respond: ActivityMarkNotificationsAsReadResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      202,
      {
        message?: string
      }
    >
  | Response<205, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const activityGetThreadResponder = {
  with200: r.with200<t_thread>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type ActivityGetThreadResponder = typeof activityGetThreadResponder &
  KoaRuntimeResponder

const activityGetThreadResponseValidator = responseValidationFactory(
  [
    ["200", s_thread],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
  ],
  undefined,
)

export type ActivityGetThread = (
  params: Params<t_ActivityGetThreadParamSchema, void, void, void>,
  respond: ActivityGetThreadResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_thread>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const activityMarkThreadAsReadResponder = {
  with205: r.with205<void>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type ActivityMarkThreadAsReadResponder =
  typeof activityMarkThreadAsReadResponder & KoaRuntimeResponder

const activityMarkThreadAsReadResponseValidator = responseValidationFactory(
  [
    ["205", z.undefined()],
    ["304", z.undefined()],
    ["403", s_basic_error],
  ],
  undefined,
)

export type ActivityMarkThreadAsRead = (
  params: Params<t_ActivityMarkThreadAsReadParamSchema, void, void, void>,
  respond: ActivityMarkThreadAsReadResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<205, void>
  | Response<304, void>
  | Response<403, t_basic_error>
>

const activityMarkThreadAsDoneResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActivityMarkThreadAsDoneResponder =
  typeof activityMarkThreadAsDoneResponder & KoaRuntimeResponder

const activityMarkThreadAsDoneResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type ActivityMarkThreadAsDone = (
  params: Params<t_ActivityMarkThreadAsDoneParamSchema, void, void, void>,
  respond: ActivityMarkThreadAsDoneResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const activityGetThreadSubscriptionForAuthenticatedUserResponder = {
  with200: r.with200<t_thread_subscription>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type ActivityGetThreadSubscriptionForAuthenticatedUserResponder =
  typeof activityGetThreadSubscriptionForAuthenticatedUserResponder &
    KoaRuntimeResponder

const activityGetThreadSubscriptionForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", s_thread_subscription],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
    ],
    undefined,
  )

export type ActivityGetThreadSubscriptionForAuthenticatedUser = (
  params: Params<
    t_ActivityGetThreadSubscriptionForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: ActivityGetThreadSubscriptionForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_thread_subscription>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const activitySetThreadSubscriptionResponder = {
  with200: r.with200<t_thread_subscription>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type ActivitySetThreadSubscriptionResponder =
  typeof activitySetThreadSubscriptionResponder & KoaRuntimeResponder

const activitySetThreadSubscriptionResponseValidator =
  responseValidationFactory(
    [
      ["200", s_thread_subscription],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
    ],
    undefined,
  )

export type ActivitySetThreadSubscription = (
  params: Params<
    t_ActivitySetThreadSubscriptionParamSchema,
    void,
    t_ActivitySetThreadSubscriptionBodySchema | undefined,
    void
  >,
  respond: ActivitySetThreadSubscriptionResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_thread_subscription>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const activityDeleteThreadSubscriptionResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type ActivityDeleteThreadSubscriptionResponder =
  typeof activityDeleteThreadSubscriptionResponder & KoaRuntimeResponder

const activityDeleteThreadSubscriptionResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
    ],
    undefined,
  )

export type ActivityDeleteThreadSubscription = (
  params: Params<
    t_ActivityDeleteThreadSubscriptionParamSchema,
    void,
    void,
    void
  >,
  respond: ActivityDeleteThreadSubscriptionResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const metaGetOctocatResponder = {
  with200: r.with200<string>,
  withStatus: r.withStatus,
}

type MetaGetOctocatResponder = typeof metaGetOctocatResponder &
  KoaRuntimeResponder

const metaGetOctocatResponseValidator = responseValidationFactory(
  [["200", z.string()]],
  undefined,
)

export type MetaGetOctocat = (
  params: Params<void, t_MetaGetOctocatQuerySchema, void, void>,
  respond: MetaGetOctocatResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, string>>

const orgsListResponder = {
  with200: r.with200<t_organization_simple[]>,
  with304: r.with304<void>,
  withStatus: r.withStatus,
}

type OrgsListResponder = typeof orgsListResponder & KoaRuntimeResponder

const orgsListResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_organization_simple)],
    ["304", z.undefined()],
  ],
  undefined,
)

export type OrgsList = (
  params: Params<void, t_OrgsListQuerySchema, void, void>,
  respond: OrgsListResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_organization_simple[]>
  | Response<304, void>
>

const billingGetGithubBillingUsageReportOrgResponder = {
  with200: r.with200<t_billing_usage_report>,
  with400: r.with400<t_scim_error>,
  with403: r.with403<t_basic_error>,
  with500: r.with500<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type BillingGetGithubBillingUsageReportOrgResponder =
  typeof billingGetGithubBillingUsageReportOrgResponder & KoaRuntimeResponder

const billingGetGithubBillingUsageReportOrgResponseValidator =
  responseValidationFactory(
    [
      ["200", s_billing_usage_report],
      ["400", s_scim_error],
      ["403", s_basic_error],
      ["500", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

export type BillingGetGithubBillingUsageReportOrg = (
  params: Params<
    t_BillingGetGithubBillingUsageReportOrgParamSchema,
    t_BillingGetGithubBillingUsageReportOrgQuerySchema,
    void,
    void
  >,
  respond: BillingGetGithubBillingUsageReportOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_billing_usage_report>
  | Response<400, t_scim_error>
  | Response<403, t_basic_error>
  | Response<500, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const orgsGetResponder = {
  with200: r.with200<t_organization_full>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsGetResponder = typeof orgsGetResponder & KoaRuntimeResponder

const orgsGetResponseValidator = responseValidationFactory(
  [
    ["200", s_organization_full],
    ["404", s_basic_error],
  ],
  undefined,
)

export type OrgsGet = (
  params: Params<t_OrgsGetParamSchema, void, void, void>,
  respond: OrgsGetResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_organization_full>
  | Response<404, t_basic_error>
>

const orgsUpdateResponder = {
  with200: r.with200<t_organization_full>,
  with409: r.with409<t_basic_error>,
  with422: r.with422<t_validation_error | t_validation_error_simple>,
  withStatus: r.withStatus,
}

type OrgsUpdateResponder = typeof orgsUpdateResponder & KoaRuntimeResponder

const orgsUpdateResponseValidator = responseValidationFactory(
  [
    ["200", s_organization_full],
    ["409", s_basic_error],
    ["422", z.union([s_validation_error, s_validation_error_simple])],
  ],
  undefined,
)

export type OrgsUpdate = (
  params: Params<
    t_OrgsUpdateParamSchema,
    void,
    t_OrgsUpdateBodySchema | undefined,
    void
  >,
  respond: OrgsUpdateResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_organization_full>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error | t_validation_error_simple>
>

const orgsDeleteResponder = {
  with202: r.with202<{
    [key: string]: unknown | undefined
  }>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsDeleteResponder = typeof orgsDeleteResponder & KoaRuntimeResponder

const orgsDeleteResponseValidator = responseValidationFactory(
  [
    ["202", z.record(z.unknown())],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type OrgsDelete = (
  params: Params<t_OrgsDeleteParamSchema, void, void, void>,
  respond: OrgsDeleteResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      202,
      {
        [key: string]: unknown | undefined
      }
    >
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const actionsGetActionsCacheUsageForOrgResponder = {
  with200: r.with200<t_actions_cache_usage_org_enterprise>,
  withStatus: r.withStatus,
}

type ActionsGetActionsCacheUsageForOrgResponder =
  typeof actionsGetActionsCacheUsageForOrgResponder & KoaRuntimeResponder

const actionsGetActionsCacheUsageForOrgResponseValidator =
  responseValidationFactory(
    [["200", s_actions_cache_usage_org_enterprise]],
    undefined,
  )

export type ActionsGetActionsCacheUsageForOrg = (
  params: Params<
    t_ActionsGetActionsCacheUsageForOrgParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsGetActionsCacheUsageForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_actions_cache_usage_org_enterprise>
>

const actionsGetActionsCacheUsageByRepoForOrgResponder = {
  with200: r.with200<{
    repository_cache_usages: t_actions_cache_usage_by_repository[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type ActionsGetActionsCacheUsageByRepoForOrgResponder =
  typeof actionsGetActionsCacheUsageByRepoForOrgResponder & KoaRuntimeResponder

const actionsGetActionsCacheUsageByRepoForOrgResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          repository_cache_usages: z.array(s_actions_cache_usage_by_repository),
        }),
      ],
    ],
    undefined,
  )

export type ActionsGetActionsCacheUsageByRepoForOrg = (
  params: Params<
    t_ActionsGetActionsCacheUsageByRepoForOrgParamSchema,
    t_ActionsGetActionsCacheUsageByRepoForOrgQuerySchema,
    void,
    void
  >,
  respond: ActionsGetActionsCacheUsageByRepoForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        repository_cache_usages: t_actions_cache_usage_by_repository[]
        total_count: number
      }
    >
>

const actionsListHostedRunnersForOrgResponder = {
  with200: r.with200<{
    runners: t_actions_hosted_runner[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type ActionsListHostedRunnersForOrgResponder =
  typeof actionsListHostedRunnersForOrgResponder & KoaRuntimeResponder

const actionsListHostedRunnersForOrgResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          runners: z.array(s_actions_hosted_runner),
        }),
      ],
    ],
    undefined,
  )

export type ActionsListHostedRunnersForOrg = (
  params: Params<
    t_ActionsListHostedRunnersForOrgParamSchema,
    t_ActionsListHostedRunnersForOrgQuerySchema,
    void,
    void
  >,
  respond: ActionsListHostedRunnersForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        runners: t_actions_hosted_runner[]
        total_count: number
      }
    >
>

const actionsCreateHostedRunnerForOrgResponder = {
  with201: r.with201<t_actions_hosted_runner>,
  withStatus: r.withStatus,
}

type ActionsCreateHostedRunnerForOrgResponder =
  typeof actionsCreateHostedRunnerForOrgResponder & KoaRuntimeResponder

const actionsCreateHostedRunnerForOrgResponseValidator =
  responseValidationFactory([["201", s_actions_hosted_runner]], undefined)

export type ActionsCreateHostedRunnerForOrg = (
  params: Params<
    t_ActionsCreateHostedRunnerForOrgParamSchema,
    void,
    t_ActionsCreateHostedRunnerForOrgBodySchema,
    void
  >,
  respond: ActionsCreateHostedRunnerForOrgResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<201, t_actions_hosted_runner>
>

const actionsGetHostedRunnersGithubOwnedImagesForOrgResponder = {
  with200: r.with200<{
    images: t_actions_hosted_runner_image[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type ActionsGetHostedRunnersGithubOwnedImagesForOrgResponder =
  typeof actionsGetHostedRunnersGithubOwnedImagesForOrgResponder &
    KoaRuntimeResponder

const actionsGetHostedRunnersGithubOwnedImagesForOrgResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          images: z.array(s_actions_hosted_runner_image),
        }),
      ],
    ],
    undefined,
  )

export type ActionsGetHostedRunnersGithubOwnedImagesForOrg = (
  params: Params<
    t_ActionsGetHostedRunnersGithubOwnedImagesForOrgParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsGetHostedRunnersGithubOwnedImagesForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        images: t_actions_hosted_runner_image[]
        total_count: number
      }
    >
>

const actionsGetHostedRunnersPartnerImagesForOrgResponder = {
  with200: r.with200<{
    images: t_actions_hosted_runner_image[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type ActionsGetHostedRunnersPartnerImagesForOrgResponder =
  typeof actionsGetHostedRunnersPartnerImagesForOrgResponder &
    KoaRuntimeResponder

const actionsGetHostedRunnersPartnerImagesForOrgResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          images: z.array(s_actions_hosted_runner_image),
        }),
      ],
    ],
    undefined,
  )

export type ActionsGetHostedRunnersPartnerImagesForOrg = (
  params: Params<
    t_ActionsGetHostedRunnersPartnerImagesForOrgParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsGetHostedRunnersPartnerImagesForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        images: t_actions_hosted_runner_image[]
        total_count: number
      }
    >
>

const actionsGetHostedRunnersLimitsForOrgResponder = {
  with200: r.with200<t_actions_hosted_runner_limits>,
  withStatus: r.withStatus,
}

type ActionsGetHostedRunnersLimitsForOrgResponder =
  typeof actionsGetHostedRunnersLimitsForOrgResponder & KoaRuntimeResponder

const actionsGetHostedRunnersLimitsForOrgResponseValidator =
  responseValidationFactory(
    [["200", s_actions_hosted_runner_limits]],
    undefined,
  )

export type ActionsGetHostedRunnersLimitsForOrg = (
  params: Params<
    t_ActionsGetHostedRunnersLimitsForOrgParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsGetHostedRunnersLimitsForOrgResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_actions_hosted_runner_limits>
>

const actionsGetHostedRunnersMachineSpecsForOrgResponder = {
  with200: r.with200<{
    machine_specs: t_actions_hosted_runner_machine_spec[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type ActionsGetHostedRunnersMachineSpecsForOrgResponder =
  typeof actionsGetHostedRunnersMachineSpecsForOrgResponder &
    KoaRuntimeResponder

const actionsGetHostedRunnersMachineSpecsForOrgResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          machine_specs: z.array(s_actions_hosted_runner_machine_spec),
        }),
      ],
    ],
    undefined,
  )

export type ActionsGetHostedRunnersMachineSpecsForOrg = (
  params: Params<
    t_ActionsGetHostedRunnersMachineSpecsForOrgParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsGetHostedRunnersMachineSpecsForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        machine_specs: t_actions_hosted_runner_machine_spec[]
        total_count: number
      }
    >
>

const actionsGetHostedRunnersPlatformsForOrgResponder = {
  with200: r.with200<{
    platforms: string[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type ActionsGetHostedRunnersPlatformsForOrgResponder =
  typeof actionsGetHostedRunnersPlatformsForOrgResponder & KoaRuntimeResponder

const actionsGetHostedRunnersPlatformsForOrgResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          platforms: z.array(z.string()),
        }),
      ],
    ],
    undefined,
  )

export type ActionsGetHostedRunnersPlatformsForOrg = (
  params: Params<
    t_ActionsGetHostedRunnersPlatformsForOrgParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsGetHostedRunnersPlatformsForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        platforms: string[]
        total_count: number
      }
    >
>

const actionsGetHostedRunnerForOrgResponder = {
  with200: r.with200<t_actions_hosted_runner>,
  withStatus: r.withStatus,
}

type ActionsGetHostedRunnerForOrgResponder =
  typeof actionsGetHostedRunnerForOrgResponder & KoaRuntimeResponder

const actionsGetHostedRunnerForOrgResponseValidator = responseValidationFactory(
  [["200", s_actions_hosted_runner]],
  undefined,
)

export type ActionsGetHostedRunnerForOrg = (
  params: Params<t_ActionsGetHostedRunnerForOrgParamSchema, void, void, void>,
  respond: ActionsGetHostedRunnerForOrgResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_actions_hosted_runner>
>

const actionsUpdateHostedRunnerForOrgResponder = {
  with200: r.with200<t_actions_hosted_runner>,
  withStatus: r.withStatus,
}

type ActionsUpdateHostedRunnerForOrgResponder =
  typeof actionsUpdateHostedRunnerForOrgResponder & KoaRuntimeResponder

const actionsUpdateHostedRunnerForOrgResponseValidator =
  responseValidationFactory([["200", s_actions_hosted_runner]], undefined)

export type ActionsUpdateHostedRunnerForOrg = (
  params: Params<
    t_ActionsUpdateHostedRunnerForOrgParamSchema,
    void,
    t_ActionsUpdateHostedRunnerForOrgBodySchema,
    void
  >,
  respond: ActionsUpdateHostedRunnerForOrgResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_actions_hosted_runner>
>

const actionsDeleteHostedRunnerForOrgResponder = {
  with202: r.with202<t_actions_hosted_runner>,
  withStatus: r.withStatus,
}

type ActionsDeleteHostedRunnerForOrgResponder =
  typeof actionsDeleteHostedRunnerForOrgResponder & KoaRuntimeResponder

const actionsDeleteHostedRunnerForOrgResponseValidator =
  responseValidationFactory([["202", s_actions_hosted_runner]], undefined)

export type ActionsDeleteHostedRunnerForOrg = (
  params: Params<
    t_ActionsDeleteHostedRunnerForOrgParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsDeleteHostedRunnerForOrgResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<202, t_actions_hosted_runner>
>

const oidcGetOidcCustomSubTemplateForOrgResponder = {
  with200: r.with200<t_oidc_custom_sub>,
  withStatus: r.withStatus,
}

type OidcGetOidcCustomSubTemplateForOrgResponder =
  typeof oidcGetOidcCustomSubTemplateForOrgResponder & KoaRuntimeResponder

const oidcGetOidcCustomSubTemplateForOrgResponseValidator =
  responseValidationFactory([["200", s_oidc_custom_sub]], undefined)

export type OidcGetOidcCustomSubTemplateForOrg = (
  params: Params<
    t_OidcGetOidcCustomSubTemplateForOrgParamSchema,
    void,
    void,
    void
  >,
  respond: OidcGetOidcCustomSubTemplateForOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_oidc_custom_sub>>

const oidcUpdateOidcCustomSubTemplateForOrgResponder = {
  with201: r.with201<t_empty_object>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type OidcUpdateOidcCustomSubTemplateForOrgResponder =
  typeof oidcUpdateOidcCustomSubTemplateForOrgResponder & KoaRuntimeResponder

const oidcUpdateOidcCustomSubTemplateForOrgResponseValidator =
  responseValidationFactory(
    [
      ["201", s_empty_object],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type OidcUpdateOidcCustomSubTemplateForOrg = (
  params: Params<
    t_OidcUpdateOidcCustomSubTemplateForOrgParamSchema,
    void,
    t_OidcUpdateOidcCustomSubTemplateForOrgBodySchema,
    void
  >,
  respond: OidcUpdateOidcCustomSubTemplateForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const actionsGetGithubActionsPermissionsOrganizationResponder = {
  with200: r.with200<t_actions_organization_permissions>,
  withStatus: r.withStatus,
}

type ActionsGetGithubActionsPermissionsOrganizationResponder =
  typeof actionsGetGithubActionsPermissionsOrganizationResponder &
    KoaRuntimeResponder

const actionsGetGithubActionsPermissionsOrganizationResponseValidator =
  responseValidationFactory(
    [["200", s_actions_organization_permissions]],
    undefined,
  )

export type ActionsGetGithubActionsPermissionsOrganization = (
  params: Params<
    t_ActionsGetGithubActionsPermissionsOrganizationParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsGetGithubActionsPermissionsOrganizationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_actions_organization_permissions>
>

const actionsSetGithubActionsPermissionsOrganizationResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsSetGithubActionsPermissionsOrganizationResponder =
  typeof actionsSetGithubActionsPermissionsOrganizationResponder &
    KoaRuntimeResponder

const actionsSetGithubActionsPermissionsOrganizationResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsSetGithubActionsPermissionsOrganization = (
  params: Params<
    t_ActionsSetGithubActionsPermissionsOrganizationParamSchema,
    void,
    t_ActionsSetGithubActionsPermissionsOrganizationBodySchema,
    void
  >,
  respond: ActionsSetGithubActionsPermissionsOrganizationResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponder =
  {
    with200: r.with200<{
      repositories: t_repository[]
      total_count: number
    }>,
    withStatus: r.withStatus,
  }

type ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponder =
  typeof actionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponder &
    KoaRuntimeResponder

const actionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          repositories: z.array(s_repository),
        }),
      ],
    ],
    undefined,
  )

export type ActionsListSelectedRepositoriesEnabledGithubActionsOrganization = (
  params: Params<
    t_ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema,
    t_ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationQuerySchema,
    void,
    void
  >,
  respond: ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        repositories: t_repository[]
        total_count: number
      }
    >
>

const actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponder =
  {
    with204: r.with204<void>,
    withStatus: r.withStatus,
  }

type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponder =
  typeof actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponder &
    KoaRuntimeResponder

const actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization = (
  params: Params<
    t_ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema,
    void,
    t_ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationBodySchema,
    void
  >,
  respond: ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsEnableSelectedRepositoryGithubActionsOrganizationResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsEnableSelectedRepositoryGithubActionsOrganizationResponder =
  typeof actionsEnableSelectedRepositoryGithubActionsOrganizationResponder &
    KoaRuntimeResponder

const actionsEnableSelectedRepositoryGithubActionsOrganizationResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsEnableSelectedRepositoryGithubActionsOrganization = (
  params: Params<
    t_ActionsEnableSelectedRepositoryGithubActionsOrganizationParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsEnableSelectedRepositoryGithubActionsOrganizationResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsDisableSelectedRepositoryGithubActionsOrganizationResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsDisableSelectedRepositoryGithubActionsOrganizationResponder =
  typeof actionsDisableSelectedRepositoryGithubActionsOrganizationResponder &
    KoaRuntimeResponder

const actionsDisableSelectedRepositoryGithubActionsOrganizationResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsDisableSelectedRepositoryGithubActionsOrganization = (
  params: Params<
    t_ActionsDisableSelectedRepositoryGithubActionsOrganizationParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsDisableSelectedRepositoryGithubActionsOrganizationResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsGetAllowedActionsOrganizationResponder = {
  with200: r.with200<t_selected_actions>,
  withStatus: r.withStatus,
}

type ActionsGetAllowedActionsOrganizationResponder =
  typeof actionsGetAllowedActionsOrganizationResponder & KoaRuntimeResponder

const actionsGetAllowedActionsOrganizationResponseValidator =
  responseValidationFactory([["200", s_selected_actions]], undefined)

export type ActionsGetAllowedActionsOrganization = (
  params: Params<
    t_ActionsGetAllowedActionsOrganizationParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsGetAllowedActionsOrganizationResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_selected_actions>>

const actionsSetAllowedActionsOrganizationResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsSetAllowedActionsOrganizationResponder =
  typeof actionsSetAllowedActionsOrganizationResponder & KoaRuntimeResponder

const actionsSetAllowedActionsOrganizationResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsSetAllowedActionsOrganization = (
  params: Params<
    t_ActionsSetAllowedActionsOrganizationParamSchema,
    void,
    t_ActionsSetAllowedActionsOrganizationBodySchema | undefined,
    void
  >,
  respond: ActionsSetAllowedActionsOrganizationResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationResponder = {
  with200: r.with200<t_actions_get_default_workflow_permissions>,
  withStatus: r.withStatus,
}

type ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationResponder =
  typeof actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationResponder &
    KoaRuntimeResponder

const actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationResponseValidator =
  responseValidationFactory(
    [["200", s_actions_get_default_workflow_permissions]],
    undefined,
  )

export type ActionsGetGithubActionsDefaultWorkflowPermissionsOrganization = (
  params: Params<
    t_ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_actions_get_default_workflow_permissions>
>

const actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationResponder =
  typeof actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationResponder &
    KoaRuntimeResponder

const actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsSetGithubActionsDefaultWorkflowPermissionsOrganization = (
  params: Params<
    t_ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema,
    void,
    | t_ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationBodySchema
    | undefined,
    void
  >,
  respond: ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsListSelfHostedRunnerGroupsForOrgResponder = {
  with200: r.with200<{
    runner_groups: t_runner_groups_org[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type ActionsListSelfHostedRunnerGroupsForOrgResponder =
  typeof actionsListSelfHostedRunnerGroupsForOrgResponder & KoaRuntimeResponder

const actionsListSelfHostedRunnerGroupsForOrgResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          runner_groups: z.array(s_runner_groups_org),
        }),
      ],
    ],
    undefined,
  )

export type ActionsListSelfHostedRunnerGroupsForOrg = (
  params: Params<
    t_ActionsListSelfHostedRunnerGroupsForOrgParamSchema,
    t_ActionsListSelfHostedRunnerGroupsForOrgQuerySchema,
    void,
    void
  >,
  respond: ActionsListSelfHostedRunnerGroupsForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        runner_groups: t_runner_groups_org[]
        total_count: number
      }
    >
>

const actionsCreateSelfHostedRunnerGroupForOrgResponder = {
  with201: r.with201<t_runner_groups_org>,
  withStatus: r.withStatus,
}

type ActionsCreateSelfHostedRunnerGroupForOrgResponder =
  typeof actionsCreateSelfHostedRunnerGroupForOrgResponder & KoaRuntimeResponder

const actionsCreateSelfHostedRunnerGroupForOrgResponseValidator =
  responseValidationFactory([["201", s_runner_groups_org]], undefined)

export type ActionsCreateSelfHostedRunnerGroupForOrg = (
  params: Params<
    t_ActionsCreateSelfHostedRunnerGroupForOrgParamSchema,
    void,
    t_ActionsCreateSelfHostedRunnerGroupForOrgBodySchema,
    void
  >,
  respond: ActionsCreateSelfHostedRunnerGroupForOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_runner_groups_org>>

const actionsGetSelfHostedRunnerGroupForOrgResponder = {
  with200: r.with200<t_runner_groups_org>,
  withStatus: r.withStatus,
}

type ActionsGetSelfHostedRunnerGroupForOrgResponder =
  typeof actionsGetSelfHostedRunnerGroupForOrgResponder & KoaRuntimeResponder

const actionsGetSelfHostedRunnerGroupForOrgResponseValidator =
  responseValidationFactory([["200", s_runner_groups_org]], undefined)

export type ActionsGetSelfHostedRunnerGroupForOrg = (
  params: Params<
    t_ActionsGetSelfHostedRunnerGroupForOrgParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsGetSelfHostedRunnerGroupForOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_runner_groups_org>>

const actionsUpdateSelfHostedRunnerGroupForOrgResponder = {
  with200: r.with200<t_runner_groups_org>,
  withStatus: r.withStatus,
}

type ActionsUpdateSelfHostedRunnerGroupForOrgResponder =
  typeof actionsUpdateSelfHostedRunnerGroupForOrgResponder & KoaRuntimeResponder

const actionsUpdateSelfHostedRunnerGroupForOrgResponseValidator =
  responseValidationFactory([["200", s_runner_groups_org]], undefined)

export type ActionsUpdateSelfHostedRunnerGroupForOrg = (
  params: Params<
    t_ActionsUpdateSelfHostedRunnerGroupForOrgParamSchema,
    void,
    t_ActionsUpdateSelfHostedRunnerGroupForOrgBodySchema,
    void
  >,
  respond: ActionsUpdateSelfHostedRunnerGroupForOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_runner_groups_org>>

const actionsDeleteSelfHostedRunnerGroupFromOrgResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsDeleteSelfHostedRunnerGroupFromOrgResponder =
  typeof actionsDeleteSelfHostedRunnerGroupFromOrgResponder &
    KoaRuntimeResponder

const actionsDeleteSelfHostedRunnerGroupFromOrgResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsDeleteSelfHostedRunnerGroupFromOrg = (
  params: Params<
    t_ActionsDeleteSelfHostedRunnerGroupFromOrgParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsDeleteSelfHostedRunnerGroupFromOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsListGithubHostedRunnersInGroupForOrgResponder = {
  with200: r.with200<{
    runners: t_actions_hosted_runner[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type ActionsListGithubHostedRunnersInGroupForOrgResponder =
  typeof actionsListGithubHostedRunnersInGroupForOrgResponder &
    KoaRuntimeResponder

const actionsListGithubHostedRunnersInGroupForOrgResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          runners: z.array(s_actions_hosted_runner),
        }),
      ],
    ],
    undefined,
  )

export type ActionsListGithubHostedRunnersInGroupForOrg = (
  params: Params<
    t_ActionsListGithubHostedRunnersInGroupForOrgParamSchema,
    t_ActionsListGithubHostedRunnersInGroupForOrgQuerySchema,
    void,
    void
  >,
  respond: ActionsListGithubHostedRunnersInGroupForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        runners: t_actions_hosted_runner[]
        total_count: number
      }
    >
>

const actionsListRepoAccessToSelfHostedRunnerGroupInOrgResponder = {
  with200: r.with200<{
    repositories: t_minimal_repository[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type ActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponder =
  typeof actionsListRepoAccessToSelfHostedRunnerGroupInOrgResponder &
    KoaRuntimeResponder

const actionsListRepoAccessToSelfHostedRunnerGroupInOrgResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          repositories: z.array(s_minimal_repository),
        }),
      ],
    ],
    undefined,
  )

export type ActionsListRepoAccessToSelfHostedRunnerGroupInOrg = (
  params: Params<
    t_ActionsListRepoAccessToSelfHostedRunnerGroupInOrgParamSchema,
    t_ActionsListRepoAccessToSelfHostedRunnerGroupInOrgQuerySchema,
    void,
    void
  >,
  respond: ActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        repositories: t_minimal_repository[]
        total_count: number
      }
    >
>

const actionsSetRepoAccessToSelfHostedRunnerGroupInOrgResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgResponder =
  typeof actionsSetRepoAccessToSelfHostedRunnerGroupInOrgResponder &
    KoaRuntimeResponder

const actionsSetRepoAccessToSelfHostedRunnerGroupInOrgResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsSetRepoAccessToSelfHostedRunnerGroupInOrg = (
  params: Params<
    t_ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgParamSchema,
    void,
    t_ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgBodySchema,
    void
  >,
  respond: ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponder =
  typeof actionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponder &
    KoaRuntimeResponder

const actionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsAddRepoAccessToSelfHostedRunnerGroupInOrg = (
  params: Params<
    t_ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgResponder =
  typeof actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgResponder &
    KoaRuntimeResponder

const actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg = (
  params: Params<
    t_ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsListSelfHostedRunnersInGroupForOrgResponder = {
  with200: r.with200<{
    runners: t_runner[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type ActionsListSelfHostedRunnersInGroupForOrgResponder =
  typeof actionsListSelfHostedRunnersInGroupForOrgResponder &
    KoaRuntimeResponder

const actionsListSelfHostedRunnersInGroupForOrgResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          runners: z.array(s_runner),
        }),
      ],
    ],
    undefined,
  )

export type ActionsListSelfHostedRunnersInGroupForOrg = (
  params: Params<
    t_ActionsListSelfHostedRunnersInGroupForOrgParamSchema,
    t_ActionsListSelfHostedRunnersInGroupForOrgQuerySchema,
    void,
    void
  >,
  respond: ActionsListSelfHostedRunnersInGroupForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        runners: t_runner[]
        total_count: number
      }
    >
>

const actionsSetSelfHostedRunnersInGroupForOrgResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsSetSelfHostedRunnersInGroupForOrgResponder =
  typeof actionsSetSelfHostedRunnersInGroupForOrgResponder & KoaRuntimeResponder

const actionsSetSelfHostedRunnersInGroupForOrgResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsSetSelfHostedRunnersInGroupForOrg = (
  params: Params<
    t_ActionsSetSelfHostedRunnersInGroupForOrgParamSchema,
    void,
    t_ActionsSetSelfHostedRunnersInGroupForOrgBodySchema,
    void
  >,
  respond: ActionsSetSelfHostedRunnersInGroupForOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsAddSelfHostedRunnerToGroupForOrgResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsAddSelfHostedRunnerToGroupForOrgResponder =
  typeof actionsAddSelfHostedRunnerToGroupForOrgResponder & KoaRuntimeResponder

const actionsAddSelfHostedRunnerToGroupForOrgResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsAddSelfHostedRunnerToGroupForOrg = (
  params: Params<
    t_ActionsAddSelfHostedRunnerToGroupForOrgParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsAddSelfHostedRunnerToGroupForOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsRemoveSelfHostedRunnerFromGroupForOrgResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsRemoveSelfHostedRunnerFromGroupForOrgResponder =
  typeof actionsRemoveSelfHostedRunnerFromGroupForOrgResponder &
    KoaRuntimeResponder

const actionsRemoveSelfHostedRunnerFromGroupForOrgResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsRemoveSelfHostedRunnerFromGroupForOrg = (
  params: Params<
    t_ActionsRemoveSelfHostedRunnerFromGroupForOrgParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsRemoveSelfHostedRunnerFromGroupForOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsListSelfHostedRunnersForOrgResponder = {
  with200: r.with200<{
    runners: t_runner[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type ActionsListSelfHostedRunnersForOrgResponder =
  typeof actionsListSelfHostedRunnersForOrgResponder & KoaRuntimeResponder

const actionsListSelfHostedRunnersForOrgResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          runners: z.array(s_runner),
        }),
      ],
    ],
    undefined,
  )

export type ActionsListSelfHostedRunnersForOrg = (
  params: Params<
    t_ActionsListSelfHostedRunnersForOrgParamSchema,
    t_ActionsListSelfHostedRunnersForOrgQuerySchema,
    void,
    void
  >,
  respond: ActionsListSelfHostedRunnersForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        runners: t_runner[]
        total_count: number
      }
    >
>

const actionsListRunnerApplicationsForOrgResponder = {
  with200: r.with200<t_runner_application[]>,
  withStatus: r.withStatus,
}

type ActionsListRunnerApplicationsForOrgResponder =
  typeof actionsListRunnerApplicationsForOrgResponder & KoaRuntimeResponder

const actionsListRunnerApplicationsForOrgResponseValidator =
  responseValidationFactory([["200", z.array(s_runner_application)]], undefined)

export type ActionsListRunnerApplicationsForOrg = (
  params: Params<
    t_ActionsListRunnerApplicationsForOrgParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsListRunnerApplicationsForOrgResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_runner_application[]>
>

const actionsGenerateRunnerJitconfigForOrgResponder = {
  with201: r.with201<{
    encoded_jit_config: string
    runner: t_runner
  }>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type ActionsGenerateRunnerJitconfigForOrgResponder =
  typeof actionsGenerateRunnerJitconfigForOrgResponder & KoaRuntimeResponder

const actionsGenerateRunnerJitconfigForOrgResponseValidator =
  responseValidationFactory(
    [
      ["201", z.object({ runner: s_runner, encoded_jit_config: z.string() })],
      ["404", s_basic_error],
      ["409", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

export type ActionsGenerateRunnerJitconfigForOrg = (
  params: Params<
    t_ActionsGenerateRunnerJitconfigForOrgParamSchema,
    void,
    t_ActionsGenerateRunnerJitconfigForOrgBodySchema,
    void
  >,
  respond: ActionsGenerateRunnerJitconfigForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      201,
      {
        encoded_jit_config: string
        runner: t_runner
      }
    >
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const actionsCreateRegistrationTokenForOrgResponder = {
  with201: r.with201<t_authentication_token>,
  withStatus: r.withStatus,
}

type ActionsCreateRegistrationTokenForOrgResponder =
  typeof actionsCreateRegistrationTokenForOrgResponder & KoaRuntimeResponder

const actionsCreateRegistrationTokenForOrgResponseValidator =
  responseValidationFactory([["201", s_authentication_token]], undefined)

export type ActionsCreateRegistrationTokenForOrg = (
  params: Params<
    t_ActionsCreateRegistrationTokenForOrgParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsCreateRegistrationTokenForOrgResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<201, t_authentication_token>
>

const actionsCreateRemoveTokenForOrgResponder = {
  with201: r.with201<t_authentication_token>,
  withStatus: r.withStatus,
}

type ActionsCreateRemoveTokenForOrgResponder =
  typeof actionsCreateRemoveTokenForOrgResponder & KoaRuntimeResponder

const actionsCreateRemoveTokenForOrgResponseValidator =
  responseValidationFactory([["201", s_authentication_token]], undefined)

export type ActionsCreateRemoveTokenForOrg = (
  params: Params<t_ActionsCreateRemoveTokenForOrgParamSchema, void, void, void>,
  respond: ActionsCreateRemoveTokenForOrgResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<201, t_authentication_token>
>

const actionsGetSelfHostedRunnerForOrgResponder = {
  with200: r.with200<t_runner>,
  withStatus: r.withStatus,
}

type ActionsGetSelfHostedRunnerForOrgResponder =
  typeof actionsGetSelfHostedRunnerForOrgResponder & KoaRuntimeResponder

const actionsGetSelfHostedRunnerForOrgResponseValidator =
  responseValidationFactory([["200", s_runner]], undefined)

export type ActionsGetSelfHostedRunnerForOrg = (
  params: Params<
    t_ActionsGetSelfHostedRunnerForOrgParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsGetSelfHostedRunnerForOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_runner>>

const actionsDeleteSelfHostedRunnerFromOrgResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsDeleteSelfHostedRunnerFromOrgResponder =
  typeof actionsDeleteSelfHostedRunnerFromOrgResponder & KoaRuntimeResponder

const actionsDeleteSelfHostedRunnerFromOrgResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsDeleteSelfHostedRunnerFromOrg = (
  params: Params<
    t_ActionsDeleteSelfHostedRunnerFromOrgParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsDeleteSelfHostedRunnerFromOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsListLabelsForSelfHostedRunnerForOrgResponder = {
  with200: r.with200<{
    labels: t_runner_label[]
    total_count: number
  }>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ActionsListLabelsForSelfHostedRunnerForOrgResponder =
  typeof actionsListLabelsForSelfHostedRunnerForOrgResponder &
    KoaRuntimeResponder

const actionsListLabelsForSelfHostedRunnerForOrgResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          labels: z.array(s_runner_label),
        }),
      ],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ActionsListLabelsForSelfHostedRunnerForOrg = (
  params: Params<
    t_ActionsListLabelsForSelfHostedRunnerForOrgParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsListLabelsForSelfHostedRunnerForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        labels: t_runner_label[]
        total_count: number
      }
    >
  | Response<404, t_basic_error>
>

const actionsAddCustomLabelsToSelfHostedRunnerForOrgResponder = {
  with200: r.with200<{
    labels: t_runner_label[]
    total_count: number
  }>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type ActionsAddCustomLabelsToSelfHostedRunnerForOrgResponder =
  typeof actionsAddCustomLabelsToSelfHostedRunnerForOrgResponder &
    KoaRuntimeResponder

const actionsAddCustomLabelsToSelfHostedRunnerForOrgResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          labels: z.array(s_runner_label),
        }),
      ],
      ["404", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

export type ActionsAddCustomLabelsToSelfHostedRunnerForOrg = (
  params: Params<
    t_ActionsAddCustomLabelsToSelfHostedRunnerForOrgParamSchema,
    void,
    t_ActionsAddCustomLabelsToSelfHostedRunnerForOrgBodySchema,
    void
  >,
  respond: ActionsAddCustomLabelsToSelfHostedRunnerForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        labels: t_runner_label[]
        total_count: number
      }
    >
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const actionsSetCustomLabelsForSelfHostedRunnerForOrgResponder = {
  with200: r.with200<{
    labels: t_runner_label[]
    total_count: number
  }>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type ActionsSetCustomLabelsForSelfHostedRunnerForOrgResponder =
  typeof actionsSetCustomLabelsForSelfHostedRunnerForOrgResponder &
    KoaRuntimeResponder

const actionsSetCustomLabelsForSelfHostedRunnerForOrgResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          labels: z.array(s_runner_label),
        }),
      ],
      ["404", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

export type ActionsSetCustomLabelsForSelfHostedRunnerForOrg = (
  params: Params<
    t_ActionsSetCustomLabelsForSelfHostedRunnerForOrgParamSchema,
    void,
    t_ActionsSetCustomLabelsForSelfHostedRunnerForOrgBodySchema,
    void
  >,
  respond: ActionsSetCustomLabelsForSelfHostedRunnerForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        labels: t_runner_label[]
        total_count: number
      }
    >
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgResponder = {
  with200: r.with200<{
    labels: t_runner_label[]
    total_count: number
  }>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgResponder =
  typeof actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgResponder &
    KoaRuntimeResponder

const actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          labels: z.array(s_runner_label),
        }),
      ],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg = (
  params: Params<
    t_ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        labels: t_runner_label[]
        total_count: number
      }
    >
  | Response<404, t_basic_error>
>

const actionsRemoveCustomLabelFromSelfHostedRunnerForOrgResponder = {
  with200: r.with200<{
    labels: t_runner_label[]
    total_count: number
  }>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgResponder =
  typeof actionsRemoveCustomLabelFromSelfHostedRunnerForOrgResponder &
    KoaRuntimeResponder

const actionsRemoveCustomLabelFromSelfHostedRunnerForOrgResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          labels: z.array(s_runner_label),
        }),
      ],
      ["404", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

export type ActionsRemoveCustomLabelFromSelfHostedRunnerForOrg = (
  params: Params<
    t_ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        labels: t_runner_label[]
        total_count: number
      }
    >
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const actionsListOrgSecretsResponder = {
  with200: r.with200<{
    secrets: t_organization_actions_secret[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type ActionsListOrgSecretsResponder = typeof actionsListOrgSecretsResponder &
  KoaRuntimeResponder

const actionsListOrgSecretsResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number(),
        secrets: z.array(s_organization_actions_secret),
      }),
    ],
  ],
  undefined,
)

export type ActionsListOrgSecrets = (
  params: Params<
    t_ActionsListOrgSecretsParamSchema,
    t_ActionsListOrgSecretsQuerySchema,
    void,
    void
  >,
  respond: ActionsListOrgSecretsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        secrets: t_organization_actions_secret[]
        total_count: number
      }
    >
>

const actionsGetOrgPublicKeyResponder = {
  with200: r.with200<t_actions_public_key>,
  withStatus: r.withStatus,
}

type ActionsGetOrgPublicKeyResponder = typeof actionsGetOrgPublicKeyResponder &
  KoaRuntimeResponder

const actionsGetOrgPublicKeyResponseValidator = responseValidationFactory(
  [["200", s_actions_public_key]],
  undefined,
)

export type ActionsGetOrgPublicKey = (
  params: Params<t_ActionsGetOrgPublicKeyParamSchema, void, void, void>,
  respond: ActionsGetOrgPublicKeyResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_actions_public_key>>

const actionsGetOrgSecretResponder = {
  with200: r.with200<t_organization_actions_secret>,
  withStatus: r.withStatus,
}

type ActionsGetOrgSecretResponder = typeof actionsGetOrgSecretResponder &
  KoaRuntimeResponder

const actionsGetOrgSecretResponseValidator = responseValidationFactory(
  [["200", s_organization_actions_secret]],
  undefined,
)

export type ActionsGetOrgSecret = (
  params: Params<t_ActionsGetOrgSecretParamSchema, void, void, void>,
  respond: ActionsGetOrgSecretResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_organization_actions_secret>
>

const actionsCreateOrUpdateOrgSecretResponder = {
  with201: r.with201<t_empty_object>,
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsCreateOrUpdateOrgSecretResponder =
  typeof actionsCreateOrUpdateOrgSecretResponder & KoaRuntimeResponder

const actionsCreateOrUpdateOrgSecretResponseValidator =
  responseValidationFactory(
    [
      ["201", s_empty_object],
      ["204", z.undefined()],
    ],
    undefined,
  )

export type ActionsCreateOrUpdateOrgSecret = (
  params: Params<
    t_ActionsCreateOrUpdateOrgSecretParamSchema,
    void,
    t_ActionsCreateOrUpdateOrgSecretBodySchema,
    void
  >,
  respond: ActionsCreateOrUpdateOrgSecretResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<204, void>
>

const actionsDeleteOrgSecretResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsDeleteOrgSecretResponder = typeof actionsDeleteOrgSecretResponder &
  KoaRuntimeResponder

const actionsDeleteOrgSecretResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type ActionsDeleteOrgSecret = (
  params: Params<t_ActionsDeleteOrgSecretParamSchema, void, void, void>,
  respond: ActionsDeleteOrgSecretResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsListSelectedReposForOrgSecretResponder = {
  with200: r.with200<{
    repositories: t_minimal_repository[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type ActionsListSelectedReposForOrgSecretResponder =
  typeof actionsListSelectedReposForOrgSecretResponder & KoaRuntimeResponder

const actionsListSelectedReposForOrgSecretResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          repositories: z.array(s_minimal_repository),
        }),
      ],
    ],
    undefined,
  )

export type ActionsListSelectedReposForOrgSecret = (
  params: Params<
    t_ActionsListSelectedReposForOrgSecretParamSchema,
    t_ActionsListSelectedReposForOrgSecretQuerySchema,
    void,
    void
  >,
  respond: ActionsListSelectedReposForOrgSecretResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        repositories: t_minimal_repository[]
        total_count: number
      }
    >
>

const actionsSetSelectedReposForOrgSecretResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsSetSelectedReposForOrgSecretResponder =
  typeof actionsSetSelectedReposForOrgSecretResponder & KoaRuntimeResponder

const actionsSetSelectedReposForOrgSecretResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsSetSelectedReposForOrgSecret = (
  params: Params<
    t_ActionsSetSelectedReposForOrgSecretParamSchema,
    void,
    t_ActionsSetSelectedReposForOrgSecretBodySchema,
    void
  >,
  respond: ActionsSetSelectedReposForOrgSecretResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsAddSelectedRepoToOrgSecretResponder = {
  with204: r.with204<void>,
  with409: r.with409<void>,
  withStatus: r.withStatus,
}

type ActionsAddSelectedRepoToOrgSecretResponder =
  typeof actionsAddSelectedRepoToOrgSecretResponder & KoaRuntimeResponder

const actionsAddSelectedRepoToOrgSecretResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["409", z.undefined()],
    ],
    undefined,
  )

export type ActionsAddSelectedRepoToOrgSecret = (
  params: Params<
    t_ActionsAddSelectedRepoToOrgSecretParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsAddSelectedRepoToOrgSecretResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<409, void>
>

const actionsRemoveSelectedRepoFromOrgSecretResponder = {
  with204: r.with204<void>,
  with409: r.with409<void>,
  withStatus: r.withStatus,
}

type ActionsRemoveSelectedRepoFromOrgSecretResponder =
  typeof actionsRemoveSelectedRepoFromOrgSecretResponder & KoaRuntimeResponder

const actionsRemoveSelectedRepoFromOrgSecretResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["409", z.undefined()],
    ],
    undefined,
  )

export type ActionsRemoveSelectedRepoFromOrgSecret = (
  params: Params<
    t_ActionsRemoveSelectedRepoFromOrgSecretParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsRemoveSelectedRepoFromOrgSecretResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<409, void>
>

const actionsListOrgVariablesResponder = {
  with200: r.with200<{
    total_count: number
    variables: t_organization_actions_variable[]
  }>,
  withStatus: r.withStatus,
}

type ActionsListOrgVariablesResponder =
  typeof actionsListOrgVariablesResponder & KoaRuntimeResponder

const actionsListOrgVariablesResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number(),
        variables: z.array(s_organization_actions_variable),
      }),
    ],
  ],
  undefined,
)

export type ActionsListOrgVariables = (
  params: Params<
    t_ActionsListOrgVariablesParamSchema,
    t_ActionsListOrgVariablesQuerySchema,
    void,
    void
  >,
  respond: ActionsListOrgVariablesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        total_count: number
        variables: t_organization_actions_variable[]
      }
    >
>

const actionsCreateOrgVariableResponder = {
  with201: r.with201<t_empty_object>,
  withStatus: r.withStatus,
}

type ActionsCreateOrgVariableResponder =
  typeof actionsCreateOrgVariableResponder & KoaRuntimeResponder

const actionsCreateOrgVariableResponseValidator = responseValidationFactory(
  [["201", s_empty_object]],
  undefined,
)

export type ActionsCreateOrgVariable = (
  params: Params<
    t_ActionsCreateOrgVariableParamSchema,
    void,
    t_ActionsCreateOrgVariableBodySchema,
    void
  >,
  respond: ActionsCreateOrgVariableResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_empty_object>>

const actionsGetOrgVariableResponder = {
  with200: r.with200<t_organization_actions_variable>,
  withStatus: r.withStatus,
}

type ActionsGetOrgVariableResponder = typeof actionsGetOrgVariableResponder &
  KoaRuntimeResponder

const actionsGetOrgVariableResponseValidator = responseValidationFactory(
  [["200", s_organization_actions_variable]],
  undefined,
)

export type ActionsGetOrgVariable = (
  params: Params<t_ActionsGetOrgVariableParamSchema, void, void, void>,
  respond: ActionsGetOrgVariableResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_organization_actions_variable>
>

const actionsUpdateOrgVariableResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsUpdateOrgVariableResponder =
  typeof actionsUpdateOrgVariableResponder & KoaRuntimeResponder

const actionsUpdateOrgVariableResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type ActionsUpdateOrgVariable = (
  params: Params<
    t_ActionsUpdateOrgVariableParamSchema,
    void,
    t_ActionsUpdateOrgVariableBodySchema,
    void
  >,
  respond: ActionsUpdateOrgVariableResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsDeleteOrgVariableResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsDeleteOrgVariableResponder =
  typeof actionsDeleteOrgVariableResponder & KoaRuntimeResponder

const actionsDeleteOrgVariableResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type ActionsDeleteOrgVariable = (
  params: Params<t_ActionsDeleteOrgVariableParamSchema, void, void, void>,
  respond: ActionsDeleteOrgVariableResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsListSelectedReposForOrgVariableResponder = {
  with200: r.with200<{
    repositories: t_minimal_repository[]
    total_count: number
  }>,
  with409: r.with409<void>,
  withStatus: r.withStatus,
}

type ActionsListSelectedReposForOrgVariableResponder =
  typeof actionsListSelectedReposForOrgVariableResponder & KoaRuntimeResponder

const actionsListSelectedReposForOrgVariableResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          repositories: z.array(s_minimal_repository),
        }),
      ],
      ["409", z.undefined()],
    ],
    undefined,
  )

export type ActionsListSelectedReposForOrgVariable = (
  params: Params<
    t_ActionsListSelectedReposForOrgVariableParamSchema,
    t_ActionsListSelectedReposForOrgVariableQuerySchema,
    void,
    void
  >,
  respond: ActionsListSelectedReposForOrgVariableResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        repositories: t_minimal_repository[]
        total_count: number
      }
    >
  | Response<409, void>
>

const actionsSetSelectedReposForOrgVariableResponder = {
  with204: r.with204<void>,
  with409: r.with409<void>,
  withStatus: r.withStatus,
}

type ActionsSetSelectedReposForOrgVariableResponder =
  typeof actionsSetSelectedReposForOrgVariableResponder & KoaRuntimeResponder

const actionsSetSelectedReposForOrgVariableResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["409", z.undefined()],
    ],
    undefined,
  )

export type ActionsSetSelectedReposForOrgVariable = (
  params: Params<
    t_ActionsSetSelectedReposForOrgVariableParamSchema,
    void,
    t_ActionsSetSelectedReposForOrgVariableBodySchema,
    void
  >,
  respond: ActionsSetSelectedReposForOrgVariableResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<409, void>
>

const actionsAddSelectedRepoToOrgVariableResponder = {
  with204: r.with204<void>,
  with409: r.with409<void>,
  withStatus: r.withStatus,
}

type ActionsAddSelectedRepoToOrgVariableResponder =
  typeof actionsAddSelectedRepoToOrgVariableResponder & KoaRuntimeResponder

const actionsAddSelectedRepoToOrgVariableResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["409", z.undefined()],
    ],
    undefined,
  )

export type ActionsAddSelectedRepoToOrgVariable = (
  params: Params<
    t_ActionsAddSelectedRepoToOrgVariableParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsAddSelectedRepoToOrgVariableResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<409, void>
>

const actionsRemoveSelectedRepoFromOrgVariableResponder = {
  with204: r.with204<void>,
  with409: r.with409<void>,
  withStatus: r.withStatus,
}

type ActionsRemoveSelectedRepoFromOrgVariableResponder =
  typeof actionsRemoveSelectedRepoFromOrgVariableResponder & KoaRuntimeResponder

const actionsRemoveSelectedRepoFromOrgVariableResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["409", z.undefined()],
    ],
    undefined,
  )

export type ActionsRemoveSelectedRepoFromOrgVariable = (
  params: Params<
    t_ActionsRemoveSelectedRepoFromOrgVariableParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsRemoveSelectedRepoFromOrgVariableResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<409, void>
>

const orgsListAttestationsResponder = {
  with200: r.with200<{
    attestations?: {
      bundle?: {
        dsseEnvelope?: {
          [key: string]: unknown | undefined
        }
        mediaType?: string
        verificationMaterial?: {
          [key: string]: unknown | undefined
        }
      }
      bundle_url?: string
      repository_id?: number
    }[]
  }>,
  withStatus: r.withStatus,
}

type OrgsListAttestationsResponder = typeof orgsListAttestationsResponder &
  KoaRuntimeResponder

const orgsListAttestationsResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        attestations: z
          .array(
            z.object({
              bundle: z
                .object({
                  mediaType: z.string().optional(),
                  verificationMaterial: z.record(z.unknown()).optional(),
                  dsseEnvelope: z.record(z.unknown()).optional(),
                })
                .optional(),
              repository_id: z.coerce.number().optional(),
              bundle_url: z.string().optional(),
            }),
          )
          .optional(),
      }),
    ],
  ],
  undefined,
)

export type OrgsListAttestations = (
  params: Params<
    t_OrgsListAttestationsParamSchema,
    t_OrgsListAttestationsQuerySchema,
    void,
    void
  >,
  respond: OrgsListAttestationsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        attestations?: {
          bundle?: {
            dsseEnvelope?: {
              [key: string]: unknown | undefined
            }
            mediaType?: string
            verificationMaterial?: {
              [key: string]: unknown | undefined
            }
          }
          bundle_url?: string
          repository_id?: number
        }[]
      }
    >
>

const orgsListBlockedUsersResponder = {
  with200: r.with200<t_simple_user[]>,
  withStatus: r.withStatus,
}

type OrgsListBlockedUsersResponder = typeof orgsListBlockedUsersResponder &
  KoaRuntimeResponder

const orgsListBlockedUsersResponseValidator = responseValidationFactory(
  [["200", z.array(s_simple_user)]],
  undefined,
)

export type OrgsListBlockedUsers = (
  params: Params<
    t_OrgsListBlockedUsersParamSchema,
    t_OrgsListBlockedUsersQuerySchema,
    void,
    void
  >,
  respond: OrgsListBlockedUsersResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_simple_user[]>>

const orgsCheckBlockedUserResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsCheckBlockedUserResponder = typeof orgsCheckBlockedUserResponder &
  KoaRuntimeResponder

const orgsCheckBlockedUserResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
  ],
  undefined,
)

export type OrgsCheckBlockedUser = (
  params: Params<t_OrgsCheckBlockedUserParamSchema, void, void, void>,
  respond: OrgsCheckBlockedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

const orgsBlockUserResponder = {
  with204: r.with204<void>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type OrgsBlockUserResponder = typeof orgsBlockUserResponder &
  KoaRuntimeResponder

const orgsBlockUserResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["422", s_validation_error],
  ],
  undefined,
)

export type OrgsBlockUser = (
  params: Params<t_OrgsBlockUserParamSchema, void, void, void>,
  respond: OrgsBlockUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<422, t_validation_error>
>

const orgsUnblockUserResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type OrgsUnblockUserResponder = typeof orgsUnblockUserResponder &
  KoaRuntimeResponder

const orgsUnblockUserResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type OrgsUnblockUser = (
  params: Params<t_OrgsUnblockUserParamSchema, void, void, void>,
  respond: OrgsUnblockUserResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const campaignsListOrgCampaignsResponder = {
  with200: r.with200<t_campaign_summary[]>,
  with404: r.with404<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CampaignsListOrgCampaignsResponder =
  typeof campaignsListOrgCampaignsResponder & KoaRuntimeResponder

const campaignsListOrgCampaignsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_campaign_summary)],
    ["404", s_basic_error],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type CampaignsListOrgCampaigns = (
  params: Params<
    t_CampaignsListOrgCampaignsParamSchema,
    t_CampaignsListOrgCampaignsQuerySchema,
    void,
    void
  >,
  respond: CampaignsListOrgCampaignsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_campaign_summary[]>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const campaignsCreateCampaignResponder = {
  with200: r.with200<t_campaign_summary>,
  with400: r.with400<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_basic_error>,
  with429: r.with429<void>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CampaignsCreateCampaignResponder =
  typeof campaignsCreateCampaignResponder & KoaRuntimeResponder

const campaignsCreateCampaignResponseValidator = responseValidationFactory(
  [
    ["200", s_campaign_summary],
    ["400", s_basic_error],
    ["404", s_basic_error],
    ["422", s_basic_error],
    ["429", z.undefined()],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type CampaignsCreateCampaign = (
  params: Params<
    t_CampaignsCreateCampaignParamSchema,
    void,
    t_CampaignsCreateCampaignBodySchema,
    void
  >,
  respond: CampaignsCreateCampaignResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_campaign_summary>
  | Response<400, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_basic_error>
  | Response<429, void>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const campaignsGetCampaignSummaryResponder = {
  with200: r.with200<t_campaign_summary>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CampaignsGetCampaignSummaryResponder =
  typeof campaignsGetCampaignSummaryResponder & KoaRuntimeResponder

const campaignsGetCampaignSummaryResponseValidator = responseValidationFactory(
  [
    ["200", s_campaign_summary],
    ["404", s_basic_error],
    ["422", s_basic_error],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type CampaignsGetCampaignSummary = (
  params: Params<t_CampaignsGetCampaignSummaryParamSchema, void, void, void>,
  respond: CampaignsGetCampaignSummaryResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_campaign_summary>
  | Response<404, t_basic_error>
  | Response<422, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const campaignsUpdateCampaignResponder = {
  with200: r.with200<t_campaign_summary>,
  with400: r.with400<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CampaignsUpdateCampaignResponder =
  typeof campaignsUpdateCampaignResponder & KoaRuntimeResponder

const campaignsUpdateCampaignResponseValidator = responseValidationFactory(
  [
    ["200", s_campaign_summary],
    ["400", s_basic_error],
    ["404", s_basic_error],
    ["422", s_basic_error],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type CampaignsUpdateCampaign = (
  params: Params<
    t_CampaignsUpdateCampaignParamSchema,
    void,
    t_CampaignsUpdateCampaignBodySchema,
    void
  >,
  respond: CampaignsUpdateCampaignResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_campaign_summary>
  | Response<400, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const campaignsDeleteCampaignResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CampaignsDeleteCampaignResponder =
  typeof campaignsDeleteCampaignResponder & KoaRuntimeResponder

const campaignsDeleteCampaignResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type CampaignsDeleteCampaign = (
  params: Params<t_CampaignsDeleteCampaignParamSchema, void, void, void>,
  respond: CampaignsDeleteCampaignResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codeScanningListAlertsForOrgResponder = {
  with200: r.with200<t_code_scanning_organization_alert_items[]>,
  with404: r.with404<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodeScanningListAlertsForOrgResponder =
  typeof codeScanningListAlertsForOrgResponder & KoaRuntimeResponder

const codeScanningListAlertsForOrgResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_code_scanning_organization_alert_items)],
    ["404", s_basic_error],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type CodeScanningListAlertsForOrg = (
  params: Params<
    t_CodeScanningListAlertsForOrgParamSchema,
    t_CodeScanningListAlertsForOrgQuerySchema,
    void,
    void
  >,
  respond: CodeScanningListAlertsForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_organization_alert_items[]>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codeSecurityGetConfigurationsForOrgResponder = {
  with200: r.with200<t_code_security_configuration[]>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type CodeSecurityGetConfigurationsForOrgResponder =
  typeof codeSecurityGetConfigurationsForOrgResponder & KoaRuntimeResponder

const codeSecurityGetConfigurationsForOrgResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_code_security_configuration)],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type CodeSecurityGetConfigurationsForOrg = (
  params: Params<
    t_CodeSecurityGetConfigurationsForOrgParamSchema,
    t_CodeSecurityGetConfigurationsForOrgQuerySchema,
    void,
    void
  >,
  respond: CodeSecurityGetConfigurationsForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_security_configuration[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const codeSecurityCreateConfigurationResponder = {
  with201: r.with201<t_code_security_configuration>,
  withStatus: r.withStatus,
}

type CodeSecurityCreateConfigurationResponder =
  typeof codeSecurityCreateConfigurationResponder & KoaRuntimeResponder

const codeSecurityCreateConfigurationResponseValidator =
  responseValidationFactory([["201", s_code_security_configuration]], undefined)

export type CodeSecurityCreateConfiguration = (
  params: Params<
    t_CodeSecurityCreateConfigurationParamSchema,
    void,
    t_CodeSecurityCreateConfigurationBodySchema,
    void
  >,
  respond: CodeSecurityCreateConfigurationResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<201, t_code_security_configuration>
>

const codeSecurityGetDefaultConfigurationsResponder = {
  with200: r.with200<t_code_security_default_configurations>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type CodeSecurityGetDefaultConfigurationsResponder =
  typeof codeSecurityGetDefaultConfigurationsResponder & KoaRuntimeResponder

const codeSecurityGetDefaultConfigurationsResponseValidator =
  responseValidationFactory(
    [
      ["200", s_code_security_default_configurations],
      ["304", z.undefined()],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type CodeSecurityGetDefaultConfigurations = (
  params: Params<
    t_CodeSecurityGetDefaultConfigurationsParamSchema,
    void,
    void,
    void
  >,
  respond: CodeSecurityGetDefaultConfigurationsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_security_default_configurations>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const codeSecurityDetachConfigurationResponder = {
  with204: r.with204<void>,
  with400: r.with400<t_scim_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error>,
  withStatus: r.withStatus,
}

type CodeSecurityDetachConfigurationResponder =
  typeof codeSecurityDetachConfigurationResponder & KoaRuntimeResponder

const codeSecurityDetachConfigurationResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["400", s_scim_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["409", s_basic_error],
    ],
    undefined,
  )

export type CodeSecurityDetachConfiguration = (
  params: Params<
    t_CodeSecurityDetachConfigurationParamSchema,
    void,
    t_CodeSecurityDetachConfigurationBodySchema,
    void
  >,
  respond: CodeSecurityDetachConfigurationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<400, t_scim_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
>

const codeSecurityGetConfigurationResponder = {
  with200: r.with200<t_code_security_configuration>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type CodeSecurityGetConfigurationResponder =
  typeof codeSecurityGetConfigurationResponder & KoaRuntimeResponder

const codeSecurityGetConfigurationResponseValidator = responseValidationFactory(
  [
    ["200", s_code_security_configuration],
    ["304", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type CodeSecurityGetConfiguration = (
  params: Params<t_CodeSecurityGetConfigurationParamSchema, void, void, void>,
  respond: CodeSecurityGetConfigurationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_security_configuration>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const codeSecurityUpdateConfigurationResponder = {
  with200: r.with200<t_code_security_configuration>,
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type CodeSecurityUpdateConfigurationResponder =
  typeof codeSecurityUpdateConfigurationResponder & KoaRuntimeResponder

const codeSecurityUpdateConfigurationResponseValidator =
  responseValidationFactory(
    [
      ["200", s_code_security_configuration],
      ["204", z.undefined()],
    ],
    undefined,
  )

export type CodeSecurityUpdateConfiguration = (
  params: Params<
    t_CodeSecurityUpdateConfigurationParamSchema,
    void,
    t_CodeSecurityUpdateConfigurationBodySchema,
    void
  >,
  respond: CodeSecurityUpdateConfigurationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_security_configuration>
  | Response<204, void>
>

const codeSecurityDeleteConfigurationResponder = {
  with204: r.with204<void>,
  with400: r.with400<t_scim_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error>,
  withStatus: r.withStatus,
}

type CodeSecurityDeleteConfigurationResponder =
  typeof codeSecurityDeleteConfigurationResponder & KoaRuntimeResponder

const codeSecurityDeleteConfigurationResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["400", s_scim_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["409", s_basic_error],
    ],
    undefined,
  )

export type CodeSecurityDeleteConfiguration = (
  params: Params<
    t_CodeSecurityDeleteConfigurationParamSchema,
    void,
    void,
    void
  >,
  respond: CodeSecurityDeleteConfigurationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<400, t_scim_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
>

const codeSecurityAttachConfigurationResponder = {
  with202: r.with202<{
    [key: string]: unknown | undefined
  }>,
  withStatus: r.withStatus,
}

type CodeSecurityAttachConfigurationResponder =
  typeof codeSecurityAttachConfigurationResponder & KoaRuntimeResponder

const codeSecurityAttachConfigurationResponseValidator =
  responseValidationFactory([["202", z.record(z.unknown())]], undefined)

export type CodeSecurityAttachConfiguration = (
  params: Params<
    t_CodeSecurityAttachConfigurationParamSchema,
    void,
    t_CodeSecurityAttachConfigurationBodySchema,
    void
  >,
  respond: CodeSecurityAttachConfigurationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      202,
      {
        [key: string]: unknown | undefined
      }
    >
>

const codeSecuritySetConfigurationAsDefaultResponder = {
  with200: r.with200<{
    configuration?: t_code_security_configuration
    default_for_new_repos?: "all" | "none" | "private_and_internal" | "public"
  }>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type CodeSecuritySetConfigurationAsDefaultResponder =
  typeof codeSecuritySetConfigurationAsDefaultResponder & KoaRuntimeResponder

const codeSecuritySetConfigurationAsDefaultResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          default_for_new_repos: z
            .enum(["all", "none", "private_and_internal", "public"])
            .optional(),
          configuration: s_code_security_configuration.optional(),
        }),
      ],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type CodeSecuritySetConfigurationAsDefault = (
  params: Params<
    t_CodeSecuritySetConfigurationAsDefaultParamSchema,
    void,
    t_CodeSecuritySetConfigurationAsDefaultBodySchema,
    void
  >,
  respond: CodeSecuritySetConfigurationAsDefaultResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        configuration?: t_code_security_configuration
        default_for_new_repos?:
          | "all"
          | "none"
          | "private_and_internal"
          | "public"
      }
    >
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const codeSecurityGetRepositoriesForConfigurationResponder = {
  with200: r.with200<t_code_security_configuration_repositories[]>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type CodeSecurityGetRepositoriesForConfigurationResponder =
  typeof codeSecurityGetRepositoriesForConfigurationResponder &
    KoaRuntimeResponder

const codeSecurityGetRepositoriesForConfigurationResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_code_security_configuration_repositories)],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type CodeSecurityGetRepositoriesForConfiguration = (
  params: Params<
    t_CodeSecurityGetRepositoriesForConfigurationParamSchema,
    t_CodeSecurityGetRepositoriesForConfigurationQuerySchema,
    void,
    void
  >,
  respond: CodeSecurityGetRepositoriesForConfigurationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_security_configuration_repositories[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const codespacesListInOrganizationResponder = {
  with200: r.with200<{
    codespaces: t_codespace[]
    total_count: number
  }>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesListInOrganizationResponder =
  typeof codespacesListInOrganizationResponder & KoaRuntimeResponder

const codespacesListInOrganizationResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number(),
        codespaces: z.array(s_codespace),
      }),
    ],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type CodespacesListInOrganization = (
  params: Params<
    t_CodespacesListInOrganizationParamSchema,
    t_CodespacesListInOrganizationQuerySchema,
    void,
    void
  >,
  respond: CodespacesListInOrganizationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        codespaces: t_codespace[]
        total_count: number
      }
    >
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const codespacesSetCodespacesAccessResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with400: r.with400<void>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesSetCodespacesAccessResponder =
  typeof codespacesSetCodespacesAccessResponder & KoaRuntimeResponder

const codespacesSetCodespacesAccessResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["304", z.undefined()],
      ["400", z.undefined()],
      ["404", s_basic_error],
      ["422", s_validation_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CodespacesSetCodespacesAccess = (
  params: Params<
    t_CodespacesSetCodespacesAccessParamSchema,
    void,
    t_CodespacesSetCodespacesAccessBodySchema,
    void
  >,
  respond: CodespacesSetCodespacesAccessResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<400, void>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<500, t_basic_error>
>

const codespacesSetCodespacesAccessUsersResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with400: r.with400<void>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesSetCodespacesAccessUsersResponder =
  typeof codespacesSetCodespacesAccessUsersResponder & KoaRuntimeResponder

const codespacesSetCodespacesAccessUsersResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["304", z.undefined()],
      ["400", z.undefined()],
      ["404", s_basic_error],
      ["422", s_validation_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CodespacesSetCodespacesAccessUsers = (
  params: Params<
    t_CodespacesSetCodespacesAccessUsersParamSchema,
    void,
    t_CodespacesSetCodespacesAccessUsersBodySchema,
    void
  >,
  respond: CodespacesSetCodespacesAccessUsersResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<400, void>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<500, t_basic_error>
>

const codespacesDeleteCodespacesAccessUsersResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with400: r.with400<void>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesDeleteCodespacesAccessUsersResponder =
  typeof codespacesDeleteCodespacesAccessUsersResponder & KoaRuntimeResponder

const codespacesDeleteCodespacesAccessUsersResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["304", z.undefined()],
      ["400", z.undefined()],
      ["404", s_basic_error],
      ["422", s_validation_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CodespacesDeleteCodespacesAccessUsers = (
  params: Params<
    t_CodespacesDeleteCodespacesAccessUsersParamSchema,
    void,
    t_CodespacesDeleteCodespacesAccessUsersBodySchema,
    void
  >,
  respond: CodespacesDeleteCodespacesAccessUsersResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<400, void>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<500, t_basic_error>
>

const codespacesListOrgSecretsResponder = {
  with200: r.with200<{
    secrets: t_codespaces_org_secret[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type CodespacesListOrgSecretsResponder =
  typeof codespacesListOrgSecretsResponder & KoaRuntimeResponder

const codespacesListOrgSecretsResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number(),
        secrets: z.array(s_codespaces_org_secret),
      }),
    ],
  ],
  undefined,
)

export type CodespacesListOrgSecrets = (
  params: Params<
    t_CodespacesListOrgSecretsParamSchema,
    t_CodespacesListOrgSecretsQuerySchema,
    void,
    void
  >,
  respond: CodespacesListOrgSecretsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        secrets: t_codespaces_org_secret[]
        total_count: number
      }
    >
>

const codespacesGetOrgPublicKeyResponder = {
  with200: r.with200<t_codespaces_public_key>,
  withStatus: r.withStatus,
}

type CodespacesGetOrgPublicKeyResponder =
  typeof codespacesGetOrgPublicKeyResponder & KoaRuntimeResponder

const codespacesGetOrgPublicKeyResponseValidator = responseValidationFactory(
  [["200", s_codespaces_public_key]],
  undefined,
)

export type CodespacesGetOrgPublicKey = (
  params: Params<t_CodespacesGetOrgPublicKeyParamSchema, void, void, void>,
  respond: CodespacesGetOrgPublicKeyResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_codespaces_public_key>
>

const codespacesGetOrgSecretResponder = {
  with200: r.with200<t_codespaces_org_secret>,
  withStatus: r.withStatus,
}

type CodespacesGetOrgSecretResponder = typeof codespacesGetOrgSecretResponder &
  KoaRuntimeResponder

const codespacesGetOrgSecretResponseValidator = responseValidationFactory(
  [["200", s_codespaces_org_secret]],
  undefined,
)

export type CodespacesGetOrgSecret = (
  params: Params<t_CodespacesGetOrgSecretParamSchema, void, void, void>,
  respond: CodespacesGetOrgSecretResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_codespaces_org_secret>
>

const codespacesCreateOrUpdateOrgSecretResponder = {
  with201: r.with201<t_empty_object>,
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type CodespacesCreateOrUpdateOrgSecretResponder =
  typeof codespacesCreateOrUpdateOrgSecretResponder & KoaRuntimeResponder

const codespacesCreateOrUpdateOrgSecretResponseValidator =
  responseValidationFactory(
    [
      ["201", s_empty_object],
      ["204", z.undefined()],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type CodespacesCreateOrUpdateOrgSecret = (
  params: Params<
    t_CodespacesCreateOrUpdateOrgSecretParamSchema,
    void,
    t_CodespacesCreateOrUpdateOrgSecretBodySchema,
    void
  >,
  respond: CodespacesCreateOrUpdateOrgSecretResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const codespacesDeleteOrgSecretResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesDeleteOrgSecretResponder =
  typeof codespacesDeleteOrgSecretResponder & KoaRuntimeResponder

const codespacesDeleteOrgSecretResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
  ],
  undefined,
)

export type CodespacesDeleteOrgSecret = (
  params: Params<t_CodespacesDeleteOrgSecretParamSchema, void, void, void>,
  respond: CodespacesDeleteOrgSecretResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

const codespacesListSelectedReposForOrgSecretResponder = {
  with200: r.with200<{
    repositories: t_minimal_repository[]
    total_count: number
  }>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesListSelectedReposForOrgSecretResponder =
  typeof codespacesListSelectedReposForOrgSecretResponder & KoaRuntimeResponder

const codespacesListSelectedReposForOrgSecretResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          repositories: z.array(s_minimal_repository),
        }),
      ],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type CodespacesListSelectedReposForOrgSecret = (
  params: Params<
    t_CodespacesListSelectedReposForOrgSecretParamSchema,
    t_CodespacesListSelectedReposForOrgSecretQuerySchema,
    void,
    void
  >,
  respond: CodespacesListSelectedReposForOrgSecretResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        repositories: t_minimal_repository[]
        total_count: number
      }
    >
  | Response<404, t_basic_error>
>

const codespacesSetSelectedReposForOrgSecretResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<void>,
  withStatus: r.withStatus,
}

type CodespacesSetSelectedReposForOrgSecretResponder =
  typeof codespacesSetSelectedReposForOrgSecretResponder & KoaRuntimeResponder

const codespacesSetSelectedReposForOrgSecretResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["404", s_basic_error],
      ["409", z.undefined()],
    ],
    undefined,
  )

export type CodespacesSetSelectedReposForOrgSecret = (
  params: Params<
    t_CodespacesSetSelectedReposForOrgSecretParamSchema,
    void,
    t_CodespacesSetSelectedReposForOrgSecretBodySchema,
    void
  >,
  respond: CodespacesSetSelectedReposForOrgSecretResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<409, void>
>

const codespacesAddSelectedRepoToOrgSecretResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<void>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type CodespacesAddSelectedRepoToOrgSecretResponder =
  typeof codespacesAddSelectedRepoToOrgSecretResponder & KoaRuntimeResponder

const codespacesAddSelectedRepoToOrgSecretResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["404", s_basic_error],
      ["409", z.undefined()],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type CodespacesAddSelectedRepoToOrgSecret = (
  params: Params<
    t_CodespacesAddSelectedRepoToOrgSecretParamSchema,
    void,
    void,
    void
  >,
  respond: CodespacesAddSelectedRepoToOrgSecretResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<409, void>
  | Response<422, t_validation_error>
>

const codespacesRemoveSelectedRepoFromOrgSecretResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<void>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type CodespacesRemoveSelectedRepoFromOrgSecretResponder =
  typeof codespacesRemoveSelectedRepoFromOrgSecretResponder &
    KoaRuntimeResponder

const codespacesRemoveSelectedRepoFromOrgSecretResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["404", s_basic_error],
      ["409", z.undefined()],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type CodespacesRemoveSelectedRepoFromOrgSecret = (
  params: Params<
    t_CodespacesRemoveSelectedRepoFromOrgSecretParamSchema,
    void,
    void,
    void
  >,
  respond: CodespacesRemoveSelectedRepoFromOrgSecretResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<409, void>
  | Response<422, t_validation_error>
>

const copilotGetCopilotOrganizationDetailsResponder = {
  with200: r.with200<t_copilot_organization_details>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<void>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CopilotGetCopilotOrganizationDetailsResponder =
  typeof copilotGetCopilotOrganizationDetailsResponder & KoaRuntimeResponder

const copilotGetCopilotOrganizationDetailsResponseValidator =
  responseValidationFactory(
    [
      ["200", s_copilot_organization_details],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", z.undefined()],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CopilotGetCopilotOrganizationDetails = (
  params: Params<
    t_CopilotGetCopilotOrganizationDetailsParamSchema,
    void,
    void,
    void
  >,
  respond: CopilotGetCopilotOrganizationDetailsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_copilot_organization_details>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, void>
  | Response<500, t_basic_error>
>

const copilotListCopilotSeatsResponder = {
  with200: r.with200<{
    seats?: t_copilot_seat_details[]
    total_seats?: number
  }>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CopilotListCopilotSeatsResponder =
  typeof copilotListCopilotSeatsResponder & KoaRuntimeResponder

const copilotListCopilotSeatsResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_seats: z.coerce.number().optional(),
        seats: z.array(s_copilot_seat_details).optional(),
      }),
    ],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type CopilotListCopilotSeats = (
  params: Params<
    t_CopilotListCopilotSeatsParamSchema,
    t_CopilotListCopilotSeatsQuerySchema,
    void,
    void
  >,
  respond: CopilotListCopilotSeatsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        seats?: t_copilot_seat_details[]
        total_seats?: number
      }
    >
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const copilotAddCopilotSeatsForTeamsResponder = {
  with201: r.with201<{
    seats_created: number
  }>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<void>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CopilotAddCopilotSeatsForTeamsResponder =
  typeof copilotAddCopilotSeatsForTeamsResponder & KoaRuntimeResponder

const copilotAddCopilotSeatsForTeamsResponseValidator =
  responseValidationFactory(
    [
      ["201", z.object({ seats_created: z.coerce.number() })],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", z.undefined()],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CopilotAddCopilotSeatsForTeams = (
  params: Params<
    t_CopilotAddCopilotSeatsForTeamsParamSchema,
    void,
    t_CopilotAddCopilotSeatsForTeamsBodySchema,
    void
  >,
  respond: CopilotAddCopilotSeatsForTeamsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      201,
      {
        seats_created: number
      }
    >
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, void>
  | Response<500, t_basic_error>
>

const copilotCancelCopilotSeatAssignmentForTeamsResponder = {
  with200: r.with200<{
    seats_cancelled: number
  }>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<void>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CopilotCancelCopilotSeatAssignmentForTeamsResponder =
  typeof copilotCancelCopilotSeatAssignmentForTeamsResponder &
    KoaRuntimeResponder

const copilotCancelCopilotSeatAssignmentForTeamsResponseValidator =
  responseValidationFactory(
    [
      ["200", z.object({ seats_cancelled: z.coerce.number() })],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", z.undefined()],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CopilotCancelCopilotSeatAssignmentForTeams = (
  params: Params<
    t_CopilotCancelCopilotSeatAssignmentForTeamsParamSchema,
    void,
    t_CopilotCancelCopilotSeatAssignmentForTeamsBodySchema,
    void
  >,
  respond: CopilotCancelCopilotSeatAssignmentForTeamsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        seats_cancelled: number
      }
    >
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, void>
  | Response<500, t_basic_error>
>

const copilotAddCopilotSeatsForUsersResponder = {
  with201: r.with201<{
    seats_created: number
  }>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<void>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CopilotAddCopilotSeatsForUsersResponder =
  typeof copilotAddCopilotSeatsForUsersResponder & KoaRuntimeResponder

const copilotAddCopilotSeatsForUsersResponseValidator =
  responseValidationFactory(
    [
      ["201", z.object({ seats_created: z.coerce.number() })],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", z.undefined()],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CopilotAddCopilotSeatsForUsers = (
  params: Params<
    t_CopilotAddCopilotSeatsForUsersParamSchema,
    void,
    t_CopilotAddCopilotSeatsForUsersBodySchema,
    void
  >,
  respond: CopilotAddCopilotSeatsForUsersResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      201,
      {
        seats_created: number
      }
    >
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, void>
  | Response<500, t_basic_error>
>

const copilotCancelCopilotSeatAssignmentForUsersResponder = {
  with200: r.with200<{
    seats_cancelled: number
  }>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<void>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CopilotCancelCopilotSeatAssignmentForUsersResponder =
  typeof copilotCancelCopilotSeatAssignmentForUsersResponder &
    KoaRuntimeResponder

const copilotCancelCopilotSeatAssignmentForUsersResponseValidator =
  responseValidationFactory(
    [
      ["200", z.object({ seats_cancelled: z.coerce.number() })],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", z.undefined()],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CopilotCancelCopilotSeatAssignmentForUsers = (
  params: Params<
    t_CopilotCancelCopilotSeatAssignmentForUsersParamSchema,
    void,
    t_CopilotCancelCopilotSeatAssignmentForUsersBodySchema,
    void
  >,
  respond: CopilotCancelCopilotSeatAssignmentForUsersResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        seats_cancelled: number
      }
    >
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, void>
  | Response<500, t_basic_error>
>

const copilotCopilotMetricsForOrganizationResponder = {
  with200: r.with200<t_copilot_usage_metrics_day[]>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CopilotCopilotMetricsForOrganizationResponder =
  typeof copilotCopilotMetricsForOrganizationResponder & KoaRuntimeResponder

const copilotCopilotMetricsForOrganizationResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_copilot_usage_metrics_day)],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CopilotCopilotMetricsForOrganization = (
  params: Params<
    t_CopilotCopilotMetricsForOrganizationParamSchema,
    t_CopilotCopilotMetricsForOrganizationQuerySchema,
    void,
    void
  >,
  respond: CopilotCopilotMetricsForOrganizationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_copilot_usage_metrics_day[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_basic_error>
  | Response<500, t_basic_error>
>

const dependabotListAlertsForOrgResponder = {
  with200: r.with200<t_dependabot_alert_with_repository[]>,
  with304: r.with304<void>,
  with400: r.with400<t_scim_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type DependabotListAlertsForOrgResponder =
  typeof dependabotListAlertsForOrgResponder & KoaRuntimeResponder

const dependabotListAlertsForOrgResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_dependabot_alert_with_repository)],
    ["304", z.undefined()],
    ["400", s_scim_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error_simple],
  ],
  undefined,
)

export type DependabotListAlertsForOrg = (
  params: Params<
    t_DependabotListAlertsForOrgParamSchema,
    t_DependabotListAlertsForOrgQuerySchema,
    void,
    void
  >,
  respond: DependabotListAlertsForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_dependabot_alert_with_repository[]>
  | Response<304, void>
  | Response<400, t_scim_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const dependabotListOrgSecretsResponder = {
  with200: r.with200<{
    secrets: t_organization_dependabot_secret[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type DependabotListOrgSecretsResponder =
  typeof dependabotListOrgSecretsResponder & KoaRuntimeResponder

const dependabotListOrgSecretsResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number(),
        secrets: z.array(s_organization_dependabot_secret),
      }),
    ],
  ],
  undefined,
)

export type DependabotListOrgSecrets = (
  params: Params<
    t_DependabotListOrgSecretsParamSchema,
    t_DependabotListOrgSecretsQuerySchema,
    void,
    void
  >,
  respond: DependabotListOrgSecretsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        secrets: t_organization_dependabot_secret[]
        total_count: number
      }
    >
>

const dependabotGetOrgPublicKeyResponder = {
  with200: r.with200<t_dependabot_public_key>,
  withStatus: r.withStatus,
}

type DependabotGetOrgPublicKeyResponder =
  typeof dependabotGetOrgPublicKeyResponder & KoaRuntimeResponder

const dependabotGetOrgPublicKeyResponseValidator = responseValidationFactory(
  [["200", s_dependabot_public_key]],
  undefined,
)

export type DependabotGetOrgPublicKey = (
  params: Params<t_DependabotGetOrgPublicKeyParamSchema, void, void, void>,
  respond: DependabotGetOrgPublicKeyResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_dependabot_public_key>
>

const dependabotGetOrgSecretResponder = {
  with200: r.with200<t_organization_dependabot_secret>,
  withStatus: r.withStatus,
}

type DependabotGetOrgSecretResponder = typeof dependabotGetOrgSecretResponder &
  KoaRuntimeResponder

const dependabotGetOrgSecretResponseValidator = responseValidationFactory(
  [["200", s_organization_dependabot_secret]],
  undefined,
)

export type DependabotGetOrgSecret = (
  params: Params<t_DependabotGetOrgSecretParamSchema, void, void, void>,
  respond: DependabotGetOrgSecretResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_organization_dependabot_secret>
>

const dependabotCreateOrUpdateOrgSecretResponder = {
  with201: r.with201<t_empty_object>,
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type DependabotCreateOrUpdateOrgSecretResponder =
  typeof dependabotCreateOrUpdateOrgSecretResponder & KoaRuntimeResponder

const dependabotCreateOrUpdateOrgSecretResponseValidator =
  responseValidationFactory(
    [
      ["201", s_empty_object],
      ["204", z.undefined()],
    ],
    undefined,
  )

export type DependabotCreateOrUpdateOrgSecret = (
  params: Params<
    t_DependabotCreateOrUpdateOrgSecretParamSchema,
    void,
    t_DependabotCreateOrUpdateOrgSecretBodySchema,
    void
  >,
  respond: DependabotCreateOrUpdateOrgSecretResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<204, void>
>

const dependabotDeleteOrgSecretResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type DependabotDeleteOrgSecretResponder =
  typeof dependabotDeleteOrgSecretResponder & KoaRuntimeResponder

const dependabotDeleteOrgSecretResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type DependabotDeleteOrgSecret = (
  params: Params<t_DependabotDeleteOrgSecretParamSchema, void, void, void>,
  respond: DependabotDeleteOrgSecretResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const dependabotListSelectedReposForOrgSecretResponder = {
  with200: r.with200<{
    repositories: t_minimal_repository[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type DependabotListSelectedReposForOrgSecretResponder =
  typeof dependabotListSelectedReposForOrgSecretResponder & KoaRuntimeResponder

const dependabotListSelectedReposForOrgSecretResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          repositories: z.array(s_minimal_repository),
        }),
      ],
    ],
    undefined,
  )

export type DependabotListSelectedReposForOrgSecret = (
  params: Params<
    t_DependabotListSelectedReposForOrgSecretParamSchema,
    t_DependabotListSelectedReposForOrgSecretQuerySchema,
    void,
    void
  >,
  respond: DependabotListSelectedReposForOrgSecretResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        repositories: t_minimal_repository[]
        total_count: number
      }
    >
>

const dependabotSetSelectedReposForOrgSecretResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type DependabotSetSelectedReposForOrgSecretResponder =
  typeof dependabotSetSelectedReposForOrgSecretResponder & KoaRuntimeResponder

const dependabotSetSelectedReposForOrgSecretResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type DependabotSetSelectedReposForOrgSecret = (
  params: Params<
    t_DependabotSetSelectedReposForOrgSecretParamSchema,
    void,
    t_DependabotSetSelectedReposForOrgSecretBodySchema,
    void
  >,
  respond: DependabotSetSelectedReposForOrgSecretResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const dependabotAddSelectedRepoToOrgSecretResponder = {
  with204: r.with204<void>,
  with409: r.with409<void>,
  withStatus: r.withStatus,
}

type DependabotAddSelectedRepoToOrgSecretResponder =
  typeof dependabotAddSelectedRepoToOrgSecretResponder & KoaRuntimeResponder

const dependabotAddSelectedRepoToOrgSecretResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["409", z.undefined()],
    ],
    undefined,
  )

export type DependabotAddSelectedRepoToOrgSecret = (
  params: Params<
    t_DependabotAddSelectedRepoToOrgSecretParamSchema,
    void,
    void,
    void
  >,
  respond: DependabotAddSelectedRepoToOrgSecretResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<409, void>
>

const dependabotRemoveSelectedRepoFromOrgSecretResponder = {
  with204: r.with204<void>,
  with409: r.with409<void>,
  withStatus: r.withStatus,
}

type DependabotRemoveSelectedRepoFromOrgSecretResponder =
  typeof dependabotRemoveSelectedRepoFromOrgSecretResponder &
    KoaRuntimeResponder

const dependabotRemoveSelectedRepoFromOrgSecretResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["409", z.undefined()],
    ],
    undefined,
  )

export type DependabotRemoveSelectedRepoFromOrgSecret = (
  params: Params<
    t_DependabotRemoveSelectedRepoFromOrgSecretParamSchema,
    void,
    void,
    void
  >,
  respond: DependabotRemoveSelectedRepoFromOrgSecretResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<409, void>
>

const packagesListDockerMigrationConflictingPackagesForOrganizationResponder = {
  with200: r.with200<t_package[]>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type PackagesListDockerMigrationConflictingPackagesForOrganizationResponder =
  typeof packagesListDockerMigrationConflictingPackagesForOrganizationResponder &
    KoaRuntimeResponder

const packagesListDockerMigrationConflictingPackagesForOrganizationResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_package)],
      ["401", s_basic_error],
      ["403", s_basic_error],
    ],
    undefined,
  )

export type PackagesListDockerMigrationConflictingPackagesForOrganization = (
  params: Params<
    t_PackagesListDockerMigrationConflictingPackagesForOrganizationParamSchema,
    void,
    void,
    void
  >,
  respond: PackagesListDockerMigrationConflictingPackagesForOrganizationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_package[]>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const activityListPublicOrgEventsResponder = {
  with200: r.with200<t_event[]>,
  withStatus: r.withStatus,
}

type ActivityListPublicOrgEventsResponder =
  typeof activityListPublicOrgEventsResponder & KoaRuntimeResponder

const activityListPublicOrgEventsResponseValidator = responseValidationFactory(
  [["200", z.array(s_event)]],
  undefined,
)

export type ActivityListPublicOrgEvents = (
  params: Params<
    t_ActivityListPublicOrgEventsParamSchema,
    t_ActivityListPublicOrgEventsQuerySchema,
    void,
    void
  >,
  respond: ActivityListPublicOrgEventsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_event[]>>

const orgsListFailedInvitationsResponder = {
  with200: r.with200<t_organization_invitation[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsListFailedInvitationsResponder =
  typeof orgsListFailedInvitationsResponder & KoaRuntimeResponder

const orgsListFailedInvitationsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_organization_invitation)],
    ["404", s_basic_error],
  ],
  undefined,
)

export type OrgsListFailedInvitations = (
  params: Params<
    t_OrgsListFailedInvitationsParamSchema,
    t_OrgsListFailedInvitationsQuerySchema,
    void,
    void
  >,
  respond: OrgsListFailedInvitationsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_organization_invitation[]>
  | Response<404, t_basic_error>
>

const orgsListWebhooksResponder = {
  with200: r.with200<t_org_hook[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsListWebhooksResponder = typeof orgsListWebhooksResponder &
  KoaRuntimeResponder

const orgsListWebhooksResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_org_hook)],
    ["404", s_basic_error],
  ],
  undefined,
)

export type OrgsListWebhooks = (
  params: Params<
    t_OrgsListWebhooksParamSchema,
    t_OrgsListWebhooksQuerySchema,
    void,
    void
  >,
  respond: OrgsListWebhooksResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_org_hook[]>
  | Response<404, t_basic_error>
>

const orgsCreateWebhookResponder = {
  with201: r.with201<t_org_hook>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type OrgsCreateWebhookResponder = typeof orgsCreateWebhookResponder &
  KoaRuntimeResponder

const orgsCreateWebhookResponseValidator = responseValidationFactory(
  [
    ["201", s_org_hook],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type OrgsCreateWebhook = (
  params: Params<
    t_OrgsCreateWebhookParamSchema,
    void,
    t_OrgsCreateWebhookBodySchema,
    void
  >,
  respond: OrgsCreateWebhookResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_org_hook>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const orgsGetWebhookResponder = {
  with200: r.with200<t_org_hook>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsGetWebhookResponder = typeof orgsGetWebhookResponder &
  KoaRuntimeResponder

const orgsGetWebhookResponseValidator = responseValidationFactory(
  [
    ["200", s_org_hook],
    ["404", s_basic_error],
  ],
  undefined,
)

export type OrgsGetWebhook = (
  params: Params<t_OrgsGetWebhookParamSchema, void, void, void>,
  respond: OrgsGetWebhookResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_org_hook>
  | Response<404, t_basic_error>
>

const orgsUpdateWebhookResponder = {
  with200: r.with200<t_org_hook>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type OrgsUpdateWebhookResponder = typeof orgsUpdateWebhookResponder &
  KoaRuntimeResponder

const orgsUpdateWebhookResponseValidator = responseValidationFactory(
  [
    ["200", s_org_hook],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type OrgsUpdateWebhook = (
  params: Params<
    t_OrgsUpdateWebhookParamSchema,
    void,
    t_OrgsUpdateWebhookBodySchema | undefined,
    void
  >,
  respond: OrgsUpdateWebhookResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_org_hook>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const orgsDeleteWebhookResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsDeleteWebhookResponder = typeof orgsDeleteWebhookResponder &
  KoaRuntimeResponder

const orgsDeleteWebhookResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
  ],
  undefined,
)

export type OrgsDeleteWebhook = (
  params: Params<t_OrgsDeleteWebhookParamSchema, void, void, void>,
  respond: OrgsDeleteWebhookResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

const orgsGetWebhookConfigForOrgResponder = {
  with200: r.with200<t_webhook_config>,
  withStatus: r.withStatus,
}

type OrgsGetWebhookConfigForOrgResponder =
  typeof orgsGetWebhookConfigForOrgResponder & KoaRuntimeResponder

const orgsGetWebhookConfigForOrgResponseValidator = responseValidationFactory(
  [["200", s_webhook_config]],
  undefined,
)

export type OrgsGetWebhookConfigForOrg = (
  params: Params<t_OrgsGetWebhookConfigForOrgParamSchema, void, void, void>,
  respond: OrgsGetWebhookConfigForOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_webhook_config>>

const orgsUpdateWebhookConfigForOrgResponder = {
  with200: r.with200<t_webhook_config>,
  withStatus: r.withStatus,
}

type OrgsUpdateWebhookConfigForOrgResponder =
  typeof orgsUpdateWebhookConfigForOrgResponder & KoaRuntimeResponder

const orgsUpdateWebhookConfigForOrgResponseValidator =
  responseValidationFactory([["200", s_webhook_config]], undefined)

export type OrgsUpdateWebhookConfigForOrg = (
  params: Params<
    t_OrgsUpdateWebhookConfigForOrgParamSchema,
    void,
    t_OrgsUpdateWebhookConfigForOrgBodySchema | undefined,
    void
  >,
  respond: OrgsUpdateWebhookConfigForOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_webhook_config>>

const orgsListWebhookDeliveriesResponder = {
  with200: r.with200<t_hook_delivery_item[]>,
  with400: r.with400<t_scim_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type OrgsListWebhookDeliveriesResponder =
  typeof orgsListWebhookDeliveriesResponder & KoaRuntimeResponder

const orgsListWebhookDeliveriesResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_hook_delivery_item)],
    ["400", s_scim_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type OrgsListWebhookDeliveries = (
  params: Params<
    t_OrgsListWebhookDeliveriesParamSchema,
    t_OrgsListWebhookDeliveriesQuerySchema,
    void,
    void
  >,
  respond: OrgsListWebhookDeliveriesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_hook_delivery_item[]>
  | Response<400, t_scim_error>
  | Response<422, t_validation_error>
>

const orgsGetWebhookDeliveryResponder = {
  with200: r.with200<t_hook_delivery>,
  with400: r.with400<t_scim_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type OrgsGetWebhookDeliveryResponder = typeof orgsGetWebhookDeliveryResponder &
  KoaRuntimeResponder

const orgsGetWebhookDeliveryResponseValidator = responseValidationFactory(
  [
    ["200", s_hook_delivery],
    ["400", s_scim_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type OrgsGetWebhookDelivery = (
  params: Params<t_OrgsGetWebhookDeliveryParamSchema, void, void, void>,
  respond: OrgsGetWebhookDeliveryResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_hook_delivery>
  | Response<400, t_scim_error>
  | Response<422, t_validation_error>
>

const orgsRedeliverWebhookDeliveryResponder = {
  with202: r.with202<{
    [key: string]: unknown | undefined
  }>,
  with400: r.with400<t_scim_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type OrgsRedeliverWebhookDeliveryResponder =
  typeof orgsRedeliverWebhookDeliveryResponder & KoaRuntimeResponder

const orgsRedeliverWebhookDeliveryResponseValidator = responseValidationFactory(
  [
    ["202", z.record(z.unknown())],
    ["400", s_scim_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type OrgsRedeliverWebhookDelivery = (
  params: Params<t_OrgsRedeliverWebhookDeliveryParamSchema, void, void, void>,
  respond: OrgsRedeliverWebhookDeliveryResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      202,
      {
        [key: string]: unknown | undefined
      }
    >
  | Response<400, t_scim_error>
  | Response<422, t_validation_error>
>

const orgsPingWebhookResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsPingWebhookResponder = typeof orgsPingWebhookResponder &
  KoaRuntimeResponder

const orgsPingWebhookResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
  ],
  undefined,
)

export type OrgsPingWebhook = (
  params: Params<t_OrgsPingWebhookParamSchema, void, void, void>,
  respond: OrgsPingWebhookResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

const apiInsightsGetRouteStatsByActorResponder = {
  with200: r.with200<t_api_insights_route_stats>,
  withStatus: r.withStatus,
}

type ApiInsightsGetRouteStatsByActorResponder =
  typeof apiInsightsGetRouteStatsByActorResponder & KoaRuntimeResponder

const apiInsightsGetRouteStatsByActorResponseValidator =
  responseValidationFactory([["200", s_api_insights_route_stats]], undefined)

export type ApiInsightsGetRouteStatsByActor = (
  params: Params<
    t_ApiInsightsGetRouteStatsByActorParamSchema,
    t_ApiInsightsGetRouteStatsByActorQuerySchema,
    void,
    void
  >,
  respond: ApiInsightsGetRouteStatsByActorResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_api_insights_route_stats>
>

const apiInsightsGetSubjectStatsResponder = {
  with200: r.with200<t_api_insights_subject_stats>,
  withStatus: r.withStatus,
}

type ApiInsightsGetSubjectStatsResponder =
  typeof apiInsightsGetSubjectStatsResponder & KoaRuntimeResponder

const apiInsightsGetSubjectStatsResponseValidator = responseValidationFactory(
  [["200", s_api_insights_subject_stats]],
  undefined,
)

export type ApiInsightsGetSubjectStats = (
  params: Params<
    t_ApiInsightsGetSubjectStatsParamSchema,
    t_ApiInsightsGetSubjectStatsQuerySchema,
    void,
    void
  >,
  respond: ApiInsightsGetSubjectStatsResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_api_insights_subject_stats>
>

const apiInsightsGetSummaryStatsResponder = {
  with200: r.with200<t_api_insights_summary_stats>,
  withStatus: r.withStatus,
}

type ApiInsightsGetSummaryStatsResponder =
  typeof apiInsightsGetSummaryStatsResponder & KoaRuntimeResponder

const apiInsightsGetSummaryStatsResponseValidator = responseValidationFactory(
  [["200", s_api_insights_summary_stats]],
  undefined,
)

export type ApiInsightsGetSummaryStats = (
  params: Params<
    t_ApiInsightsGetSummaryStatsParamSchema,
    t_ApiInsightsGetSummaryStatsQuerySchema,
    void,
    void
  >,
  respond: ApiInsightsGetSummaryStatsResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_api_insights_summary_stats>
>

const apiInsightsGetSummaryStatsByUserResponder = {
  with200: r.with200<t_api_insights_summary_stats>,
  withStatus: r.withStatus,
}

type ApiInsightsGetSummaryStatsByUserResponder =
  typeof apiInsightsGetSummaryStatsByUserResponder & KoaRuntimeResponder

const apiInsightsGetSummaryStatsByUserResponseValidator =
  responseValidationFactory([["200", s_api_insights_summary_stats]], undefined)

export type ApiInsightsGetSummaryStatsByUser = (
  params: Params<
    t_ApiInsightsGetSummaryStatsByUserParamSchema,
    t_ApiInsightsGetSummaryStatsByUserQuerySchema,
    void,
    void
  >,
  respond: ApiInsightsGetSummaryStatsByUserResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_api_insights_summary_stats>
>

const apiInsightsGetSummaryStatsByActorResponder = {
  with200: r.with200<t_api_insights_summary_stats>,
  withStatus: r.withStatus,
}

type ApiInsightsGetSummaryStatsByActorResponder =
  typeof apiInsightsGetSummaryStatsByActorResponder & KoaRuntimeResponder

const apiInsightsGetSummaryStatsByActorResponseValidator =
  responseValidationFactory([["200", s_api_insights_summary_stats]], undefined)

export type ApiInsightsGetSummaryStatsByActor = (
  params: Params<
    t_ApiInsightsGetSummaryStatsByActorParamSchema,
    t_ApiInsightsGetSummaryStatsByActorQuerySchema,
    void,
    void
  >,
  respond: ApiInsightsGetSummaryStatsByActorResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_api_insights_summary_stats>
>

const apiInsightsGetTimeStatsResponder = {
  with200: r.with200<t_api_insights_time_stats>,
  withStatus: r.withStatus,
}

type ApiInsightsGetTimeStatsResponder =
  typeof apiInsightsGetTimeStatsResponder & KoaRuntimeResponder

const apiInsightsGetTimeStatsResponseValidator = responseValidationFactory(
  [["200", s_api_insights_time_stats]],
  undefined,
)

export type ApiInsightsGetTimeStats = (
  params: Params<
    t_ApiInsightsGetTimeStatsParamSchema,
    t_ApiInsightsGetTimeStatsQuerySchema,
    void,
    void
  >,
  respond: ApiInsightsGetTimeStatsResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_api_insights_time_stats>
>

const apiInsightsGetTimeStatsByUserResponder = {
  with200: r.with200<t_api_insights_time_stats>,
  withStatus: r.withStatus,
}

type ApiInsightsGetTimeStatsByUserResponder =
  typeof apiInsightsGetTimeStatsByUserResponder & KoaRuntimeResponder

const apiInsightsGetTimeStatsByUserResponseValidator =
  responseValidationFactory([["200", s_api_insights_time_stats]], undefined)

export type ApiInsightsGetTimeStatsByUser = (
  params: Params<
    t_ApiInsightsGetTimeStatsByUserParamSchema,
    t_ApiInsightsGetTimeStatsByUserQuerySchema,
    void,
    void
  >,
  respond: ApiInsightsGetTimeStatsByUserResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_api_insights_time_stats>
>

const apiInsightsGetTimeStatsByActorResponder = {
  with200: r.with200<t_api_insights_time_stats>,
  withStatus: r.withStatus,
}

type ApiInsightsGetTimeStatsByActorResponder =
  typeof apiInsightsGetTimeStatsByActorResponder & KoaRuntimeResponder

const apiInsightsGetTimeStatsByActorResponseValidator =
  responseValidationFactory([["200", s_api_insights_time_stats]], undefined)

export type ApiInsightsGetTimeStatsByActor = (
  params: Params<
    t_ApiInsightsGetTimeStatsByActorParamSchema,
    t_ApiInsightsGetTimeStatsByActorQuerySchema,
    void,
    void
  >,
  respond: ApiInsightsGetTimeStatsByActorResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_api_insights_time_stats>
>

const apiInsightsGetUserStatsResponder = {
  with200: r.with200<t_api_insights_user_stats>,
  withStatus: r.withStatus,
}

type ApiInsightsGetUserStatsResponder =
  typeof apiInsightsGetUserStatsResponder & KoaRuntimeResponder

const apiInsightsGetUserStatsResponseValidator = responseValidationFactory(
  [["200", s_api_insights_user_stats]],
  undefined,
)

export type ApiInsightsGetUserStats = (
  params: Params<
    t_ApiInsightsGetUserStatsParamSchema,
    t_ApiInsightsGetUserStatsQuerySchema,
    void,
    void
  >,
  respond: ApiInsightsGetUserStatsResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_api_insights_user_stats>
>

const appsGetOrgInstallationResponder = {
  with200: r.with200<t_installation>,
  withStatus: r.withStatus,
}

type AppsGetOrgInstallationResponder = typeof appsGetOrgInstallationResponder &
  KoaRuntimeResponder

const appsGetOrgInstallationResponseValidator = responseValidationFactory(
  [["200", s_installation]],
  undefined,
)

export type AppsGetOrgInstallation = (
  params: Params<t_AppsGetOrgInstallationParamSchema, void, void, void>,
  respond: AppsGetOrgInstallationResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_installation>>

const orgsListAppInstallationsResponder = {
  with200: r.with200<{
    installations: t_installation[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type OrgsListAppInstallationsResponder =
  typeof orgsListAppInstallationsResponder & KoaRuntimeResponder

const orgsListAppInstallationsResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number(),
        installations: z.array(s_installation),
      }),
    ],
  ],
  undefined,
)

export type OrgsListAppInstallations = (
  params: Params<
    t_OrgsListAppInstallationsParamSchema,
    t_OrgsListAppInstallationsQuerySchema,
    void,
    void
  >,
  respond: OrgsListAppInstallationsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        installations: t_installation[]
        total_count: number
      }
    >
>

const interactionsGetRestrictionsForOrgResponder = {
  with200: r.with200<t_interaction_limit_response | EmptyObject>,
  withStatus: r.withStatus,
}

type InteractionsGetRestrictionsForOrgResponder =
  typeof interactionsGetRestrictionsForOrgResponder & KoaRuntimeResponder

const interactionsGetRestrictionsForOrgResponseValidator =
  responseValidationFactory(
    [["200", z.union([s_interaction_limit_response, z.object({})])]],
    undefined,
  )

export type InteractionsGetRestrictionsForOrg = (
  params: Params<
    t_InteractionsGetRestrictionsForOrgParamSchema,
    void,
    void,
    void
  >,
  respond: InteractionsGetRestrictionsForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_interaction_limit_response | EmptyObject>
>

const interactionsSetRestrictionsForOrgResponder = {
  with200: r.with200<t_interaction_limit_response>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type InteractionsSetRestrictionsForOrgResponder =
  typeof interactionsSetRestrictionsForOrgResponder & KoaRuntimeResponder

const interactionsSetRestrictionsForOrgResponseValidator =
  responseValidationFactory(
    [
      ["200", s_interaction_limit_response],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type InteractionsSetRestrictionsForOrg = (
  params: Params<
    t_InteractionsSetRestrictionsForOrgParamSchema,
    void,
    t_InteractionsSetRestrictionsForOrgBodySchema,
    void
  >,
  respond: InteractionsSetRestrictionsForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_interaction_limit_response>
  | Response<422, t_validation_error>
>

const interactionsRemoveRestrictionsForOrgResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type InteractionsRemoveRestrictionsForOrgResponder =
  typeof interactionsRemoveRestrictionsForOrgResponder & KoaRuntimeResponder

const interactionsRemoveRestrictionsForOrgResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type InteractionsRemoveRestrictionsForOrg = (
  params: Params<
    t_InteractionsRemoveRestrictionsForOrgParamSchema,
    void,
    void,
    void
  >,
  respond: InteractionsRemoveRestrictionsForOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const orgsListPendingInvitationsResponder = {
  with200: r.with200<t_organization_invitation[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsListPendingInvitationsResponder =
  typeof orgsListPendingInvitationsResponder & KoaRuntimeResponder

const orgsListPendingInvitationsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_organization_invitation)],
    ["404", s_basic_error],
  ],
  undefined,
)

export type OrgsListPendingInvitations = (
  params: Params<
    t_OrgsListPendingInvitationsParamSchema,
    t_OrgsListPendingInvitationsQuerySchema,
    void,
    void
  >,
  respond: OrgsListPendingInvitationsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_organization_invitation[]>
  | Response<404, t_basic_error>
>

const orgsCreateInvitationResponder = {
  with201: r.with201<t_organization_invitation>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type OrgsCreateInvitationResponder = typeof orgsCreateInvitationResponder &
  KoaRuntimeResponder

const orgsCreateInvitationResponseValidator = responseValidationFactory(
  [
    ["201", s_organization_invitation],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type OrgsCreateInvitation = (
  params: Params<
    t_OrgsCreateInvitationParamSchema,
    void,
    t_OrgsCreateInvitationBodySchema | undefined,
    void
  >,
  respond: OrgsCreateInvitationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_organization_invitation>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const orgsCancelInvitationResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type OrgsCancelInvitationResponder = typeof orgsCancelInvitationResponder &
  KoaRuntimeResponder

const orgsCancelInvitationResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type OrgsCancelInvitation = (
  params: Params<t_OrgsCancelInvitationParamSchema, void, void, void>,
  respond: OrgsCancelInvitationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const orgsListInvitationTeamsResponder = {
  with200: r.with200<t_team[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsListInvitationTeamsResponder =
  typeof orgsListInvitationTeamsResponder & KoaRuntimeResponder

const orgsListInvitationTeamsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_team)],
    ["404", s_basic_error],
  ],
  undefined,
)

export type OrgsListInvitationTeams = (
  params: Params<
    t_OrgsListInvitationTeamsParamSchema,
    t_OrgsListInvitationTeamsQuerySchema,
    void,
    void
  >,
  respond: OrgsListInvitationTeamsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team[]>
  | Response<404, t_basic_error>
>

const orgsListIssueTypesResponder = {
  with200: r.with200<t_issue_type[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsListIssueTypesResponder = typeof orgsListIssueTypesResponder &
  KoaRuntimeResponder

const orgsListIssueTypesResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_issue_type)],
    ["404", s_basic_error],
  ],
  undefined,
)

export type OrgsListIssueTypes = (
  params: Params<t_OrgsListIssueTypesParamSchema, void, void, void>,
  respond: OrgsListIssueTypesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue_type[]>
  | Response<404, t_basic_error>
>

const orgsCreateIssueTypeResponder = {
  with200: r.with200<t_issue_type>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type OrgsCreateIssueTypeResponder = typeof orgsCreateIssueTypeResponder &
  KoaRuntimeResponder

const orgsCreateIssueTypeResponseValidator = responseValidationFactory(
  [
    ["200", s_issue_type],
    ["404", s_basic_error],
    ["422", s_validation_error_simple],
  ],
  undefined,
)

export type OrgsCreateIssueType = (
  params: Params<
    t_OrgsCreateIssueTypeParamSchema,
    void,
    t_OrgsCreateIssueTypeBodySchema,
    void
  >,
  respond: OrgsCreateIssueTypeResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue_type>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const orgsUpdateIssueTypeResponder = {
  with200: r.with200<t_issue_type>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type OrgsUpdateIssueTypeResponder = typeof orgsUpdateIssueTypeResponder &
  KoaRuntimeResponder

const orgsUpdateIssueTypeResponseValidator = responseValidationFactory(
  [
    ["200", s_issue_type],
    ["404", s_basic_error],
    ["422", s_validation_error_simple],
  ],
  undefined,
)

export type OrgsUpdateIssueType = (
  params: Params<
    t_OrgsUpdateIssueTypeParamSchema,
    void,
    t_OrgsUpdateIssueTypeBodySchema,
    void
  >,
  respond: OrgsUpdateIssueTypeResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue_type>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const orgsDeleteIssueTypeResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type OrgsDeleteIssueTypeResponder = typeof orgsDeleteIssueTypeResponder &
  KoaRuntimeResponder

const orgsDeleteIssueTypeResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
    ["422", s_validation_error_simple],
  ],
  undefined,
)

export type OrgsDeleteIssueType = (
  params: Params<t_OrgsDeleteIssueTypeParamSchema, void, void, void>,
  respond: OrgsDeleteIssueTypeResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const issuesListForOrgResponder = {
  with200: r.with200<t_issue[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type IssuesListForOrgResponder = typeof issuesListForOrgResponder &
  KoaRuntimeResponder

const issuesListForOrgResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_issue)],
    ["404", s_basic_error],
  ],
  undefined,
)

export type IssuesListForOrg = (
  params: Params<
    t_IssuesListForOrgParamSchema,
    t_IssuesListForOrgQuerySchema,
    void,
    void
  >,
  respond: IssuesListForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue[]>
  | Response<404, t_basic_error>
>

const orgsListMembersResponder = {
  with200: r.with200<t_simple_user[]>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type OrgsListMembersResponder = typeof orgsListMembersResponder &
  KoaRuntimeResponder

const orgsListMembersResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_simple_user)],
    ["422", s_validation_error],
  ],
  undefined,
)

export type OrgsListMembers = (
  params: Params<
    t_OrgsListMembersParamSchema,
    t_OrgsListMembersQuerySchema,
    void,
    void
  >,
  respond: OrgsListMembersResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[]>
  | Response<422, t_validation_error>
>

const orgsCheckMembershipForUserResponder = {
  with204: r.with204<void>,
  with302: r.with302<void>,
  with404: r.with404<void>,
  withStatus: r.withStatus,
}

type OrgsCheckMembershipForUserResponder =
  typeof orgsCheckMembershipForUserResponder & KoaRuntimeResponder

const orgsCheckMembershipForUserResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["302", z.undefined()],
    ["404", z.undefined()],
  ],
  undefined,
)

export type OrgsCheckMembershipForUser = (
  params: Params<t_OrgsCheckMembershipForUserParamSchema, void, void, void>,
  respond: OrgsCheckMembershipForUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<302, void>
  | Response<404, void>
>

const orgsRemoveMemberResponder = {
  with204: r.with204<void>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsRemoveMemberResponder = typeof orgsRemoveMemberResponder &
  KoaRuntimeResponder

const orgsRemoveMemberResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["403", s_basic_error],
  ],
  undefined,
)

export type OrgsRemoveMember = (
  params: Params<t_OrgsRemoveMemberParamSchema, void, void, void>,
  respond: OrgsRemoveMemberResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
>

const codespacesGetCodespacesForUserInOrgResponder = {
  with200: r.with200<{
    codespaces: t_codespace[]
    total_count: number
  }>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesGetCodespacesForUserInOrgResponder =
  typeof codespacesGetCodespacesForUserInOrgResponder & KoaRuntimeResponder

const codespacesGetCodespacesForUserInOrgResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          codespaces: z.array(s_codespace),
        }),
      ],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CodespacesGetCodespacesForUserInOrg = (
  params: Params<
    t_CodespacesGetCodespacesForUserInOrgParamSchema,
    t_CodespacesGetCodespacesForUserInOrgQuerySchema,
    void,
    void
  >,
  respond: CodespacesGetCodespacesForUserInOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        codespaces: t_codespace[]
        total_count: number
      }
    >
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const codespacesDeleteFromOrganizationResponder = {
  with202: r.with202<{
    [key: string]: unknown | undefined
  }>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesDeleteFromOrganizationResponder =
  typeof codespacesDeleteFromOrganizationResponder & KoaRuntimeResponder

const codespacesDeleteFromOrganizationResponseValidator =
  responseValidationFactory(
    [
      ["202", z.record(z.unknown())],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CodespacesDeleteFromOrganization = (
  params: Params<
    t_CodespacesDeleteFromOrganizationParamSchema,
    void,
    void,
    void
  >,
  respond: CodespacesDeleteFromOrganizationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      202,
      {
        [key: string]: unknown | undefined
      }
    >
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const codespacesStopInOrganizationResponder = {
  with200: r.with200<t_codespace>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesStopInOrganizationResponder =
  typeof codespacesStopInOrganizationResponder & KoaRuntimeResponder

const codespacesStopInOrganizationResponseValidator = responseValidationFactory(
  [
    ["200", s_codespace],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type CodespacesStopInOrganization = (
  params: Params<t_CodespacesStopInOrganizationParamSchema, void, void, void>,
  respond: CodespacesStopInOrganizationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_codespace>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const copilotGetCopilotSeatDetailsForUserResponder = {
  with200: r.with200<t_copilot_seat_details>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<void>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CopilotGetCopilotSeatDetailsForUserResponder =
  typeof copilotGetCopilotSeatDetailsForUserResponder & KoaRuntimeResponder

const copilotGetCopilotSeatDetailsForUserResponseValidator =
  responseValidationFactory(
    [
      ["200", s_copilot_seat_details],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", z.undefined()],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CopilotGetCopilotSeatDetailsForUser = (
  params: Params<
    t_CopilotGetCopilotSeatDetailsForUserParamSchema,
    void,
    void,
    void
  >,
  respond: CopilotGetCopilotSeatDetailsForUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_copilot_seat_details>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, void>
  | Response<500, t_basic_error>
>

const orgsGetMembershipForUserResponder = {
  with200: r.with200<t_org_membership>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsGetMembershipForUserResponder =
  typeof orgsGetMembershipForUserResponder & KoaRuntimeResponder

const orgsGetMembershipForUserResponseValidator = responseValidationFactory(
  [
    ["200", s_org_membership],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type OrgsGetMembershipForUser = (
  params: Params<t_OrgsGetMembershipForUserParamSchema, void, void, void>,
  respond: OrgsGetMembershipForUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_org_membership>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const orgsSetMembershipForUserResponder = {
  with200: r.with200<t_org_membership>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type OrgsSetMembershipForUserResponder =
  typeof orgsSetMembershipForUserResponder & KoaRuntimeResponder

const orgsSetMembershipForUserResponseValidator = responseValidationFactory(
  [
    ["200", s_org_membership],
    ["403", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type OrgsSetMembershipForUser = (
  params: Params<
    t_OrgsSetMembershipForUserParamSchema,
    void,
    t_OrgsSetMembershipForUserBodySchema | undefined,
    void
  >,
  respond: OrgsSetMembershipForUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_org_membership>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

const orgsRemoveMembershipForUserResponder = {
  with204: r.with204<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsRemoveMembershipForUserResponder =
  typeof orgsRemoveMembershipForUserResponder & KoaRuntimeResponder

const orgsRemoveMembershipForUserResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type OrgsRemoveMembershipForUser = (
  params: Params<t_OrgsRemoveMembershipForUserParamSchema, void, void, void>,
  respond: OrgsRemoveMembershipForUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const migrationsListForOrgResponder = {
  with200: r.with200<t_migration[]>,
  withStatus: r.withStatus,
}

type MigrationsListForOrgResponder = typeof migrationsListForOrgResponder &
  KoaRuntimeResponder

const migrationsListForOrgResponseValidator = responseValidationFactory(
  [["200", z.array(s_migration)]],
  undefined,
)

export type MigrationsListForOrg = (
  params: Params<
    t_MigrationsListForOrgParamSchema,
    t_MigrationsListForOrgQuerySchema,
    void,
    void
  >,
  respond: MigrationsListForOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_migration[]>>

const migrationsStartForOrgResponder = {
  with201: r.with201<t_migration>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type MigrationsStartForOrgResponder = typeof migrationsStartForOrgResponder &
  KoaRuntimeResponder

const migrationsStartForOrgResponseValidator = responseValidationFactory(
  [
    ["201", s_migration],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type MigrationsStartForOrg = (
  params: Params<
    t_MigrationsStartForOrgParamSchema,
    void,
    t_MigrationsStartForOrgBodySchema,
    void
  >,
  respond: MigrationsStartForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_migration>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const migrationsGetStatusForOrgResponder = {
  with200: r.with200<t_migration>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type MigrationsGetStatusForOrgResponder =
  typeof migrationsGetStatusForOrgResponder & KoaRuntimeResponder

const migrationsGetStatusForOrgResponseValidator = responseValidationFactory(
  [
    ["200", s_migration],
    ["404", s_basic_error],
  ],
  undefined,
)

export type MigrationsGetStatusForOrg = (
  params: Params<
    t_MigrationsGetStatusForOrgParamSchema,
    t_MigrationsGetStatusForOrgQuerySchema,
    void,
    void
  >,
  respond: MigrationsGetStatusForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_migration>
  | Response<404, t_basic_error>
>

const migrationsDownloadArchiveForOrgResponder = {
  with302: r.with302<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type MigrationsDownloadArchiveForOrgResponder =
  typeof migrationsDownloadArchiveForOrgResponder & KoaRuntimeResponder

const migrationsDownloadArchiveForOrgResponseValidator =
  responseValidationFactory(
    [
      ["302", z.undefined()],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type MigrationsDownloadArchiveForOrg = (
  params: Params<
    t_MigrationsDownloadArchiveForOrgParamSchema,
    void,
    void,
    void
  >,
  respond: MigrationsDownloadArchiveForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<302, void>
  | Response<404, t_basic_error>
>

const migrationsDeleteArchiveForOrgResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type MigrationsDeleteArchiveForOrgResponder =
  typeof migrationsDeleteArchiveForOrgResponder & KoaRuntimeResponder

const migrationsDeleteArchiveForOrgResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type MigrationsDeleteArchiveForOrg = (
  params: Params<t_MigrationsDeleteArchiveForOrgParamSchema, void, void, void>,
  respond: MigrationsDeleteArchiveForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

const migrationsUnlockRepoForOrgResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type MigrationsUnlockRepoForOrgResponder =
  typeof migrationsUnlockRepoForOrgResponder & KoaRuntimeResponder

const migrationsUnlockRepoForOrgResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
  ],
  undefined,
)

export type MigrationsUnlockRepoForOrg = (
  params: Params<t_MigrationsUnlockRepoForOrgParamSchema, void, void, void>,
  respond: MigrationsUnlockRepoForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

const migrationsListReposForOrgResponder = {
  with200: r.with200<t_minimal_repository[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type MigrationsListReposForOrgResponder =
  typeof migrationsListReposForOrgResponder & KoaRuntimeResponder

const migrationsListReposForOrgResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_minimal_repository)],
    ["404", s_basic_error],
  ],
  undefined,
)

export type MigrationsListReposForOrg = (
  params: Params<
    t_MigrationsListReposForOrgParamSchema,
    t_MigrationsListReposForOrgQuerySchema,
    void,
    void
  >,
  respond: MigrationsListReposForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_minimal_repository[]>
  | Response<404, t_basic_error>
>

const orgsListOrgRolesResponder = {
  with200: r.with200<{
    roles?: t_organization_role[]
    total_count?: number
  }>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type OrgsListOrgRolesResponder = typeof orgsListOrgRolesResponder &
  KoaRuntimeResponder

const orgsListOrgRolesResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number().optional(),
        roles: z.array(s_organization_role).optional(),
      }),
    ],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type OrgsListOrgRoles = (
  params: Params<t_OrgsListOrgRolesParamSchema, void, void, void>,
  respond: OrgsListOrgRolesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        roles?: t_organization_role[]
        total_count?: number
      }
    >
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const orgsRevokeAllOrgRolesTeamResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type OrgsRevokeAllOrgRolesTeamResponder =
  typeof orgsRevokeAllOrgRolesTeamResponder & KoaRuntimeResponder

const orgsRevokeAllOrgRolesTeamResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type OrgsRevokeAllOrgRolesTeam = (
  params: Params<t_OrgsRevokeAllOrgRolesTeamParamSchema, void, void, void>,
  respond: OrgsRevokeAllOrgRolesTeamResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const orgsAssignTeamToOrgRoleResponder = {
  with204: r.with204<void>,
  with404: r.with404<void>,
  with422: r.with422<void>,
  withStatus: r.withStatus,
}

type OrgsAssignTeamToOrgRoleResponder =
  typeof orgsAssignTeamToOrgRoleResponder & KoaRuntimeResponder

const orgsAssignTeamToOrgRoleResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", z.undefined()],
    ["422", z.undefined()],
  ],
  undefined,
)

export type OrgsAssignTeamToOrgRole = (
  params: Params<t_OrgsAssignTeamToOrgRoleParamSchema, void, void, void>,
  respond: OrgsAssignTeamToOrgRoleResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, void>
  | Response<422, void>
>

const orgsRevokeOrgRoleTeamResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type OrgsRevokeOrgRoleTeamResponder = typeof orgsRevokeOrgRoleTeamResponder &
  KoaRuntimeResponder

const orgsRevokeOrgRoleTeamResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type OrgsRevokeOrgRoleTeam = (
  params: Params<t_OrgsRevokeOrgRoleTeamParamSchema, void, void, void>,
  respond: OrgsRevokeOrgRoleTeamResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const orgsRevokeAllOrgRolesUserResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type OrgsRevokeAllOrgRolesUserResponder =
  typeof orgsRevokeAllOrgRolesUserResponder & KoaRuntimeResponder

const orgsRevokeAllOrgRolesUserResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type OrgsRevokeAllOrgRolesUser = (
  params: Params<t_OrgsRevokeAllOrgRolesUserParamSchema, void, void, void>,
  respond: OrgsRevokeAllOrgRolesUserResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const orgsAssignUserToOrgRoleResponder = {
  with204: r.with204<void>,
  with404: r.with404<void>,
  with422: r.with422<void>,
  withStatus: r.withStatus,
}

type OrgsAssignUserToOrgRoleResponder =
  typeof orgsAssignUserToOrgRoleResponder & KoaRuntimeResponder

const orgsAssignUserToOrgRoleResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", z.undefined()],
    ["422", z.undefined()],
  ],
  undefined,
)

export type OrgsAssignUserToOrgRole = (
  params: Params<t_OrgsAssignUserToOrgRoleParamSchema, void, void, void>,
  respond: OrgsAssignUserToOrgRoleResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, void>
  | Response<422, void>
>

const orgsRevokeOrgRoleUserResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type OrgsRevokeOrgRoleUserResponder = typeof orgsRevokeOrgRoleUserResponder &
  KoaRuntimeResponder

const orgsRevokeOrgRoleUserResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type OrgsRevokeOrgRoleUser = (
  params: Params<t_OrgsRevokeOrgRoleUserParamSchema, void, void, void>,
  respond: OrgsRevokeOrgRoleUserResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const orgsGetOrgRoleResponder = {
  with200: r.with200<t_organization_role>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type OrgsGetOrgRoleResponder = typeof orgsGetOrgRoleResponder &
  KoaRuntimeResponder

const orgsGetOrgRoleResponseValidator = responseValidationFactory(
  [
    ["200", s_organization_role],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type OrgsGetOrgRole = (
  params: Params<t_OrgsGetOrgRoleParamSchema, void, void, void>,
  respond: OrgsGetOrgRoleResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_organization_role>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const orgsListOrgRoleTeamsResponder = {
  with200: r.with200<t_team_role_assignment[]>,
  with404: r.with404<void>,
  with422: r.with422<void>,
  withStatus: r.withStatus,
}

type OrgsListOrgRoleTeamsResponder = typeof orgsListOrgRoleTeamsResponder &
  KoaRuntimeResponder

const orgsListOrgRoleTeamsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_team_role_assignment)],
    ["404", z.undefined()],
    ["422", z.undefined()],
  ],
  undefined,
)

export type OrgsListOrgRoleTeams = (
  params: Params<
    t_OrgsListOrgRoleTeamsParamSchema,
    t_OrgsListOrgRoleTeamsQuerySchema,
    void,
    void
  >,
  respond: OrgsListOrgRoleTeamsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_role_assignment[]>
  | Response<404, void>
  | Response<422, void>
>

const orgsListOrgRoleUsersResponder = {
  with200: r.with200<t_user_role_assignment[]>,
  with404: r.with404<void>,
  with422: r.with422<void>,
  withStatus: r.withStatus,
}

type OrgsListOrgRoleUsersResponder = typeof orgsListOrgRoleUsersResponder &
  KoaRuntimeResponder

const orgsListOrgRoleUsersResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_user_role_assignment)],
    ["404", z.undefined()],
    ["422", z.undefined()],
  ],
  undefined,
)

export type OrgsListOrgRoleUsers = (
  params: Params<
    t_OrgsListOrgRoleUsersParamSchema,
    t_OrgsListOrgRoleUsersQuerySchema,
    void,
    void
  >,
  respond: OrgsListOrgRoleUsersResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_user_role_assignment[]>
  | Response<404, void>
  | Response<422, void>
>

const orgsListOutsideCollaboratorsResponder = {
  with200: r.with200<t_simple_user[]>,
  withStatus: r.withStatus,
}

type OrgsListOutsideCollaboratorsResponder =
  typeof orgsListOutsideCollaboratorsResponder & KoaRuntimeResponder

const orgsListOutsideCollaboratorsResponseValidator = responseValidationFactory(
  [["200", z.array(s_simple_user)]],
  undefined,
)

export type OrgsListOutsideCollaborators = (
  params: Params<
    t_OrgsListOutsideCollaboratorsParamSchema,
    t_OrgsListOutsideCollaboratorsQuerySchema,
    void,
    void
  >,
  respond: OrgsListOutsideCollaboratorsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_simple_user[]>>

const orgsConvertMemberToOutsideCollaboratorResponder = {
  with202: r.with202<EmptyObject>,
  with204: r.with204<void>,
  with403: r.with403<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsConvertMemberToOutsideCollaboratorResponder =
  typeof orgsConvertMemberToOutsideCollaboratorResponder & KoaRuntimeResponder

const orgsConvertMemberToOutsideCollaboratorResponseValidator =
  responseValidationFactory(
    [
      ["202", z.object({})],
      ["204", z.undefined()],
      ["403", z.undefined()],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type OrgsConvertMemberToOutsideCollaborator = (
  params: Params<
    t_OrgsConvertMemberToOutsideCollaboratorParamSchema,
    void,
    t_OrgsConvertMemberToOutsideCollaboratorBodySchema | undefined,
    void
  >,
  respond: OrgsConvertMemberToOutsideCollaboratorResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<202, EmptyObject>
  | Response<204, void>
  | Response<403, void>
  | Response<404, t_basic_error>
>

const orgsRemoveOutsideCollaboratorResponder = {
  with204: r.with204<void>,
  with422: r.with422<{
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type OrgsRemoveOutsideCollaboratorResponder =
  typeof orgsRemoveOutsideCollaboratorResponder & KoaRuntimeResponder

const orgsRemoveOutsideCollaboratorResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      [
        "422",
        z.object({
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

export type OrgsRemoveOutsideCollaborator = (
  params: Params<t_OrgsRemoveOutsideCollaboratorParamSchema, void, void, void>,
  respond: OrgsRemoveOutsideCollaboratorResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<
      422,
      {
        documentation_url?: string
        message?: string
      }
    >
>

const packagesListPackagesForOrganizationResponder = {
  with200: r.with200<t_package[]>,
  with400: r.with400<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type PackagesListPackagesForOrganizationResponder =
  typeof packagesListPackagesForOrganizationResponder & KoaRuntimeResponder

const packagesListPackagesForOrganizationResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_package)],
      ["400", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
    ],
    undefined,
  )

export type PackagesListPackagesForOrganization = (
  params: Params<
    t_PackagesListPackagesForOrganizationParamSchema,
    t_PackagesListPackagesForOrganizationQuerySchema,
    void,
    void
  >,
  respond: PackagesListPackagesForOrganizationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_package[]>
  | Response<400, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const packagesGetPackageForOrganizationResponder = {
  with200: r.with200<t_package>,
  withStatus: r.withStatus,
}

type PackagesGetPackageForOrganizationResponder =
  typeof packagesGetPackageForOrganizationResponder & KoaRuntimeResponder

const packagesGetPackageForOrganizationResponseValidator =
  responseValidationFactory([["200", s_package]], undefined)

export type PackagesGetPackageForOrganization = (
  params: Params<
    t_PackagesGetPackageForOrganizationParamSchema,
    void,
    void,
    void
  >,
  respond: PackagesGetPackageForOrganizationResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_package>>

const packagesDeletePackageForOrgResponder = {
  with204: r.with204<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type PackagesDeletePackageForOrgResponder =
  typeof packagesDeletePackageForOrgResponder & KoaRuntimeResponder

const packagesDeletePackageForOrgResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type PackagesDeletePackageForOrg = (
  params: Params<t_PackagesDeletePackageForOrgParamSchema, void, void, void>,
  respond: PackagesDeletePackageForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const packagesRestorePackageForOrgResponder = {
  with204: r.with204<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type PackagesRestorePackageForOrgResponder =
  typeof packagesRestorePackageForOrgResponder & KoaRuntimeResponder

const packagesRestorePackageForOrgResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type PackagesRestorePackageForOrg = (
  params: Params<
    t_PackagesRestorePackageForOrgParamSchema,
    t_PackagesRestorePackageForOrgQuerySchema,
    void,
    void
  >,
  respond: PackagesRestorePackageForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const packagesGetAllPackageVersionsForPackageOwnedByOrgResponder = {
  with200: r.with200<t_package_version[]>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type PackagesGetAllPackageVersionsForPackageOwnedByOrgResponder =
  typeof packagesGetAllPackageVersionsForPackageOwnedByOrgResponder &
    KoaRuntimeResponder

const packagesGetAllPackageVersionsForPackageOwnedByOrgResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_package_version)],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type PackagesGetAllPackageVersionsForPackageOwnedByOrg = (
  params: Params<
    t_PackagesGetAllPackageVersionsForPackageOwnedByOrgParamSchema,
    t_PackagesGetAllPackageVersionsForPackageOwnedByOrgQuerySchema,
    void,
    void
  >,
  respond: PackagesGetAllPackageVersionsForPackageOwnedByOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_package_version[]>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const packagesGetPackageVersionForOrganizationResponder = {
  with200: r.with200<t_package_version>,
  withStatus: r.withStatus,
}

type PackagesGetPackageVersionForOrganizationResponder =
  typeof packagesGetPackageVersionForOrganizationResponder & KoaRuntimeResponder

const packagesGetPackageVersionForOrganizationResponseValidator =
  responseValidationFactory([["200", s_package_version]], undefined)

export type PackagesGetPackageVersionForOrganization = (
  params: Params<
    t_PackagesGetPackageVersionForOrganizationParamSchema,
    void,
    void,
    void
  >,
  respond: PackagesGetPackageVersionForOrganizationResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_package_version>>

const packagesDeletePackageVersionForOrgResponder = {
  with204: r.with204<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type PackagesDeletePackageVersionForOrgResponder =
  typeof packagesDeletePackageVersionForOrgResponder & KoaRuntimeResponder

const packagesDeletePackageVersionForOrgResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type PackagesDeletePackageVersionForOrg = (
  params: Params<
    t_PackagesDeletePackageVersionForOrgParamSchema,
    void,
    void,
    void
  >,
  respond: PackagesDeletePackageVersionForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const packagesRestorePackageVersionForOrgResponder = {
  with204: r.with204<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type PackagesRestorePackageVersionForOrgResponder =
  typeof packagesRestorePackageVersionForOrgResponder & KoaRuntimeResponder

const packagesRestorePackageVersionForOrgResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type PackagesRestorePackageVersionForOrg = (
  params: Params<
    t_PackagesRestorePackageVersionForOrgParamSchema,
    void,
    void,
    void
  >,
  respond: PackagesRestorePackageVersionForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const orgsListPatGrantRequestsResponder = {
  with200: r.with200<t_organization_programmatic_access_grant_request[]>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsListPatGrantRequestsResponder =
  typeof orgsListPatGrantRequestsResponder & KoaRuntimeResponder

const orgsListPatGrantRequestsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_organization_programmatic_access_grant_request)],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type OrgsListPatGrantRequests = (
  params: Params<
    t_OrgsListPatGrantRequestsParamSchema,
    t_OrgsListPatGrantRequestsQuerySchema,
    void,
    void
  >,
  respond: OrgsListPatGrantRequestsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_organization_programmatic_access_grant_request[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<500, t_basic_error>
>

const orgsReviewPatGrantRequestsInBulkResponder = {
  with202: r.with202<{
    [key: string]: unknown | undefined
  }>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsReviewPatGrantRequestsInBulkResponder =
  typeof orgsReviewPatGrantRequestsInBulkResponder & KoaRuntimeResponder

const orgsReviewPatGrantRequestsInBulkResponseValidator =
  responseValidationFactory(
    [
      ["202", z.record(z.unknown())],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type OrgsReviewPatGrantRequestsInBulk = (
  params: Params<
    t_OrgsReviewPatGrantRequestsInBulkParamSchema,
    void,
    t_OrgsReviewPatGrantRequestsInBulkBodySchema,
    void
  >,
  respond: OrgsReviewPatGrantRequestsInBulkResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      202,
      {
        [key: string]: unknown | undefined
      }
    >
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<500, t_basic_error>
>

const orgsReviewPatGrantRequestResponder = {
  with204: r.with204<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsReviewPatGrantRequestResponder =
  typeof orgsReviewPatGrantRequestResponder & KoaRuntimeResponder

const orgsReviewPatGrantRequestResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type OrgsReviewPatGrantRequest = (
  params: Params<
    t_OrgsReviewPatGrantRequestParamSchema,
    void,
    t_OrgsReviewPatGrantRequestBodySchema,
    void
  >,
  respond: OrgsReviewPatGrantRequestResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<500, t_basic_error>
>

const orgsListPatGrantRequestRepositoriesResponder = {
  with200: r.with200<t_minimal_repository[]>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsListPatGrantRequestRepositoriesResponder =
  typeof orgsListPatGrantRequestRepositoriesResponder & KoaRuntimeResponder

const orgsListPatGrantRequestRepositoriesResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_minimal_repository)],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type OrgsListPatGrantRequestRepositories = (
  params: Params<
    t_OrgsListPatGrantRequestRepositoriesParamSchema,
    t_OrgsListPatGrantRequestRepositoriesQuerySchema,
    void,
    void
  >,
  respond: OrgsListPatGrantRequestRepositoriesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_minimal_repository[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const orgsListPatGrantsResponder = {
  with200: r.with200<t_organization_programmatic_access_grant[]>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsListPatGrantsResponder = typeof orgsListPatGrantsResponder &
  KoaRuntimeResponder

const orgsListPatGrantsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_organization_programmatic_access_grant)],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type OrgsListPatGrants = (
  params: Params<
    t_OrgsListPatGrantsParamSchema,
    t_OrgsListPatGrantsQuerySchema,
    void,
    void
  >,
  respond: OrgsListPatGrantsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_organization_programmatic_access_grant[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<500, t_basic_error>
>

const orgsUpdatePatAccessesResponder = {
  with202: r.with202<{
    [key: string]: unknown | undefined
  }>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsUpdatePatAccessesResponder = typeof orgsUpdatePatAccessesResponder &
  KoaRuntimeResponder

const orgsUpdatePatAccessesResponseValidator = responseValidationFactory(
  [
    ["202", z.record(z.unknown())],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type OrgsUpdatePatAccesses = (
  params: Params<
    t_OrgsUpdatePatAccessesParamSchema,
    void,
    t_OrgsUpdatePatAccessesBodySchema,
    void
  >,
  respond: OrgsUpdatePatAccessesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      202,
      {
        [key: string]: unknown | undefined
      }
    >
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<500, t_basic_error>
>

const orgsUpdatePatAccessResponder = {
  with204: r.with204<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsUpdatePatAccessResponder = typeof orgsUpdatePatAccessResponder &
  KoaRuntimeResponder

const orgsUpdatePatAccessResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type OrgsUpdatePatAccess = (
  params: Params<
    t_OrgsUpdatePatAccessParamSchema,
    void,
    t_OrgsUpdatePatAccessBodySchema,
    void
  >,
  respond: OrgsUpdatePatAccessResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<500, t_basic_error>
>

const orgsListPatGrantRepositoriesResponder = {
  with200: r.with200<t_minimal_repository[]>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsListPatGrantRepositoriesResponder =
  typeof orgsListPatGrantRepositoriesResponder & KoaRuntimeResponder

const orgsListPatGrantRepositoriesResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_minimal_repository)],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type OrgsListPatGrantRepositories = (
  params: Params<
    t_OrgsListPatGrantRepositoriesParamSchema,
    t_OrgsListPatGrantRepositoriesQuerySchema,
    void,
    void
  >,
  respond: OrgsListPatGrantRepositoriesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_minimal_repository[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const privateRegistriesListOrgPrivateRegistriesResponder = {
  with200: r.with200<{
    configurations: t_org_private_registry_configuration[]
    total_count: number
  }>,
  with400: r.with400<t_scim_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type PrivateRegistriesListOrgPrivateRegistriesResponder =
  typeof privateRegistriesListOrgPrivateRegistriesResponder &
    KoaRuntimeResponder

const privateRegistriesListOrgPrivateRegistriesResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          configurations: z.array(s_org_private_registry_configuration),
        }),
      ],
      ["400", s_scim_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type PrivateRegistriesListOrgPrivateRegistries = (
  params: Params<
    t_PrivateRegistriesListOrgPrivateRegistriesParamSchema,
    t_PrivateRegistriesListOrgPrivateRegistriesQuerySchema,
    void,
    void
  >,
  respond: PrivateRegistriesListOrgPrivateRegistriesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        configurations: t_org_private_registry_configuration[]
        total_count: number
      }
    >
  | Response<400, t_scim_error>
  | Response<404, t_basic_error>
>

const privateRegistriesCreateOrgPrivateRegistryResponder = {
  with201:
    r.with201<t_org_private_registry_configuration_with_selected_repositories>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type PrivateRegistriesCreateOrgPrivateRegistryResponder =
  typeof privateRegistriesCreateOrgPrivateRegistryResponder &
    KoaRuntimeResponder

const privateRegistriesCreateOrgPrivateRegistryResponseValidator =
  responseValidationFactory(
    [
      ["201", s_org_private_registry_configuration_with_selected_repositories],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type PrivateRegistriesCreateOrgPrivateRegistry = (
  params: Params<
    t_PrivateRegistriesCreateOrgPrivateRegistryParamSchema,
    void,
    t_PrivateRegistriesCreateOrgPrivateRegistryBodySchema,
    void
  >,
  respond: PrivateRegistriesCreateOrgPrivateRegistryResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      201,
      t_org_private_registry_configuration_with_selected_repositories
    >
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const privateRegistriesGetOrgPublicKeyResponder = {
  with200: r.with200<{
    key: string
    key_id: string
  }>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type PrivateRegistriesGetOrgPublicKeyResponder =
  typeof privateRegistriesGetOrgPublicKeyResponder & KoaRuntimeResponder

const privateRegistriesGetOrgPublicKeyResponseValidator =
  responseValidationFactory(
    [
      ["200", z.object({ key_id: z.string(), key: z.string() })],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type PrivateRegistriesGetOrgPublicKey = (
  params: Params<
    t_PrivateRegistriesGetOrgPublicKeyParamSchema,
    void,
    void,
    void
  >,
  respond: PrivateRegistriesGetOrgPublicKeyResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        key: string
        key_id: string
      }
    >
  | Response<404, t_basic_error>
>

const privateRegistriesGetOrgPrivateRegistryResponder = {
  with200: r.with200<t_org_private_registry_configuration>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type PrivateRegistriesGetOrgPrivateRegistryResponder =
  typeof privateRegistriesGetOrgPrivateRegistryResponder & KoaRuntimeResponder

const privateRegistriesGetOrgPrivateRegistryResponseValidator =
  responseValidationFactory(
    [
      ["200", s_org_private_registry_configuration],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type PrivateRegistriesGetOrgPrivateRegistry = (
  params: Params<
    t_PrivateRegistriesGetOrgPrivateRegistryParamSchema,
    void,
    void,
    void
  >,
  respond: PrivateRegistriesGetOrgPrivateRegistryResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_org_private_registry_configuration>
  | Response<404, t_basic_error>
>

const privateRegistriesUpdateOrgPrivateRegistryResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type PrivateRegistriesUpdateOrgPrivateRegistryResponder =
  typeof privateRegistriesUpdateOrgPrivateRegistryResponder &
    KoaRuntimeResponder

const privateRegistriesUpdateOrgPrivateRegistryResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type PrivateRegistriesUpdateOrgPrivateRegistry = (
  params: Params<
    t_PrivateRegistriesUpdateOrgPrivateRegistryParamSchema,
    void,
    t_PrivateRegistriesUpdateOrgPrivateRegistryBodySchema,
    void
  >,
  respond: PrivateRegistriesUpdateOrgPrivateRegistryResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const privateRegistriesDeleteOrgPrivateRegistryResponder = {
  with204: r.with204<void>,
  with400: r.with400<t_scim_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type PrivateRegistriesDeleteOrgPrivateRegistryResponder =
  typeof privateRegistriesDeleteOrgPrivateRegistryResponder &
    KoaRuntimeResponder

const privateRegistriesDeleteOrgPrivateRegistryResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["400", s_scim_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type PrivateRegistriesDeleteOrgPrivateRegistry = (
  params: Params<
    t_PrivateRegistriesDeleteOrgPrivateRegistryParamSchema,
    void,
    void,
    void
  >,
  respond: PrivateRegistriesDeleteOrgPrivateRegistryResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<400, t_scim_error>
  | Response<404, t_basic_error>
>

const projectsListForOrgResponder = {
  with200: r.with200<t_project[]>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type ProjectsListForOrgResponder = typeof projectsListForOrgResponder &
  KoaRuntimeResponder

const projectsListForOrgResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_project)],
    ["422", s_validation_error_simple],
  ],
  undefined,
)

export type ProjectsListForOrg = (
  params: Params<
    t_ProjectsListForOrgParamSchema,
    t_ProjectsListForOrgQuerySchema,
    void,
    void
  >,
  respond: ProjectsListForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_project[]>
  | Response<422, t_validation_error_simple>
>

const projectsCreateForOrgResponder = {
  with201: r.with201<t_project>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with410: r.with410<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type ProjectsCreateForOrgResponder = typeof projectsCreateForOrgResponder &
  KoaRuntimeResponder

const projectsCreateForOrgResponseValidator = responseValidationFactory(
  [
    ["201", s_project],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["410", s_basic_error],
    ["422", s_validation_error_simple],
  ],
  undefined,
)

export type ProjectsCreateForOrg = (
  params: Params<
    t_ProjectsCreateForOrgParamSchema,
    void,
    t_ProjectsCreateForOrgBodySchema,
    void
  >,
  respond: ProjectsCreateForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_project>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const orgsGetAllCustomPropertiesResponder = {
  with200: r.with200<t_custom_property[]>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsGetAllCustomPropertiesResponder =
  typeof orgsGetAllCustomPropertiesResponder & KoaRuntimeResponder

const orgsGetAllCustomPropertiesResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_custom_property)],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type OrgsGetAllCustomProperties = (
  params: Params<t_OrgsGetAllCustomPropertiesParamSchema, void, void, void>,
  respond: OrgsGetAllCustomPropertiesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_custom_property[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const orgsCreateOrUpdateCustomPropertiesResponder = {
  with200: r.with200<t_custom_property[]>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsCreateOrUpdateCustomPropertiesResponder =
  typeof orgsCreateOrUpdateCustomPropertiesResponder & KoaRuntimeResponder

const orgsCreateOrUpdateCustomPropertiesResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_custom_property)],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type OrgsCreateOrUpdateCustomProperties = (
  params: Params<
    t_OrgsCreateOrUpdateCustomPropertiesParamSchema,
    void,
    t_OrgsCreateOrUpdateCustomPropertiesBodySchema,
    void
  >,
  respond: OrgsCreateOrUpdateCustomPropertiesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_custom_property[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const orgsGetCustomPropertyResponder = {
  with200: r.with200<t_custom_property>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsGetCustomPropertyResponder = typeof orgsGetCustomPropertyResponder &
  KoaRuntimeResponder

const orgsGetCustomPropertyResponseValidator = responseValidationFactory(
  [
    ["200", s_custom_property],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type OrgsGetCustomProperty = (
  params: Params<t_OrgsGetCustomPropertyParamSchema, void, void, void>,
  respond: OrgsGetCustomPropertyResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_custom_property>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const orgsCreateOrUpdateCustomPropertyResponder = {
  with200: r.with200<t_custom_property>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsCreateOrUpdateCustomPropertyResponder =
  typeof orgsCreateOrUpdateCustomPropertyResponder & KoaRuntimeResponder

const orgsCreateOrUpdateCustomPropertyResponseValidator =
  responseValidationFactory(
    [
      ["200", s_custom_property],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type OrgsCreateOrUpdateCustomProperty = (
  params: Params<
    t_OrgsCreateOrUpdateCustomPropertyParamSchema,
    void,
    t_OrgsCreateOrUpdateCustomPropertyBodySchema,
    void
  >,
  respond: OrgsCreateOrUpdateCustomPropertyResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_custom_property>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const orgsRemoveCustomPropertyResponder = {
  with204: r.with204<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsRemoveCustomPropertyResponder =
  typeof orgsRemoveCustomPropertyResponder & KoaRuntimeResponder

const orgsRemoveCustomPropertyResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type OrgsRemoveCustomProperty = (
  params: Params<t_OrgsRemoveCustomPropertyParamSchema, void, void, void>,
  respond: OrgsRemoveCustomPropertyResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const orgsListCustomPropertiesValuesForReposResponder = {
  with200: r.with200<t_org_repo_custom_property_values[]>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsListCustomPropertiesValuesForReposResponder =
  typeof orgsListCustomPropertiesValuesForReposResponder & KoaRuntimeResponder

const orgsListCustomPropertiesValuesForReposResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_org_repo_custom_property_values)],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type OrgsListCustomPropertiesValuesForRepos = (
  params: Params<
    t_OrgsListCustomPropertiesValuesForReposParamSchema,
    t_OrgsListCustomPropertiesValuesForReposQuerySchema,
    void,
    void
  >,
  respond: OrgsListCustomPropertiesValuesForReposResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_org_repo_custom_property_values[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const orgsCreateOrUpdateCustomPropertiesValuesForReposResponder = {
  with204: r.with204<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type OrgsCreateOrUpdateCustomPropertiesValuesForReposResponder =
  typeof orgsCreateOrUpdateCustomPropertiesValuesForReposResponder &
    KoaRuntimeResponder

const orgsCreateOrUpdateCustomPropertiesValuesForReposResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type OrgsCreateOrUpdateCustomPropertiesValuesForRepos = (
  params: Params<
    t_OrgsCreateOrUpdateCustomPropertiesValuesForReposParamSchema,
    void,
    t_OrgsCreateOrUpdateCustomPropertiesValuesForReposBodySchema,
    void
  >,
  respond: OrgsCreateOrUpdateCustomPropertiesValuesForReposResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const orgsListPublicMembersResponder = {
  with200: r.with200<t_simple_user[]>,
  withStatus: r.withStatus,
}

type OrgsListPublicMembersResponder = typeof orgsListPublicMembersResponder &
  KoaRuntimeResponder

const orgsListPublicMembersResponseValidator = responseValidationFactory(
  [["200", z.array(s_simple_user)]],
  undefined,
)

export type OrgsListPublicMembers = (
  params: Params<
    t_OrgsListPublicMembersParamSchema,
    t_OrgsListPublicMembersQuerySchema,
    void,
    void
  >,
  respond: OrgsListPublicMembersResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_simple_user[]>>

const orgsCheckPublicMembershipForUserResponder = {
  with204: r.with204<void>,
  with404: r.with404<void>,
  withStatus: r.withStatus,
}

type OrgsCheckPublicMembershipForUserResponder =
  typeof orgsCheckPublicMembershipForUserResponder & KoaRuntimeResponder

const orgsCheckPublicMembershipForUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["404", z.undefined()],
    ],
    undefined,
  )

export type OrgsCheckPublicMembershipForUser = (
  params: Params<
    t_OrgsCheckPublicMembershipForUserParamSchema,
    void,
    void,
    void
  >,
  respond: OrgsCheckPublicMembershipForUserResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<404, void>
>

const orgsSetPublicMembershipForAuthenticatedUserResponder = {
  with204: r.with204<void>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsSetPublicMembershipForAuthenticatedUserResponder =
  typeof orgsSetPublicMembershipForAuthenticatedUserResponder &
    KoaRuntimeResponder

const orgsSetPublicMembershipForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["403", s_basic_error],
    ],
    undefined,
  )

export type OrgsSetPublicMembershipForAuthenticatedUser = (
  params: Params<
    t_OrgsSetPublicMembershipForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: OrgsSetPublicMembershipForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
>

const orgsRemovePublicMembershipForAuthenticatedUserResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type OrgsRemovePublicMembershipForAuthenticatedUserResponder =
  typeof orgsRemovePublicMembershipForAuthenticatedUserResponder &
    KoaRuntimeResponder

const orgsRemovePublicMembershipForAuthenticatedUserResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type OrgsRemovePublicMembershipForAuthenticatedUser = (
  params: Params<
    t_OrgsRemovePublicMembershipForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: OrgsRemovePublicMembershipForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const reposListForOrgResponder = {
  with200: r.with200<t_minimal_repository[]>,
  withStatus: r.withStatus,
}

type ReposListForOrgResponder = typeof reposListForOrgResponder &
  KoaRuntimeResponder

const reposListForOrgResponseValidator = responseValidationFactory(
  [["200", z.array(s_minimal_repository)]],
  undefined,
)

export type ReposListForOrg = (
  params: Params<
    t_ReposListForOrgParamSchema,
    t_ReposListForOrgQuerySchema,
    void,
    void
  >,
  respond: ReposListForOrgResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_minimal_repository[]>
>

const reposCreateInOrgResponder = {
  with201: r.with201<t_full_repository>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposCreateInOrgResponder = typeof reposCreateInOrgResponder &
  KoaRuntimeResponder

const reposCreateInOrgResponseValidator = responseValidationFactory(
  [
    ["201", s_full_repository],
    ["403", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposCreateInOrg = (
  params: Params<
    t_ReposCreateInOrgParamSchema,
    void,
    t_ReposCreateInOrgBodySchema,
    void
  >,
  respond: ReposCreateInOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_full_repository>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

const reposGetOrgRulesetsResponder = {
  with200: r.with200<t_repository_ruleset[]>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetOrgRulesetsResponder = typeof reposGetOrgRulesetsResponder &
  KoaRuntimeResponder

const reposGetOrgRulesetsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_repository_ruleset)],
    ["404", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type ReposGetOrgRulesets = (
  params: Params<
    t_ReposGetOrgRulesetsParamSchema,
    t_ReposGetOrgRulesetsQuerySchema,
    void,
    void
  >,
  respond: ReposGetOrgRulesetsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_ruleset[]>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const reposCreateOrgRulesetResponder = {
  with201: r.with201<t_repository_ruleset>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposCreateOrgRulesetResponder = typeof reposCreateOrgRulesetResponder &
  KoaRuntimeResponder

const reposCreateOrgRulesetResponseValidator = responseValidationFactory(
  [
    ["201", s_repository_ruleset],
    ["404", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type ReposCreateOrgRuleset = (
  params: Params<
    t_ReposCreateOrgRulesetParamSchema,
    void,
    t_ReposCreateOrgRulesetBodySchema,
    void
  >,
  respond: ReposCreateOrgRulesetResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_repository_ruleset>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const reposGetOrgRuleSuitesResponder = {
  with200: r.with200<t_rule_suites>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetOrgRuleSuitesResponder = typeof reposGetOrgRuleSuitesResponder &
  KoaRuntimeResponder

const reposGetOrgRuleSuitesResponseValidator = responseValidationFactory(
  [
    ["200", s_rule_suites],
    ["404", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type ReposGetOrgRuleSuites = (
  params: Params<
    t_ReposGetOrgRuleSuitesParamSchema,
    t_ReposGetOrgRuleSuitesQuerySchema,
    void,
    void
  >,
  respond: ReposGetOrgRuleSuitesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_rule_suites>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const reposGetOrgRuleSuiteResponder = {
  with200: r.with200<t_rule_suite>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetOrgRuleSuiteResponder = typeof reposGetOrgRuleSuiteResponder &
  KoaRuntimeResponder

const reposGetOrgRuleSuiteResponseValidator = responseValidationFactory(
  [
    ["200", s_rule_suite],
    ["404", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type ReposGetOrgRuleSuite = (
  params: Params<t_ReposGetOrgRuleSuiteParamSchema, void, void, void>,
  respond: ReposGetOrgRuleSuiteResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_rule_suite>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const reposGetOrgRulesetResponder = {
  with200: r.with200<t_repository_ruleset>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetOrgRulesetResponder = typeof reposGetOrgRulesetResponder &
  KoaRuntimeResponder

const reposGetOrgRulesetResponseValidator = responseValidationFactory(
  [
    ["200", s_repository_ruleset],
    ["404", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type ReposGetOrgRuleset = (
  params: Params<t_ReposGetOrgRulesetParamSchema, void, void, void>,
  respond: ReposGetOrgRulesetResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_ruleset>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const reposUpdateOrgRulesetResponder = {
  with200: r.with200<t_repository_ruleset>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposUpdateOrgRulesetResponder = typeof reposUpdateOrgRulesetResponder &
  KoaRuntimeResponder

const reposUpdateOrgRulesetResponseValidator = responseValidationFactory(
  [
    ["200", s_repository_ruleset],
    ["404", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type ReposUpdateOrgRuleset = (
  params: Params<
    t_ReposUpdateOrgRulesetParamSchema,
    void,
    t_ReposUpdateOrgRulesetBodySchema | undefined,
    void
  >,
  respond: ReposUpdateOrgRulesetResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_ruleset>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const reposDeleteOrgRulesetResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposDeleteOrgRulesetResponder = typeof reposDeleteOrgRulesetResponder &
  KoaRuntimeResponder

const reposDeleteOrgRulesetResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type ReposDeleteOrgRuleset = (
  params: Params<t_ReposDeleteOrgRulesetParamSchema, void, void, void>,
  respond: ReposDeleteOrgRulesetResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const orgsGetOrgRulesetHistoryResponder = {
  with200: r.with200<t_ruleset_version[]>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsGetOrgRulesetHistoryResponder =
  typeof orgsGetOrgRulesetHistoryResponder & KoaRuntimeResponder

const orgsGetOrgRulesetHistoryResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_ruleset_version)],
    ["404", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type OrgsGetOrgRulesetHistory = (
  params: Params<
    t_OrgsGetOrgRulesetHistoryParamSchema,
    t_OrgsGetOrgRulesetHistoryQuerySchema,
    void,
    void
  >,
  respond: OrgsGetOrgRulesetHistoryResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_ruleset_version[]>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const orgsGetOrgRulesetVersionResponder = {
  with200: r.with200<t_ruleset_version_with_state>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsGetOrgRulesetVersionResponder =
  typeof orgsGetOrgRulesetVersionResponder & KoaRuntimeResponder

const orgsGetOrgRulesetVersionResponseValidator = responseValidationFactory(
  [
    ["200", s_ruleset_version_with_state],
    ["404", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type OrgsGetOrgRulesetVersion = (
  params: Params<t_OrgsGetOrgRulesetVersionParamSchema, void, void, void>,
  respond: OrgsGetOrgRulesetVersionResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_ruleset_version_with_state>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const secretScanningListAlertsForOrgResponder = {
  with200: r.with200<t_organization_secret_scanning_alert[]>,
  with404: r.with404<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type SecretScanningListAlertsForOrgResponder =
  typeof secretScanningListAlertsForOrgResponder & KoaRuntimeResponder

const secretScanningListAlertsForOrgResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_organization_secret_scanning_alert)],
      ["404", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

export type SecretScanningListAlertsForOrg = (
  params: Params<
    t_SecretScanningListAlertsForOrgParamSchema,
    t_SecretScanningListAlertsForOrgQuerySchema,
    void,
    void
  >,
  respond: SecretScanningListAlertsForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_organization_secret_scanning_alert[]>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const securityAdvisoriesListOrgRepositoryAdvisoriesResponder = {
  with200: r.with200<t_repository_advisory[]>,
  with400: r.with400<t_scim_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type SecurityAdvisoriesListOrgRepositoryAdvisoriesResponder =
  typeof securityAdvisoriesListOrgRepositoryAdvisoriesResponder &
    KoaRuntimeResponder

const securityAdvisoriesListOrgRepositoryAdvisoriesResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_repository_advisory)],
      ["400", s_scim_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type SecurityAdvisoriesListOrgRepositoryAdvisories = (
  params: Params<
    t_SecurityAdvisoriesListOrgRepositoryAdvisoriesParamSchema,
    t_SecurityAdvisoriesListOrgRepositoryAdvisoriesQuerySchema,
    void,
    void
  >,
  respond: SecurityAdvisoriesListOrgRepositoryAdvisoriesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_advisory[]>
  | Response<400, t_scim_error>
  | Response<404, t_basic_error>
>

const orgsListSecurityManagerTeamsResponder = {
  with200: r.with200<t_team_simple[]>,
  withStatus: r.withStatus,
}

type OrgsListSecurityManagerTeamsResponder =
  typeof orgsListSecurityManagerTeamsResponder & KoaRuntimeResponder

const orgsListSecurityManagerTeamsResponseValidator = responseValidationFactory(
  [["200", z.array(s_team_simple)]],
  undefined,
)

export type OrgsListSecurityManagerTeams = (
  params: Params<t_OrgsListSecurityManagerTeamsParamSchema, void, void, void>,
  respond: OrgsListSecurityManagerTeamsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_team_simple[]>>

const orgsAddSecurityManagerTeamResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type OrgsAddSecurityManagerTeamResponder =
  typeof orgsAddSecurityManagerTeamResponder & KoaRuntimeResponder

const orgsAddSecurityManagerTeamResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type OrgsAddSecurityManagerTeam = (
  params: Params<t_OrgsAddSecurityManagerTeamParamSchema, void, void, void>,
  respond: OrgsAddSecurityManagerTeamResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const orgsRemoveSecurityManagerTeamResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type OrgsRemoveSecurityManagerTeamResponder =
  typeof orgsRemoveSecurityManagerTeamResponder & KoaRuntimeResponder

const orgsRemoveSecurityManagerTeamResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type OrgsRemoveSecurityManagerTeam = (
  params: Params<t_OrgsRemoveSecurityManagerTeamParamSchema, void, void, void>,
  respond: OrgsRemoveSecurityManagerTeamResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const billingGetGithubActionsBillingOrgResponder = {
  with200: r.with200<t_actions_billing_usage>,
  withStatus: r.withStatus,
}

type BillingGetGithubActionsBillingOrgResponder =
  typeof billingGetGithubActionsBillingOrgResponder & KoaRuntimeResponder

const billingGetGithubActionsBillingOrgResponseValidator =
  responseValidationFactory([["200", s_actions_billing_usage]], undefined)

export type BillingGetGithubActionsBillingOrg = (
  params: Params<
    t_BillingGetGithubActionsBillingOrgParamSchema,
    void,
    void,
    void
  >,
  respond: BillingGetGithubActionsBillingOrgResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_actions_billing_usage>
>

const billingGetGithubPackagesBillingOrgResponder = {
  with200: r.with200<t_packages_billing_usage>,
  withStatus: r.withStatus,
}

type BillingGetGithubPackagesBillingOrgResponder =
  typeof billingGetGithubPackagesBillingOrgResponder & KoaRuntimeResponder

const billingGetGithubPackagesBillingOrgResponseValidator =
  responseValidationFactory([["200", s_packages_billing_usage]], undefined)

export type BillingGetGithubPackagesBillingOrg = (
  params: Params<
    t_BillingGetGithubPackagesBillingOrgParamSchema,
    void,
    void,
    void
  >,
  respond: BillingGetGithubPackagesBillingOrgResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_packages_billing_usage>
>

const billingGetSharedStorageBillingOrgResponder = {
  with200: r.with200<t_combined_billing_usage>,
  withStatus: r.withStatus,
}

type BillingGetSharedStorageBillingOrgResponder =
  typeof billingGetSharedStorageBillingOrgResponder & KoaRuntimeResponder

const billingGetSharedStorageBillingOrgResponseValidator =
  responseValidationFactory([["200", s_combined_billing_usage]], undefined)

export type BillingGetSharedStorageBillingOrg = (
  params: Params<
    t_BillingGetSharedStorageBillingOrgParamSchema,
    void,
    void,
    void
  >,
  respond: BillingGetSharedStorageBillingOrgResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_combined_billing_usage>
>

const hostedComputeListNetworkConfigurationsForOrgResponder = {
  with200: r.with200<{
    network_configurations: t_network_configuration[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type HostedComputeListNetworkConfigurationsForOrgResponder =
  typeof hostedComputeListNetworkConfigurationsForOrgResponder &
    KoaRuntimeResponder

const hostedComputeListNetworkConfigurationsForOrgResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          network_configurations: z.array(s_network_configuration),
        }),
      ],
    ],
    undefined,
  )

export type HostedComputeListNetworkConfigurationsForOrg = (
  params: Params<
    t_HostedComputeListNetworkConfigurationsForOrgParamSchema,
    t_HostedComputeListNetworkConfigurationsForOrgQuerySchema,
    void,
    void
  >,
  respond: HostedComputeListNetworkConfigurationsForOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        network_configurations: t_network_configuration[]
        total_count: number
      }
    >
>

const hostedComputeCreateNetworkConfigurationForOrgResponder = {
  with201: r.with201<t_network_configuration>,
  withStatus: r.withStatus,
}

type HostedComputeCreateNetworkConfigurationForOrgResponder =
  typeof hostedComputeCreateNetworkConfigurationForOrgResponder &
    KoaRuntimeResponder

const hostedComputeCreateNetworkConfigurationForOrgResponseValidator =
  responseValidationFactory([["201", s_network_configuration]], undefined)

export type HostedComputeCreateNetworkConfigurationForOrg = (
  params: Params<
    t_HostedComputeCreateNetworkConfigurationForOrgParamSchema,
    void,
    t_HostedComputeCreateNetworkConfigurationForOrgBodySchema,
    void
  >,
  respond: HostedComputeCreateNetworkConfigurationForOrgResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<201, t_network_configuration>
>

const hostedComputeGetNetworkConfigurationForOrgResponder = {
  with200: r.with200<t_network_configuration>,
  withStatus: r.withStatus,
}

type HostedComputeGetNetworkConfigurationForOrgResponder =
  typeof hostedComputeGetNetworkConfigurationForOrgResponder &
    KoaRuntimeResponder

const hostedComputeGetNetworkConfigurationForOrgResponseValidator =
  responseValidationFactory([["200", s_network_configuration]], undefined)

export type HostedComputeGetNetworkConfigurationForOrg = (
  params: Params<
    t_HostedComputeGetNetworkConfigurationForOrgParamSchema,
    void,
    void,
    void
  >,
  respond: HostedComputeGetNetworkConfigurationForOrgResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_network_configuration>
>

const hostedComputeUpdateNetworkConfigurationForOrgResponder = {
  with200: r.with200<t_network_configuration>,
  withStatus: r.withStatus,
}

type HostedComputeUpdateNetworkConfigurationForOrgResponder =
  typeof hostedComputeUpdateNetworkConfigurationForOrgResponder &
    KoaRuntimeResponder

const hostedComputeUpdateNetworkConfigurationForOrgResponseValidator =
  responseValidationFactory([["200", s_network_configuration]], undefined)

export type HostedComputeUpdateNetworkConfigurationForOrg = (
  params: Params<
    t_HostedComputeUpdateNetworkConfigurationForOrgParamSchema,
    void,
    t_HostedComputeUpdateNetworkConfigurationForOrgBodySchema,
    void
  >,
  respond: HostedComputeUpdateNetworkConfigurationForOrgResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_network_configuration>
>

const hostedComputeDeleteNetworkConfigurationFromOrgResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type HostedComputeDeleteNetworkConfigurationFromOrgResponder =
  typeof hostedComputeDeleteNetworkConfigurationFromOrgResponder &
    KoaRuntimeResponder

const hostedComputeDeleteNetworkConfigurationFromOrgResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type HostedComputeDeleteNetworkConfigurationFromOrg = (
  params: Params<
    t_HostedComputeDeleteNetworkConfigurationFromOrgParamSchema,
    void,
    void,
    void
  >,
  respond: HostedComputeDeleteNetworkConfigurationFromOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const hostedComputeGetNetworkSettingsForOrgResponder = {
  with200: r.with200<t_network_settings>,
  withStatus: r.withStatus,
}

type HostedComputeGetNetworkSettingsForOrgResponder =
  typeof hostedComputeGetNetworkSettingsForOrgResponder & KoaRuntimeResponder

const hostedComputeGetNetworkSettingsForOrgResponseValidator =
  responseValidationFactory([["200", s_network_settings]], undefined)

export type HostedComputeGetNetworkSettingsForOrg = (
  params: Params<
    t_HostedComputeGetNetworkSettingsForOrgParamSchema,
    void,
    void,
    void
  >,
  respond: HostedComputeGetNetworkSettingsForOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_network_settings>>

const copilotCopilotMetricsForTeamResponder = {
  with200: r.with200<t_copilot_usage_metrics_day[]>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CopilotCopilotMetricsForTeamResponder =
  typeof copilotCopilotMetricsForTeamResponder & KoaRuntimeResponder

const copilotCopilotMetricsForTeamResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_copilot_usage_metrics_day)],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type CopilotCopilotMetricsForTeam = (
  params: Params<
    t_CopilotCopilotMetricsForTeamParamSchema,
    t_CopilotCopilotMetricsForTeamQuerySchema,
    void,
    void
  >,
  respond: CopilotCopilotMetricsForTeamResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_copilot_usage_metrics_day[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_basic_error>
  | Response<500, t_basic_error>
>

const teamsListResponder = {
  with200: r.with200<t_team[]>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type TeamsListResponder = typeof teamsListResponder & KoaRuntimeResponder

const teamsListResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_team)],
    ["403", s_basic_error],
  ],
  undefined,
)

export type TeamsList = (
  params: Params<t_TeamsListParamSchema, t_TeamsListQuerySchema, void, void>,
  respond: TeamsListResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team[]>
  | Response<403, t_basic_error>
>

const teamsCreateResponder = {
  with201: r.with201<t_team_full>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type TeamsCreateResponder = typeof teamsCreateResponder & KoaRuntimeResponder

const teamsCreateResponseValidator = responseValidationFactory(
  [
    ["201", s_team_full],
    ["403", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type TeamsCreate = (
  params: Params<t_TeamsCreateParamSchema, void, t_TeamsCreateBodySchema, void>,
  respond: TeamsCreateResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_team_full>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

const teamsGetByNameResponder = {
  with200: r.with200<t_team_full>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type TeamsGetByNameResponder = typeof teamsGetByNameResponder &
  KoaRuntimeResponder

const teamsGetByNameResponseValidator = responseValidationFactory(
  [
    ["200", s_team_full],
    ["404", s_basic_error],
  ],
  undefined,
)

export type TeamsGetByName = (
  params: Params<t_TeamsGetByNameParamSchema, void, void, void>,
  respond: TeamsGetByNameResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_full>
  | Response<404, t_basic_error>
>

const teamsUpdateInOrgResponder = {
  with200: r.with200<t_team_full>,
  with201: r.with201<t_team_full>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type TeamsUpdateInOrgResponder = typeof teamsUpdateInOrgResponder &
  KoaRuntimeResponder

const teamsUpdateInOrgResponseValidator = responseValidationFactory(
  [
    ["200", s_team_full],
    ["201", s_team_full],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type TeamsUpdateInOrg = (
  params: Params<
    t_TeamsUpdateInOrgParamSchema,
    void,
    t_TeamsUpdateInOrgBodySchema | undefined,
    void
  >,
  respond: TeamsUpdateInOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_full>
  | Response<201, t_team_full>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const teamsDeleteInOrgResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type TeamsDeleteInOrgResponder = typeof teamsDeleteInOrgResponder &
  KoaRuntimeResponder

const teamsDeleteInOrgResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type TeamsDeleteInOrg = (
  params: Params<t_TeamsDeleteInOrgParamSchema, void, void, void>,
  respond: TeamsDeleteInOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const teamsListDiscussionsInOrgResponder = {
  with200: r.with200<t_team_discussion[]>,
  withStatus: r.withStatus,
}

type TeamsListDiscussionsInOrgResponder =
  typeof teamsListDiscussionsInOrgResponder & KoaRuntimeResponder

const teamsListDiscussionsInOrgResponseValidator = responseValidationFactory(
  [["200", z.array(s_team_discussion)]],
  undefined,
)

export type TeamsListDiscussionsInOrg = (
  params: Params<
    t_TeamsListDiscussionsInOrgParamSchema,
    t_TeamsListDiscussionsInOrgQuerySchema,
    void,
    void
  >,
  respond: TeamsListDiscussionsInOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_team_discussion[]>>

const teamsCreateDiscussionInOrgResponder = {
  with201: r.with201<t_team_discussion>,
  withStatus: r.withStatus,
}

type TeamsCreateDiscussionInOrgResponder =
  typeof teamsCreateDiscussionInOrgResponder & KoaRuntimeResponder

const teamsCreateDiscussionInOrgResponseValidator = responseValidationFactory(
  [["201", s_team_discussion]],
  undefined,
)

export type TeamsCreateDiscussionInOrg = (
  params: Params<
    t_TeamsCreateDiscussionInOrgParamSchema,
    void,
    t_TeamsCreateDiscussionInOrgBodySchema,
    void
  >,
  respond: TeamsCreateDiscussionInOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_team_discussion>>

const teamsGetDiscussionInOrgResponder = {
  with200: r.with200<t_team_discussion>,
  withStatus: r.withStatus,
}

type TeamsGetDiscussionInOrgResponder =
  typeof teamsGetDiscussionInOrgResponder & KoaRuntimeResponder

const teamsGetDiscussionInOrgResponseValidator = responseValidationFactory(
  [["200", s_team_discussion]],
  undefined,
)

export type TeamsGetDiscussionInOrg = (
  params: Params<t_TeamsGetDiscussionInOrgParamSchema, void, void, void>,
  respond: TeamsGetDiscussionInOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_team_discussion>>

const teamsUpdateDiscussionInOrgResponder = {
  with200: r.with200<t_team_discussion>,
  withStatus: r.withStatus,
}

type TeamsUpdateDiscussionInOrgResponder =
  typeof teamsUpdateDiscussionInOrgResponder & KoaRuntimeResponder

const teamsUpdateDiscussionInOrgResponseValidator = responseValidationFactory(
  [["200", s_team_discussion]],
  undefined,
)

export type TeamsUpdateDiscussionInOrg = (
  params: Params<
    t_TeamsUpdateDiscussionInOrgParamSchema,
    void,
    t_TeamsUpdateDiscussionInOrgBodySchema | undefined,
    void
  >,
  respond: TeamsUpdateDiscussionInOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_team_discussion>>

const teamsDeleteDiscussionInOrgResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type TeamsDeleteDiscussionInOrgResponder =
  typeof teamsDeleteDiscussionInOrgResponder & KoaRuntimeResponder

const teamsDeleteDiscussionInOrgResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type TeamsDeleteDiscussionInOrg = (
  params: Params<t_TeamsDeleteDiscussionInOrgParamSchema, void, void, void>,
  respond: TeamsDeleteDiscussionInOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const teamsListDiscussionCommentsInOrgResponder = {
  with200: r.with200<t_team_discussion_comment[]>,
  withStatus: r.withStatus,
}

type TeamsListDiscussionCommentsInOrgResponder =
  typeof teamsListDiscussionCommentsInOrgResponder & KoaRuntimeResponder

const teamsListDiscussionCommentsInOrgResponseValidator =
  responseValidationFactory(
    [["200", z.array(s_team_discussion_comment)]],
    undefined,
  )

export type TeamsListDiscussionCommentsInOrg = (
  params: Params<
    t_TeamsListDiscussionCommentsInOrgParamSchema,
    t_TeamsListDiscussionCommentsInOrgQuerySchema,
    void,
    void
  >,
  respond: TeamsListDiscussionCommentsInOrgResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_team_discussion_comment[]>
>

const teamsCreateDiscussionCommentInOrgResponder = {
  with201: r.with201<t_team_discussion_comment>,
  withStatus: r.withStatus,
}

type TeamsCreateDiscussionCommentInOrgResponder =
  typeof teamsCreateDiscussionCommentInOrgResponder & KoaRuntimeResponder

const teamsCreateDiscussionCommentInOrgResponseValidator =
  responseValidationFactory([["201", s_team_discussion_comment]], undefined)

export type TeamsCreateDiscussionCommentInOrg = (
  params: Params<
    t_TeamsCreateDiscussionCommentInOrgParamSchema,
    void,
    t_TeamsCreateDiscussionCommentInOrgBodySchema,
    void
  >,
  respond: TeamsCreateDiscussionCommentInOrgResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<201, t_team_discussion_comment>
>

const teamsGetDiscussionCommentInOrgResponder = {
  with200: r.with200<t_team_discussion_comment>,
  withStatus: r.withStatus,
}

type TeamsGetDiscussionCommentInOrgResponder =
  typeof teamsGetDiscussionCommentInOrgResponder & KoaRuntimeResponder

const teamsGetDiscussionCommentInOrgResponseValidator =
  responseValidationFactory([["200", s_team_discussion_comment]], undefined)

export type TeamsGetDiscussionCommentInOrg = (
  params: Params<t_TeamsGetDiscussionCommentInOrgParamSchema, void, void, void>,
  respond: TeamsGetDiscussionCommentInOrgResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_team_discussion_comment>
>

const teamsUpdateDiscussionCommentInOrgResponder = {
  with200: r.with200<t_team_discussion_comment>,
  withStatus: r.withStatus,
}

type TeamsUpdateDiscussionCommentInOrgResponder =
  typeof teamsUpdateDiscussionCommentInOrgResponder & KoaRuntimeResponder

const teamsUpdateDiscussionCommentInOrgResponseValidator =
  responseValidationFactory([["200", s_team_discussion_comment]], undefined)

export type TeamsUpdateDiscussionCommentInOrg = (
  params: Params<
    t_TeamsUpdateDiscussionCommentInOrgParamSchema,
    void,
    t_TeamsUpdateDiscussionCommentInOrgBodySchema,
    void
  >,
  respond: TeamsUpdateDiscussionCommentInOrgResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_team_discussion_comment>
>

const teamsDeleteDiscussionCommentInOrgResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type TeamsDeleteDiscussionCommentInOrgResponder =
  typeof teamsDeleteDiscussionCommentInOrgResponder & KoaRuntimeResponder

const teamsDeleteDiscussionCommentInOrgResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type TeamsDeleteDiscussionCommentInOrg = (
  params: Params<
    t_TeamsDeleteDiscussionCommentInOrgParamSchema,
    void,
    void,
    void
  >,
  respond: TeamsDeleteDiscussionCommentInOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const reactionsListForTeamDiscussionCommentInOrgResponder = {
  with200: r.with200<t_reaction[]>,
  withStatus: r.withStatus,
}

type ReactionsListForTeamDiscussionCommentInOrgResponder =
  typeof reactionsListForTeamDiscussionCommentInOrgResponder &
    KoaRuntimeResponder

const reactionsListForTeamDiscussionCommentInOrgResponseValidator =
  responseValidationFactory([["200", z.array(s_reaction)]], undefined)

export type ReactionsListForTeamDiscussionCommentInOrg = (
  params: Params<
    t_ReactionsListForTeamDiscussionCommentInOrgParamSchema,
    t_ReactionsListForTeamDiscussionCommentInOrgQuerySchema,
    void,
    void
  >,
  respond: ReactionsListForTeamDiscussionCommentInOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_reaction[]>>

const reactionsCreateForTeamDiscussionCommentInOrgResponder = {
  with200: r.with200<t_reaction>,
  with201: r.with201<t_reaction>,
  withStatus: r.withStatus,
}

type ReactionsCreateForTeamDiscussionCommentInOrgResponder =
  typeof reactionsCreateForTeamDiscussionCommentInOrgResponder &
    KoaRuntimeResponder

const reactionsCreateForTeamDiscussionCommentInOrgResponseValidator =
  responseValidationFactory(
    [
      ["200", s_reaction],
      ["201", s_reaction],
    ],
    undefined,
  )

export type ReactionsCreateForTeamDiscussionCommentInOrg = (
  params: Params<
    t_ReactionsCreateForTeamDiscussionCommentInOrgParamSchema,
    void,
    t_ReactionsCreateForTeamDiscussionCommentInOrgBodySchema,
    void
  >,
  respond: ReactionsCreateForTeamDiscussionCommentInOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_reaction>
  | Response<201, t_reaction>
>

const reactionsDeleteForTeamDiscussionCommentResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ReactionsDeleteForTeamDiscussionCommentResponder =
  typeof reactionsDeleteForTeamDiscussionCommentResponder & KoaRuntimeResponder

const reactionsDeleteForTeamDiscussionCommentResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ReactionsDeleteForTeamDiscussionComment = (
  params: Params<
    t_ReactionsDeleteForTeamDiscussionCommentParamSchema,
    void,
    void,
    void
  >,
  respond: ReactionsDeleteForTeamDiscussionCommentResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const reactionsListForTeamDiscussionInOrgResponder = {
  with200: r.with200<t_reaction[]>,
  withStatus: r.withStatus,
}

type ReactionsListForTeamDiscussionInOrgResponder =
  typeof reactionsListForTeamDiscussionInOrgResponder & KoaRuntimeResponder

const reactionsListForTeamDiscussionInOrgResponseValidator =
  responseValidationFactory([["200", z.array(s_reaction)]], undefined)

export type ReactionsListForTeamDiscussionInOrg = (
  params: Params<
    t_ReactionsListForTeamDiscussionInOrgParamSchema,
    t_ReactionsListForTeamDiscussionInOrgQuerySchema,
    void,
    void
  >,
  respond: ReactionsListForTeamDiscussionInOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_reaction[]>>

const reactionsCreateForTeamDiscussionInOrgResponder = {
  with200: r.with200<t_reaction>,
  with201: r.with201<t_reaction>,
  withStatus: r.withStatus,
}

type ReactionsCreateForTeamDiscussionInOrgResponder =
  typeof reactionsCreateForTeamDiscussionInOrgResponder & KoaRuntimeResponder

const reactionsCreateForTeamDiscussionInOrgResponseValidator =
  responseValidationFactory(
    [
      ["200", s_reaction],
      ["201", s_reaction],
    ],
    undefined,
  )

export type ReactionsCreateForTeamDiscussionInOrg = (
  params: Params<
    t_ReactionsCreateForTeamDiscussionInOrgParamSchema,
    void,
    t_ReactionsCreateForTeamDiscussionInOrgBodySchema,
    void
  >,
  respond: ReactionsCreateForTeamDiscussionInOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_reaction>
  | Response<201, t_reaction>
>

const reactionsDeleteForTeamDiscussionResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ReactionsDeleteForTeamDiscussionResponder =
  typeof reactionsDeleteForTeamDiscussionResponder & KoaRuntimeResponder

const reactionsDeleteForTeamDiscussionResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ReactionsDeleteForTeamDiscussion = (
  params: Params<
    t_ReactionsDeleteForTeamDiscussionParamSchema,
    void,
    void,
    void
  >,
  respond: ReactionsDeleteForTeamDiscussionResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const teamsListPendingInvitationsInOrgResponder = {
  with200: r.with200<t_organization_invitation[]>,
  withStatus: r.withStatus,
}

type TeamsListPendingInvitationsInOrgResponder =
  typeof teamsListPendingInvitationsInOrgResponder & KoaRuntimeResponder

const teamsListPendingInvitationsInOrgResponseValidator =
  responseValidationFactory(
    [["200", z.array(s_organization_invitation)]],
    undefined,
  )

export type TeamsListPendingInvitationsInOrg = (
  params: Params<
    t_TeamsListPendingInvitationsInOrgParamSchema,
    t_TeamsListPendingInvitationsInOrgQuerySchema,
    void,
    void
  >,
  respond: TeamsListPendingInvitationsInOrgResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_organization_invitation[]>
>

const teamsListMembersInOrgResponder = {
  with200: r.with200<t_simple_user[]>,
  withStatus: r.withStatus,
}

type TeamsListMembersInOrgResponder = typeof teamsListMembersInOrgResponder &
  KoaRuntimeResponder

const teamsListMembersInOrgResponseValidator = responseValidationFactory(
  [["200", z.array(s_simple_user)]],
  undefined,
)

export type TeamsListMembersInOrg = (
  params: Params<
    t_TeamsListMembersInOrgParamSchema,
    t_TeamsListMembersInOrgQuerySchema,
    void,
    void
  >,
  respond: TeamsListMembersInOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_simple_user[]>>

const teamsGetMembershipForUserInOrgResponder = {
  with200: r.with200<t_team_membership>,
  with404: r.with404<void>,
  withStatus: r.withStatus,
}

type TeamsGetMembershipForUserInOrgResponder =
  typeof teamsGetMembershipForUserInOrgResponder & KoaRuntimeResponder

const teamsGetMembershipForUserInOrgResponseValidator =
  responseValidationFactory(
    [
      ["200", s_team_membership],
      ["404", z.undefined()],
    ],
    undefined,
  )

export type TeamsGetMembershipForUserInOrg = (
  params: Params<t_TeamsGetMembershipForUserInOrgParamSchema, void, void, void>,
  respond: TeamsGetMembershipForUserInOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_membership>
  | Response<404, void>
>

const teamsAddOrUpdateMembershipForUserInOrgResponder = {
  with200: r.with200<t_team_membership>,
  with403: r.with403<void>,
  with422: r.with422<void>,
  withStatus: r.withStatus,
}

type TeamsAddOrUpdateMembershipForUserInOrgResponder =
  typeof teamsAddOrUpdateMembershipForUserInOrgResponder & KoaRuntimeResponder

const teamsAddOrUpdateMembershipForUserInOrgResponseValidator =
  responseValidationFactory(
    [
      ["200", s_team_membership],
      ["403", z.undefined()],
      ["422", z.undefined()],
    ],
    undefined,
  )

export type TeamsAddOrUpdateMembershipForUserInOrg = (
  params: Params<
    t_TeamsAddOrUpdateMembershipForUserInOrgParamSchema,
    void,
    t_TeamsAddOrUpdateMembershipForUserInOrgBodySchema | undefined,
    void
  >,
  respond: TeamsAddOrUpdateMembershipForUserInOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_membership>
  | Response<403, void>
  | Response<422, void>
>

const teamsRemoveMembershipForUserInOrgResponder = {
  with204: r.with204<void>,
  with403: r.with403<void>,
  withStatus: r.withStatus,
}

type TeamsRemoveMembershipForUserInOrgResponder =
  typeof teamsRemoveMembershipForUserInOrgResponder & KoaRuntimeResponder

const teamsRemoveMembershipForUserInOrgResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["403", z.undefined()],
    ],
    undefined,
  )

export type TeamsRemoveMembershipForUserInOrg = (
  params: Params<
    t_TeamsRemoveMembershipForUserInOrgParamSchema,
    void,
    void,
    void
  >,
  respond: TeamsRemoveMembershipForUserInOrgResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<403, void>
>

const teamsListProjectsInOrgResponder = {
  with200: r.with200<t_team_project[]>,
  withStatus: r.withStatus,
}

type TeamsListProjectsInOrgResponder = typeof teamsListProjectsInOrgResponder &
  KoaRuntimeResponder

const teamsListProjectsInOrgResponseValidator = responseValidationFactory(
  [["200", z.array(s_team_project)]],
  undefined,
)

export type TeamsListProjectsInOrg = (
  params: Params<
    t_TeamsListProjectsInOrgParamSchema,
    t_TeamsListProjectsInOrgQuerySchema,
    void,
    void
  >,
  respond: TeamsListProjectsInOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_team_project[]>>

const teamsCheckPermissionsForProjectInOrgResponder = {
  with200: r.with200<t_team_project>,
  with404: r.with404<void>,
  withStatus: r.withStatus,
}

type TeamsCheckPermissionsForProjectInOrgResponder =
  typeof teamsCheckPermissionsForProjectInOrgResponder & KoaRuntimeResponder

const teamsCheckPermissionsForProjectInOrgResponseValidator =
  responseValidationFactory(
    [
      ["200", s_team_project],
      ["404", z.undefined()],
    ],
    undefined,
  )

export type TeamsCheckPermissionsForProjectInOrg = (
  params: Params<
    t_TeamsCheckPermissionsForProjectInOrgParamSchema,
    void,
    void,
    void
  >,
  respond: TeamsCheckPermissionsForProjectInOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_project>
  | Response<404, void>
>

const teamsAddOrUpdateProjectPermissionsInOrgResponder = {
  with204: r.with204<void>,
  with403: r.with403<{
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type TeamsAddOrUpdateProjectPermissionsInOrgResponder =
  typeof teamsAddOrUpdateProjectPermissionsInOrgResponder & KoaRuntimeResponder

const teamsAddOrUpdateProjectPermissionsInOrgResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      [
        "403",
        z.object({
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

export type TeamsAddOrUpdateProjectPermissionsInOrg = (
  params: Params<
    t_TeamsAddOrUpdateProjectPermissionsInOrgParamSchema,
    void,
    t_TeamsAddOrUpdateProjectPermissionsInOrgBodySchema | undefined,
    void
  >,
  respond: TeamsAddOrUpdateProjectPermissionsInOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<
      403,
      {
        documentation_url?: string
        message?: string
      }
    >
>

const teamsRemoveProjectInOrgResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type TeamsRemoveProjectInOrgResponder =
  typeof teamsRemoveProjectInOrgResponder & KoaRuntimeResponder

const teamsRemoveProjectInOrgResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type TeamsRemoveProjectInOrg = (
  params: Params<t_TeamsRemoveProjectInOrgParamSchema, void, void, void>,
  respond: TeamsRemoveProjectInOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const teamsListReposInOrgResponder = {
  with200: r.with200<t_minimal_repository[]>,
  withStatus: r.withStatus,
}

type TeamsListReposInOrgResponder = typeof teamsListReposInOrgResponder &
  KoaRuntimeResponder

const teamsListReposInOrgResponseValidator = responseValidationFactory(
  [["200", z.array(s_minimal_repository)]],
  undefined,
)

export type TeamsListReposInOrg = (
  params: Params<
    t_TeamsListReposInOrgParamSchema,
    t_TeamsListReposInOrgQuerySchema,
    void,
    void
  >,
  respond: TeamsListReposInOrgResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_minimal_repository[]>
>

const teamsCheckPermissionsForRepoInOrgResponder = {
  with200: r.with200<t_team_repository>,
  with204: r.with204<void>,
  with404: r.with404<void>,
  withStatus: r.withStatus,
}

type TeamsCheckPermissionsForRepoInOrgResponder =
  typeof teamsCheckPermissionsForRepoInOrgResponder & KoaRuntimeResponder

const teamsCheckPermissionsForRepoInOrgResponseValidator =
  responseValidationFactory(
    [
      ["200", s_team_repository],
      ["204", z.undefined()],
      ["404", z.undefined()],
    ],
    undefined,
  )

export type TeamsCheckPermissionsForRepoInOrg = (
  params: Params<
    t_TeamsCheckPermissionsForRepoInOrgParamSchema,
    void,
    void,
    void
  >,
  respond: TeamsCheckPermissionsForRepoInOrgResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_repository>
  | Response<204, void>
  | Response<404, void>
>

const teamsAddOrUpdateRepoPermissionsInOrgResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type TeamsAddOrUpdateRepoPermissionsInOrgResponder =
  typeof teamsAddOrUpdateRepoPermissionsInOrgResponder & KoaRuntimeResponder

const teamsAddOrUpdateRepoPermissionsInOrgResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type TeamsAddOrUpdateRepoPermissionsInOrg = (
  params: Params<
    t_TeamsAddOrUpdateRepoPermissionsInOrgParamSchema,
    void,
    t_TeamsAddOrUpdateRepoPermissionsInOrgBodySchema | undefined,
    void
  >,
  respond: TeamsAddOrUpdateRepoPermissionsInOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const teamsRemoveRepoInOrgResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type TeamsRemoveRepoInOrgResponder = typeof teamsRemoveRepoInOrgResponder &
  KoaRuntimeResponder

const teamsRemoveRepoInOrgResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type TeamsRemoveRepoInOrg = (
  params: Params<t_TeamsRemoveRepoInOrgParamSchema, void, void, void>,
  respond: TeamsRemoveRepoInOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const teamsListChildInOrgResponder = {
  with200: r.with200<t_team[]>,
  withStatus: r.withStatus,
}

type TeamsListChildInOrgResponder = typeof teamsListChildInOrgResponder &
  KoaRuntimeResponder

const teamsListChildInOrgResponseValidator = responseValidationFactory(
  [["200", z.array(s_team)]],
  undefined,
)

export type TeamsListChildInOrg = (
  params: Params<
    t_TeamsListChildInOrgParamSchema,
    t_TeamsListChildInOrgQuerySchema,
    void,
    void
  >,
  respond: TeamsListChildInOrgResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_team[]>>

const orgsEnableOrDisableSecurityProductOnAllOrgReposResponder = {
  with204: r.with204<void>,
  with422: r.with422<void>,
  withStatus: r.withStatus,
}

type OrgsEnableOrDisableSecurityProductOnAllOrgReposResponder =
  typeof orgsEnableOrDisableSecurityProductOnAllOrgReposResponder &
    KoaRuntimeResponder

const orgsEnableOrDisableSecurityProductOnAllOrgReposResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["422", z.undefined()],
    ],
    undefined,
  )

export type OrgsEnableOrDisableSecurityProductOnAllOrgRepos = (
  params: Params<
    t_OrgsEnableOrDisableSecurityProductOnAllOrgReposParamSchema,
    void,
    t_OrgsEnableOrDisableSecurityProductOnAllOrgReposBodySchema | undefined,
    void
  >,
  respond: OrgsEnableOrDisableSecurityProductOnAllOrgReposResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<422, void>
>

const projectsGetCardResponder = {
  with200: r.with200<t_project_card>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ProjectsGetCardResponder = typeof projectsGetCardResponder &
  KoaRuntimeResponder

const projectsGetCardResponseValidator = responseValidationFactory(
  [
    ["200", s_project_card],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ProjectsGetCard = (
  params: Params<t_ProjectsGetCardParamSchema, void, void, void>,
  respond: ProjectsGetCardResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_project_card>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const projectsUpdateCardResponder = {
  with200: r.with200<t_project_card>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type ProjectsUpdateCardResponder = typeof projectsUpdateCardResponder &
  KoaRuntimeResponder

const projectsUpdateCardResponseValidator = responseValidationFactory(
  [
    ["200", s_project_card],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error_simple],
  ],
  undefined,
)

export type ProjectsUpdateCard = (
  params: Params<
    t_ProjectsUpdateCardParamSchema,
    void,
    t_ProjectsUpdateCardBodySchema | undefined,
    void
  >,
  respond: ProjectsUpdateCardResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_project_card>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const projectsDeleteCardResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<{
    documentation_url?: string
    errors?: string[]
    message?: string
  }>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ProjectsDeleteCardResponder = typeof projectsDeleteCardResponder &
  KoaRuntimeResponder

const projectsDeleteCardResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["304", z.undefined()],
    ["401", s_basic_error],
    [
      "403",
      z.object({
        message: z.string().optional(),
        documentation_url: z.string().optional(),
        errors: z.array(z.string()).optional(),
      }),
    ],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ProjectsDeleteCard = (
  params: Params<t_ProjectsDeleteCardParamSchema, void, void, void>,
  respond: ProjectsDeleteCardResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<
      403,
      {
        documentation_url?: string
        errors?: string[]
        message?: string
      }
    >
  | Response<404, t_basic_error>
>

const projectsMoveCardResponder = {
  with201: r.with201<EmptyObject>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<{
    documentation_url?: string
    errors?: {
      code?: string
      field?: string
      message?: string
      resource?: string
    }[]
    message?: string
  }>,
  with422: r.with422<t_validation_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    errors?: {
      code?: string
      message?: string
    }[]
    message?: string
  }>,
  withStatus: r.withStatus,
}

type ProjectsMoveCardResponder = typeof projectsMoveCardResponder &
  KoaRuntimeResponder

const projectsMoveCardResponseValidator = responseValidationFactory(
  [
    ["201", z.object({})],
    ["304", z.undefined()],
    ["401", s_basic_error],
    [
      "403",
      z.object({
        message: z.string().optional(),
        documentation_url: z.string().optional(),
        errors: z
          .array(
            z.object({
              code: z.string().optional(),
              message: z.string().optional(),
              resource: z.string().optional(),
              field: z.string().optional(),
            }),
          )
          .optional(),
      }),
    ],
    ["422", s_validation_error],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
        errors: z
          .array(
            z.object({
              code: z.string().optional(),
              message: z.string().optional(),
            }),
          )
          .optional(),
      }),
    ],
  ],
  undefined,
)

export type ProjectsMoveCard = (
  params: Params<
    t_ProjectsMoveCardParamSchema,
    void,
    t_ProjectsMoveCardBodySchema,
    void
  >,
  respond: ProjectsMoveCardResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, EmptyObject>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<
      403,
      {
        documentation_url?: string
        errors?: {
          code?: string
          field?: string
          message?: string
          resource?: string
        }[]
        message?: string
      }
    >
  | Response<422, t_validation_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        errors?: {
          code?: string
          message?: string
        }[]
        message?: string
      }
    >
>

const projectsGetColumnResponder = {
  with200: r.with200<t_project_column>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ProjectsGetColumnResponder = typeof projectsGetColumnResponder &
  KoaRuntimeResponder

const projectsGetColumnResponseValidator = responseValidationFactory(
  [
    ["200", s_project_column],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ProjectsGetColumn = (
  params: Params<t_ProjectsGetColumnParamSchema, void, void, void>,
  respond: ProjectsGetColumnResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_project_column>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const projectsUpdateColumnResponder = {
  with200: r.with200<t_project_column>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type ProjectsUpdateColumnResponder = typeof projectsUpdateColumnResponder &
  KoaRuntimeResponder

const projectsUpdateColumnResponseValidator = responseValidationFactory(
  [
    ["200", s_project_column],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
  ],
  undefined,
)

export type ProjectsUpdateColumn = (
  params: Params<
    t_ProjectsUpdateColumnParamSchema,
    void,
    t_ProjectsUpdateColumnBodySchema,
    void
  >,
  respond: ProjectsUpdateColumnResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_project_column>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const projectsDeleteColumnResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type ProjectsDeleteColumnResponder = typeof projectsDeleteColumnResponder &
  KoaRuntimeResponder

const projectsDeleteColumnResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
  ],
  undefined,
)

export type ProjectsDeleteColumn = (
  params: Params<t_ProjectsDeleteColumnParamSchema, void, void, void>,
  respond: ProjectsDeleteColumnResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const projectsListCardsResponder = {
  with200: r.with200<t_project_card[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type ProjectsListCardsResponder = typeof projectsListCardsResponder &
  KoaRuntimeResponder

const projectsListCardsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_project_card)],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
  ],
  undefined,
)

export type ProjectsListCards = (
  params: Params<
    t_ProjectsListCardsParamSchema,
    t_ProjectsListCardsQuerySchema,
    void,
    void
  >,
  respond: ProjectsListCardsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_project_card[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const projectsCreateCardResponder = {
  with201: r.with201<t_project_card>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<t_validation_error | t_validation_error_simple>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    errors?: {
      code?: string
      message?: string
    }[]
    message?: string
  }>,
  withStatus: r.withStatus,
}

type ProjectsCreateCardResponder = typeof projectsCreateCardResponder &
  KoaRuntimeResponder

const projectsCreateCardResponseValidator = responseValidationFactory(
  [
    ["201", s_project_card],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["422", z.union([s_validation_error, s_validation_error_simple])],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
        errors: z
          .array(
            z.object({
              code: z.string().optional(),
              message: z.string().optional(),
            }),
          )
          .optional(),
      }),
    ],
  ],
  undefined,
)

export type ProjectsCreateCard = (
  params: Params<
    t_ProjectsCreateCardParamSchema,
    void,
    t_ProjectsCreateCardBodySchema,
    void
  >,
  respond: ProjectsCreateCardResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_project_card>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error | t_validation_error_simple>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        errors?: {
          code?: string
          message?: string
        }[]
        message?: string
      }
    >
>

const projectsMoveColumnResponder = {
  with201: r.with201<EmptyObject>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type ProjectsMoveColumnResponder = typeof projectsMoveColumnResponder &
  KoaRuntimeResponder

const projectsMoveColumnResponseValidator = responseValidationFactory(
  [
    ["201", z.object({})],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["422", s_validation_error_simple],
  ],
  undefined,
)

export type ProjectsMoveColumn = (
  params: Params<
    t_ProjectsMoveColumnParamSchema,
    void,
    t_ProjectsMoveColumnBodySchema,
    void
  >,
  respond: ProjectsMoveColumnResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, EmptyObject>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const projectsGetResponder = {
  with200: r.with200<t_project>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type ProjectsGetResponder = typeof projectsGetResponder & KoaRuntimeResponder

const projectsGetResponseValidator = responseValidationFactory(
  [
    ["200", s_project],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
  ],
  undefined,
)

export type ProjectsGet = (
  params: Params<t_ProjectsGetParamSchema, void, void, void>,
  respond: ProjectsGetResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_project>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const projectsUpdateResponder = {
  with200: r.with200<t_project>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<{
    documentation_url?: string
    errors?: string[]
    message?: string
  }>,
  with404: r.with404<void>,
  with410: r.with410<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type ProjectsUpdateResponder = typeof projectsUpdateResponder &
  KoaRuntimeResponder

const projectsUpdateResponseValidator = responseValidationFactory(
  [
    ["200", s_project],
    ["304", z.undefined()],
    ["401", s_basic_error],
    [
      "403",
      z.object({
        message: z.string().optional(),
        documentation_url: z.string().optional(),
        errors: z.array(z.string()).optional(),
      }),
    ],
    ["404", z.undefined()],
    ["410", s_basic_error],
    ["422", s_validation_error_simple],
  ],
  undefined,
)

export type ProjectsUpdate = (
  params: Params<
    t_ProjectsUpdateParamSchema,
    void,
    t_ProjectsUpdateBodySchema | undefined,
    void
  >,
  respond: ProjectsUpdateResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_project>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<
      403,
      {
        documentation_url?: string
        errors?: string[]
        message?: string
      }
    >
  | Response<404, void>
  | Response<410, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const projectsDeleteResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<{
    documentation_url?: string
    errors?: string[]
    message?: string
  }>,
  with404: r.with404<t_basic_error>,
  with410: r.with410<t_basic_error>,
  withStatus: r.withStatus,
}

type ProjectsDeleteResponder = typeof projectsDeleteResponder &
  KoaRuntimeResponder

const projectsDeleteResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["304", z.undefined()],
    ["401", s_basic_error],
    [
      "403",
      z.object({
        message: z.string().optional(),
        documentation_url: z.string().optional(),
        errors: z.array(z.string()).optional(),
      }),
    ],
    ["404", s_basic_error],
    ["410", s_basic_error],
  ],
  undefined,
)

export type ProjectsDelete = (
  params: Params<t_ProjectsDeleteParamSchema, void, void, void>,
  respond: ProjectsDeleteResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<
      403,
      {
        documentation_url?: string
        errors?: string[]
        message?: string
      }
    >
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
>

const projectsListCollaboratorsResponder = {
  with200: r.with200<t_simple_user[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ProjectsListCollaboratorsResponder =
  typeof projectsListCollaboratorsResponder & KoaRuntimeResponder

const projectsListCollaboratorsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_simple_user)],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ProjectsListCollaborators = (
  params: Params<
    t_ProjectsListCollaboratorsParamSchema,
    t_ProjectsListCollaboratorsQuerySchema,
    void,
    void
  >,
  respond: ProjectsListCollaboratorsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const projectsAddCollaboratorResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ProjectsAddCollaboratorResponder =
  typeof projectsAddCollaboratorResponder & KoaRuntimeResponder

const projectsAddCollaboratorResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ProjectsAddCollaborator = (
  params: Params<
    t_ProjectsAddCollaboratorParamSchema,
    void,
    t_ProjectsAddCollaboratorBodySchema | undefined,
    void
  >,
  respond: ProjectsAddCollaboratorResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const projectsRemoveCollaboratorResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ProjectsRemoveCollaboratorResponder =
  typeof projectsRemoveCollaboratorResponder & KoaRuntimeResponder

const projectsRemoveCollaboratorResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ProjectsRemoveCollaborator = (
  params: Params<t_ProjectsRemoveCollaboratorParamSchema, void, void, void>,
  respond: ProjectsRemoveCollaboratorResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const projectsGetPermissionForUserResponder = {
  with200: r.with200<t_project_collaborator_permission>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ProjectsGetPermissionForUserResponder =
  typeof projectsGetPermissionForUserResponder & KoaRuntimeResponder

const projectsGetPermissionForUserResponseValidator = responseValidationFactory(
  [
    ["200", s_project_collaborator_permission],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ProjectsGetPermissionForUser = (
  params: Params<t_ProjectsGetPermissionForUserParamSchema, void, void, void>,
  respond: ProjectsGetPermissionForUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_project_collaborator_permission>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const projectsListColumnsResponder = {
  with200: r.with200<t_project_column[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type ProjectsListColumnsResponder = typeof projectsListColumnsResponder &
  KoaRuntimeResponder

const projectsListColumnsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_project_column)],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
  ],
  undefined,
)

export type ProjectsListColumns = (
  params: Params<
    t_ProjectsListColumnsParamSchema,
    t_ProjectsListColumnsQuerySchema,
    void,
    void
  >,
  respond: ProjectsListColumnsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_project_column[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const projectsCreateColumnResponder = {
  with201: r.with201<t_project_column>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type ProjectsCreateColumnResponder = typeof projectsCreateColumnResponder &
  KoaRuntimeResponder

const projectsCreateColumnResponseValidator = responseValidationFactory(
  [
    ["201", s_project_column],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["422", s_validation_error_simple],
  ],
  undefined,
)

export type ProjectsCreateColumn = (
  params: Params<
    t_ProjectsCreateColumnParamSchema,
    void,
    t_ProjectsCreateColumnBodySchema,
    void
  >,
  respond: ProjectsCreateColumnResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_project_column>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const rateLimitGetResponder = {
  with200: r.with200<t_rate_limit_overview>,
  with304: r.with304<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type RateLimitGetResponder = typeof rateLimitGetResponder & KoaRuntimeResponder

const rateLimitGetResponseValidator = responseValidationFactory(
  [
    ["200", s_rate_limit_overview],
    ["304", z.undefined()],
    ["404", s_basic_error],
  ],
  undefined,
)

export type RateLimitGet = (
  params: Params<void, void, void, void>,
  respond: RateLimitGetResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_rate_limit_overview>
  | Response<304, void>
  | Response<404, t_basic_error>
>

const reposGetResponder = {
  with200: r.with200<t_full_repository>,
  with301: r.with301<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetResponder = typeof reposGetResponder & KoaRuntimeResponder

const reposGetResponseValidator = responseValidationFactory(
  [
    ["200", s_full_repository],
    ["301", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposGet = (
  params: Params<t_ReposGetParamSchema, void, void, void>,
  respond: ReposGetResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_full_repository>
  | Response<301, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const reposUpdateResponder = {
  with200: r.with200<t_full_repository>,
  with307: r.with307<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposUpdateResponder = typeof reposUpdateResponder & KoaRuntimeResponder

const reposUpdateResponseValidator = responseValidationFactory(
  [
    ["200", s_full_repository],
    ["307", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposUpdate = (
  params: Params<
    t_ReposUpdateParamSchema,
    void,
    t_ReposUpdateBodySchema | undefined,
    void
  >,
  respond: ReposUpdateResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_full_repository>
  | Response<307, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const reposDeleteResponder = {
  with204: r.with204<void>,
  with307: r.with307<t_basic_error>,
  with403: r.with403<{
    documentation_url?: string
    message?: string
  }>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposDeleteResponder = typeof reposDeleteResponder & KoaRuntimeResponder

const reposDeleteResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["307", s_basic_error],
    [
      "403",
      z.object({
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposDelete = (
  params: Params<t_ReposDeleteParamSchema, void, void, void>,
  respond: ReposDeleteResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<307, t_basic_error>
  | Response<
      403,
      {
        documentation_url?: string
        message?: string
      }
    >
  | Response<404, t_basic_error>
>

const actionsListArtifactsForRepoResponder = {
  with200: r.with200<{
    artifacts: t_artifact[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type ActionsListArtifactsForRepoResponder =
  typeof actionsListArtifactsForRepoResponder & KoaRuntimeResponder

const actionsListArtifactsForRepoResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number(),
        artifacts: z.array(s_artifact),
      }),
    ],
  ],
  undefined,
)

export type ActionsListArtifactsForRepo = (
  params: Params<
    t_ActionsListArtifactsForRepoParamSchema,
    t_ActionsListArtifactsForRepoQuerySchema,
    void,
    void
  >,
  respond: ActionsListArtifactsForRepoResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        artifacts: t_artifact[]
        total_count: number
      }
    >
>

const actionsGetArtifactResponder = {
  with200: r.with200<t_artifact>,
  withStatus: r.withStatus,
}

type ActionsGetArtifactResponder = typeof actionsGetArtifactResponder &
  KoaRuntimeResponder

const actionsGetArtifactResponseValidator = responseValidationFactory(
  [["200", s_artifact]],
  undefined,
)

export type ActionsGetArtifact = (
  params: Params<t_ActionsGetArtifactParamSchema, void, void, void>,
  respond: ActionsGetArtifactResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_artifact>>

const actionsDeleteArtifactResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsDeleteArtifactResponder = typeof actionsDeleteArtifactResponder &
  KoaRuntimeResponder

const actionsDeleteArtifactResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type ActionsDeleteArtifact = (
  params: Params<t_ActionsDeleteArtifactParamSchema, void, void, void>,
  respond: ActionsDeleteArtifactResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsDownloadArtifactResponder = {
  with302: r.with302<void>,
  with410: r.with410<t_basic_error>,
  withStatus: r.withStatus,
}

type ActionsDownloadArtifactResponder =
  typeof actionsDownloadArtifactResponder & KoaRuntimeResponder

const actionsDownloadArtifactResponseValidator = responseValidationFactory(
  [
    ["302", z.undefined()],
    ["410", s_basic_error],
  ],
  undefined,
)

export type ActionsDownloadArtifact = (
  params: Params<t_ActionsDownloadArtifactParamSchema, void, void, void>,
  respond: ActionsDownloadArtifactResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<302, void>
  | Response<410, t_basic_error>
>

const actionsGetActionsCacheUsageResponder = {
  with200: r.with200<t_actions_cache_usage_by_repository>,
  withStatus: r.withStatus,
}

type ActionsGetActionsCacheUsageResponder =
  typeof actionsGetActionsCacheUsageResponder & KoaRuntimeResponder

const actionsGetActionsCacheUsageResponseValidator = responseValidationFactory(
  [["200", s_actions_cache_usage_by_repository]],
  undefined,
)

export type ActionsGetActionsCacheUsage = (
  params: Params<t_ActionsGetActionsCacheUsageParamSchema, void, void, void>,
  respond: ActionsGetActionsCacheUsageResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_actions_cache_usage_by_repository>
>

const actionsGetActionsCacheListResponder = {
  with200: r.with200<t_actions_cache_list>,
  withStatus: r.withStatus,
}

type ActionsGetActionsCacheListResponder =
  typeof actionsGetActionsCacheListResponder & KoaRuntimeResponder

const actionsGetActionsCacheListResponseValidator = responseValidationFactory(
  [["200", s_actions_cache_list]],
  undefined,
)

export type ActionsGetActionsCacheList = (
  params: Params<
    t_ActionsGetActionsCacheListParamSchema,
    t_ActionsGetActionsCacheListQuerySchema,
    void,
    void
  >,
  respond: ActionsGetActionsCacheListResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_actions_cache_list>>

const actionsDeleteActionsCacheByKeyResponder = {
  with200: r.with200<t_actions_cache_list>,
  withStatus: r.withStatus,
}

type ActionsDeleteActionsCacheByKeyResponder =
  typeof actionsDeleteActionsCacheByKeyResponder & KoaRuntimeResponder

const actionsDeleteActionsCacheByKeyResponseValidator =
  responseValidationFactory([["200", s_actions_cache_list]], undefined)

export type ActionsDeleteActionsCacheByKey = (
  params: Params<
    t_ActionsDeleteActionsCacheByKeyParamSchema,
    t_ActionsDeleteActionsCacheByKeyQuerySchema,
    void,
    void
  >,
  respond: ActionsDeleteActionsCacheByKeyResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_actions_cache_list>>

const actionsDeleteActionsCacheByIdResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsDeleteActionsCacheByIdResponder =
  typeof actionsDeleteActionsCacheByIdResponder & KoaRuntimeResponder

const actionsDeleteActionsCacheByIdResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsDeleteActionsCacheById = (
  params: Params<t_ActionsDeleteActionsCacheByIdParamSchema, void, void, void>,
  respond: ActionsDeleteActionsCacheByIdResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsGetJobForWorkflowRunResponder = {
  with200: r.with200<t_job>,
  withStatus: r.withStatus,
}

type ActionsGetJobForWorkflowRunResponder =
  typeof actionsGetJobForWorkflowRunResponder & KoaRuntimeResponder

const actionsGetJobForWorkflowRunResponseValidator = responseValidationFactory(
  [["200", s_job]],
  undefined,
)

export type ActionsGetJobForWorkflowRun = (
  params: Params<t_ActionsGetJobForWorkflowRunParamSchema, void, void, void>,
  respond: ActionsGetJobForWorkflowRunResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_job>>

const actionsDownloadJobLogsForWorkflowRunResponder = {
  with302: r.with302<void>,
  withStatus: r.withStatus,
}

type ActionsDownloadJobLogsForWorkflowRunResponder =
  typeof actionsDownloadJobLogsForWorkflowRunResponder & KoaRuntimeResponder

const actionsDownloadJobLogsForWorkflowRunResponseValidator =
  responseValidationFactory([["302", z.undefined()]], undefined)

export type ActionsDownloadJobLogsForWorkflowRun = (
  params: Params<
    t_ActionsDownloadJobLogsForWorkflowRunParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsDownloadJobLogsForWorkflowRunResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<302, void>>

const actionsReRunJobForWorkflowRunResponder = {
  with201: r.with201<t_empty_object>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type ActionsReRunJobForWorkflowRunResponder =
  typeof actionsReRunJobForWorkflowRunResponder & KoaRuntimeResponder

const actionsReRunJobForWorkflowRunResponseValidator =
  responseValidationFactory(
    [
      ["201", s_empty_object],
      ["403", s_basic_error],
    ],
    undefined,
  )

export type ActionsReRunJobForWorkflowRun = (
  params: Params<
    t_ActionsReRunJobForWorkflowRunParamSchema,
    void,
    t_ActionsReRunJobForWorkflowRunBodySchema | undefined,
    void
  >,
  respond: ActionsReRunJobForWorkflowRunResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<403, t_basic_error>
>

const actionsGetCustomOidcSubClaimForRepoResponder = {
  with200: r.with200<t_oidc_custom_sub_repo>,
  with400: r.with400<t_scim_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ActionsGetCustomOidcSubClaimForRepoResponder =
  typeof actionsGetCustomOidcSubClaimForRepoResponder & KoaRuntimeResponder

const actionsGetCustomOidcSubClaimForRepoResponseValidator =
  responseValidationFactory(
    [
      ["200", s_oidc_custom_sub_repo],
      ["400", s_scim_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ActionsGetCustomOidcSubClaimForRepo = (
  params: Params<
    t_ActionsGetCustomOidcSubClaimForRepoParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsGetCustomOidcSubClaimForRepoResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_oidc_custom_sub_repo>
  | Response<400, t_scim_error>
  | Response<404, t_basic_error>
>

const actionsSetCustomOidcSubClaimForRepoResponder = {
  with201: r.with201<t_empty_object>,
  with400: r.with400<t_scim_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type ActionsSetCustomOidcSubClaimForRepoResponder =
  typeof actionsSetCustomOidcSubClaimForRepoResponder & KoaRuntimeResponder

const actionsSetCustomOidcSubClaimForRepoResponseValidator =
  responseValidationFactory(
    [
      ["201", s_empty_object],
      ["400", s_scim_error],
      ["404", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

export type ActionsSetCustomOidcSubClaimForRepo = (
  params: Params<
    t_ActionsSetCustomOidcSubClaimForRepoParamSchema,
    void,
    t_ActionsSetCustomOidcSubClaimForRepoBodySchema,
    void
  >,
  respond: ActionsSetCustomOidcSubClaimForRepoResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<400, t_scim_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const actionsListRepoOrganizationSecretsResponder = {
  with200: r.with200<{
    secrets: t_actions_secret[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type ActionsListRepoOrganizationSecretsResponder =
  typeof actionsListRepoOrganizationSecretsResponder & KoaRuntimeResponder

const actionsListRepoOrganizationSecretsResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          secrets: z.array(s_actions_secret),
        }),
      ],
    ],
    undefined,
  )

export type ActionsListRepoOrganizationSecrets = (
  params: Params<
    t_ActionsListRepoOrganizationSecretsParamSchema,
    t_ActionsListRepoOrganizationSecretsQuerySchema,
    void,
    void
  >,
  respond: ActionsListRepoOrganizationSecretsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        secrets: t_actions_secret[]
        total_count: number
      }
    >
>

const actionsListRepoOrganizationVariablesResponder = {
  with200: r.with200<{
    total_count: number
    variables: t_actions_variable[]
  }>,
  withStatus: r.withStatus,
}

type ActionsListRepoOrganizationVariablesResponder =
  typeof actionsListRepoOrganizationVariablesResponder & KoaRuntimeResponder

const actionsListRepoOrganizationVariablesResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          variables: z.array(s_actions_variable),
        }),
      ],
    ],
    undefined,
  )

export type ActionsListRepoOrganizationVariables = (
  params: Params<
    t_ActionsListRepoOrganizationVariablesParamSchema,
    t_ActionsListRepoOrganizationVariablesQuerySchema,
    void,
    void
  >,
  respond: ActionsListRepoOrganizationVariablesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        total_count: number
        variables: t_actions_variable[]
      }
    >
>

const actionsGetGithubActionsPermissionsRepositoryResponder = {
  with200: r.with200<t_actions_repository_permissions>,
  withStatus: r.withStatus,
}

type ActionsGetGithubActionsPermissionsRepositoryResponder =
  typeof actionsGetGithubActionsPermissionsRepositoryResponder &
    KoaRuntimeResponder

const actionsGetGithubActionsPermissionsRepositoryResponseValidator =
  responseValidationFactory(
    [["200", s_actions_repository_permissions]],
    undefined,
  )

export type ActionsGetGithubActionsPermissionsRepository = (
  params: Params<
    t_ActionsGetGithubActionsPermissionsRepositoryParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsGetGithubActionsPermissionsRepositoryResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_actions_repository_permissions>
>

const actionsSetGithubActionsPermissionsRepositoryResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsSetGithubActionsPermissionsRepositoryResponder =
  typeof actionsSetGithubActionsPermissionsRepositoryResponder &
    KoaRuntimeResponder

const actionsSetGithubActionsPermissionsRepositoryResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsSetGithubActionsPermissionsRepository = (
  params: Params<
    t_ActionsSetGithubActionsPermissionsRepositoryParamSchema,
    void,
    t_ActionsSetGithubActionsPermissionsRepositoryBodySchema,
    void
  >,
  respond: ActionsSetGithubActionsPermissionsRepositoryResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsGetWorkflowAccessToRepositoryResponder = {
  with200: r.with200<t_actions_workflow_access_to_repository>,
  withStatus: r.withStatus,
}

type ActionsGetWorkflowAccessToRepositoryResponder =
  typeof actionsGetWorkflowAccessToRepositoryResponder & KoaRuntimeResponder

const actionsGetWorkflowAccessToRepositoryResponseValidator =
  responseValidationFactory(
    [["200", s_actions_workflow_access_to_repository]],
    undefined,
  )

export type ActionsGetWorkflowAccessToRepository = (
  params: Params<
    t_ActionsGetWorkflowAccessToRepositoryParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsGetWorkflowAccessToRepositoryResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_actions_workflow_access_to_repository>
>

const actionsSetWorkflowAccessToRepositoryResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsSetWorkflowAccessToRepositoryResponder =
  typeof actionsSetWorkflowAccessToRepositoryResponder & KoaRuntimeResponder

const actionsSetWorkflowAccessToRepositoryResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsSetWorkflowAccessToRepository = (
  params: Params<
    t_ActionsSetWorkflowAccessToRepositoryParamSchema,
    void,
    t_ActionsSetWorkflowAccessToRepositoryBodySchema,
    void
  >,
  respond: ActionsSetWorkflowAccessToRepositoryResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsGetAllowedActionsRepositoryResponder = {
  with200: r.with200<t_selected_actions>,
  withStatus: r.withStatus,
}

type ActionsGetAllowedActionsRepositoryResponder =
  typeof actionsGetAllowedActionsRepositoryResponder & KoaRuntimeResponder

const actionsGetAllowedActionsRepositoryResponseValidator =
  responseValidationFactory([["200", s_selected_actions]], undefined)

export type ActionsGetAllowedActionsRepository = (
  params: Params<
    t_ActionsGetAllowedActionsRepositoryParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsGetAllowedActionsRepositoryResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_selected_actions>>

const actionsSetAllowedActionsRepositoryResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsSetAllowedActionsRepositoryResponder =
  typeof actionsSetAllowedActionsRepositoryResponder & KoaRuntimeResponder

const actionsSetAllowedActionsRepositoryResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsSetAllowedActionsRepository = (
  params: Params<
    t_ActionsSetAllowedActionsRepositoryParamSchema,
    void,
    t_ActionsSetAllowedActionsRepositoryBodySchema | undefined,
    void
  >,
  respond: ActionsSetAllowedActionsRepositoryResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryResponder = {
  with200: r.with200<t_actions_get_default_workflow_permissions>,
  withStatus: r.withStatus,
}

type ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryResponder =
  typeof actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryResponder &
    KoaRuntimeResponder

const actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryResponseValidator =
  responseValidationFactory(
    [["200", s_actions_get_default_workflow_permissions]],
    undefined,
  )

export type ActionsGetGithubActionsDefaultWorkflowPermissionsRepository = (
  params: Params<
    t_ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_actions_get_default_workflow_permissions>
>

const actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryResponder = {
  with204: r.with204<void>,
  with409: r.with409<void>,
  withStatus: r.withStatus,
}

type ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryResponder =
  typeof actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryResponder &
    KoaRuntimeResponder

const actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["409", z.undefined()],
    ],
    undefined,
  )

export type ActionsSetGithubActionsDefaultWorkflowPermissionsRepository = (
  params: Params<
    t_ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema,
    void,
    t_ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryBodySchema,
    void
  >,
  respond: ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<409, void>
>

const actionsListSelfHostedRunnersForRepoResponder = {
  with200: r.with200<{
    runners: t_runner[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type ActionsListSelfHostedRunnersForRepoResponder =
  typeof actionsListSelfHostedRunnersForRepoResponder & KoaRuntimeResponder

const actionsListSelfHostedRunnersForRepoResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          runners: z.array(s_runner),
        }),
      ],
    ],
    undefined,
  )

export type ActionsListSelfHostedRunnersForRepo = (
  params: Params<
    t_ActionsListSelfHostedRunnersForRepoParamSchema,
    t_ActionsListSelfHostedRunnersForRepoQuerySchema,
    void,
    void
  >,
  respond: ActionsListSelfHostedRunnersForRepoResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        runners: t_runner[]
        total_count: number
      }
    >
>

const actionsListRunnerApplicationsForRepoResponder = {
  with200: r.with200<t_runner_application[]>,
  withStatus: r.withStatus,
}

type ActionsListRunnerApplicationsForRepoResponder =
  typeof actionsListRunnerApplicationsForRepoResponder & KoaRuntimeResponder

const actionsListRunnerApplicationsForRepoResponseValidator =
  responseValidationFactory([["200", z.array(s_runner_application)]], undefined)

export type ActionsListRunnerApplicationsForRepo = (
  params: Params<
    t_ActionsListRunnerApplicationsForRepoParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsListRunnerApplicationsForRepoResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_runner_application[]>
>

const actionsGenerateRunnerJitconfigForRepoResponder = {
  with201: r.with201<{
    encoded_jit_config: string
    runner: t_runner
  }>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type ActionsGenerateRunnerJitconfigForRepoResponder =
  typeof actionsGenerateRunnerJitconfigForRepoResponder & KoaRuntimeResponder

const actionsGenerateRunnerJitconfigForRepoResponseValidator =
  responseValidationFactory(
    [
      ["201", z.object({ runner: s_runner, encoded_jit_config: z.string() })],
      ["404", s_basic_error],
      ["409", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

export type ActionsGenerateRunnerJitconfigForRepo = (
  params: Params<
    t_ActionsGenerateRunnerJitconfigForRepoParamSchema,
    void,
    t_ActionsGenerateRunnerJitconfigForRepoBodySchema,
    void
  >,
  respond: ActionsGenerateRunnerJitconfigForRepoResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      201,
      {
        encoded_jit_config: string
        runner: t_runner
      }
    >
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const actionsCreateRegistrationTokenForRepoResponder = {
  with201: r.with201<t_authentication_token>,
  withStatus: r.withStatus,
}

type ActionsCreateRegistrationTokenForRepoResponder =
  typeof actionsCreateRegistrationTokenForRepoResponder & KoaRuntimeResponder

const actionsCreateRegistrationTokenForRepoResponseValidator =
  responseValidationFactory([["201", s_authentication_token]], undefined)

export type ActionsCreateRegistrationTokenForRepo = (
  params: Params<
    t_ActionsCreateRegistrationTokenForRepoParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsCreateRegistrationTokenForRepoResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<201, t_authentication_token>
>

const actionsCreateRemoveTokenForRepoResponder = {
  with201: r.with201<t_authentication_token>,
  withStatus: r.withStatus,
}

type ActionsCreateRemoveTokenForRepoResponder =
  typeof actionsCreateRemoveTokenForRepoResponder & KoaRuntimeResponder

const actionsCreateRemoveTokenForRepoResponseValidator =
  responseValidationFactory([["201", s_authentication_token]], undefined)

export type ActionsCreateRemoveTokenForRepo = (
  params: Params<
    t_ActionsCreateRemoveTokenForRepoParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsCreateRemoveTokenForRepoResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<201, t_authentication_token>
>

const actionsGetSelfHostedRunnerForRepoResponder = {
  with200: r.with200<t_runner>,
  withStatus: r.withStatus,
}

type ActionsGetSelfHostedRunnerForRepoResponder =
  typeof actionsGetSelfHostedRunnerForRepoResponder & KoaRuntimeResponder

const actionsGetSelfHostedRunnerForRepoResponseValidator =
  responseValidationFactory([["200", s_runner]], undefined)

export type ActionsGetSelfHostedRunnerForRepo = (
  params: Params<
    t_ActionsGetSelfHostedRunnerForRepoParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsGetSelfHostedRunnerForRepoResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_runner>>

const actionsDeleteSelfHostedRunnerFromRepoResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsDeleteSelfHostedRunnerFromRepoResponder =
  typeof actionsDeleteSelfHostedRunnerFromRepoResponder & KoaRuntimeResponder

const actionsDeleteSelfHostedRunnerFromRepoResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsDeleteSelfHostedRunnerFromRepo = (
  params: Params<
    t_ActionsDeleteSelfHostedRunnerFromRepoParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsDeleteSelfHostedRunnerFromRepoResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsListLabelsForSelfHostedRunnerForRepoResponder = {
  with200: r.with200<{
    labels: t_runner_label[]
    total_count: number
  }>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ActionsListLabelsForSelfHostedRunnerForRepoResponder =
  typeof actionsListLabelsForSelfHostedRunnerForRepoResponder &
    KoaRuntimeResponder

const actionsListLabelsForSelfHostedRunnerForRepoResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          labels: z.array(s_runner_label),
        }),
      ],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ActionsListLabelsForSelfHostedRunnerForRepo = (
  params: Params<
    t_ActionsListLabelsForSelfHostedRunnerForRepoParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsListLabelsForSelfHostedRunnerForRepoResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        labels: t_runner_label[]
        total_count: number
      }
    >
  | Response<404, t_basic_error>
>

const actionsAddCustomLabelsToSelfHostedRunnerForRepoResponder = {
  with200: r.with200<{
    labels: t_runner_label[]
    total_count: number
  }>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type ActionsAddCustomLabelsToSelfHostedRunnerForRepoResponder =
  typeof actionsAddCustomLabelsToSelfHostedRunnerForRepoResponder &
    KoaRuntimeResponder

const actionsAddCustomLabelsToSelfHostedRunnerForRepoResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          labels: z.array(s_runner_label),
        }),
      ],
      ["404", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

export type ActionsAddCustomLabelsToSelfHostedRunnerForRepo = (
  params: Params<
    t_ActionsAddCustomLabelsToSelfHostedRunnerForRepoParamSchema,
    void,
    t_ActionsAddCustomLabelsToSelfHostedRunnerForRepoBodySchema,
    void
  >,
  respond: ActionsAddCustomLabelsToSelfHostedRunnerForRepoResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        labels: t_runner_label[]
        total_count: number
      }
    >
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const actionsSetCustomLabelsForSelfHostedRunnerForRepoResponder = {
  with200: r.with200<{
    labels: t_runner_label[]
    total_count: number
  }>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type ActionsSetCustomLabelsForSelfHostedRunnerForRepoResponder =
  typeof actionsSetCustomLabelsForSelfHostedRunnerForRepoResponder &
    KoaRuntimeResponder

const actionsSetCustomLabelsForSelfHostedRunnerForRepoResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          labels: z.array(s_runner_label),
        }),
      ],
      ["404", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

export type ActionsSetCustomLabelsForSelfHostedRunnerForRepo = (
  params: Params<
    t_ActionsSetCustomLabelsForSelfHostedRunnerForRepoParamSchema,
    void,
    t_ActionsSetCustomLabelsForSelfHostedRunnerForRepoBodySchema,
    void
  >,
  respond: ActionsSetCustomLabelsForSelfHostedRunnerForRepoResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        labels: t_runner_label[]
        total_count: number
      }
    >
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoResponder = {
  with200: r.with200<{
    labels: t_runner_label[]
    total_count: number
  }>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoResponder =
  typeof actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoResponder &
    KoaRuntimeResponder

const actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          labels: z.array(s_runner_label),
        }),
      ],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo = (
  params: Params<
    t_ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        labels: t_runner_label[]
        total_count: number
      }
    >
  | Response<404, t_basic_error>
>

const actionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponder = {
  with200: r.with200<{
    labels: t_runner_label[]
    total_count: number
  }>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponder =
  typeof actionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponder &
    KoaRuntimeResponder

const actionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          labels: z.array(s_runner_label),
        }),
      ],
      ["404", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

export type ActionsRemoveCustomLabelFromSelfHostedRunnerForRepo = (
  params: Params<
    t_ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        labels: t_runner_label[]
        total_count: number
      }
    >
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const actionsListWorkflowRunsForRepoResponder = {
  with200: r.with200<{
    total_count: number
    workflow_runs: t_workflow_run[]
  }>,
  withStatus: r.withStatus,
}

type ActionsListWorkflowRunsForRepoResponder =
  typeof actionsListWorkflowRunsForRepoResponder & KoaRuntimeResponder

const actionsListWorkflowRunsForRepoResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          workflow_runs: z.array(s_workflow_run),
        }),
      ],
    ],
    undefined,
  )

export type ActionsListWorkflowRunsForRepo = (
  params: Params<
    t_ActionsListWorkflowRunsForRepoParamSchema,
    t_ActionsListWorkflowRunsForRepoQuerySchema,
    void,
    void
  >,
  respond: ActionsListWorkflowRunsForRepoResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        total_count: number
        workflow_runs: t_workflow_run[]
      }
    >
>

const actionsGetWorkflowRunResponder = {
  with200: r.with200<t_workflow_run>,
  withStatus: r.withStatus,
}

type ActionsGetWorkflowRunResponder = typeof actionsGetWorkflowRunResponder &
  KoaRuntimeResponder

const actionsGetWorkflowRunResponseValidator = responseValidationFactory(
  [["200", s_workflow_run]],
  undefined,
)

export type ActionsGetWorkflowRun = (
  params: Params<
    t_ActionsGetWorkflowRunParamSchema,
    t_ActionsGetWorkflowRunQuerySchema,
    void,
    void
  >,
  respond: ActionsGetWorkflowRunResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_workflow_run>>

const actionsDeleteWorkflowRunResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsDeleteWorkflowRunResponder =
  typeof actionsDeleteWorkflowRunResponder & KoaRuntimeResponder

const actionsDeleteWorkflowRunResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type ActionsDeleteWorkflowRun = (
  params: Params<t_ActionsDeleteWorkflowRunParamSchema, void, void, void>,
  respond: ActionsDeleteWorkflowRunResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsGetReviewsForRunResponder = {
  with200: r.with200<t_environment_approvals[]>,
  withStatus: r.withStatus,
}

type ActionsGetReviewsForRunResponder =
  typeof actionsGetReviewsForRunResponder & KoaRuntimeResponder

const actionsGetReviewsForRunResponseValidator = responseValidationFactory(
  [["200", z.array(s_environment_approvals)]],
  undefined,
)

export type ActionsGetReviewsForRun = (
  params: Params<t_ActionsGetReviewsForRunParamSchema, void, void, void>,
  respond: ActionsGetReviewsForRunResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_environment_approvals[]>
>

const actionsApproveWorkflowRunResponder = {
  with201: r.with201<t_empty_object>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ActionsApproveWorkflowRunResponder =
  typeof actionsApproveWorkflowRunResponder & KoaRuntimeResponder

const actionsApproveWorkflowRunResponseValidator = responseValidationFactory(
  [
    ["201", s_empty_object],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ActionsApproveWorkflowRun = (
  params: Params<t_ActionsApproveWorkflowRunParamSchema, void, void, void>,
  respond: ActionsApproveWorkflowRunResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const actionsListWorkflowRunArtifactsResponder = {
  with200: r.with200<{
    artifacts: t_artifact[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type ActionsListWorkflowRunArtifactsResponder =
  typeof actionsListWorkflowRunArtifactsResponder & KoaRuntimeResponder

const actionsListWorkflowRunArtifactsResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          artifacts: z.array(s_artifact),
        }),
      ],
    ],
    undefined,
  )

export type ActionsListWorkflowRunArtifacts = (
  params: Params<
    t_ActionsListWorkflowRunArtifactsParamSchema,
    t_ActionsListWorkflowRunArtifactsQuerySchema,
    void,
    void
  >,
  respond: ActionsListWorkflowRunArtifactsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        artifacts: t_artifact[]
        total_count: number
      }
    >
>

const actionsGetWorkflowRunAttemptResponder = {
  with200: r.with200<t_workflow_run>,
  withStatus: r.withStatus,
}

type ActionsGetWorkflowRunAttemptResponder =
  typeof actionsGetWorkflowRunAttemptResponder & KoaRuntimeResponder

const actionsGetWorkflowRunAttemptResponseValidator = responseValidationFactory(
  [["200", s_workflow_run]],
  undefined,
)

export type ActionsGetWorkflowRunAttempt = (
  params: Params<
    t_ActionsGetWorkflowRunAttemptParamSchema,
    t_ActionsGetWorkflowRunAttemptQuerySchema,
    void,
    void
  >,
  respond: ActionsGetWorkflowRunAttemptResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_workflow_run>>

const actionsListJobsForWorkflowRunAttemptResponder = {
  with200: r.with200<{
    jobs: t_job[]
    total_count: number
  }>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ActionsListJobsForWorkflowRunAttemptResponder =
  typeof actionsListJobsForWorkflowRunAttemptResponder & KoaRuntimeResponder

const actionsListJobsForWorkflowRunAttemptResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({ total_count: z.coerce.number(), jobs: z.array(s_job) }),
      ],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ActionsListJobsForWorkflowRunAttempt = (
  params: Params<
    t_ActionsListJobsForWorkflowRunAttemptParamSchema,
    t_ActionsListJobsForWorkflowRunAttemptQuerySchema,
    void,
    void
  >,
  respond: ActionsListJobsForWorkflowRunAttemptResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        jobs: t_job[]
        total_count: number
      }
    >
  | Response<404, t_basic_error>
>

const actionsDownloadWorkflowRunAttemptLogsResponder = {
  with302: r.with302<void>,
  withStatus: r.withStatus,
}

type ActionsDownloadWorkflowRunAttemptLogsResponder =
  typeof actionsDownloadWorkflowRunAttemptLogsResponder & KoaRuntimeResponder

const actionsDownloadWorkflowRunAttemptLogsResponseValidator =
  responseValidationFactory([["302", z.undefined()]], undefined)

export type ActionsDownloadWorkflowRunAttemptLogs = (
  params: Params<
    t_ActionsDownloadWorkflowRunAttemptLogsParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsDownloadWorkflowRunAttemptLogsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<302, void>>

const actionsCancelWorkflowRunResponder = {
  with202: r.with202<t_empty_object>,
  with409: r.with409<t_basic_error>,
  withStatus: r.withStatus,
}

type ActionsCancelWorkflowRunResponder =
  typeof actionsCancelWorkflowRunResponder & KoaRuntimeResponder

const actionsCancelWorkflowRunResponseValidator = responseValidationFactory(
  [
    ["202", s_empty_object],
    ["409", s_basic_error],
  ],
  undefined,
)

export type ActionsCancelWorkflowRun = (
  params: Params<t_ActionsCancelWorkflowRunParamSchema, void, void, void>,
  respond: ActionsCancelWorkflowRunResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<202, t_empty_object>
  | Response<409, t_basic_error>
>

const actionsReviewCustomGatesForRunResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsReviewCustomGatesForRunResponder =
  typeof actionsReviewCustomGatesForRunResponder & KoaRuntimeResponder

const actionsReviewCustomGatesForRunResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsReviewCustomGatesForRun = (
  params: Params<
    t_ActionsReviewCustomGatesForRunParamSchema,
    void,
    t_ActionsReviewCustomGatesForRunBodySchema,
    void
  >,
  respond: ActionsReviewCustomGatesForRunResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsForceCancelWorkflowRunResponder = {
  with202: r.with202<t_empty_object>,
  with409: r.with409<t_basic_error>,
  withStatus: r.withStatus,
}

type ActionsForceCancelWorkflowRunResponder =
  typeof actionsForceCancelWorkflowRunResponder & KoaRuntimeResponder

const actionsForceCancelWorkflowRunResponseValidator =
  responseValidationFactory(
    [
      ["202", s_empty_object],
      ["409", s_basic_error],
    ],
    undefined,
  )

export type ActionsForceCancelWorkflowRun = (
  params: Params<t_ActionsForceCancelWorkflowRunParamSchema, void, void, void>,
  respond: ActionsForceCancelWorkflowRunResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<202, t_empty_object>
  | Response<409, t_basic_error>
>

const actionsListJobsForWorkflowRunResponder = {
  with200: r.with200<{
    jobs: t_job[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type ActionsListJobsForWorkflowRunResponder =
  typeof actionsListJobsForWorkflowRunResponder & KoaRuntimeResponder

const actionsListJobsForWorkflowRunResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({ total_count: z.coerce.number(), jobs: z.array(s_job) }),
      ],
    ],
    undefined,
  )

export type ActionsListJobsForWorkflowRun = (
  params: Params<
    t_ActionsListJobsForWorkflowRunParamSchema,
    t_ActionsListJobsForWorkflowRunQuerySchema,
    void,
    void
  >,
  respond: ActionsListJobsForWorkflowRunResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        jobs: t_job[]
        total_count: number
      }
    >
>

const actionsDownloadWorkflowRunLogsResponder = {
  with302: r.with302<void>,
  withStatus: r.withStatus,
}

type ActionsDownloadWorkflowRunLogsResponder =
  typeof actionsDownloadWorkflowRunLogsResponder & KoaRuntimeResponder

const actionsDownloadWorkflowRunLogsResponseValidator =
  responseValidationFactory([["302", z.undefined()]], undefined)

export type ActionsDownloadWorkflowRunLogs = (
  params: Params<t_ActionsDownloadWorkflowRunLogsParamSchema, void, void, void>,
  respond: ActionsDownloadWorkflowRunLogsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<302, void>>

const actionsDeleteWorkflowRunLogsResponder = {
  with204: r.with204<void>,
  with403: r.with403<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type ActionsDeleteWorkflowRunLogsResponder =
  typeof actionsDeleteWorkflowRunLogsResponder & KoaRuntimeResponder

const actionsDeleteWorkflowRunLogsResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["403", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type ActionsDeleteWorkflowRunLogs = (
  params: Params<t_ActionsDeleteWorkflowRunLogsParamSchema, void, void, void>,
  respond: ActionsDeleteWorkflowRunLogsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<500, t_basic_error>
>

const actionsGetPendingDeploymentsForRunResponder = {
  with200: r.with200<t_pending_deployment[]>,
  withStatus: r.withStatus,
}

type ActionsGetPendingDeploymentsForRunResponder =
  typeof actionsGetPendingDeploymentsForRunResponder & KoaRuntimeResponder

const actionsGetPendingDeploymentsForRunResponseValidator =
  responseValidationFactory([["200", z.array(s_pending_deployment)]], undefined)

export type ActionsGetPendingDeploymentsForRun = (
  params: Params<
    t_ActionsGetPendingDeploymentsForRunParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsGetPendingDeploymentsForRunResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_pending_deployment[]>
>

const actionsReviewPendingDeploymentsForRunResponder = {
  with200: r.with200<t_deployment[]>,
  withStatus: r.withStatus,
}

type ActionsReviewPendingDeploymentsForRunResponder =
  typeof actionsReviewPendingDeploymentsForRunResponder & KoaRuntimeResponder

const actionsReviewPendingDeploymentsForRunResponseValidator =
  responseValidationFactory([["200", z.array(s_deployment)]], undefined)

export type ActionsReviewPendingDeploymentsForRun = (
  params: Params<
    t_ActionsReviewPendingDeploymentsForRunParamSchema,
    void,
    t_ActionsReviewPendingDeploymentsForRunBodySchema,
    void
  >,
  respond: ActionsReviewPendingDeploymentsForRunResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_deployment[]>>

const actionsReRunWorkflowResponder = {
  with201: r.with201<t_empty_object>,
  withStatus: r.withStatus,
}

type ActionsReRunWorkflowResponder = typeof actionsReRunWorkflowResponder &
  KoaRuntimeResponder

const actionsReRunWorkflowResponseValidator = responseValidationFactory(
  [["201", s_empty_object]],
  undefined,
)

export type ActionsReRunWorkflow = (
  params: Params<
    t_ActionsReRunWorkflowParamSchema,
    void,
    t_ActionsReRunWorkflowBodySchema | undefined,
    void
  >,
  respond: ActionsReRunWorkflowResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_empty_object>>

const actionsReRunWorkflowFailedJobsResponder = {
  with201: r.with201<t_empty_object>,
  withStatus: r.withStatus,
}

type ActionsReRunWorkflowFailedJobsResponder =
  typeof actionsReRunWorkflowFailedJobsResponder & KoaRuntimeResponder

const actionsReRunWorkflowFailedJobsResponseValidator =
  responseValidationFactory([["201", s_empty_object]], undefined)

export type ActionsReRunWorkflowFailedJobs = (
  params: Params<
    t_ActionsReRunWorkflowFailedJobsParamSchema,
    void,
    t_ActionsReRunWorkflowFailedJobsBodySchema | undefined,
    void
  >,
  respond: ActionsReRunWorkflowFailedJobsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_empty_object>>

const actionsGetWorkflowRunUsageResponder = {
  with200: r.with200<t_workflow_run_usage>,
  withStatus: r.withStatus,
}

type ActionsGetWorkflowRunUsageResponder =
  typeof actionsGetWorkflowRunUsageResponder & KoaRuntimeResponder

const actionsGetWorkflowRunUsageResponseValidator = responseValidationFactory(
  [["200", s_workflow_run_usage]],
  undefined,
)

export type ActionsGetWorkflowRunUsage = (
  params: Params<t_ActionsGetWorkflowRunUsageParamSchema, void, void, void>,
  respond: ActionsGetWorkflowRunUsageResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_workflow_run_usage>>

const actionsListRepoSecretsResponder = {
  with200: r.with200<{
    secrets: t_actions_secret[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type ActionsListRepoSecretsResponder = typeof actionsListRepoSecretsResponder &
  KoaRuntimeResponder

const actionsListRepoSecretsResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number(),
        secrets: z.array(s_actions_secret),
      }),
    ],
  ],
  undefined,
)

export type ActionsListRepoSecrets = (
  params: Params<
    t_ActionsListRepoSecretsParamSchema,
    t_ActionsListRepoSecretsQuerySchema,
    void,
    void
  >,
  respond: ActionsListRepoSecretsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        secrets: t_actions_secret[]
        total_count: number
      }
    >
>

const actionsGetRepoPublicKeyResponder = {
  with200: r.with200<t_actions_public_key>,
  withStatus: r.withStatus,
}

type ActionsGetRepoPublicKeyResponder =
  typeof actionsGetRepoPublicKeyResponder & KoaRuntimeResponder

const actionsGetRepoPublicKeyResponseValidator = responseValidationFactory(
  [["200", s_actions_public_key]],
  undefined,
)

export type ActionsGetRepoPublicKey = (
  params: Params<t_ActionsGetRepoPublicKeyParamSchema, void, void, void>,
  respond: ActionsGetRepoPublicKeyResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_actions_public_key>>

const actionsGetRepoSecretResponder = {
  with200: r.with200<t_actions_secret>,
  withStatus: r.withStatus,
}

type ActionsGetRepoSecretResponder = typeof actionsGetRepoSecretResponder &
  KoaRuntimeResponder

const actionsGetRepoSecretResponseValidator = responseValidationFactory(
  [["200", s_actions_secret]],
  undefined,
)

export type ActionsGetRepoSecret = (
  params: Params<t_ActionsGetRepoSecretParamSchema, void, void, void>,
  respond: ActionsGetRepoSecretResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_actions_secret>>

const actionsCreateOrUpdateRepoSecretResponder = {
  with201: r.with201<t_empty_object>,
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsCreateOrUpdateRepoSecretResponder =
  typeof actionsCreateOrUpdateRepoSecretResponder & KoaRuntimeResponder

const actionsCreateOrUpdateRepoSecretResponseValidator =
  responseValidationFactory(
    [
      ["201", s_empty_object],
      ["204", z.undefined()],
    ],
    undefined,
  )

export type ActionsCreateOrUpdateRepoSecret = (
  params: Params<
    t_ActionsCreateOrUpdateRepoSecretParamSchema,
    void,
    t_ActionsCreateOrUpdateRepoSecretBodySchema,
    void
  >,
  respond: ActionsCreateOrUpdateRepoSecretResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<204, void>
>

const actionsDeleteRepoSecretResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsDeleteRepoSecretResponder =
  typeof actionsDeleteRepoSecretResponder & KoaRuntimeResponder

const actionsDeleteRepoSecretResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type ActionsDeleteRepoSecret = (
  params: Params<t_ActionsDeleteRepoSecretParamSchema, void, void, void>,
  respond: ActionsDeleteRepoSecretResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsListRepoVariablesResponder = {
  with200: r.with200<{
    total_count: number
    variables: t_actions_variable[]
  }>,
  withStatus: r.withStatus,
}

type ActionsListRepoVariablesResponder =
  typeof actionsListRepoVariablesResponder & KoaRuntimeResponder

const actionsListRepoVariablesResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number(),
        variables: z.array(s_actions_variable),
      }),
    ],
  ],
  undefined,
)

export type ActionsListRepoVariables = (
  params: Params<
    t_ActionsListRepoVariablesParamSchema,
    t_ActionsListRepoVariablesQuerySchema,
    void,
    void
  >,
  respond: ActionsListRepoVariablesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        total_count: number
        variables: t_actions_variable[]
      }
    >
>

const actionsCreateRepoVariableResponder = {
  with201: r.with201<t_empty_object>,
  withStatus: r.withStatus,
}

type ActionsCreateRepoVariableResponder =
  typeof actionsCreateRepoVariableResponder & KoaRuntimeResponder

const actionsCreateRepoVariableResponseValidator = responseValidationFactory(
  [["201", s_empty_object]],
  undefined,
)

export type ActionsCreateRepoVariable = (
  params: Params<
    t_ActionsCreateRepoVariableParamSchema,
    void,
    t_ActionsCreateRepoVariableBodySchema,
    void
  >,
  respond: ActionsCreateRepoVariableResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_empty_object>>

const actionsGetRepoVariableResponder = {
  with200: r.with200<t_actions_variable>,
  withStatus: r.withStatus,
}

type ActionsGetRepoVariableResponder = typeof actionsGetRepoVariableResponder &
  KoaRuntimeResponder

const actionsGetRepoVariableResponseValidator = responseValidationFactory(
  [["200", s_actions_variable]],
  undefined,
)

export type ActionsGetRepoVariable = (
  params: Params<t_ActionsGetRepoVariableParamSchema, void, void, void>,
  respond: ActionsGetRepoVariableResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_actions_variable>>

const actionsUpdateRepoVariableResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsUpdateRepoVariableResponder =
  typeof actionsUpdateRepoVariableResponder & KoaRuntimeResponder

const actionsUpdateRepoVariableResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type ActionsUpdateRepoVariable = (
  params: Params<
    t_ActionsUpdateRepoVariableParamSchema,
    void,
    t_ActionsUpdateRepoVariableBodySchema,
    void
  >,
  respond: ActionsUpdateRepoVariableResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsDeleteRepoVariableResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsDeleteRepoVariableResponder =
  typeof actionsDeleteRepoVariableResponder & KoaRuntimeResponder

const actionsDeleteRepoVariableResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type ActionsDeleteRepoVariable = (
  params: Params<t_ActionsDeleteRepoVariableParamSchema, void, void, void>,
  respond: ActionsDeleteRepoVariableResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsListRepoWorkflowsResponder = {
  with200: r.with200<{
    total_count: number
    workflows: t_workflow[]
  }>,
  withStatus: r.withStatus,
}

type ActionsListRepoWorkflowsResponder =
  typeof actionsListRepoWorkflowsResponder & KoaRuntimeResponder

const actionsListRepoWorkflowsResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number(),
        workflows: z.array(s_workflow),
      }),
    ],
  ],
  undefined,
)

export type ActionsListRepoWorkflows = (
  params: Params<
    t_ActionsListRepoWorkflowsParamSchema,
    t_ActionsListRepoWorkflowsQuerySchema,
    void,
    void
  >,
  respond: ActionsListRepoWorkflowsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        total_count: number
        workflows: t_workflow[]
      }
    >
>

const actionsGetWorkflowResponder = {
  with200: r.with200<t_workflow>,
  withStatus: r.withStatus,
}

type ActionsGetWorkflowResponder = typeof actionsGetWorkflowResponder &
  KoaRuntimeResponder

const actionsGetWorkflowResponseValidator = responseValidationFactory(
  [["200", s_workflow]],
  undefined,
)

export type ActionsGetWorkflow = (
  params: Params<t_ActionsGetWorkflowParamSchema, void, void, void>,
  respond: ActionsGetWorkflowResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_workflow>>

const actionsDisableWorkflowResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsDisableWorkflowResponder = typeof actionsDisableWorkflowResponder &
  KoaRuntimeResponder

const actionsDisableWorkflowResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type ActionsDisableWorkflow = (
  params: Params<t_ActionsDisableWorkflowParamSchema, void, void, void>,
  respond: ActionsDisableWorkflowResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsCreateWorkflowDispatchResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsCreateWorkflowDispatchResponder =
  typeof actionsCreateWorkflowDispatchResponder & KoaRuntimeResponder

const actionsCreateWorkflowDispatchResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsCreateWorkflowDispatch = (
  params: Params<
    t_ActionsCreateWorkflowDispatchParamSchema,
    void,
    t_ActionsCreateWorkflowDispatchBodySchema,
    void
  >,
  respond: ActionsCreateWorkflowDispatchResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsEnableWorkflowResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsEnableWorkflowResponder = typeof actionsEnableWorkflowResponder &
  KoaRuntimeResponder

const actionsEnableWorkflowResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type ActionsEnableWorkflow = (
  params: Params<t_ActionsEnableWorkflowParamSchema, void, void, void>,
  respond: ActionsEnableWorkflowResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsListWorkflowRunsResponder = {
  with200: r.with200<{
    total_count: number
    workflow_runs: t_workflow_run[]
  }>,
  withStatus: r.withStatus,
}

type ActionsListWorkflowRunsResponder =
  typeof actionsListWorkflowRunsResponder & KoaRuntimeResponder

const actionsListWorkflowRunsResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number(),
        workflow_runs: z.array(s_workflow_run),
      }),
    ],
  ],
  undefined,
)

export type ActionsListWorkflowRuns = (
  params: Params<
    t_ActionsListWorkflowRunsParamSchema,
    t_ActionsListWorkflowRunsQuerySchema,
    void,
    void
  >,
  respond: ActionsListWorkflowRunsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        total_count: number
        workflow_runs: t_workflow_run[]
      }
    >
>

const actionsGetWorkflowUsageResponder = {
  with200: r.with200<t_workflow_usage>,
  withStatus: r.withStatus,
}

type ActionsGetWorkflowUsageResponder =
  typeof actionsGetWorkflowUsageResponder & KoaRuntimeResponder

const actionsGetWorkflowUsageResponseValidator = responseValidationFactory(
  [["200", s_workflow_usage]],
  undefined,
)

export type ActionsGetWorkflowUsage = (
  params: Params<t_ActionsGetWorkflowUsageParamSchema, void, void, void>,
  respond: ActionsGetWorkflowUsageResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_workflow_usage>>

const reposListActivitiesResponder = {
  with200: r.with200<t_activity[]>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type ReposListActivitiesResponder = typeof reposListActivitiesResponder &
  KoaRuntimeResponder

const reposListActivitiesResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_activity)],
    ["422", s_validation_error_simple],
  ],
  undefined,
)

export type ReposListActivities = (
  params: Params<
    t_ReposListActivitiesParamSchema,
    t_ReposListActivitiesQuerySchema,
    void,
    void
  >,
  respond: ReposListActivitiesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_activity[]>
  | Response<422, t_validation_error_simple>
>

const issuesListAssigneesResponder = {
  with200: r.with200<t_simple_user[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type IssuesListAssigneesResponder = typeof issuesListAssigneesResponder &
  KoaRuntimeResponder

const issuesListAssigneesResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_simple_user)],
    ["404", s_basic_error],
  ],
  undefined,
)

export type IssuesListAssignees = (
  params: Params<
    t_IssuesListAssigneesParamSchema,
    t_IssuesListAssigneesQuerySchema,
    void,
    void
  >,
  respond: IssuesListAssigneesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[]>
  | Response<404, t_basic_error>
>

const issuesCheckUserCanBeAssignedResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type IssuesCheckUserCanBeAssignedResponder =
  typeof issuesCheckUserCanBeAssignedResponder & KoaRuntimeResponder

const issuesCheckUserCanBeAssignedResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
  ],
  undefined,
)

export type IssuesCheckUserCanBeAssigned = (
  params: Params<t_IssuesCheckUserCanBeAssignedParamSchema, void, void, void>,
  respond: IssuesCheckUserCanBeAssignedResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

const reposCreateAttestationResponder = {
  with201: r.with201<{
    id?: number
  }>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposCreateAttestationResponder = typeof reposCreateAttestationResponder &
  KoaRuntimeResponder

const reposCreateAttestationResponseValidator = responseValidationFactory(
  [
    ["201", z.object({ id: z.coerce.number().optional() })],
    ["403", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposCreateAttestation = (
  params: Params<
    t_ReposCreateAttestationParamSchema,
    void,
    t_ReposCreateAttestationBodySchema,
    void
  >,
  respond: ReposCreateAttestationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      201,
      {
        id?: number
      }
    >
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

const reposListAttestationsResponder = {
  with200: r.with200<{
    attestations?: {
      bundle?: {
        dsseEnvelope?: {
          [key: string]: unknown | undefined
        }
        mediaType?: string
        verificationMaterial?: {
          [key: string]: unknown | undefined
        }
      }
      bundle_url?: string
      repository_id?: number
    }[]
  }>,
  withStatus: r.withStatus,
}

type ReposListAttestationsResponder = typeof reposListAttestationsResponder &
  KoaRuntimeResponder

const reposListAttestationsResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        attestations: z
          .array(
            z.object({
              bundle: z
                .object({
                  mediaType: z.string().optional(),
                  verificationMaterial: z.record(z.unknown()).optional(),
                  dsseEnvelope: z.record(z.unknown()).optional(),
                })
                .optional(),
              repository_id: z.coerce.number().optional(),
              bundle_url: z.string().optional(),
            }),
          )
          .optional(),
      }),
    ],
  ],
  undefined,
)

export type ReposListAttestations = (
  params: Params<
    t_ReposListAttestationsParamSchema,
    t_ReposListAttestationsQuerySchema,
    void,
    void
  >,
  respond: ReposListAttestationsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        attestations?: {
          bundle?: {
            dsseEnvelope?: {
              [key: string]: unknown | undefined
            }
            mediaType?: string
            verificationMaterial?: {
              [key: string]: unknown | undefined
            }
          }
          bundle_url?: string
          repository_id?: number
        }[]
      }
    >
>

const reposListAutolinksResponder = {
  with200: r.with200<t_autolink[]>,
  withStatus: r.withStatus,
}

type ReposListAutolinksResponder = typeof reposListAutolinksResponder &
  KoaRuntimeResponder

const reposListAutolinksResponseValidator = responseValidationFactory(
  [["200", z.array(s_autolink)]],
  undefined,
)

export type ReposListAutolinks = (
  params: Params<t_ReposListAutolinksParamSchema, void, void, void>,
  respond: ReposListAutolinksResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_autolink[]>>

const reposCreateAutolinkResponder = {
  with201: r.with201<t_autolink>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposCreateAutolinkResponder = typeof reposCreateAutolinkResponder &
  KoaRuntimeResponder

const reposCreateAutolinkResponseValidator = responseValidationFactory(
  [
    ["201", s_autolink],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposCreateAutolink = (
  params: Params<
    t_ReposCreateAutolinkParamSchema,
    void,
    t_ReposCreateAutolinkBodySchema,
    void
  >,
  respond: ReposCreateAutolinkResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_autolink>
  | Response<422, t_validation_error>
>

const reposGetAutolinkResponder = {
  with200: r.with200<t_autolink>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetAutolinkResponder = typeof reposGetAutolinkResponder &
  KoaRuntimeResponder

const reposGetAutolinkResponseValidator = responseValidationFactory(
  [
    ["200", s_autolink],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposGetAutolink = (
  params: Params<t_ReposGetAutolinkParamSchema, void, void, void>,
  respond: ReposGetAutolinkResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_autolink>
  | Response<404, t_basic_error>
>

const reposDeleteAutolinkResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposDeleteAutolinkResponder = typeof reposDeleteAutolinkResponder &
  KoaRuntimeResponder

const reposDeleteAutolinkResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposDeleteAutolink = (
  params: Params<t_ReposDeleteAutolinkParamSchema, void, void, void>,
  respond: ReposDeleteAutolinkResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

const reposCheckAutomatedSecurityFixesResponder = {
  with200: r.with200<t_check_automated_security_fixes>,
  with404: r.with404<void>,
  withStatus: r.withStatus,
}

type ReposCheckAutomatedSecurityFixesResponder =
  typeof reposCheckAutomatedSecurityFixesResponder & KoaRuntimeResponder

const reposCheckAutomatedSecurityFixesResponseValidator =
  responseValidationFactory(
    [
      ["200", s_check_automated_security_fixes],
      ["404", z.undefined()],
    ],
    undefined,
  )

export type ReposCheckAutomatedSecurityFixes = (
  params: Params<
    t_ReposCheckAutomatedSecurityFixesParamSchema,
    void,
    void,
    void
  >,
  respond: ReposCheckAutomatedSecurityFixesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_check_automated_security_fixes>
  | Response<404, void>
>

const reposEnableAutomatedSecurityFixesResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ReposEnableAutomatedSecurityFixesResponder =
  typeof reposEnableAutomatedSecurityFixesResponder & KoaRuntimeResponder

const reposEnableAutomatedSecurityFixesResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ReposEnableAutomatedSecurityFixes = (
  params: Params<
    t_ReposEnableAutomatedSecurityFixesParamSchema,
    void,
    void,
    void
  >,
  respond: ReposEnableAutomatedSecurityFixesResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const reposDisableAutomatedSecurityFixesResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ReposDisableAutomatedSecurityFixesResponder =
  typeof reposDisableAutomatedSecurityFixesResponder & KoaRuntimeResponder

const reposDisableAutomatedSecurityFixesResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ReposDisableAutomatedSecurityFixes = (
  params: Params<
    t_ReposDisableAutomatedSecurityFixesParamSchema,
    void,
    void,
    void
  >,
  respond: ReposDisableAutomatedSecurityFixesResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const reposListBranchesResponder = {
  with200: r.with200<t_short_branch[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposListBranchesResponder = typeof reposListBranchesResponder &
  KoaRuntimeResponder

const reposListBranchesResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_short_branch)],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposListBranches = (
  params: Params<
    t_ReposListBranchesParamSchema,
    t_ReposListBranchesQuerySchema,
    void,
    void
  >,
  respond: ReposListBranchesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_short_branch[]>
  | Response<404, t_basic_error>
>

const reposGetBranchResponder = {
  with200: r.with200<t_branch_with_protection>,
  with301: r.with301<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetBranchResponder = typeof reposGetBranchResponder &
  KoaRuntimeResponder

const reposGetBranchResponseValidator = responseValidationFactory(
  [
    ["200", s_branch_with_protection],
    ["301", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposGetBranch = (
  params: Params<t_ReposGetBranchParamSchema, void, void, void>,
  respond: ReposGetBranchResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_branch_with_protection>
  | Response<301, t_basic_error>
  | Response<404, t_basic_error>
>

const reposGetBranchProtectionResponder = {
  with200: r.with200<t_branch_protection>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetBranchProtectionResponder =
  typeof reposGetBranchProtectionResponder & KoaRuntimeResponder

const reposGetBranchProtectionResponseValidator = responseValidationFactory(
  [
    ["200", s_branch_protection],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposGetBranchProtection = (
  params: Params<t_ReposGetBranchProtectionParamSchema, void, void, void>,
  respond: ReposGetBranchProtectionResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_branch_protection>
  | Response<404, t_basic_error>
>

const reposUpdateBranchProtectionResponder = {
  with200: r.with200<t_protected_branch>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type ReposUpdateBranchProtectionResponder =
  typeof reposUpdateBranchProtectionResponder & KoaRuntimeResponder

const reposUpdateBranchProtectionResponseValidator = responseValidationFactory(
  [
    ["200", s_protected_branch],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error_simple],
  ],
  undefined,
)

export type ReposUpdateBranchProtection = (
  params: Params<
    t_ReposUpdateBranchProtectionParamSchema,
    void,
    t_ReposUpdateBranchProtectionBodySchema,
    void
  >,
  respond: ReposUpdateBranchProtectionResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_protected_branch>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const reposDeleteBranchProtectionResponder = {
  with204: r.with204<void>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposDeleteBranchProtectionResponder =
  typeof reposDeleteBranchProtectionResponder & KoaRuntimeResponder

const reposDeleteBranchProtectionResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["403", s_basic_error],
  ],
  undefined,
)

export type ReposDeleteBranchProtection = (
  params: Params<t_ReposDeleteBranchProtectionParamSchema, void, void, void>,
  respond: ReposDeleteBranchProtectionResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
>

const reposGetAdminBranchProtectionResponder = {
  with200: r.with200<t_protected_branch_admin_enforced>,
  withStatus: r.withStatus,
}

type ReposGetAdminBranchProtectionResponder =
  typeof reposGetAdminBranchProtectionResponder & KoaRuntimeResponder

const reposGetAdminBranchProtectionResponseValidator =
  responseValidationFactory(
    [["200", s_protected_branch_admin_enforced]],
    undefined,
  )

export type ReposGetAdminBranchProtection = (
  params: Params<t_ReposGetAdminBranchProtectionParamSchema, void, void, void>,
  respond: ReposGetAdminBranchProtectionResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_protected_branch_admin_enforced>
>

const reposSetAdminBranchProtectionResponder = {
  with200: r.with200<t_protected_branch_admin_enforced>,
  withStatus: r.withStatus,
}

type ReposSetAdminBranchProtectionResponder =
  typeof reposSetAdminBranchProtectionResponder & KoaRuntimeResponder

const reposSetAdminBranchProtectionResponseValidator =
  responseValidationFactory(
    [["200", s_protected_branch_admin_enforced]],
    undefined,
  )

export type ReposSetAdminBranchProtection = (
  params: Params<t_ReposSetAdminBranchProtectionParamSchema, void, void, void>,
  respond: ReposSetAdminBranchProtectionResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_protected_branch_admin_enforced>
>

const reposDeleteAdminBranchProtectionResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposDeleteAdminBranchProtectionResponder =
  typeof reposDeleteAdminBranchProtectionResponder & KoaRuntimeResponder

const reposDeleteAdminBranchProtectionResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ReposDeleteAdminBranchProtection = (
  params: Params<
    t_ReposDeleteAdminBranchProtectionParamSchema,
    void,
    void,
    void
  >,
  respond: ReposDeleteAdminBranchProtectionResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

const reposGetPullRequestReviewProtectionResponder = {
  with200: r.with200<t_protected_branch_pull_request_review>,
  withStatus: r.withStatus,
}

type ReposGetPullRequestReviewProtectionResponder =
  typeof reposGetPullRequestReviewProtectionResponder & KoaRuntimeResponder

const reposGetPullRequestReviewProtectionResponseValidator =
  responseValidationFactory(
    [["200", s_protected_branch_pull_request_review]],
    undefined,
  )

export type ReposGetPullRequestReviewProtection = (
  params: Params<
    t_ReposGetPullRequestReviewProtectionParamSchema,
    void,
    void,
    void
  >,
  respond: ReposGetPullRequestReviewProtectionResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_protected_branch_pull_request_review>
>

const reposUpdatePullRequestReviewProtectionResponder = {
  with200: r.with200<t_protected_branch_pull_request_review>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposUpdatePullRequestReviewProtectionResponder =
  typeof reposUpdatePullRequestReviewProtectionResponder & KoaRuntimeResponder

const reposUpdatePullRequestReviewProtectionResponseValidator =
  responseValidationFactory(
    [
      ["200", s_protected_branch_pull_request_review],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type ReposUpdatePullRequestReviewProtection = (
  params: Params<
    t_ReposUpdatePullRequestReviewProtectionParamSchema,
    void,
    t_ReposUpdatePullRequestReviewProtectionBodySchema | undefined,
    void
  >,
  respond: ReposUpdatePullRequestReviewProtectionResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_protected_branch_pull_request_review>
  | Response<422, t_validation_error>
>

const reposDeletePullRequestReviewProtectionResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposDeletePullRequestReviewProtectionResponder =
  typeof reposDeletePullRequestReviewProtectionResponder & KoaRuntimeResponder

const reposDeletePullRequestReviewProtectionResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ReposDeletePullRequestReviewProtection = (
  params: Params<
    t_ReposDeletePullRequestReviewProtectionParamSchema,
    void,
    void,
    void
  >,
  respond: ReposDeletePullRequestReviewProtectionResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

const reposGetCommitSignatureProtectionResponder = {
  with200: r.with200<t_protected_branch_admin_enforced>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetCommitSignatureProtectionResponder =
  typeof reposGetCommitSignatureProtectionResponder & KoaRuntimeResponder

const reposGetCommitSignatureProtectionResponseValidator =
  responseValidationFactory(
    [
      ["200", s_protected_branch_admin_enforced],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ReposGetCommitSignatureProtection = (
  params: Params<
    t_ReposGetCommitSignatureProtectionParamSchema,
    void,
    void,
    void
  >,
  respond: ReposGetCommitSignatureProtectionResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_protected_branch_admin_enforced>
  | Response<404, t_basic_error>
>

const reposCreateCommitSignatureProtectionResponder = {
  with200: r.with200<t_protected_branch_admin_enforced>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposCreateCommitSignatureProtectionResponder =
  typeof reposCreateCommitSignatureProtectionResponder & KoaRuntimeResponder

const reposCreateCommitSignatureProtectionResponseValidator =
  responseValidationFactory(
    [
      ["200", s_protected_branch_admin_enforced],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ReposCreateCommitSignatureProtection = (
  params: Params<
    t_ReposCreateCommitSignatureProtectionParamSchema,
    void,
    void,
    void
  >,
  respond: ReposCreateCommitSignatureProtectionResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_protected_branch_admin_enforced>
  | Response<404, t_basic_error>
>

const reposDeleteCommitSignatureProtectionResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposDeleteCommitSignatureProtectionResponder =
  typeof reposDeleteCommitSignatureProtectionResponder & KoaRuntimeResponder

const reposDeleteCommitSignatureProtectionResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ReposDeleteCommitSignatureProtection = (
  params: Params<
    t_ReposDeleteCommitSignatureProtectionParamSchema,
    void,
    void,
    void
  >,
  respond: ReposDeleteCommitSignatureProtectionResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

const reposGetStatusChecksProtectionResponder = {
  with200: r.with200<t_status_check_policy>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetStatusChecksProtectionResponder =
  typeof reposGetStatusChecksProtectionResponder & KoaRuntimeResponder

const reposGetStatusChecksProtectionResponseValidator =
  responseValidationFactory(
    [
      ["200", s_status_check_policy],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ReposGetStatusChecksProtection = (
  params: Params<t_ReposGetStatusChecksProtectionParamSchema, void, void, void>,
  respond: ReposGetStatusChecksProtectionResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_status_check_policy>
  | Response<404, t_basic_error>
>

const reposUpdateStatusCheckProtectionResponder = {
  with200: r.with200<t_status_check_policy>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposUpdateStatusCheckProtectionResponder =
  typeof reposUpdateStatusCheckProtectionResponder & KoaRuntimeResponder

const reposUpdateStatusCheckProtectionResponseValidator =
  responseValidationFactory(
    [
      ["200", s_status_check_policy],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type ReposUpdateStatusCheckProtection = (
  params: Params<
    t_ReposUpdateStatusCheckProtectionParamSchema,
    void,
    t_ReposUpdateStatusCheckProtectionBodySchema | undefined,
    void
  >,
  respond: ReposUpdateStatusCheckProtectionResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_status_check_policy>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const reposRemoveStatusCheckProtectionResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ReposRemoveStatusCheckProtectionResponder =
  typeof reposRemoveStatusCheckProtectionResponder & KoaRuntimeResponder

const reposRemoveStatusCheckProtectionResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ReposRemoveStatusCheckProtection = (
  params: Params<
    t_ReposRemoveStatusCheckProtectionParamSchema,
    void,
    void,
    void
  >,
  respond: ReposRemoveStatusCheckProtectionResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const reposGetAllStatusCheckContextsResponder = {
  with200: r.with200<string[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetAllStatusCheckContextsResponder =
  typeof reposGetAllStatusCheckContextsResponder & KoaRuntimeResponder

const reposGetAllStatusCheckContextsResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(z.string())],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ReposGetAllStatusCheckContexts = (
  params: Params<t_ReposGetAllStatusCheckContextsParamSchema, void, void, void>,
  respond: ReposGetAllStatusCheckContextsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, string[]>
  | Response<404, t_basic_error>
>

const reposAddStatusCheckContextsResponder = {
  with200: r.with200<string[]>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposAddStatusCheckContextsResponder =
  typeof reposAddStatusCheckContextsResponder & KoaRuntimeResponder

const reposAddStatusCheckContextsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(z.string())],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposAddStatusCheckContexts = (
  params: Params<
    t_ReposAddStatusCheckContextsParamSchema,
    void,
    t_ReposAddStatusCheckContextsBodySchema | undefined,
    void
  >,
  respond: ReposAddStatusCheckContextsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, string[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const reposSetStatusCheckContextsResponder = {
  with200: r.with200<string[]>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposSetStatusCheckContextsResponder =
  typeof reposSetStatusCheckContextsResponder & KoaRuntimeResponder

const reposSetStatusCheckContextsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(z.string())],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposSetStatusCheckContexts = (
  params: Params<
    t_ReposSetStatusCheckContextsParamSchema,
    void,
    t_ReposSetStatusCheckContextsBodySchema | undefined,
    void
  >,
  respond: ReposSetStatusCheckContextsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, string[]>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const reposRemoveStatusCheckContextsResponder = {
  with200: r.with200<string[]>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposRemoveStatusCheckContextsResponder =
  typeof reposRemoveStatusCheckContextsResponder & KoaRuntimeResponder

const reposRemoveStatusCheckContextsResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(z.string())],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type ReposRemoveStatusCheckContexts = (
  params: Params<
    t_ReposRemoveStatusCheckContextsParamSchema,
    void,
    t_ReposRemoveStatusCheckContextsBodySchema,
    void
  >,
  respond: ReposRemoveStatusCheckContextsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, string[]>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const reposGetAccessRestrictionsResponder = {
  with200: r.with200<t_branch_restriction_policy>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetAccessRestrictionsResponder =
  typeof reposGetAccessRestrictionsResponder & KoaRuntimeResponder

const reposGetAccessRestrictionsResponseValidator = responseValidationFactory(
  [
    ["200", s_branch_restriction_policy],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposGetAccessRestrictions = (
  params: Params<t_ReposGetAccessRestrictionsParamSchema, void, void, void>,
  respond: ReposGetAccessRestrictionsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_branch_restriction_policy>
  | Response<404, t_basic_error>
>

const reposDeleteAccessRestrictionsResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ReposDeleteAccessRestrictionsResponder =
  typeof reposDeleteAccessRestrictionsResponder & KoaRuntimeResponder

const reposDeleteAccessRestrictionsResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ReposDeleteAccessRestrictions = (
  params: Params<t_ReposDeleteAccessRestrictionsParamSchema, void, void, void>,
  respond: ReposDeleteAccessRestrictionsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const reposGetAppsWithAccessToProtectedBranchResponder = {
  with200: r.with200<t_integration[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetAppsWithAccessToProtectedBranchResponder =
  typeof reposGetAppsWithAccessToProtectedBranchResponder & KoaRuntimeResponder

const reposGetAppsWithAccessToProtectedBranchResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_integration)],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ReposGetAppsWithAccessToProtectedBranch = (
  params: Params<
    t_ReposGetAppsWithAccessToProtectedBranchParamSchema,
    void,
    void,
    void
  >,
  respond: ReposGetAppsWithAccessToProtectedBranchResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_integration[]>
  | Response<404, t_basic_error>
>

const reposAddAppAccessRestrictionsResponder = {
  with200: r.with200<t_integration[]>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposAddAppAccessRestrictionsResponder =
  typeof reposAddAppAccessRestrictionsResponder & KoaRuntimeResponder

const reposAddAppAccessRestrictionsResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_integration)],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type ReposAddAppAccessRestrictions = (
  params: Params<
    t_ReposAddAppAccessRestrictionsParamSchema,
    void,
    t_ReposAddAppAccessRestrictionsBodySchema,
    void
  >,
  respond: ReposAddAppAccessRestrictionsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_integration[]>
  | Response<422, t_validation_error>
>

const reposSetAppAccessRestrictionsResponder = {
  with200: r.with200<t_integration[]>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposSetAppAccessRestrictionsResponder =
  typeof reposSetAppAccessRestrictionsResponder & KoaRuntimeResponder

const reposSetAppAccessRestrictionsResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_integration)],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type ReposSetAppAccessRestrictions = (
  params: Params<
    t_ReposSetAppAccessRestrictionsParamSchema,
    void,
    t_ReposSetAppAccessRestrictionsBodySchema,
    void
  >,
  respond: ReposSetAppAccessRestrictionsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_integration[]>
  | Response<422, t_validation_error>
>

const reposRemoveAppAccessRestrictionsResponder = {
  with200: r.with200<t_integration[]>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposRemoveAppAccessRestrictionsResponder =
  typeof reposRemoveAppAccessRestrictionsResponder & KoaRuntimeResponder

const reposRemoveAppAccessRestrictionsResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_integration)],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type ReposRemoveAppAccessRestrictions = (
  params: Params<
    t_ReposRemoveAppAccessRestrictionsParamSchema,
    void,
    t_ReposRemoveAppAccessRestrictionsBodySchema,
    void
  >,
  respond: ReposRemoveAppAccessRestrictionsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_integration[]>
  | Response<422, t_validation_error>
>

const reposGetTeamsWithAccessToProtectedBranchResponder = {
  with200: r.with200<t_team[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetTeamsWithAccessToProtectedBranchResponder =
  typeof reposGetTeamsWithAccessToProtectedBranchResponder & KoaRuntimeResponder

const reposGetTeamsWithAccessToProtectedBranchResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_team)],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ReposGetTeamsWithAccessToProtectedBranch = (
  params: Params<
    t_ReposGetTeamsWithAccessToProtectedBranchParamSchema,
    void,
    void,
    void
  >,
  respond: ReposGetTeamsWithAccessToProtectedBranchResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team[]>
  | Response<404, t_basic_error>
>

const reposAddTeamAccessRestrictionsResponder = {
  with200: r.with200<t_team[]>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposAddTeamAccessRestrictionsResponder =
  typeof reposAddTeamAccessRestrictionsResponder & KoaRuntimeResponder

const reposAddTeamAccessRestrictionsResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_team)],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type ReposAddTeamAccessRestrictions = (
  params: Params<
    t_ReposAddTeamAccessRestrictionsParamSchema,
    void,
    t_ReposAddTeamAccessRestrictionsBodySchema | undefined,
    void
  >,
  respond: ReposAddTeamAccessRestrictionsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team[]>
  | Response<422, t_validation_error>
>

const reposSetTeamAccessRestrictionsResponder = {
  with200: r.with200<t_team[]>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposSetTeamAccessRestrictionsResponder =
  typeof reposSetTeamAccessRestrictionsResponder & KoaRuntimeResponder

const reposSetTeamAccessRestrictionsResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_team)],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type ReposSetTeamAccessRestrictions = (
  params: Params<
    t_ReposSetTeamAccessRestrictionsParamSchema,
    void,
    t_ReposSetTeamAccessRestrictionsBodySchema | undefined,
    void
  >,
  respond: ReposSetTeamAccessRestrictionsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team[]>
  | Response<422, t_validation_error>
>

const reposRemoveTeamAccessRestrictionsResponder = {
  with200: r.with200<t_team[]>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposRemoveTeamAccessRestrictionsResponder =
  typeof reposRemoveTeamAccessRestrictionsResponder & KoaRuntimeResponder

const reposRemoveTeamAccessRestrictionsResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_team)],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type ReposRemoveTeamAccessRestrictions = (
  params: Params<
    t_ReposRemoveTeamAccessRestrictionsParamSchema,
    void,
    t_ReposRemoveTeamAccessRestrictionsBodySchema,
    void
  >,
  respond: ReposRemoveTeamAccessRestrictionsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team[]>
  | Response<422, t_validation_error>
>

const reposGetUsersWithAccessToProtectedBranchResponder = {
  with200: r.with200<t_simple_user[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetUsersWithAccessToProtectedBranchResponder =
  typeof reposGetUsersWithAccessToProtectedBranchResponder & KoaRuntimeResponder

const reposGetUsersWithAccessToProtectedBranchResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_simple_user)],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ReposGetUsersWithAccessToProtectedBranch = (
  params: Params<
    t_ReposGetUsersWithAccessToProtectedBranchParamSchema,
    void,
    void,
    void
  >,
  respond: ReposGetUsersWithAccessToProtectedBranchResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[]>
  | Response<404, t_basic_error>
>

const reposAddUserAccessRestrictionsResponder = {
  with200: r.with200<t_simple_user[]>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposAddUserAccessRestrictionsResponder =
  typeof reposAddUserAccessRestrictionsResponder & KoaRuntimeResponder

const reposAddUserAccessRestrictionsResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_simple_user)],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type ReposAddUserAccessRestrictions = (
  params: Params<
    t_ReposAddUserAccessRestrictionsParamSchema,
    void,
    t_ReposAddUserAccessRestrictionsBodySchema,
    void
  >,
  respond: ReposAddUserAccessRestrictionsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[]>
  | Response<422, t_validation_error>
>

const reposSetUserAccessRestrictionsResponder = {
  with200: r.with200<t_simple_user[]>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposSetUserAccessRestrictionsResponder =
  typeof reposSetUserAccessRestrictionsResponder & KoaRuntimeResponder

const reposSetUserAccessRestrictionsResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_simple_user)],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type ReposSetUserAccessRestrictions = (
  params: Params<
    t_ReposSetUserAccessRestrictionsParamSchema,
    void,
    t_ReposSetUserAccessRestrictionsBodySchema,
    void
  >,
  respond: ReposSetUserAccessRestrictionsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[]>
  | Response<422, t_validation_error>
>

const reposRemoveUserAccessRestrictionsResponder = {
  with200: r.with200<t_simple_user[]>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposRemoveUserAccessRestrictionsResponder =
  typeof reposRemoveUserAccessRestrictionsResponder & KoaRuntimeResponder

const reposRemoveUserAccessRestrictionsResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_simple_user)],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type ReposRemoveUserAccessRestrictions = (
  params: Params<
    t_ReposRemoveUserAccessRestrictionsParamSchema,
    void,
    t_ReposRemoveUserAccessRestrictionsBodySchema,
    void
  >,
  respond: ReposRemoveUserAccessRestrictionsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[]>
  | Response<422, t_validation_error>
>

const reposRenameBranchResponder = {
  with201: r.with201<t_branch_with_protection>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposRenameBranchResponder = typeof reposRenameBranchResponder &
  KoaRuntimeResponder

const reposRenameBranchResponseValidator = responseValidationFactory(
  [
    ["201", s_branch_with_protection],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposRenameBranch = (
  params: Params<
    t_ReposRenameBranchParamSchema,
    void,
    t_ReposRenameBranchBodySchema,
    void
  >,
  respond: ReposRenameBranchResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_branch_with_protection>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const checksCreateResponder = {
  with201: r.with201<t_check_run>,
  withStatus: r.withStatus,
}

type ChecksCreateResponder = typeof checksCreateResponder & KoaRuntimeResponder

const checksCreateResponseValidator = responseValidationFactory(
  [["201", s_check_run]],
  undefined,
)

export type ChecksCreate = (
  params: Params<
    t_ChecksCreateParamSchema,
    void,
    t_ChecksCreateBodySchema,
    void
  >,
  respond: ChecksCreateResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_check_run>>

const checksGetResponder = {
  with200: r.with200<t_check_run>,
  withStatus: r.withStatus,
}

type ChecksGetResponder = typeof checksGetResponder & KoaRuntimeResponder

const checksGetResponseValidator = responseValidationFactory(
  [["200", s_check_run]],
  undefined,
)

export type ChecksGet = (
  params: Params<t_ChecksGetParamSchema, void, void, void>,
  respond: ChecksGetResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_check_run>>

const checksUpdateResponder = {
  with200: r.with200<t_check_run>,
  withStatus: r.withStatus,
}

type ChecksUpdateResponder = typeof checksUpdateResponder & KoaRuntimeResponder

const checksUpdateResponseValidator = responseValidationFactory(
  [["200", s_check_run]],
  undefined,
)

export type ChecksUpdate = (
  params: Params<
    t_ChecksUpdateParamSchema,
    void,
    t_ChecksUpdateBodySchema,
    void
  >,
  respond: ChecksUpdateResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_check_run>>

const checksListAnnotationsResponder = {
  with200: r.with200<t_check_annotation[]>,
  withStatus: r.withStatus,
}

type ChecksListAnnotationsResponder = typeof checksListAnnotationsResponder &
  KoaRuntimeResponder

const checksListAnnotationsResponseValidator = responseValidationFactory(
  [["200", z.array(s_check_annotation)]],
  undefined,
)

export type ChecksListAnnotations = (
  params: Params<
    t_ChecksListAnnotationsParamSchema,
    t_ChecksListAnnotationsQuerySchema,
    void,
    void
  >,
  respond: ChecksListAnnotationsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_check_annotation[]>>

const checksRerequestRunResponder = {
  with201: r.with201<t_empty_object>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_basic_error>,
  withStatus: r.withStatus,
}

type ChecksRerequestRunResponder = typeof checksRerequestRunResponder &
  KoaRuntimeResponder

const checksRerequestRunResponseValidator = responseValidationFactory(
  [
    ["201", s_empty_object],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_basic_error],
  ],
  undefined,
)

export type ChecksRerequestRun = (
  params: Params<t_ChecksRerequestRunParamSchema, void, void, void>,
  respond: ChecksRerequestRunResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_basic_error>
>

const checksCreateSuiteResponder = {
  with200: r.with200<t_check_suite>,
  with201: r.with201<t_check_suite>,
  withStatus: r.withStatus,
}

type ChecksCreateSuiteResponder = typeof checksCreateSuiteResponder &
  KoaRuntimeResponder

const checksCreateSuiteResponseValidator = responseValidationFactory(
  [
    ["200", s_check_suite],
    ["201", s_check_suite],
  ],
  undefined,
)

export type ChecksCreateSuite = (
  params: Params<
    t_ChecksCreateSuiteParamSchema,
    void,
    t_ChecksCreateSuiteBodySchema,
    void
  >,
  respond: ChecksCreateSuiteResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_check_suite>
  | Response<201, t_check_suite>
>

const checksSetSuitesPreferencesResponder = {
  with200: r.with200<t_check_suite_preference>,
  withStatus: r.withStatus,
}

type ChecksSetSuitesPreferencesResponder =
  typeof checksSetSuitesPreferencesResponder & KoaRuntimeResponder

const checksSetSuitesPreferencesResponseValidator = responseValidationFactory(
  [["200", s_check_suite_preference]],
  undefined,
)

export type ChecksSetSuitesPreferences = (
  params: Params<
    t_ChecksSetSuitesPreferencesParamSchema,
    void,
    t_ChecksSetSuitesPreferencesBodySchema,
    void
  >,
  respond: ChecksSetSuitesPreferencesResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_check_suite_preference>
>

const checksGetSuiteResponder = {
  with200: r.with200<t_check_suite>,
  withStatus: r.withStatus,
}

type ChecksGetSuiteResponder = typeof checksGetSuiteResponder &
  KoaRuntimeResponder

const checksGetSuiteResponseValidator = responseValidationFactory(
  [["200", s_check_suite]],
  undefined,
)

export type ChecksGetSuite = (
  params: Params<t_ChecksGetSuiteParamSchema, void, void, void>,
  respond: ChecksGetSuiteResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_check_suite>>

const checksListForSuiteResponder = {
  with200: r.with200<{
    check_runs: t_check_run[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type ChecksListForSuiteResponder = typeof checksListForSuiteResponder &
  KoaRuntimeResponder

const checksListForSuiteResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number(),
        check_runs: z.array(s_check_run),
      }),
    ],
  ],
  undefined,
)

export type ChecksListForSuite = (
  params: Params<
    t_ChecksListForSuiteParamSchema,
    t_ChecksListForSuiteQuerySchema,
    void,
    void
  >,
  respond: ChecksListForSuiteResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        check_runs: t_check_run[]
        total_count: number
      }
    >
>

const checksRerequestSuiteResponder = {
  with201: r.with201<t_empty_object>,
  withStatus: r.withStatus,
}

type ChecksRerequestSuiteResponder = typeof checksRerequestSuiteResponder &
  KoaRuntimeResponder

const checksRerequestSuiteResponseValidator = responseValidationFactory(
  [["201", s_empty_object]],
  undefined,
)

export type ChecksRerequestSuite = (
  params: Params<t_ChecksRerequestSuiteParamSchema, void, void, void>,
  respond: ChecksRerequestSuiteResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_empty_object>>

const codeScanningListAlertsForRepoResponder = {
  with200: r.with200<t_code_scanning_alert_items[]>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodeScanningListAlertsForRepoResponder =
  typeof codeScanningListAlertsForRepoResponder & KoaRuntimeResponder

const codeScanningListAlertsForRepoResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_code_scanning_alert_items)],
      ["304", z.undefined()],
      ["403", s_basic_error],
      ["404", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

export type CodeScanningListAlertsForRepo = (
  params: Params<
    t_CodeScanningListAlertsForRepoParamSchema,
    t_CodeScanningListAlertsForRepoQuerySchema,
    void,
    void
  >,
  respond: CodeScanningListAlertsForRepoResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_alert_items[]>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codeScanningGetAlertResponder = {
  with200: r.with200<t_code_scanning_alert>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodeScanningGetAlertResponder = typeof codeScanningGetAlertResponder &
  KoaRuntimeResponder

const codeScanningGetAlertResponseValidator = responseValidationFactory(
  [
    ["200", s_code_scanning_alert],
    ["304", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type CodeScanningGetAlert = (
  params: Params<t_CodeScanningGetAlertParamSchema, void, void, void>,
  respond: CodeScanningGetAlertResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_alert>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codeScanningUpdateAlertResponder = {
  with200: r.with200<t_code_scanning_alert>,
  with400: r.with400<t_scim_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodeScanningUpdateAlertResponder =
  typeof codeScanningUpdateAlertResponder & KoaRuntimeResponder

const codeScanningUpdateAlertResponseValidator = responseValidationFactory(
  [
    ["200", s_code_scanning_alert],
    ["400", s_scim_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type CodeScanningUpdateAlert = (
  params: Params<
    t_CodeScanningUpdateAlertParamSchema,
    void,
    t_CodeScanningUpdateAlertBodySchema,
    void
  >,
  respond: CodeScanningUpdateAlertResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_alert>
  | Response<400, t_scim_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codeScanningGetAutofixResponder = {
  with200: r.with200<t_code_scanning_autofix>,
  with400: r.with400<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodeScanningGetAutofixResponder = typeof codeScanningGetAutofixResponder &
  KoaRuntimeResponder

const codeScanningGetAutofixResponseValidator = responseValidationFactory(
  [
    ["200", s_code_scanning_autofix],
    ["400", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type CodeScanningGetAutofix = (
  params: Params<t_CodeScanningGetAutofixParamSchema, void, void, void>,
  respond: CodeScanningGetAutofixResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_autofix>
  | Response<400, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codeScanningCreateAutofixResponder = {
  with200: r.with200<t_code_scanning_autofix>,
  with202: r.with202<t_code_scanning_autofix>,
  with400: r.with400<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<void>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodeScanningCreateAutofixResponder =
  typeof codeScanningCreateAutofixResponder & KoaRuntimeResponder

const codeScanningCreateAutofixResponseValidator = responseValidationFactory(
  [
    ["200", s_code_scanning_autofix],
    ["202", s_code_scanning_autofix],
    ["400", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", z.undefined()],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type CodeScanningCreateAutofix = (
  params: Params<t_CodeScanningCreateAutofixParamSchema, void, void, void>,
  respond: CodeScanningCreateAutofixResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_autofix>
  | Response<202, t_code_scanning_autofix>
  | Response<400, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, void>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codeScanningCommitAutofixResponder = {
  with201: r.with201<t_code_scanning_autofix_commits_response>,
  with400: r.with400<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<void>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodeScanningCommitAutofixResponder =
  typeof codeScanningCommitAutofixResponder & KoaRuntimeResponder

const codeScanningCommitAutofixResponseValidator = responseValidationFactory(
  [
    ["201", s_code_scanning_autofix_commits_response],
    ["400", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", z.undefined()],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type CodeScanningCommitAutofix = (
  params: Params<
    t_CodeScanningCommitAutofixParamSchema,
    void,
    t_CodeScanningCommitAutofixBodySchema | undefined,
    void
  >,
  respond: CodeScanningCommitAutofixResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_code_scanning_autofix_commits_response>
  | Response<400, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, void>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codeScanningListAlertInstancesResponder = {
  with200: r.with200<t_code_scanning_alert_instance[]>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodeScanningListAlertInstancesResponder =
  typeof codeScanningListAlertInstancesResponder & KoaRuntimeResponder

const codeScanningListAlertInstancesResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_code_scanning_alert_instance)],
      ["403", s_basic_error],
      ["404", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

export type CodeScanningListAlertInstances = (
  params: Params<
    t_CodeScanningListAlertInstancesParamSchema,
    t_CodeScanningListAlertInstancesQuerySchema,
    void,
    void
  >,
  respond: CodeScanningListAlertInstancesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_alert_instance[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codeScanningListRecentAnalysesResponder = {
  with200: r.with200<t_code_scanning_analysis[]>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodeScanningListRecentAnalysesResponder =
  typeof codeScanningListRecentAnalysesResponder & KoaRuntimeResponder

const codeScanningListRecentAnalysesResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_code_scanning_analysis)],
      ["403", s_basic_error],
      ["404", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

export type CodeScanningListRecentAnalyses = (
  params: Params<
    t_CodeScanningListRecentAnalysesParamSchema,
    t_CodeScanningListRecentAnalysesQuerySchema,
    void,
    void
  >,
  respond: CodeScanningListRecentAnalysesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_analysis[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codeScanningGetAnalysisResponder = {
  with200: r.with200<{
    [key: string]: unknown | undefined
  }>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodeScanningGetAnalysisResponder =
  typeof codeScanningGetAnalysisResponder & KoaRuntimeResponder

const codeScanningGetAnalysisResponseValidator = responseValidationFactory(
  [
    ["200", z.record(z.unknown())],
    ["403", s_basic_error],
    ["404", s_basic_error],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type CodeScanningGetAnalysis = (
  params: Params<t_CodeScanningGetAnalysisParamSchema, void, void, void>,
  respond: CodeScanningGetAnalysisResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        [key: string]: unknown | undefined
      }
    >
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codeScanningDeleteAnalysisResponder = {
  with200: r.with200<t_code_scanning_analysis_deletion>,
  with400: r.with400<t_scim_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodeScanningDeleteAnalysisResponder =
  typeof codeScanningDeleteAnalysisResponder & KoaRuntimeResponder

const codeScanningDeleteAnalysisResponseValidator = responseValidationFactory(
  [
    ["200", s_code_scanning_analysis_deletion],
    ["400", s_scim_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type CodeScanningDeleteAnalysis = (
  params: Params<
    t_CodeScanningDeleteAnalysisParamSchema,
    t_CodeScanningDeleteAnalysisQuerySchema,
    void,
    void
  >,
  respond: CodeScanningDeleteAnalysisResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_analysis_deletion>
  | Response<400, t_scim_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codeScanningListCodeqlDatabasesResponder = {
  with200: r.with200<t_code_scanning_codeql_database[]>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodeScanningListCodeqlDatabasesResponder =
  typeof codeScanningListCodeqlDatabasesResponder & KoaRuntimeResponder

const codeScanningListCodeqlDatabasesResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_code_scanning_codeql_database)],
      ["403", s_basic_error],
      ["404", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

export type CodeScanningListCodeqlDatabases = (
  params: Params<
    t_CodeScanningListCodeqlDatabasesParamSchema,
    void,
    void,
    void
  >,
  respond: CodeScanningListCodeqlDatabasesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_codeql_database[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codeScanningGetCodeqlDatabaseResponder = {
  with200: r.with200<t_code_scanning_codeql_database>,
  with302: r.with302<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodeScanningGetCodeqlDatabaseResponder =
  typeof codeScanningGetCodeqlDatabaseResponder & KoaRuntimeResponder

const codeScanningGetCodeqlDatabaseResponseValidator =
  responseValidationFactory(
    [
      ["200", s_code_scanning_codeql_database],
      ["302", z.undefined()],
      ["403", s_basic_error],
      ["404", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

export type CodeScanningGetCodeqlDatabase = (
  params: Params<t_CodeScanningGetCodeqlDatabaseParamSchema, void, void, void>,
  respond: CodeScanningGetCodeqlDatabaseResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_codeql_database>
  | Response<302, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codeScanningDeleteCodeqlDatabaseResponder = {
  with204: r.with204<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodeScanningDeleteCodeqlDatabaseResponder =
  typeof codeScanningDeleteCodeqlDatabaseResponder & KoaRuntimeResponder

const codeScanningDeleteCodeqlDatabaseResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["403", s_basic_error],
      ["404", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

export type CodeScanningDeleteCodeqlDatabase = (
  params: Params<
    t_CodeScanningDeleteCodeqlDatabaseParamSchema,
    void,
    void,
    void
  >,
  respond: CodeScanningDeleteCodeqlDatabaseResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codeScanningCreateVariantAnalysisResponder = {
  with201: r.with201<t_code_scanning_variant_analysis>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodeScanningCreateVariantAnalysisResponder =
  typeof codeScanningCreateVariantAnalysisResponder & KoaRuntimeResponder

const codeScanningCreateVariantAnalysisResponseValidator =
  responseValidationFactory(
    [
      ["201", s_code_scanning_variant_analysis],
      ["404", s_basic_error],
      ["422", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

export type CodeScanningCreateVariantAnalysis = (
  params: Params<
    t_CodeScanningCreateVariantAnalysisParamSchema,
    void,
    t_CodeScanningCreateVariantAnalysisBodySchema,
    void
  >,
  respond: CodeScanningCreateVariantAnalysisResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_code_scanning_variant_analysis>
  | Response<404, t_basic_error>
  | Response<422, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codeScanningGetVariantAnalysisResponder = {
  with200: r.with200<t_code_scanning_variant_analysis>,
  with404: r.with404<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodeScanningGetVariantAnalysisResponder =
  typeof codeScanningGetVariantAnalysisResponder & KoaRuntimeResponder

const codeScanningGetVariantAnalysisResponseValidator =
  responseValidationFactory(
    [
      ["200", s_code_scanning_variant_analysis],
      ["404", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

export type CodeScanningGetVariantAnalysis = (
  params: Params<t_CodeScanningGetVariantAnalysisParamSchema, void, void, void>,
  respond: CodeScanningGetVariantAnalysisResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_variant_analysis>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codeScanningGetVariantAnalysisRepoTaskResponder = {
  with200: r.with200<t_code_scanning_variant_analysis_repo_task>,
  with404: r.with404<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodeScanningGetVariantAnalysisRepoTaskResponder =
  typeof codeScanningGetVariantAnalysisRepoTaskResponder & KoaRuntimeResponder

const codeScanningGetVariantAnalysisRepoTaskResponseValidator =
  responseValidationFactory(
    [
      ["200", s_code_scanning_variant_analysis_repo_task],
      ["404", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

export type CodeScanningGetVariantAnalysisRepoTask = (
  params: Params<
    t_CodeScanningGetVariantAnalysisRepoTaskParamSchema,
    void,
    void,
    void
  >,
  respond: CodeScanningGetVariantAnalysisRepoTaskResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_variant_analysis_repo_task>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codeScanningGetDefaultSetupResponder = {
  with200: r.with200<t_code_scanning_default_setup>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodeScanningGetDefaultSetupResponder =
  typeof codeScanningGetDefaultSetupResponder & KoaRuntimeResponder

const codeScanningGetDefaultSetupResponseValidator = responseValidationFactory(
  [
    ["200", s_code_scanning_default_setup],
    ["403", s_basic_error],
    ["404", s_basic_error],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type CodeScanningGetDefaultSetup = (
  params: Params<t_CodeScanningGetDefaultSetupParamSchema, void, void, void>,
  respond: CodeScanningGetDefaultSetupResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_default_setup>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codeScanningUpdateDefaultSetupResponder = {
  with200: r.with200<t_empty_object>,
  with202: r.with202<t_code_scanning_default_setup_update_response>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodeScanningUpdateDefaultSetupResponder =
  typeof codeScanningUpdateDefaultSetupResponder & KoaRuntimeResponder

const codeScanningUpdateDefaultSetupResponseValidator =
  responseValidationFactory(
    [
      ["200", s_empty_object],
      ["202", s_code_scanning_default_setup_update_response],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["409", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

export type CodeScanningUpdateDefaultSetup = (
  params: Params<
    t_CodeScanningUpdateDefaultSetupParamSchema,
    void,
    t_CodeScanningUpdateDefaultSetupBodySchema,
    void
  >,
  respond: CodeScanningUpdateDefaultSetupResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_empty_object>
  | Response<202, t_code_scanning_default_setup_update_response>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codeScanningUploadSarifResponder = {
  with202: r.with202<t_code_scanning_sarifs_receipt>,
  with400: r.with400<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with413: r.with413<void>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodeScanningUploadSarifResponder =
  typeof codeScanningUploadSarifResponder & KoaRuntimeResponder

const codeScanningUploadSarifResponseValidator = responseValidationFactory(
  [
    ["202", s_code_scanning_sarifs_receipt],
    ["400", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["413", z.undefined()],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type CodeScanningUploadSarif = (
  params: Params<
    t_CodeScanningUploadSarifParamSchema,
    void,
    t_CodeScanningUploadSarifBodySchema,
    void
  >,
  respond: CodeScanningUploadSarifResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<202, t_code_scanning_sarifs_receipt>
  | Response<400, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<413, void>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codeScanningGetSarifResponder = {
  with200: r.with200<t_code_scanning_sarifs_status>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<void>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodeScanningGetSarifResponder = typeof codeScanningGetSarifResponder &
  KoaRuntimeResponder

const codeScanningGetSarifResponseValidator = responseValidationFactory(
  [
    ["200", s_code_scanning_sarifs_status],
    ["403", s_basic_error],
    ["404", z.undefined()],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type CodeScanningGetSarif = (
  params: Params<t_CodeScanningGetSarifParamSchema, void, void, void>,
  respond: CodeScanningGetSarifResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_sarifs_status>
  | Response<403, t_basic_error>
  | Response<404, void>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codeSecurityGetConfigurationForRepositoryResponder = {
  with200: r.with200<t_code_security_configuration_for_repository>,
  with204: r.with204<void>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type CodeSecurityGetConfigurationForRepositoryResponder =
  typeof codeSecurityGetConfigurationForRepositoryResponder &
    KoaRuntimeResponder

const codeSecurityGetConfigurationForRepositoryResponseValidator =
  responseValidationFactory(
    [
      ["200", s_code_security_configuration_for_repository],
      ["204", z.undefined()],
      ["304", z.undefined()],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type CodeSecurityGetConfigurationForRepository = (
  params: Params<
    t_CodeSecurityGetConfigurationForRepositoryParamSchema,
    void,
    void,
    void
  >,
  respond: CodeSecurityGetConfigurationForRepositoryResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_security_configuration_for_repository>
  | Response<204, void>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const reposCodeownersErrorsResponder = {
  with200: r.with200<t_codeowners_errors>,
  with404: r.with404<void>,
  withStatus: r.withStatus,
}

type ReposCodeownersErrorsResponder = typeof reposCodeownersErrorsResponder &
  KoaRuntimeResponder

const reposCodeownersErrorsResponseValidator = responseValidationFactory(
  [
    ["200", s_codeowners_errors],
    ["404", z.undefined()],
  ],
  undefined,
)

export type ReposCodeownersErrors = (
  params: Params<
    t_ReposCodeownersErrorsParamSchema,
    t_ReposCodeownersErrorsQuerySchema,
    void,
    void
  >,
  respond: ReposCodeownersErrorsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_codeowners_errors>
  | Response<404, void>
>

const codespacesListInRepositoryForAuthenticatedUserResponder = {
  with200: r.with200<{
    codespaces: t_codespace[]
    total_count: number
  }>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesListInRepositoryForAuthenticatedUserResponder =
  typeof codespacesListInRepositoryForAuthenticatedUserResponder &
    KoaRuntimeResponder

const codespacesListInRepositoryForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          codespaces: z.array(s_codespace),
        }),
      ],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CodespacesListInRepositoryForAuthenticatedUser = (
  params: Params<
    t_CodespacesListInRepositoryForAuthenticatedUserParamSchema,
    t_CodespacesListInRepositoryForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: CodespacesListInRepositoryForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        codespaces: t_codespace[]
        total_count: number
      }
    >
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const codespacesCreateWithRepoForAuthenticatedUserResponder = {
  with201: r.with201<t_codespace>,
  with202: r.with202<t_codespace>,
  with400: r.with400<t_scim_error>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodespacesCreateWithRepoForAuthenticatedUserResponder =
  typeof codespacesCreateWithRepoForAuthenticatedUserResponder &
    KoaRuntimeResponder

const codespacesCreateWithRepoForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["201", s_codespace],
      ["202", s_codespace],
      ["400", s_scim_error],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

export type CodespacesCreateWithRepoForAuthenticatedUser = (
  params: Params<
    t_CodespacesCreateWithRepoForAuthenticatedUserParamSchema,
    void,
    t_CodespacesCreateWithRepoForAuthenticatedUserBodySchema,
    void
  >,
  respond: CodespacesCreateWithRepoForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_codespace>
  | Response<202, t_codespace>
  | Response<400, t_scim_error>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codespacesListDevcontainersInRepositoryForAuthenticatedUserResponder = {
  with200: r.with200<{
    devcontainers: {
      display_name?: string
      name?: string
      path: string
    }[]
    total_count: number
  }>,
  with400: r.with400<t_scim_error>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesListDevcontainersInRepositoryForAuthenticatedUserResponder =
  typeof codespacesListDevcontainersInRepositoryForAuthenticatedUserResponder &
    KoaRuntimeResponder

const codespacesListDevcontainersInRepositoryForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          devcontainers: z.array(
            z.object({
              path: z.string(),
              name: z.string().optional(),
              display_name: z.string().optional(),
            }),
          ),
        }),
      ],
      ["400", s_scim_error],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CodespacesListDevcontainersInRepositoryForAuthenticatedUser = (
  params: Params<
    t_CodespacesListDevcontainersInRepositoryForAuthenticatedUserParamSchema,
    t_CodespacesListDevcontainersInRepositoryForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: CodespacesListDevcontainersInRepositoryForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        devcontainers: {
          display_name?: string
          name?: string
          path: string
        }[]
        total_count: number
      }
    >
  | Response<400, t_scim_error>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const codespacesRepoMachinesForAuthenticatedUserResponder = {
  with200: r.with200<{
    machines: t_codespace_machine[]
    total_count: number
  }>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesRepoMachinesForAuthenticatedUserResponder =
  typeof codespacesRepoMachinesForAuthenticatedUserResponder &
    KoaRuntimeResponder

const codespacesRepoMachinesForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          machines: z.array(s_codespace_machine),
        }),
      ],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CodespacesRepoMachinesForAuthenticatedUser = (
  params: Params<
    t_CodespacesRepoMachinesForAuthenticatedUserParamSchema,
    t_CodespacesRepoMachinesForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: CodespacesRepoMachinesForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        machines: t_codespace_machine[]
        total_count: number
      }
    >
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const codespacesPreFlightWithRepoForAuthenticatedUserResponder = {
  with200: r.with200<{
    billable_owner?: t_simple_user
    defaults?: {
      devcontainer_path: string | null
      location: string
    }
  }>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesPreFlightWithRepoForAuthenticatedUserResponder =
  typeof codespacesPreFlightWithRepoForAuthenticatedUserResponder &
    KoaRuntimeResponder

const codespacesPreFlightWithRepoForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          billable_owner: s_simple_user.optional(),
          defaults: z
            .object({
              location: z.string(),
              devcontainer_path: z.string().nullable(),
            })
            .optional(),
        }),
      ],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type CodespacesPreFlightWithRepoForAuthenticatedUser = (
  params: Params<
    t_CodespacesPreFlightWithRepoForAuthenticatedUserParamSchema,
    t_CodespacesPreFlightWithRepoForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: CodespacesPreFlightWithRepoForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        billable_owner?: t_simple_user
        defaults?: {
          devcontainer_path: string | null
          location: string
        }
      }
    >
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const codespacesCheckPermissionsForDevcontainerResponder = {
  with200: r.with200<t_codespaces_permissions_check_for_devcontainer>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodespacesCheckPermissionsForDevcontainerResponder =
  typeof codespacesCheckPermissionsForDevcontainerResponder &
    KoaRuntimeResponder

const codespacesCheckPermissionsForDevcontainerResponseValidator =
  responseValidationFactory(
    [
      ["200", s_codespaces_permissions_check_for_devcontainer],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

export type CodespacesCheckPermissionsForDevcontainer = (
  params: Params<
    t_CodespacesCheckPermissionsForDevcontainerParamSchema,
    t_CodespacesCheckPermissionsForDevcontainerQuerySchema,
    void,
    void
  >,
  respond: CodespacesCheckPermissionsForDevcontainerResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_codespaces_permissions_check_for_devcontainer>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codespacesListRepoSecretsResponder = {
  with200: r.with200<{
    secrets: t_repo_codespaces_secret[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type CodespacesListRepoSecretsResponder =
  typeof codespacesListRepoSecretsResponder & KoaRuntimeResponder

const codespacesListRepoSecretsResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number(),
        secrets: z.array(s_repo_codespaces_secret),
      }),
    ],
  ],
  undefined,
)

export type CodespacesListRepoSecrets = (
  params: Params<
    t_CodespacesListRepoSecretsParamSchema,
    t_CodespacesListRepoSecretsQuerySchema,
    void,
    void
  >,
  respond: CodespacesListRepoSecretsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        secrets: t_repo_codespaces_secret[]
        total_count: number
      }
    >
>

const codespacesGetRepoPublicKeyResponder = {
  with200: r.with200<t_codespaces_public_key>,
  withStatus: r.withStatus,
}

type CodespacesGetRepoPublicKeyResponder =
  typeof codespacesGetRepoPublicKeyResponder & KoaRuntimeResponder

const codespacesGetRepoPublicKeyResponseValidator = responseValidationFactory(
  [["200", s_codespaces_public_key]],
  undefined,
)

export type CodespacesGetRepoPublicKey = (
  params: Params<t_CodespacesGetRepoPublicKeyParamSchema, void, void, void>,
  respond: CodespacesGetRepoPublicKeyResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_codespaces_public_key>
>

const codespacesGetRepoSecretResponder = {
  with200: r.with200<t_repo_codespaces_secret>,
  withStatus: r.withStatus,
}

type CodespacesGetRepoSecretResponder =
  typeof codespacesGetRepoSecretResponder & KoaRuntimeResponder

const codespacesGetRepoSecretResponseValidator = responseValidationFactory(
  [["200", s_repo_codespaces_secret]],
  undefined,
)

export type CodespacesGetRepoSecret = (
  params: Params<t_CodespacesGetRepoSecretParamSchema, void, void, void>,
  respond: CodespacesGetRepoSecretResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_repo_codespaces_secret>
>

const codespacesCreateOrUpdateRepoSecretResponder = {
  with201: r.with201<t_empty_object>,
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type CodespacesCreateOrUpdateRepoSecretResponder =
  typeof codespacesCreateOrUpdateRepoSecretResponder & KoaRuntimeResponder

const codespacesCreateOrUpdateRepoSecretResponseValidator =
  responseValidationFactory(
    [
      ["201", s_empty_object],
      ["204", z.undefined()],
    ],
    undefined,
  )

export type CodespacesCreateOrUpdateRepoSecret = (
  params: Params<
    t_CodespacesCreateOrUpdateRepoSecretParamSchema,
    void,
    t_CodespacesCreateOrUpdateRepoSecretBodySchema,
    void
  >,
  respond: CodespacesCreateOrUpdateRepoSecretResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<204, void>
>

const codespacesDeleteRepoSecretResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type CodespacesDeleteRepoSecretResponder =
  typeof codespacesDeleteRepoSecretResponder & KoaRuntimeResponder

const codespacesDeleteRepoSecretResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type CodespacesDeleteRepoSecret = (
  params: Params<t_CodespacesDeleteRepoSecretParamSchema, void, void, void>,
  respond: CodespacesDeleteRepoSecretResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const reposListCollaboratorsResponder = {
  with200: r.with200<t_collaborator[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposListCollaboratorsResponder = typeof reposListCollaboratorsResponder &
  KoaRuntimeResponder

const reposListCollaboratorsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_collaborator)],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposListCollaborators = (
  params: Params<
    t_ReposListCollaboratorsParamSchema,
    t_ReposListCollaboratorsQuerySchema,
    void,
    void
  >,
  respond: ReposListCollaboratorsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_collaborator[]>
  | Response<404, t_basic_error>
>

const reposCheckCollaboratorResponder = {
  with204: r.with204<void>,
  with404: r.with404<void>,
  withStatus: r.withStatus,
}

type ReposCheckCollaboratorResponder = typeof reposCheckCollaboratorResponder &
  KoaRuntimeResponder

const reposCheckCollaboratorResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", z.undefined()],
  ],
  undefined,
)

export type ReposCheckCollaborator = (
  params: Params<t_ReposCheckCollaboratorParamSchema, void, void, void>,
  respond: ReposCheckCollaboratorResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<404, void>
>

const reposAddCollaboratorResponder = {
  with201: r.with201<t_repository_invitation>,
  with204: r.with204<void>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposAddCollaboratorResponder = typeof reposAddCollaboratorResponder &
  KoaRuntimeResponder

const reposAddCollaboratorResponseValidator = responseValidationFactory(
  [
    ["201", s_repository_invitation],
    ["204", z.undefined()],
    ["403", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposAddCollaborator = (
  params: Params<
    t_ReposAddCollaboratorParamSchema,
    void,
    t_ReposAddCollaboratorBodySchema | undefined,
    void
  >,
  respond: ReposAddCollaboratorResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_repository_invitation>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

const reposRemoveCollaboratorResponder = {
  with204: r.with204<void>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposRemoveCollaboratorResponder =
  typeof reposRemoveCollaboratorResponder & KoaRuntimeResponder

const reposRemoveCollaboratorResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["403", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposRemoveCollaborator = (
  params: Params<t_ReposRemoveCollaboratorParamSchema, void, void, void>,
  respond: ReposRemoveCollaboratorResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

const reposGetCollaboratorPermissionLevelResponder = {
  with200: r.with200<t_repository_collaborator_permission>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetCollaboratorPermissionLevelResponder =
  typeof reposGetCollaboratorPermissionLevelResponder & KoaRuntimeResponder

const reposGetCollaboratorPermissionLevelResponseValidator =
  responseValidationFactory(
    [
      ["200", s_repository_collaborator_permission],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ReposGetCollaboratorPermissionLevel = (
  params: Params<
    t_ReposGetCollaboratorPermissionLevelParamSchema,
    void,
    void,
    void
  >,
  respond: ReposGetCollaboratorPermissionLevelResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_collaborator_permission>
  | Response<404, t_basic_error>
>

const reposListCommitCommentsForRepoResponder = {
  with200: r.with200<t_commit_comment[]>,
  withStatus: r.withStatus,
}

type ReposListCommitCommentsForRepoResponder =
  typeof reposListCommitCommentsForRepoResponder & KoaRuntimeResponder

const reposListCommitCommentsForRepoResponseValidator =
  responseValidationFactory([["200", z.array(s_commit_comment)]], undefined)

export type ReposListCommitCommentsForRepo = (
  params: Params<
    t_ReposListCommitCommentsForRepoParamSchema,
    t_ReposListCommitCommentsForRepoQuerySchema,
    void,
    void
  >,
  respond: ReposListCommitCommentsForRepoResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_commit_comment[]>>

const reposGetCommitCommentResponder = {
  with200: r.with200<t_commit_comment>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetCommitCommentResponder = typeof reposGetCommitCommentResponder &
  KoaRuntimeResponder

const reposGetCommitCommentResponseValidator = responseValidationFactory(
  [
    ["200", s_commit_comment],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposGetCommitComment = (
  params: Params<t_ReposGetCommitCommentParamSchema, void, void, void>,
  respond: ReposGetCommitCommentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_commit_comment>
  | Response<404, t_basic_error>
>

const reposUpdateCommitCommentResponder = {
  with200: r.with200<t_commit_comment>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposUpdateCommitCommentResponder =
  typeof reposUpdateCommitCommentResponder & KoaRuntimeResponder

const reposUpdateCommitCommentResponseValidator = responseValidationFactory(
  [
    ["200", s_commit_comment],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposUpdateCommitComment = (
  params: Params<
    t_ReposUpdateCommitCommentParamSchema,
    void,
    t_ReposUpdateCommitCommentBodySchema,
    void
  >,
  respond: ReposUpdateCommitCommentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_commit_comment>
  | Response<404, t_basic_error>
>

const reposDeleteCommitCommentResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposDeleteCommitCommentResponder =
  typeof reposDeleteCommitCommentResponder & KoaRuntimeResponder

const reposDeleteCommitCommentResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposDeleteCommitComment = (
  params: Params<t_ReposDeleteCommitCommentParamSchema, void, void, void>,
  respond: ReposDeleteCommitCommentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

const reactionsListForCommitCommentResponder = {
  with200: r.with200<t_reaction[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReactionsListForCommitCommentResponder =
  typeof reactionsListForCommitCommentResponder & KoaRuntimeResponder

const reactionsListForCommitCommentResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_reaction)],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ReactionsListForCommitComment = (
  params: Params<
    t_ReactionsListForCommitCommentParamSchema,
    t_ReactionsListForCommitCommentQuerySchema,
    void,
    void
  >,
  respond: ReactionsListForCommitCommentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_reaction[]>
  | Response<404, t_basic_error>
>

const reactionsCreateForCommitCommentResponder = {
  with200: r.with200<t_reaction>,
  with201: r.with201<t_reaction>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReactionsCreateForCommitCommentResponder =
  typeof reactionsCreateForCommitCommentResponder & KoaRuntimeResponder

const reactionsCreateForCommitCommentResponseValidator =
  responseValidationFactory(
    [
      ["200", s_reaction],
      ["201", s_reaction],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type ReactionsCreateForCommitComment = (
  params: Params<
    t_ReactionsCreateForCommitCommentParamSchema,
    void,
    t_ReactionsCreateForCommitCommentBodySchema,
    void
  >,
  respond: ReactionsCreateForCommitCommentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_reaction>
  | Response<201, t_reaction>
  | Response<422, t_validation_error>
>

const reactionsDeleteForCommitCommentResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ReactionsDeleteForCommitCommentResponder =
  typeof reactionsDeleteForCommitCommentResponder & KoaRuntimeResponder

const reactionsDeleteForCommitCommentResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ReactionsDeleteForCommitComment = (
  params: Params<
    t_ReactionsDeleteForCommitCommentParamSchema,
    void,
    void,
    void
  >,
  respond: ReactionsDeleteForCommitCommentResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const reposListCommitsResponder = {
  with200: r.with200<t_commit[]>,
  with400: r.with400<t_scim_error>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposListCommitsResponder = typeof reposListCommitsResponder &
  KoaRuntimeResponder

const reposListCommitsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_commit)],
    ["400", s_scim_error],
    ["404", s_basic_error],
    ["409", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type ReposListCommits = (
  params: Params<
    t_ReposListCommitsParamSchema,
    t_ReposListCommitsQuerySchema,
    void,
    void
  >,
  respond: ReposListCommitsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_commit[]>
  | Response<400, t_scim_error>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
  | Response<500, t_basic_error>
>

const reposListBranchesForHeadCommitResponder = {
  with200: r.with200<t_branch_short[]>,
  with409: r.with409<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposListBranchesForHeadCommitResponder =
  typeof reposListBranchesForHeadCommitResponder & KoaRuntimeResponder

const reposListBranchesForHeadCommitResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_branch_short)],
      ["409", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type ReposListBranchesForHeadCommit = (
  params: Params<t_ReposListBranchesForHeadCommitParamSchema, void, void, void>,
  respond: ReposListBranchesForHeadCommitResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_branch_short[]>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error>
>

const reposListCommentsForCommitResponder = {
  with200: r.with200<t_commit_comment[]>,
  withStatus: r.withStatus,
}

type ReposListCommentsForCommitResponder =
  typeof reposListCommentsForCommitResponder & KoaRuntimeResponder

const reposListCommentsForCommitResponseValidator = responseValidationFactory(
  [["200", z.array(s_commit_comment)]],
  undefined,
)

export type ReposListCommentsForCommit = (
  params: Params<
    t_ReposListCommentsForCommitParamSchema,
    t_ReposListCommentsForCommitQuerySchema,
    void,
    void
  >,
  respond: ReposListCommentsForCommitResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_commit_comment[]>>

const reposCreateCommitCommentResponder = {
  with201: r.with201<t_commit_comment>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposCreateCommitCommentResponder =
  typeof reposCreateCommitCommentResponder & KoaRuntimeResponder

const reposCreateCommitCommentResponseValidator = responseValidationFactory(
  [
    ["201", s_commit_comment],
    ["403", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposCreateCommitComment = (
  params: Params<
    t_ReposCreateCommitCommentParamSchema,
    void,
    t_ReposCreateCommitCommentBodySchema,
    void
  >,
  respond: ReposCreateCommitCommentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_commit_comment>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

const reposListPullRequestsAssociatedWithCommitResponder = {
  with200: r.with200<t_pull_request_simple[]>,
  with409: r.with409<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposListPullRequestsAssociatedWithCommitResponder =
  typeof reposListPullRequestsAssociatedWithCommitResponder &
    KoaRuntimeResponder

const reposListPullRequestsAssociatedWithCommitResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_pull_request_simple)],
      ["409", s_basic_error],
    ],
    undefined,
  )

export type ReposListPullRequestsAssociatedWithCommit = (
  params: Params<
    t_ReposListPullRequestsAssociatedWithCommitParamSchema,
    t_ReposListPullRequestsAssociatedWithCommitQuerySchema,
    void,
    void
  >,
  respond: ReposListPullRequestsAssociatedWithCommitResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request_simple[]>
  | Response<409, t_basic_error>
>

const reposGetCommitResponder = {
  with200: r.with200<t_commit>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error>,
  with422: r.with422<t_validation_error>,
  with500: r.with500<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type ReposGetCommitResponder = typeof reposGetCommitResponder &
  KoaRuntimeResponder

const reposGetCommitResponseValidator = responseValidationFactory(
  [
    ["200", s_commit],
    ["404", s_basic_error],
    ["409", s_basic_error],
    ["422", s_validation_error],
    ["500", s_basic_error],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type ReposGetCommit = (
  params: Params<
    t_ReposGetCommitParamSchema,
    t_ReposGetCommitQuerySchema,
    void,
    void
  >,
  respond: ReposGetCommitResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_commit>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error>
  | Response<500, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const checksListForRefResponder = {
  with200: r.with200<{
    check_runs: t_check_run[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type ChecksListForRefResponder = typeof checksListForRefResponder &
  KoaRuntimeResponder

const checksListForRefResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number(),
        check_runs: z.array(s_check_run),
      }),
    ],
  ],
  undefined,
)

export type ChecksListForRef = (
  params: Params<
    t_ChecksListForRefParamSchema,
    t_ChecksListForRefQuerySchema,
    void,
    void
  >,
  respond: ChecksListForRefResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        check_runs: t_check_run[]
        total_count: number
      }
    >
>

const checksListSuitesForRefResponder = {
  with200: r.with200<{
    check_suites: t_check_suite[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type ChecksListSuitesForRefResponder = typeof checksListSuitesForRefResponder &
  KoaRuntimeResponder

const checksListSuitesForRefResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number(),
        check_suites: z.array(s_check_suite),
      }),
    ],
  ],
  undefined,
)

export type ChecksListSuitesForRef = (
  params: Params<
    t_ChecksListSuitesForRefParamSchema,
    t_ChecksListSuitesForRefQuerySchema,
    void,
    void
  >,
  respond: ChecksListSuitesForRefResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        check_suites: t_check_suite[]
        total_count: number
      }
    >
>

const reposGetCombinedStatusForRefResponder = {
  with200: r.with200<t_combined_commit_status>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetCombinedStatusForRefResponder =
  typeof reposGetCombinedStatusForRefResponder & KoaRuntimeResponder

const reposGetCombinedStatusForRefResponseValidator = responseValidationFactory(
  [
    ["200", s_combined_commit_status],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposGetCombinedStatusForRef = (
  params: Params<
    t_ReposGetCombinedStatusForRefParamSchema,
    t_ReposGetCombinedStatusForRefQuerySchema,
    void,
    void
  >,
  respond: ReposGetCombinedStatusForRefResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_combined_commit_status>
  | Response<404, t_basic_error>
>

const reposListCommitStatusesForRefResponder = {
  with200: r.with200<t_status[]>,
  with301: r.with301<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposListCommitStatusesForRefResponder =
  typeof reposListCommitStatusesForRefResponder & KoaRuntimeResponder

const reposListCommitStatusesForRefResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_status)],
      ["301", s_basic_error],
    ],
    undefined,
  )

export type ReposListCommitStatusesForRef = (
  params: Params<
    t_ReposListCommitStatusesForRefParamSchema,
    t_ReposListCommitStatusesForRefQuerySchema,
    void,
    void
  >,
  respond: ReposListCommitStatusesForRefResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_status[]>
  | Response<301, t_basic_error>
>

const reposGetCommunityProfileMetricsResponder = {
  with200: r.with200<t_community_profile>,
  withStatus: r.withStatus,
}

type ReposGetCommunityProfileMetricsResponder =
  typeof reposGetCommunityProfileMetricsResponder & KoaRuntimeResponder

const reposGetCommunityProfileMetricsResponseValidator =
  responseValidationFactory([["200", s_community_profile]], undefined)

export type ReposGetCommunityProfileMetrics = (
  params: Params<
    t_ReposGetCommunityProfileMetricsParamSchema,
    void,
    void,
    void
  >,
  respond: ReposGetCommunityProfileMetricsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_community_profile>>

const reposCompareCommitsResponder = {
  with200: r.with200<t_commit_comparison>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type ReposCompareCommitsResponder = typeof reposCompareCommitsResponder &
  KoaRuntimeResponder

const reposCompareCommitsResponseValidator = responseValidationFactory(
  [
    ["200", s_commit_comparison],
    ["404", s_basic_error],
    ["500", s_basic_error],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type ReposCompareCommits = (
  params: Params<
    t_ReposCompareCommitsParamSchema,
    t_ReposCompareCommitsQuerySchema,
    void,
    void
  >,
  respond: ReposCompareCommitsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_commit_comparison>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const reposGetContentResponder = {
  with200: r.with200<
    | t_content_directory
    | t_content_file
    | t_content_symlink
    | t_content_submodule
  >,
  with302: r.with302<void>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetContentResponder = typeof reposGetContentResponder &
  KoaRuntimeResponder

const reposGetContentResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.union([
        s_content_directory,
        s_content_file,
        s_content_symlink,
        s_content_submodule,
      ]),
    ],
    ["302", z.undefined()],
    ["304", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposGetContent = (
  params: Params<
    t_ReposGetContentParamSchema,
    t_ReposGetContentQuerySchema,
    void,
    void
  >,
  respond: ReposGetContentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      | t_content_directory
      | t_content_file
      | t_content_symlink
      | t_content_submodule
    >
  | Response<302, void>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const reposCreateOrUpdateFileContentsResponder = {
  with200: r.with200<t_file_commit>,
  with201: r.with201<t_file_commit>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error | t_repository_rule_violation_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposCreateOrUpdateFileContentsResponder =
  typeof reposCreateOrUpdateFileContentsResponder & KoaRuntimeResponder

const reposCreateOrUpdateFileContentsResponseValidator =
  responseValidationFactory(
    [
      ["200", s_file_commit],
      ["201", s_file_commit],
      ["404", s_basic_error],
      ["409", z.union([s_basic_error, s_repository_rule_violation_error])],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type ReposCreateOrUpdateFileContents = (
  params: Params<
    t_ReposCreateOrUpdateFileContentsParamSchema,
    void,
    t_ReposCreateOrUpdateFileContentsBodySchema,
    void
  >,
  respond: ReposCreateOrUpdateFileContentsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_file_commit>
  | Response<201, t_file_commit>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error | t_repository_rule_violation_error>
  | Response<422, t_validation_error>
>

const reposDeleteFileResponder = {
  with200: r.with200<t_file_commit>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error>,
  with422: r.with422<t_validation_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type ReposDeleteFileResponder = typeof reposDeleteFileResponder &
  KoaRuntimeResponder

const reposDeleteFileResponseValidator = responseValidationFactory(
  [
    ["200", s_file_commit],
    ["404", s_basic_error],
    ["409", s_basic_error],
    ["422", s_validation_error],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type ReposDeleteFile = (
  params: Params<
    t_ReposDeleteFileParamSchema,
    void,
    t_ReposDeleteFileBodySchema,
    void
  >,
  respond: ReposDeleteFileResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_file_commit>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const reposListContributorsResponder = {
  with200: r.with200<t_contributor[]>,
  with204: r.with204<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposListContributorsResponder = typeof reposListContributorsResponder &
  KoaRuntimeResponder

const reposListContributorsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_contributor)],
    ["204", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposListContributors = (
  params: Params<
    t_ReposListContributorsParamSchema,
    t_ReposListContributorsQuerySchema,
    void,
    void
  >,
  respond: ReposListContributorsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_contributor[]>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const dependabotListAlertsForRepoResponder = {
  with200: r.with200<t_dependabot_alert[]>,
  with304: r.with304<void>,
  with400: r.with400<t_scim_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type DependabotListAlertsForRepoResponder =
  typeof dependabotListAlertsForRepoResponder & KoaRuntimeResponder

const dependabotListAlertsForRepoResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_dependabot_alert)],
    ["304", z.undefined()],
    ["400", s_scim_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error_simple],
  ],
  undefined,
)

export type DependabotListAlertsForRepo = (
  params: Params<
    t_DependabotListAlertsForRepoParamSchema,
    t_DependabotListAlertsForRepoQuerySchema,
    void,
    void
  >,
  respond: DependabotListAlertsForRepoResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_dependabot_alert[]>
  | Response<304, void>
  | Response<400, t_scim_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const dependabotGetAlertResponder = {
  with200: r.with200<t_dependabot_alert>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type DependabotGetAlertResponder = typeof dependabotGetAlertResponder &
  KoaRuntimeResponder

const dependabotGetAlertResponseValidator = responseValidationFactory(
  [
    ["200", s_dependabot_alert],
    ["304", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type DependabotGetAlert = (
  params: Params<t_DependabotGetAlertParamSchema, void, void, void>,
  respond: DependabotGetAlertResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_dependabot_alert>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const dependabotUpdateAlertResponder = {
  with200: r.with200<t_dependabot_alert>,
  with400: r.with400<t_scim_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type DependabotUpdateAlertResponder = typeof dependabotUpdateAlertResponder &
  KoaRuntimeResponder

const dependabotUpdateAlertResponseValidator = responseValidationFactory(
  [
    ["200", s_dependabot_alert],
    ["400", s_scim_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["409", s_basic_error],
    ["422", s_validation_error_simple],
  ],
  undefined,
)

export type DependabotUpdateAlert = (
  params: Params<
    t_DependabotUpdateAlertParamSchema,
    void,
    t_DependabotUpdateAlertBodySchema,
    void
  >,
  respond: DependabotUpdateAlertResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_dependabot_alert>
  | Response<400, t_scim_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const dependabotListRepoSecretsResponder = {
  with200: r.with200<{
    secrets: t_dependabot_secret[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type DependabotListRepoSecretsResponder =
  typeof dependabotListRepoSecretsResponder & KoaRuntimeResponder

const dependabotListRepoSecretsResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number(),
        secrets: z.array(s_dependabot_secret),
      }),
    ],
  ],
  undefined,
)

export type DependabotListRepoSecrets = (
  params: Params<
    t_DependabotListRepoSecretsParamSchema,
    t_DependabotListRepoSecretsQuerySchema,
    void,
    void
  >,
  respond: DependabotListRepoSecretsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        secrets: t_dependabot_secret[]
        total_count: number
      }
    >
>

const dependabotGetRepoPublicKeyResponder = {
  with200: r.with200<t_dependabot_public_key>,
  withStatus: r.withStatus,
}

type DependabotGetRepoPublicKeyResponder =
  typeof dependabotGetRepoPublicKeyResponder & KoaRuntimeResponder

const dependabotGetRepoPublicKeyResponseValidator = responseValidationFactory(
  [["200", s_dependabot_public_key]],
  undefined,
)

export type DependabotGetRepoPublicKey = (
  params: Params<t_DependabotGetRepoPublicKeyParamSchema, void, void, void>,
  respond: DependabotGetRepoPublicKeyResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_dependabot_public_key>
>

const dependabotGetRepoSecretResponder = {
  with200: r.with200<t_dependabot_secret>,
  withStatus: r.withStatus,
}

type DependabotGetRepoSecretResponder =
  typeof dependabotGetRepoSecretResponder & KoaRuntimeResponder

const dependabotGetRepoSecretResponseValidator = responseValidationFactory(
  [["200", s_dependabot_secret]],
  undefined,
)

export type DependabotGetRepoSecret = (
  params: Params<t_DependabotGetRepoSecretParamSchema, void, void, void>,
  respond: DependabotGetRepoSecretResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_dependabot_secret>>

const dependabotCreateOrUpdateRepoSecretResponder = {
  with201: r.with201<t_empty_object>,
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type DependabotCreateOrUpdateRepoSecretResponder =
  typeof dependabotCreateOrUpdateRepoSecretResponder & KoaRuntimeResponder

const dependabotCreateOrUpdateRepoSecretResponseValidator =
  responseValidationFactory(
    [
      ["201", s_empty_object],
      ["204", z.undefined()],
    ],
    undefined,
  )

export type DependabotCreateOrUpdateRepoSecret = (
  params: Params<
    t_DependabotCreateOrUpdateRepoSecretParamSchema,
    void,
    t_DependabotCreateOrUpdateRepoSecretBodySchema,
    void
  >,
  respond: DependabotCreateOrUpdateRepoSecretResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<204, void>
>

const dependabotDeleteRepoSecretResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type DependabotDeleteRepoSecretResponder =
  typeof dependabotDeleteRepoSecretResponder & KoaRuntimeResponder

const dependabotDeleteRepoSecretResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type DependabotDeleteRepoSecret = (
  params: Params<t_DependabotDeleteRepoSecretParamSchema, void, void, void>,
  respond: DependabotDeleteRepoSecretResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const dependencyGraphDiffRangeResponder = {
  with200: r.with200<t_dependency_graph_diff>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type DependencyGraphDiffRangeResponder =
  typeof dependencyGraphDiffRangeResponder & KoaRuntimeResponder

const dependencyGraphDiffRangeResponseValidator = responseValidationFactory(
  [
    ["200", s_dependency_graph_diff],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type DependencyGraphDiffRange = (
  params: Params<
    t_DependencyGraphDiffRangeParamSchema,
    t_DependencyGraphDiffRangeQuerySchema,
    void,
    void
  >,
  respond: DependencyGraphDiffRangeResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_dependency_graph_diff>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const dependencyGraphExportSbomResponder = {
  with200: r.with200<t_dependency_graph_spdx_sbom>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type DependencyGraphExportSbomResponder =
  typeof dependencyGraphExportSbomResponder & KoaRuntimeResponder

const dependencyGraphExportSbomResponseValidator = responseValidationFactory(
  [
    ["200", s_dependency_graph_spdx_sbom],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type DependencyGraphExportSbom = (
  params: Params<t_DependencyGraphExportSbomParamSchema, void, void, void>,
  respond: DependencyGraphExportSbomResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_dependency_graph_spdx_sbom>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const dependencyGraphCreateRepositorySnapshotResponder = {
  with201: r.with201<{
    created_at: string
    id: number
    message: string
    result: string
  }>,
  withStatus: r.withStatus,
}

type DependencyGraphCreateRepositorySnapshotResponder =
  typeof dependencyGraphCreateRepositorySnapshotResponder & KoaRuntimeResponder

const dependencyGraphCreateRepositorySnapshotResponseValidator =
  responseValidationFactory(
    [
      [
        "201",
        z.object({
          id: z.coerce.number(),
          created_at: z.string(),
          result: z.string(),
          message: z.string(),
        }),
      ],
    ],
    undefined,
  )

export type DependencyGraphCreateRepositorySnapshot = (
  params: Params<
    t_DependencyGraphCreateRepositorySnapshotParamSchema,
    void,
    t_DependencyGraphCreateRepositorySnapshotBodySchema,
    void
  >,
  respond: DependencyGraphCreateRepositorySnapshotResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      201,
      {
        created_at: string
        id: number
        message: string
        result: string
      }
    >
>

const reposListDeploymentsResponder = {
  with200: r.with200<t_deployment[]>,
  withStatus: r.withStatus,
}

type ReposListDeploymentsResponder = typeof reposListDeploymentsResponder &
  KoaRuntimeResponder

const reposListDeploymentsResponseValidator = responseValidationFactory(
  [["200", z.array(s_deployment)]],
  undefined,
)

export type ReposListDeployments = (
  params: Params<
    t_ReposListDeploymentsParamSchema,
    t_ReposListDeploymentsQuerySchema,
    void,
    void
  >,
  respond: ReposListDeploymentsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_deployment[]>>

const reposCreateDeploymentResponder = {
  with201: r.with201<t_deployment>,
  with202: r.with202<{
    message?: string
  }>,
  with409: r.with409<void>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposCreateDeploymentResponder = typeof reposCreateDeploymentResponder &
  KoaRuntimeResponder

const reposCreateDeploymentResponseValidator = responseValidationFactory(
  [
    ["201", s_deployment],
    ["202", z.object({ message: z.string().optional() })],
    ["409", z.undefined()],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposCreateDeployment = (
  params: Params<
    t_ReposCreateDeploymentParamSchema,
    void,
    t_ReposCreateDeploymentBodySchema,
    void
  >,
  respond: ReposCreateDeploymentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_deployment>
  | Response<
      202,
      {
        message?: string
      }
    >
  | Response<409, void>
  | Response<422, t_validation_error>
>

const reposGetDeploymentResponder = {
  with200: r.with200<t_deployment>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetDeploymentResponder = typeof reposGetDeploymentResponder &
  KoaRuntimeResponder

const reposGetDeploymentResponseValidator = responseValidationFactory(
  [
    ["200", s_deployment],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposGetDeployment = (
  params: Params<t_ReposGetDeploymentParamSchema, void, void, void>,
  respond: ReposGetDeploymentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_deployment>
  | Response<404, t_basic_error>
>

const reposDeleteDeploymentResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type ReposDeleteDeploymentResponder = typeof reposDeleteDeploymentResponder &
  KoaRuntimeResponder

const reposDeleteDeploymentResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
    ["422", s_validation_error_simple],
  ],
  undefined,
)

export type ReposDeleteDeployment = (
  params: Params<t_ReposDeleteDeploymentParamSchema, void, void, void>,
  respond: ReposDeleteDeploymentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const reposListDeploymentStatusesResponder = {
  with200: r.with200<t_deployment_status[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposListDeploymentStatusesResponder =
  typeof reposListDeploymentStatusesResponder & KoaRuntimeResponder

const reposListDeploymentStatusesResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_deployment_status)],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposListDeploymentStatuses = (
  params: Params<
    t_ReposListDeploymentStatusesParamSchema,
    t_ReposListDeploymentStatusesQuerySchema,
    void,
    void
  >,
  respond: ReposListDeploymentStatusesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_deployment_status[]>
  | Response<404, t_basic_error>
>

const reposCreateDeploymentStatusResponder = {
  with201: r.with201<t_deployment_status>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposCreateDeploymentStatusResponder =
  typeof reposCreateDeploymentStatusResponder & KoaRuntimeResponder

const reposCreateDeploymentStatusResponseValidator = responseValidationFactory(
  [
    ["201", s_deployment_status],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposCreateDeploymentStatus = (
  params: Params<
    t_ReposCreateDeploymentStatusParamSchema,
    void,
    t_ReposCreateDeploymentStatusBodySchema,
    void
  >,
  respond: ReposCreateDeploymentStatusResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_deployment_status>
  | Response<422, t_validation_error>
>

const reposGetDeploymentStatusResponder = {
  with200: r.with200<t_deployment_status>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetDeploymentStatusResponder =
  typeof reposGetDeploymentStatusResponder & KoaRuntimeResponder

const reposGetDeploymentStatusResponseValidator = responseValidationFactory(
  [
    ["200", s_deployment_status],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposGetDeploymentStatus = (
  params: Params<t_ReposGetDeploymentStatusParamSchema, void, void, void>,
  respond: ReposGetDeploymentStatusResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_deployment_status>
  | Response<404, t_basic_error>
>

const reposCreateDispatchEventResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposCreateDispatchEventResponder =
  typeof reposCreateDispatchEventResponder & KoaRuntimeResponder

const reposCreateDispatchEventResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposCreateDispatchEvent = (
  params: Params<
    t_ReposCreateDispatchEventParamSchema,
    void,
    t_ReposCreateDispatchEventBodySchema,
    void
  >,
  respond: ReposCreateDispatchEventResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const reposGetAllEnvironmentsResponder = {
  with200: r.with200<{
    environments?: t_environment[]
    total_count?: number
  }>,
  withStatus: r.withStatus,
}

type ReposGetAllEnvironmentsResponder =
  typeof reposGetAllEnvironmentsResponder & KoaRuntimeResponder

const reposGetAllEnvironmentsResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number().optional(),
        environments: z.array(s_environment).optional(),
      }),
    ],
  ],
  undefined,
)

export type ReposGetAllEnvironments = (
  params: Params<
    t_ReposGetAllEnvironmentsParamSchema,
    t_ReposGetAllEnvironmentsQuerySchema,
    void,
    void
  >,
  respond: ReposGetAllEnvironmentsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        environments?: t_environment[]
        total_count?: number
      }
    >
>

const reposGetEnvironmentResponder = {
  with200: r.with200<t_environment>,
  withStatus: r.withStatus,
}

type ReposGetEnvironmentResponder = typeof reposGetEnvironmentResponder &
  KoaRuntimeResponder

const reposGetEnvironmentResponseValidator = responseValidationFactory(
  [["200", s_environment]],
  undefined,
)

export type ReposGetEnvironment = (
  params: Params<t_ReposGetEnvironmentParamSchema, void, void, void>,
  respond: ReposGetEnvironmentResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_environment>>

const reposCreateOrUpdateEnvironmentResponder = {
  with200: r.with200<t_environment>,
  with422: r.with422<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposCreateOrUpdateEnvironmentResponder =
  typeof reposCreateOrUpdateEnvironmentResponder & KoaRuntimeResponder

const reposCreateOrUpdateEnvironmentResponseValidator =
  responseValidationFactory(
    [
      ["200", s_environment],
      ["422", s_basic_error],
    ],
    undefined,
  )

export type ReposCreateOrUpdateEnvironment = (
  params: Params<
    t_ReposCreateOrUpdateEnvironmentParamSchema,
    void,
    t_ReposCreateOrUpdateEnvironmentBodySchema | undefined,
    void
  >,
  respond: ReposCreateOrUpdateEnvironmentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_environment>
  | Response<422, t_basic_error>
>

const reposDeleteAnEnvironmentResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ReposDeleteAnEnvironmentResponder =
  typeof reposDeleteAnEnvironmentResponder & KoaRuntimeResponder

const reposDeleteAnEnvironmentResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type ReposDeleteAnEnvironment = (
  params: Params<t_ReposDeleteAnEnvironmentParamSchema, void, void, void>,
  respond: ReposDeleteAnEnvironmentResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const reposListDeploymentBranchPoliciesResponder = {
  with200: r.with200<{
    branch_policies: t_deployment_branch_policy[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type ReposListDeploymentBranchPoliciesResponder =
  typeof reposListDeploymentBranchPoliciesResponder & KoaRuntimeResponder

const reposListDeploymentBranchPoliciesResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          branch_policies: z.array(s_deployment_branch_policy),
        }),
      ],
    ],
    undefined,
  )

export type ReposListDeploymentBranchPolicies = (
  params: Params<
    t_ReposListDeploymentBranchPoliciesParamSchema,
    t_ReposListDeploymentBranchPoliciesQuerySchema,
    void,
    void
  >,
  respond: ReposListDeploymentBranchPoliciesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        branch_policies: t_deployment_branch_policy[]
        total_count: number
      }
    >
>

const reposCreateDeploymentBranchPolicyResponder = {
  with200: r.with200<t_deployment_branch_policy>,
  with303: r.with303<void>,
  with404: r.with404<void>,
  withStatus: r.withStatus,
}

type ReposCreateDeploymentBranchPolicyResponder =
  typeof reposCreateDeploymentBranchPolicyResponder & KoaRuntimeResponder

const reposCreateDeploymentBranchPolicyResponseValidator =
  responseValidationFactory(
    [
      ["200", s_deployment_branch_policy],
      ["303", z.undefined()],
      ["404", z.undefined()],
    ],
    undefined,
  )

export type ReposCreateDeploymentBranchPolicy = (
  params: Params<
    t_ReposCreateDeploymentBranchPolicyParamSchema,
    void,
    t_ReposCreateDeploymentBranchPolicyBodySchema,
    void
  >,
  respond: ReposCreateDeploymentBranchPolicyResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_deployment_branch_policy>
  | Response<303, void>
  | Response<404, void>
>

const reposGetDeploymentBranchPolicyResponder = {
  with200: r.with200<t_deployment_branch_policy>,
  withStatus: r.withStatus,
}

type ReposGetDeploymentBranchPolicyResponder =
  typeof reposGetDeploymentBranchPolicyResponder & KoaRuntimeResponder

const reposGetDeploymentBranchPolicyResponseValidator =
  responseValidationFactory([["200", s_deployment_branch_policy]], undefined)

export type ReposGetDeploymentBranchPolicy = (
  params: Params<t_ReposGetDeploymentBranchPolicyParamSchema, void, void, void>,
  respond: ReposGetDeploymentBranchPolicyResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_deployment_branch_policy>
>

const reposUpdateDeploymentBranchPolicyResponder = {
  with200: r.with200<t_deployment_branch_policy>,
  withStatus: r.withStatus,
}

type ReposUpdateDeploymentBranchPolicyResponder =
  typeof reposUpdateDeploymentBranchPolicyResponder & KoaRuntimeResponder

const reposUpdateDeploymentBranchPolicyResponseValidator =
  responseValidationFactory([["200", s_deployment_branch_policy]], undefined)

export type ReposUpdateDeploymentBranchPolicy = (
  params: Params<
    t_ReposUpdateDeploymentBranchPolicyParamSchema,
    void,
    t_ReposUpdateDeploymentBranchPolicyBodySchema,
    void
  >,
  respond: ReposUpdateDeploymentBranchPolicyResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_deployment_branch_policy>
>

const reposDeleteDeploymentBranchPolicyResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ReposDeleteDeploymentBranchPolicyResponder =
  typeof reposDeleteDeploymentBranchPolicyResponder & KoaRuntimeResponder

const reposDeleteDeploymentBranchPolicyResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ReposDeleteDeploymentBranchPolicy = (
  params: Params<
    t_ReposDeleteDeploymentBranchPolicyParamSchema,
    void,
    void,
    void
  >,
  respond: ReposDeleteDeploymentBranchPolicyResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const reposGetAllDeploymentProtectionRulesResponder = {
  with200: r.with200<{
    custom_deployment_protection_rules?: t_deployment_protection_rule[]
    total_count?: number
  }>,
  withStatus: r.withStatus,
}

type ReposGetAllDeploymentProtectionRulesResponder =
  typeof reposGetAllDeploymentProtectionRulesResponder & KoaRuntimeResponder

const reposGetAllDeploymentProtectionRulesResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number().optional(),
          custom_deployment_protection_rules: z
            .array(s_deployment_protection_rule)
            .optional(),
        }),
      ],
    ],
    undefined,
  )

export type ReposGetAllDeploymentProtectionRules = (
  params: Params<
    t_ReposGetAllDeploymentProtectionRulesParamSchema,
    void,
    void,
    void
  >,
  respond: ReposGetAllDeploymentProtectionRulesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        custom_deployment_protection_rules?: t_deployment_protection_rule[]
        total_count?: number
      }
    >
>

const reposCreateDeploymentProtectionRuleResponder = {
  with201: r.with201<t_deployment_protection_rule>,
  withStatus: r.withStatus,
}

type ReposCreateDeploymentProtectionRuleResponder =
  typeof reposCreateDeploymentProtectionRuleResponder & KoaRuntimeResponder

const reposCreateDeploymentProtectionRuleResponseValidator =
  responseValidationFactory([["201", s_deployment_protection_rule]], undefined)

export type ReposCreateDeploymentProtectionRule = (
  params: Params<
    t_ReposCreateDeploymentProtectionRuleParamSchema,
    void,
    t_ReposCreateDeploymentProtectionRuleBodySchema,
    void
  >,
  respond: ReposCreateDeploymentProtectionRuleResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<201, t_deployment_protection_rule>
>

const reposListCustomDeploymentRuleIntegrationsResponder = {
  with200: r.with200<{
    available_custom_deployment_protection_rule_integrations?: t_custom_deployment_rule_app[]
    total_count?: number
  }>,
  withStatus: r.withStatus,
}

type ReposListCustomDeploymentRuleIntegrationsResponder =
  typeof reposListCustomDeploymentRuleIntegrationsResponder &
    KoaRuntimeResponder

const reposListCustomDeploymentRuleIntegrationsResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number().optional(),
          available_custom_deployment_protection_rule_integrations: z
            .array(s_custom_deployment_rule_app)
            .optional(),
        }),
      ],
    ],
    undefined,
  )

export type ReposListCustomDeploymentRuleIntegrations = (
  params: Params<
    t_ReposListCustomDeploymentRuleIntegrationsParamSchema,
    t_ReposListCustomDeploymentRuleIntegrationsQuerySchema,
    void,
    void
  >,
  respond: ReposListCustomDeploymentRuleIntegrationsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        available_custom_deployment_protection_rule_integrations?: t_custom_deployment_rule_app[]
        total_count?: number
      }
    >
>

const reposGetCustomDeploymentProtectionRuleResponder = {
  with200: r.with200<t_deployment_protection_rule>,
  withStatus: r.withStatus,
}

type ReposGetCustomDeploymentProtectionRuleResponder =
  typeof reposGetCustomDeploymentProtectionRuleResponder & KoaRuntimeResponder

const reposGetCustomDeploymentProtectionRuleResponseValidator =
  responseValidationFactory([["200", s_deployment_protection_rule]], undefined)

export type ReposGetCustomDeploymentProtectionRule = (
  params: Params<
    t_ReposGetCustomDeploymentProtectionRuleParamSchema,
    void,
    void,
    void
  >,
  respond: ReposGetCustomDeploymentProtectionRuleResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_deployment_protection_rule>
>

const reposDisableDeploymentProtectionRuleResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ReposDisableDeploymentProtectionRuleResponder =
  typeof reposDisableDeploymentProtectionRuleResponder & KoaRuntimeResponder

const reposDisableDeploymentProtectionRuleResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ReposDisableDeploymentProtectionRule = (
  params: Params<
    t_ReposDisableDeploymentProtectionRuleParamSchema,
    void,
    void,
    void
  >,
  respond: ReposDisableDeploymentProtectionRuleResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsListEnvironmentSecretsResponder = {
  with200: r.with200<{
    secrets: t_actions_secret[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type ActionsListEnvironmentSecretsResponder =
  typeof actionsListEnvironmentSecretsResponder & KoaRuntimeResponder

const actionsListEnvironmentSecretsResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          secrets: z.array(s_actions_secret),
        }),
      ],
    ],
    undefined,
  )

export type ActionsListEnvironmentSecrets = (
  params: Params<
    t_ActionsListEnvironmentSecretsParamSchema,
    t_ActionsListEnvironmentSecretsQuerySchema,
    void,
    void
  >,
  respond: ActionsListEnvironmentSecretsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        secrets: t_actions_secret[]
        total_count: number
      }
    >
>

const actionsGetEnvironmentPublicKeyResponder = {
  with200: r.with200<t_actions_public_key>,
  withStatus: r.withStatus,
}

type ActionsGetEnvironmentPublicKeyResponder =
  typeof actionsGetEnvironmentPublicKeyResponder & KoaRuntimeResponder

const actionsGetEnvironmentPublicKeyResponseValidator =
  responseValidationFactory([["200", s_actions_public_key]], undefined)

export type ActionsGetEnvironmentPublicKey = (
  params: Params<t_ActionsGetEnvironmentPublicKeyParamSchema, void, void, void>,
  respond: ActionsGetEnvironmentPublicKeyResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_actions_public_key>>

const actionsGetEnvironmentSecretResponder = {
  with200: r.with200<t_actions_secret>,
  withStatus: r.withStatus,
}

type ActionsGetEnvironmentSecretResponder =
  typeof actionsGetEnvironmentSecretResponder & KoaRuntimeResponder

const actionsGetEnvironmentSecretResponseValidator = responseValidationFactory(
  [["200", s_actions_secret]],
  undefined,
)

export type ActionsGetEnvironmentSecret = (
  params: Params<t_ActionsGetEnvironmentSecretParamSchema, void, void, void>,
  respond: ActionsGetEnvironmentSecretResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_actions_secret>>

const actionsCreateOrUpdateEnvironmentSecretResponder = {
  with201: r.with201<t_empty_object>,
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsCreateOrUpdateEnvironmentSecretResponder =
  typeof actionsCreateOrUpdateEnvironmentSecretResponder & KoaRuntimeResponder

const actionsCreateOrUpdateEnvironmentSecretResponseValidator =
  responseValidationFactory(
    [
      ["201", s_empty_object],
      ["204", z.undefined()],
    ],
    undefined,
  )

export type ActionsCreateOrUpdateEnvironmentSecret = (
  params: Params<
    t_ActionsCreateOrUpdateEnvironmentSecretParamSchema,
    void,
    t_ActionsCreateOrUpdateEnvironmentSecretBodySchema,
    void
  >,
  respond: ActionsCreateOrUpdateEnvironmentSecretResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<204, void>
>

const actionsDeleteEnvironmentSecretResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsDeleteEnvironmentSecretResponder =
  typeof actionsDeleteEnvironmentSecretResponder & KoaRuntimeResponder

const actionsDeleteEnvironmentSecretResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsDeleteEnvironmentSecret = (
  params: Params<t_ActionsDeleteEnvironmentSecretParamSchema, void, void, void>,
  respond: ActionsDeleteEnvironmentSecretResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsListEnvironmentVariablesResponder = {
  with200: r.with200<{
    total_count: number
    variables: t_actions_variable[]
  }>,
  withStatus: r.withStatus,
}

type ActionsListEnvironmentVariablesResponder =
  typeof actionsListEnvironmentVariablesResponder & KoaRuntimeResponder

const actionsListEnvironmentVariablesResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          variables: z.array(s_actions_variable),
        }),
      ],
    ],
    undefined,
  )

export type ActionsListEnvironmentVariables = (
  params: Params<
    t_ActionsListEnvironmentVariablesParamSchema,
    t_ActionsListEnvironmentVariablesQuerySchema,
    void,
    void
  >,
  respond: ActionsListEnvironmentVariablesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        total_count: number
        variables: t_actions_variable[]
      }
    >
>

const actionsCreateEnvironmentVariableResponder = {
  with201: r.with201<t_empty_object>,
  withStatus: r.withStatus,
}

type ActionsCreateEnvironmentVariableResponder =
  typeof actionsCreateEnvironmentVariableResponder & KoaRuntimeResponder

const actionsCreateEnvironmentVariableResponseValidator =
  responseValidationFactory([["201", s_empty_object]], undefined)

export type ActionsCreateEnvironmentVariable = (
  params: Params<
    t_ActionsCreateEnvironmentVariableParamSchema,
    void,
    t_ActionsCreateEnvironmentVariableBodySchema,
    void
  >,
  respond: ActionsCreateEnvironmentVariableResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_empty_object>>

const actionsGetEnvironmentVariableResponder = {
  with200: r.with200<t_actions_variable>,
  withStatus: r.withStatus,
}

type ActionsGetEnvironmentVariableResponder =
  typeof actionsGetEnvironmentVariableResponder & KoaRuntimeResponder

const actionsGetEnvironmentVariableResponseValidator =
  responseValidationFactory([["200", s_actions_variable]], undefined)

export type ActionsGetEnvironmentVariable = (
  params: Params<t_ActionsGetEnvironmentVariableParamSchema, void, void, void>,
  respond: ActionsGetEnvironmentVariableResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_actions_variable>>

const actionsUpdateEnvironmentVariableResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsUpdateEnvironmentVariableResponder =
  typeof actionsUpdateEnvironmentVariableResponder & KoaRuntimeResponder

const actionsUpdateEnvironmentVariableResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsUpdateEnvironmentVariable = (
  params: Params<
    t_ActionsUpdateEnvironmentVariableParamSchema,
    void,
    t_ActionsUpdateEnvironmentVariableBodySchema,
    void
  >,
  respond: ActionsUpdateEnvironmentVariableResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const actionsDeleteEnvironmentVariableResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActionsDeleteEnvironmentVariableResponder =
  typeof actionsDeleteEnvironmentVariableResponder & KoaRuntimeResponder

const actionsDeleteEnvironmentVariableResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActionsDeleteEnvironmentVariable = (
  params: Params<
    t_ActionsDeleteEnvironmentVariableParamSchema,
    void,
    void,
    void
  >,
  respond: ActionsDeleteEnvironmentVariableResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const activityListRepoEventsResponder = {
  with200: r.with200<t_event[]>,
  withStatus: r.withStatus,
}

type ActivityListRepoEventsResponder = typeof activityListRepoEventsResponder &
  KoaRuntimeResponder

const activityListRepoEventsResponseValidator = responseValidationFactory(
  [["200", z.array(s_event)]],
  undefined,
)

export type ActivityListRepoEvents = (
  params: Params<
    t_ActivityListRepoEventsParamSchema,
    t_ActivityListRepoEventsQuerySchema,
    void,
    void
  >,
  respond: ActivityListRepoEventsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_event[]>>

const reposListForksResponder = {
  with200: r.with200<t_minimal_repository[]>,
  with400: r.with400<t_scim_error>,
  withStatus: r.withStatus,
}

type ReposListForksResponder = typeof reposListForksResponder &
  KoaRuntimeResponder

const reposListForksResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_minimal_repository)],
    ["400", s_scim_error],
  ],
  undefined,
)

export type ReposListForks = (
  params: Params<
    t_ReposListForksParamSchema,
    t_ReposListForksQuerySchema,
    void,
    void
  >,
  respond: ReposListForksResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_minimal_repository[]>
  | Response<400, t_scim_error>
>

const reposCreateForkResponder = {
  with202: r.with202<t_full_repository>,
  with400: r.with400<t_scim_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposCreateForkResponder = typeof reposCreateForkResponder &
  KoaRuntimeResponder

const reposCreateForkResponseValidator = responseValidationFactory(
  [
    ["202", s_full_repository],
    ["400", s_scim_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposCreateFork = (
  params: Params<
    t_ReposCreateForkParamSchema,
    void,
    t_ReposCreateForkBodySchema | undefined,
    void
  >,
  respond: ReposCreateForkResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<202, t_full_repository>
  | Response<400, t_scim_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const gitCreateBlobResponder = {
  with201: r.with201<t_short_blob>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error>,
  with422: r.with422<t_validation_error | t_repository_rule_violation_error>,
  withStatus: r.withStatus,
}

type GitCreateBlobResponder = typeof gitCreateBlobResponder &
  KoaRuntimeResponder

const gitCreateBlobResponseValidator = responseValidationFactory(
  [
    ["201", s_short_blob],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["409", s_basic_error],
    ["422", z.union([s_validation_error, s_repository_rule_violation_error])],
  ],
  undefined,
)

export type GitCreateBlob = (
  params: Params<
    t_GitCreateBlobParamSchema,
    void,
    t_GitCreateBlobBodySchema,
    void
  >,
  respond: GitCreateBlobResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_short_blob>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error | t_repository_rule_violation_error>
>

const gitGetBlobResponder = {
  with200: r.with200<t_blob>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type GitGetBlobResponder = typeof gitGetBlobResponder & KoaRuntimeResponder

const gitGetBlobResponseValidator = responseValidationFactory(
  [
    ["200", s_blob],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["409", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type GitGetBlob = (
  params: Params<t_GitGetBlobParamSchema, void, void, void>,
  respond: GitGetBlobResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_blob>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error>
>

const gitCreateCommitResponder = {
  with201: r.with201<t_git_commit>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type GitCreateCommitResponder = typeof gitCreateCommitResponder &
  KoaRuntimeResponder

const gitCreateCommitResponseValidator = responseValidationFactory(
  [
    ["201", s_git_commit],
    ["404", s_basic_error],
    ["409", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type GitCreateCommit = (
  params: Params<
    t_GitCreateCommitParamSchema,
    void,
    t_GitCreateCommitBodySchema,
    void
  >,
  respond: GitCreateCommitResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_git_commit>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error>
>

const gitGetCommitResponder = {
  with200: r.with200<t_git_commit>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error>,
  withStatus: r.withStatus,
}

type GitGetCommitResponder = typeof gitGetCommitResponder & KoaRuntimeResponder

const gitGetCommitResponseValidator = responseValidationFactory(
  [
    ["200", s_git_commit],
    ["404", s_basic_error],
    ["409", s_basic_error],
  ],
  undefined,
)

export type GitGetCommit = (
  params: Params<t_GitGetCommitParamSchema, void, void, void>,
  respond: GitGetCommitResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_git_commit>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
>

const gitListMatchingRefsResponder = {
  with200: r.with200<t_git_ref[]>,
  with409: r.with409<t_basic_error>,
  withStatus: r.withStatus,
}

type GitListMatchingRefsResponder = typeof gitListMatchingRefsResponder &
  KoaRuntimeResponder

const gitListMatchingRefsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_git_ref)],
    ["409", s_basic_error],
  ],
  undefined,
)

export type GitListMatchingRefs = (
  params: Params<t_GitListMatchingRefsParamSchema, void, void, void>,
  respond: GitListMatchingRefsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_git_ref[]>
  | Response<409, t_basic_error>
>

const gitGetRefResponder = {
  with200: r.with200<t_git_ref>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error>,
  withStatus: r.withStatus,
}

type GitGetRefResponder = typeof gitGetRefResponder & KoaRuntimeResponder

const gitGetRefResponseValidator = responseValidationFactory(
  [
    ["200", s_git_ref],
    ["404", s_basic_error],
    ["409", s_basic_error],
  ],
  undefined,
)

export type GitGetRef = (
  params: Params<t_GitGetRefParamSchema, void, void, void>,
  respond: GitGetRefResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_git_ref>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
>

const gitCreateRefResponder = {
  with201: r.with201<t_git_ref>,
  with409: r.with409<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type GitCreateRefResponder = typeof gitCreateRefResponder & KoaRuntimeResponder

const gitCreateRefResponseValidator = responseValidationFactory(
  [
    ["201", s_git_ref],
    ["409", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type GitCreateRef = (
  params: Params<
    t_GitCreateRefParamSchema,
    void,
    t_GitCreateRefBodySchema,
    void
  >,
  respond: GitCreateRefResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_git_ref>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error>
>

const gitUpdateRefResponder = {
  with200: r.with200<t_git_ref>,
  with409: r.with409<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type GitUpdateRefResponder = typeof gitUpdateRefResponder & KoaRuntimeResponder

const gitUpdateRefResponseValidator = responseValidationFactory(
  [
    ["200", s_git_ref],
    ["409", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type GitUpdateRef = (
  params: Params<
    t_GitUpdateRefParamSchema,
    void,
    t_GitUpdateRefBodySchema,
    void
  >,
  respond: GitUpdateRefResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_git_ref>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error>
>

const gitDeleteRefResponder = {
  with204: r.with204<void>,
  with409: r.with409<t_basic_error>,
  with422: r.with422<void>,
  withStatus: r.withStatus,
}

type GitDeleteRefResponder = typeof gitDeleteRefResponder & KoaRuntimeResponder

const gitDeleteRefResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["409", s_basic_error],
    ["422", z.undefined()],
  ],
  undefined,
)

export type GitDeleteRef = (
  params: Params<t_GitDeleteRefParamSchema, void, void, void>,
  respond: GitDeleteRefResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<409, t_basic_error>
  | Response<422, void>
>

const gitCreateTagResponder = {
  with201: r.with201<t_git_tag>,
  with409: r.with409<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type GitCreateTagResponder = typeof gitCreateTagResponder & KoaRuntimeResponder

const gitCreateTagResponseValidator = responseValidationFactory(
  [
    ["201", s_git_tag],
    ["409", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type GitCreateTag = (
  params: Params<
    t_GitCreateTagParamSchema,
    void,
    t_GitCreateTagBodySchema,
    void
  >,
  respond: GitCreateTagResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_git_tag>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error>
>

const gitGetTagResponder = {
  with200: r.with200<t_git_tag>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error>,
  withStatus: r.withStatus,
}

type GitGetTagResponder = typeof gitGetTagResponder & KoaRuntimeResponder

const gitGetTagResponseValidator = responseValidationFactory(
  [
    ["200", s_git_tag],
    ["404", s_basic_error],
    ["409", s_basic_error],
  ],
  undefined,
)

export type GitGetTag = (
  params: Params<t_GitGetTagParamSchema, void, void, void>,
  respond: GitGetTagResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_git_tag>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
>

const gitCreateTreeResponder = {
  with201: r.with201<t_git_tree>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type GitCreateTreeResponder = typeof gitCreateTreeResponder &
  KoaRuntimeResponder

const gitCreateTreeResponseValidator = responseValidationFactory(
  [
    ["201", s_git_tree],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["409", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type GitCreateTree = (
  params: Params<
    t_GitCreateTreeParamSchema,
    void,
    t_GitCreateTreeBodySchema,
    void
  >,
  respond: GitCreateTreeResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_git_tree>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error>
>

const gitGetTreeResponder = {
  with200: r.with200<t_git_tree>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type GitGetTreeResponder = typeof gitGetTreeResponder & KoaRuntimeResponder

const gitGetTreeResponseValidator = responseValidationFactory(
  [
    ["200", s_git_tree],
    ["404", s_basic_error],
    ["409", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type GitGetTree = (
  params: Params<t_GitGetTreeParamSchema, t_GitGetTreeQuerySchema, void, void>,
  respond: GitGetTreeResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_git_tree>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error>
>

const reposListWebhooksResponder = {
  with200: r.with200<t_hook[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposListWebhooksResponder = typeof reposListWebhooksResponder &
  KoaRuntimeResponder

const reposListWebhooksResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_hook)],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposListWebhooks = (
  params: Params<
    t_ReposListWebhooksParamSchema,
    t_ReposListWebhooksQuerySchema,
    void,
    void
  >,
  respond: ReposListWebhooksResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_hook[]>
  | Response<404, t_basic_error>
>

const reposCreateWebhookResponder = {
  with201: r.with201<t_hook>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposCreateWebhookResponder = typeof reposCreateWebhookResponder &
  KoaRuntimeResponder

const reposCreateWebhookResponseValidator = responseValidationFactory(
  [
    ["201", s_hook],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposCreateWebhook = (
  params: Params<
    t_ReposCreateWebhookParamSchema,
    void,
    t_ReposCreateWebhookBodySchema | undefined,
    void
  >,
  respond: ReposCreateWebhookResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_hook>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const reposGetWebhookResponder = {
  with200: r.with200<t_hook>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetWebhookResponder = typeof reposGetWebhookResponder &
  KoaRuntimeResponder

const reposGetWebhookResponseValidator = responseValidationFactory(
  [
    ["200", s_hook],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposGetWebhook = (
  params: Params<t_ReposGetWebhookParamSchema, void, void, void>,
  respond: ReposGetWebhookResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_hook>
  | Response<404, t_basic_error>
>

const reposUpdateWebhookResponder = {
  with200: r.with200<t_hook>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposUpdateWebhookResponder = typeof reposUpdateWebhookResponder &
  KoaRuntimeResponder

const reposUpdateWebhookResponseValidator = responseValidationFactory(
  [
    ["200", s_hook],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposUpdateWebhook = (
  params: Params<
    t_ReposUpdateWebhookParamSchema,
    void,
    t_ReposUpdateWebhookBodySchema,
    void
  >,
  respond: ReposUpdateWebhookResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_hook>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const reposDeleteWebhookResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposDeleteWebhookResponder = typeof reposDeleteWebhookResponder &
  KoaRuntimeResponder

const reposDeleteWebhookResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposDeleteWebhook = (
  params: Params<t_ReposDeleteWebhookParamSchema, void, void, void>,
  respond: ReposDeleteWebhookResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

const reposGetWebhookConfigForRepoResponder = {
  with200: r.with200<t_webhook_config>,
  withStatus: r.withStatus,
}

type ReposGetWebhookConfigForRepoResponder =
  typeof reposGetWebhookConfigForRepoResponder & KoaRuntimeResponder

const reposGetWebhookConfigForRepoResponseValidator = responseValidationFactory(
  [["200", s_webhook_config]],
  undefined,
)

export type ReposGetWebhookConfigForRepo = (
  params: Params<t_ReposGetWebhookConfigForRepoParamSchema, void, void, void>,
  respond: ReposGetWebhookConfigForRepoResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_webhook_config>>

const reposUpdateWebhookConfigForRepoResponder = {
  with200: r.with200<t_webhook_config>,
  withStatus: r.withStatus,
}

type ReposUpdateWebhookConfigForRepoResponder =
  typeof reposUpdateWebhookConfigForRepoResponder & KoaRuntimeResponder

const reposUpdateWebhookConfigForRepoResponseValidator =
  responseValidationFactory([["200", s_webhook_config]], undefined)

export type ReposUpdateWebhookConfigForRepo = (
  params: Params<
    t_ReposUpdateWebhookConfigForRepoParamSchema,
    void,
    t_ReposUpdateWebhookConfigForRepoBodySchema | undefined,
    void
  >,
  respond: ReposUpdateWebhookConfigForRepoResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_webhook_config>>

const reposListWebhookDeliveriesResponder = {
  with200: r.with200<t_hook_delivery_item[]>,
  with400: r.with400<t_scim_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposListWebhookDeliveriesResponder =
  typeof reposListWebhookDeliveriesResponder & KoaRuntimeResponder

const reposListWebhookDeliveriesResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_hook_delivery_item)],
    ["400", s_scim_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposListWebhookDeliveries = (
  params: Params<
    t_ReposListWebhookDeliveriesParamSchema,
    t_ReposListWebhookDeliveriesQuerySchema,
    void,
    void
  >,
  respond: ReposListWebhookDeliveriesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_hook_delivery_item[]>
  | Response<400, t_scim_error>
  | Response<422, t_validation_error>
>

const reposGetWebhookDeliveryResponder = {
  with200: r.with200<t_hook_delivery>,
  with400: r.with400<t_scim_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposGetWebhookDeliveryResponder =
  typeof reposGetWebhookDeliveryResponder & KoaRuntimeResponder

const reposGetWebhookDeliveryResponseValidator = responseValidationFactory(
  [
    ["200", s_hook_delivery],
    ["400", s_scim_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposGetWebhookDelivery = (
  params: Params<t_ReposGetWebhookDeliveryParamSchema, void, void, void>,
  respond: ReposGetWebhookDeliveryResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_hook_delivery>
  | Response<400, t_scim_error>
  | Response<422, t_validation_error>
>

const reposRedeliverWebhookDeliveryResponder = {
  with202: r.with202<{
    [key: string]: unknown | undefined
  }>,
  with400: r.with400<t_scim_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposRedeliverWebhookDeliveryResponder =
  typeof reposRedeliverWebhookDeliveryResponder & KoaRuntimeResponder

const reposRedeliverWebhookDeliveryResponseValidator =
  responseValidationFactory(
    [
      ["202", z.record(z.unknown())],
      ["400", s_scim_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type ReposRedeliverWebhookDelivery = (
  params: Params<t_ReposRedeliverWebhookDeliveryParamSchema, void, void, void>,
  respond: ReposRedeliverWebhookDeliveryResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      202,
      {
        [key: string]: unknown | undefined
      }
    >
  | Response<400, t_scim_error>
  | Response<422, t_validation_error>
>

const reposPingWebhookResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposPingWebhookResponder = typeof reposPingWebhookResponder &
  KoaRuntimeResponder

const reposPingWebhookResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposPingWebhook = (
  params: Params<t_ReposPingWebhookParamSchema, void, void, void>,
  respond: ReposPingWebhookResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

const reposTestPushWebhookResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposTestPushWebhookResponder = typeof reposTestPushWebhookResponder &
  KoaRuntimeResponder

const reposTestPushWebhookResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposTestPushWebhook = (
  params: Params<t_ReposTestPushWebhookParamSchema, void, void, void>,
  respond: ReposTestPushWebhookResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

const migrationsGetImportStatusResponder = {
  with200: r.with200<t_import>,
  with404: r.with404<t_basic_error>,
  with503: r.with503<t_basic_error>,
  withStatus: r.withStatus,
}

type MigrationsGetImportStatusResponder =
  typeof migrationsGetImportStatusResponder & KoaRuntimeResponder

const migrationsGetImportStatusResponseValidator = responseValidationFactory(
  [
    ["200", s_import],
    ["404", s_basic_error],
    ["503", s_basic_error],
  ],
  undefined,
)

export type MigrationsGetImportStatus = (
  params: Params<t_MigrationsGetImportStatusParamSchema, void, void, void>,
  respond: MigrationsGetImportStatusResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_import>
  | Response<404, t_basic_error>
  | Response<503, t_basic_error>
>

const migrationsStartImportResponder = {
  with201: r.with201<t_import>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  with503: r.with503<t_basic_error>,
  withStatus: r.withStatus,
}

type MigrationsStartImportResponder = typeof migrationsStartImportResponder &
  KoaRuntimeResponder

const migrationsStartImportResponseValidator = responseValidationFactory(
  [
    ["201", s_import],
    ["404", s_basic_error],
    ["422", s_validation_error],
    ["503", s_basic_error],
  ],
  undefined,
)

export type MigrationsStartImport = (
  params: Params<
    t_MigrationsStartImportParamSchema,
    void,
    t_MigrationsStartImportBodySchema,
    void
  >,
  respond: MigrationsStartImportResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_import>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<503, t_basic_error>
>

const migrationsUpdateImportResponder = {
  with200: r.with200<t_import>,
  with503: r.with503<t_basic_error>,
  withStatus: r.withStatus,
}

type MigrationsUpdateImportResponder = typeof migrationsUpdateImportResponder &
  KoaRuntimeResponder

const migrationsUpdateImportResponseValidator = responseValidationFactory(
  [
    ["200", s_import],
    ["503", s_basic_error],
  ],
  undefined,
)

export type MigrationsUpdateImport = (
  params: Params<
    t_MigrationsUpdateImportParamSchema,
    void,
    t_MigrationsUpdateImportBodySchema | undefined,
    void
  >,
  respond: MigrationsUpdateImportResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_import>
  | Response<503, t_basic_error>
>

const migrationsCancelImportResponder = {
  with204: r.with204<void>,
  with503: r.with503<t_basic_error>,
  withStatus: r.withStatus,
}

type MigrationsCancelImportResponder = typeof migrationsCancelImportResponder &
  KoaRuntimeResponder

const migrationsCancelImportResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["503", s_basic_error],
  ],
  undefined,
)

export type MigrationsCancelImport = (
  params: Params<t_MigrationsCancelImportParamSchema, void, void, void>,
  respond: MigrationsCancelImportResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<503, t_basic_error>
>

const migrationsGetCommitAuthorsResponder = {
  with200: r.with200<t_porter_author[]>,
  with404: r.with404<t_basic_error>,
  with503: r.with503<t_basic_error>,
  withStatus: r.withStatus,
}

type MigrationsGetCommitAuthorsResponder =
  typeof migrationsGetCommitAuthorsResponder & KoaRuntimeResponder

const migrationsGetCommitAuthorsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_porter_author)],
    ["404", s_basic_error],
    ["503", s_basic_error],
  ],
  undefined,
)

export type MigrationsGetCommitAuthors = (
  params: Params<
    t_MigrationsGetCommitAuthorsParamSchema,
    t_MigrationsGetCommitAuthorsQuerySchema,
    void,
    void
  >,
  respond: MigrationsGetCommitAuthorsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_porter_author[]>
  | Response<404, t_basic_error>
  | Response<503, t_basic_error>
>

const migrationsMapCommitAuthorResponder = {
  with200: r.with200<t_porter_author>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  with503: r.with503<t_basic_error>,
  withStatus: r.withStatus,
}

type MigrationsMapCommitAuthorResponder =
  typeof migrationsMapCommitAuthorResponder & KoaRuntimeResponder

const migrationsMapCommitAuthorResponseValidator = responseValidationFactory(
  [
    ["200", s_porter_author],
    ["404", s_basic_error],
    ["422", s_validation_error],
    ["503", s_basic_error],
  ],
  undefined,
)

export type MigrationsMapCommitAuthor = (
  params: Params<
    t_MigrationsMapCommitAuthorParamSchema,
    void,
    t_MigrationsMapCommitAuthorBodySchema | undefined,
    void
  >,
  respond: MigrationsMapCommitAuthorResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_porter_author>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<503, t_basic_error>
>

const migrationsGetLargeFilesResponder = {
  with200: r.with200<t_porter_large_file[]>,
  with503: r.with503<t_basic_error>,
  withStatus: r.withStatus,
}

type MigrationsGetLargeFilesResponder =
  typeof migrationsGetLargeFilesResponder & KoaRuntimeResponder

const migrationsGetLargeFilesResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_porter_large_file)],
    ["503", s_basic_error],
  ],
  undefined,
)

export type MigrationsGetLargeFiles = (
  params: Params<t_MigrationsGetLargeFilesParamSchema, void, void, void>,
  respond: MigrationsGetLargeFilesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_porter_large_file[]>
  | Response<503, t_basic_error>
>

const migrationsSetLfsPreferenceResponder = {
  with200: r.with200<t_import>,
  with422: r.with422<t_validation_error>,
  with503: r.with503<t_basic_error>,
  withStatus: r.withStatus,
}

type MigrationsSetLfsPreferenceResponder =
  typeof migrationsSetLfsPreferenceResponder & KoaRuntimeResponder

const migrationsSetLfsPreferenceResponseValidator = responseValidationFactory(
  [
    ["200", s_import],
    ["422", s_validation_error],
    ["503", s_basic_error],
  ],
  undefined,
)

export type MigrationsSetLfsPreference = (
  params: Params<
    t_MigrationsSetLfsPreferenceParamSchema,
    void,
    t_MigrationsSetLfsPreferenceBodySchema,
    void
  >,
  respond: MigrationsSetLfsPreferenceResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_import>
  | Response<422, t_validation_error>
  | Response<503, t_basic_error>
>

const appsGetRepoInstallationResponder = {
  with200: r.with200<t_installation>,
  with301: r.with301<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type AppsGetRepoInstallationResponder =
  typeof appsGetRepoInstallationResponder & KoaRuntimeResponder

const appsGetRepoInstallationResponseValidator = responseValidationFactory(
  [
    ["200", s_installation],
    ["301", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type AppsGetRepoInstallation = (
  params: Params<t_AppsGetRepoInstallationParamSchema, void, void, void>,
  respond: AppsGetRepoInstallationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_installation>
  | Response<301, t_basic_error>
  | Response<404, t_basic_error>
>

const interactionsGetRestrictionsForRepoResponder = {
  with200: r.with200<t_interaction_limit_response | EmptyObject>,
  withStatus: r.withStatus,
}

type InteractionsGetRestrictionsForRepoResponder =
  typeof interactionsGetRestrictionsForRepoResponder & KoaRuntimeResponder

const interactionsGetRestrictionsForRepoResponseValidator =
  responseValidationFactory(
    [["200", z.union([s_interaction_limit_response, z.object({})])]],
    undefined,
  )

export type InteractionsGetRestrictionsForRepo = (
  params: Params<
    t_InteractionsGetRestrictionsForRepoParamSchema,
    void,
    void,
    void
  >,
  respond: InteractionsGetRestrictionsForRepoResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_interaction_limit_response | EmptyObject>
>

const interactionsSetRestrictionsForRepoResponder = {
  with200: r.with200<t_interaction_limit_response>,
  with409: r.with409<void>,
  withStatus: r.withStatus,
}

type InteractionsSetRestrictionsForRepoResponder =
  typeof interactionsSetRestrictionsForRepoResponder & KoaRuntimeResponder

const interactionsSetRestrictionsForRepoResponseValidator =
  responseValidationFactory(
    [
      ["200", s_interaction_limit_response],
      ["409", z.undefined()],
    ],
    undefined,
  )

export type InteractionsSetRestrictionsForRepo = (
  params: Params<
    t_InteractionsSetRestrictionsForRepoParamSchema,
    void,
    t_InteractionsSetRestrictionsForRepoBodySchema,
    void
  >,
  respond: InteractionsSetRestrictionsForRepoResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_interaction_limit_response>
  | Response<409, void>
>

const interactionsRemoveRestrictionsForRepoResponder = {
  with204: r.with204<void>,
  with409: r.with409<void>,
  withStatus: r.withStatus,
}

type InteractionsRemoveRestrictionsForRepoResponder =
  typeof interactionsRemoveRestrictionsForRepoResponder & KoaRuntimeResponder

const interactionsRemoveRestrictionsForRepoResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["409", z.undefined()],
    ],
    undefined,
  )

export type InteractionsRemoveRestrictionsForRepo = (
  params: Params<
    t_InteractionsRemoveRestrictionsForRepoParamSchema,
    void,
    void,
    void
  >,
  respond: InteractionsRemoveRestrictionsForRepoResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<409, void>
>

const reposListInvitationsResponder = {
  with200: r.with200<t_repository_invitation[]>,
  withStatus: r.withStatus,
}

type ReposListInvitationsResponder = typeof reposListInvitationsResponder &
  KoaRuntimeResponder

const reposListInvitationsResponseValidator = responseValidationFactory(
  [["200", z.array(s_repository_invitation)]],
  undefined,
)

export type ReposListInvitations = (
  params: Params<
    t_ReposListInvitationsParamSchema,
    t_ReposListInvitationsQuerySchema,
    void,
    void
  >,
  respond: ReposListInvitationsResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_repository_invitation[]>
>

const reposUpdateInvitationResponder = {
  with200: r.with200<t_repository_invitation>,
  withStatus: r.withStatus,
}

type ReposUpdateInvitationResponder = typeof reposUpdateInvitationResponder &
  KoaRuntimeResponder

const reposUpdateInvitationResponseValidator = responseValidationFactory(
  [["200", s_repository_invitation]],
  undefined,
)

export type ReposUpdateInvitation = (
  params: Params<
    t_ReposUpdateInvitationParamSchema,
    void,
    t_ReposUpdateInvitationBodySchema | undefined,
    void
  >,
  respond: ReposUpdateInvitationResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_repository_invitation>
>

const reposDeleteInvitationResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ReposDeleteInvitationResponder = typeof reposDeleteInvitationResponder &
  KoaRuntimeResponder

const reposDeleteInvitationResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type ReposDeleteInvitation = (
  params: Params<t_ReposDeleteInvitationParamSchema, void, void, void>,
  respond: ReposDeleteInvitationResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const issuesListForRepoResponder = {
  with200: r.with200<t_issue[]>,
  with301: r.with301<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type IssuesListForRepoResponder = typeof issuesListForRepoResponder &
  KoaRuntimeResponder

const issuesListForRepoResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_issue)],
    ["301", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type IssuesListForRepo = (
  params: Params<
    t_IssuesListForRepoParamSchema,
    t_IssuesListForRepoQuerySchema,
    void,
    void
  >,
  respond: IssuesListForRepoResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue[]>
  | Response<301, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const issuesCreateResponder = {
  with201: r.with201<t_issue>,
  with400: r.with400<t_scim_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with410: r.with410<t_basic_error>,
  with422: r.with422<t_validation_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type IssuesCreateResponder = typeof issuesCreateResponder & KoaRuntimeResponder

const issuesCreateResponseValidator = responseValidationFactory(
  [
    ["201", s_issue],
    ["400", s_scim_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["410", s_basic_error],
    ["422", s_validation_error],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type IssuesCreate = (
  params: Params<
    t_IssuesCreateParamSchema,
    void,
    t_IssuesCreateBodySchema,
    void
  >,
  respond: IssuesCreateResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_issue>
  | Response<400, t_scim_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
  | Response<422, t_validation_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const issuesListCommentsForRepoResponder = {
  with200: r.with200<t_issue_comment[]>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type IssuesListCommentsForRepoResponder =
  typeof issuesListCommentsForRepoResponder & KoaRuntimeResponder

const issuesListCommentsForRepoResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_issue_comment)],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type IssuesListCommentsForRepo = (
  params: Params<
    t_IssuesListCommentsForRepoParamSchema,
    t_IssuesListCommentsForRepoQuerySchema,
    void,
    void
  >,
  respond: IssuesListCommentsForRepoResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue_comment[]>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const issuesGetCommentResponder = {
  with200: r.with200<t_issue_comment>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type IssuesGetCommentResponder = typeof issuesGetCommentResponder &
  KoaRuntimeResponder

const issuesGetCommentResponseValidator = responseValidationFactory(
  [
    ["200", s_issue_comment],
    ["404", s_basic_error],
  ],
  undefined,
)

export type IssuesGetComment = (
  params: Params<t_IssuesGetCommentParamSchema, void, void, void>,
  respond: IssuesGetCommentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue_comment>
  | Response<404, t_basic_error>
>

const issuesUpdateCommentResponder = {
  with200: r.with200<t_issue_comment>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type IssuesUpdateCommentResponder = typeof issuesUpdateCommentResponder &
  KoaRuntimeResponder

const issuesUpdateCommentResponseValidator = responseValidationFactory(
  [
    ["200", s_issue_comment],
    ["422", s_validation_error],
  ],
  undefined,
)

export type IssuesUpdateComment = (
  params: Params<
    t_IssuesUpdateCommentParamSchema,
    void,
    t_IssuesUpdateCommentBodySchema,
    void
  >,
  respond: IssuesUpdateCommentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue_comment>
  | Response<422, t_validation_error>
>

const issuesDeleteCommentResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type IssuesDeleteCommentResponder = typeof issuesDeleteCommentResponder &
  KoaRuntimeResponder

const issuesDeleteCommentResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type IssuesDeleteComment = (
  params: Params<t_IssuesDeleteCommentParamSchema, void, void, void>,
  respond: IssuesDeleteCommentResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const reactionsListForIssueCommentResponder = {
  with200: r.with200<t_reaction[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReactionsListForIssueCommentResponder =
  typeof reactionsListForIssueCommentResponder & KoaRuntimeResponder

const reactionsListForIssueCommentResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_reaction)],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReactionsListForIssueComment = (
  params: Params<
    t_ReactionsListForIssueCommentParamSchema,
    t_ReactionsListForIssueCommentQuerySchema,
    void,
    void
  >,
  respond: ReactionsListForIssueCommentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_reaction[]>
  | Response<404, t_basic_error>
>

const reactionsCreateForIssueCommentResponder = {
  with200: r.with200<t_reaction>,
  with201: r.with201<t_reaction>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReactionsCreateForIssueCommentResponder =
  typeof reactionsCreateForIssueCommentResponder & KoaRuntimeResponder

const reactionsCreateForIssueCommentResponseValidator =
  responseValidationFactory(
    [
      ["200", s_reaction],
      ["201", s_reaction],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type ReactionsCreateForIssueComment = (
  params: Params<
    t_ReactionsCreateForIssueCommentParamSchema,
    void,
    t_ReactionsCreateForIssueCommentBodySchema,
    void
  >,
  respond: ReactionsCreateForIssueCommentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_reaction>
  | Response<201, t_reaction>
  | Response<422, t_validation_error>
>

const reactionsDeleteForIssueCommentResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ReactionsDeleteForIssueCommentResponder =
  typeof reactionsDeleteForIssueCommentResponder & KoaRuntimeResponder

const reactionsDeleteForIssueCommentResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ReactionsDeleteForIssueComment = (
  params: Params<t_ReactionsDeleteForIssueCommentParamSchema, void, void, void>,
  respond: ReactionsDeleteForIssueCommentResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const issuesListEventsForRepoResponder = {
  with200: r.with200<t_issue_event[]>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type IssuesListEventsForRepoResponder =
  typeof issuesListEventsForRepoResponder & KoaRuntimeResponder

const issuesListEventsForRepoResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_issue_event)],
    ["422", s_validation_error],
  ],
  undefined,
)

export type IssuesListEventsForRepo = (
  params: Params<
    t_IssuesListEventsForRepoParamSchema,
    t_IssuesListEventsForRepoQuerySchema,
    void,
    void
  >,
  respond: IssuesListEventsForRepoResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue_event[]>
  | Response<422, t_validation_error>
>

const issuesGetEventResponder = {
  with200: r.with200<t_issue_event>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with410: r.with410<t_basic_error>,
  withStatus: r.withStatus,
}

type IssuesGetEventResponder = typeof issuesGetEventResponder &
  KoaRuntimeResponder

const issuesGetEventResponseValidator = responseValidationFactory(
  [
    ["200", s_issue_event],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["410", s_basic_error],
  ],
  undefined,
)

export type IssuesGetEvent = (
  params: Params<t_IssuesGetEventParamSchema, void, void, void>,
  respond: IssuesGetEventResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue_event>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
>

const issuesGetResponder = {
  with200: r.with200<t_issue>,
  with301: r.with301<t_basic_error>,
  with304: r.with304<void>,
  with404: r.with404<t_basic_error>,
  with410: r.with410<t_basic_error>,
  withStatus: r.withStatus,
}

type IssuesGetResponder = typeof issuesGetResponder & KoaRuntimeResponder

const issuesGetResponseValidator = responseValidationFactory(
  [
    ["200", s_issue],
    ["301", s_basic_error],
    ["304", z.undefined()],
    ["404", s_basic_error],
    ["410", s_basic_error],
  ],
  undefined,
)

export type IssuesGet = (
  params: Params<t_IssuesGetParamSchema, void, void, void>,
  respond: IssuesGetResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue>
  | Response<301, t_basic_error>
  | Response<304, void>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
>

const issuesUpdateResponder = {
  with200: r.with200<t_issue>,
  with301: r.with301<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with410: r.with410<t_basic_error>,
  with422: r.with422<t_validation_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type IssuesUpdateResponder = typeof issuesUpdateResponder & KoaRuntimeResponder

const issuesUpdateResponseValidator = responseValidationFactory(
  [
    ["200", s_issue],
    ["301", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["410", s_basic_error],
    ["422", s_validation_error],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type IssuesUpdate = (
  params: Params<
    t_IssuesUpdateParamSchema,
    void,
    t_IssuesUpdateBodySchema | undefined,
    void
  >,
  respond: IssuesUpdateResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue>
  | Response<301, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
  | Response<422, t_validation_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const issuesAddAssigneesResponder = {
  with201: r.with201<t_issue>,
  withStatus: r.withStatus,
}

type IssuesAddAssigneesResponder = typeof issuesAddAssigneesResponder &
  KoaRuntimeResponder

const issuesAddAssigneesResponseValidator = responseValidationFactory(
  [["201", s_issue]],
  undefined,
)

export type IssuesAddAssignees = (
  params: Params<
    t_IssuesAddAssigneesParamSchema,
    void,
    t_IssuesAddAssigneesBodySchema | undefined,
    void
  >,
  respond: IssuesAddAssigneesResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_issue>>

const issuesRemoveAssigneesResponder = {
  with200: r.with200<t_issue>,
  withStatus: r.withStatus,
}

type IssuesRemoveAssigneesResponder = typeof issuesRemoveAssigneesResponder &
  KoaRuntimeResponder

const issuesRemoveAssigneesResponseValidator = responseValidationFactory(
  [["200", s_issue]],
  undefined,
)

export type IssuesRemoveAssignees = (
  params: Params<
    t_IssuesRemoveAssigneesParamSchema,
    void,
    t_IssuesRemoveAssigneesBodySchema,
    void
  >,
  respond: IssuesRemoveAssigneesResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_issue>>

const issuesCheckUserCanBeAssignedToIssueResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type IssuesCheckUserCanBeAssignedToIssueResponder =
  typeof issuesCheckUserCanBeAssignedToIssueResponder & KoaRuntimeResponder

const issuesCheckUserCanBeAssignedToIssueResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type IssuesCheckUserCanBeAssignedToIssue = (
  params: Params<
    t_IssuesCheckUserCanBeAssignedToIssueParamSchema,
    void,
    void,
    void
  >,
  respond: IssuesCheckUserCanBeAssignedToIssueResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

const issuesListCommentsResponder = {
  with200: r.with200<t_issue_comment[]>,
  with404: r.with404<t_basic_error>,
  with410: r.with410<t_basic_error>,
  withStatus: r.withStatus,
}

type IssuesListCommentsResponder = typeof issuesListCommentsResponder &
  KoaRuntimeResponder

const issuesListCommentsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_issue_comment)],
    ["404", s_basic_error],
    ["410", s_basic_error],
  ],
  undefined,
)

export type IssuesListComments = (
  params: Params<
    t_IssuesListCommentsParamSchema,
    t_IssuesListCommentsQuerySchema,
    void,
    void
  >,
  respond: IssuesListCommentsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue_comment[]>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
>

const issuesCreateCommentResponder = {
  with201: r.with201<t_issue_comment>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with410: r.with410<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type IssuesCreateCommentResponder = typeof issuesCreateCommentResponder &
  KoaRuntimeResponder

const issuesCreateCommentResponseValidator = responseValidationFactory(
  [
    ["201", s_issue_comment],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["410", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type IssuesCreateComment = (
  params: Params<
    t_IssuesCreateCommentParamSchema,
    void,
    t_IssuesCreateCommentBodySchema,
    void
  >,
  respond: IssuesCreateCommentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_issue_comment>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
  | Response<422, t_validation_error>
>

const issuesListEventsResponder = {
  with200: r.with200<t_issue_event_for_issue[]>,
  with410: r.with410<t_basic_error>,
  withStatus: r.withStatus,
}

type IssuesListEventsResponder = typeof issuesListEventsResponder &
  KoaRuntimeResponder

const issuesListEventsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_issue_event_for_issue)],
    ["410", s_basic_error],
  ],
  undefined,
)

export type IssuesListEvents = (
  params: Params<
    t_IssuesListEventsParamSchema,
    t_IssuesListEventsQuerySchema,
    void,
    void
  >,
  respond: IssuesListEventsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue_event_for_issue[]>
  | Response<410, t_basic_error>
>

const issuesListLabelsOnIssueResponder = {
  with200: r.with200<t_label[]>,
  with301: r.with301<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with410: r.with410<t_basic_error>,
  withStatus: r.withStatus,
}

type IssuesListLabelsOnIssueResponder =
  typeof issuesListLabelsOnIssueResponder & KoaRuntimeResponder

const issuesListLabelsOnIssueResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_label)],
    ["301", s_basic_error],
    ["404", s_basic_error],
    ["410", s_basic_error],
  ],
  undefined,
)

export type IssuesListLabelsOnIssue = (
  params: Params<
    t_IssuesListLabelsOnIssueParamSchema,
    t_IssuesListLabelsOnIssueQuerySchema,
    void,
    void
  >,
  respond: IssuesListLabelsOnIssueResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_label[]>
  | Response<301, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
>

const issuesAddLabelsResponder = {
  with200: r.with200<t_label[]>,
  with301: r.with301<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with410: r.with410<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type IssuesAddLabelsResponder = typeof issuesAddLabelsResponder &
  KoaRuntimeResponder

const issuesAddLabelsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_label)],
    ["301", s_basic_error],
    ["404", s_basic_error],
    ["410", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type IssuesAddLabels = (
  params: Params<
    t_IssuesAddLabelsParamSchema,
    void,
    t_IssuesAddLabelsBodySchema | undefined,
    void
  >,
  respond: IssuesAddLabelsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_label[]>
  | Response<301, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
  | Response<422, t_validation_error>
>

const issuesSetLabelsResponder = {
  with200: r.with200<t_label[]>,
  with301: r.with301<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with410: r.with410<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type IssuesSetLabelsResponder = typeof issuesSetLabelsResponder &
  KoaRuntimeResponder

const issuesSetLabelsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_label)],
    ["301", s_basic_error],
    ["404", s_basic_error],
    ["410", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type IssuesSetLabels = (
  params: Params<
    t_IssuesSetLabelsParamSchema,
    void,
    t_IssuesSetLabelsBodySchema | undefined,
    void
  >,
  respond: IssuesSetLabelsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_label[]>
  | Response<301, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
  | Response<422, t_validation_error>
>

const issuesRemoveAllLabelsResponder = {
  with204: r.with204<void>,
  with301: r.with301<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with410: r.with410<t_basic_error>,
  withStatus: r.withStatus,
}

type IssuesRemoveAllLabelsResponder = typeof issuesRemoveAllLabelsResponder &
  KoaRuntimeResponder

const issuesRemoveAllLabelsResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["301", s_basic_error],
    ["404", s_basic_error],
    ["410", s_basic_error],
  ],
  undefined,
)

export type IssuesRemoveAllLabels = (
  params: Params<t_IssuesRemoveAllLabelsParamSchema, void, void, void>,
  respond: IssuesRemoveAllLabelsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<301, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
>

const issuesRemoveLabelResponder = {
  with200: r.with200<t_label[]>,
  with301: r.with301<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with410: r.with410<t_basic_error>,
  withStatus: r.withStatus,
}

type IssuesRemoveLabelResponder = typeof issuesRemoveLabelResponder &
  KoaRuntimeResponder

const issuesRemoveLabelResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_label)],
    ["301", s_basic_error],
    ["404", s_basic_error],
    ["410", s_basic_error],
  ],
  undefined,
)

export type IssuesRemoveLabel = (
  params: Params<t_IssuesRemoveLabelParamSchema, void, void, void>,
  respond: IssuesRemoveLabelResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_label[]>
  | Response<301, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
>

const issuesLockResponder = {
  with204: r.with204<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with410: r.with410<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type IssuesLockResponder = typeof issuesLockResponder & KoaRuntimeResponder

const issuesLockResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["410", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type IssuesLock = (
  params: Params<
    t_IssuesLockParamSchema,
    void,
    t_IssuesLockBodySchema | undefined,
    void
  >,
  respond: IssuesLockResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
  | Response<422, t_validation_error>
>

const issuesUnlockResponder = {
  with204: r.with204<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type IssuesUnlockResponder = typeof issuesUnlockResponder & KoaRuntimeResponder

const issuesUnlockResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type IssuesUnlock = (
  params: Params<t_IssuesUnlockParamSchema, void, void, void>,
  respond: IssuesUnlockResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const reactionsListForIssueResponder = {
  with200: r.with200<t_reaction[]>,
  with404: r.with404<t_basic_error>,
  with410: r.with410<t_basic_error>,
  withStatus: r.withStatus,
}

type ReactionsListForIssueResponder = typeof reactionsListForIssueResponder &
  KoaRuntimeResponder

const reactionsListForIssueResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_reaction)],
    ["404", s_basic_error],
    ["410", s_basic_error],
  ],
  undefined,
)

export type ReactionsListForIssue = (
  params: Params<
    t_ReactionsListForIssueParamSchema,
    t_ReactionsListForIssueQuerySchema,
    void,
    void
  >,
  respond: ReactionsListForIssueResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_reaction[]>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
>

const reactionsCreateForIssueResponder = {
  with200: r.with200<t_reaction>,
  with201: r.with201<t_reaction>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReactionsCreateForIssueResponder =
  typeof reactionsCreateForIssueResponder & KoaRuntimeResponder

const reactionsCreateForIssueResponseValidator = responseValidationFactory(
  [
    ["200", s_reaction],
    ["201", s_reaction],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReactionsCreateForIssue = (
  params: Params<
    t_ReactionsCreateForIssueParamSchema,
    void,
    t_ReactionsCreateForIssueBodySchema,
    void
  >,
  respond: ReactionsCreateForIssueResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_reaction>
  | Response<201, t_reaction>
  | Response<422, t_validation_error>
>

const reactionsDeleteForIssueResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ReactionsDeleteForIssueResponder =
  typeof reactionsDeleteForIssueResponder & KoaRuntimeResponder

const reactionsDeleteForIssueResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type ReactionsDeleteForIssue = (
  params: Params<t_ReactionsDeleteForIssueParamSchema, void, void, void>,
  respond: ReactionsDeleteForIssueResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const issuesRemoveSubIssueResponder = {
  with200: r.with200<t_issue>,
  with400: r.with400<t_scim_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type IssuesRemoveSubIssueResponder = typeof issuesRemoveSubIssueResponder &
  KoaRuntimeResponder

const issuesRemoveSubIssueResponseValidator = responseValidationFactory(
  [
    ["200", s_issue],
    ["400", s_scim_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type IssuesRemoveSubIssue = (
  params: Params<
    t_IssuesRemoveSubIssueParamSchema,
    void,
    t_IssuesRemoveSubIssueBodySchema,
    void
  >,
  respond: IssuesRemoveSubIssueResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue>
  | Response<400, t_scim_error>
  | Response<404, t_basic_error>
>

const issuesListSubIssuesResponder = {
  with200: r.with200<t_issue[]>,
  with404: r.with404<t_basic_error>,
  with410: r.with410<t_basic_error>,
  withStatus: r.withStatus,
}

type IssuesListSubIssuesResponder = typeof issuesListSubIssuesResponder &
  KoaRuntimeResponder

const issuesListSubIssuesResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_issue)],
    ["404", s_basic_error],
    ["410", s_basic_error],
  ],
  undefined,
)

export type IssuesListSubIssues = (
  params: Params<
    t_IssuesListSubIssuesParamSchema,
    t_IssuesListSubIssuesQuerySchema,
    void,
    void
  >,
  respond: IssuesListSubIssuesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue[]>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
>

const issuesAddSubIssueResponder = {
  with201: r.with201<t_issue>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with410: r.with410<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type IssuesAddSubIssueResponder = typeof issuesAddSubIssueResponder &
  KoaRuntimeResponder

const issuesAddSubIssueResponseValidator = responseValidationFactory(
  [
    ["201", s_issue],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["410", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type IssuesAddSubIssue = (
  params: Params<
    t_IssuesAddSubIssueParamSchema,
    void,
    t_IssuesAddSubIssueBodySchema,
    void
  >,
  respond: IssuesAddSubIssueResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_issue>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
  | Response<422, t_validation_error>
>

const issuesReprioritizeSubIssueResponder = {
  with200: r.with200<t_issue>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type IssuesReprioritizeSubIssueResponder =
  typeof issuesReprioritizeSubIssueResponder & KoaRuntimeResponder

const issuesReprioritizeSubIssueResponseValidator = responseValidationFactory(
  [
    ["200", s_issue],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error_simple],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type IssuesReprioritizeSubIssue = (
  params: Params<
    t_IssuesReprioritizeSubIssueParamSchema,
    void,
    t_IssuesReprioritizeSubIssueBodySchema,
    void
  >,
  respond: IssuesReprioritizeSubIssueResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const issuesListEventsForTimelineResponder = {
  with200: r.with200<t_timeline_issue_events[]>,
  with404: r.with404<t_basic_error>,
  with410: r.with410<t_basic_error>,
  withStatus: r.withStatus,
}

type IssuesListEventsForTimelineResponder =
  typeof issuesListEventsForTimelineResponder & KoaRuntimeResponder

const issuesListEventsForTimelineResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_timeline_issue_events)],
    ["404", s_basic_error],
    ["410", s_basic_error],
  ],
  undefined,
)

export type IssuesListEventsForTimeline = (
  params: Params<
    t_IssuesListEventsForTimelineParamSchema,
    t_IssuesListEventsForTimelineQuerySchema,
    void,
    void
  >,
  respond: IssuesListEventsForTimelineResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_timeline_issue_events[]>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
>

const reposListDeployKeysResponder = {
  with200: r.with200<t_deploy_key[]>,
  withStatus: r.withStatus,
}

type ReposListDeployKeysResponder = typeof reposListDeployKeysResponder &
  KoaRuntimeResponder

const reposListDeployKeysResponseValidator = responseValidationFactory(
  [["200", z.array(s_deploy_key)]],
  undefined,
)

export type ReposListDeployKeys = (
  params: Params<
    t_ReposListDeployKeysParamSchema,
    t_ReposListDeployKeysQuerySchema,
    void,
    void
  >,
  respond: ReposListDeployKeysResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_deploy_key[]>>

const reposCreateDeployKeyResponder = {
  with201: r.with201<t_deploy_key>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposCreateDeployKeyResponder = typeof reposCreateDeployKeyResponder &
  KoaRuntimeResponder

const reposCreateDeployKeyResponseValidator = responseValidationFactory(
  [
    ["201", s_deploy_key],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposCreateDeployKey = (
  params: Params<
    t_ReposCreateDeployKeyParamSchema,
    void,
    t_ReposCreateDeployKeyBodySchema,
    void
  >,
  respond: ReposCreateDeployKeyResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_deploy_key>
  | Response<422, t_validation_error>
>

const reposGetDeployKeyResponder = {
  with200: r.with200<t_deploy_key>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetDeployKeyResponder = typeof reposGetDeployKeyResponder &
  KoaRuntimeResponder

const reposGetDeployKeyResponseValidator = responseValidationFactory(
  [
    ["200", s_deploy_key],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposGetDeployKey = (
  params: Params<t_ReposGetDeployKeyParamSchema, void, void, void>,
  respond: ReposGetDeployKeyResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_deploy_key>
  | Response<404, t_basic_error>
>

const reposDeleteDeployKeyResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ReposDeleteDeployKeyResponder = typeof reposDeleteDeployKeyResponder &
  KoaRuntimeResponder

const reposDeleteDeployKeyResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type ReposDeleteDeployKey = (
  params: Params<t_ReposDeleteDeployKeyParamSchema, void, void, void>,
  respond: ReposDeleteDeployKeyResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const issuesListLabelsForRepoResponder = {
  with200: r.with200<t_label[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type IssuesListLabelsForRepoResponder =
  typeof issuesListLabelsForRepoResponder & KoaRuntimeResponder

const issuesListLabelsForRepoResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_label)],
    ["404", s_basic_error],
  ],
  undefined,
)

export type IssuesListLabelsForRepo = (
  params: Params<
    t_IssuesListLabelsForRepoParamSchema,
    t_IssuesListLabelsForRepoQuerySchema,
    void,
    void
  >,
  respond: IssuesListLabelsForRepoResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_label[]>
  | Response<404, t_basic_error>
>

const issuesCreateLabelResponder = {
  with201: r.with201<t_label>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type IssuesCreateLabelResponder = typeof issuesCreateLabelResponder &
  KoaRuntimeResponder

const issuesCreateLabelResponseValidator = responseValidationFactory(
  [
    ["201", s_label],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type IssuesCreateLabel = (
  params: Params<
    t_IssuesCreateLabelParamSchema,
    void,
    t_IssuesCreateLabelBodySchema,
    void
  >,
  respond: IssuesCreateLabelResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_label>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const issuesGetLabelResponder = {
  with200: r.with200<t_label>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type IssuesGetLabelResponder = typeof issuesGetLabelResponder &
  KoaRuntimeResponder

const issuesGetLabelResponseValidator = responseValidationFactory(
  [
    ["200", s_label],
    ["404", s_basic_error],
  ],
  undefined,
)

export type IssuesGetLabel = (
  params: Params<t_IssuesGetLabelParamSchema, void, void, void>,
  respond: IssuesGetLabelResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_label>
  | Response<404, t_basic_error>
>

const issuesUpdateLabelResponder = {
  with200: r.with200<t_label>,
  withStatus: r.withStatus,
}

type IssuesUpdateLabelResponder = typeof issuesUpdateLabelResponder &
  KoaRuntimeResponder

const issuesUpdateLabelResponseValidator = responseValidationFactory(
  [["200", s_label]],
  undefined,
)

export type IssuesUpdateLabel = (
  params: Params<
    t_IssuesUpdateLabelParamSchema,
    void,
    t_IssuesUpdateLabelBodySchema | undefined,
    void
  >,
  respond: IssuesUpdateLabelResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_label>>

const issuesDeleteLabelResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type IssuesDeleteLabelResponder = typeof issuesDeleteLabelResponder &
  KoaRuntimeResponder

const issuesDeleteLabelResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type IssuesDeleteLabel = (
  params: Params<t_IssuesDeleteLabelParamSchema, void, void, void>,
  respond: IssuesDeleteLabelResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const reposListLanguagesResponder = {
  with200: r.with200<t_language>,
  withStatus: r.withStatus,
}

type ReposListLanguagesResponder = typeof reposListLanguagesResponder &
  KoaRuntimeResponder

const reposListLanguagesResponseValidator = responseValidationFactory(
  [["200", s_language]],
  undefined,
)

export type ReposListLanguages = (
  params: Params<t_ReposListLanguagesParamSchema, void, void, void>,
  respond: ReposListLanguagesResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_language>>

const licensesGetForRepoResponder = {
  with200: r.with200<t_license_content>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type LicensesGetForRepoResponder = typeof licensesGetForRepoResponder &
  KoaRuntimeResponder

const licensesGetForRepoResponseValidator = responseValidationFactory(
  [
    ["200", s_license_content],
    ["404", s_basic_error],
  ],
  undefined,
)

export type LicensesGetForRepo = (
  params: Params<
    t_LicensesGetForRepoParamSchema,
    t_LicensesGetForRepoQuerySchema,
    void,
    void
  >,
  respond: LicensesGetForRepoResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_license_content>
  | Response<404, t_basic_error>
>

const reposMergeUpstreamResponder = {
  with200: r.with200<t_merged_upstream>,
  with409: r.with409<void>,
  with422: r.with422<void>,
  withStatus: r.withStatus,
}

type ReposMergeUpstreamResponder = typeof reposMergeUpstreamResponder &
  KoaRuntimeResponder

const reposMergeUpstreamResponseValidator = responseValidationFactory(
  [
    ["200", s_merged_upstream],
    ["409", z.undefined()],
    ["422", z.undefined()],
  ],
  undefined,
)

export type ReposMergeUpstream = (
  params: Params<
    t_ReposMergeUpstreamParamSchema,
    void,
    t_ReposMergeUpstreamBodySchema,
    void
  >,
  respond: ReposMergeUpstreamResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_merged_upstream>
  | Response<409, void>
  | Response<422, void>
>

const reposMergeResponder = {
  with201: r.with201<t_commit>,
  with204: r.with204<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<void>,
  with409: r.with409<void>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposMergeResponder = typeof reposMergeResponder & KoaRuntimeResponder

const reposMergeResponseValidator = responseValidationFactory(
  [
    ["201", s_commit],
    ["204", z.undefined()],
    ["403", s_basic_error],
    ["404", z.undefined()],
    ["409", z.undefined()],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposMerge = (
  params: Params<t_ReposMergeParamSchema, void, t_ReposMergeBodySchema, void>,
  respond: ReposMergeResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_commit>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<404, void>
  | Response<409, void>
  | Response<422, t_validation_error>
>

const issuesListMilestonesResponder = {
  with200: r.with200<t_milestone[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type IssuesListMilestonesResponder = typeof issuesListMilestonesResponder &
  KoaRuntimeResponder

const issuesListMilestonesResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_milestone)],
    ["404", s_basic_error],
  ],
  undefined,
)

export type IssuesListMilestones = (
  params: Params<
    t_IssuesListMilestonesParamSchema,
    t_IssuesListMilestonesQuerySchema,
    void,
    void
  >,
  respond: IssuesListMilestonesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_milestone[]>
  | Response<404, t_basic_error>
>

const issuesCreateMilestoneResponder = {
  with201: r.with201<t_milestone>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type IssuesCreateMilestoneResponder = typeof issuesCreateMilestoneResponder &
  KoaRuntimeResponder

const issuesCreateMilestoneResponseValidator = responseValidationFactory(
  [
    ["201", s_milestone],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type IssuesCreateMilestone = (
  params: Params<
    t_IssuesCreateMilestoneParamSchema,
    void,
    t_IssuesCreateMilestoneBodySchema,
    void
  >,
  respond: IssuesCreateMilestoneResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_milestone>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const issuesGetMilestoneResponder = {
  with200: r.with200<t_milestone>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type IssuesGetMilestoneResponder = typeof issuesGetMilestoneResponder &
  KoaRuntimeResponder

const issuesGetMilestoneResponseValidator = responseValidationFactory(
  [
    ["200", s_milestone],
    ["404", s_basic_error],
  ],
  undefined,
)

export type IssuesGetMilestone = (
  params: Params<t_IssuesGetMilestoneParamSchema, void, void, void>,
  respond: IssuesGetMilestoneResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_milestone>
  | Response<404, t_basic_error>
>

const issuesUpdateMilestoneResponder = {
  with200: r.with200<t_milestone>,
  withStatus: r.withStatus,
}

type IssuesUpdateMilestoneResponder = typeof issuesUpdateMilestoneResponder &
  KoaRuntimeResponder

const issuesUpdateMilestoneResponseValidator = responseValidationFactory(
  [["200", s_milestone]],
  undefined,
)

export type IssuesUpdateMilestone = (
  params: Params<
    t_IssuesUpdateMilestoneParamSchema,
    void,
    t_IssuesUpdateMilestoneBodySchema | undefined,
    void
  >,
  respond: IssuesUpdateMilestoneResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_milestone>>

const issuesDeleteMilestoneResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type IssuesDeleteMilestoneResponder = typeof issuesDeleteMilestoneResponder &
  KoaRuntimeResponder

const issuesDeleteMilestoneResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
  ],
  undefined,
)

export type IssuesDeleteMilestone = (
  params: Params<t_IssuesDeleteMilestoneParamSchema, void, void, void>,
  respond: IssuesDeleteMilestoneResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

const issuesListLabelsForMilestoneResponder = {
  with200: r.with200<t_label[]>,
  withStatus: r.withStatus,
}

type IssuesListLabelsForMilestoneResponder =
  typeof issuesListLabelsForMilestoneResponder & KoaRuntimeResponder

const issuesListLabelsForMilestoneResponseValidator = responseValidationFactory(
  [["200", z.array(s_label)]],
  undefined,
)

export type IssuesListLabelsForMilestone = (
  params: Params<
    t_IssuesListLabelsForMilestoneParamSchema,
    t_IssuesListLabelsForMilestoneQuerySchema,
    void,
    void
  >,
  respond: IssuesListLabelsForMilestoneResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_label[]>>

const activityListRepoNotificationsForAuthenticatedUserResponder = {
  with200: r.with200<t_thread[]>,
  withStatus: r.withStatus,
}

type ActivityListRepoNotificationsForAuthenticatedUserResponder =
  typeof activityListRepoNotificationsForAuthenticatedUserResponder &
    KoaRuntimeResponder

const activityListRepoNotificationsForAuthenticatedUserResponseValidator =
  responseValidationFactory([["200", z.array(s_thread)]], undefined)

export type ActivityListRepoNotificationsForAuthenticatedUser = (
  params: Params<
    t_ActivityListRepoNotificationsForAuthenticatedUserParamSchema,
    t_ActivityListRepoNotificationsForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: ActivityListRepoNotificationsForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_thread[]>>

const activityMarkRepoNotificationsAsReadResponder = {
  with202: r.with202<{
    message?: string
    url?: string
  }>,
  with205: r.with205<void>,
  withStatus: r.withStatus,
}

type ActivityMarkRepoNotificationsAsReadResponder =
  typeof activityMarkRepoNotificationsAsReadResponder & KoaRuntimeResponder

const activityMarkRepoNotificationsAsReadResponseValidator =
  responseValidationFactory(
    [
      [
        "202",
        z.object({
          message: z.string().optional(),
          url: z.string().optional(),
        }),
      ],
      ["205", z.undefined()],
    ],
    undefined,
  )

export type ActivityMarkRepoNotificationsAsRead = (
  params: Params<
    t_ActivityMarkRepoNotificationsAsReadParamSchema,
    void,
    t_ActivityMarkRepoNotificationsAsReadBodySchema | undefined,
    void
  >,
  respond: ActivityMarkRepoNotificationsAsReadResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      202,
      {
        message?: string
        url?: string
      }
    >
  | Response<205, void>
>

const reposGetPagesResponder = {
  with200: r.with200<t_page>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetPagesResponder = typeof reposGetPagesResponder &
  KoaRuntimeResponder

const reposGetPagesResponseValidator = responseValidationFactory(
  [
    ["200", s_page],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposGetPages = (
  params: Params<t_ReposGetPagesParamSchema, void, void, void>,
  respond: ReposGetPagesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_page>
  | Response<404, t_basic_error>
>

const reposCreatePagesSiteResponder = {
  with201: r.with201<t_page>,
  with409: r.with409<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposCreatePagesSiteResponder = typeof reposCreatePagesSiteResponder &
  KoaRuntimeResponder

const reposCreatePagesSiteResponseValidator = responseValidationFactory(
  [
    ["201", s_page],
    ["409", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposCreatePagesSite = (
  params: Params<
    t_ReposCreatePagesSiteParamSchema,
    void,
    t_ReposCreatePagesSiteBodySchema,
    void
  >,
  respond: ReposCreatePagesSiteResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_page>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error>
>

const reposUpdateInformationAboutPagesSiteResponder = {
  with204: r.with204<void>,
  with400: r.with400<t_scim_error>,
  with409: r.with409<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposUpdateInformationAboutPagesSiteResponder =
  typeof reposUpdateInformationAboutPagesSiteResponder & KoaRuntimeResponder

const reposUpdateInformationAboutPagesSiteResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["400", s_scim_error],
      ["409", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type ReposUpdateInformationAboutPagesSite = (
  params: Params<
    t_ReposUpdateInformationAboutPagesSiteParamSchema,
    void,
    t_ReposUpdateInformationAboutPagesSiteBodySchema,
    void
  >,
  respond: ReposUpdateInformationAboutPagesSiteResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<400, t_scim_error>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error>
>

const reposDeletePagesSiteResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposDeletePagesSiteResponder = typeof reposDeletePagesSiteResponder &
  KoaRuntimeResponder

const reposDeletePagesSiteResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
    ["409", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposDeletePagesSite = (
  params: Params<t_ReposDeletePagesSiteParamSchema, void, void, void>,
  respond: ReposDeletePagesSiteResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error>
>

const reposListPagesBuildsResponder = {
  with200: r.with200<t_page_build[]>,
  withStatus: r.withStatus,
}

type ReposListPagesBuildsResponder = typeof reposListPagesBuildsResponder &
  KoaRuntimeResponder

const reposListPagesBuildsResponseValidator = responseValidationFactory(
  [["200", z.array(s_page_build)]],
  undefined,
)

export type ReposListPagesBuilds = (
  params: Params<
    t_ReposListPagesBuildsParamSchema,
    t_ReposListPagesBuildsQuerySchema,
    void,
    void
  >,
  respond: ReposListPagesBuildsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_page_build[]>>

const reposRequestPagesBuildResponder = {
  with201: r.with201<t_page_build_status>,
  withStatus: r.withStatus,
}

type ReposRequestPagesBuildResponder = typeof reposRequestPagesBuildResponder &
  KoaRuntimeResponder

const reposRequestPagesBuildResponseValidator = responseValidationFactory(
  [["201", s_page_build_status]],
  undefined,
)

export type ReposRequestPagesBuild = (
  params: Params<t_ReposRequestPagesBuildParamSchema, void, void, void>,
  respond: ReposRequestPagesBuildResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_page_build_status>>

const reposGetLatestPagesBuildResponder = {
  with200: r.with200<t_page_build>,
  withStatus: r.withStatus,
}

type ReposGetLatestPagesBuildResponder =
  typeof reposGetLatestPagesBuildResponder & KoaRuntimeResponder

const reposGetLatestPagesBuildResponseValidator = responseValidationFactory(
  [["200", s_page_build]],
  undefined,
)

export type ReposGetLatestPagesBuild = (
  params: Params<t_ReposGetLatestPagesBuildParamSchema, void, void, void>,
  respond: ReposGetLatestPagesBuildResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_page_build>>

const reposGetPagesBuildResponder = {
  with200: r.with200<t_page_build>,
  withStatus: r.withStatus,
}

type ReposGetPagesBuildResponder = typeof reposGetPagesBuildResponder &
  KoaRuntimeResponder

const reposGetPagesBuildResponseValidator = responseValidationFactory(
  [["200", s_page_build]],
  undefined,
)

export type ReposGetPagesBuild = (
  params: Params<t_ReposGetPagesBuildParamSchema, void, void, void>,
  respond: ReposGetPagesBuildResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_page_build>>

const reposCreatePagesDeploymentResponder = {
  with200: r.with200<t_page_deployment>,
  with400: r.with400<t_scim_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposCreatePagesDeploymentResponder =
  typeof reposCreatePagesDeploymentResponder & KoaRuntimeResponder

const reposCreatePagesDeploymentResponseValidator = responseValidationFactory(
  [
    ["200", s_page_deployment],
    ["400", s_scim_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposCreatePagesDeployment = (
  params: Params<
    t_ReposCreatePagesDeploymentParamSchema,
    void,
    t_ReposCreatePagesDeploymentBodySchema,
    void
  >,
  respond: ReposCreatePagesDeploymentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_page_deployment>
  | Response<400, t_scim_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const reposGetPagesDeploymentResponder = {
  with200: r.with200<t_pages_deployment_status>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetPagesDeploymentResponder =
  typeof reposGetPagesDeploymentResponder & KoaRuntimeResponder

const reposGetPagesDeploymentResponseValidator = responseValidationFactory(
  [
    ["200", s_pages_deployment_status],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposGetPagesDeployment = (
  params: Params<t_ReposGetPagesDeploymentParamSchema, void, void, void>,
  respond: ReposGetPagesDeploymentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pages_deployment_status>
  | Response<404, t_basic_error>
>

const reposCancelPagesDeploymentResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposCancelPagesDeploymentResponder =
  typeof reposCancelPagesDeploymentResponder & KoaRuntimeResponder

const reposCancelPagesDeploymentResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposCancelPagesDeployment = (
  params: Params<t_ReposCancelPagesDeploymentParamSchema, void, void, void>,
  respond: ReposCancelPagesDeploymentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

const reposGetPagesHealthCheckResponder = {
  with200: r.with200<t_pages_health_check>,
  with202: r.with202<t_empty_object>,
  with400: r.with400<void>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<void>,
  withStatus: r.withStatus,
}

type ReposGetPagesHealthCheckResponder =
  typeof reposGetPagesHealthCheckResponder & KoaRuntimeResponder

const reposGetPagesHealthCheckResponseValidator = responseValidationFactory(
  [
    ["200", s_pages_health_check],
    ["202", s_empty_object],
    ["400", z.undefined()],
    ["404", s_basic_error],
    ["422", z.undefined()],
  ],
  undefined,
)

export type ReposGetPagesHealthCheck = (
  params: Params<t_ReposGetPagesHealthCheckParamSchema, void, void, void>,
  respond: ReposGetPagesHealthCheckResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pages_health_check>
  | Response<202, t_empty_object>
  | Response<400, void>
  | Response<404, t_basic_error>
  | Response<422, void>
>

const reposCheckPrivateVulnerabilityReportingResponder = {
  with200: r.with200<{
    enabled: boolean
  }>,
  with422: r.with422<t_scim_error>,
  withStatus: r.withStatus,
}

type ReposCheckPrivateVulnerabilityReportingResponder =
  typeof reposCheckPrivateVulnerabilityReportingResponder & KoaRuntimeResponder

const reposCheckPrivateVulnerabilityReportingResponseValidator =
  responseValidationFactory(
    [
      ["200", z.object({ enabled: PermissiveBoolean })],
      ["422", s_scim_error],
    ],
    undefined,
  )

export type ReposCheckPrivateVulnerabilityReporting = (
  params: Params<
    t_ReposCheckPrivateVulnerabilityReportingParamSchema,
    void,
    void,
    void
  >,
  respond: ReposCheckPrivateVulnerabilityReportingResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        enabled: boolean
      }
    >
  | Response<422, t_scim_error>
>

const reposEnablePrivateVulnerabilityReportingResponder = {
  with204: r.with204<void>,
  with422: r.with422<t_scim_error>,
  withStatus: r.withStatus,
}

type ReposEnablePrivateVulnerabilityReportingResponder =
  typeof reposEnablePrivateVulnerabilityReportingResponder & KoaRuntimeResponder

const reposEnablePrivateVulnerabilityReportingResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["422", s_scim_error],
    ],
    undefined,
  )

export type ReposEnablePrivateVulnerabilityReporting = (
  params: Params<
    t_ReposEnablePrivateVulnerabilityReportingParamSchema,
    void,
    void,
    void
  >,
  respond: ReposEnablePrivateVulnerabilityReportingResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<422, t_scim_error>
>

const reposDisablePrivateVulnerabilityReportingResponder = {
  with204: r.with204<void>,
  with422: r.with422<t_scim_error>,
  withStatus: r.withStatus,
}

type ReposDisablePrivateVulnerabilityReportingResponder =
  typeof reposDisablePrivateVulnerabilityReportingResponder &
    KoaRuntimeResponder

const reposDisablePrivateVulnerabilityReportingResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["422", s_scim_error],
    ],
    undefined,
  )

export type ReposDisablePrivateVulnerabilityReporting = (
  params: Params<
    t_ReposDisablePrivateVulnerabilityReportingParamSchema,
    void,
    void,
    void
  >,
  respond: ReposDisablePrivateVulnerabilityReportingResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<422, t_scim_error>
>

const projectsListForRepoResponder = {
  with200: r.with200<t_project[]>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with410: r.with410<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type ProjectsListForRepoResponder = typeof projectsListForRepoResponder &
  KoaRuntimeResponder

const projectsListForRepoResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_project)],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["410", s_basic_error],
    ["422", s_validation_error_simple],
  ],
  undefined,
)

export type ProjectsListForRepo = (
  params: Params<
    t_ProjectsListForRepoParamSchema,
    t_ProjectsListForRepoQuerySchema,
    void,
    void
  >,
  respond: ProjectsListForRepoResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_project[]>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const projectsCreateForRepoResponder = {
  with201: r.with201<t_project>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with410: r.with410<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type ProjectsCreateForRepoResponder = typeof projectsCreateForRepoResponder &
  KoaRuntimeResponder

const projectsCreateForRepoResponseValidator = responseValidationFactory(
  [
    ["201", s_project],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["410", s_basic_error],
    ["422", s_validation_error_simple],
  ],
  undefined,
)

export type ProjectsCreateForRepo = (
  params: Params<
    t_ProjectsCreateForRepoParamSchema,
    void,
    t_ProjectsCreateForRepoBodySchema,
    void
  >,
  respond: ProjectsCreateForRepoResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_project>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const reposGetCustomPropertiesValuesResponder = {
  with200: r.with200<t_custom_property_value[]>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetCustomPropertiesValuesResponder =
  typeof reposGetCustomPropertiesValuesResponder & KoaRuntimeResponder

const reposGetCustomPropertiesValuesResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_custom_property_value)],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ReposGetCustomPropertiesValues = (
  params: Params<t_ReposGetCustomPropertiesValuesParamSchema, void, void, void>,
  respond: ReposGetCustomPropertiesValuesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_custom_property_value[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const reposCreateOrUpdateCustomPropertiesValuesResponder = {
  with204: r.with204<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposCreateOrUpdateCustomPropertiesValuesResponder =
  typeof reposCreateOrUpdateCustomPropertiesValuesResponder &
    KoaRuntimeResponder

const reposCreateOrUpdateCustomPropertiesValuesResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type ReposCreateOrUpdateCustomPropertiesValues = (
  params: Params<
    t_ReposCreateOrUpdateCustomPropertiesValuesParamSchema,
    void,
    t_ReposCreateOrUpdateCustomPropertiesValuesBodySchema,
    void
  >,
  respond: ReposCreateOrUpdateCustomPropertiesValuesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const pullsListResponder = {
  with200: r.with200<t_pull_request_simple[]>,
  with304: r.with304<void>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type PullsListResponder = typeof pullsListResponder & KoaRuntimeResponder

const pullsListResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_pull_request_simple)],
    ["304", z.undefined()],
    ["422", s_validation_error],
  ],
  undefined,
)

export type PullsList = (
  params: Params<t_PullsListParamSchema, t_PullsListQuerySchema, void, void>,
  respond: PullsListResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request_simple[]>
  | Response<304, void>
  | Response<422, t_validation_error>
>

const pullsCreateResponder = {
  with201: r.with201<t_pull_request>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type PullsCreateResponder = typeof pullsCreateResponder & KoaRuntimeResponder

const pullsCreateResponseValidator = responseValidationFactory(
  [
    ["201", s_pull_request],
    ["403", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type PullsCreate = (
  params: Params<t_PullsCreateParamSchema, void, t_PullsCreateBodySchema, void>,
  respond: PullsCreateResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_pull_request>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

const pullsListReviewCommentsForRepoResponder = {
  with200: r.with200<t_pull_request_review_comment[]>,
  withStatus: r.withStatus,
}

type PullsListReviewCommentsForRepoResponder =
  typeof pullsListReviewCommentsForRepoResponder & KoaRuntimeResponder

const pullsListReviewCommentsForRepoResponseValidator =
  responseValidationFactory(
    [["200", z.array(s_pull_request_review_comment)]],
    undefined,
  )

export type PullsListReviewCommentsForRepo = (
  params: Params<
    t_PullsListReviewCommentsForRepoParamSchema,
    t_PullsListReviewCommentsForRepoQuerySchema,
    void,
    void
  >,
  respond: PullsListReviewCommentsForRepoResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_pull_request_review_comment[]>
>

const pullsGetReviewCommentResponder = {
  with200: r.with200<t_pull_request_review_comment>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type PullsGetReviewCommentResponder = typeof pullsGetReviewCommentResponder &
  KoaRuntimeResponder

const pullsGetReviewCommentResponseValidator = responseValidationFactory(
  [
    ["200", s_pull_request_review_comment],
    ["404", s_basic_error],
  ],
  undefined,
)

export type PullsGetReviewComment = (
  params: Params<t_PullsGetReviewCommentParamSchema, void, void, void>,
  respond: PullsGetReviewCommentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request_review_comment>
  | Response<404, t_basic_error>
>

const pullsUpdateReviewCommentResponder = {
  with200: r.with200<t_pull_request_review_comment>,
  withStatus: r.withStatus,
}

type PullsUpdateReviewCommentResponder =
  typeof pullsUpdateReviewCommentResponder & KoaRuntimeResponder

const pullsUpdateReviewCommentResponseValidator = responseValidationFactory(
  [["200", s_pull_request_review_comment]],
  undefined,
)

export type PullsUpdateReviewComment = (
  params: Params<
    t_PullsUpdateReviewCommentParamSchema,
    void,
    t_PullsUpdateReviewCommentBodySchema,
    void
  >,
  respond: PullsUpdateReviewCommentResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_pull_request_review_comment>
>

const pullsDeleteReviewCommentResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type PullsDeleteReviewCommentResponder =
  typeof pullsDeleteReviewCommentResponder & KoaRuntimeResponder

const pullsDeleteReviewCommentResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
  ],
  undefined,
)

export type PullsDeleteReviewComment = (
  params: Params<t_PullsDeleteReviewCommentParamSchema, void, void, void>,
  respond: PullsDeleteReviewCommentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

const reactionsListForPullRequestReviewCommentResponder = {
  with200: r.with200<t_reaction[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReactionsListForPullRequestReviewCommentResponder =
  typeof reactionsListForPullRequestReviewCommentResponder & KoaRuntimeResponder

const reactionsListForPullRequestReviewCommentResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_reaction)],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ReactionsListForPullRequestReviewComment = (
  params: Params<
    t_ReactionsListForPullRequestReviewCommentParamSchema,
    t_ReactionsListForPullRequestReviewCommentQuerySchema,
    void,
    void
  >,
  respond: ReactionsListForPullRequestReviewCommentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_reaction[]>
  | Response<404, t_basic_error>
>

const reactionsCreateForPullRequestReviewCommentResponder = {
  with200: r.with200<t_reaction>,
  with201: r.with201<t_reaction>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReactionsCreateForPullRequestReviewCommentResponder =
  typeof reactionsCreateForPullRequestReviewCommentResponder &
    KoaRuntimeResponder

const reactionsCreateForPullRequestReviewCommentResponseValidator =
  responseValidationFactory(
    [
      ["200", s_reaction],
      ["201", s_reaction],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type ReactionsCreateForPullRequestReviewComment = (
  params: Params<
    t_ReactionsCreateForPullRequestReviewCommentParamSchema,
    void,
    t_ReactionsCreateForPullRequestReviewCommentBodySchema,
    void
  >,
  respond: ReactionsCreateForPullRequestReviewCommentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_reaction>
  | Response<201, t_reaction>
  | Response<422, t_validation_error>
>

const reactionsDeleteForPullRequestCommentResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ReactionsDeleteForPullRequestCommentResponder =
  typeof reactionsDeleteForPullRequestCommentResponder & KoaRuntimeResponder

const reactionsDeleteForPullRequestCommentResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ReactionsDeleteForPullRequestComment = (
  params: Params<
    t_ReactionsDeleteForPullRequestCommentParamSchema,
    void,
    void,
    void
  >,
  respond: ReactionsDeleteForPullRequestCommentResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const pullsGetResponder = {
  with200: r.with200<t_pull_request>,
  with304: r.with304<void>,
  with404: r.with404<t_basic_error>,
  with406: r.with406<t_basic_error>,
  with500: r.with500<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type PullsGetResponder = typeof pullsGetResponder & KoaRuntimeResponder

const pullsGetResponseValidator = responseValidationFactory(
  [
    ["200", s_pull_request],
    ["304", z.undefined()],
    ["404", s_basic_error],
    ["406", s_basic_error],
    ["500", s_basic_error],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type PullsGet = (
  params: Params<t_PullsGetParamSchema, void, void, void>,
  respond: PullsGetResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request>
  | Response<304, void>
  | Response<404, t_basic_error>
  | Response<406, t_basic_error>
  | Response<500, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const pullsUpdateResponder = {
  with200: r.with200<t_pull_request>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type PullsUpdateResponder = typeof pullsUpdateResponder & KoaRuntimeResponder

const pullsUpdateResponseValidator = responseValidationFactory(
  [
    ["200", s_pull_request],
    ["403", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type PullsUpdate = (
  params: Params<
    t_PullsUpdateParamSchema,
    void,
    t_PullsUpdateBodySchema | undefined,
    void
  >,
  respond: PullsUpdateResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

const codespacesCreateWithPrForAuthenticatedUserResponder = {
  with201: r.with201<t_codespace>,
  with202: r.with202<t_codespace>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodespacesCreateWithPrForAuthenticatedUserResponder =
  typeof codespacesCreateWithPrForAuthenticatedUserResponder &
    KoaRuntimeResponder

const codespacesCreateWithPrForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["201", s_codespace],
      ["202", s_codespace],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

export type CodespacesCreateWithPrForAuthenticatedUser = (
  params: Params<
    t_CodespacesCreateWithPrForAuthenticatedUserParamSchema,
    void,
    t_CodespacesCreateWithPrForAuthenticatedUserBodySchema,
    void
  >,
  respond: CodespacesCreateWithPrForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_codespace>
  | Response<202, t_codespace>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const pullsListReviewCommentsResponder = {
  with200: r.with200<t_pull_request_review_comment[]>,
  withStatus: r.withStatus,
}

type PullsListReviewCommentsResponder =
  typeof pullsListReviewCommentsResponder & KoaRuntimeResponder

const pullsListReviewCommentsResponseValidator = responseValidationFactory(
  [["200", z.array(s_pull_request_review_comment)]],
  undefined,
)

export type PullsListReviewComments = (
  params: Params<
    t_PullsListReviewCommentsParamSchema,
    t_PullsListReviewCommentsQuerySchema,
    void,
    void
  >,
  respond: PullsListReviewCommentsResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_pull_request_review_comment[]>
>

const pullsCreateReviewCommentResponder = {
  with201: r.with201<t_pull_request_review_comment>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type PullsCreateReviewCommentResponder =
  typeof pullsCreateReviewCommentResponder & KoaRuntimeResponder

const pullsCreateReviewCommentResponseValidator = responseValidationFactory(
  [
    ["201", s_pull_request_review_comment],
    ["403", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type PullsCreateReviewComment = (
  params: Params<
    t_PullsCreateReviewCommentParamSchema,
    void,
    t_PullsCreateReviewCommentBodySchema,
    void
  >,
  respond: PullsCreateReviewCommentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_pull_request_review_comment>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

const pullsCreateReplyForReviewCommentResponder = {
  with201: r.with201<t_pull_request_review_comment>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type PullsCreateReplyForReviewCommentResponder =
  typeof pullsCreateReplyForReviewCommentResponder & KoaRuntimeResponder

const pullsCreateReplyForReviewCommentResponseValidator =
  responseValidationFactory(
    [
      ["201", s_pull_request_review_comment],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type PullsCreateReplyForReviewComment = (
  params: Params<
    t_PullsCreateReplyForReviewCommentParamSchema,
    void,
    t_PullsCreateReplyForReviewCommentBodySchema,
    void
  >,
  respond: PullsCreateReplyForReviewCommentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_pull_request_review_comment>
  | Response<404, t_basic_error>
>

const pullsListCommitsResponder = {
  with200: r.with200<t_commit[]>,
  withStatus: r.withStatus,
}

type PullsListCommitsResponder = typeof pullsListCommitsResponder &
  KoaRuntimeResponder

const pullsListCommitsResponseValidator = responseValidationFactory(
  [["200", z.array(s_commit)]],
  undefined,
)

export type PullsListCommits = (
  params: Params<
    t_PullsListCommitsParamSchema,
    t_PullsListCommitsQuerySchema,
    void,
    void
  >,
  respond: PullsListCommitsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_commit[]>>

const pullsListFilesResponder = {
  with200: r.with200<t_diff_entry[]>,
  with422: r.with422<t_validation_error>,
  with500: r.with500<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type PullsListFilesResponder = typeof pullsListFilesResponder &
  KoaRuntimeResponder

const pullsListFilesResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_diff_entry)],
    ["422", s_validation_error],
    ["500", s_basic_error],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type PullsListFiles = (
  params: Params<
    t_PullsListFilesParamSchema,
    t_PullsListFilesQuerySchema,
    void,
    void
  >,
  respond: PullsListFilesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_diff_entry[]>
  | Response<422, t_validation_error>
  | Response<500, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const pullsCheckIfMergedResponder = {
  with204: r.with204<void>,
  with404: r.with404<void>,
  withStatus: r.withStatus,
}

type PullsCheckIfMergedResponder = typeof pullsCheckIfMergedResponder &
  KoaRuntimeResponder

const pullsCheckIfMergedResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", z.undefined()],
  ],
  undefined,
)

export type PullsCheckIfMerged = (
  params: Params<t_PullsCheckIfMergedParamSchema, void, void, void>,
  respond: PullsCheckIfMergedResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<404, void>
>

const pullsMergeResponder = {
  with200: r.with200<t_pull_request_merge_result>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with405: r.with405<{
    documentation_url?: string
    message?: string
  }>,
  with409: r.with409<{
    documentation_url?: string
    message?: string
  }>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type PullsMergeResponder = typeof pullsMergeResponder & KoaRuntimeResponder

const pullsMergeResponseValidator = responseValidationFactory(
  [
    ["200", s_pull_request_merge_result],
    ["403", s_basic_error],
    ["404", s_basic_error],
    [
      "405",
      z.object({
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
    [
      "409",
      z.object({
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
    ["422", s_validation_error],
  ],
  undefined,
)

export type PullsMerge = (
  params: Params<
    t_PullsMergeParamSchema,
    void,
    t_PullsMergeBodySchema | undefined,
    void
  >,
  respond: PullsMergeResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request_merge_result>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      405,
      {
        documentation_url?: string
        message?: string
      }
    >
  | Response<
      409,
      {
        documentation_url?: string
        message?: string
      }
    >
  | Response<422, t_validation_error>
>

const pullsListRequestedReviewersResponder = {
  with200: r.with200<t_pull_request_review_request>,
  withStatus: r.withStatus,
}

type PullsListRequestedReviewersResponder =
  typeof pullsListRequestedReviewersResponder & KoaRuntimeResponder

const pullsListRequestedReviewersResponseValidator = responseValidationFactory(
  [["200", s_pull_request_review_request]],
  undefined,
)

export type PullsListRequestedReviewers = (
  params: Params<t_PullsListRequestedReviewersParamSchema, void, void, void>,
  respond: PullsListRequestedReviewersResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_pull_request_review_request>
>

const pullsRequestReviewersResponder = {
  with201: r.with201<t_pull_request_simple>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<void>,
  withStatus: r.withStatus,
}

type PullsRequestReviewersResponder = typeof pullsRequestReviewersResponder &
  KoaRuntimeResponder

const pullsRequestReviewersResponseValidator = responseValidationFactory(
  [
    ["201", s_pull_request_simple],
    ["403", s_basic_error],
    ["422", z.undefined()],
  ],
  undefined,
)

export type PullsRequestReviewers = (
  params: Params<
    t_PullsRequestReviewersParamSchema,
    void,
    t_PullsRequestReviewersBodySchema | undefined,
    void
  >,
  respond: PullsRequestReviewersResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_pull_request_simple>
  | Response<403, t_basic_error>
  | Response<422, void>
>

const pullsRemoveRequestedReviewersResponder = {
  with200: r.with200<t_pull_request_simple>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type PullsRemoveRequestedReviewersResponder =
  typeof pullsRemoveRequestedReviewersResponder & KoaRuntimeResponder

const pullsRemoveRequestedReviewersResponseValidator =
  responseValidationFactory(
    [
      ["200", s_pull_request_simple],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type PullsRemoveRequestedReviewers = (
  params: Params<
    t_PullsRemoveRequestedReviewersParamSchema,
    void,
    t_PullsRemoveRequestedReviewersBodySchema,
    void
  >,
  respond: PullsRemoveRequestedReviewersResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request_simple>
  | Response<422, t_validation_error>
>

const pullsListReviewsResponder = {
  with200: r.with200<t_pull_request_review[]>,
  withStatus: r.withStatus,
}

type PullsListReviewsResponder = typeof pullsListReviewsResponder &
  KoaRuntimeResponder

const pullsListReviewsResponseValidator = responseValidationFactory(
  [["200", z.array(s_pull_request_review)]],
  undefined,
)

export type PullsListReviews = (
  params: Params<
    t_PullsListReviewsParamSchema,
    t_PullsListReviewsQuerySchema,
    void,
    void
  >,
  respond: PullsListReviewsResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_pull_request_review[]>
>

const pullsCreateReviewResponder = {
  with200: r.with200<t_pull_request_review>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type PullsCreateReviewResponder = typeof pullsCreateReviewResponder &
  KoaRuntimeResponder

const pullsCreateReviewResponseValidator = responseValidationFactory(
  [
    ["200", s_pull_request_review],
    ["403", s_basic_error],
    ["422", s_validation_error_simple],
  ],
  undefined,
)

export type PullsCreateReview = (
  params: Params<
    t_PullsCreateReviewParamSchema,
    void,
    t_PullsCreateReviewBodySchema | undefined,
    void
  >,
  respond: PullsCreateReviewResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request_review>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const pullsGetReviewResponder = {
  with200: r.with200<t_pull_request_review>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type PullsGetReviewResponder = typeof pullsGetReviewResponder &
  KoaRuntimeResponder

const pullsGetReviewResponseValidator = responseValidationFactory(
  [
    ["200", s_pull_request_review],
    ["404", s_basic_error],
  ],
  undefined,
)

export type PullsGetReview = (
  params: Params<t_PullsGetReviewParamSchema, void, void, void>,
  respond: PullsGetReviewResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request_review>
  | Response<404, t_basic_error>
>

const pullsUpdateReviewResponder = {
  with200: r.with200<t_pull_request_review>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type PullsUpdateReviewResponder = typeof pullsUpdateReviewResponder &
  KoaRuntimeResponder

const pullsUpdateReviewResponseValidator = responseValidationFactory(
  [
    ["200", s_pull_request_review],
    ["422", s_validation_error_simple],
  ],
  undefined,
)

export type PullsUpdateReview = (
  params: Params<
    t_PullsUpdateReviewParamSchema,
    void,
    t_PullsUpdateReviewBodySchema,
    void
  >,
  respond: PullsUpdateReviewResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request_review>
  | Response<422, t_validation_error_simple>
>

const pullsDeletePendingReviewResponder = {
  with200: r.with200<t_pull_request_review>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type PullsDeletePendingReviewResponder =
  typeof pullsDeletePendingReviewResponder & KoaRuntimeResponder

const pullsDeletePendingReviewResponseValidator = responseValidationFactory(
  [
    ["200", s_pull_request_review],
    ["404", s_basic_error],
    ["422", s_validation_error_simple],
  ],
  undefined,
)

export type PullsDeletePendingReview = (
  params: Params<t_PullsDeletePendingReviewParamSchema, void, void, void>,
  respond: PullsDeletePendingReviewResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request_review>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const pullsListCommentsForReviewResponder = {
  with200: r.with200<t_review_comment[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type PullsListCommentsForReviewResponder =
  typeof pullsListCommentsForReviewResponder & KoaRuntimeResponder

const pullsListCommentsForReviewResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_review_comment)],
    ["404", s_basic_error],
  ],
  undefined,
)

export type PullsListCommentsForReview = (
  params: Params<
    t_PullsListCommentsForReviewParamSchema,
    t_PullsListCommentsForReviewQuerySchema,
    void,
    void
  >,
  respond: PullsListCommentsForReviewResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_review_comment[]>
  | Response<404, t_basic_error>
>

const pullsDismissReviewResponder = {
  with200: r.with200<t_pull_request_review>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type PullsDismissReviewResponder = typeof pullsDismissReviewResponder &
  KoaRuntimeResponder

const pullsDismissReviewResponseValidator = responseValidationFactory(
  [
    ["200", s_pull_request_review],
    ["404", s_basic_error],
    ["422", s_validation_error_simple],
  ],
  undefined,
)

export type PullsDismissReview = (
  params: Params<
    t_PullsDismissReviewParamSchema,
    void,
    t_PullsDismissReviewBodySchema,
    void
  >,
  respond: PullsDismissReviewResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request_review>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const pullsSubmitReviewResponder = {
  with200: r.with200<t_pull_request_review>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type PullsSubmitReviewResponder = typeof pullsSubmitReviewResponder &
  KoaRuntimeResponder

const pullsSubmitReviewResponseValidator = responseValidationFactory(
  [
    ["200", s_pull_request_review],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error_simple],
  ],
  undefined,
)

export type PullsSubmitReview = (
  params: Params<
    t_PullsSubmitReviewParamSchema,
    void,
    t_PullsSubmitReviewBodySchema,
    void
  >,
  respond: PullsSubmitReviewResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request_review>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const pullsUpdateBranchResponder = {
  with202: r.with202<{
    message?: string
    url?: string
  }>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type PullsUpdateBranchResponder = typeof pullsUpdateBranchResponder &
  KoaRuntimeResponder

const pullsUpdateBranchResponseValidator = responseValidationFactory(
  [
    [
      "202",
      z.object({ message: z.string().optional(), url: z.string().optional() }),
    ],
    ["403", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type PullsUpdateBranch = (
  params: Params<
    t_PullsUpdateBranchParamSchema,
    void,
    t_PullsUpdateBranchBodySchema | undefined,
    void
  >,
  respond: PullsUpdateBranchResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      202,
      {
        message?: string
        url?: string
      }
    >
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

const reposGetReadmeResponder = {
  with200: r.with200<t_content_file>,
  with304: r.with304<void>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposGetReadmeResponder = typeof reposGetReadmeResponder &
  KoaRuntimeResponder

const reposGetReadmeResponseValidator = responseValidationFactory(
  [
    ["200", s_content_file],
    ["304", z.undefined()],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposGetReadme = (
  params: Params<
    t_ReposGetReadmeParamSchema,
    t_ReposGetReadmeQuerySchema,
    void,
    void
  >,
  respond: ReposGetReadmeResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_content_file>
  | Response<304, void>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const reposGetReadmeInDirectoryResponder = {
  with200: r.with200<t_content_file>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposGetReadmeInDirectoryResponder =
  typeof reposGetReadmeInDirectoryResponder & KoaRuntimeResponder

const reposGetReadmeInDirectoryResponseValidator = responseValidationFactory(
  [
    ["200", s_content_file],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposGetReadmeInDirectory = (
  params: Params<
    t_ReposGetReadmeInDirectoryParamSchema,
    t_ReposGetReadmeInDirectoryQuerySchema,
    void,
    void
  >,
  respond: ReposGetReadmeInDirectoryResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_content_file>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const reposListReleasesResponder = {
  with200: r.with200<t_release[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposListReleasesResponder = typeof reposListReleasesResponder &
  KoaRuntimeResponder

const reposListReleasesResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_release)],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposListReleases = (
  params: Params<
    t_ReposListReleasesParamSchema,
    t_ReposListReleasesQuerySchema,
    void,
    void
  >,
  respond: ReposListReleasesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_release[]>
  | Response<404, t_basic_error>
>

const reposCreateReleaseResponder = {
  with201: r.with201<t_release>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposCreateReleaseResponder = typeof reposCreateReleaseResponder &
  KoaRuntimeResponder

const reposCreateReleaseResponseValidator = responseValidationFactory(
  [
    ["201", s_release],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposCreateRelease = (
  params: Params<
    t_ReposCreateReleaseParamSchema,
    void,
    t_ReposCreateReleaseBodySchema,
    void
  >,
  respond: ReposCreateReleaseResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_release>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const reposGetReleaseAssetResponder = {
  with200: r.with200<t_release_asset>,
  with302: r.with302<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetReleaseAssetResponder = typeof reposGetReleaseAssetResponder &
  KoaRuntimeResponder

const reposGetReleaseAssetResponseValidator = responseValidationFactory(
  [
    ["200", s_release_asset],
    ["302", z.undefined()],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposGetReleaseAsset = (
  params: Params<t_ReposGetReleaseAssetParamSchema, void, void, void>,
  respond: ReposGetReleaseAssetResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_release_asset>
  | Response<302, void>
  | Response<404, t_basic_error>
>

const reposUpdateReleaseAssetResponder = {
  with200: r.with200<t_release_asset>,
  withStatus: r.withStatus,
}

type ReposUpdateReleaseAssetResponder =
  typeof reposUpdateReleaseAssetResponder & KoaRuntimeResponder

const reposUpdateReleaseAssetResponseValidator = responseValidationFactory(
  [["200", s_release_asset]],
  undefined,
)

export type ReposUpdateReleaseAsset = (
  params: Params<
    t_ReposUpdateReleaseAssetParamSchema,
    void,
    t_ReposUpdateReleaseAssetBodySchema | undefined,
    void
  >,
  respond: ReposUpdateReleaseAssetResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_release_asset>>

const reposDeleteReleaseAssetResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ReposDeleteReleaseAssetResponder =
  typeof reposDeleteReleaseAssetResponder & KoaRuntimeResponder

const reposDeleteReleaseAssetResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type ReposDeleteReleaseAsset = (
  params: Params<t_ReposDeleteReleaseAssetParamSchema, void, void, void>,
  respond: ReposDeleteReleaseAssetResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const reposGenerateReleaseNotesResponder = {
  with200: r.with200<t_release_notes_content>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGenerateReleaseNotesResponder =
  typeof reposGenerateReleaseNotesResponder & KoaRuntimeResponder

const reposGenerateReleaseNotesResponseValidator = responseValidationFactory(
  [
    ["200", s_release_notes_content],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposGenerateReleaseNotes = (
  params: Params<
    t_ReposGenerateReleaseNotesParamSchema,
    void,
    t_ReposGenerateReleaseNotesBodySchema,
    void
  >,
  respond: ReposGenerateReleaseNotesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_release_notes_content>
  | Response<404, t_basic_error>
>

const reposGetLatestReleaseResponder = {
  with200: r.with200<t_release>,
  withStatus: r.withStatus,
}

type ReposGetLatestReleaseResponder = typeof reposGetLatestReleaseResponder &
  KoaRuntimeResponder

const reposGetLatestReleaseResponseValidator = responseValidationFactory(
  [["200", s_release]],
  undefined,
)

export type ReposGetLatestRelease = (
  params: Params<t_ReposGetLatestReleaseParamSchema, void, void, void>,
  respond: ReposGetLatestReleaseResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_release>>

const reposGetReleaseByTagResponder = {
  with200: r.with200<t_release>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetReleaseByTagResponder = typeof reposGetReleaseByTagResponder &
  KoaRuntimeResponder

const reposGetReleaseByTagResponseValidator = responseValidationFactory(
  [
    ["200", s_release],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposGetReleaseByTag = (
  params: Params<t_ReposGetReleaseByTagParamSchema, void, void, void>,
  respond: ReposGetReleaseByTagResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_release>
  | Response<404, t_basic_error>
>

const reposGetReleaseResponder = {
  with200: r.with200<t_release>,
  with401: r.with401<void>,
  withStatus: r.withStatus,
}

type ReposGetReleaseResponder = typeof reposGetReleaseResponder &
  KoaRuntimeResponder

const reposGetReleaseResponseValidator = responseValidationFactory(
  [
    ["200", s_release],
    ["401", z.undefined()],
  ],
  undefined,
)

export type ReposGetRelease = (
  params: Params<t_ReposGetReleaseParamSchema, void, void, void>,
  respond: ReposGetReleaseResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_release> | Response<401, void>
>

const reposUpdateReleaseResponder = {
  with200: r.with200<t_release>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposUpdateReleaseResponder = typeof reposUpdateReleaseResponder &
  KoaRuntimeResponder

const reposUpdateReleaseResponseValidator = responseValidationFactory(
  [
    ["200", s_release],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposUpdateRelease = (
  params: Params<
    t_ReposUpdateReleaseParamSchema,
    void,
    t_ReposUpdateReleaseBodySchema | undefined,
    void
  >,
  respond: ReposUpdateReleaseResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_release>
  | Response<404, t_basic_error>
>

const reposDeleteReleaseResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ReposDeleteReleaseResponder = typeof reposDeleteReleaseResponder &
  KoaRuntimeResponder

const reposDeleteReleaseResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type ReposDeleteRelease = (
  params: Params<t_ReposDeleteReleaseParamSchema, void, void, void>,
  respond: ReposDeleteReleaseResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const reposListReleaseAssetsResponder = {
  with200: r.with200<t_release_asset[]>,
  withStatus: r.withStatus,
}

type ReposListReleaseAssetsResponder = typeof reposListReleaseAssetsResponder &
  KoaRuntimeResponder

const reposListReleaseAssetsResponseValidator = responseValidationFactory(
  [["200", z.array(s_release_asset)]],
  undefined,
)

export type ReposListReleaseAssets = (
  params: Params<
    t_ReposListReleaseAssetsParamSchema,
    t_ReposListReleaseAssetsQuerySchema,
    void,
    void
  >,
  respond: ReposListReleaseAssetsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_release_asset[]>>

const reposUploadReleaseAssetResponder = {
  with201: r.with201<t_release_asset>,
  with422: r.with422<void>,
  withStatus: r.withStatus,
}

type ReposUploadReleaseAssetResponder =
  typeof reposUploadReleaseAssetResponder & KoaRuntimeResponder

const reposUploadReleaseAssetResponseValidator = responseValidationFactory(
  [
    ["201", s_release_asset],
    ["422", z.undefined()],
  ],
  undefined,
)

export type ReposUploadReleaseAsset = (
  params: Params<
    t_ReposUploadReleaseAssetParamSchema,
    t_ReposUploadReleaseAssetQuerySchema,
    t_ReposUploadReleaseAssetBodySchema | undefined,
    void
  >,
  respond: ReposUploadReleaseAssetResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_release_asset>
  | Response<422, void>
>

const reactionsListForReleaseResponder = {
  with200: r.with200<t_reaction[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReactionsListForReleaseResponder =
  typeof reactionsListForReleaseResponder & KoaRuntimeResponder

const reactionsListForReleaseResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_reaction)],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReactionsListForRelease = (
  params: Params<
    t_ReactionsListForReleaseParamSchema,
    t_ReactionsListForReleaseQuerySchema,
    void,
    void
  >,
  respond: ReactionsListForReleaseResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_reaction[]>
  | Response<404, t_basic_error>
>

const reactionsCreateForReleaseResponder = {
  with200: r.with200<t_reaction>,
  with201: r.with201<t_reaction>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReactionsCreateForReleaseResponder =
  typeof reactionsCreateForReleaseResponder & KoaRuntimeResponder

const reactionsCreateForReleaseResponseValidator = responseValidationFactory(
  [
    ["200", s_reaction],
    ["201", s_reaction],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReactionsCreateForRelease = (
  params: Params<
    t_ReactionsCreateForReleaseParamSchema,
    void,
    t_ReactionsCreateForReleaseBodySchema,
    void
  >,
  respond: ReactionsCreateForReleaseResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_reaction>
  | Response<201, t_reaction>
  | Response<422, t_validation_error>
>

const reactionsDeleteForReleaseResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ReactionsDeleteForReleaseResponder =
  typeof reactionsDeleteForReleaseResponder & KoaRuntimeResponder

const reactionsDeleteForReleaseResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type ReactionsDeleteForRelease = (
  params: Params<t_ReactionsDeleteForReleaseParamSchema, void, void, void>,
  respond: ReactionsDeleteForReleaseResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const reposGetBranchRulesResponder = {
  with200: r.with200<t_repository_rule_detailed[]>,
  withStatus: r.withStatus,
}

type ReposGetBranchRulesResponder = typeof reposGetBranchRulesResponder &
  KoaRuntimeResponder

const reposGetBranchRulesResponseValidator = responseValidationFactory(
  [["200", z.array(s_repository_rule_detailed)]],
  undefined,
)

export type ReposGetBranchRules = (
  params: Params<
    t_ReposGetBranchRulesParamSchema,
    t_ReposGetBranchRulesQuerySchema,
    void,
    void
  >,
  respond: ReposGetBranchRulesResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_repository_rule_detailed[]>
>

const reposGetRepoRulesetsResponder = {
  with200: r.with200<t_repository_ruleset[]>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetRepoRulesetsResponder = typeof reposGetRepoRulesetsResponder &
  KoaRuntimeResponder

const reposGetRepoRulesetsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_repository_ruleset)],
    ["404", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type ReposGetRepoRulesets = (
  params: Params<
    t_ReposGetRepoRulesetsParamSchema,
    t_ReposGetRepoRulesetsQuerySchema,
    void,
    void
  >,
  respond: ReposGetRepoRulesetsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_ruleset[]>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const reposCreateRepoRulesetResponder = {
  with201: r.with201<t_repository_ruleset>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposCreateRepoRulesetResponder = typeof reposCreateRepoRulesetResponder &
  KoaRuntimeResponder

const reposCreateRepoRulesetResponseValidator = responseValidationFactory(
  [
    ["201", s_repository_ruleset],
    ["404", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type ReposCreateRepoRuleset = (
  params: Params<
    t_ReposCreateRepoRulesetParamSchema,
    void,
    t_ReposCreateRepoRulesetBodySchema,
    void
  >,
  respond: ReposCreateRepoRulesetResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_repository_ruleset>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const reposGetRepoRuleSuitesResponder = {
  with200: r.with200<t_rule_suites>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetRepoRuleSuitesResponder = typeof reposGetRepoRuleSuitesResponder &
  KoaRuntimeResponder

const reposGetRepoRuleSuitesResponseValidator = responseValidationFactory(
  [
    ["200", s_rule_suites],
    ["404", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type ReposGetRepoRuleSuites = (
  params: Params<
    t_ReposGetRepoRuleSuitesParamSchema,
    t_ReposGetRepoRuleSuitesQuerySchema,
    void,
    void
  >,
  respond: ReposGetRepoRuleSuitesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_rule_suites>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const reposGetRepoRuleSuiteResponder = {
  with200: r.with200<t_rule_suite>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetRepoRuleSuiteResponder = typeof reposGetRepoRuleSuiteResponder &
  KoaRuntimeResponder

const reposGetRepoRuleSuiteResponseValidator = responseValidationFactory(
  [
    ["200", s_rule_suite],
    ["404", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type ReposGetRepoRuleSuite = (
  params: Params<t_ReposGetRepoRuleSuiteParamSchema, void, void, void>,
  respond: ReposGetRepoRuleSuiteResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_rule_suite>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const reposGetRepoRulesetResponder = {
  with200: r.with200<t_repository_ruleset>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetRepoRulesetResponder = typeof reposGetRepoRulesetResponder &
  KoaRuntimeResponder

const reposGetRepoRulesetResponseValidator = responseValidationFactory(
  [
    ["200", s_repository_ruleset],
    ["404", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type ReposGetRepoRuleset = (
  params: Params<
    t_ReposGetRepoRulesetParamSchema,
    t_ReposGetRepoRulesetQuerySchema,
    void,
    void
  >,
  respond: ReposGetRepoRulesetResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_ruleset>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const reposUpdateRepoRulesetResponder = {
  with200: r.with200<t_repository_ruleset>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposUpdateRepoRulesetResponder = typeof reposUpdateRepoRulesetResponder &
  KoaRuntimeResponder

const reposUpdateRepoRulesetResponseValidator = responseValidationFactory(
  [
    ["200", s_repository_ruleset],
    ["404", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type ReposUpdateRepoRuleset = (
  params: Params<
    t_ReposUpdateRepoRulesetParamSchema,
    void,
    t_ReposUpdateRepoRulesetBodySchema | undefined,
    void
  >,
  respond: ReposUpdateRepoRulesetResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_ruleset>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const reposDeleteRepoRulesetResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposDeleteRepoRulesetResponder = typeof reposDeleteRepoRulesetResponder &
  KoaRuntimeResponder

const reposDeleteRepoRulesetResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type ReposDeleteRepoRuleset = (
  params: Params<t_ReposDeleteRepoRulesetParamSchema, void, void, void>,
  respond: ReposDeleteRepoRulesetResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const reposGetRepoRulesetHistoryResponder = {
  with200: r.with200<t_ruleset_version[]>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetRepoRulesetHistoryResponder =
  typeof reposGetRepoRulesetHistoryResponder & KoaRuntimeResponder

const reposGetRepoRulesetHistoryResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_ruleset_version)],
    ["404", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type ReposGetRepoRulesetHistory = (
  params: Params<
    t_ReposGetRepoRulesetHistoryParamSchema,
    t_ReposGetRepoRulesetHistoryQuerySchema,
    void,
    void
  >,
  respond: ReposGetRepoRulesetHistoryResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_ruleset_version[]>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const reposGetRepoRulesetVersionResponder = {
  with200: r.with200<t_ruleset_version_with_state>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetRepoRulesetVersionResponder =
  typeof reposGetRepoRulesetVersionResponder & KoaRuntimeResponder

const reposGetRepoRulesetVersionResponseValidator = responseValidationFactory(
  [
    ["200", s_ruleset_version_with_state],
    ["404", s_basic_error],
    ["500", s_basic_error],
  ],
  undefined,
)

export type ReposGetRepoRulesetVersion = (
  params: Params<t_ReposGetRepoRulesetVersionParamSchema, void, void, void>,
  respond: ReposGetRepoRulesetVersionResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_ruleset_version_with_state>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const secretScanningListAlertsForRepoResponder = {
  with200: r.with200<t_secret_scanning_alert[]>,
  with404: r.with404<void>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type SecretScanningListAlertsForRepoResponder =
  typeof secretScanningListAlertsForRepoResponder & KoaRuntimeResponder

const secretScanningListAlertsForRepoResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_secret_scanning_alert)],
      ["404", z.undefined()],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

export type SecretScanningListAlertsForRepo = (
  params: Params<
    t_SecretScanningListAlertsForRepoParamSchema,
    t_SecretScanningListAlertsForRepoQuerySchema,
    void,
    void
  >,
  respond: SecretScanningListAlertsForRepoResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_secret_scanning_alert[]>
  | Response<404, void>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const secretScanningGetAlertResponder = {
  with200: r.with200<t_secret_scanning_alert>,
  with304: r.with304<void>,
  with404: r.with404<void>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type SecretScanningGetAlertResponder = typeof secretScanningGetAlertResponder &
  KoaRuntimeResponder

const secretScanningGetAlertResponseValidator = responseValidationFactory(
  [
    ["200", s_secret_scanning_alert],
    ["304", z.undefined()],
    ["404", z.undefined()],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type SecretScanningGetAlert = (
  params: Params<t_SecretScanningGetAlertParamSchema, void, void, void>,
  respond: SecretScanningGetAlertResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_secret_scanning_alert>
  | Response<304, void>
  | Response<404, void>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const secretScanningUpdateAlertResponder = {
  with200: r.with200<t_secret_scanning_alert>,
  with400: r.with400<void>,
  with404: r.with404<void>,
  with422: r.with422<void>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type SecretScanningUpdateAlertResponder =
  typeof secretScanningUpdateAlertResponder & KoaRuntimeResponder

const secretScanningUpdateAlertResponseValidator = responseValidationFactory(
  [
    ["200", s_secret_scanning_alert],
    ["400", z.undefined()],
    ["404", z.undefined()],
    ["422", z.undefined()],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type SecretScanningUpdateAlert = (
  params: Params<
    t_SecretScanningUpdateAlertParamSchema,
    void,
    t_SecretScanningUpdateAlertBodySchema,
    void
  >,
  respond: SecretScanningUpdateAlertResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_secret_scanning_alert>
  | Response<400, void>
  | Response<404, void>
  | Response<422, void>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const secretScanningListLocationsForAlertResponder = {
  with200: r.with200<t_secret_scanning_location[]>,
  with404: r.with404<void>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type SecretScanningListLocationsForAlertResponder =
  typeof secretScanningListLocationsForAlertResponder & KoaRuntimeResponder

const secretScanningListLocationsForAlertResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_secret_scanning_location)],
      ["404", z.undefined()],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

export type SecretScanningListLocationsForAlert = (
  params: Params<
    t_SecretScanningListLocationsForAlertParamSchema,
    t_SecretScanningListLocationsForAlertQuerySchema,
    void,
    void
  >,
  respond: SecretScanningListLocationsForAlertResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_secret_scanning_location[]>
  | Response<404, void>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const secretScanningCreatePushProtectionBypassResponder = {
  with200: r.with200<t_secret_scanning_push_protection_bypass>,
  with403: r.with403<void>,
  with404: r.with404<void>,
  with422: r.with422<void>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type SecretScanningCreatePushProtectionBypassResponder =
  typeof secretScanningCreatePushProtectionBypassResponder & KoaRuntimeResponder

const secretScanningCreatePushProtectionBypassResponseValidator =
  responseValidationFactory(
    [
      ["200", s_secret_scanning_push_protection_bypass],
      ["403", z.undefined()],
      ["404", z.undefined()],
      ["422", z.undefined()],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

export type SecretScanningCreatePushProtectionBypass = (
  params: Params<
    t_SecretScanningCreatePushProtectionBypassParamSchema,
    void,
    t_SecretScanningCreatePushProtectionBypassBodySchema,
    void
  >,
  respond: SecretScanningCreatePushProtectionBypassResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_secret_scanning_push_protection_bypass>
  | Response<403, void>
  | Response<404, void>
  | Response<422, void>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const secretScanningGetScanHistoryResponder = {
  with200: r.with200<t_secret_scanning_scan_history>,
  with404: r.with404<void>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type SecretScanningGetScanHistoryResponder =
  typeof secretScanningGetScanHistoryResponder & KoaRuntimeResponder

const secretScanningGetScanHistoryResponseValidator = responseValidationFactory(
  [
    ["200", s_secret_scanning_scan_history],
    ["404", z.undefined()],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type SecretScanningGetScanHistory = (
  params: Params<t_SecretScanningGetScanHistoryParamSchema, void, void, void>,
  respond: SecretScanningGetScanHistoryResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_secret_scanning_scan_history>
  | Response<404, void>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const securityAdvisoriesListRepositoryAdvisoriesResponder = {
  with200: r.with200<t_repository_advisory[]>,
  with400: r.with400<t_scim_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type SecurityAdvisoriesListRepositoryAdvisoriesResponder =
  typeof securityAdvisoriesListRepositoryAdvisoriesResponder &
    KoaRuntimeResponder

const securityAdvisoriesListRepositoryAdvisoriesResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_repository_advisory)],
      ["400", s_scim_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type SecurityAdvisoriesListRepositoryAdvisories = (
  params: Params<
    t_SecurityAdvisoriesListRepositoryAdvisoriesParamSchema,
    t_SecurityAdvisoriesListRepositoryAdvisoriesQuerySchema,
    void,
    void
  >,
  respond: SecurityAdvisoriesListRepositoryAdvisoriesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_advisory[]>
  | Response<400, t_scim_error>
  | Response<404, t_basic_error>
>

const securityAdvisoriesCreateRepositoryAdvisoryResponder = {
  with201: r.with201<t_repository_advisory>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type SecurityAdvisoriesCreateRepositoryAdvisoryResponder =
  typeof securityAdvisoriesCreateRepositoryAdvisoryResponder &
    KoaRuntimeResponder

const securityAdvisoriesCreateRepositoryAdvisoryResponseValidator =
  responseValidationFactory(
    [
      ["201", s_repository_advisory],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type SecurityAdvisoriesCreateRepositoryAdvisory = (
  params: Params<
    t_SecurityAdvisoriesCreateRepositoryAdvisoryParamSchema,
    void,
    t_SecurityAdvisoriesCreateRepositoryAdvisoryBodySchema,
    void
  >,
  respond: SecurityAdvisoriesCreateRepositoryAdvisoryResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_repository_advisory>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const securityAdvisoriesCreatePrivateVulnerabilityReportResponder = {
  with201: r.with201<t_repository_advisory>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type SecurityAdvisoriesCreatePrivateVulnerabilityReportResponder =
  typeof securityAdvisoriesCreatePrivateVulnerabilityReportResponder &
    KoaRuntimeResponder

const securityAdvisoriesCreatePrivateVulnerabilityReportResponseValidator =
  responseValidationFactory(
    [
      ["201", s_repository_advisory],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type SecurityAdvisoriesCreatePrivateVulnerabilityReport = (
  params: Params<
    t_SecurityAdvisoriesCreatePrivateVulnerabilityReportParamSchema,
    void,
    t_SecurityAdvisoriesCreatePrivateVulnerabilityReportBodySchema,
    void
  >,
  respond: SecurityAdvisoriesCreatePrivateVulnerabilityReportResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_repository_advisory>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const securityAdvisoriesGetRepositoryAdvisoryResponder = {
  with200: r.with200<t_repository_advisory>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type SecurityAdvisoriesGetRepositoryAdvisoryResponder =
  typeof securityAdvisoriesGetRepositoryAdvisoryResponder & KoaRuntimeResponder

const securityAdvisoriesGetRepositoryAdvisoryResponseValidator =
  responseValidationFactory(
    [
      ["200", s_repository_advisory],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type SecurityAdvisoriesGetRepositoryAdvisory = (
  params: Params<
    t_SecurityAdvisoriesGetRepositoryAdvisoryParamSchema,
    void,
    void,
    void
  >,
  respond: SecurityAdvisoriesGetRepositoryAdvisoryResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_advisory>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const securityAdvisoriesUpdateRepositoryAdvisoryResponder = {
  with200: r.with200<t_repository_advisory>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type SecurityAdvisoriesUpdateRepositoryAdvisoryResponder =
  typeof securityAdvisoriesUpdateRepositoryAdvisoryResponder &
    KoaRuntimeResponder

const securityAdvisoriesUpdateRepositoryAdvisoryResponseValidator =
  responseValidationFactory(
    [
      ["200", s_repository_advisory],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type SecurityAdvisoriesUpdateRepositoryAdvisory = (
  params: Params<
    t_SecurityAdvisoriesUpdateRepositoryAdvisoryParamSchema,
    void,
    t_SecurityAdvisoriesUpdateRepositoryAdvisoryBodySchema,
    void
  >,
  respond: SecurityAdvisoriesUpdateRepositoryAdvisoryResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_advisory>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const securityAdvisoriesCreateRepositoryAdvisoryCveRequestResponder = {
  with202: r.with202<{
    [key: string]: unknown | undefined
  }>,
  with400: r.with400<t_scim_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type SecurityAdvisoriesCreateRepositoryAdvisoryCveRequestResponder =
  typeof securityAdvisoriesCreateRepositoryAdvisoryCveRequestResponder &
    KoaRuntimeResponder

const securityAdvisoriesCreateRepositoryAdvisoryCveRequestResponseValidator =
  responseValidationFactory(
    [
      ["202", z.record(z.unknown())],
      ["400", s_scim_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type SecurityAdvisoriesCreateRepositoryAdvisoryCveRequest = (
  params: Params<
    t_SecurityAdvisoriesCreateRepositoryAdvisoryCveRequestParamSchema,
    void,
    void,
    void
  >,
  respond: SecurityAdvisoriesCreateRepositoryAdvisoryCveRequestResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      202,
      {
        [key: string]: unknown | undefined
      }
    >
  | Response<400, t_scim_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const securityAdvisoriesCreateForkResponder = {
  with202: r.with202<t_full_repository>,
  with400: r.with400<t_scim_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type SecurityAdvisoriesCreateForkResponder =
  typeof securityAdvisoriesCreateForkResponder & KoaRuntimeResponder

const securityAdvisoriesCreateForkResponseValidator = responseValidationFactory(
  [
    ["202", s_full_repository],
    ["400", s_scim_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type SecurityAdvisoriesCreateFork = (
  params: Params<t_SecurityAdvisoriesCreateForkParamSchema, void, void, void>,
  respond: SecurityAdvisoriesCreateForkResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<202, t_full_repository>
  | Response<400, t_scim_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const activityListStargazersForRepoResponder = {
  with200: r.with200<t_simple_user[] | t_stargazer[]>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ActivityListStargazersForRepoResponder =
  typeof activityListStargazersForRepoResponder & KoaRuntimeResponder

const activityListStargazersForRepoResponseValidator =
  responseValidationFactory(
    [
      ["200", z.union([z.array(s_simple_user), z.array(s_stargazer)])],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type ActivityListStargazersForRepo = (
  params: Params<
    t_ActivityListStargazersForRepoParamSchema,
    t_ActivityListStargazersForRepoQuerySchema,
    void,
    void
  >,
  respond: ActivityListStargazersForRepoResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[] | t_stargazer[]>
  | Response<422, t_validation_error>
>

const reposGetCodeFrequencyStatsResponder = {
  with200: r.with200<t_code_frequency_stat[]>,
  with202: r.with202<{
    [key: string]: unknown | undefined
  }>,
  with204: r.with204<void>,
  with422: r.with422<void>,
  withStatus: r.withStatus,
}

type ReposGetCodeFrequencyStatsResponder =
  typeof reposGetCodeFrequencyStatsResponder & KoaRuntimeResponder

const reposGetCodeFrequencyStatsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_code_frequency_stat)],
    ["202", z.record(z.unknown())],
    ["204", z.undefined()],
    ["422", z.undefined()],
  ],
  undefined,
)

export type ReposGetCodeFrequencyStats = (
  params: Params<t_ReposGetCodeFrequencyStatsParamSchema, void, void, void>,
  respond: ReposGetCodeFrequencyStatsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_frequency_stat[]>
  | Response<
      202,
      {
        [key: string]: unknown | undefined
      }
    >
  | Response<204, void>
  | Response<422, void>
>

const reposGetCommitActivityStatsResponder = {
  with200: r.with200<t_commit_activity[]>,
  with202: r.with202<{
    [key: string]: unknown | undefined
  }>,
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ReposGetCommitActivityStatsResponder =
  typeof reposGetCommitActivityStatsResponder & KoaRuntimeResponder

const reposGetCommitActivityStatsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_commit_activity)],
    ["202", z.record(z.unknown())],
    ["204", z.undefined()],
  ],
  undefined,
)

export type ReposGetCommitActivityStats = (
  params: Params<t_ReposGetCommitActivityStatsParamSchema, void, void, void>,
  respond: ReposGetCommitActivityStatsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_commit_activity[]>
  | Response<
      202,
      {
        [key: string]: unknown | undefined
      }
    >
  | Response<204, void>
>

const reposGetContributorsStatsResponder = {
  with200: r.with200<t_contributor_activity[]>,
  with202: r.with202<{
    [key: string]: unknown | undefined
  }>,
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ReposGetContributorsStatsResponder =
  typeof reposGetContributorsStatsResponder & KoaRuntimeResponder

const reposGetContributorsStatsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_contributor_activity)],
    ["202", z.record(z.unknown())],
    ["204", z.undefined()],
  ],
  undefined,
)

export type ReposGetContributorsStats = (
  params: Params<t_ReposGetContributorsStatsParamSchema, void, void, void>,
  respond: ReposGetContributorsStatsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_contributor_activity[]>
  | Response<
      202,
      {
        [key: string]: unknown | undefined
      }
    >
  | Response<204, void>
>

const reposGetParticipationStatsResponder = {
  with200: r.with200<t_participation_stats>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetParticipationStatsResponder =
  typeof reposGetParticipationStatsResponder & KoaRuntimeResponder

const reposGetParticipationStatsResponseValidator = responseValidationFactory(
  [
    ["200", s_participation_stats],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposGetParticipationStats = (
  params: Params<t_ReposGetParticipationStatsParamSchema, void, void, void>,
  respond: ReposGetParticipationStatsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_participation_stats>
  | Response<404, t_basic_error>
>

const reposGetPunchCardStatsResponder = {
  with200: r.with200<t_code_frequency_stat[]>,
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ReposGetPunchCardStatsResponder = typeof reposGetPunchCardStatsResponder &
  KoaRuntimeResponder

const reposGetPunchCardStatsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_code_frequency_stat)],
    ["204", z.undefined()],
  ],
  undefined,
)

export type ReposGetPunchCardStats = (
  params: Params<t_ReposGetPunchCardStatsParamSchema, void, void, void>,
  respond: ReposGetPunchCardStatsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_frequency_stat[]>
  | Response<204, void>
>

const reposCreateCommitStatusResponder = {
  with201: r.with201<t_status>,
  withStatus: r.withStatus,
}

type ReposCreateCommitStatusResponder =
  typeof reposCreateCommitStatusResponder & KoaRuntimeResponder

const reposCreateCommitStatusResponseValidator = responseValidationFactory(
  [["201", s_status]],
  undefined,
)

export type ReposCreateCommitStatus = (
  params: Params<
    t_ReposCreateCommitStatusParamSchema,
    void,
    t_ReposCreateCommitStatusBodySchema,
    void
  >,
  respond: ReposCreateCommitStatusResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_status>>

const activityListWatchersForRepoResponder = {
  with200: r.with200<t_simple_user[]>,
  withStatus: r.withStatus,
}

type ActivityListWatchersForRepoResponder =
  typeof activityListWatchersForRepoResponder & KoaRuntimeResponder

const activityListWatchersForRepoResponseValidator = responseValidationFactory(
  [["200", z.array(s_simple_user)]],
  undefined,
)

export type ActivityListWatchersForRepo = (
  params: Params<
    t_ActivityListWatchersForRepoParamSchema,
    t_ActivityListWatchersForRepoQuerySchema,
    void,
    void
  >,
  respond: ActivityListWatchersForRepoResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_simple_user[]>>

const activityGetRepoSubscriptionResponder = {
  with200: r.with200<t_repository_subscription>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<void>,
  withStatus: r.withStatus,
}

type ActivityGetRepoSubscriptionResponder =
  typeof activityGetRepoSubscriptionResponder & KoaRuntimeResponder

const activityGetRepoSubscriptionResponseValidator = responseValidationFactory(
  [
    ["200", s_repository_subscription],
    ["403", s_basic_error],
    ["404", z.undefined()],
  ],
  undefined,
)

export type ActivityGetRepoSubscription = (
  params: Params<t_ActivityGetRepoSubscriptionParamSchema, void, void, void>,
  respond: ActivityGetRepoSubscriptionResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_subscription>
  | Response<403, t_basic_error>
  | Response<404, void>
>

const activitySetRepoSubscriptionResponder = {
  with200: r.with200<t_repository_subscription>,
  withStatus: r.withStatus,
}

type ActivitySetRepoSubscriptionResponder =
  typeof activitySetRepoSubscriptionResponder & KoaRuntimeResponder

const activitySetRepoSubscriptionResponseValidator = responseValidationFactory(
  [["200", s_repository_subscription]],
  undefined,
)

export type ActivitySetRepoSubscription = (
  params: Params<
    t_ActivitySetRepoSubscriptionParamSchema,
    void,
    t_ActivitySetRepoSubscriptionBodySchema | undefined,
    void
  >,
  respond: ActivitySetRepoSubscriptionResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_repository_subscription>
>

const activityDeleteRepoSubscriptionResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ActivityDeleteRepoSubscriptionResponder =
  typeof activityDeleteRepoSubscriptionResponder & KoaRuntimeResponder

const activityDeleteRepoSubscriptionResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ActivityDeleteRepoSubscription = (
  params: Params<t_ActivityDeleteRepoSubscriptionParamSchema, void, void, void>,
  respond: ActivityDeleteRepoSubscriptionResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const reposListTagsResponder = {
  with200: r.with200<t_tag[]>,
  withStatus: r.withStatus,
}

type ReposListTagsResponder = typeof reposListTagsResponder &
  KoaRuntimeResponder

const reposListTagsResponseValidator = responseValidationFactory(
  [["200", z.array(s_tag)]],
  undefined,
)

export type ReposListTags = (
  params: Params<
    t_ReposListTagsParamSchema,
    t_ReposListTagsQuerySchema,
    void,
    void
  >,
  respond: ReposListTagsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_tag[]>>

const reposListTagProtectionResponder = {
  with200: r.with200<t_tag_protection[]>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposListTagProtectionResponder = typeof reposListTagProtectionResponder &
  KoaRuntimeResponder

const reposListTagProtectionResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_tag_protection)],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposListTagProtection = (
  params: Params<t_ReposListTagProtectionParamSchema, void, void, void>,
  respond: ReposListTagProtectionResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_tag_protection[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const reposCreateTagProtectionResponder = {
  with201: r.with201<t_tag_protection>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposCreateTagProtectionResponder =
  typeof reposCreateTagProtectionResponder & KoaRuntimeResponder

const reposCreateTagProtectionResponseValidator = responseValidationFactory(
  [
    ["201", s_tag_protection],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposCreateTagProtection = (
  params: Params<
    t_ReposCreateTagProtectionParamSchema,
    void,
    t_ReposCreateTagProtectionBodySchema,
    void
  >,
  respond: ReposCreateTagProtectionResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_tag_protection>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const reposDeleteTagProtectionResponder = {
  with204: r.with204<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposDeleteTagProtectionResponder =
  typeof reposDeleteTagProtectionResponder & KoaRuntimeResponder

const reposDeleteTagProtectionResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposDeleteTagProtection = (
  params: Params<t_ReposDeleteTagProtectionParamSchema, void, void, void>,
  respond: ReposDeleteTagProtectionResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const reposDownloadTarballArchiveResponder = {
  with302: r.with302<void>,
  withStatus: r.withStatus,
}

type ReposDownloadTarballArchiveResponder =
  typeof reposDownloadTarballArchiveResponder & KoaRuntimeResponder

const reposDownloadTarballArchiveResponseValidator = responseValidationFactory(
  [["302", z.undefined()]],
  undefined,
)

export type ReposDownloadTarballArchive = (
  params: Params<t_ReposDownloadTarballArchiveParamSchema, void, void, void>,
  respond: ReposDownloadTarballArchiveResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<302, void>>

const reposListTeamsResponder = {
  with200: r.with200<t_team[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposListTeamsResponder = typeof reposListTeamsResponder &
  KoaRuntimeResponder

const reposListTeamsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_team)],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposListTeams = (
  params: Params<
    t_ReposListTeamsParamSchema,
    t_ReposListTeamsQuerySchema,
    void,
    void
  >,
  respond: ReposListTeamsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team[]>
  | Response<404, t_basic_error>
>

const reposGetAllTopicsResponder = {
  with200: r.with200<t_topic>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetAllTopicsResponder = typeof reposGetAllTopicsResponder &
  KoaRuntimeResponder

const reposGetAllTopicsResponseValidator = responseValidationFactory(
  [
    ["200", s_topic],
    ["404", s_basic_error],
  ],
  undefined,
)

export type ReposGetAllTopics = (
  params: Params<
    t_ReposGetAllTopicsParamSchema,
    t_ReposGetAllTopicsQuerySchema,
    void,
    void
  >,
  respond: ReposGetAllTopicsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_topic>
  | Response<404, t_basic_error>
>

const reposReplaceAllTopicsResponder = {
  with200: r.with200<t_topic>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type ReposReplaceAllTopicsResponder = typeof reposReplaceAllTopicsResponder &
  KoaRuntimeResponder

const reposReplaceAllTopicsResponseValidator = responseValidationFactory(
  [
    ["200", s_topic],
    ["404", s_basic_error],
    ["422", s_validation_error_simple],
  ],
  undefined,
)

export type ReposReplaceAllTopics = (
  params: Params<
    t_ReposReplaceAllTopicsParamSchema,
    void,
    t_ReposReplaceAllTopicsBodySchema,
    void
  >,
  respond: ReposReplaceAllTopicsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_topic>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const reposGetClonesResponder = {
  with200: r.with200<t_clone_traffic>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetClonesResponder = typeof reposGetClonesResponder &
  KoaRuntimeResponder

const reposGetClonesResponseValidator = responseValidationFactory(
  [
    ["200", s_clone_traffic],
    ["403", s_basic_error],
  ],
  undefined,
)

export type ReposGetClones = (
  params: Params<
    t_ReposGetClonesParamSchema,
    t_ReposGetClonesQuerySchema,
    void,
    void
  >,
  respond: ReposGetClonesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_clone_traffic>
  | Response<403, t_basic_error>
>

const reposGetTopPathsResponder = {
  with200: r.with200<t_content_traffic[]>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetTopPathsResponder = typeof reposGetTopPathsResponder &
  KoaRuntimeResponder

const reposGetTopPathsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_content_traffic)],
    ["403", s_basic_error],
  ],
  undefined,
)

export type ReposGetTopPaths = (
  params: Params<t_ReposGetTopPathsParamSchema, void, void, void>,
  respond: ReposGetTopPathsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_content_traffic[]>
  | Response<403, t_basic_error>
>

const reposGetTopReferrersResponder = {
  with200: r.with200<t_referrer_traffic[]>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetTopReferrersResponder = typeof reposGetTopReferrersResponder &
  KoaRuntimeResponder

const reposGetTopReferrersResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_referrer_traffic)],
    ["403", s_basic_error],
  ],
  undefined,
)

export type ReposGetTopReferrers = (
  params: Params<t_ReposGetTopReferrersParamSchema, void, void, void>,
  respond: ReposGetTopReferrersResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_referrer_traffic[]>
  | Response<403, t_basic_error>
>

const reposGetViewsResponder = {
  with200: r.with200<t_view_traffic>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposGetViewsResponder = typeof reposGetViewsResponder &
  KoaRuntimeResponder

const reposGetViewsResponseValidator = responseValidationFactory(
  [
    ["200", s_view_traffic],
    ["403", s_basic_error],
  ],
  undefined,
)

export type ReposGetViews = (
  params: Params<
    t_ReposGetViewsParamSchema,
    t_ReposGetViewsQuerySchema,
    void,
    void
  >,
  respond: ReposGetViewsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_view_traffic>
  | Response<403, t_basic_error>
>

const reposTransferResponder = {
  with202: r.with202<t_minimal_repository>,
  withStatus: r.withStatus,
}

type ReposTransferResponder = typeof reposTransferResponder &
  KoaRuntimeResponder

const reposTransferResponseValidator = responseValidationFactory(
  [["202", s_minimal_repository]],
  undefined,
)

export type ReposTransfer = (
  params: Params<
    t_ReposTransferParamSchema,
    void,
    t_ReposTransferBodySchema,
    void
  >,
  respond: ReposTransferResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<202, t_minimal_repository>>

const reposCheckVulnerabilityAlertsResponder = {
  with204: r.with204<void>,
  with404: r.with404<void>,
  withStatus: r.withStatus,
}

type ReposCheckVulnerabilityAlertsResponder =
  typeof reposCheckVulnerabilityAlertsResponder & KoaRuntimeResponder

const reposCheckVulnerabilityAlertsResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["404", z.undefined()],
    ],
    undefined,
  )

export type ReposCheckVulnerabilityAlerts = (
  params: Params<t_ReposCheckVulnerabilityAlertsParamSchema, void, void, void>,
  respond: ReposCheckVulnerabilityAlertsResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<404, void>
>

const reposEnableVulnerabilityAlertsResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ReposEnableVulnerabilityAlertsResponder =
  typeof reposEnableVulnerabilityAlertsResponder & KoaRuntimeResponder

const reposEnableVulnerabilityAlertsResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ReposEnableVulnerabilityAlerts = (
  params: Params<t_ReposEnableVulnerabilityAlertsParamSchema, void, void, void>,
  respond: ReposEnableVulnerabilityAlertsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const reposDisableVulnerabilityAlertsResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type ReposDisableVulnerabilityAlertsResponder =
  typeof reposDisableVulnerabilityAlertsResponder & KoaRuntimeResponder

const reposDisableVulnerabilityAlertsResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type ReposDisableVulnerabilityAlerts = (
  params: Params<
    t_ReposDisableVulnerabilityAlertsParamSchema,
    void,
    void,
    void
  >,
  respond: ReposDisableVulnerabilityAlertsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const reposDownloadZipballArchiveResponder = {
  with302: r.with302<void>,
  withStatus: r.withStatus,
}

type ReposDownloadZipballArchiveResponder =
  typeof reposDownloadZipballArchiveResponder & KoaRuntimeResponder

const reposDownloadZipballArchiveResponseValidator = responseValidationFactory(
  [["302", z.undefined()]],
  undefined,
)

export type ReposDownloadZipballArchive = (
  params: Params<t_ReposDownloadZipballArchiveParamSchema, void, void, void>,
  respond: ReposDownloadZipballArchiveResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<302, void>>

const reposCreateUsingTemplateResponder = {
  with201: r.with201<t_full_repository>,
  withStatus: r.withStatus,
}

type ReposCreateUsingTemplateResponder =
  typeof reposCreateUsingTemplateResponder & KoaRuntimeResponder

const reposCreateUsingTemplateResponseValidator = responseValidationFactory(
  [["201", s_full_repository]],
  undefined,
)

export type ReposCreateUsingTemplate = (
  params: Params<
    t_ReposCreateUsingTemplateParamSchema,
    void,
    t_ReposCreateUsingTemplateBodySchema,
    void
  >,
  respond: ReposCreateUsingTemplateResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_full_repository>>

const reposListPublicResponder = {
  with200: r.with200<t_minimal_repository[]>,
  with304: r.with304<void>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposListPublicResponder = typeof reposListPublicResponder &
  KoaRuntimeResponder

const reposListPublicResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_minimal_repository)],
    ["304", z.undefined()],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ReposListPublic = (
  params: Params<void, t_ReposListPublicQuerySchema, void, void>,
  respond: ReposListPublicResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_minimal_repository[]>
  | Response<304, void>
  | Response<422, t_validation_error>
>

const searchCodeResponder = {
  with200: r.with200<{
    incomplete_results: boolean
    items: t_code_search_result_item[]
    total_count: number
  }>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<t_validation_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type SearchCodeResponder = typeof searchCodeResponder & KoaRuntimeResponder

const searchCodeResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number(),
        incomplete_results: PermissiveBoolean,
        items: z.array(s_code_search_result_item),
      }),
    ],
    ["304", z.undefined()],
    ["403", s_basic_error],
    ["422", s_validation_error],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type SearchCode = (
  params: Params<void, t_SearchCodeQuerySchema, void, void>,
  respond: SearchCodeResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        incomplete_results: boolean
        items: t_code_search_result_item[]
        total_count: number
      }
    >
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const searchCommitsResponder = {
  with200: r.with200<{
    incomplete_results: boolean
    items: t_commit_search_result_item[]
    total_count: number
  }>,
  with304: r.with304<void>,
  withStatus: r.withStatus,
}

type SearchCommitsResponder = typeof searchCommitsResponder &
  KoaRuntimeResponder

const searchCommitsResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number(),
        incomplete_results: PermissiveBoolean,
        items: z.array(s_commit_search_result_item),
      }),
    ],
    ["304", z.undefined()],
  ],
  undefined,
)

export type SearchCommits = (
  params: Params<void, t_SearchCommitsQuerySchema, void, void>,
  respond: SearchCommitsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        incomplete_results: boolean
        items: t_commit_search_result_item[]
        total_count: number
      }
    >
  | Response<304, void>
>

const searchIssuesAndPullRequestsResponder = {
  with200: r.with200<{
    incomplete_results: boolean
    items: t_issue_search_result_item[]
    total_count: number
  }>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<t_validation_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type SearchIssuesAndPullRequestsResponder =
  typeof searchIssuesAndPullRequestsResponder & KoaRuntimeResponder

const searchIssuesAndPullRequestsResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number(),
        incomplete_results: PermissiveBoolean,
        items: z.array(s_issue_search_result_item),
      }),
    ],
    ["304", z.undefined()],
    ["403", s_basic_error],
    ["422", s_validation_error],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type SearchIssuesAndPullRequests = (
  params: Params<void, t_SearchIssuesAndPullRequestsQuerySchema, void, void>,
  respond: SearchIssuesAndPullRequestsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        incomplete_results: boolean
        items: t_issue_search_result_item[]
        total_count: number
      }
    >
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const searchLabelsResponder = {
  with200: r.with200<{
    incomplete_results: boolean
    items: t_label_search_result_item[]
    total_count: number
  }>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type SearchLabelsResponder = typeof searchLabelsResponder & KoaRuntimeResponder

const searchLabelsResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number(),
        incomplete_results: PermissiveBoolean,
        items: z.array(s_label_search_result_item),
      }),
    ],
    ["304", z.undefined()],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type SearchLabels = (
  params: Params<void, t_SearchLabelsQuerySchema, void, void>,
  respond: SearchLabelsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        incomplete_results: boolean
        items: t_label_search_result_item[]
        total_count: number
      }
    >
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const searchReposResponder = {
  with200: r.with200<{
    incomplete_results: boolean
    items: t_repo_search_result_item[]
    total_count: number
  }>,
  with304: r.with304<void>,
  with422: r.with422<t_validation_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type SearchReposResponder = typeof searchReposResponder & KoaRuntimeResponder

const searchReposResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number(),
        incomplete_results: PermissiveBoolean,
        items: z.array(s_repo_search_result_item),
      }),
    ],
    ["304", z.undefined()],
    ["422", s_validation_error],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type SearchRepos = (
  params: Params<void, t_SearchReposQuerySchema, void, void>,
  respond: SearchReposResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        incomplete_results: boolean
        items: t_repo_search_result_item[]
        total_count: number
      }
    >
  | Response<304, void>
  | Response<422, t_validation_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const searchTopicsResponder = {
  with200: r.with200<{
    incomplete_results: boolean
    items: t_topic_search_result_item[]
    total_count: number
  }>,
  with304: r.with304<void>,
  withStatus: r.withStatus,
}

type SearchTopicsResponder = typeof searchTopicsResponder & KoaRuntimeResponder

const searchTopicsResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number(),
        incomplete_results: PermissiveBoolean,
        items: z.array(s_topic_search_result_item),
      }),
    ],
    ["304", z.undefined()],
  ],
  undefined,
)

export type SearchTopics = (
  params: Params<void, t_SearchTopicsQuerySchema, void, void>,
  respond: SearchTopicsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        incomplete_results: boolean
        items: t_topic_search_result_item[]
        total_count: number
      }
    >
  | Response<304, void>
>

const searchUsersResponder = {
  with200: r.with200<{
    incomplete_results: boolean
    items: t_user_search_result_item[]
    total_count: number
  }>,
  with304: r.with304<void>,
  with422: r.with422<t_validation_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type SearchUsersResponder = typeof searchUsersResponder & KoaRuntimeResponder

const searchUsersResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        total_count: z.coerce.number(),
        incomplete_results: PermissiveBoolean,
        items: z.array(s_user_search_result_item),
      }),
    ],
    ["304", z.undefined()],
    ["422", s_validation_error],
    [
      "503",
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        documentation_url: z.string().optional(),
      }),
    ],
  ],
  undefined,
)

export type SearchUsers = (
  params: Params<void, t_SearchUsersQuerySchema, void, void>,
  respond: SearchUsersResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        incomplete_results: boolean
        items: t_user_search_result_item[]
        total_count: number
      }
    >
  | Response<304, void>
  | Response<422, t_validation_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const teamsGetLegacyResponder = {
  with200: r.with200<t_team_full>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type TeamsGetLegacyResponder = typeof teamsGetLegacyResponder &
  KoaRuntimeResponder

const teamsGetLegacyResponseValidator = responseValidationFactory(
  [
    ["200", s_team_full],
    ["404", s_basic_error],
  ],
  undefined,
)

export type TeamsGetLegacy = (
  params: Params<t_TeamsGetLegacyParamSchema, void, void, void>,
  respond: TeamsGetLegacyResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_full>
  | Response<404, t_basic_error>
>

const teamsUpdateLegacyResponder = {
  with200: r.with200<t_team_full>,
  with201: r.with201<t_team_full>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type TeamsUpdateLegacyResponder = typeof teamsUpdateLegacyResponder &
  KoaRuntimeResponder

const teamsUpdateLegacyResponseValidator = responseValidationFactory(
  [
    ["200", s_team_full],
    ["201", s_team_full],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type TeamsUpdateLegacy = (
  params: Params<
    t_TeamsUpdateLegacyParamSchema,
    void,
    t_TeamsUpdateLegacyBodySchema,
    void
  >,
  respond: TeamsUpdateLegacyResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_full>
  | Response<201, t_team_full>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const teamsDeleteLegacyResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type TeamsDeleteLegacyResponder = typeof teamsDeleteLegacyResponder &
  KoaRuntimeResponder

const teamsDeleteLegacyResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type TeamsDeleteLegacy = (
  params: Params<t_TeamsDeleteLegacyParamSchema, void, void, void>,
  respond: TeamsDeleteLegacyResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const teamsListDiscussionsLegacyResponder = {
  with200: r.with200<t_team_discussion[]>,
  withStatus: r.withStatus,
}

type TeamsListDiscussionsLegacyResponder =
  typeof teamsListDiscussionsLegacyResponder & KoaRuntimeResponder

const teamsListDiscussionsLegacyResponseValidator = responseValidationFactory(
  [["200", z.array(s_team_discussion)]],
  undefined,
)

export type TeamsListDiscussionsLegacy = (
  params: Params<
    t_TeamsListDiscussionsLegacyParamSchema,
    t_TeamsListDiscussionsLegacyQuerySchema,
    void,
    void
  >,
  respond: TeamsListDiscussionsLegacyResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_team_discussion[]>>

const teamsCreateDiscussionLegacyResponder = {
  with201: r.with201<t_team_discussion>,
  withStatus: r.withStatus,
}

type TeamsCreateDiscussionLegacyResponder =
  typeof teamsCreateDiscussionLegacyResponder & KoaRuntimeResponder

const teamsCreateDiscussionLegacyResponseValidator = responseValidationFactory(
  [["201", s_team_discussion]],
  undefined,
)

export type TeamsCreateDiscussionLegacy = (
  params: Params<
    t_TeamsCreateDiscussionLegacyParamSchema,
    void,
    t_TeamsCreateDiscussionLegacyBodySchema,
    void
  >,
  respond: TeamsCreateDiscussionLegacyResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_team_discussion>>

const teamsGetDiscussionLegacyResponder = {
  with200: r.with200<t_team_discussion>,
  withStatus: r.withStatus,
}

type TeamsGetDiscussionLegacyResponder =
  typeof teamsGetDiscussionLegacyResponder & KoaRuntimeResponder

const teamsGetDiscussionLegacyResponseValidator = responseValidationFactory(
  [["200", s_team_discussion]],
  undefined,
)

export type TeamsGetDiscussionLegacy = (
  params: Params<t_TeamsGetDiscussionLegacyParamSchema, void, void, void>,
  respond: TeamsGetDiscussionLegacyResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_team_discussion>>

const teamsUpdateDiscussionLegacyResponder = {
  with200: r.with200<t_team_discussion>,
  withStatus: r.withStatus,
}

type TeamsUpdateDiscussionLegacyResponder =
  typeof teamsUpdateDiscussionLegacyResponder & KoaRuntimeResponder

const teamsUpdateDiscussionLegacyResponseValidator = responseValidationFactory(
  [["200", s_team_discussion]],
  undefined,
)

export type TeamsUpdateDiscussionLegacy = (
  params: Params<
    t_TeamsUpdateDiscussionLegacyParamSchema,
    void,
    t_TeamsUpdateDiscussionLegacyBodySchema | undefined,
    void
  >,
  respond: TeamsUpdateDiscussionLegacyResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_team_discussion>>

const teamsDeleteDiscussionLegacyResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type TeamsDeleteDiscussionLegacyResponder =
  typeof teamsDeleteDiscussionLegacyResponder & KoaRuntimeResponder

const teamsDeleteDiscussionLegacyResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type TeamsDeleteDiscussionLegacy = (
  params: Params<t_TeamsDeleteDiscussionLegacyParamSchema, void, void, void>,
  respond: TeamsDeleteDiscussionLegacyResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const teamsListDiscussionCommentsLegacyResponder = {
  with200: r.with200<t_team_discussion_comment[]>,
  withStatus: r.withStatus,
}

type TeamsListDiscussionCommentsLegacyResponder =
  typeof teamsListDiscussionCommentsLegacyResponder & KoaRuntimeResponder

const teamsListDiscussionCommentsLegacyResponseValidator =
  responseValidationFactory(
    [["200", z.array(s_team_discussion_comment)]],
    undefined,
  )

export type TeamsListDiscussionCommentsLegacy = (
  params: Params<
    t_TeamsListDiscussionCommentsLegacyParamSchema,
    t_TeamsListDiscussionCommentsLegacyQuerySchema,
    void,
    void
  >,
  respond: TeamsListDiscussionCommentsLegacyResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_team_discussion_comment[]>
>

const teamsCreateDiscussionCommentLegacyResponder = {
  with201: r.with201<t_team_discussion_comment>,
  withStatus: r.withStatus,
}

type TeamsCreateDiscussionCommentLegacyResponder =
  typeof teamsCreateDiscussionCommentLegacyResponder & KoaRuntimeResponder

const teamsCreateDiscussionCommentLegacyResponseValidator =
  responseValidationFactory([["201", s_team_discussion_comment]], undefined)

export type TeamsCreateDiscussionCommentLegacy = (
  params: Params<
    t_TeamsCreateDiscussionCommentLegacyParamSchema,
    void,
    t_TeamsCreateDiscussionCommentLegacyBodySchema,
    void
  >,
  respond: TeamsCreateDiscussionCommentLegacyResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<201, t_team_discussion_comment>
>

const teamsGetDiscussionCommentLegacyResponder = {
  with200: r.with200<t_team_discussion_comment>,
  withStatus: r.withStatus,
}

type TeamsGetDiscussionCommentLegacyResponder =
  typeof teamsGetDiscussionCommentLegacyResponder & KoaRuntimeResponder

const teamsGetDiscussionCommentLegacyResponseValidator =
  responseValidationFactory([["200", s_team_discussion_comment]], undefined)

export type TeamsGetDiscussionCommentLegacy = (
  params: Params<
    t_TeamsGetDiscussionCommentLegacyParamSchema,
    void,
    void,
    void
  >,
  respond: TeamsGetDiscussionCommentLegacyResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_team_discussion_comment>
>

const teamsUpdateDiscussionCommentLegacyResponder = {
  with200: r.with200<t_team_discussion_comment>,
  withStatus: r.withStatus,
}

type TeamsUpdateDiscussionCommentLegacyResponder =
  typeof teamsUpdateDiscussionCommentLegacyResponder & KoaRuntimeResponder

const teamsUpdateDiscussionCommentLegacyResponseValidator =
  responseValidationFactory([["200", s_team_discussion_comment]], undefined)

export type TeamsUpdateDiscussionCommentLegacy = (
  params: Params<
    t_TeamsUpdateDiscussionCommentLegacyParamSchema,
    void,
    t_TeamsUpdateDiscussionCommentLegacyBodySchema,
    void
  >,
  respond: TeamsUpdateDiscussionCommentLegacyResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_team_discussion_comment>
>

const teamsDeleteDiscussionCommentLegacyResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type TeamsDeleteDiscussionCommentLegacyResponder =
  typeof teamsDeleteDiscussionCommentLegacyResponder & KoaRuntimeResponder

const teamsDeleteDiscussionCommentLegacyResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type TeamsDeleteDiscussionCommentLegacy = (
  params: Params<
    t_TeamsDeleteDiscussionCommentLegacyParamSchema,
    void,
    void,
    void
  >,
  respond: TeamsDeleteDiscussionCommentLegacyResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const reactionsListForTeamDiscussionCommentLegacyResponder = {
  with200: r.with200<t_reaction[]>,
  withStatus: r.withStatus,
}

type ReactionsListForTeamDiscussionCommentLegacyResponder =
  typeof reactionsListForTeamDiscussionCommentLegacyResponder &
    KoaRuntimeResponder

const reactionsListForTeamDiscussionCommentLegacyResponseValidator =
  responseValidationFactory([["200", z.array(s_reaction)]], undefined)

export type ReactionsListForTeamDiscussionCommentLegacy = (
  params: Params<
    t_ReactionsListForTeamDiscussionCommentLegacyParamSchema,
    t_ReactionsListForTeamDiscussionCommentLegacyQuerySchema,
    void,
    void
  >,
  respond: ReactionsListForTeamDiscussionCommentLegacyResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_reaction[]>>

const reactionsCreateForTeamDiscussionCommentLegacyResponder = {
  with201: r.with201<t_reaction>,
  withStatus: r.withStatus,
}

type ReactionsCreateForTeamDiscussionCommentLegacyResponder =
  typeof reactionsCreateForTeamDiscussionCommentLegacyResponder &
    KoaRuntimeResponder

const reactionsCreateForTeamDiscussionCommentLegacyResponseValidator =
  responseValidationFactory([["201", s_reaction]], undefined)

export type ReactionsCreateForTeamDiscussionCommentLegacy = (
  params: Params<
    t_ReactionsCreateForTeamDiscussionCommentLegacyParamSchema,
    void,
    t_ReactionsCreateForTeamDiscussionCommentLegacyBodySchema,
    void
  >,
  respond: ReactionsCreateForTeamDiscussionCommentLegacyResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_reaction>>

const reactionsListForTeamDiscussionLegacyResponder = {
  with200: r.with200<t_reaction[]>,
  withStatus: r.withStatus,
}

type ReactionsListForTeamDiscussionLegacyResponder =
  typeof reactionsListForTeamDiscussionLegacyResponder & KoaRuntimeResponder

const reactionsListForTeamDiscussionLegacyResponseValidator =
  responseValidationFactory([["200", z.array(s_reaction)]], undefined)

export type ReactionsListForTeamDiscussionLegacy = (
  params: Params<
    t_ReactionsListForTeamDiscussionLegacyParamSchema,
    t_ReactionsListForTeamDiscussionLegacyQuerySchema,
    void,
    void
  >,
  respond: ReactionsListForTeamDiscussionLegacyResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_reaction[]>>

const reactionsCreateForTeamDiscussionLegacyResponder = {
  with201: r.with201<t_reaction>,
  withStatus: r.withStatus,
}

type ReactionsCreateForTeamDiscussionLegacyResponder =
  typeof reactionsCreateForTeamDiscussionLegacyResponder & KoaRuntimeResponder

const reactionsCreateForTeamDiscussionLegacyResponseValidator =
  responseValidationFactory([["201", s_reaction]], undefined)

export type ReactionsCreateForTeamDiscussionLegacy = (
  params: Params<
    t_ReactionsCreateForTeamDiscussionLegacyParamSchema,
    void,
    t_ReactionsCreateForTeamDiscussionLegacyBodySchema,
    void
  >,
  respond: ReactionsCreateForTeamDiscussionLegacyResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_reaction>>

const teamsListPendingInvitationsLegacyResponder = {
  with200: r.with200<t_organization_invitation[]>,
  withStatus: r.withStatus,
}

type TeamsListPendingInvitationsLegacyResponder =
  typeof teamsListPendingInvitationsLegacyResponder & KoaRuntimeResponder

const teamsListPendingInvitationsLegacyResponseValidator =
  responseValidationFactory(
    [["200", z.array(s_organization_invitation)]],
    undefined,
  )

export type TeamsListPendingInvitationsLegacy = (
  params: Params<
    t_TeamsListPendingInvitationsLegacyParamSchema,
    t_TeamsListPendingInvitationsLegacyQuerySchema,
    void,
    void
  >,
  respond: TeamsListPendingInvitationsLegacyResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_organization_invitation[]>
>

const teamsListMembersLegacyResponder = {
  with200: r.with200<t_simple_user[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type TeamsListMembersLegacyResponder = typeof teamsListMembersLegacyResponder &
  KoaRuntimeResponder

const teamsListMembersLegacyResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_simple_user)],
    ["404", s_basic_error],
  ],
  undefined,
)

export type TeamsListMembersLegacy = (
  params: Params<
    t_TeamsListMembersLegacyParamSchema,
    t_TeamsListMembersLegacyQuerySchema,
    void,
    void
  >,
  respond: TeamsListMembersLegacyResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[]>
  | Response<404, t_basic_error>
>

const teamsGetMemberLegacyResponder = {
  with204: r.with204<void>,
  with404: r.with404<void>,
  withStatus: r.withStatus,
}

type TeamsGetMemberLegacyResponder = typeof teamsGetMemberLegacyResponder &
  KoaRuntimeResponder

const teamsGetMemberLegacyResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", z.undefined()],
  ],
  undefined,
)

export type TeamsGetMemberLegacy = (
  params: Params<t_TeamsGetMemberLegacyParamSchema, void, void, void>,
  respond: TeamsGetMemberLegacyResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<404, void>
>

const teamsAddMemberLegacyResponder = {
  with204: r.with204<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<void>,
  with422: r.with422<void>,
  withStatus: r.withStatus,
}

type TeamsAddMemberLegacyResponder = typeof teamsAddMemberLegacyResponder &
  KoaRuntimeResponder

const teamsAddMemberLegacyResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["403", s_basic_error],
    ["404", z.undefined()],
    ["422", z.undefined()],
  ],
  undefined,
)

export type TeamsAddMemberLegacy = (
  params: Params<t_TeamsAddMemberLegacyParamSchema, void, void, void>,
  respond: TeamsAddMemberLegacyResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<404, void>
  | Response<422, void>
>

const teamsRemoveMemberLegacyResponder = {
  with204: r.with204<void>,
  with404: r.with404<void>,
  withStatus: r.withStatus,
}

type TeamsRemoveMemberLegacyResponder =
  typeof teamsRemoveMemberLegacyResponder & KoaRuntimeResponder

const teamsRemoveMemberLegacyResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", z.undefined()],
  ],
  undefined,
)

export type TeamsRemoveMemberLegacy = (
  params: Params<t_TeamsRemoveMemberLegacyParamSchema, void, void, void>,
  respond: TeamsRemoveMemberLegacyResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<404, void>
>

const teamsGetMembershipForUserLegacyResponder = {
  with200: r.with200<t_team_membership>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type TeamsGetMembershipForUserLegacyResponder =
  typeof teamsGetMembershipForUserLegacyResponder & KoaRuntimeResponder

const teamsGetMembershipForUserLegacyResponseValidator =
  responseValidationFactory(
    [
      ["200", s_team_membership],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type TeamsGetMembershipForUserLegacy = (
  params: Params<
    t_TeamsGetMembershipForUserLegacyParamSchema,
    void,
    void,
    void
  >,
  respond: TeamsGetMembershipForUserLegacyResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_membership>
  | Response<404, t_basic_error>
>

const teamsAddOrUpdateMembershipForUserLegacyResponder = {
  with200: r.with200<t_team_membership>,
  with403: r.with403<void>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<void>,
  withStatus: r.withStatus,
}

type TeamsAddOrUpdateMembershipForUserLegacyResponder =
  typeof teamsAddOrUpdateMembershipForUserLegacyResponder & KoaRuntimeResponder

const teamsAddOrUpdateMembershipForUserLegacyResponseValidator =
  responseValidationFactory(
    [
      ["200", s_team_membership],
      ["403", z.undefined()],
      ["404", s_basic_error],
      ["422", z.undefined()],
    ],
    undefined,
  )

export type TeamsAddOrUpdateMembershipForUserLegacy = (
  params: Params<
    t_TeamsAddOrUpdateMembershipForUserLegacyParamSchema,
    void,
    t_TeamsAddOrUpdateMembershipForUserLegacyBodySchema | undefined,
    void
  >,
  respond: TeamsAddOrUpdateMembershipForUserLegacyResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_membership>
  | Response<403, void>
  | Response<404, t_basic_error>
  | Response<422, void>
>

const teamsRemoveMembershipForUserLegacyResponder = {
  with204: r.with204<void>,
  with403: r.with403<void>,
  withStatus: r.withStatus,
}

type TeamsRemoveMembershipForUserLegacyResponder =
  typeof teamsRemoveMembershipForUserLegacyResponder & KoaRuntimeResponder

const teamsRemoveMembershipForUserLegacyResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["403", z.undefined()],
    ],
    undefined,
  )

export type TeamsRemoveMembershipForUserLegacy = (
  params: Params<
    t_TeamsRemoveMembershipForUserLegacyParamSchema,
    void,
    void,
    void
  >,
  respond: TeamsRemoveMembershipForUserLegacyResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<403, void>
>

const teamsListProjectsLegacyResponder = {
  with200: r.with200<t_team_project[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type TeamsListProjectsLegacyResponder =
  typeof teamsListProjectsLegacyResponder & KoaRuntimeResponder

const teamsListProjectsLegacyResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_team_project)],
    ["404", s_basic_error],
  ],
  undefined,
)

export type TeamsListProjectsLegacy = (
  params: Params<
    t_TeamsListProjectsLegacyParamSchema,
    t_TeamsListProjectsLegacyQuerySchema,
    void,
    void
  >,
  respond: TeamsListProjectsLegacyResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_project[]>
  | Response<404, t_basic_error>
>

const teamsCheckPermissionsForProjectLegacyResponder = {
  with200: r.with200<t_team_project>,
  with404: r.with404<void>,
  withStatus: r.withStatus,
}

type TeamsCheckPermissionsForProjectLegacyResponder =
  typeof teamsCheckPermissionsForProjectLegacyResponder & KoaRuntimeResponder

const teamsCheckPermissionsForProjectLegacyResponseValidator =
  responseValidationFactory(
    [
      ["200", s_team_project],
      ["404", z.undefined()],
    ],
    undefined,
  )

export type TeamsCheckPermissionsForProjectLegacy = (
  params: Params<
    t_TeamsCheckPermissionsForProjectLegacyParamSchema,
    void,
    void,
    void
  >,
  respond: TeamsCheckPermissionsForProjectLegacyResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_project>
  | Response<404, void>
>

const teamsAddOrUpdateProjectPermissionsLegacyResponder = {
  with204: r.with204<void>,
  with403: r.with403<{
    documentation_url?: string
    message?: string
  }>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type TeamsAddOrUpdateProjectPermissionsLegacyResponder =
  typeof teamsAddOrUpdateProjectPermissionsLegacyResponder & KoaRuntimeResponder

const teamsAddOrUpdateProjectPermissionsLegacyResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      [
        "403",
        z.object({
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type TeamsAddOrUpdateProjectPermissionsLegacy = (
  params: Params<
    t_TeamsAddOrUpdateProjectPermissionsLegacyParamSchema,
    void,
    t_TeamsAddOrUpdateProjectPermissionsLegacyBodySchema | undefined,
    void
  >,
  respond: TeamsAddOrUpdateProjectPermissionsLegacyResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<
      403,
      {
        documentation_url?: string
        message?: string
      }
    >
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const teamsRemoveProjectLegacyResponder = {
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type TeamsRemoveProjectLegacyResponder =
  typeof teamsRemoveProjectLegacyResponder & KoaRuntimeResponder

const teamsRemoveProjectLegacyResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type TeamsRemoveProjectLegacy = (
  params: Params<t_TeamsRemoveProjectLegacyParamSchema, void, void, void>,
  respond: TeamsRemoveProjectLegacyResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const teamsListReposLegacyResponder = {
  with200: r.with200<t_minimal_repository[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type TeamsListReposLegacyResponder = typeof teamsListReposLegacyResponder &
  KoaRuntimeResponder

const teamsListReposLegacyResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_minimal_repository)],
    ["404", s_basic_error],
  ],
  undefined,
)

export type TeamsListReposLegacy = (
  params: Params<
    t_TeamsListReposLegacyParamSchema,
    t_TeamsListReposLegacyQuerySchema,
    void,
    void
  >,
  respond: TeamsListReposLegacyResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_minimal_repository[]>
  | Response<404, t_basic_error>
>

const teamsCheckPermissionsForRepoLegacyResponder = {
  with200: r.with200<t_team_repository>,
  with204: r.with204<void>,
  with404: r.with404<void>,
  withStatus: r.withStatus,
}

type TeamsCheckPermissionsForRepoLegacyResponder =
  typeof teamsCheckPermissionsForRepoLegacyResponder & KoaRuntimeResponder

const teamsCheckPermissionsForRepoLegacyResponseValidator =
  responseValidationFactory(
    [
      ["200", s_team_repository],
      ["204", z.undefined()],
      ["404", z.undefined()],
    ],
    undefined,
  )

export type TeamsCheckPermissionsForRepoLegacy = (
  params: Params<
    t_TeamsCheckPermissionsForRepoLegacyParamSchema,
    void,
    void,
    void
  >,
  respond: TeamsCheckPermissionsForRepoLegacyResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_repository>
  | Response<204, void>
  | Response<404, void>
>

const teamsAddOrUpdateRepoPermissionsLegacyResponder = {
  with204: r.with204<void>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type TeamsAddOrUpdateRepoPermissionsLegacyResponder =
  typeof teamsAddOrUpdateRepoPermissionsLegacyResponder & KoaRuntimeResponder

const teamsAddOrUpdateRepoPermissionsLegacyResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["403", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type TeamsAddOrUpdateRepoPermissionsLegacy = (
  params: Params<
    t_TeamsAddOrUpdateRepoPermissionsLegacyParamSchema,
    void,
    t_TeamsAddOrUpdateRepoPermissionsLegacyBodySchema | undefined,
    void
  >,
  respond: TeamsAddOrUpdateRepoPermissionsLegacyResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

const teamsRemoveRepoLegacyResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type TeamsRemoveRepoLegacyResponder = typeof teamsRemoveRepoLegacyResponder &
  KoaRuntimeResponder

const teamsRemoveRepoLegacyResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type TeamsRemoveRepoLegacy = (
  params: Params<t_TeamsRemoveRepoLegacyParamSchema, void, void, void>,
  respond: TeamsRemoveRepoLegacyResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const teamsListChildLegacyResponder = {
  with200: r.with200<t_team[]>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type TeamsListChildLegacyResponder = typeof teamsListChildLegacyResponder &
  KoaRuntimeResponder

const teamsListChildLegacyResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_team)],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type TeamsListChildLegacy = (
  params: Params<
    t_TeamsListChildLegacyParamSchema,
    t_TeamsListChildLegacyQuerySchema,
    void,
    void
  >,
  respond: TeamsListChildLegacyResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const usersGetAuthenticatedResponder = {
  with200: r.with200<t_private_user | t_public_user>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type UsersGetAuthenticatedResponder = typeof usersGetAuthenticatedResponder &
  KoaRuntimeResponder

const usersGetAuthenticatedResponseValidator = responseValidationFactory(
  [
    ["200", z.union([s_private_user, s_public_user])],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
  ],
  undefined,
)

export type UsersGetAuthenticated = (
  params: Params<void, void, void, void>,
  respond: UsersGetAuthenticatedResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_private_user | t_public_user>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const usersUpdateAuthenticatedResponder = {
  with200: r.with200<t_private_user>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type UsersUpdateAuthenticatedResponder =
  typeof usersUpdateAuthenticatedResponder & KoaRuntimeResponder

const usersUpdateAuthenticatedResponseValidator = responseValidationFactory(
  [
    ["200", s_private_user],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type UsersUpdateAuthenticated = (
  params: Params<
    void,
    void,
    t_UsersUpdateAuthenticatedBodySchema | undefined,
    void
  >,
  respond: UsersUpdateAuthenticatedResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_private_user>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const usersListBlockedByAuthenticatedUserResponder = {
  with200: r.with200<t_simple_user[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type UsersListBlockedByAuthenticatedUserResponder =
  typeof usersListBlockedByAuthenticatedUserResponder & KoaRuntimeResponder

const usersListBlockedByAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_simple_user)],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type UsersListBlockedByAuthenticatedUser = (
  params: Params<
    void,
    t_UsersListBlockedByAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: UsersListBlockedByAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const usersCheckBlockedResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type UsersCheckBlockedResponder = typeof usersCheckBlockedResponder &
  KoaRuntimeResponder

const usersCheckBlockedResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type UsersCheckBlocked = (
  params: Params<t_UsersCheckBlockedParamSchema, void, void, void>,
  respond: UsersCheckBlockedResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const usersBlockResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type UsersBlockResponder = typeof usersBlockResponder & KoaRuntimeResponder

const usersBlockResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type UsersBlock = (
  params: Params<t_UsersBlockParamSchema, void, void, void>,
  respond: UsersBlockResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const usersUnblockResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type UsersUnblockResponder = typeof usersUnblockResponder & KoaRuntimeResponder

const usersUnblockResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type UsersUnblock = (
  params: Params<t_UsersUnblockParamSchema, void, void, void>,
  respond: UsersUnblockResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const codespacesListForAuthenticatedUserResponder = {
  with200: r.with200<{
    codespaces: t_codespace[]
    total_count: number
  }>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesListForAuthenticatedUserResponder =
  typeof codespacesListForAuthenticatedUserResponder & KoaRuntimeResponder

const codespacesListForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          codespaces: z.array(s_codespace),
        }),
      ],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CodespacesListForAuthenticatedUser = (
  params: Params<
    void,
    t_CodespacesListForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: CodespacesListForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        codespaces: t_codespace[]
        total_count: number
      }
    >
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const codespacesCreateForAuthenticatedUserResponder = {
  with201: r.with201<t_codespace>,
  with202: r.with202<t_codespace>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with503: r.with503<{
    code?: string
    documentation_url?: string
    message?: string
  }>,
  withStatus: r.withStatus,
}

type CodespacesCreateForAuthenticatedUserResponder =
  typeof codespacesCreateForAuthenticatedUserResponder & KoaRuntimeResponder

const codespacesCreateForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["201", s_codespace],
      ["202", s_codespace],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

export type CodespacesCreateForAuthenticatedUser = (
  params: Params<
    void,
    void,
    t_CodespacesCreateForAuthenticatedUserBodySchema,
    void
  >,
  respond: CodespacesCreateForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_codespace>
  | Response<202, t_codespace>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

const codespacesListSecretsForAuthenticatedUserResponder = {
  with200: r.with200<{
    secrets: t_codespaces_secret[]
    total_count: number
  }>,
  withStatus: r.withStatus,
}

type CodespacesListSecretsForAuthenticatedUserResponder =
  typeof codespacesListSecretsForAuthenticatedUserResponder &
    KoaRuntimeResponder

const codespacesListSecretsForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          secrets: z.array(s_codespaces_secret),
        }),
      ],
    ],
    undefined,
  )

export type CodespacesListSecretsForAuthenticatedUser = (
  params: Params<
    void,
    t_CodespacesListSecretsForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: CodespacesListSecretsForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        secrets: t_codespaces_secret[]
        total_count: number
      }
    >
>

const codespacesGetPublicKeyForAuthenticatedUserResponder = {
  with200: r.with200<t_codespaces_user_public_key>,
  withStatus: r.withStatus,
}

type CodespacesGetPublicKeyForAuthenticatedUserResponder =
  typeof codespacesGetPublicKeyForAuthenticatedUserResponder &
    KoaRuntimeResponder

const codespacesGetPublicKeyForAuthenticatedUserResponseValidator =
  responseValidationFactory([["200", s_codespaces_user_public_key]], undefined)

export type CodespacesGetPublicKeyForAuthenticatedUser = (
  params: Params<void, void, void, void>,
  respond: CodespacesGetPublicKeyForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_codespaces_user_public_key>
>

const codespacesGetSecretForAuthenticatedUserResponder = {
  with200: r.with200<t_codespaces_secret>,
  withStatus: r.withStatus,
}

type CodespacesGetSecretForAuthenticatedUserResponder =
  typeof codespacesGetSecretForAuthenticatedUserResponder & KoaRuntimeResponder

const codespacesGetSecretForAuthenticatedUserResponseValidator =
  responseValidationFactory([["200", s_codespaces_secret]], undefined)

export type CodespacesGetSecretForAuthenticatedUser = (
  params: Params<
    t_CodespacesGetSecretForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: CodespacesGetSecretForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_codespaces_secret>>

const codespacesCreateOrUpdateSecretForAuthenticatedUserResponder = {
  with201: r.with201<t_empty_object>,
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type CodespacesCreateOrUpdateSecretForAuthenticatedUserResponder =
  typeof codespacesCreateOrUpdateSecretForAuthenticatedUserResponder &
    KoaRuntimeResponder

const codespacesCreateOrUpdateSecretForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["201", s_empty_object],
      ["204", z.undefined()],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type CodespacesCreateOrUpdateSecretForAuthenticatedUser = (
  params: Params<
    t_CodespacesCreateOrUpdateSecretForAuthenticatedUserParamSchema,
    void,
    t_CodespacesCreateOrUpdateSecretForAuthenticatedUserBodySchema,
    void
  >,
  respond: CodespacesCreateOrUpdateSecretForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const codespacesDeleteSecretForAuthenticatedUserResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type CodespacesDeleteSecretForAuthenticatedUserResponder =
  typeof codespacesDeleteSecretForAuthenticatedUserResponder &
    KoaRuntimeResponder

const codespacesDeleteSecretForAuthenticatedUserResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type CodespacesDeleteSecretForAuthenticatedUser = (
  params: Params<
    t_CodespacesDeleteSecretForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: CodespacesDeleteSecretForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const codespacesListRepositoriesForSecretForAuthenticatedUserResponder = {
  with200: r.with200<{
    repositories: t_minimal_repository[]
    total_count: number
  }>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesListRepositoriesForSecretForAuthenticatedUserResponder =
  typeof codespacesListRepositoriesForSecretForAuthenticatedUserResponder &
    KoaRuntimeResponder

const codespacesListRepositoriesForSecretForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          repositories: z.array(s_minimal_repository),
        }),
      ],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CodespacesListRepositoriesForSecretForAuthenticatedUser = (
  params: Params<
    t_CodespacesListRepositoriesForSecretForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: CodespacesListRepositoriesForSecretForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        repositories: t_minimal_repository[]
        total_count: number
      }
    >
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const codespacesSetRepositoriesForSecretForAuthenticatedUserResponder = {
  with204: r.with204<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesSetRepositoriesForSecretForAuthenticatedUserResponder =
  typeof codespacesSetRepositoriesForSecretForAuthenticatedUserResponder &
    KoaRuntimeResponder

const codespacesSetRepositoriesForSecretForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CodespacesSetRepositoriesForSecretForAuthenticatedUser = (
  params: Params<
    t_CodespacesSetRepositoriesForSecretForAuthenticatedUserParamSchema,
    void,
    t_CodespacesSetRepositoriesForSecretForAuthenticatedUserBodySchema,
    void
  >,
  respond: CodespacesSetRepositoriesForSecretForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const codespacesAddRepositoryForSecretForAuthenticatedUserResponder = {
  with204: r.with204<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesAddRepositoryForSecretForAuthenticatedUserResponder =
  typeof codespacesAddRepositoryForSecretForAuthenticatedUserResponder &
    KoaRuntimeResponder

const codespacesAddRepositoryForSecretForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CodespacesAddRepositoryForSecretForAuthenticatedUser = (
  params: Params<
    t_CodespacesAddRepositoryForSecretForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: CodespacesAddRepositoryForSecretForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const codespacesRemoveRepositoryForSecretForAuthenticatedUserResponder = {
  with204: r.with204<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesRemoveRepositoryForSecretForAuthenticatedUserResponder =
  typeof codespacesRemoveRepositoryForSecretForAuthenticatedUserResponder &
    KoaRuntimeResponder

const codespacesRemoveRepositoryForSecretForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CodespacesRemoveRepositoryForSecretForAuthenticatedUser = (
  params: Params<
    t_CodespacesRemoveRepositoryForSecretForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: CodespacesRemoveRepositoryForSecretForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const codespacesGetForAuthenticatedUserResponder = {
  with200: r.with200<t_codespace>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesGetForAuthenticatedUserResponder =
  typeof codespacesGetForAuthenticatedUserResponder & KoaRuntimeResponder

const codespacesGetForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", s_codespace],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CodespacesGetForAuthenticatedUser = (
  params: Params<
    t_CodespacesGetForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: CodespacesGetForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_codespace>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const codespacesUpdateForAuthenticatedUserResponder = {
  with200: r.with200<t_codespace>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesUpdateForAuthenticatedUserResponder =
  typeof codespacesUpdateForAuthenticatedUserResponder & KoaRuntimeResponder

const codespacesUpdateForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", s_codespace],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type CodespacesUpdateForAuthenticatedUser = (
  params: Params<
    t_CodespacesUpdateForAuthenticatedUserParamSchema,
    void,
    t_CodespacesUpdateForAuthenticatedUserBodySchema | undefined,
    void
  >,
  respond: CodespacesUpdateForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_codespace>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const codespacesDeleteForAuthenticatedUserResponder = {
  with202: r.with202<{
    [key: string]: unknown | undefined
  }>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesDeleteForAuthenticatedUserResponder =
  typeof codespacesDeleteForAuthenticatedUserResponder & KoaRuntimeResponder

const codespacesDeleteForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["202", z.record(z.unknown())],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CodespacesDeleteForAuthenticatedUser = (
  params: Params<
    t_CodespacesDeleteForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: CodespacesDeleteForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      202,
      {
        [key: string]: unknown | undefined
      }
    >
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const codespacesExportForAuthenticatedUserResponder = {
  with202: r.with202<t_codespace_export_details>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesExportForAuthenticatedUserResponder =
  typeof codespacesExportForAuthenticatedUserResponder & KoaRuntimeResponder

const codespacesExportForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["202", s_codespace_export_details],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CodespacesExportForAuthenticatedUser = (
  params: Params<
    t_CodespacesExportForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: CodespacesExportForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<202, t_codespace_export_details>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<500, t_basic_error>
>

const codespacesGetExportDetailsForAuthenticatedUserResponder = {
  with200: r.with200<t_codespace_export_details>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesGetExportDetailsForAuthenticatedUserResponder =
  typeof codespacesGetExportDetailsForAuthenticatedUserResponder &
    KoaRuntimeResponder

const codespacesGetExportDetailsForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", s_codespace_export_details],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type CodespacesGetExportDetailsForAuthenticatedUser = (
  params: Params<
    t_CodespacesGetExportDetailsForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: CodespacesGetExportDetailsForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_codespace_export_details>
  | Response<404, t_basic_error>
>

const codespacesCodespaceMachinesForAuthenticatedUserResponder = {
  with200: r.with200<{
    machines: t_codespace_machine[]
    total_count: number
  }>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesCodespaceMachinesForAuthenticatedUserResponder =
  typeof codespacesCodespaceMachinesForAuthenticatedUserResponder &
    KoaRuntimeResponder

const codespacesCodespaceMachinesForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          machines: z.array(s_codespace_machine),
        }),
      ],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CodespacesCodespaceMachinesForAuthenticatedUser = (
  params: Params<
    t_CodespacesCodespaceMachinesForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: CodespacesCodespaceMachinesForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        machines: t_codespace_machine[]
        total_count: number
      }
    >
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const codespacesPublishForAuthenticatedUserResponder = {
  with201: r.with201<t_codespace_with_full_repository>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type CodespacesPublishForAuthenticatedUserResponder =
  typeof codespacesPublishForAuthenticatedUserResponder & KoaRuntimeResponder

const codespacesPublishForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["201", s_codespace_with_full_repository],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type CodespacesPublishForAuthenticatedUser = (
  params: Params<
    t_CodespacesPublishForAuthenticatedUserParamSchema,
    void,
    t_CodespacesPublishForAuthenticatedUserBodySchema,
    void
  >,
  respond: CodespacesPublishForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_codespace_with_full_repository>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const codespacesStartForAuthenticatedUserResponder = {
  with200: r.with200<t_codespace>,
  with304: r.with304<void>,
  with400: r.with400<t_scim_error>,
  with401: r.with401<t_basic_error>,
  with402: r.with402<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesStartForAuthenticatedUserResponder =
  typeof codespacesStartForAuthenticatedUserResponder & KoaRuntimeResponder

const codespacesStartForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", s_codespace],
      ["304", z.undefined()],
      ["400", s_scim_error],
      ["401", s_basic_error],
      ["402", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["409", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CodespacesStartForAuthenticatedUser = (
  params: Params<
    t_CodespacesStartForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: CodespacesStartForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_codespace>
  | Response<304, void>
  | Response<400, t_scim_error>
  | Response<401, t_basic_error>
  | Response<402, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
  | Response<500, t_basic_error>
>

const codespacesStopForAuthenticatedUserResponder = {
  with200: r.with200<t_codespace>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with500: r.with500<t_basic_error>,
  withStatus: r.withStatus,
}

type CodespacesStopForAuthenticatedUserResponder =
  typeof codespacesStopForAuthenticatedUserResponder & KoaRuntimeResponder

const codespacesStopForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", s_codespace],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

export type CodespacesStopForAuthenticatedUser = (
  params: Params<
    t_CodespacesStopForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: CodespacesStopForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_codespace>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

const packagesListDockerMigrationConflictingPackagesForAuthenticatedUserResponder =
  {
    with200: r.with200<t_package[]>,
    withStatus: r.withStatus,
  }

type PackagesListDockerMigrationConflictingPackagesForAuthenticatedUserResponder =
  typeof packagesListDockerMigrationConflictingPackagesForAuthenticatedUserResponder &
    KoaRuntimeResponder

const packagesListDockerMigrationConflictingPackagesForAuthenticatedUserResponseValidator =
  responseValidationFactory([["200", z.array(s_package)]], undefined)

export type PackagesListDockerMigrationConflictingPackagesForAuthenticatedUser =
  (
    params: Params<void, void, void, void>,
    respond: PackagesListDockerMigrationConflictingPackagesForAuthenticatedUserResponder,
    ctx: RouterContext,
  ) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_package[]>>

const usersSetPrimaryEmailVisibilityForAuthenticatedUserResponder = {
  with200: r.with200<t_email[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type UsersSetPrimaryEmailVisibilityForAuthenticatedUserResponder =
  typeof usersSetPrimaryEmailVisibilityForAuthenticatedUserResponder &
    KoaRuntimeResponder

const usersSetPrimaryEmailVisibilityForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_email)],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type UsersSetPrimaryEmailVisibilityForAuthenticatedUser = (
  params: Params<
    void,
    void,
    t_UsersSetPrimaryEmailVisibilityForAuthenticatedUserBodySchema,
    void
  >,
  respond: UsersSetPrimaryEmailVisibilityForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_email[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const usersListEmailsForAuthenticatedUserResponder = {
  with200: r.with200<t_email[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type UsersListEmailsForAuthenticatedUserResponder =
  typeof usersListEmailsForAuthenticatedUserResponder & KoaRuntimeResponder

const usersListEmailsForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_email)],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type UsersListEmailsForAuthenticatedUser = (
  params: Params<
    void,
    t_UsersListEmailsForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: UsersListEmailsForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_email[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const usersAddEmailForAuthenticatedUserResponder = {
  with201: r.with201<t_email[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type UsersAddEmailForAuthenticatedUserResponder =
  typeof usersAddEmailForAuthenticatedUserResponder & KoaRuntimeResponder

const usersAddEmailForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["201", z.array(s_email)],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type UsersAddEmailForAuthenticatedUser = (
  params: Params<
    void,
    void,
    t_UsersAddEmailForAuthenticatedUserBodySchema | undefined,
    void
  >,
  respond: UsersAddEmailForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_email[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const usersDeleteEmailForAuthenticatedUserResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type UsersDeleteEmailForAuthenticatedUserResponder =
  typeof usersDeleteEmailForAuthenticatedUserResponder & KoaRuntimeResponder

const usersDeleteEmailForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type UsersDeleteEmailForAuthenticatedUser = (
  params: Params<
    void,
    void,
    t_UsersDeleteEmailForAuthenticatedUserBodySchema,
    void
  >,
  respond: UsersDeleteEmailForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const usersListFollowersForAuthenticatedUserResponder = {
  with200: r.with200<t_simple_user[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type UsersListFollowersForAuthenticatedUserResponder =
  typeof usersListFollowersForAuthenticatedUserResponder & KoaRuntimeResponder

const usersListFollowersForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_simple_user)],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
    ],
    undefined,
  )

export type UsersListFollowersForAuthenticatedUser = (
  params: Params<
    void,
    t_UsersListFollowersForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: UsersListFollowersForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const usersListFollowedByAuthenticatedUserResponder = {
  with200: r.with200<t_simple_user[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type UsersListFollowedByAuthenticatedUserResponder =
  typeof usersListFollowedByAuthenticatedUserResponder & KoaRuntimeResponder

const usersListFollowedByAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_simple_user)],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
    ],
    undefined,
  )

export type UsersListFollowedByAuthenticatedUser = (
  params: Params<
    void,
    t_UsersListFollowedByAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: UsersListFollowedByAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const usersCheckPersonIsFollowedByAuthenticatedResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type UsersCheckPersonIsFollowedByAuthenticatedResponder =
  typeof usersCheckPersonIsFollowedByAuthenticatedResponder &
    KoaRuntimeResponder

const usersCheckPersonIsFollowedByAuthenticatedResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type UsersCheckPersonIsFollowedByAuthenticated = (
  params: Params<
    t_UsersCheckPersonIsFollowedByAuthenticatedParamSchema,
    void,
    void,
    void
  >,
  respond: UsersCheckPersonIsFollowedByAuthenticatedResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const usersFollowResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type UsersFollowResponder = typeof usersFollowResponder & KoaRuntimeResponder

const usersFollowResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type UsersFollow = (
  params: Params<t_UsersFollowParamSchema, void, void, void>,
  respond: UsersFollowResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const usersUnfollowResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type UsersUnfollowResponder = typeof usersUnfollowResponder &
  KoaRuntimeResponder

const usersUnfollowResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type UsersUnfollow = (
  params: Params<t_UsersUnfollowParamSchema, void, void, void>,
  respond: UsersUnfollowResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const usersListGpgKeysForAuthenticatedUserResponder = {
  with200: r.with200<t_gpg_key[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type UsersListGpgKeysForAuthenticatedUserResponder =
  typeof usersListGpgKeysForAuthenticatedUserResponder & KoaRuntimeResponder

const usersListGpgKeysForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_gpg_key)],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type UsersListGpgKeysForAuthenticatedUser = (
  params: Params<
    void,
    t_UsersListGpgKeysForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: UsersListGpgKeysForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_gpg_key[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const usersCreateGpgKeyForAuthenticatedUserResponder = {
  with201: r.with201<t_gpg_key>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type UsersCreateGpgKeyForAuthenticatedUserResponder =
  typeof usersCreateGpgKeyForAuthenticatedUserResponder & KoaRuntimeResponder

const usersCreateGpgKeyForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["201", s_gpg_key],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type UsersCreateGpgKeyForAuthenticatedUser = (
  params: Params<
    void,
    void,
    t_UsersCreateGpgKeyForAuthenticatedUserBodySchema,
    void
  >,
  respond: UsersCreateGpgKeyForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_gpg_key>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const usersGetGpgKeyForAuthenticatedUserResponder = {
  with200: r.with200<t_gpg_key>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type UsersGetGpgKeyForAuthenticatedUserResponder =
  typeof usersGetGpgKeyForAuthenticatedUserResponder & KoaRuntimeResponder

const usersGetGpgKeyForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", s_gpg_key],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type UsersGetGpgKeyForAuthenticatedUser = (
  params: Params<
    t_UsersGetGpgKeyForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: UsersGetGpgKeyForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_gpg_key>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const usersDeleteGpgKeyForAuthenticatedUserResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type UsersDeleteGpgKeyForAuthenticatedUserResponder =
  typeof usersDeleteGpgKeyForAuthenticatedUserResponder & KoaRuntimeResponder

const usersDeleteGpgKeyForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type UsersDeleteGpgKeyForAuthenticatedUser = (
  params: Params<
    t_UsersDeleteGpgKeyForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: UsersDeleteGpgKeyForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const appsListInstallationsForAuthenticatedUserResponder = {
  with200: r.with200<{
    installations: t_installation[]
    total_count: number
  }>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type AppsListInstallationsForAuthenticatedUserResponder =
  typeof appsListInstallationsForAuthenticatedUserResponder &
    KoaRuntimeResponder

const appsListInstallationsForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          installations: z.array(s_installation),
        }),
      ],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
    ],
    undefined,
  )

export type AppsListInstallationsForAuthenticatedUser = (
  params: Params<
    void,
    t_AppsListInstallationsForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: AppsListInstallationsForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        installations: t_installation[]
        total_count: number
      }
    >
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const appsListInstallationReposForAuthenticatedUserResponder = {
  with200: r.with200<{
    repositories: t_repository[]
    repository_selection?: string
    total_count: number
  }>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type AppsListInstallationReposForAuthenticatedUserResponder =
  typeof appsListInstallationReposForAuthenticatedUserResponder &
    KoaRuntimeResponder

const appsListInstallationReposForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          repository_selection: z.string().optional(),
          repositories: z.array(s_repository),
        }),
      ],
      ["304", z.undefined()],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type AppsListInstallationReposForAuthenticatedUser = (
  params: Params<
    t_AppsListInstallationReposForAuthenticatedUserParamSchema,
    t_AppsListInstallationReposForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: AppsListInstallationReposForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        repositories: t_repository[]
        repository_selection?: string
        total_count: number
      }
    >
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const appsAddRepoToInstallationForAuthenticatedUserResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type AppsAddRepoToInstallationForAuthenticatedUserResponder =
  typeof appsAddRepoToInstallationForAuthenticatedUserResponder &
    KoaRuntimeResponder

const appsAddRepoToInstallationForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["304", z.undefined()],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type AppsAddRepoToInstallationForAuthenticatedUser = (
  params: Params<
    t_AppsAddRepoToInstallationForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: AppsAddRepoToInstallationForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const appsRemoveRepoFromInstallationForAuthenticatedUserResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<void>,
  withStatus: r.withStatus,
}

type AppsRemoveRepoFromInstallationForAuthenticatedUserResponder =
  typeof appsRemoveRepoFromInstallationForAuthenticatedUserResponder &
    KoaRuntimeResponder

const appsRemoveRepoFromInstallationForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["304", z.undefined()],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", z.undefined()],
    ],
    undefined,
  )

export type AppsRemoveRepoFromInstallationForAuthenticatedUser = (
  params: Params<
    t_AppsRemoveRepoFromInstallationForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: AppsRemoveRepoFromInstallationForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, void>
>

const interactionsGetRestrictionsForAuthenticatedUserResponder = {
  with200: r.with200<t_interaction_limit_response | EmptyObject>,
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type InteractionsGetRestrictionsForAuthenticatedUserResponder =
  typeof interactionsGetRestrictionsForAuthenticatedUserResponder &
    KoaRuntimeResponder

const interactionsGetRestrictionsForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.union([s_interaction_limit_response, z.object({})])],
      ["204", z.undefined()],
    ],
    undefined,
  )

export type InteractionsGetRestrictionsForAuthenticatedUser = (
  params: Params<void, void, void, void>,
  respond: InteractionsGetRestrictionsForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_interaction_limit_response | EmptyObject>
  | Response<204, void>
>

const interactionsSetRestrictionsForAuthenticatedUserResponder = {
  with200: r.with200<t_interaction_limit_response>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type InteractionsSetRestrictionsForAuthenticatedUserResponder =
  typeof interactionsSetRestrictionsForAuthenticatedUserResponder &
    KoaRuntimeResponder

const interactionsSetRestrictionsForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", s_interaction_limit_response],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type InteractionsSetRestrictionsForAuthenticatedUser = (
  params: Params<
    void,
    void,
    t_InteractionsSetRestrictionsForAuthenticatedUserBodySchema,
    void
  >,
  respond: InteractionsSetRestrictionsForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_interaction_limit_response>
  | Response<422, t_validation_error>
>

const interactionsRemoveRestrictionsForAuthenticatedUserResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type InteractionsRemoveRestrictionsForAuthenticatedUserResponder =
  typeof interactionsRemoveRestrictionsForAuthenticatedUserResponder &
    KoaRuntimeResponder

const interactionsRemoveRestrictionsForAuthenticatedUserResponseValidator =
  responseValidationFactory([["204", z.undefined()]], undefined)

export type InteractionsRemoveRestrictionsForAuthenticatedUser = (
  params: Params<void, void, void, void>,
  respond: InteractionsRemoveRestrictionsForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const issuesListForAuthenticatedUserResponder = {
  with200: r.with200<t_issue[]>,
  with304: r.with304<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type IssuesListForAuthenticatedUserResponder =
  typeof issuesListForAuthenticatedUserResponder & KoaRuntimeResponder

const issuesListForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_issue)],
      ["304", z.undefined()],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type IssuesListForAuthenticatedUser = (
  params: Params<void, t_IssuesListForAuthenticatedUserQuerySchema, void, void>,
  respond: IssuesListForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue[]>
  | Response<304, void>
  | Response<404, t_basic_error>
>

const usersListPublicSshKeysForAuthenticatedUserResponder = {
  with200: r.with200<t_key[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type UsersListPublicSshKeysForAuthenticatedUserResponder =
  typeof usersListPublicSshKeysForAuthenticatedUserResponder &
    KoaRuntimeResponder

const usersListPublicSshKeysForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_key)],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type UsersListPublicSshKeysForAuthenticatedUser = (
  params: Params<
    void,
    t_UsersListPublicSshKeysForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: UsersListPublicSshKeysForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_key[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const usersCreatePublicSshKeyForAuthenticatedUserResponder = {
  with201: r.with201<t_key>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type UsersCreatePublicSshKeyForAuthenticatedUserResponder =
  typeof usersCreatePublicSshKeyForAuthenticatedUserResponder &
    KoaRuntimeResponder

const usersCreatePublicSshKeyForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["201", s_key],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type UsersCreatePublicSshKeyForAuthenticatedUser = (
  params: Params<
    void,
    void,
    t_UsersCreatePublicSshKeyForAuthenticatedUserBodySchema,
    void
  >,
  respond: UsersCreatePublicSshKeyForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_key>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const usersGetPublicSshKeyForAuthenticatedUserResponder = {
  with200: r.with200<t_key>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type UsersGetPublicSshKeyForAuthenticatedUserResponder =
  typeof usersGetPublicSshKeyForAuthenticatedUserResponder & KoaRuntimeResponder

const usersGetPublicSshKeyForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", s_key],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type UsersGetPublicSshKeyForAuthenticatedUser = (
  params: Params<
    t_UsersGetPublicSshKeyForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: UsersGetPublicSshKeyForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_key>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const usersDeletePublicSshKeyForAuthenticatedUserResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type UsersDeletePublicSshKeyForAuthenticatedUserResponder =
  typeof usersDeletePublicSshKeyForAuthenticatedUserResponder &
    KoaRuntimeResponder

const usersDeletePublicSshKeyForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type UsersDeletePublicSshKeyForAuthenticatedUser = (
  params: Params<
    t_UsersDeletePublicSshKeyForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: UsersDeletePublicSshKeyForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const appsListSubscriptionsForAuthenticatedUserResponder = {
  with200: r.with200<t_user_marketplace_purchase[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type AppsListSubscriptionsForAuthenticatedUserResponder =
  typeof appsListSubscriptionsForAuthenticatedUserResponder &
    KoaRuntimeResponder

const appsListSubscriptionsForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_user_marketplace_purchase)],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type AppsListSubscriptionsForAuthenticatedUser = (
  params: Params<
    void,
    t_AppsListSubscriptionsForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: AppsListSubscriptionsForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_user_marketplace_purchase[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<404, t_basic_error>
>

const appsListSubscriptionsForAuthenticatedUserStubbedResponder = {
  with200: r.with200<t_user_marketplace_purchase[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  withStatus: r.withStatus,
}

type AppsListSubscriptionsForAuthenticatedUserStubbedResponder =
  typeof appsListSubscriptionsForAuthenticatedUserStubbedResponder &
    KoaRuntimeResponder

const appsListSubscriptionsForAuthenticatedUserStubbedResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_user_marketplace_purchase)],
      ["304", z.undefined()],
      ["401", s_basic_error],
    ],
    undefined,
  )

export type AppsListSubscriptionsForAuthenticatedUserStubbed = (
  params: Params<
    void,
    t_AppsListSubscriptionsForAuthenticatedUserStubbedQuerySchema,
    void,
    void
  >,
  respond: AppsListSubscriptionsForAuthenticatedUserStubbedResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_user_marketplace_purchase[]>
  | Response<304, void>
  | Response<401, t_basic_error>
>

const orgsListMembershipsForAuthenticatedUserResponder = {
  with200: r.with200<t_org_membership[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type OrgsListMembershipsForAuthenticatedUserResponder =
  typeof orgsListMembershipsForAuthenticatedUserResponder & KoaRuntimeResponder

const orgsListMembershipsForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_org_membership)],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type OrgsListMembershipsForAuthenticatedUser = (
  params: Params<
    void,
    t_OrgsListMembershipsForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: OrgsListMembershipsForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_org_membership[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

const orgsGetMembershipForAuthenticatedUserResponder = {
  with200: r.with200<t_org_membership>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsGetMembershipForAuthenticatedUserResponder =
  typeof orgsGetMembershipForAuthenticatedUserResponder & KoaRuntimeResponder

const orgsGetMembershipForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", s_org_membership],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type OrgsGetMembershipForAuthenticatedUser = (
  params: Params<
    t_OrgsGetMembershipForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: OrgsGetMembershipForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_org_membership>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const orgsUpdateMembershipForAuthenticatedUserResponder = {
  with200: r.with200<t_org_membership>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type OrgsUpdateMembershipForAuthenticatedUserResponder =
  typeof orgsUpdateMembershipForAuthenticatedUserResponder & KoaRuntimeResponder

const orgsUpdateMembershipForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", s_org_membership],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type OrgsUpdateMembershipForAuthenticatedUser = (
  params: Params<
    t_OrgsUpdateMembershipForAuthenticatedUserParamSchema,
    void,
    t_OrgsUpdateMembershipForAuthenticatedUserBodySchema,
    void
  >,
  respond: OrgsUpdateMembershipForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_org_membership>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const migrationsListForAuthenticatedUserResponder = {
  with200: r.with200<t_migration[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type MigrationsListForAuthenticatedUserResponder =
  typeof migrationsListForAuthenticatedUserResponder & KoaRuntimeResponder

const migrationsListForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_migration)],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
    ],
    undefined,
  )

export type MigrationsListForAuthenticatedUser = (
  params: Params<
    void,
    t_MigrationsListForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: MigrationsListForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_migration[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const migrationsStartForAuthenticatedUserResponder = {
  with201: r.with201<t_migration>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type MigrationsStartForAuthenticatedUserResponder =
  typeof migrationsStartForAuthenticatedUserResponder & KoaRuntimeResponder

const migrationsStartForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["201", s_migration],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type MigrationsStartForAuthenticatedUser = (
  params: Params<
    void,
    void,
    t_MigrationsStartForAuthenticatedUserBodySchema,
    void
  >,
  respond: MigrationsStartForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_migration>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

const migrationsGetStatusForAuthenticatedUserResponder = {
  with200: r.with200<t_migration>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type MigrationsGetStatusForAuthenticatedUserResponder =
  typeof migrationsGetStatusForAuthenticatedUserResponder & KoaRuntimeResponder

const migrationsGetStatusForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", s_migration],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type MigrationsGetStatusForAuthenticatedUser = (
  params: Params<
    t_MigrationsGetStatusForAuthenticatedUserParamSchema,
    t_MigrationsGetStatusForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: MigrationsGetStatusForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_migration>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const migrationsGetArchiveForAuthenticatedUserResponder = {
  with302: r.with302<void>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type MigrationsGetArchiveForAuthenticatedUserResponder =
  typeof migrationsGetArchiveForAuthenticatedUserResponder & KoaRuntimeResponder

const migrationsGetArchiveForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["302", z.undefined()],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
    ],
    undefined,
  )

export type MigrationsGetArchiveForAuthenticatedUser = (
  params: Params<
    t_MigrationsGetArchiveForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: MigrationsGetArchiveForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<302, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const migrationsDeleteArchiveForAuthenticatedUserResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type MigrationsDeleteArchiveForAuthenticatedUserResponder =
  typeof migrationsDeleteArchiveForAuthenticatedUserResponder &
    KoaRuntimeResponder

const migrationsDeleteArchiveForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type MigrationsDeleteArchiveForAuthenticatedUser = (
  params: Params<
    t_MigrationsDeleteArchiveForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: MigrationsDeleteArchiveForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const migrationsUnlockRepoForAuthenticatedUserResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type MigrationsUnlockRepoForAuthenticatedUserResponder =
  typeof migrationsUnlockRepoForAuthenticatedUserResponder & KoaRuntimeResponder

const migrationsUnlockRepoForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type MigrationsUnlockRepoForAuthenticatedUser = (
  params: Params<
    t_MigrationsUnlockRepoForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: MigrationsUnlockRepoForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const migrationsListReposForAuthenticatedUserResponder = {
  with200: r.with200<t_minimal_repository[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type MigrationsListReposForAuthenticatedUserResponder =
  typeof migrationsListReposForAuthenticatedUserResponder & KoaRuntimeResponder

const migrationsListReposForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_minimal_repository)],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type MigrationsListReposForAuthenticatedUser = (
  params: Params<
    t_MigrationsListReposForAuthenticatedUserParamSchema,
    t_MigrationsListReposForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: MigrationsListReposForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_minimal_repository[]>
  | Response<404, t_basic_error>
>

const orgsListForAuthenticatedUserResponder = {
  with200: r.with200<t_organization_simple[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type OrgsListForAuthenticatedUserResponder =
  typeof orgsListForAuthenticatedUserResponder & KoaRuntimeResponder

const orgsListForAuthenticatedUserResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_organization_simple)],
    ["304", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
  ],
  undefined,
)

export type OrgsListForAuthenticatedUser = (
  params: Params<void, t_OrgsListForAuthenticatedUserQuerySchema, void, void>,
  respond: OrgsListForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_organization_simple[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const packagesListPackagesForAuthenticatedUserResponder = {
  with200: r.with200<t_package[]>,
  with400: r.with400<void>,
  withStatus: r.withStatus,
}

type PackagesListPackagesForAuthenticatedUserResponder =
  typeof packagesListPackagesForAuthenticatedUserResponder & KoaRuntimeResponder

const packagesListPackagesForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_package)],
      ["400", z.undefined()],
    ],
    undefined,
  )

export type PackagesListPackagesForAuthenticatedUser = (
  params: Params<
    void,
    t_PackagesListPackagesForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: PackagesListPackagesForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_package[]> | Response<400, void>
>

const packagesGetPackageForAuthenticatedUserResponder = {
  with200: r.with200<t_package>,
  withStatus: r.withStatus,
}

type PackagesGetPackageForAuthenticatedUserResponder =
  typeof packagesGetPackageForAuthenticatedUserResponder & KoaRuntimeResponder

const packagesGetPackageForAuthenticatedUserResponseValidator =
  responseValidationFactory([["200", s_package]], undefined)

export type PackagesGetPackageForAuthenticatedUser = (
  params: Params<
    t_PackagesGetPackageForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: PackagesGetPackageForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_package>>

const packagesDeletePackageForAuthenticatedUserResponder = {
  with204: r.with204<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type PackagesDeletePackageForAuthenticatedUserResponder =
  typeof packagesDeletePackageForAuthenticatedUserResponder &
    KoaRuntimeResponder

const packagesDeletePackageForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type PackagesDeletePackageForAuthenticatedUser = (
  params: Params<
    t_PackagesDeletePackageForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: PackagesDeletePackageForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const packagesRestorePackageForAuthenticatedUserResponder = {
  with204: r.with204<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type PackagesRestorePackageForAuthenticatedUserResponder =
  typeof packagesRestorePackageForAuthenticatedUserResponder &
    KoaRuntimeResponder

const packagesRestorePackageForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type PackagesRestorePackageForAuthenticatedUser = (
  params: Params<
    t_PackagesRestorePackageForAuthenticatedUserParamSchema,
    t_PackagesRestorePackageForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: PackagesRestorePackageForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponder =
  {
    with200: r.with200<t_package_version[]>,
    with401: r.with401<t_basic_error>,
    with403: r.with403<t_basic_error>,
    with404: r.with404<t_basic_error>,
    withStatus: r.withStatus,
  }

type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponder =
  typeof packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponder &
    KoaRuntimeResponder

const packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_package_version)],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser = (
  params: Params<
    t_PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParamSchema,
    t_PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_package_version[]>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const packagesGetPackageVersionForAuthenticatedUserResponder = {
  with200: r.with200<t_package_version>,
  withStatus: r.withStatus,
}

type PackagesGetPackageVersionForAuthenticatedUserResponder =
  typeof packagesGetPackageVersionForAuthenticatedUserResponder &
    KoaRuntimeResponder

const packagesGetPackageVersionForAuthenticatedUserResponseValidator =
  responseValidationFactory([["200", s_package_version]], undefined)

export type PackagesGetPackageVersionForAuthenticatedUser = (
  params: Params<
    t_PackagesGetPackageVersionForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: PackagesGetPackageVersionForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_package_version>>

const packagesDeletePackageVersionForAuthenticatedUserResponder = {
  with204: r.with204<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type PackagesDeletePackageVersionForAuthenticatedUserResponder =
  typeof packagesDeletePackageVersionForAuthenticatedUserResponder &
    KoaRuntimeResponder

const packagesDeletePackageVersionForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type PackagesDeletePackageVersionForAuthenticatedUser = (
  params: Params<
    t_PackagesDeletePackageVersionForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: PackagesDeletePackageVersionForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const packagesRestorePackageVersionForAuthenticatedUserResponder = {
  with204: r.with204<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type PackagesRestorePackageVersionForAuthenticatedUserResponder =
  typeof packagesRestorePackageVersionForAuthenticatedUserResponder &
    KoaRuntimeResponder

const packagesRestorePackageVersionForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type PackagesRestorePackageVersionForAuthenticatedUser = (
  params: Params<
    t_PackagesRestorePackageVersionForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: PackagesRestorePackageVersionForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const projectsCreateForAuthenticatedUserResponder = {
  with201: r.with201<t_project>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<t_validation_error_simple>,
  withStatus: r.withStatus,
}

type ProjectsCreateForAuthenticatedUserResponder =
  typeof projectsCreateForAuthenticatedUserResponder & KoaRuntimeResponder

const projectsCreateForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["201", s_project],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

export type ProjectsCreateForAuthenticatedUser = (
  params: Params<
    void,
    void,
    t_ProjectsCreateForAuthenticatedUserBodySchema,
    void
  >,
  respond: ProjectsCreateForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_project>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error_simple>
>

const usersListPublicEmailsForAuthenticatedUserResponder = {
  with200: r.with200<t_email[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type UsersListPublicEmailsForAuthenticatedUserResponder =
  typeof usersListPublicEmailsForAuthenticatedUserResponder &
    KoaRuntimeResponder

const usersListPublicEmailsForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_email)],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type UsersListPublicEmailsForAuthenticatedUser = (
  params: Params<
    void,
    t_UsersListPublicEmailsForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: UsersListPublicEmailsForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_email[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const reposListForAuthenticatedUserResponder = {
  with200: r.with200<t_repository[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposListForAuthenticatedUserResponder =
  typeof reposListForAuthenticatedUserResponder & KoaRuntimeResponder

const reposListForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_repository)],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type ReposListForAuthenticatedUser = (
  params: Params<void, t_ReposListForAuthenticatedUserQuerySchema, void, void>,
  respond: ReposListForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

const reposCreateForAuthenticatedUserResponder = {
  with201: r.with201<t_full_repository>,
  with304: r.with304<void>,
  with400: r.with400<t_scim_error>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ReposCreateForAuthenticatedUserResponder =
  typeof reposCreateForAuthenticatedUserResponder & KoaRuntimeResponder

const reposCreateForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["201", s_full_repository],
      ["304", z.undefined()],
      ["400", s_scim_error],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type ReposCreateForAuthenticatedUser = (
  params: Params<void, void, t_ReposCreateForAuthenticatedUserBodySchema, void>,
  respond: ReposCreateForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_full_repository>
  | Response<304, void>
  | Response<400, t_scim_error>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const reposListInvitationsForAuthenticatedUserResponder = {
  with200: r.with200<t_repository_invitation[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposListInvitationsForAuthenticatedUserResponder =
  typeof reposListInvitationsForAuthenticatedUserResponder & KoaRuntimeResponder

const reposListInvitationsForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_repository_invitation)],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ReposListInvitationsForAuthenticatedUser = (
  params: Params<
    void,
    t_ReposListInvitationsForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: ReposListInvitationsForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_invitation[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const reposAcceptInvitationForAuthenticatedUserResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposAcceptInvitationForAuthenticatedUserResponder =
  typeof reposAcceptInvitationForAuthenticatedUserResponder &
    KoaRuntimeResponder

const reposAcceptInvitationForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["304", z.undefined()],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["409", s_basic_error],
    ],
    undefined,
  )

export type ReposAcceptInvitationForAuthenticatedUser = (
  params: Params<
    t_ReposAcceptInvitationForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: ReposAcceptInvitationForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
>

const reposDeclineInvitationForAuthenticatedUserResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with409: r.with409<t_basic_error>,
  withStatus: r.withStatus,
}

type ReposDeclineInvitationForAuthenticatedUserResponder =
  typeof reposDeclineInvitationForAuthenticatedUserResponder &
    KoaRuntimeResponder

const reposDeclineInvitationForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["304", z.undefined()],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["409", s_basic_error],
    ],
    undefined,
  )

export type ReposDeclineInvitationForAuthenticatedUser = (
  params: Params<
    t_ReposDeclineInvitationForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: ReposDeclineInvitationForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
>

const usersListSocialAccountsForAuthenticatedUserResponder = {
  with200: r.with200<t_social_account[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type UsersListSocialAccountsForAuthenticatedUserResponder =
  typeof usersListSocialAccountsForAuthenticatedUserResponder &
    KoaRuntimeResponder

const usersListSocialAccountsForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_social_account)],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type UsersListSocialAccountsForAuthenticatedUser = (
  params: Params<
    void,
    t_UsersListSocialAccountsForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: UsersListSocialAccountsForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_social_account[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const usersAddSocialAccountForAuthenticatedUserResponder = {
  with201: r.with201<t_social_account[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type UsersAddSocialAccountForAuthenticatedUserResponder =
  typeof usersAddSocialAccountForAuthenticatedUserResponder &
    KoaRuntimeResponder

const usersAddSocialAccountForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["201", z.array(s_social_account)],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type UsersAddSocialAccountForAuthenticatedUser = (
  params: Params<
    void,
    void,
    t_UsersAddSocialAccountForAuthenticatedUserBodySchema,
    void
  >,
  respond: UsersAddSocialAccountForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_social_account[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const usersDeleteSocialAccountForAuthenticatedUserResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type UsersDeleteSocialAccountForAuthenticatedUserResponder =
  typeof usersDeleteSocialAccountForAuthenticatedUserResponder &
    KoaRuntimeResponder

const usersDeleteSocialAccountForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type UsersDeleteSocialAccountForAuthenticatedUser = (
  params: Params<
    void,
    void,
    t_UsersDeleteSocialAccountForAuthenticatedUserBodySchema,
    void
  >,
  respond: UsersDeleteSocialAccountForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const usersListSshSigningKeysForAuthenticatedUserResponder = {
  with200: r.with200<t_ssh_signing_key[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type UsersListSshSigningKeysForAuthenticatedUserResponder =
  typeof usersListSshSigningKeysForAuthenticatedUserResponder &
    KoaRuntimeResponder

const usersListSshSigningKeysForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_ssh_signing_key)],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type UsersListSshSigningKeysForAuthenticatedUser = (
  params: Params<
    void,
    t_UsersListSshSigningKeysForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: UsersListSshSigningKeysForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_ssh_signing_key[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const usersCreateSshSigningKeyForAuthenticatedUserResponder = {
  with201: r.with201<t_ssh_signing_key>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type UsersCreateSshSigningKeyForAuthenticatedUserResponder =
  typeof usersCreateSshSigningKeyForAuthenticatedUserResponder &
    KoaRuntimeResponder

const usersCreateSshSigningKeyForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["201", s_ssh_signing_key],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

export type UsersCreateSshSigningKeyForAuthenticatedUser = (
  params: Params<
    void,
    void,
    t_UsersCreateSshSigningKeyForAuthenticatedUserBodySchema,
    void
  >,
  respond: UsersCreateSshSigningKeyForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_ssh_signing_key>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const usersGetSshSigningKeyForAuthenticatedUserResponder = {
  with200: r.with200<t_ssh_signing_key>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type UsersGetSshSigningKeyForAuthenticatedUserResponder =
  typeof usersGetSshSigningKeyForAuthenticatedUserResponder &
    KoaRuntimeResponder

const usersGetSshSigningKeyForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", s_ssh_signing_key],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type UsersGetSshSigningKeyForAuthenticatedUser = (
  params: Params<
    t_UsersGetSshSigningKeyForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: UsersGetSshSigningKeyForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_ssh_signing_key>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const usersDeleteSshSigningKeyForAuthenticatedUserResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type UsersDeleteSshSigningKeyForAuthenticatedUserResponder =
  typeof usersDeleteSshSigningKeyForAuthenticatedUserResponder &
    KoaRuntimeResponder

const usersDeleteSshSigningKeyForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type UsersDeleteSshSigningKeyForAuthenticatedUser = (
  params: Params<
    t_UsersDeleteSshSigningKeyForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: UsersDeleteSshSigningKeyForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const activityListReposStarredByAuthenticatedUserResponder = {
  with200: r.with200<t_starred_repository[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type ActivityListReposStarredByAuthenticatedUserResponder =
  typeof activityListReposStarredByAuthenticatedUserResponder &
    KoaRuntimeResponder

const activityListReposStarredByAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_starred_repository)],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
    ],
    undefined,
  )

export type ActivityListReposStarredByAuthenticatedUser = (
  params: Params<
    void,
    t_ActivityListReposStarredByAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: ActivityListReposStarredByAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_starred_repository[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const activityCheckRepoIsStarredByAuthenticatedUserResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ActivityCheckRepoIsStarredByAuthenticatedUserResponder =
  typeof activityCheckRepoIsStarredByAuthenticatedUserResponder &
    KoaRuntimeResponder

const activityCheckRepoIsStarredByAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ActivityCheckRepoIsStarredByAuthenticatedUser = (
  params: Params<
    t_ActivityCheckRepoIsStarredByAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: ActivityCheckRepoIsStarredByAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const activityStarRepoForAuthenticatedUserResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ActivityStarRepoForAuthenticatedUserResponder =
  typeof activityStarRepoForAuthenticatedUserResponder & KoaRuntimeResponder

const activityStarRepoForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ActivityStarRepoForAuthenticatedUser = (
  params: Params<
    t_ActivityStarRepoForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: ActivityStarRepoForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const activityUnstarRepoForAuthenticatedUserResponder = {
  with204: r.with204<void>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type ActivityUnstarRepoForAuthenticatedUserResponder =
  typeof activityUnstarRepoForAuthenticatedUserResponder & KoaRuntimeResponder

const activityUnstarRepoForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type ActivityUnstarRepoForAuthenticatedUser = (
  params: Params<
    t_ActivityUnstarRepoForAuthenticatedUserParamSchema,
    void,
    void,
    void
  >,
  respond: ActivityUnstarRepoForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const activityListWatchedReposForAuthenticatedUserResponder = {
  with200: r.with200<t_minimal_repository[]>,
  with304: r.with304<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type ActivityListWatchedReposForAuthenticatedUserResponder =
  typeof activityListWatchedReposForAuthenticatedUserResponder &
    KoaRuntimeResponder

const activityListWatchedReposForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_minimal_repository)],
      ["304", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
    ],
    undefined,
  )

export type ActivityListWatchedReposForAuthenticatedUser = (
  params: Params<
    void,
    t_ActivityListWatchedReposForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: ActivityListWatchedReposForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_minimal_repository[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const teamsListForAuthenticatedUserResponder = {
  with200: r.with200<t_team_full[]>,
  with304: r.with304<void>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type TeamsListForAuthenticatedUserResponder =
  typeof teamsListForAuthenticatedUserResponder & KoaRuntimeResponder

const teamsListForAuthenticatedUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_team_full)],
      ["304", z.undefined()],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type TeamsListForAuthenticatedUser = (
  params: Params<void, t_TeamsListForAuthenticatedUserQuerySchema, void, void>,
  respond: TeamsListForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_full[]>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const usersGetByIdResponder = {
  with200: r.with200<t_private_user | t_public_user>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type UsersGetByIdResponder = typeof usersGetByIdResponder & KoaRuntimeResponder

const usersGetByIdResponseValidator = responseValidationFactory(
  [
    ["200", z.union([s_private_user, s_public_user])],
    ["404", s_basic_error],
  ],
  undefined,
)

export type UsersGetById = (
  params: Params<t_UsersGetByIdParamSchema, void, void, void>,
  respond: UsersGetByIdResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_private_user | t_public_user>
  | Response<404, t_basic_error>
>

const usersListResponder = {
  with200: r.with200<t_simple_user[]>,
  with304: r.with304<void>,
  withStatus: r.withStatus,
}

type UsersListResponder = typeof usersListResponder & KoaRuntimeResponder

const usersListResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_simple_user)],
    ["304", z.undefined()],
  ],
  undefined,
)

export type UsersList = (
  params: Params<void, t_UsersListQuerySchema, void, void>,
  respond: UsersListResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[]>
  | Response<304, void>
>

const usersGetByUsernameResponder = {
  with200: r.with200<t_private_user | t_public_user>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type UsersGetByUsernameResponder = typeof usersGetByUsernameResponder &
  KoaRuntimeResponder

const usersGetByUsernameResponseValidator = responseValidationFactory(
  [
    ["200", z.union([s_private_user, s_public_user])],
    ["404", s_basic_error],
  ],
  undefined,
)

export type UsersGetByUsername = (
  params: Params<t_UsersGetByUsernameParamSchema, void, void, void>,
  respond: UsersGetByUsernameResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_private_user | t_public_user>
  | Response<404, t_basic_error>
>

const usersListAttestationsResponder = {
  with200: r.with200<{
    attestations?: {
      bundle?: {
        dsseEnvelope?: {
          [key: string]: unknown | undefined
        }
        mediaType?: string
        verificationMaterial?: {
          [key: string]: unknown | undefined
        }
      }
      bundle_url?: string
      repository_id?: number
    }[]
  }>,
  with201: r.with201<t_empty_object>,
  with204: r.with204<void>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type UsersListAttestationsResponder = typeof usersListAttestationsResponder &
  KoaRuntimeResponder

const usersListAttestationsResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        attestations: z
          .array(
            z.object({
              bundle: z
                .object({
                  mediaType: z.string().optional(),
                  verificationMaterial: z.record(z.unknown()).optional(),
                  dsseEnvelope: z.record(z.unknown()).optional(),
                })
                .optional(),
              repository_id: z.coerce.number().optional(),
              bundle_url: z.string().optional(),
            }),
          )
          .optional(),
      }),
    ],
    ["201", s_empty_object],
    ["204", z.undefined()],
    ["404", s_basic_error],
  ],
  undefined,
)

export type UsersListAttestations = (
  params: Params<
    t_UsersListAttestationsParamSchema,
    t_UsersListAttestationsQuerySchema,
    void,
    void
  >,
  respond: UsersListAttestationsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        attestations?: {
          bundle?: {
            dsseEnvelope?: {
              [key: string]: unknown | undefined
            }
            mediaType?: string
            verificationMaterial?: {
              [key: string]: unknown | undefined
            }
          }
          bundle_url?: string
          repository_id?: number
        }[]
      }
    >
  | Response<201, t_empty_object>
  | Response<204, void>
  | Response<404, t_basic_error>
>

const packagesListDockerMigrationConflictingPackagesForUserResponder = {
  with200: r.with200<t_package[]>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type PackagesListDockerMigrationConflictingPackagesForUserResponder =
  typeof packagesListDockerMigrationConflictingPackagesForUserResponder &
    KoaRuntimeResponder

const packagesListDockerMigrationConflictingPackagesForUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_package)],
      ["401", s_basic_error],
      ["403", s_basic_error],
    ],
    undefined,
  )

export type PackagesListDockerMigrationConflictingPackagesForUser = (
  params: Params<
    t_PackagesListDockerMigrationConflictingPackagesForUserParamSchema,
    void,
    void,
    void
  >,
  respond: PackagesListDockerMigrationConflictingPackagesForUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_package[]>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const activityListEventsForAuthenticatedUserResponder = {
  with200: r.with200<t_event[]>,
  withStatus: r.withStatus,
}

type ActivityListEventsForAuthenticatedUserResponder =
  typeof activityListEventsForAuthenticatedUserResponder & KoaRuntimeResponder

const activityListEventsForAuthenticatedUserResponseValidator =
  responseValidationFactory([["200", z.array(s_event)]], undefined)

export type ActivityListEventsForAuthenticatedUser = (
  params: Params<
    t_ActivityListEventsForAuthenticatedUserParamSchema,
    t_ActivityListEventsForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: ActivityListEventsForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_event[]>>

const activityListOrgEventsForAuthenticatedUserResponder = {
  with200: r.with200<t_event[]>,
  withStatus: r.withStatus,
}

type ActivityListOrgEventsForAuthenticatedUserResponder =
  typeof activityListOrgEventsForAuthenticatedUserResponder &
    KoaRuntimeResponder

const activityListOrgEventsForAuthenticatedUserResponseValidator =
  responseValidationFactory([["200", z.array(s_event)]], undefined)

export type ActivityListOrgEventsForAuthenticatedUser = (
  params: Params<
    t_ActivityListOrgEventsForAuthenticatedUserParamSchema,
    t_ActivityListOrgEventsForAuthenticatedUserQuerySchema,
    void,
    void
  >,
  respond: ActivityListOrgEventsForAuthenticatedUserResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_event[]>>

const activityListPublicEventsForUserResponder = {
  with200: r.with200<t_event[]>,
  withStatus: r.withStatus,
}

type ActivityListPublicEventsForUserResponder =
  typeof activityListPublicEventsForUserResponder & KoaRuntimeResponder

const activityListPublicEventsForUserResponseValidator =
  responseValidationFactory([["200", z.array(s_event)]], undefined)

export type ActivityListPublicEventsForUser = (
  params: Params<
    t_ActivityListPublicEventsForUserParamSchema,
    t_ActivityListPublicEventsForUserQuerySchema,
    void,
    void
  >,
  respond: ActivityListPublicEventsForUserResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_event[]>>

const usersListFollowersForUserResponder = {
  with200: r.with200<t_simple_user[]>,
  withStatus: r.withStatus,
}

type UsersListFollowersForUserResponder =
  typeof usersListFollowersForUserResponder & KoaRuntimeResponder

const usersListFollowersForUserResponseValidator = responseValidationFactory(
  [["200", z.array(s_simple_user)]],
  undefined,
)

export type UsersListFollowersForUser = (
  params: Params<
    t_UsersListFollowersForUserParamSchema,
    t_UsersListFollowersForUserQuerySchema,
    void,
    void
  >,
  respond: UsersListFollowersForUserResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_simple_user[]>>

const usersListFollowingForUserResponder = {
  with200: r.with200<t_simple_user[]>,
  withStatus: r.withStatus,
}

type UsersListFollowingForUserResponder =
  typeof usersListFollowingForUserResponder & KoaRuntimeResponder

const usersListFollowingForUserResponseValidator = responseValidationFactory(
  [["200", z.array(s_simple_user)]],
  undefined,
)

export type UsersListFollowingForUser = (
  params: Params<
    t_UsersListFollowingForUserParamSchema,
    t_UsersListFollowingForUserQuerySchema,
    void,
    void
  >,
  respond: UsersListFollowingForUserResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_simple_user[]>>

const usersCheckFollowingForUserResponder = {
  with204: r.with204<void>,
  with404: r.with404<void>,
  withStatus: r.withStatus,
}

type UsersCheckFollowingForUserResponder =
  typeof usersCheckFollowingForUserResponder & KoaRuntimeResponder

const usersCheckFollowingForUserResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["404", z.undefined()],
  ],
  undefined,
)

export type UsersCheckFollowingForUser = (
  params: Params<t_UsersCheckFollowingForUserParamSchema, void, void, void>,
  respond: UsersCheckFollowingForUserResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<404, void>
>

const gistsListForUserResponder = {
  with200: r.with200<t_base_gist[]>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type GistsListForUserResponder = typeof gistsListForUserResponder &
  KoaRuntimeResponder

const gistsListForUserResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_base_gist)],
    ["422", s_validation_error],
  ],
  undefined,
)

export type GistsListForUser = (
  params: Params<
    t_GistsListForUserParamSchema,
    t_GistsListForUserQuerySchema,
    void,
    void
  >,
  respond: GistsListForUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_base_gist[]>
  | Response<422, t_validation_error>
>

const usersListGpgKeysForUserResponder = {
  with200: r.with200<t_gpg_key[]>,
  withStatus: r.withStatus,
}

type UsersListGpgKeysForUserResponder =
  typeof usersListGpgKeysForUserResponder & KoaRuntimeResponder

const usersListGpgKeysForUserResponseValidator = responseValidationFactory(
  [["200", z.array(s_gpg_key)]],
  undefined,
)

export type UsersListGpgKeysForUser = (
  params: Params<
    t_UsersListGpgKeysForUserParamSchema,
    t_UsersListGpgKeysForUserQuerySchema,
    void,
    void
  >,
  respond: UsersListGpgKeysForUserResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_gpg_key[]>>

const usersGetContextForUserResponder = {
  with200: r.with200<t_hovercard>,
  with404: r.with404<t_basic_error>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type UsersGetContextForUserResponder = typeof usersGetContextForUserResponder &
  KoaRuntimeResponder

const usersGetContextForUserResponseValidator = responseValidationFactory(
  [
    ["200", s_hovercard],
    ["404", s_basic_error],
    ["422", s_validation_error],
  ],
  undefined,
)

export type UsersGetContextForUser = (
  params: Params<
    t_UsersGetContextForUserParamSchema,
    t_UsersGetContextForUserQuerySchema,
    void,
    void
  >,
  respond: UsersGetContextForUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_hovercard>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

const appsGetUserInstallationResponder = {
  with200: r.with200<t_installation>,
  withStatus: r.withStatus,
}

type AppsGetUserInstallationResponder =
  typeof appsGetUserInstallationResponder & KoaRuntimeResponder

const appsGetUserInstallationResponseValidator = responseValidationFactory(
  [["200", s_installation]],
  undefined,
)

export type AppsGetUserInstallation = (
  params: Params<t_AppsGetUserInstallationParamSchema, void, void, void>,
  respond: AppsGetUserInstallationResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_installation>>

const usersListPublicKeysForUserResponder = {
  with200: r.with200<t_key_simple[]>,
  withStatus: r.withStatus,
}

type UsersListPublicKeysForUserResponder =
  typeof usersListPublicKeysForUserResponder & KoaRuntimeResponder

const usersListPublicKeysForUserResponseValidator = responseValidationFactory(
  [["200", z.array(s_key_simple)]],
  undefined,
)

export type UsersListPublicKeysForUser = (
  params: Params<
    t_UsersListPublicKeysForUserParamSchema,
    t_UsersListPublicKeysForUserQuerySchema,
    void,
    void
  >,
  respond: UsersListPublicKeysForUserResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_key_simple[]>>

const orgsListForUserResponder = {
  with200: r.with200<t_organization_simple[]>,
  withStatus: r.withStatus,
}

type OrgsListForUserResponder = typeof orgsListForUserResponder &
  KoaRuntimeResponder

const orgsListForUserResponseValidator = responseValidationFactory(
  [["200", z.array(s_organization_simple)]],
  undefined,
)

export type OrgsListForUser = (
  params: Params<
    t_OrgsListForUserParamSchema,
    t_OrgsListForUserQuerySchema,
    void,
    void
  >,
  respond: OrgsListForUserResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_organization_simple[]>
>

const packagesListPackagesForUserResponder = {
  with200: r.with200<t_package[]>,
  with400: r.with400<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  withStatus: r.withStatus,
}

type PackagesListPackagesForUserResponder =
  typeof packagesListPackagesForUserResponder & KoaRuntimeResponder

const packagesListPackagesForUserResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_package)],
    ["400", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
  ],
  undefined,
)

export type PackagesListPackagesForUser = (
  params: Params<
    t_PackagesListPackagesForUserParamSchema,
    t_PackagesListPackagesForUserQuerySchema,
    void,
    void
  >,
  respond: PackagesListPackagesForUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_package[]>
  | Response<400, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

const packagesGetPackageForUserResponder = {
  with200: r.with200<t_package>,
  withStatus: r.withStatus,
}

type PackagesGetPackageForUserResponder =
  typeof packagesGetPackageForUserResponder & KoaRuntimeResponder

const packagesGetPackageForUserResponseValidator = responseValidationFactory(
  [["200", s_package]],
  undefined,
)

export type PackagesGetPackageForUser = (
  params: Params<t_PackagesGetPackageForUserParamSchema, void, void, void>,
  respond: PackagesGetPackageForUserResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_package>>

const packagesDeletePackageForUserResponder = {
  with204: r.with204<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type PackagesDeletePackageForUserResponder =
  typeof packagesDeletePackageForUserResponder & KoaRuntimeResponder

const packagesDeletePackageForUserResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["401", s_basic_error],
    ["403", s_basic_error],
    ["404", s_basic_error],
  ],
  undefined,
)

export type PackagesDeletePackageForUser = (
  params: Params<t_PackagesDeletePackageForUserParamSchema, void, void, void>,
  respond: PackagesDeletePackageForUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const packagesRestorePackageForUserResponder = {
  with204: r.with204<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type PackagesRestorePackageForUserResponder =
  typeof packagesRestorePackageForUserResponder & KoaRuntimeResponder

const packagesRestorePackageForUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type PackagesRestorePackageForUser = (
  params: Params<
    t_PackagesRestorePackageForUserParamSchema,
    t_PackagesRestorePackageForUserQuerySchema,
    void,
    void
  >,
  respond: PackagesRestorePackageForUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const packagesGetAllPackageVersionsForPackageOwnedByUserResponder = {
  with200: r.with200<t_package_version[]>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type PackagesGetAllPackageVersionsForPackageOwnedByUserResponder =
  typeof packagesGetAllPackageVersionsForPackageOwnedByUserResponder &
    KoaRuntimeResponder

const packagesGetAllPackageVersionsForPackageOwnedByUserResponseValidator =
  responseValidationFactory(
    [
      ["200", z.array(s_package_version)],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type PackagesGetAllPackageVersionsForPackageOwnedByUser = (
  params: Params<
    t_PackagesGetAllPackageVersionsForPackageOwnedByUserParamSchema,
    void,
    void,
    void
  >,
  respond: PackagesGetAllPackageVersionsForPackageOwnedByUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_package_version[]>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const packagesGetPackageVersionForUserResponder = {
  with200: r.with200<t_package_version>,
  withStatus: r.withStatus,
}

type PackagesGetPackageVersionForUserResponder =
  typeof packagesGetPackageVersionForUserResponder & KoaRuntimeResponder

const packagesGetPackageVersionForUserResponseValidator =
  responseValidationFactory([["200", s_package_version]], undefined)

export type PackagesGetPackageVersionForUser = (
  params: Params<
    t_PackagesGetPackageVersionForUserParamSchema,
    void,
    void,
    void
  >,
  respond: PackagesGetPackageVersionForUserResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_package_version>>

const packagesDeletePackageVersionForUserResponder = {
  with204: r.with204<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type PackagesDeletePackageVersionForUserResponder =
  typeof packagesDeletePackageVersionForUserResponder & KoaRuntimeResponder

const packagesDeletePackageVersionForUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type PackagesDeletePackageVersionForUser = (
  params: Params<
    t_PackagesDeletePackageVersionForUserParamSchema,
    void,
    void,
    void
  >,
  respond: PackagesDeletePackageVersionForUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const packagesRestorePackageVersionForUserResponder = {
  with204: r.with204<void>,
  with401: r.with401<t_basic_error>,
  with403: r.with403<t_basic_error>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type PackagesRestorePackageVersionForUserResponder =
  typeof packagesRestorePackageVersionForUserResponder & KoaRuntimeResponder

const packagesRestorePackageVersionForUserResponseValidator =
  responseValidationFactory(
    [
      ["204", z.undefined()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

export type PackagesRestorePackageVersionForUser = (
  params: Params<
    t_PackagesRestorePackageVersionForUserParamSchema,
    void,
    void,
    void
  >,
  respond: PackagesRestorePackageVersionForUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

const projectsListForUserResponder = {
  with200: r.with200<t_project[]>,
  with422: r.with422<t_validation_error>,
  withStatus: r.withStatus,
}

type ProjectsListForUserResponder = typeof projectsListForUserResponder &
  KoaRuntimeResponder

const projectsListForUserResponseValidator = responseValidationFactory(
  [
    ["200", z.array(s_project)],
    ["422", s_validation_error],
  ],
  undefined,
)

export type ProjectsListForUser = (
  params: Params<
    t_ProjectsListForUserParamSchema,
    t_ProjectsListForUserQuerySchema,
    void,
    void
  >,
  respond: ProjectsListForUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_project[]>
  | Response<422, t_validation_error>
>

const activityListReceivedEventsForUserResponder = {
  with200: r.with200<t_event[]>,
  withStatus: r.withStatus,
}

type ActivityListReceivedEventsForUserResponder =
  typeof activityListReceivedEventsForUserResponder & KoaRuntimeResponder

const activityListReceivedEventsForUserResponseValidator =
  responseValidationFactory([["200", z.array(s_event)]], undefined)

export type ActivityListReceivedEventsForUser = (
  params: Params<
    t_ActivityListReceivedEventsForUserParamSchema,
    t_ActivityListReceivedEventsForUserQuerySchema,
    void,
    void
  >,
  respond: ActivityListReceivedEventsForUserResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_event[]>>

const activityListReceivedPublicEventsForUserResponder = {
  with200: r.with200<t_event[]>,
  withStatus: r.withStatus,
}

type ActivityListReceivedPublicEventsForUserResponder =
  typeof activityListReceivedPublicEventsForUserResponder & KoaRuntimeResponder

const activityListReceivedPublicEventsForUserResponseValidator =
  responseValidationFactory([["200", z.array(s_event)]], undefined)

export type ActivityListReceivedPublicEventsForUser = (
  params: Params<
    t_ActivityListReceivedPublicEventsForUserParamSchema,
    t_ActivityListReceivedPublicEventsForUserQuerySchema,
    void,
    void
  >,
  respond: ActivityListReceivedPublicEventsForUserResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_event[]>>

const reposListForUserResponder = {
  with200: r.with200<t_minimal_repository[]>,
  withStatus: r.withStatus,
}

type ReposListForUserResponder = typeof reposListForUserResponder &
  KoaRuntimeResponder

const reposListForUserResponseValidator = responseValidationFactory(
  [["200", z.array(s_minimal_repository)]],
  undefined,
)

export type ReposListForUser = (
  params: Params<
    t_ReposListForUserParamSchema,
    t_ReposListForUserQuerySchema,
    void,
    void
  >,
  respond: ReposListForUserResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_minimal_repository[]>
>

const billingGetGithubActionsBillingUserResponder = {
  with200: r.with200<t_actions_billing_usage>,
  withStatus: r.withStatus,
}

type BillingGetGithubActionsBillingUserResponder =
  typeof billingGetGithubActionsBillingUserResponder & KoaRuntimeResponder

const billingGetGithubActionsBillingUserResponseValidator =
  responseValidationFactory([["200", s_actions_billing_usage]], undefined)

export type BillingGetGithubActionsBillingUser = (
  params: Params<
    t_BillingGetGithubActionsBillingUserParamSchema,
    void,
    void,
    void
  >,
  respond: BillingGetGithubActionsBillingUserResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_actions_billing_usage>
>

const billingGetGithubPackagesBillingUserResponder = {
  with200: r.with200<t_packages_billing_usage>,
  withStatus: r.withStatus,
}

type BillingGetGithubPackagesBillingUserResponder =
  typeof billingGetGithubPackagesBillingUserResponder & KoaRuntimeResponder

const billingGetGithubPackagesBillingUserResponseValidator =
  responseValidationFactory([["200", s_packages_billing_usage]], undefined)

export type BillingGetGithubPackagesBillingUser = (
  params: Params<
    t_BillingGetGithubPackagesBillingUserParamSchema,
    void,
    void,
    void
  >,
  respond: BillingGetGithubPackagesBillingUserResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_packages_billing_usage>
>

const billingGetSharedStorageBillingUserResponder = {
  with200: r.with200<t_combined_billing_usage>,
  withStatus: r.withStatus,
}

type BillingGetSharedStorageBillingUserResponder =
  typeof billingGetSharedStorageBillingUserResponder & KoaRuntimeResponder

const billingGetSharedStorageBillingUserResponseValidator =
  responseValidationFactory([["200", s_combined_billing_usage]], undefined)

export type BillingGetSharedStorageBillingUser = (
  params: Params<
    t_BillingGetSharedStorageBillingUserParamSchema,
    void,
    void,
    void
  >,
  respond: BillingGetSharedStorageBillingUserResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_combined_billing_usage>
>

const usersListSocialAccountsForUserResponder = {
  with200: r.with200<t_social_account[]>,
  withStatus: r.withStatus,
}

type UsersListSocialAccountsForUserResponder =
  typeof usersListSocialAccountsForUserResponder & KoaRuntimeResponder

const usersListSocialAccountsForUserResponseValidator =
  responseValidationFactory([["200", z.array(s_social_account)]], undefined)

export type UsersListSocialAccountsForUser = (
  params: Params<
    t_UsersListSocialAccountsForUserParamSchema,
    t_UsersListSocialAccountsForUserQuerySchema,
    void,
    void
  >,
  respond: UsersListSocialAccountsForUserResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_social_account[]>>

const usersListSshSigningKeysForUserResponder = {
  with200: r.with200<t_ssh_signing_key[]>,
  withStatus: r.withStatus,
}

type UsersListSshSigningKeysForUserResponder =
  typeof usersListSshSigningKeysForUserResponder & KoaRuntimeResponder

const usersListSshSigningKeysForUserResponseValidator =
  responseValidationFactory([["200", z.array(s_ssh_signing_key)]], undefined)

export type UsersListSshSigningKeysForUser = (
  params: Params<
    t_UsersListSshSigningKeysForUserParamSchema,
    t_UsersListSshSigningKeysForUserQuerySchema,
    void,
    void
  >,
  respond: UsersListSshSigningKeysForUserResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_ssh_signing_key[]>>

const activityListReposStarredByUserResponder = {
  with200: r.with200<t_starred_repository[] | t_repository[]>,
  withStatus: r.withStatus,
}

type ActivityListReposStarredByUserResponder =
  typeof activityListReposStarredByUserResponder & KoaRuntimeResponder

const activityListReposStarredByUserResponseValidator =
  responseValidationFactory(
    [["200", z.union([z.array(s_starred_repository), z.array(s_repository)])]],
    undefined,
  )

export type ActivityListReposStarredByUser = (
  params: Params<
    t_ActivityListReposStarredByUserParamSchema,
    t_ActivityListReposStarredByUserQuerySchema,
    void,
    void
  >,
  respond: ActivityListReposStarredByUserResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_starred_repository[] | t_repository[]>
>

const activityListReposWatchedByUserResponder = {
  with200: r.with200<t_minimal_repository[]>,
  withStatus: r.withStatus,
}

type ActivityListReposWatchedByUserResponder =
  typeof activityListReposWatchedByUserResponder & KoaRuntimeResponder

const activityListReposWatchedByUserResponseValidator =
  responseValidationFactory([["200", z.array(s_minimal_repository)]], undefined)

export type ActivityListReposWatchedByUser = (
  params: Params<
    t_ActivityListReposWatchedByUserParamSchema,
    t_ActivityListReposWatchedByUserQuerySchema,
    void,
    void
  >,
  respond: ActivityListReposWatchedByUserResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_minimal_repository[]>
>

const metaGetAllVersionsResponder = {
  with200: r.with200<string[]>,
  with404: r.with404<t_basic_error>,
  withStatus: r.withStatus,
}

type MetaGetAllVersionsResponder = typeof metaGetAllVersionsResponder &
  KoaRuntimeResponder

const metaGetAllVersionsResponseValidator = responseValidationFactory(
  [
    ["200", z.array(z.string())],
    ["404", s_basic_error],
  ],
  undefined,
)

export type MetaGetAllVersions = (
  params: Params<void, void, void, void>,
  respond: MetaGetAllVersionsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, string[]>
  | Response<404, t_basic_error>
>

const metaGetZenResponder = {
  with200: r.with200<string>,
  withStatus: r.withStatus,
}

type MetaGetZenResponder = typeof metaGetZenResponder & KoaRuntimeResponder

const metaGetZenResponseValidator = responseValidationFactory(
  [["200", z.string()]],
  undefined,
)

export type MetaGetZen = (
  params: Params<void, void, void, void>,
  respond: MetaGetZenResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, string>>

export type Implementation = {
  metaRoot: MetaRoot
  securityAdvisoriesListGlobalAdvisories: SecurityAdvisoriesListGlobalAdvisories
  securityAdvisoriesGetGlobalAdvisory: SecurityAdvisoriesGetGlobalAdvisory
  appsGetAuthenticated: AppsGetAuthenticated
  appsCreateFromManifest: AppsCreateFromManifest
  appsGetWebhookConfigForApp: AppsGetWebhookConfigForApp
  appsUpdateWebhookConfigForApp: AppsUpdateWebhookConfigForApp
  appsListWebhookDeliveries: AppsListWebhookDeliveries
  appsGetWebhookDelivery: AppsGetWebhookDelivery
  appsRedeliverWebhookDelivery: AppsRedeliverWebhookDelivery
  appsListInstallationRequestsForAuthenticatedApp: AppsListInstallationRequestsForAuthenticatedApp
  appsListInstallations: AppsListInstallations
  appsGetInstallation: AppsGetInstallation
  appsDeleteInstallation: AppsDeleteInstallation
  appsCreateInstallationAccessToken: AppsCreateInstallationAccessToken
  appsSuspendInstallation: AppsSuspendInstallation
  appsUnsuspendInstallation: AppsUnsuspendInstallation
  appsDeleteAuthorization: AppsDeleteAuthorization
  appsCheckToken: AppsCheckToken
  appsResetToken: AppsResetToken
  appsDeleteToken: AppsDeleteToken
  appsScopeToken: AppsScopeToken
  appsGetBySlug: AppsGetBySlug
  classroomGetAnAssignment: ClassroomGetAnAssignment
  classroomListAcceptedAssignmentsForAnAssignment: ClassroomListAcceptedAssignmentsForAnAssignment
  classroomGetAssignmentGrades: ClassroomGetAssignmentGrades
  classroomListClassrooms: ClassroomListClassrooms
  classroomGetAClassroom: ClassroomGetAClassroom
  classroomListAssignmentsForAClassroom: ClassroomListAssignmentsForAClassroom
  codesOfConductGetAllCodesOfConduct: CodesOfConductGetAllCodesOfConduct
  codesOfConductGetConductCode: CodesOfConductGetConductCode
  emojisGet: EmojisGet
  codeSecurityGetConfigurationsForEnterprise: CodeSecurityGetConfigurationsForEnterprise
  codeSecurityCreateConfigurationForEnterprise: CodeSecurityCreateConfigurationForEnterprise
  codeSecurityGetDefaultConfigurationsForEnterprise: CodeSecurityGetDefaultConfigurationsForEnterprise
  codeSecurityGetSingleConfigurationForEnterprise: CodeSecurityGetSingleConfigurationForEnterprise
  codeSecurityUpdateEnterpriseConfiguration: CodeSecurityUpdateEnterpriseConfiguration
  codeSecurityDeleteConfigurationForEnterprise: CodeSecurityDeleteConfigurationForEnterprise
  codeSecurityAttachEnterpriseConfiguration: CodeSecurityAttachEnterpriseConfiguration
  codeSecuritySetConfigurationAsDefaultForEnterprise: CodeSecuritySetConfigurationAsDefaultForEnterprise
  codeSecurityGetRepositoriesForEnterpriseConfiguration: CodeSecurityGetRepositoriesForEnterpriseConfiguration
  dependabotListAlertsForEnterprise: DependabotListAlertsForEnterprise
  secretScanningListAlertsForEnterprise: SecretScanningListAlertsForEnterprise
  activityListPublicEvents: ActivityListPublicEvents
  activityGetFeeds: ActivityGetFeeds
  gistsList: GistsList
  gistsCreate: GistsCreate
  gistsListPublic: GistsListPublic
  gistsListStarred: GistsListStarred
  gistsGet: GistsGet
  gistsUpdate: GistsUpdate
  gistsDelete: GistsDelete
  gistsListComments: GistsListComments
  gistsCreateComment: GistsCreateComment
  gistsGetComment: GistsGetComment
  gistsUpdateComment: GistsUpdateComment
  gistsDeleteComment: GistsDeleteComment
  gistsListCommits: GistsListCommits
  gistsListForks: GistsListForks
  gistsFork: GistsFork
  gistsCheckIsStarred: GistsCheckIsStarred
  gistsStar: GistsStar
  gistsUnstar: GistsUnstar
  gistsGetRevision: GistsGetRevision
  gitignoreGetAllTemplates: GitignoreGetAllTemplates
  gitignoreGetTemplate: GitignoreGetTemplate
  appsListReposAccessibleToInstallation: AppsListReposAccessibleToInstallation
  appsRevokeInstallationAccessToken: AppsRevokeInstallationAccessToken
  issuesList: IssuesList
  licensesGetAllCommonlyUsed: LicensesGetAllCommonlyUsed
  licensesGet: LicensesGet
  markdownRender: MarkdownRender
  markdownRenderRaw: MarkdownRenderRaw
  appsGetSubscriptionPlanForAccount: AppsGetSubscriptionPlanForAccount
  appsListPlans: AppsListPlans
  appsListAccountsForPlan: AppsListAccountsForPlan
  appsGetSubscriptionPlanForAccountStubbed: AppsGetSubscriptionPlanForAccountStubbed
  appsListPlansStubbed: AppsListPlansStubbed
  appsListAccountsForPlanStubbed: AppsListAccountsForPlanStubbed
  metaGet: MetaGet
  activityListPublicEventsForRepoNetwork: ActivityListPublicEventsForRepoNetwork
  activityListNotificationsForAuthenticatedUser: ActivityListNotificationsForAuthenticatedUser
  activityMarkNotificationsAsRead: ActivityMarkNotificationsAsRead
  activityGetThread: ActivityGetThread
  activityMarkThreadAsRead: ActivityMarkThreadAsRead
  activityMarkThreadAsDone: ActivityMarkThreadAsDone
  activityGetThreadSubscriptionForAuthenticatedUser: ActivityGetThreadSubscriptionForAuthenticatedUser
  activitySetThreadSubscription: ActivitySetThreadSubscription
  activityDeleteThreadSubscription: ActivityDeleteThreadSubscription
  metaGetOctocat: MetaGetOctocat
  orgsList: OrgsList
  billingGetGithubBillingUsageReportOrg: BillingGetGithubBillingUsageReportOrg
  orgsGet: OrgsGet
  orgsUpdate: OrgsUpdate
  orgsDelete: OrgsDelete
  actionsGetActionsCacheUsageForOrg: ActionsGetActionsCacheUsageForOrg
  actionsGetActionsCacheUsageByRepoForOrg: ActionsGetActionsCacheUsageByRepoForOrg
  actionsListHostedRunnersForOrg: ActionsListHostedRunnersForOrg
  actionsCreateHostedRunnerForOrg: ActionsCreateHostedRunnerForOrg
  actionsGetHostedRunnersGithubOwnedImagesForOrg: ActionsGetHostedRunnersGithubOwnedImagesForOrg
  actionsGetHostedRunnersPartnerImagesForOrg: ActionsGetHostedRunnersPartnerImagesForOrg
  actionsGetHostedRunnersLimitsForOrg: ActionsGetHostedRunnersLimitsForOrg
  actionsGetHostedRunnersMachineSpecsForOrg: ActionsGetHostedRunnersMachineSpecsForOrg
  actionsGetHostedRunnersPlatformsForOrg: ActionsGetHostedRunnersPlatformsForOrg
  actionsGetHostedRunnerForOrg: ActionsGetHostedRunnerForOrg
  actionsUpdateHostedRunnerForOrg: ActionsUpdateHostedRunnerForOrg
  actionsDeleteHostedRunnerForOrg: ActionsDeleteHostedRunnerForOrg
  oidcGetOidcCustomSubTemplateForOrg: OidcGetOidcCustomSubTemplateForOrg
  oidcUpdateOidcCustomSubTemplateForOrg: OidcUpdateOidcCustomSubTemplateForOrg
  actionsGetGithubActionsPermissionsOrganization: ActionsGetGithubActionsPermissionsOrganization
  actionsSetGithubActionsPermissionsOrganization: ActionsSetGithubActionsPermissionsOrganization
  actionsListSelectedRepositoriesEnabledGithubActionsOrganization: ActionsListSelectedRepositoriesEnabledGithubActionsOrganization
  actionsSetSelectedRepositoriesEnabledGithubActionsOrganization: ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization
  actionsEnableSelectedRepositoryGithubActionsOrganization: ActionsEnableSelectedRepositoryGithubActionsOrganization
  actionsDisableSelectedRepositoryGithubActionsOrganization: ActionsDisableSelectedRepositoryGithubActionsOrganization
  actionsGetAllowedActionsOrganization: ActionsGetAllowedActionsOrganization
  actionsSetAllowedActionsOrganization: ActionsSetAllowedActionsOrganization
  actionsGetGithubActionsDefaultWorkflowPermissionsOrganization: ActionsGetGithubActionsDefaultWorkflowPermissionsOrganization
  actionsSetGithubActionsDefaultWorkflowPermissionsOrganization: ActionsSetGithubActionsDefaultWorkflowPermissionsOrganization
  actionsListSelfHostedRunnerGroupsForOrg: ActionsListSelfHostedRunnerGroupsForOrg
  actionsCreateSelfHostedRunnerGroupForOrg: ActionsCreateSelfHostedRunnerGroupForOrg
  actionsGetSelfHostedRunnerGroupForOrg: ActionsGetSelfHostedRunnerGroupForOrg
  actionsUpdateSelfHostedRunnerGroupForOrg: ActionsUpdateSelfHostedRunnerGroupForOrg
  actionsDeleteSelfHostedRunnerGroupFromOrg: ActionsDeleteSelfHostedRunnerGroupFromOrg
  actionsListGithubHostedRunnersInGroupForOrg: ActionsListGithubHostedRunnersInGroupForOrg
  actionsListRepoAccessToSelfHostedRunnerGroupInOrg: ActionsListRepoAccessToSelfHostedRunnerGroupInOrg
  actionsSetRepoAccessToSelfHostedRunnerGroupInOrg: ActionsSetRepoAccessToSelfHostedRunnerGroupInOrg
  actionsAddRepoAccessToSelfHostedRunnerGroupInOrg: ActionsAddRepoAccessToSelfHostedRunnerGroupInOrg
  actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg: ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg
  actionsListSelfHostedRunnersInGroupForOrg: ActionsListSelfHostedRunnersInGroupForOrg
  actionsSetSelfHostedRunnersInGroupForOrg: ActionsSetSelfHostedRunnersInGroupForOrg
  actionsAddSelfHostedRunnerToGroupForOrg: ActionsAddSelfHostedRunnerToGroupForOrg
  actionsRemoveSelfHostedRunnerFromGroupForOrg: ActionsRemoveSelfHostedRunnerFromGroupForOrg
  actionsListSelfHostedRunnersForOrg: ActionsListSelfHostedRunnersForOrg
  actionsListRunnerApplicationsForOrg: ActionsListRunnerApplicationsForOrg
  actionsGenerateRunnerJitconfigForOrg: ActionsGenerateRunnerJitconfigForOrg
  actionsCreateRegistrationTokenForOrg: ActionsCreateRegistrationTokenForOrg
  actionsCreateRemoveTokenForOrg: ActionsCreateRemoveTokenForOrg
  actionsGetSelfHostedRunnerForOrg: ActionsGetSelfHostedRunnerForOrg
  actionsDeleteSelfHostedRunnerFromOrg: ActionsDeleteSelfHostedRunnerFromOrg
  actionsListLabelsForSelfHostedRunnerForOrg: ActionsListLabelsForSelfHostedRunnerForOrg
  actionsAddCustomLabelsToSelfHostedRunnerForOrg: ActionsAddCustomLabelsToSelfHostedRunnerForOrg
  actionsSetCustomLabelsForSelfHostedRunnerForOrg: ActionsSetCustomLabelsForSelfHostedRunnerForOrg
  actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg: ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg
  actionsRemoveCustomLabelFromSelfHostedRunnerForOrg: ActionsRemoveCustomLabelFromSelfHostedRunnerForOrg
  actionsListOrgSecrets: ActionsListOrgSecrets
  actionsGetOrgPublicKey: ActionsGetOrgPublicKey
  actionsGetOrgSecret: ActionsGetOrgSecret
  actionsCreateOrUpdateOrgSecret: ActionsCreateOrUpdateOrgSecret
  actionsDeleteOrgSecret: ActionsDeleteOrgSecret
  actionsListSelectedReposForOrgSecret: ActionsListSelectedReposForOrgSecret
  actionsSetSelectedReposForOrgSecret: ActionsSetSelectedReposForOrgSecret
  actionsAddSelectedRepoToOrgSecret: ActionsAddSelectedRepoToOrgSecret
  actionsRemoveSelectedRepoFromOrgSecret: ActionsRemoveSelectedRepoFromOrgSecret
  actionsListOrgVariables: ActionsListOrgVariables
  actionsCreateOrgVariable: ActionsCreateOrgVariable
  actionsGetOrgVariable: ActionsGetOrgVariable
  actionsUpdateOrgVariable: ActionsUpdateOrgVariable
  actionsDeleteOrgVariable: ActionsDeleteOrgVariable
  actionsListSelectedReposForOrgVariable: ActionsListSelectedReposForOrgVariable
  actionsSetSelectedReposForOrgVariable: ActionsSetSelectedReposForOrgVariable
  actionsAddSelectedRepoToOrgVariable: ActionsAddSelectedRepoToOrgVariable
  actionsRemoveSelectedRepoFromOrgVariable: ActionsRemoveSelectedRepoFromOrgVariable
  orgsListAttestations: OrgsListAttestations
  orgsListBlockedUsers: OrgsListBlockedUsers
  orgsCheckBlockedUser: OrgsCheckBlockedUser
  orgsBlockUser: OrgsBlockUser
  orgsUnblockUser: OrgsUnblockUser
  campaignsListOrgCampaigns: CampaignsListOrgCampaigns
  campaignsCreateCampaign: CampaignsCreateCampaign
  campaignsGetCampaignSummary: CampaignsGetCampaignSummary
  campaignsUpdateCampaign: CampaignsUpdateCampaign
  campaignsDeleteCampaign: CampaignsDeleteCampaign
  codeScanningListAlertsForOrg: CodeScanningListAlertsForOrg
  codeSecurityGetConfigurationsForOrg: CodeSecurityGetConfigurationsForOrg
  codeSecurityCreateConfiguration: CodeSecurityCreateConfiguration
  codeSecurityGetDefaultConfigurations: CodeSecurityGetDefaultConfigurations
  codeSecurityDetachConfiguration: CodeSecurityDetachConfiguration
  codeSecurityGetConfiguration: CodeSecurityGetConfiguration
  codeSecurityUpdateConfiguration: CodeSecurityUpdateConfiguration
  codeSecurityDeleteConfiguration: CodeSecurityDeleteConfiguration
  codeSecurityAttachConfiguration: CodeSecurityAttachConfiguration
  codeSecuritySetConfigurationAsDefault: CodeSecuritySetConfigurationAsDefault
  codeSecurityGetRepositoriesForConfiguration: CodeSecurityGetRepositoriesForConfiguration
  codespacesListInOrganization: CodespacesListInOrganization
  codespacesSetCodespacesAccess: CodespacesSetCodespacesAccess
  codespacesSetCodespacesAccessUsers: CodespacesSetCodespacesAccessUsers
  codespacesDeleteCodespacesAccessUsers: CodespacesDeleteCodespacesAccessUsers
  codespacesListOrgSecrets: CodespacesListOrgSecrets
  codespacesGetOrgPublicKey: CodespacesGetOrgPublicKey
  codespacesGetOrgSecret: CodespacesGetOrgSecret
  codespacesCreateOrUpdateOrgSecret: CodespacesCreateOrUpdateOrgSecret
  codespacesDeleteOrgSecret: CodespacesDeleteOrgSecret
  codespacesListSelectedReposForOrgSecret: CodespacesListSelectedReposForOrgSecret
  codespacesSetSelectedReposForOrgSecret: CodespacesSetSelectedReposForOrgSecret
  codespacesAddSelectedRepoToOrgSecret: CodespacesAddSelectedRepoToOrgSecret
  codespacesRemoveSelectedRepoFromOrgSecret: CodespacesRemoveSelectedRepoFromOrgSecret
  copilotGetCopilotOrganizationDetails: CopilotGetCopilotOrganizationDetails
  copilotListCopilotSeats: CopilotListCopilotSeats
  copilotAddCopilotSeatsForTeams: CopilotAddCopilotSeatsForTeams
  copilotCancelCopilotSeatAssignmentForTeams: CopilotCancelCopilotSeatAssignmentForTeams
  copilotAddCopilotSeatsForUsers: CopilotAddCopilotSeatsForUsers
  copilotCancelCopilotSeatAssignmentForUsers: CopilotCancelCopilotSeatAssignmentForUsers
  copilotCopilotMetricsForOrganization: CopilotCopilotMetricsForOrganization
  dependabotListAlertsForOrg: DependabotListAlertsForOrg
  dependabotListOrgSecrets: DependabotListOrgSecrets
  dependabotGetOrgPublicKey: DependabotGetOrgPublicKey
  dependabotGetOrgSecret: DependabotGetOrgSecret
  dependabotCreateOrUpdateOrgSecret: DependabotCreateOrUpdateOrgSecret
  dependabotDeleteOrgSecret: DependabotDeleteOrgSecret
  dependabotListSelectedReposForOrgSecret: DependabotListSelectedReposForOrgSecret
  dependabotSetSelectedReposForOrgSecret: DependabotSetSelectedReposForOrgSecret
  dependabotAddSelectedRepoToOrgSecret: DependabotAddSelectedRepoToOrgSecret
  dependabotRemoveSelectedRepoFromOrgSecret: DependabotRemoveSelectedRepoFromOrgSecret
  packagesListDockerMigrationConflictingPackagesForOrganization: PackagesListDockerMigrationConflictingPackagesForOrganization
  activityListPublicOrgEvents: ActivityListPublicOrgEvents
  orgsListFailedInvitations: OrgsListFailedInvitations
  orgsListWebhooks: OrgsListWebhooks
  orgsCreateWebhook: OrgsCreateWebhook
  orgsGetWebhook: OrgsGetWebhook
  orgsUpdateWebhook: OrgsUpdateWebhook
  orgsDeleteWebhook: OrgsDeleteWebhook
  orgsGetWebhookConfigForOrg: OrgsGetWebhookConfigForOrg
  orgsUpdateWebhookConfigForOrg: OrgsUpdateWebhookConfigForOrg
  orgsListWebhookDeliveries: OrgsListWebhookDeliveries
  orgsGetWebhookDelivery: OrgsGetWebhookDelivery
  orgsRedeliverWebhookDelivery: OrgsRedeliverWebhookDelivery
  orgsPingWebhook: OrgsPingWebhook
  apiInsightsGetRouteStatsByActor: ApiInsightsGetRouteStatsByActor
  apiInsightsGetSubjectStats: ApiInsightsGetSubjectStats
  apiInsightsGetSummaryStats: ApiInsightsGetSummaryStats
  apiInsightsGetSummaryStatsByUser: ApiInsightsGetSummaryStatsByUser
  apiInsightsGetSummaryStatsByActor: ApiInsightsGetSummaryStatsByActor
  apiInsightsGetTimeStats: ApiInsightsGetTimeStats
  apiInsightsGetTimeStatsByUser: ApiInsightsGetTimeStatsByUser
  apiInsightsGetTimeStatsByActor: ApiInsightsGetTimeStatsByActor
  apiInsightsGetUserStats: ApiInsightsGetUserStats
  appsGetOrgInstallation: AppsGetOrgInstallation
  orgsListAppInstallations: OrgsListAppInstallations
  interactionsGetRestrictionsForOrg: InteractionsGetRestrictionsForOrg
  interactionsSetRestrictionsForOrg: InteractionsSetRestrictionsForOrg
  interactionsRemoveRestrictionsForOrg: InteractionsRemoveRestrictionsForOrg
  orgsListPendingInvitations: OrgsListPendingInvitations
  orgsCreateInvitation: OrgsCreateInvitation
  orgsCancelInvitation: OrgsCancelInvitation
  orgsListInvitationTeams: OrgsListInvitationTeams
  orgsListIssueTypes: OrgsListIssueTypes
  orgsCreateIssueType: OrgsCreateIssueType
  orgsUpdateIssueType: OrgsUpdateIssueType
  orgsDeleteIssueType: OrgsDeleteIssueType
  issuesListForOrg: IssuesListForOrg
  orgsListMembers: OrgsListMembers
  orgsCheckMembershipForUser: OrgsCheckMembershipForUser
  orgsRemoveMember: OrgsRemoveMember
  codespacesGetCodespacesForUserInOrg: CodespacesGetCodespacesForUserInOrg
  codespacesDeleteFromOrganization: CodespacesDeleteFromOrganization
  codespacesStopInOrganization: CodespacesStopInOrganization
  copilotGetCopilotSeatDetailsForUser: CopilotGetCopilotSeatDetailsForUser
  orgsGetMembershipForUser: OrgsGetMembershipForUser
  orgsSetMembershipForUser: OrgsSetMembershipForUser
  orgsRemoveMembershipForUser: OrgsRemoveMembershipForUser
  migrationsListForOrg: MigrationsListForOrg
  migrationsStartForOrg: MigrationsStartForOrg
  migrationsGetStatusForOrg: MigrationsGetStatusForOrg
  migrationsDownloadArchiveForOrg: MigrationsDownloadArchiveForOrg
  migrationsDeleteArchiveForOrg: MigrationsDeleteArchiveForOrg
  migrationsUnlockRepoForOrg: MigrationsUnlockRepoForOrg
  migrationsListReposForOrg: MigrationsListReposForOrg
  orgsListOrgRoles: OrgsListOrgRoles
  orgsRevokeAllOrgRolesTeam: OrgsRevokeAllOrgRolesTeam
  orgsAssignTeamToOrgRole: OrgsAssignTeamToOrgRole
  orgsRevokeOrgRoleTeam: OrgsRevokeOrgRoleTeam
  orgsRevokeAllOrgRolesUser: OrgsRevokeAllOrgRolesUser
  orgsAssignUserToOrgRole: OrgsAssignUserToOrgRole
  orgsRevokeOrgRoleUser: OrgsRevokeOrgRoleUser
  orgsGetOrgRole: OrgsGetOrgRole
  orgsListOrgRoleTeams: OrgsListOrgRoleTeams
  orgsListOrgRoleUsers: OrgsListOrgRoleUsers
  orgsListOutsideCollaborators: OrgsListOutsideCollaborators
  orgsConvertMemberToOutsideCollaborator: OrgsConvertMemberToOutsideCollaborator
  orgsRemoveOutsideCollaborator: OrgsRemoveOutsideCollaborator
  packagesListPackagesForOrganization: PackagesListPackagesForOrganization
  packagesGetPackageForOrganization: PackagesGetPackageForOrganization
  packagesDeletePackageForOrg: PackagesDeletePackageForOrg
  packagesRestorePackageForOrg: PackagesRestorePackageForOrg
  packagesGetAllPackageVersionsForPackageOwnedByOrg: PackagesGetAllPackageVersionsForPackageOwnedByOrg
  packagesGetPackageVersionForOrganization: PackagesGetPackageVersionForOrganization
  packagesDeletePackageVersionForOrg: PackagesDeletePackageVersionForOrg
  packagesRestorePackageVersionForOrg: PackagesRestorePackageVersionForOrg
  orgsListPatGrantRequests: OrgsListPatGrantRequests
  orgsReviewPatGrantRequestsInBulk: OrgsReviewPatGrantRequestsInBulk
  orgsReviewPatGrantRequest: OrgsReviewPatGrantRequest
  orgsListPatGrantRequestRepositories: OrgsListPatGrantRequestRepositories
  orgsListPatGrants: OrgsListPatGrants
  orgsUpdatePatAccesses: OrgsUpdatePatAccesses
  orgsUpdatePatAccess: OrgsUpdatePatAccess
  orgsListPatGrantRepositories: OrgsListPatGrantRepositories
  privateRegistriesListOrgPrivateRegistries: PrivateRegistriesListOrgPrivateRegistries
  privateRegistriesCreateOrgPrivateRegistry: PrivateRegistriesCreateOrgPrivateRegistry
  privateRegistriesGetOrgPublicKey: PrivateRegistriesGetOrgPublicKey
  privateRegistriesGetOrgPrivateRegistry: PrivateRegistriesGetOrgPrivateRegistry
  privateRegistriesUpdateOrgPrivateRegistry: PrivateRegistriesUpdateOrgPrivateRegistry
  privateRegistriesDeleteOrgPrivateRegistry: PrivateRegistriesDeleteOrgPrivateRegistry
  projectsListForOrg: ProjectsListForOrg
  projectsCreateForOrg: ProjectsCreateForOrg
  orgsGetAllCustomProperties: OrgsGetAllCustomProperties
  orgsCreateOrUpdateCustomProperties: OrgsCreateOrUpdateCustomProperties
  orgsGetCustomProperty: OrgsGetCustomProperty
  orgsCreateOrUpdateCustomProperty: OrgsCreateOrUpdateCustomProperty
  orgsRemoveCustomProperty: OrgsRemoveCustomProperty
  orgsListCustomPropertiesValuesForRepos: OrgsListCustomPropertiesValuesForRepos
  orgsCreateOrUpdateCustomPropertiesValuesForRepos: OrgsCreateOrUpdateCustomPropertiesValuesForRepos
  orgsListPublicMembers: OrgsListPublicMembers
  orgsCheckPublicMembershipForUser: OrgsCheckPublicMembershipForUser
  orgsSetPublicMembershipForAuthenticatedUser: OrgsSetPublicMembershipForAuthenticatedUser
  orgsRemovePublicMembershipForAuthenticatedUser: OrgsRemovePublicMembershipForAuthenticatedUser
  reposListForOrg: ReposListForOrg
  reposCreateInOrg: ReposCreateInOrg
  reposGetOrgRulesets: ReposGetOrgRulesets
  reposCreateOrgRuleset: ReposCreateOrgRuleset
  reposGetOrgRuleSuites: ReposGetOrgRuleSuites
  reposGetOrgRuleSuite: ReposGetOrgRuleSuite
  reposGetOrgRuleset: ReposGetOrgRuleset
  reposUpdateOrgRuleset: ReposUpdateOrgRuleset
  reposDeleteOrgRuleset: ReposDeleteOrgRuleset
  orgsGetOrgRulesetHistory: OrgsGetOrgRulesetHistory
  orgsGetOrgRulesetVersion: OrgsGetOrgRulesetVersion
  secretScanningListAlertsForOrg: SecretScanningListAlertsForOrg
  securityAdvisoriesListOrgRepositoryAdvisories: SecurityAdvisoriesListOrgRepositoryAdvisories
  orgsListSecurityManagerTeams: OrgsListSecurityManagerTeams
  orgsAddSecurityManagerTeam: OrgsAddSecurityManagerTeam
  orgsRemoveSecurityManagerTeam: OrgsRemoveSecurityManagerTeam
  billingGetGithubActionsBillingOrg: BillingGetGithubActionsBillingOrg
  billingGetGithubPackagesBillingOrg: BillingGetGithubPackagesBillingOrg
  billingGetSharedStorageBillingOrg: BillingGetSharedStorageBillingOrg
  hostedComputeListNetworkConfigurationsForOrg: HostedComputeListNetworkConfigurationsForOrg
  hostedComputeCreateNetworkConfigurationForOrg: HostedComputeCreateNetworkConfigurationForOrg
  hostedComputeGetNetworkConfigurationForOrg: HostedComputeGetNetworkConfigurationForOrg
  hostedComputeUpdateNetworkConfigurationForOrg: HostedComputeUpdateNetworkConfigurationForOrg
  hostedComputeDeleteNetworkConfigurationFromOrg: HostedComputeDeleteNetworkConfigurationFromOrg
  hostedComputeGetNetworkSettingsForOrg: HostedComputeGetNetworkSettingsForOrg
  copilotCopilotMetricsForTeam: CopilotCopilotMetricsForTeam
  teamsList: TeamsList
  teamsCreate: TeamsCreate
  teamsGetByName: TeamsGetByName
  teamsUpdateInOrg: TeamsUpdateInOrg
  teamsDeleteInOrg: TeamsDeleteInOrg
  teamsListDiscussionsInOrg: TeamsListDiscussionsInOrg
  teamsCreateDiscussionInOrg: TeamsCreateDiscussionInOrg
  teamsGetDiscussionInOrg: TeamsGetDiscussionInOrg
  teamsUpdateDiscussionInOrg: TeamsUpdateDiscussionInOrg
  teamsDeleteDiscussionInOrg: TeamsDeleteDiscussionInOrg
  teamsListDiscussionCommentsInOrg: TeamsListDiscussionCommentsInOrg
  teamsCreateDiscussionCommentInOrg: TeamsCreateDiscussionCommentInOrg
  teamsGetDiscussionCommentInOrg: TeamsGetDiscussionCommentInOrg
  teamsUpdateDiscussionCommentInOrg: TeamsUpdateDiscussionCommentInOrg
  teamsDeleteDiscussionCommentInOrg: TeamsDeleteDiscussionCommentInOrg
  reactionsListForTeamDiscussionCommentInOrg: ReactionsListForTeamDiscussionCommentInOrg
  reactionsCreateForTeamDiscussionCommentInOrg: ReactionsCreateForTeamDiscussionCommentInOrg
  reactionsDeleteForTeamDiscussionComment: ReactionsDeleteForTeamDiscussionComment
  reactionsListForTeamDiscussionInOrg: ReactionsListForTeamDiscussionInOrg
  reactionsCreateForTeamDiscussionInOrg: ReactionsCreateForTeamDiscussionInOrg
  reactionsDeleteForTeamDiscussion: ReactionsDeleteForTeamDiscussion
  teamsListPendingInvitationsInOrg: TeamsListPendingInvitationsInOrg
  teamsListMembersInOrg: TeamsListMembersInOrg
  teamsGetMembershipForUserInOrg: TeamsGetMembershipForUserInOrg
  teamsAddOrUpdateMembershipForUserInOrg: TeamsAddOrUpdateMembershipForUserInOrg
  teamsRemoveMembershipForUserInOrg: TeamsRemoveMembershipForUserInOrg
  teamsListProjectsInOrg: TeamsListProjectsInOrg
  teamsCheckPermissionsForProjectInOrg: TeamsCheckPermissionsForProjectInOrg
  teamsAddOrUpdateProjectPermissionsInOrg: TeamsAddOrUpdateProjectPermissionsInOrg
  teamsRemoveProjectInOrg: TeamsRemoveProjectInOrg
  teamsListReposInOrg: TeamsListReposInOrg
  teamsCheckPermissionsForRepoInOrg: TeamsCheckPermissionsForRepoInOrg
  teamsAddOrUpdateRepoPermissionsInOrg: TeamsAddOrUpdateRepoPermissionsInOrg
  teamsRemoveRepoInOrg: TeamsRemoveRepoInOrg
  teamsListChildInOrg: TeamsListChildInOrg
  orgsEnableOrDisableSecurityProductOnAllOrgRepos: OrgsEnableOrDisableSecurityProductOnAllOrgRepos
  projectsGetCard: ProjectsGetCard
  projectsUpdateCard: ProjectsUpdateCard
  projectsDeleteCard: ProjectsDeleteCard
  projectsMoveCard: ProjectsMoveCard
  projectsGetColumn: ProjectsGetColumn
  projectsUpdateColumn: ProjectsUpdateColumn
  projectsDeleteColumn: ProjectsDeleteColumn
  projectsListCards: ProjectsListCards
  projectsCreateCard: ProjectsCreateCard
  projectsMoveColumn: ProjectsMoveColumn
  projectsGet: ProjectsGet
  projectsUpdate: ProjectsUpdate
  projectsDelete: ProjectsDelete
  projectsListCollaborators: ProjectsListCollaborators
  projectsAddCollaborator: ProjectsAddCollaborator
  projectsRemoveCollaborator: ProjectsRemoveCollaborator
  projectsGetPermissionForUser: ProjectsGetPermissionForUser
  projectsListColumns: ProjectsListColumns
  projectsCreateColumn: ProjectsCreateColumn
  rateLimitGet: RateLimitGet
  reposGet: ReposGet
  reposUpdate: ReposUpdate
  reposDelete: ReposDelete
  actionsListArtifactsForRepo: ActionsListArtifactsForRepo
  actionsGetArtifact: ActionsGetArtifact
  actionsDeleteArtifact: ActionsDeleteArtifact
  actionsDownloadArtifact: ActionsDownloadArtifact
  actionsGetActionsCacheUsage: ActionsGetActionsCacheUsage
  actionsGetActionsCacheList: ActionsGetActionsCacheList
  actionsDeleteActionsCacheByKey: ActionsDeleteActionsCacheByKey
  actionsDeleteActionsCacheById: ActionsDeleteActionsCacheById
  actionsGetJobForWorkflowRun: ActionsGetJobForWorkflowRun
  actionsDownloadJobLogsForWorkflowRun: ActionsDownloadJobLogsForWorkflowRun
  actionsReRunJobForWorkflowRun: ActionsReRunJobForWorkflowRun
  actionsGetCustomOidcSubClaimForRepo: ActionsGetCustomOidcSubClaimForRepo
  actionsSetCustomOidcSubClaimForRepo: ActionsSetCustomOidcSubClaimForRepo
  actionsListRepoOrganizationSecrets: ActionsListRepoOrganizationSecrets
  actionsListRepoOrganizationVariables: ActionsListRepoOrganizationVariables
  actionsGetGithubActionsPermissionsRepository: ActionsGetGithubActionsPermissionsRepository
  actionsSetGithubActionsPermissionsRepository: ActionsSetGithubActionsPermissionsRepository
  actionsGetWorkflowAccessToRepository: ActionsGetWorkflowAccessToRepository
  actionsSetWorkflowAccessToRepository: ActionsSetWorkflowAccessToRepository
  actionsGetAllowedActionsRepository: ActionsGetAllowedActionsRepository
  actionsSetAllowedActionsRepository: ActionsSetAllowedActionsRepository
  actionsGetGithubActionsDefaultWorkflowPermissionsRepository: ActionsGetGithubActionsDefaultWorkflowPermissionsRepository
  actionsSetGithubActionsDefaultWorkflowPermissionsRepository: ActionsSetGithubActionsDefaultWorkflowPermissionsRepository
  actionsListSelfHostedRunnersForRepo: ActionsListSelfHostedRunnersForRepo
  actionsListRunnerApplicationsForRepo: ActionsListRunnerApplicationsForRepo
  actionsGenerateRunnerJitconfigForRepo: ActionsGenerateRunnerJitconfigForRepo
  actionsCreateRegistrationTokenForRepo: ActionsCreateRegistrationTokenForRepo
  actionsCreateRemoveTokenForRepo: ActionsCreateRemoveTokenForRepo
  actionsGetSelfHostedRunnerForRepo: ActionsGetSelfHostedRunnerForRepo
  actionsDeleteSelfHostedRunnerFromRepo: ActionsDeleteSelfHostedRunnerFromRepo
  actionsListLabelsForSelfHostedRunnerForRepo: ActionsListLabelsForSelfHostedRunnerForRepo
  actionsAddCustomLabelsToSelfHostedRunnerForRepo: ActionsAddCustomLabelsToSelfHostedRunnerForRepo
  actionsSetCustomLabelsForSelfHostedRunnerForRepo: ActionsSetCustomLabelsForSelfHostedRunnerForRepo
  actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo: ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo
  actionsRemoveCustomLabelFromSelfHostedRunnerForRepo: ActionsRemoveCustomLabelFromSelfHostedRunnerForRepo
  actionsListWorkflowRunsForRepo: ActionsListWorkflowRunsForRepo
  actionsGetWorkflowRun: ActionsGetWorkflowRun
  actionsDeleteWorkflowRun: ActionsDeleteWorkflowRun
  actionsGetReviewsForRun: ActionsGetReviewsForRun
  actionsApproveWorkflowRun: ActionsApproveWorkflowRun
  actionsListWorkflowRunArtifacts: ActionsListWorkflowRunArtifacts
  actionsGetWorkflowRunAttempt: ActionsGetWorkflowRunAttempt
  actionsListJobsForWorkflowRunAttempt: ActionsListJobsForWorkflowRunAttempt
  actionsDownloadWorkflowRunAttemptLogs: ActionsDownloadWorkflowRunAttemptLogs
  actionsCancelWorkflowRun: ActionsCancelWorkflowRun
  actionsReviewCustomGatesForRun: ActionsReviewCustomGatesForRun
  actionsForceCancelWorkflowRun: ActionsForceCancelWorkflowRun
  actionsListJobsForWorkflowRun: ActionsListJobsForWorkflowRun
  actionsDownloadWorkflowRunLogs: ActionsDownloadWorkflowRunLogs
  actionsDeleteWorkflowRunLogs: ActionsDeleteWorkflowRunLogs
  actionsGetPendingDeploymentsForRun: ActionsGetPendingDeploymentsForRun
  actionsReviewPendingDeploymentsForRun: ActionsReviewPendingDeploymentsForRun
  actionsReRunWorkflow: ActionsReRunWorkflow
  actionsReRunWorkflowFailedJobs: ActionsReRunWorkflowFailedJobs
  actionsGetWorkflowRunUsage: ActionsGetWorkflowRunUsage
  actionsListRepoSecrets: ActionsListRepoSecrets
  actionsGetRepoPublicKey: ActionsGetRepoPublicKey
  actionsGetRepoSecret: ActionsGetRepoSecret
  actionsCreateOrUpdateRepoSecret: ActionsCreateOrUpdateRepoSecret
  actionsDeleteRepoSecret: ActionsDeleteRepoSecret
  actionsListRepoVariables: ActionsListRepoVariables
  actionsCreateRepoVariable: ActionsCreateRepoVariable
  actionsGetRepoVariable: ActionsGetRepoVariable
  actionsUpdateRepoVariable: ActionsUpdateRepoVariable
  actionsDeleteRepoVariable: ActionsDeleteRepoVariable
  actionsListRepoWorkflows: ActionsListRepoWorkflows
  actionsGetWorkflow: ActionsGetWorkflow
  actionsDisableWorkflow: ActionsDisableWorkflow
  actionsCreateWorkflowDispatch: ActionsCreateWorkflowDispatch
  actionsEnableWorkflow: ActionsEnableWorkflow
  actionsListWorkflowRuns: ActionsListWorkflowRuns
  actionsGetWorkflowUsage: ActionsGetWorkflowUsage
  reposListActivities: ReposListActivities
  issuesListAssignees: IssuesListAssignees
  issuesCheckUserCanBeAssigned: IssuesCheckUserCanBeAssigned
  reposCreateAttestation: ReposCreateAttestation
  reposListAttestations: ReposListAttestations
  reposListAutolinks: ReposListAutolinks
  reposCreateAutolink: ReposCreateAutolink
  reposGetAutolink: ReposGetAutolink
  reposDeleteAutolink: ReposDeleteAutolink
  reposCheckAutomatedSecurityFixes: ReposCheckAutomatedSecurityFixes
  reposEnableAutomatedSecurityFixes: ReposEnableAutomatedSecurityFixes
  reposDisableAutomatedSecurityFixes: ReposDisableAutomatedSecurityFixes
  reposListBranches: ReposListBranches
  reposGetBranch: ReposGetBranch
  reposGetBranchProtection: ReposGetBranchProtection
  reposUpdateBranchProtection: ReposUpdateBranchProtection
  reposDeleteBranchProtection: ReposDeleteBranchProtection
  reposGetAdminBranchProtection: ReposGetAdminBranchProtection
  reposSetAdminBranchProtection: ReposSetAdminBranchProtection
  reposDeleteAdminBranchProtection: ReposDeleteAdminBranchProtection
  reposGetPullRequestReviewProtection: ReposGetPullRequestReviewProtection
  reposUpdatePullRequestReviewProtection: ReposUpdatePullRequestReviewProtection
  reposDeletePullRequestReviewProtection: ReposDeletePullRequestReviewProtection
  reposGetCommitSignatureProtection: ReposGetCommitSignatureProtection
  reposCreateCommitSignatureProtection: ReposCreateCommitSignatureProtection
  reposDeleteCommitSignatureProtection: ReposDeleteCommitSignatureProtection
  reposGetStatusChecksProtection: ReposGetStatusChecksProtection
  reposUpdateStatusCheckProtection: ReposUpdateStatusCheckProtection
  reposRemoveStatusCheckProtection: ReposRemoveStatusCheckProtection
  reposGetAllStatusCheckContexts: ReposGetAllStatusCheckContexts
  reposAddStatusCheckContexts: ReposAddStatusCheckContexts
  reposSetStatusCheckContexts: ReposSetStatusCheckContexts
  reposRemoveStatusCheckContexts: ReposRemoveStatusCheckContexts
  reposGetAccessRestrictions: ReposGetAccessRestrictions
  reposDeleteAccessRestrictions: ReposDeleteAccessRestrictions
  reposGetAppsWithAccessToProtectedBranch: ReposGetAppsWithAccessToProtectedBranch
  reposAddAppAccessRestrictions: ReposAddAppAccessRestrictions
  reposSetAppAccessRestrictions: ReposSetAppAccessRestrictions
  reposRemoveAppAccessRestrictions: ReposRemoveAppAccessRestrictions
  reposGetTeamsWithAccessToProtectedBranch: ReposGetTeamsWithAccessToProtectedBranch
  reposAddTeamAccessRestrictions: ReposAddTeamAccessRestrictions
  reposSetTeamAccessRestrictions: ReposSetTeamAccessRestrictions
  reposRemoveTeamAccessRestrictions: ReposRemoveTeamAccessRestrictions
  reposGetUsersWithAccessToProtectedBranch: ReposGetUsersWithAccessToProtectedBranch
  reposAddUserAccessRestrictions: ReposAddUserAccessRestrictions
  reposSetUserAccessRestrictions: ReposSetUserAccessRestrictions
  reposRemoveUserAccessRestrictions: ReposRemoveUserAccessRestrictions
  reposRenameBranch: ReposRenameBranch
  checksCreate: ChecksCreate
  checksGet: ChecksGet
  checksUpdate: ChecksUpdate
  checksListAnnotations: ChecksListAnnotations
  checksRerequestRun: ChecksRerequestRun
  checksCreateSuite: ChecksCreateSuite
  checksSetSuitesPreferences: ChecksSetSuitesPreferences
  checksGetSuite: ChecksGetSuite
  checksListForSuite: ChecksListForSuite
  checksRerequestSuite: ChecksRerequestSuite
  codeScanningListAlertsForRepo: CodeScanningListAlertsForRepo
  codeScanningGetAlert: CodeScanningGetAlert
  codeScanningUpdateAlert: CodeScanningUpdateAlert
  codeScanningGetAutofix: CodeScanningGetAutofix
  codeScanningCreateAutofix: CodeScanningCreateAutofix
  codeScanningCommitAutofix: CodeScanningCommitAutofix
  codeScanningListAlertInstances: CodeScanningListAlertInstances
  codeScanningListRecentAnalyses: CodeScanningListRecentAnalyses
  codeScanningGetAnalysis: CodeScanningGetAnalysis
  codeScanningDeleteAnalysis: CodeScanningDeleteAnalysis
  codeScanningListCodeqlDatabases: CodeScanningListCodeqlDatabases
  codeScanningGetCodeqlDatabase: CodeScanningGetCodeqlDatabase
  codeScanningDeleteCodeqlDatabase: CodeScanningDeleteCodeqlDatabase
  codeScanningCreateVariantAnalysis: CodeScanningCreateVariantAnalysis
  codeScanningGetVariantAnalysis: CodeScanningGetVariantAnalysis
  codeScanningGetVariantAnalysisRepoTask: CodeScanningGetVariantAnalysisRepoTask
  codeScanningGetDefaultSetup: CodeScanningGetDefaultSetup
  codeScanningUpdateDefaultSetup: CodeScanningUpdateDefaultSetup
  codeScanningUploadSarif: CodeScanningUploadSarif
  codeScanningGetSarif: CodeScanningGetSarif
  codeSecurityGetConfigurationForRepository: CodeSecurityGetConfigurationForRepository
  reposCodeownersErrors: ReposCodeownersErrors
  codespacesListInRepositoryForAuthenticatedUser: CodespacesListInRepositoryForAuthenticatedUser
  codespacesCreateWithRepoForAuthenticatedUser: CodespacesCreateWithRepoForAuthenticatedUser
  codespacesListDevcontainersInRepositoryForAuthenticatedUser: CodespacesListDevcontainersInRepositoryForAuthenticatedUser
  codespacesRepoMachinesForAuthenticatedUser: CodespacesRepoMachinesForAuthenticatedUser
  codespacesPreFlightWithRepoForAuthenticatedUser: CodespacesPreFlightWithRepoForAuthenticatedUser
  codespacesCheckPermissionsForDevcontainer: CodespacesCheckPermissionsForDevcontainer
  codespacesListRepoSecrets: CodespacesListRepoSecrets
  codespacesGetRepoPublicKey: CodespacesGetRepoPublicKey
  codespacesGetRepoSecret: CodespacesGetRepoSecret
  codespacesCreateOrUpdateRepoSecret: CodespacesCreateOrUpdateRepoSecret
  codespacesDeleteRepoSecret: CodespacesDeleteRepoSecret
  reposListCollaborators: ReposListCollaborators
  reposCheckCollaborator: ReposCheckCollaborator
  reposAddCollaborator: ReposAddCollaborator
  reposRemoveCollaborator: ReposRemoveCollaborator
  reposGetCollaboratorPermissionLevel: ReposGetCollaboratorPermissionLevel
  reposListCommitCommentsForRepo: ReposListCommitCommentsForRepo
  reposGetCommitComment: ReposGetCommitComment
  reposUpdateCommitComment: ReposUpdateCommitComment
  reposDeleteCommitComment: ReposDeleteCommitComment
  reactionsListForCommitComment: ReactionsListForCommitComment
  reactionsCreateForCommitComment: ReactionsCreateForCommitComment
  reactionsDeleteForCommitComment: ReactionsDeleteForCommitComment
  reposListCommits: ReposListCommits
  reposListBranchesForHeadCommit: ReposListBranchesForHeadCommit
  reposListCommentsForCommit: ReposListCommentsForCommit
  reposCreateCommitComment: ReposCreateCommitComment
  reposListPullRequestsAssociatedWithCommit: ReposListPullRequestsAssociatedWithCommit
  reposGetCommit: ReposGetCommit
  checksListForRef: ChecksListForRef
  checksListSuitesForRef: ChecksListSuitesForRef
  reposGetCombinedStatusForRef: ReposGetCombinedStatusForRef
  reposListCommitStatusesForRef: ReposListCommitStatusesForRef
  reposGetCommunityProfileMetrics: ReposGetCommunityProfileMetrics
  reposCompareCommits: ReposCompareCommits
  reposGetContent: ReposGetContent
  reposCreateOrUpdateFileContents: ReposCreateOrUpdateFileContents
  reposDeleteFile: ReposDeleteFile
  reposListContributors: ReposListContributors
  dependabotListAlertsForRepo: DependabotListAlertsForRepo
  dependabotGetAlert: DependabotGetAlert
  dependabotUpdateAlert: DependabotUpdateAlert
  dependabotListRepoSecrets: DependabotListRepoSecrets
  dependabotGetRepoPublicKey: DependabotGetRepoPublicKey
  dependabotGetRepoSecret: DependabotGetRepoSecret
  dependabotCreateOrUpdateRepoSecret: DependabotCreateOrUpdateRepoSecret
  dependabotDeleteRepoSecret: DependabotDeleteRepoSecret
  dependencyGraphDiffRange: DependencyGraphDiffRange
  dependencyGraphExportSbom: DependencyGraphExportSbom
  dependencyGraphCreateRepositorySnapshot: DependencyGraphCreateRepositorySnapshot
  reposListDeployments: ReposListDeployments
  reposCreateDeployment: ReposCreateDeployment
  reposGetDeployment: ReposGetDeployment
  reposDeleteDeployment: ReposDeleteDeployment
  reposListDeploymentStatuses: ReposListDeploymentStatuses
  reposCreateDeploymentStatus: ReposCreateDeploymentStatus
  reposGetDeploymentStatus: ReposGetDeploymentStatus
  reposCreateDispatchEvent: ReposCreateDispatchEvent
  reposGetAllEnvironments: ReposGetAllEnvironments
  reposGetEnvironment: ReposGetEnvironment
  reposCreateOrUpdateEnvironment: ReposCreateOrUpdateEnvironment
  reposDeleteAnEnvironment: ReposDeleteAnEnvironment
  reposListDeploymentBranchPolicies: ReposListDeploymentBranchPolicies
  reposCreateDeploymentBranchPolicy: ReposCreateDeploymentBranchPolicy
  reposGetDeploymentBranchPolicy: ReposGetDeploymentBranchPolicy
  reposUpdateDeploymentBranchPolicy: ReposUpdateDeploymentBranchPolicy
  reposDeleteDeploymentBranchPolicy: ReposDeleteDeploymentBranchPolicy
  reposGetAllDeploymentProtectionRules: ReposGetAllDeploymentProtectionRules
  reposCreateDeploymentProtectionRule: ReposCreateDeploymentProtectionRule
  reposListCustomDeploymentRuleIntegrations: ReposListCustomDeploymentRuleIntegrations
  reposGetCustomDeploymentProtectionRule: ReposGetCustomDeploymentProtectionRule
  reposDisableDeploymentProtectionRule: ReposDisableDeploymentProtectionRule
  actionsListEnvironmentSecrets: ActionsListEnvironmentSecrets
  actionsGetEnvironmentPublicKey: ActionsGetEnvironmentPublicKey
  actionsGetEnvironmentSecret: ActionsGetEnvironmentSecret
  actionsCreateOrUpdateEnvironmentSecret: ActionsCreateOrUpdateEnvironmentSecret
  actionsDeleteEnvironmentSecret: ActionsDeleteEnvironmentSecret
  actionsListEnvironmentVariables: ActionsListEnvironmentVariables
  actionsCreateEnvironmentVariable: ActionsCreateEnvironmentVariable
  actionsGetEnvironmentVariable: ActionsGetEnvironmentVariable
  actionsUpdateEnvironmentVariable: ActionsUpdateEnvironmentVariable
  actionsDeleteEnvironmentVariable: ActionsDeleteEnvironmentVariable
  activityListRepoEvents: ActivityListRepoEvents
  reposListForks: ReposListForks
  reposCreateFork: ReposCreateFork
  gitCreateBlob: GitCreateBlob
  gitGetBlob: GitGetBlob
  gitCreateCommit: GitCreateCommit
  gitGetCommit: GitGetCommit
  gitListMatchingRefs: GitListMatchingRefs
  gitGetRef: GitGetRef
  gitCreateRef: GitCreateRef
  gitUpdateRef: GitUpdateRef
  gitDeleteRef: GitDeleteRef
  gitCreateTag: GitCreateTag
  gitGetTag: GitGetTag
  gitCreateTree: GitCreateTree
  gitGetTree: GitGetTree
  reposListWebhooks: ReposListWebhooks
  reposCreateWebhook: ReposCreateWebhook
  reposGetWebhook: ReposGetWebhook
  reposUpdateWebhook: ReposUpdateWebhook
  reposDeleteWebhook: ReposDeleteWebhook
  reposGetWebhookConfigForRepo: ReposGetWebhookConfigForRepo
  reposUpdateWebhookConfigForRepo: ReposUpdateWebhookConfigForRepo
  reposListWebhookDeliveries: ReposListWebhookDeliveries
  reposGetWebhookDelivery: ReposGetWebhookDelivery
  reposRedeliverWebhookDelivery: ReposRedeliverWebhookDelivery
  reposPingWebhook: ReposPingWebhook
  reposTestPushWebhook: ReposTestPushWebhook
  migrationsGetImportStatus: MigrationsGetImportStatus
  migrationsStartImport: MigrationsStartImport
  migrationsUpdateImport: MigrationsUpdateImport
  migrationsCancelImport: MigrationsCancelImport
  migrationsGetCommitAuthors: MigrationsGetCommitAuthors
  migrationsMapCommitAuthor: MigrationsMapCommitAuthor
  migrationsGetLargeFiles: MigrationsGetLargeFiles
  migrationsSetLfsPreference: MigrationsSetLfsPreference
  appsGetRepoInstallation: AppsGetRepoInstallation
  interactionsGetRestrictionsForRepo: InteractionsGetRestrictionsForRepo
  interactionsSetRestrictionsForRepo: InteractionsSetRestrictionsForRepo
  interactionsRemoveRestrictionsForRepo: InteractionsRemoveRestrictionsForRepo
  reposListInvitations: ReposListInvitations
  reposUpdateInvitation: ReposUpdateInvitation
  reposDeleteInvitation: ReposDeleteInvitation
  issuesListForRepo: IssuesListForRepo
  issuesCreate: IssuesCreate
  issuesListCommentsForRepo: IssuesListCommentsForRepo
  issuesGetComment: IssuesGetComment
  issuesUpdateComment: IssuesUpdateComment
  issuesDeleteComment: IssuesDeleteComment
  reactionsListForIssueComment: ReactionsListForIssueComment
  reactionsCreateForIssueComment: ReactionsCreateForIssueComment
  reactionsDeleteForIssueComment: ReactionsDeleteForIssueComment
  issuesListEventsForRepo: IssuesListEventsForRepo
  issuesGetEvent: IssuesGetEvent
  issuesGet: IssuesGet
  issuesUpdate: IssuesUpdate
  issuesAddAssignees: IssuesAddAssignees
  issuesRemoveAssignees: IssuesRemoveAssignees
  issuesCheckUserCanBeAssignedToIssue: IssuesCheckUserCanBeAssignedToIssue
  issuesListComments: IssuesListComments
  issuesCreateComment: IssuesCreateComment
  issuesListEvents: IssuesListEvents
  issuesListLabelsOnIssue: IssuesListLabelsOnIssue
  issuesAddLabels: IssuesAddLabels
  issuesSetLabels: IssuesSetLabels
  issuesRemoveAllLabels: IssuesRemoveAllLabels
  issuesRemoveLabel: IssuesRemoveLabel
  issuesLock: IssuesLock
  issuesUnlock: IssuesUnlock
  reactionsListForIssue: ReactionsListForIssue
  reactionsCreateForIssue: ReactionsCreateForIssue
  reactionsDeleteForIssue: ReactionsDeleteForIssue
  issuesRemoveSubIssue: IssuesRemoveSubIssue
  issuesListSubIssues: IssuesListSubIssues
  issuesAddSubIssue: IssuesAddSubIssue
  issuesReprioritizeSubIssue: IssuesReprioritizeSubIssue
  issuesListEventsForTimeline: IssuesListEventsForTimeline
  reposListDeployKeys: ReposListDeployKeys
  reposCreateDeployKey: ReposCreateDeployKey
  reposGetDeployKey: ReposGetDeployKey
  reposDeleteDeployKey: ReposDeleteDeployKey
  issuesListLabelsForRepo: IssuesListLabelsForRepo
  issuesCreateLabel: IssuesCreateLabel
  issuesGetLabel: IssuesGetLabel
  issuesUpdateLabel: IssuesUpdateLabel
  issuesDeleteLabel: IssuesDeleteLabel
  reposListLanguages: ReposListLanguages
  licensesGetForRepo: LicensesGetForRepo
  reposMergeUpstream: ReposMergeUpstream
  reposMerge: ReposMerge
  issuesListMilestones: IssuesListMilestones
  issuesCreateMilestone: IssuesCreateMilestone
  issuesGetMilestone: IssuesGetMilestone
  issuesUpdateMilestone: IssuesUpdateMilestone
  issuesDeleteMilestone: IssuesDeleteMilestone
  issuesListLabelsForMilestone: IssuesListLabelsForMilestone
  activityListRepoNotificationsForAuthenticatedUser: ActivityListRepoNotificationsForAuthenticatedUser
  activityMarkRepoNotificationsAsRead: ActivityMarkRepoNotificationsAsRead
  reposGetPages: ReposGetPages
  reposCreatePagesSite: ReposCreatePagesSite
  reposUpdateInformationAboutPagesSite: ReposUpdateInformationAboutPagesSite
  reposDeletePagesSite: ReposDeletePagesSite
  reposListPagesBuilds: ReposListPagesBuilds
  reposRequestPagesBuild: ReposRequestPagesBuild
  reposGetLatestPagesBuild: ReposGetLatestPagesBuild
  reposGetPagesBuild: ReposGetPagesBuild
  reposCreatePagesDeployment: ReposCreatePagesDeployment
  reposGetPagesDeployment: ReposGetPagesDeployment
  reposCancelPagesDeployment: ReposCancelPagesDeployment
  reposGetPagesHealthCheck: ReposGetPagesHealthCheck
  reposCheckPrivateVulnerabilityReporting: ReposCheckPrivateVulnerabilityReporting
  reposEnablePrivateVulnerabilityReporting: ReposEnablePrivateVulnerabilityReporting
  reposDisablePrivateVulnerabilityReporting: ReposDisablePrivateVulnerabilityReporting
  projectsListForRepo: ProjectsListForRepo
  projectsCreateForRepo: ProjectsCreateForRepo
  reposGetCustomPropertiesValues: ReposGetCustomPropertiesValues
  reposCreateOrUpdateCustomPropertiesValues: ReposCreateOrUpdateCustomPropertiesValues
  pullsList: PullsList
  pullsCreate: PullsCreate
  pullsListReviewCommentsForRepo: PullsListReviewCommentsForRepo
  pullsGetReviewComment: PullsGetReviewComment
  pullsUpdateReviewComment: PullsUpdateReviewComment
  pullsDeleteReviewComment: PullsDeleteReviewComment
  reactionsListForPullRequestReviewComment: ReactionsListForPullRequestReviewComment
  reactionsCreateForPullRequestReviewComment: ReactionsCreateForPullRequestReviewComment
  reactionsDeleteForPullRequestComment: ReactionsDeleteForPullRequestComment
  pullsGet: PullsGet
  pullsUpdate: PullsUpdate
  codespacesCreateWithPrForAuthenticatedUser: CodespacesCreateWithPrForAuthenticatedUser
  pullsListReviewComments: PullsListReviewComments
  pullsCreateReviewComment: PullsCreateReviewComment
  pullsCreateReplyForReviewComment: PullsCreateReplyForReviewComment
  pullsListCommits: PullsListCommits
  pullsListFiles: PullsListFiles
  pullsCheckIfMerged: PullsCheckIfMerged
  pullsMerge: PullsMerge
  pullsListRequestedReviewers: PullsListRequestedReviewers
  pullsRequestReviewers: PullsRequestReviewers
  pullsRemoveRequestedReviewers: PullsRemoveRequestedReviewers
  pullsListReviews: PullsListReviews
  pullsCreateReview: PullsCreateReview
  pullsGetReview: PullsGetReview
  pullsUpdateReview: PullsUpdateReview
  pullsDeletePendingReview: PullsDeletePendingReview
  pullsListCommentsForReview: PullsListCommentsForReview
  pullsDismissReview: PullsDismissReview
  pullsSubmitReview: PullsSubmitReview
  pullsUpdateBranch: PullsUpdateBranch
  reposGetReadme: ReposGetReadme
  reposGetReadmeInDirectory: ReposGetReadmeInDirectory
  reposListReleases: ReposListReleases
  reposCreateRelease: ReposCreateRelease
  reposGetReleaseAsset: ReposGetReleaseAsset
  reposUpdateReleaseAsset: ReposUpdateReleaseAsset
  reposDeleteReleaseAsset: ReposDeleteReleaseAsset
  reposGenerateReleaseNotes: ReposGenerateReleaseNotes
  reposGetLatestRelease: ReposGetLatestRelease
  reposGetReleaseByTag: ReposGetReleaseByTag
  reposGetRelease: ReposGetRelease
  reposUpdateRelease: ReposUpdateRelease
  reposDeleteRelease: ReposDeleteRelease
  reposListReleaseAssets: ReposListReleaseAssets
  reposUploadReleaseAsset: ReposUploadReleaseAsset
  reactionsListForRelease: ReactionsListForRelease
  reactionsCreateForRelease: ReactionsCreateForRelease
  reactionsDeleteForRelease: ReactionsDeleteForRelease
  reposGetBranchRules: ReposGetBranchRules
  reposGetRepoRulesets: ReposGetRepoRulesets
  reposCreateRepoRuleset: ReposCreateRepoRuleset
  reposGetRepoRuleSuites: ReposGetRepoRuleSuites
  reposGetRepoRuleSuite: ReposGetRepoRuleSuite
  reposGetRepoRuleset: ReposGetRepoRuleset
  reposUpdateRepoRuleset: ReposUpdateRepoRuleset
  reposDeleteRepoRuleset: ReposDeleteRepoRuleset
  reposGetRepoRulesetHistory: ReposGetRepoRulesetHistory
  reposGetRepoRulesetVersion: ReposGetRepoRulesetVersion
  secretScanningListAlertsForRepo: SecretScanningListAlertsForRepo
  secretScanningGetAlert: SecretScanningGetAlert
  secretScanningUpdateAlert: SecretScanningUpdateAlert
  secretScanningListLocationsForAlert: SecretScanningListLocationsForAlert
  secretScanningCreatePushProtectionBypass: SecretScanningCreatePushProtectionBypass
  secretScanningGetScanHistory: SecretScanningGetScanHistory
  securityAdvisoriesListRepositoryAdvisories: SecurityAdvisoriesListRepositoryAdvisories
  securityAdvisoriesCreateRepositoryAdvisory: SecurityAdvisoriesCreateRepositoryAdvisory
  securityAdvisoriesCreatePrivateVulnerabilityReport: SecurityAdvisoriesCreatePrivateVulnerabilityReport
  securityAdvisoriesGetRepositoryAdvisory: SecurityAdvisoriesGetRepositoryAdvisory
  securityAdvisoriesUpdateRepositoryAdvisory: SecurityAdvisoriesUpdateRepositoryAdvisory
  securityAdvisoriesCreateRepositoryAdvisoryCveRequest: SecurityAdvisoriesCreateRepositoryAdvisoryCveRequest
  securityAdvisoriesCreateFork: SecurityAdvisoriesCreateFork
  activityListStargazersForRepo: ActivityListStargazersForRepo
  reposGetCodeFrequencyStats: ReposGetCodeFrequencyStats
  reposGetCommitActivityStats: ReposGetCommitActivityStats
  reposGetContributorsStats: ReposGetContributorsStats
  reposGetParticipationStats: ReposGetParticipationStats
  reposGetPunchCardStats: ReposGetPunchCardStats
  reposCreateCommitStatus: ReposCreateCommitStatus
  activityListWatchersForRepo: ActivityListWatchersForRepo
  activityGetRepoSubscription: ActivityGetRepoSubscription
  activitySetRepoSubscription: ActivitySetRepoSubscription
  activityDeleteRepoSubscription: ActivityDeleteRepoSubscription
  reposListTags: ReposListTags
  reposListTagProtection: ReposListTagProtection
  reposCreateTagProtection: ReposCreateTagProtection
  reposDeleteTagProtection: ReposDeleteTagProtection
  reposDownloadTarballArchive: ReposDownloadTarballArchive
  reposListTeams: ReposListTeams
  reposGetAllTopics: ReposGetAllTopics
  reposReplaceAllTopics: ReposReplaceAllTopics
  reposGetClones: ReposGetClones
  reposGetTopPaths: ReposGetTopPaths
  reposGetTopReferrers: ReposGetTopReferrers
  reposGetViews: ReposGetViews
  reposTransfer: ReposTransfer
  reposCheckVulnerabilityAlerts: ReposCheckVulnerabilityAlerts
  reposEnableVulnerabilityAlerts: ReposEnableVulnerabilityAlerts
  reposDisableVulnerabilityAlerts: ReposDisableVulnerabilityAlerts
  reposDownloadZipballArchive: ReposDownloadZipballArchive
  reposCreateUsingTemplate: ReposCreateUsingTemplate
  reposListPublic: ReposListPublic
  searchCode: SearchCode
  searchCommits: SearchCommits
  searchIssuesAndPullRequests: SearchIssuesAndPullRequests
  searchLabels: SearchLabels
  searchRepos: SearchRepos
  searchTopics: SearchTopics
  searchUsers: SearchUsers
  teamsGetLegacy: TeamsGetLegacy
  teamsUpdateLegacy: TeamsUpdateLegacy
  teamsDeleteLegacy: TeamsDeleteLegacy
  teamsListDiscussionsLegacy: TeamsListDiscussionsLegacy
  teamsCreateDiscussionLegacy: TeamsCreateDiscussionLegacy
  teamsGetDiscussionLegacy: TeamsGetDiscussionLegacy
  teamsUpdateDiscussionLegacy: TeamsUpdateDiscussionLegacy
  teamsDeleteDiscussionLegacy: TeamsDeleteDiscussionLegacy
  teamsListDiscussionCommentsLegacy: TeamsListDiscussionCommentsLegacy
  teamsCreateDiscussionCommentLegacy: TeamsCreateDiscussionCommentLegacy
  teamsGetDiscussionCommentLegacy: TeamsGetDiscussionCommentLegacy
  teamsUpdateDiscussionCommentLegacy: TeamsUpdateDiscussionCommentLegacy
  teamsDeleteDiscussionCommentLegacy: TeamsDeleteDiscussionCommentLegacy
  reactionsListForTeamDiscussionCommentLegacy: ReactionsListForTeamDiscussionCommentLegacy
  reactionsCreateForTeamDiscussionCommentLegacy: ReactionsCreateForTeamDiscussionCommentLegacy
  reactionsListForTeamDiscussionLegacy: ReactionsListForTeamDiscussionLegacy
  reactionsCreateForTeamDiscussionLegacy: ReactionsCreateForTeamDiscussionLegacy
  teamsListPendingInvitationsLegacy: TeamsListPendingInvitationsLegacy
  teamsListMembersLegacy: TeamsListMembersLegacy
  teamsGetMemberLegacy: TeamsGetMemberLegacy
  teamsAddMemberLegacy: TeamsAddMemberLegacy
  teamsRemoveMemberLegacy: TeamsRemoveMemberLegacy
  teamsGetMembershipForUserLegacy: TeamsGetMembershipForUserLegacy
  teamsAddOrUpdateMembershipForUserLegacy: TeamsAddOrUpdateMembershipForUserLegacy
  teamsRemoveMembershipForUserLegacy: TeamsRemoveMembershipForUserLegacy
  teamsListProjectsLegacy: TeamsListProjectsLegacy
  teamsCheckPermissionsForProjectLegacy: TeamsCheckPermissionsForProjectLegacy
  teamsAddOrUpdateProjectPermissionsLegacy: TeamsAddOrUpdateProjectPermissionsLegacy
  teamsRemoveProjectLegacy: TeamsRemoveProjectLegacy
  teamsListReposLegacy: TeamsListReposLegacy
  teamsCheckPermissionsForRepoLegacy: TeamsCheckPermissionsForRepoLegacy
  teamsAddOrUpdateRepoPermissionsLegacy: TeamsAddOrUpdateRepoPermissionsLegacy
  teamsRemoveRepoLegacy: TeamsRemoveRepoLegacy
  teamsListChildLegacy: TeamsListChildLegacy
  usersGetAuthenticated: UsersGetAuthenticated
  usersUpdateAuthenticated: UsersUpdateAuthenticated
  usersListBlockedByAuthenticatedUser: UsersListBlockedByAuthenticatedUser
  usersCheckBlocked: UsersCheckBlocked
  usersBlock: UsersBlock
  usersUnblock: UsersUnblock
  codespacesListForAuthenticatedUser: CodespacesListForAuthenticatedUser
  codespacesCreateForAuthenticatedUser: CodespacesCreateForAuthenticatedUser
  codespacesListSecretsForAuthenticatedUser: CodespacesListSecretsForAuthenticatedUser
  codespacesGetPublicKeyForAuthenticatedUser: CodespacesGetPublicKeyForAuthenticatedUser
  codespacesGetSecretForAuthenticatedUser: CodespacesGetSecretForAuthenticatedUser
  codespacesCreateOrUpdateSecretForAuthenticatedUser: CodespacesCreateOrUpdateSecretForAuthenticatedUser
  codespacesDeleteSecretForAuthenticatedUser: CodespacesDeleteSecretForAuthenticatedUser
  codespacesListRepositoriesForSecretForAuthenticatedUser: CodespacesListRepositoriesForSecretForAuthenticatedUser
  codespacesSetRepositoriesForSecretForAuthenticatedUser: CodespacesSetRepositoriesForSecretForAuthenticatedUser
  codespacesAddRepositoryForSecretForAuthenticatedUser: CodespacesAddRepositoryForSecretForAuthenticatedUser
  codespacesRemoveRepositoryForSecretForAuthenticatedUser: CodespacesRemoveRepositoryForSecretForAuthenticatedUser
  codespacesGetForAuthenticatedUser: CodespacesGetForAuthenticatedUser
  codespacesUpdateForAuthenticatedUser: CodespacesUpdateForAuthenticatedUser
  codespacesDeleteForAuthenticatedUser: CodespacesDeleteForAuthenticatedUser
  codespacesExportForAuthenticatedUser: CodespacesExportForAuthenticatedUser
  codespacesGetExportDetailsForAuthenticatedUser: CodespacesGetExportDetailsForAuthenticatedUser
  codespacesCodespaceMachinesForAuthenticatedUser: CodespacesCodespaceMachinesForAuthenticatedUser
  codespacesPublishForAuthenticatedUser: CodespacesPublishForAuthenticatedUser
  codespacesStartForAuthenticatedUser: CodespacesStartForAuthenticatedUser
  codespacesStopForAuthenticatedUser: CodespacesStopForAuthenticatedUser
  packagesListDockerMigrationConflictingPackagesForAuthenticatedUser: PackagesListDockerMigrationConflictingPackagesForAuthenticatedUser
  usersSetPrimaryEmailVisibilityForAuthenticatedUser: UsersSetPrimaryEmailVisibilityForAuthenticatedUser
  usersListEmailsForAuthenticatedUser: UsersListEmailsForAuthenticatedUser
  usersAddEmailForAuthenticatedUser: UsersAddEmailForAuthenticatedUser
  usersDeleteEmailForAuthenticatedUser: UsersDeleteEmailForAuthenticatedUser
  usersListFollowersForAuthenticatedUser: UsersListFollowersForAuthenticatedUser
  usersListFollowedByAuthenticatedUser: UsersListFollowedByAuthenticatedUser
  usersCheckPersonIsFollowedByAuthenticated: UsersCheckPersonIsFollowedByAuthenticated
  usersFollow: UsersFollow
  usersUnfollow: UsersUnfollow
  usersListGpgKeysForAuthenticatedUser: UsersListGpgKeysForAuthenticatedUser
  usersCreateGpgKeyForAuthenticatedUser: UsersCreateGpgKeyForAuthenticatedUser
  usersGetGpgKeyForAuthenticatedUser: UsersGetGpgKeyForAuthenticatedUser
  usersDeleteGpgKeyForAuthenticatedUser: UsersDeleteGpgKeyForAuthenticatedUser
  appsListInstallationsForAuthenticatedUser: AppsListInstallationsForAuthenticatedUser
  appsListInstallationReposForAuthenticatedUser: AppsListInstallationReposForAuthenticatedUser
  appsAddRepoToInstallationForAuthenticatedUser: AppsAddRepoToInstallationForAuthenticatedUser
  appsRemoveRepoFromInstallationForAuthenticatedUser: AppsRemoveRepoFromInstallationForAuthenticatedUser
  interactionsGetRestrictionsForAuthenticatedUser: InteractionsGetRestrictionsForAuthenticatedUser
  interactionsSetRestrictionsForAuthenticatedUser: InteractionsSetRestrictionsForAuthenticatedUser
  interactionsRemoveRestrictionsForAuthenticatedUser: InteractionsRemoveRestrictionsForAuthenticatedUser
  issuesListForAuthenticatedUser: IssuesListForAuthenticatedUser
  usersListPublicSshKeysForAuthenticatedUser: UsersListPublicSshKeysForAuthenticatedUser
  usersCreatePublicSshKeyForAuthenticatedUser: UsersCreatePublicSshKeyForAuthenticatedUser
  usersGetPublicSshKeyForAuthenticatedUser: UsersGetPublicSshKeyForAuthenticatedUser
  usersDeletePublicSshKeyForAuthenticatedUser: UsersDeletePublicSshKeyForAuthenticatedUser
  appsListSubscriptionsForAuthenticatedUser: AppsListSubscriptionsForAuthenticatedUser
  appsListSubscriptionsForAuthenticatedUserStubbed: AppsListSubscriptionsForAuthenticatedUserStubbed
  orgsListMembershipsForAuthenticatedUser: OrgsListMembershipsForAuthenticatedUser
  orgsGetMembershipForAuthenticatedUser: OrgsGetMembershipForAuthenticatedUser
  orgsUpdateMembershipForAuthenticatedUser: OrgsUpdateMembershipForAuthenticatedUser
  migrationsListForAuthenticatedUser: MigrationsListForAuthenticatedUser
  migrationsStartForAuthenticatedUser: MigrationsStartForAuthenticatedUser
  migrationsGetStatusForAuthenticatedUser: MigrationsGetStatusForAuthenticatedUser
  migrationsGetArchiveForAuthenticatedUser: MigrationsGetArchiveForAuthenticatedUser
  migrationsDeleteArchiveForAuthenticatedUser: MigrationsDeleteArchiveForAuthenticatedUser
  migrationsUnlockRepoForAuthenticatedUser: MigrationsUnlockRepoForAuthenticatedUser
  migrationsListReposForAuthenticatedUser: MigrationsListReposForAuthenticatedUser
  orgsListForAuthenticatedUser: OrgsListForAuthenticatedUser
  packagesListPackagesForAuthenticatedUser: PackagesListPackagesForAuthenticatedUser
  packagesGetPackageForAuthenticatedUser: PackagesGetPackageForAuthenticatedUser
  packagesDeletePackageForAuthenticatedUser: PackagesDeletePackageForAuthenticatedUser
  packagesRestorePackageForAuthenticatedUser: PackagesRestorePackageForAuthenticatedUser
  packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser: PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser
  packagesGetPackageVersionForAuthenticatedUser: PackagesGetPackageVersionForAuthenticatedUser
  packagesDeletePackageVersionForAuthenticatedUser: PackagesDeletePackageVersionForAuthenticatedUser
  packagesRestorePackageVersionForAuthenticatedUser: PackagesRestorePackageVersionForAuthenticatedUser
  projectsCreateForAuthenticatedUser: ProjectsCreateForAuthenticatedUser
  usersListPublicEmailsForAuthenticatedUser: UsersListPublicEmailsForAuthenticatedUser
  reposListForAuthenticatedUser: ReposListForAuthenticatedUser
  reposCreateForAuthenticatedUser: ReposCreateForAuthenticatedUser
  reposListInvitationsForAuthenticatedUser: ReposListInvitationsForAuthenticatedUser
  reposAcceptInvitationForAuthenticatedUser: ReposAcceptInvitationForAuthenticatedUser
  reposDeclineInvitationForAuthenticatedUser: ReposDeclineInvitationForAuthenticatedUser
  usersListSocialAccountsForAuthenticatedUser: UsersListSocialAccountsForAuthenticatedUser
  usersAddSocialAccountForAuthenticatedUser: UsersAddSocialAccountForAuthenticatedUser
  usersDeleteSocialAccountForAuthenticatedUser: UsersDeleteSocialAccountForAuthenticatedUser
  usersListSshSigningKeysForAuthenticatedUser: UsersListSshSigningKeysForAuthenticatedUser
  usersCreateSshSigningKeyForAuthenticatedUser: UsersCreateSshSigningKeyForAuthenticatedUser
  usersGetSshSigningKeyForAuthenticatedUser: UsersGetSshSigningKeyForAuthenticatedUser
  usersDeleteSshSigningKeyForAuthenticatedUser: UsersDeleteSshSigningKeyForAuthenticatedUser
  activityListReposStarredByAuthenticatedUser: ActivityListReposStarredByAuthenticatedUser
  activityCheckRepoIsStarredByAuthenticatedUser: ActivityCheckRepoIsStarredByAuthenticatedUser
  activityStarRepoForAuthenticatedUser: ActivityStarRepoForAuthenticatedUser
  activityUnstarRepoForAuthenticatedUser: ActivityUnstarRepoForAuthenticatedUser
  activityListWatchedReposForAuthenticatedUser: ActivityListWatchedReposForAuthenticatedUser
  teamsListForAuthenticatedUser: TeamsListForAuthenticatedUser
  usersGetById: UsersGetById
  usersList: UsersList
  usersGetByUsername: UsersGetByUsername
  usersListAttestations: UsersListAttestations
  packagesListDockerMigrationConflictingPackagesForUser: PackagesListDockerMigrationConflictingPackagesForUser
  activityListEventsForAuthenticatedUser: ActivityListEventsForAuthenticatedUser
  activityListOrgEventsForAuthenticatedUser: ActivityListOrgEventsForAuthenticatedUser
  activityListPublicEventsForUser: ActivityListPublicEventsForUser
  usersListFollowersForUser: UsersListFollowersForUser
  usersListFollowingForUser: UsersListFollowingForUser
  usersCheckFollowingForUser: UsersCheckFollowingForUser
  gistsListForUser: GistsListForUser
  usersListGpgKeysForUser: UsersListGpgKeysForUser
  usersGetContextForUser: UsersGetContextForUser
  appsGetUserInstallation: AppsGetUserInstallation
  usersListPublicKeysForUser: UsersListPublicKeysForUser
  orgsListForUser: OrgsListForUser
  packagesListPackagesForUser: PackagesListPackagesForUser
  packagesGetPackageForUser: PackagesGetPackageForUser
  packagesDeletePackageForUser: PackagesDeletePackageForUser
  packagesRestorePackageForUser: PackagesRestorePackageForUser
  packagesGetAllPackageVersionsForPackageOwnedByUser: PackagesGetAllPackageVersionsForPackageOwnedByUser
  packagesGetPackageVersionForUser: PackagesGetPackageVersionForUser
  packagesDeletePackageVersionForUser: PackagesDeletePackageVersionForUser
  packagesRestorePackageVersionForUser: PackagesRestorePackageVersionForUser
  projectsListForUser: ProjectsListForUser
  activityListReceivedEventsForUser: ActivityListReceivedEventsForUser
  activityListReceivedPublicEventsForUser: ActivityListReceivedPublicEventsForUser
  reposListForUser: ReposListForUser
  billingGetGithubActionsBillingUser: BillingGetGithubActionsBillingUser
  billingGetGithubPackagesBillingUser: BillingGetGithubPackagesBillingUser
  billingGetSharedStorageBillingUser: BillingGetSharedStorageBillingUser
  usersListSocialAccountsForUser: UsersListSocialAccountsForUser
  usersListSshSigningKeysForUser: UsersListSshSigningKeysForUser
  activityListReposStarredByUser: ActivityListReposStarredByUser
  activityListReposWatchedByUser: ActivityListReposWatchedByUser
  metaGetAllVersions: MetaGetAllVersions
  metaGetZen: MetaGetZen
}

export function createRouter(implementation: Implementation): KoaRouter {
  const router = new KoaRouter()

  router.get("metaRoot", "/", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .metaRoot(input, metaRootResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = metaRootResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const securityAdvisoriesListGlobalAdvisoriesQuerySchema = z.object({
    ghsa_id: z.string().optional(),
    type: z
      .enum(["reviewed", "malware", "unreviewed"])
      .optional()
      .default("reviewed"),
    cve_id: z.string().optional(),
    ecosystem: s_security_advisory_ecosystems.optional(),
    severity: z
      .enum(["unknown", "low", "medium", "high", "critical"])
      .optional(),
    cwes: z.union([z.string(), z.array(z.string())]).optional(),
    is_withdrawn: PermissiveBoolean.optional(),
    affects: z.union([z.string(), z.array(z.string()).max(1000)]).optional(),
    published: z.string().optional(),
    updated: z.string().optional(),
    modified: z.string().optional(),
    epss_percentage: z.string().optional(),
    epss_percentile: z.string().optional(),
    before: z.string().optional(),
    after: z.string().optional(),
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    per_page: z.coerce.number().min(1).max(100).optional().default(30),
    sort: z
      .enum(["updated", "published", "epss_percentage", "epss_percentile"])
      .optional()
      .default("published"),
  })

  router.get(
    "securityAdvisoriesListGlobalAdvisories",
    "/advisories",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          securityAdvisoriesListGlobalAdvisoriesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .securityAdvisoriesListGlobalAdvisories(
          input,
          securityAdvisoriesListGlobalAdvisoriesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = securityAdvisoriesListGlobalAdvisoriesResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const securityAdvisoriesGetGlobalAdvisoryParamSchema = z.object({
    ghsa_id: z.string(),
  })

  router.get(
    "securityAdvisoriesGetGlobalAdvisory",
    "/advisories/:ghsa_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          securityAdvisoriesGetGlobalAdvisoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .securityAdvisoriesGetGlobalAdvisory(
          input,
          securityAdvisoriesGetGlobalAdvisoryResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = securityAdvisoriesGetGlobalAdvisoryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  router.get("appsGetAuthenticated", "/app", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .appsGetAuthenticated(input, appsGetAuthenticatedResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = appsGetAuthenticatedResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const appsCreateFromManifestParamSchema = z.object({ code: z.string() })

  router.post(
    "appsCreateFromManifest",
    "/app-manifests/:code/conversions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsCreateFromManifestParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsCreateFromManifest(input, appsCreateFromManifestResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsCreateFromManifestResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  router.get(
    "appsGetWebhookConfigForApp",
    "/app/hook/config",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsGetWebhookConfigForApp(
          input,
          appsGetWebhookConfigForAppResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsGetWebhookConfigForAppResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsUpdateWebhookConfigForAppBodySchema = z.object({
    url: s_webhook_config_url.optional(),
    content_type: s_webhook_config_content_type.optional(),
    secret: s_webhook_config_secret.optional(),
    insecure_ssl: s_webhook_config_insecure_ssl.optional(),
  })

  router.patch(
    "appsUpdateWebhookConfigForApp",
    "/app/hook/config",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          appsUpdateWebhookConfigForAppBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .appsUpdateWebhookConfigForApp(
          input,
          appsUpdateWebhookConfigForAppResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsUpdateWebhookConfigForAppResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsListWebhookDeliveriesQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    cursor: z.string().optional(),
  })

  router.get(
    "appsListWebhookDeliveries",
    "/app/hook/deliveries",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          appsListWebhookDeliveriesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsListWebhookDeliveries(
          input,
          appsListWebhookDeliveriesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsListWebhookDeliveriesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsGetWebhookDeliveryParamSchema = z.object({
    delivery_id: z.coerce.number(),
  })

  router.get(
    "appsGetWebhookDelivery",
    "/app/hook/deliveries/:delivery_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsGetWebhookDeliveryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsGetWebhookDelivery(input, appsGetWebhookDeliveryResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsGetWebhookDeliveryResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsRedeliverWebhookDeliveryParamSchema = z.object({
    delivery_id: z.coerce.number(),
  })

  router.post(
    "appsRedeliverWebhookDelivery",
    "/app/hook/deliveries/:delivery_id/attempts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsRedeliverWebhookDeliveryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsRedeliverWebhookDelivery(
          input,
          appsRedeliverWebhookDeliveryResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsRedeliverWebhookDeliveryResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsListInstallationRequestsForAuthenticatedAppQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "appsListInstallationRequestsForAuthenticatedApp",
    "/app/installation-requests",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          appsListInstallationRequestsForAuthenticatedAppQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsListInstallationRequestsForAuthenticatedApp(
          input,
          appsListInstallationRequestsForAuthenticatedAppResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        appsListInstallationRequestsForAuthenticatedAppResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const appsListInstallationsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
    since: z.string().datetime({ offset: true }).optional(),
    outdated: z.string().optional(),
  })

  router.get(
    "appsListInstallations",
    "/app/installations",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          appsListInstallationsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsListInstallations(input, appsListInstallationsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsListInstallationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsGetInstallationParamSchema = z.object({
    installation_id: z.coerce.number(),
  })

  router.get(
    "appsGetInstallation",
    "/app/installations/:installation_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsGetInstallationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsGetInstallation(input, appsGetInstallationResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsGetInstallationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsDeleteInstallationParamSchema = z.object({
    installation_id: z.coerce.number(),
  })

  router.delete(
    "appsDeleteInstallation",
    "/app/installations/:installation_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsDeleteInstallationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsDeleteInstallation(input, appsDeleteInstallationResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsDeleteInstallationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsCreateInstallationAccessTokenParamSchema = z.object({
    installation_id: z.coerce.number(),
  })

  const appsCreateInstallationAccessTokenBodySchema = z
    .object({
      repositories: z.array(z.string()).optional(),
      repository_ids: z.array(z.coerce.number()).optional(),
      permissions: s_app_permissions.optional(),
    })
    .optional()

  router.post(
    "appsCreateInstallationAccessToken",
    "/app/installations/:installation_id/access_tokens",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsCreateInstallationAccessTokenParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          appsCreateInstallationAccessTokenBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .appsCreateInstallationAccessToken(
          input,
          appsCreateInstallationAccessTokenResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsCreateInstallationAccessTokenResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const appsSuspendInstallationParamSchema = z.object({
    installation_id: z.coerce.number(),
  })

  router.put(
    "appsSuspendInstallation",
    "/app/installations/:installation_id/suspended",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsSuspendInstallationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsSuspendInstallation(input, appsSuspendInstallationResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsSuspendInstallationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsUnsuspendInstallationParamSchema = z.object({
    installation_id: z.coerce.number(),
  })

  router.delete(
    "appsUnsuspendInstallation",
    "/app/installations/:installation_id/suspended",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsUnsuspendInstallationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsUnsuspendInstallation(
          input,
          appsUnsuspendInstallationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsUnsuspendInstallationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsDeleteAuthorizationParamSchema = z.object({ client_id: z.string() })

  const appsDeleteAuthorizationBodySchema = z.object({
    access_token: z.string(),
  })

  router.delete(
    "appsDeleteAuthorization",
    "/applications/:client_id/grant",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsDeleteAuthorizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          appsDeleteAuthorizationBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .appsDeleteAuthorization(input, appsDeleteAuthorizationResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsDeleteAuthorizationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsCheckTokenParamSchema = z.object({ client_id: z.string() })

  const appsCheckTokenBodySchema = z.object({ access_token: z.string() })

  router.post(
    "appsCheckToken",
    "/applications/:client_id/token",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsCheckTokenParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          appsCheckTokenBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .appsCheckToken(input, appsCheckTokenResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsCheckTokenResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsResetTokenParamSchema = z.object({ client_id: z.string() })

  const appsResetTokenBodySchema = z.object({ access_token: z.string() })

  router.patch(
    "appsResetToken",
    "/applications/:client_id/token",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsResetTokenParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          appsResetTokenBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .appsResetToken(input, appsResetTokenResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsResetTokenResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsDeleteTokenParamSchema = z.object({ client_id: z.string() })

  const appsDeleteTokenBodySchema = z.object({ access_token: z.string() })

  router.delete(
    "appsDeleteToken",
    "/applications/:client_id/token",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsDeleteTokenParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          appsDeleteTokenBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .appsDeleteToken(input, appsDeleteTokenResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsDeleteTokenResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsScopeTokenParamSchema = z.object({ client_id: z.string() })

  const appsScopeTokenBodySchema = z.object({
    access_token: z.string(),
    target: z.string().optional(),
    target_id: z.coerce.number().optional(),
    repositories: z.array(z.string()).optional(),
    repository_ids: z.array(z.coerce.number()).optional(),
    permissions: s_app_permissions.optional(),
  })

  router.post(
    "appsScopeToken",
    "/applications/:client_id/token/scoped",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsScopeTokenParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          appsScopeTokenBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .appsScopeToken(input, appsScopeTokenResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsScopeTokenResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsGetBySlugParamSchema = z.object({ app_slug: z.string() })

  router.get("appsGetBySlug", "/apps/:app_slug", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        appsGetBySlugParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .appsGetBySlug(input, appsGetBySlugResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = appsGetBySlugResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const classroomGetAnAssignmentParamSchema = z.object({
    assignment_id: z.coerce.number(),
  })

  router.get(
    "classroomGetAnAssignment",
    "/assignments/:assignment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          classroomGetAnAssignmentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .classroomGetAnAssignment(input, classroomGetAnAssignmentResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = classroomGetAnAssignmentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const classroomListAcceptedAssignmentsForAnAssignmentParamSchema = z.object({
    assignment_id: z.coerce.number(),
  })

  const classroomListAcceptedAssignmentsForAnAssignmentQuerySchema = z.object({
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
  })

  router.get(
    "classroomListAcceptedAssignmentsForAnAssignment",
    "/assignments/:assignment_id/accepted_assignments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          classroomListAcceptedAssignmentsForAnAssignmentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          classroomListAcceptedAssignmentsForAnAssignmentQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .classroomListAcceptedAssignmentsForAnAssignment(
          input,
          classroomListAcceptedAssignmentsForAnAssignmentResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        classroomListAcceptedAssignmentsForAnAssignmentResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const classroomGetAssignmentGradesParamSchema = z.object({
    assignment_id: z.coerce.number(),
  })

  router.get(
    "classroomGetAssignmentGrades",
    "/assignments/:assignment_id/grades",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          classroomGetAssignmentGradesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .classroomGetAssignmentGrades(
          input,
          classroomGetAssignmentGradesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = classroomGetAssignmentGradesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const classroomListClassroomsQuerySchema = z.object({
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
  })

  router.get("classroomListClassrooms", "/classrooms", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        classroomListClassroomsQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .classroomListClassrooms(input, classroomListClassroomsResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = classroomListClassroomsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const classroomGetAClassroomParamSchema = z.object({
    classroom_id: z.coerce.number(),
  })

  router.get(
    "classroomGetAClassroom",
    "/classrooms/:classroom_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          classroomGetAClassroomParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .classroomGetAClassroom(input, classroomGetAClassroomResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = classroomGetAClassroomResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const classroomListAssignmentsForAClassroomParamSchema = z.object({
    classroom_id: z.coerce.number(),
  })

  const classroomListAssignmentsForAClassroomQuerySchema = z.object({
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
  })

  router.get(
    "classroomListAssignmentsForAClassroom",
    "/classrooms/:classroom_id/assignments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          classroomListAssignmentsForAClassroomParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          classroomListAssignmentsForAClassroomQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .classroomListAssignmentsForAClassroom(
          input,
          classroomListAssignmentsForAClassroomResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = classroomListAssignmentsForAClassroomResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  router.get(
    "codesOfConductGetAllCodesOfConduct",
    "/codes_of_conduct",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codesOfConductGetAllCodesOfConduct(
          input,
          codesOfConductGetAllCodesOfConductResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codesOfConductGetAllCodesOfConductResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codesOfConductGetConductCodeParamSchema = z.object({ key: z.string() })

  router.get(
    "codesOfConductGetConductCode",
    "/codes_of_conduct/:key",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codesOfConductGetConductCodeParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codesOfConductGetConductCode(
          input,
          codesOfConductGetConductCodeResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codesOfConductGetConductCodeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  router.get("emojisGet", "/emojis", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .emojisGet(input, emojisGetResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = emojisGetResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const codeSecurityGetConfigurationsForEnterpriseParamSchema = z.object({
    enterprise: z.string(),
  })

  const codeSecurityGetConfigurationsForEnterpriseQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    before: z.string().optional(),
    after: z.string().optional(),
  })

  router.get(
    "codeSecurityGetConfigurationsForEnterprise",
    "/enterprises/:enterprise/code-security/configurations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeSecurityGetConfigurationsForEnterpriseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codeSecurityGetConfigurationsForEnterpriseQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeSecurityGetConfigurationsForEnterprise(
          input,
          codeSecurityGetConfigurationsForEnterpriseResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeSecurityGetConfigurationsForEnterpriseResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codeSecurityCreateConfigurationForEnterpriseParamSchema = z.object({
    enterprise: z.string(),
  })

  const codeSecurityCreateConfigurationForEnterpriseBodySchema = z.object({
    name: z.string(),
    description: z.string().max(255),
    advanced_security: z
      .enum(["enabled", "disabled", "code_security", "secret_protection"])
      .optional()
      .default("disabled"),
    dependency_graph: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("enabled"),
    dependency_graph_autosubmit_action: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    dependency_graph_autosubmit_action_options: z
      .object({ labeled_runners: PermissiveBoolean.optional().default(false) })
      .optional(),
    dependabot_alerts: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    dependabot_security_updates: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    code_scanning_default_setup: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    code_scanning_default_setup_options:
      s_code_scanning_default_setup_options.optional(),
    code_scanning_delegated_alert_dismissal: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    secret_scanning: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    secret_scanning_push_protection: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    secret_scanning_validity_checks: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    secret_scanning_non_provider_patterns: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    secret_scanning_generic_secrets: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    secret_scanning_delegated_alert_dismissal: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    private_vulnerability_reporting: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    enforcement: z
      .enum(["enforced", "unenforced"])
      .optional()
      .default("enforced"),
  })

  router.post(
    "codeSecurityCreateConfigurationForEnterprise",
    "/enterprises/:enterprise/code-security/configurations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeSecurityCreateConfigurationForEnterpriseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codeSecurityCreateConfigurationForEnterpriseBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codeSecurityCreateConfigurationForEnterprise(
          input,
          codeSecurityCreateConfigurationForEnterpriseResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeSecurityCreateConfigurationForEnterpriseResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codeSecurityGetDefaultConfigurationsForEnterpriseParamSchema = z.object(
    { enterprise: z.string() },
  )

  router.get(
    "codeSecurityGetDefaultConfigurationsForEnterprise",
    "/enterprises/:enterprise/code-security/configurations/defaults",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeSecurityGetDefaultConfigurationsForEnterpriseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeSecurityGetDefaultConfigurationsForEnterprise(
          input,
          codeSecurityGetDefaultConfigurationsForEnterpriseResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        codeSecurityGetDefaultConfigurationsForEnterpriseResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const codeSecurityGetSingleConfigurationForEnterpriseParamSchema = z.object({
    enterprise: z.string(),
    configuration_id: z.coerce.number(),
  })

  router.get(
    "codeSecurityGetSingleConfigurationForEnterprise",
    "/enterprises/:enterprise/code-security/configurations/:configuration_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeSecurityGetSingleConfigurationForEnterpriseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeSecurityGetSingleConfigurationForEnterprise(
          input,
          codeSecurityGetSingleConfigurationForEnterpriseResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        codeSecurityGetSingleConfigurationForEnterpriseResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const codeSecurityUpdateEnterpriseConfigurationParamSchema = z.object({
    enterprise: z.string(),
    configuration_id: z.coerce.number(),
  })

  const codeSecurityUpdateEnterpriseConfigurationBodySchema = z.object({
    name: z.string().optional(),
    description: z.string().max(255).optional(),
    advanced_security: z
      .enum(["enabled", "disabled", "code_security", "secret_protection"])
      .optional(),
    dependency_graph: z.enum(["enabled", "disabled", "not_set"]).optional(),
    dependency_graph_autosubmit_action: z
      .enum(["enabled", "disabled", "not_set"])
      .optional(),
    dependency_graph_autosubmit_action_options: z
      .object({ labeled_runners: PermissiveBoolean.optional() })
      .optional(),
    dependabot_alerts: z.enum(["enabled", "disabled", "not_set"]).optional(),
    dependabot_security_updates: z
      .enum(["enabled", "disabled", "not_set"])
      .optional(),
    code_scanning_default_setup: z
      .enum(["enabled", "disabled", "not_set"])
      .optional(),
    code_scanning_default_setup_options:
      s_code_scanning_default_setup_options.optional(),
    code_scanning_delegated_alert_dismissal: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    secret_scanning: z.enum(["enabled", "disabled", "not_set"]).optional(),
    secret_scanning_push_protection: z
      .enum(["enabled", "disabled", "not_set"])
      .optional(),
    secret_scanning_validity_checks: z
      .enum(["enabled", "disabled", "not_set"])
      .optional(),
    secret_scanning_non_provider_patterns: z
      .enum(["enabled", "disabled", "not_set"])
      .optional(),
    secret_scanning_generic_secrets: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    secret_scanning_delegated_alert_dismissal: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    private_vulnerability_reporting: z
      .enum(["enabled", "disabled", "not_set"])
      .optional(),
    enforcement: z.enum(["enforced", "unenforced"]).optional(),
  })

  router.patch(
    "codeSecurityUpdateEnterpriseConfiguration",
    "/enterprises/:enterprise/code-security/configurations/:configuration_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeSecurityUpdateEnterpriseConfigurationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codeSecurityUpdateEnterpriseConfigurationBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codeSecurityUpdateEnterpriseConfiguration(
          input,
          codeSecurityUpdateEnterpriseConfigurationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeSecurityUpdateEnterpriseConfigurationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codeSecurityDeleteConfigurationForEnterpriseParamSchema = z.object({
    enterprise: z.string(),
    configuration_id: z.coerce.number(),
  })

  router.delete(
    "codeSecurityDeleteConfigurationForEnterprise",
    "/enterprises/:enterprise/code-security/configurations/:configuration_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeSecurityDeleteConfigurationForEnterpriseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeSecurityDeleteConfigurationForEnterprise(
          input,
          codeSecurityDeleteConfigurationForEnterpriseResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeSecurityDeleteConfigurationForEnterpriseResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codeSecurityAttachEnterpriseConfigurationParamSchema = z.object({
    enterprise: z.string(),
    configuration_id: z.coerce.number(),
  })

  const codeSecurityAttachEnterpriseConfigurationBodySchema = z.object({
    scope: z.enum(["all", "all_without_configurations"]),
  })

  router.post(
    "codeSecurityAttachEnterpriseConfiguration",
    "/enterprises/:enterprise/code-security/configurations/:configuration_id/attach",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeSecurityAttachEnterpriseConfigurationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codeSecurityAttachEnterpriseConfigurationBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codeSecurityAttachEnterpriseConfiguration(
          input,
          codeSecurityAttachEnterpriseConfigurationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeSecurityAttachEnterpriseConfigurationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codeSecuritySetConfigurationAsDefaultForEnterpriseParamSchema =
    z.object({ enterprise: z.string(), configuration_id: z.coerce.number() })

  const codeSecuritySetConfigurationAsDefaultForEnterpriseBodySchema = z.object(
    {
      default_for_new_repos: z
        .enum(["all", "none", "private_and_internal", "public"])
        .optional(),
    },
  )

  router.put(
    "codeSecuritySetConfigurationAsDefaultForEnterprise",
    "/enterprises/:enterprise/code-security/configurations/:configuration_id/defaults",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeSecuritySetConfigurationAsDefaultForEnterpriseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codeSecuritySetConfigurationAsDefaultForEnterpriseBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codeSecuritySetConfigurationAsDefaultForEnterprise(
          input,
          codeSecuritySetConfigurationAsDefaultForEnterpriseResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        codeSecuritySetConfigurationAsDefaultForEnterpriseResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const codeSecurityGetRepositoriesForEnterpriseConfigurationParamSchema =
    z.object({ enterprise: z.string(), configuration_id: z.coerce.number() })

  const codeSecurityGetRepositoriesForEnterpriseConfigurationQuerySchema =
    z.object({
      per_page: z.coerce.number().optional().default(30),
      before: z.string().optional(),
      after: z.string().optional(),
      status: z.string().optional().default("all"),
    })

  router.get(
    "codeSecurityGetRepositoriesForEnterpriseConfiguration",
    "/enterprises/:enterprise/code-security/configurations/:configuration_id/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeSecurityGetRepositoriesForEnterpriseConfigurationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codeSecurityGetRepositoriesForEnterpriseConfigurationQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeSecurityGetRepositoriesForEnterpriseConfiguration(
          input,
          codeSecurityGetRepositoriesForEnterpriseConfigurationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        codeSecurityGetRepositoriesForEnterpriseConfigurationResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const dependabotListAlertsForEnterpriseParamSchema = z.object({
    enterprise: z.string(),
  })

  const dependabotListAlertsForEnterpriseQuerySchema = z.object({
    state: z.string().optional(),
    severity: z.string().optional(),
    ecosystem: z.string().optional(),
    package: z.string().optional(),
    epss_percentage: z.string().optional(),
    scope: z.enum(["development", "runtime"]).optional(),
    sort: z
      .enum(["created", "updated", "epss_percentage"])
      .optional()
      .default("created"),
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    before: z.string().optional(),
    after: z.string().optional(),
    first: z.coerce.number().min(1).max(100).optional().default(30),
    last: z.coerce.number().min(1).max(100).optional(),
    per_page: z.coerce.number().optional().default(30),
  })

  router.get(
    "dependabotListAlertsForEnterprise",
    "/enterprises/:enterprise/dependabot/alerts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotListAlertsForEnterpriseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          dependabotListAlertsForEnterpriseQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .dependabotListAlertsForEnterprise(
          input,
          dependabotListAlertsForEnterpriseResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotListAlertsForEnterpriseResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const secretScanningListAlertsForEnterpriseParamSchema = z.object({
    enterprise: z.string(),
  })

  const secretScanningListAlertsForEnterpriseQuerySchema = z.object({
    state: z.enum(["open", "resolved"]).optional(),
    secret_type: z.string().optional(),
    resolution: z.string().optional(),
    sort: z.enum(["created", "updated"]).optional().default("created"),
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    per_page: z.coerce.number().optional().default(30),
    before: z.string().optional(),
    after: z.string().optional(),
    validity: z.string().optional(),
    is_publicly_leaked: PermissiveBoolean.optional().default(false),
    is_multi_repo: PermissiveBoolean.optional().default(false),
  })

  router.get(
    "secretScanningListAlertsForEnterprise",
    "/enterprises/:enterprise/secret-scanning/alerts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          secretScanningListAlertsForEnterpriseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          secretScanningListAlertsForEnterpriseQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .secretScanningListAlertsForEnterprise(
          input,
          secretScanningListAlertsForEnterpriseResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = secretScanningListAlertsForEnterpriseResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const activityListPublicEventsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get("activityListPublicEvents", "/events", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        activityListPublicEventsQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .activityListPublicEvents(input, activityListPublicEventsResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = activityListPublicEventsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  router.get("activityGetFeeds", "/feeds", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .activityGetFeeds(input, activityGetFeedsResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = activityGetFeedsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gistsListQuerySchema = z.object({
    since: z.string().datetime({ offset: true }).optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get("gistsList", "/gists", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        gistsListQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .gistsList(input, gistsListResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = gistsListResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gistsCreateBodySchema = z.object({
    description: z.string().optional(),
    files: z.record(z.object({ content: z.string() })),
    public: z
      .union([
        PermissiveBoolean.default(false),
        z.enum(["true", "false"]).default("false"),
      ])
      .optional(),
  })

  router.post("gistsCreate", "/gists", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(
        gistsCreateBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const response = await implementation
      .gistsCreate(input, gistsCreateResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = gistsCreateResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gistsListPublicQuerySchema = z.object({
    since: z.string().datetime({ offset: true }).optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get("gistsListPublic", "/gists/public", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        gistsListPublicQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .gistsListPublic(input, gistsListPublicResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = gistsListPublicResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gistsListStarredQuerySchema = z.object({
    since: z.string().datetime({ offset: true }).optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get("gistsListStarred", "/gists/starred", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        gistsListStarredQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .gistsListStarred(input, gistsListStarredResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = gistsListStarredResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gistsGetParamSchema = z.object({ gist_id: z.string() })

  router.get("gistsGet", "/gists/:gist_id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        gistsGetParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .gistsGet(input, gistsGetResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = gistsGetResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gistsUpdateParamSchema = z.object({ gist_id: z.string() })

  const gistsUpdateBodySchema = z
    .object({
      description: z.string().optional(),
      files: z
        .record(
          z
            .object({
              content: z.string().optional(),
              filename: z.string().nullable().optional(),
            })
            .nullable(),
        )
        .optional(),
    })
    .nullable()

  router.patch("gistsUpdate", "/gists/:gist_id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        gistsUpdateParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        gistsUpdateBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const response = await implementation
      .gistsUpdate(input, gistsUpdateResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = gistsUpdateResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gistsDeleteParamSchema = z.object({ gist_id: z.string() })

  router.delete("gistsDelete", "/gists/:gist_id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        gistsDeleteParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .gistsDelete(input, gistsDeleteResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = gistsDeleteResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gistsListCommentsParamSchema = z.object({ gist_id: z.string() })

  const gistsListCommentsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "gistsListComments",
    "/gists/:gist_id/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gistsListCommentsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          gistsListCommentsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .gistsListComments(input, gistsListCommentsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gistsListCommentsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gistsCreateCommentParamSchema = z.object({ gist_id: z.string() })

  const gistsCreateCommentBodySchema = z.object({ body: z.string().max(65535) })

  router.post(
    "gistsCreateComment",
    "/gists/:gist_id/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gistsCreateCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          gistsCreateCommentBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .gistsCreateComment(input, gistsCreateCommentResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gistsCreateCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gistsGetCommentParamSchema = z.object({
    gist_id: z.string(),
    comment_id: z.coerce.number(),
  })

  router.get(
    "gistsGetComment",
    "/gists/:gist_id/comments/:comment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gistsGetCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .gistsGetComment(input, gistsGetCommentResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gistsGetCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gistsUpdateCommentParamSchema = z.object({
    gist_id: z.string(),
    comment_id: z.coerce.number(),
  })

  const gistsUpdateCommentBodySchema = z.object({ body: z.string().max(65535) })

  router.patch(
    "gistsUpdateComment",
    "/gists/:gist_id/comments/:comment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gistsUpdateCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          gistsUpdateCommentBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .gistsUpdateComment(input, gistsUpdateCommentResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gistsUpdateCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gistsDeleteCommentParamSchema = z.object({
    gist_id: z.string(),
    comment_id: z.coerce.number(),
  })

  router.delete(
    "gistsDeleteComment",
    "/gists/:gist_id/comments/:comment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gistsDeleteCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .gistsDeleteComment(input, gistsDeleteCommentResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gistsDeleteCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gistsListCommitsParamSchema = z.object({ gist_id: z.string() })

  const gistsListCommitsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "gistsListCommits",
    "/gists/:gist_id/commits",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gistsListCommitsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          gistsListCommitsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .gistsListCommits(input, gistsListCommitsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gistsListCommitsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gistsListForksParamSchema = z.object({ gist_id: z.string() })

  const gistsListForksQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get("gistsListForks", "/gists/:gist_id/forks", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        gistsListForksParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: parseRequestInput(
        gistsListForksQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .gistsListForks(input, gistsListForksResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = gistsListForksResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gistsForkParamSchema = z.object({ gist_id: z.string() })

  router.post("gistsFork", "/gists/:gist_id/forks", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        gistsForkParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .gistsFork(input, gistsForkResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = gistsForkResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gistsCheckIsStarredParamSchema = z.object({ gist_id: z.string() })

  router.get(
    "gistsCheckIsStarred",
    "/gists/:gist_id/star",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gistsCheckIsStarredParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .gistsCheckIsStarred(input, gistsCheckIsStarredResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gistsCheckIsStarredResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gistsStarParamSchema = z.object({ gist_id: z.string() })

  router.put("gistsStar", "/gists/:gist_id/star", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        gistsStarParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .gistsStar(input, gistsStarResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = gistsStarResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gistsUnstarParamSchema = z.object({ gist_id: z.string() })

  router.delete("gistsUnstar", "/gists/:gist_id/star", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        gistsUnstarParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .gistsUnstar(input, gistsUnstarResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = gistsUnstarResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gistsGetRevisionParamSchema = z.object({
    gist_id: z.string(),
    sha: z.string(),
  })

  router.get("gistsGetRevision", "/gists/:gist_id/:sha", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        gistsGetRevisionParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .gistsGetRevision(input, gistsGetRevisionResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = gistsGetRevisionResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  router.get(
    "gitignoreGetAllTemplates",
    "/gitignore/templates",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .gitignoreGetAllTemplates(input, gitignoreGetAllTemplatesResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitignoreGetAllTemplatesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitignoreGetTemplateParamSchema = z.object({ name: z.string() })

  router.get(
    "gitignoreGetTemplate",
    "/gitignore/templates/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitignoreGetTemplateParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .gitignoreGetTemplate(input, gitignoreGetTemplateResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitignoreGetTemplateResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsListReposAccessibleToInstallationQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "appsListReposAccessibleToInstallation",
    "/installation/repositories",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          appsListReposAccessibleToInstallationQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsListReposAccessibleToInstallation(
          input,
          appsListReposAccessibleToInstallationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsListReposAccessibleToInstallationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  router.delete(
    "appsRevokeInstallationAccessToken",
    "/installation/token",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsRevokeInstallationAccessToken(
          input,
          appsRevokeInstallationAccessTokenResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsRevokeInstallationAccessTokenResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const issuesListQuerySchema = z.object({
    filter: z
      .enum(["assigned", "created", "mentioned", "subscribed", "repos", "all"])
      .optional()
      .default("assigned"),
    state: z.enum(["open", "closed", "all"]).optional().default("open"),
    labels: z.string().optional(),
    sort: z
      .enum(["created", "updated", "comments"])
      .optional()
      .default("created"),
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    since: z.string().datetime({ offset: true }).optional(),
    collab: PermissiveBoolean.optional(),
    orgs: PermissiveBoolean.optional(),
    owned: PermissiveBoolean.optional(),
    pulls: PermissiveBoolean.optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get("issuesList", "/issues", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        issuesListQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .issuesList(input, issuesListResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = issuesListResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const licensesGetAllCommonlyUsedQuerySchema = z.object({
    featured: PermissiveBoolean.optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get("licensesGetAllCommonlyUsed", "/licenses", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        licensesGetAllCommonlyUsedQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .licensesGetAllCommonlyUsed(
        input,
        licensesGetAllCommonlyUsedResponder,
        ctx,
      )
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = licensesGetAllCommonlyUsedResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const licensesGetParamSchema = z.object({ license: z.string() })

  router.get("licensesGet", "/licenses/:license", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        licensesGetParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .licensesGet(input, licensesGetResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = licensesGetResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const markdownRenderBodySchema = z.object({
    text: z.string(),
    mode: z.enum(["markdown", "gfm"]).optional().default("markdown"),
    context: z.string().optional(),
  })

  router.post("markdownRender", "/markdown", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(
        markdownRenderBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const response = await implementation
      .markdownRender(input, markdownRenderResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = markdownRenderResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const markdownRenderRawBodySchema = z.string().optional()

  router.post("markdownRenderRaw", "/markdown/raw", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(
        markdownRenderRawBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const response = await implementation
      .markdownRenderRaw(input, markdownRenderRawResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = markdownRenderRawResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const appsGetSubscriptionPlanForAccountParamSchema = z.object({
    account_id: z.coerce.number(),
  })

  router.get(
    "appsGetSubscriptionPlanForAccount",
    "/marketplace_listing/accounts/:account_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsGetSubscriptionPlanForAccountParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsGetSubscriptionPlanForAccount(
          input,
          appsGetSubscriptionPlanForAccountResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsGetSubscriptionPlanForAccountResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const appsListPlansQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "appsListPlans",
    "/marketplace_listing/plans",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          appsListPlansQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsListPlans(input, appsListPlansResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsListPlansResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsListAccountsForPlanParamSchema = z.object({
    plan_id: z.coerce.number(),
  })

  const appsListAccountsForPlanQuerySchema = z.object({
    sort: z.enum(["created", "updated"]).optional().default("created"),
    direction: z.enum(["asc", "desc"]).optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "appsListAccountsForPlan",
    "/marketplace_listing/plans/:plan_id/accounts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsListAccountsForPlanParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          appsListAccountsForPlanQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsListAccountsForPlan(input, appsListAccountsForPlanResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsListAccountsForPlanResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsGetSubscriptionPlanForAccountStubbedParamSchema = z.object({
    account_id: z.coerce.number(),
  })

  router.get(
    "appsGetSubscriptionPlanForAccountStubbed",
    "/marketplace_listing/stubbed/accounts/:account_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsGetSubscriptionPlanForAccountStubbedParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsGetSubscriptionPlanForAccountStubbed(
          input,
          appsGetSubscriptionPlanForAccountStubbedResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsGetSubscriptionPlanForAccountStubbedResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const appsListPlansStubbedQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "appsListPlansStubbed",
    "/marketplace_listing/stubbed/plans",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          appsListPlansStubbedQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsListPlansStubbed(input, appsListPlansStubbedResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsListPlansStubbedResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsListAccountsForPlanStubbedParamSchema = z.object({
    plan_id: z.coerce.number(),
  })

  const appsListAccountsForPlanStubbedQuerySchema = z.object({
    sort: z.enum(["created", "updated"]).optional().default("created"),
    direction: z.enum(["asc", "desc"]).optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "appsListAccountsForPlanStubbed",
    "/marketplace_listing/stubbed/plans/:plan_id/accounts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsListAccountsForPlanStubbedParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          appsListAccountsForPlanStubbedQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsListAccountsForPlanStubbed(
          input,
          appsListAccountsForPlanStubbedResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsListAccountsForPlanStubbedResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  router.get("metaGet", "/meta", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .metaGet(input, metaGetResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = metaGetResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const activityListPublicEventsForRepoNetworkParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const activityListPublicEventsForRepoNetworkQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "activityListPublicEventsForRepoNetwork",
    "/networks/:owner/:repo/events",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListPublicEventsForRepoNetworkParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListPublicEventsForRepoNetworkQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityListPublicEventsForRepoNetwork(
          input,
          activityListPublicEventsForRepoNetworkResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListPublicEventsForRepoNetworkResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const activityListNotificationsForAuthenticatedUserQuerySchema = z.object({
    all: PermissiveBoolean.optional().default(false),
    participating: PermissiveBoolean.optional().default(false),
    since: z.string().datetime({ offset: true }).optional(),
    before: z.string().datetime({ offset: true }).optional(),
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(50),
  })

  router.get(
    "activityListNotificationsForAuthenticatedUser",
    "/notifications",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          activityListNotificationsForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityListNotificationsForAuthenticatedUser(
          input,
          activityListNotificationsForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListNotificationsForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const activityMarkNotificationsAsReadBodySchema = z
    .object({
      last_read_at: z.string().datetime({ offset: true }).optional(),
      read: PermissiveBoolean.optional(),
    })
    .optional()

  router.put(
    "activityMarkNotificationsAsRead",
    "/notifications",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          activityMarkNotificationsAsReadBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .activityMarkNotificationsAsRead(
          input,
          activityMarkNotificationsAsReadResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityMarkNotificationsAsReadResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityGetThreadParamSchema = z.object({
    thread_id: z.coerce.number(),
  })

  router.get(
    "activityGetThread",
    "/notifications/threads/:thread_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityGetThreadParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityGetThread(input, activityGetThreadResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityGetThreadResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityMarkThreadAsReadParamSchema = z.object({
    thread_id: z.coerce.number(),
  })

  router.patch(
    "activityMarkThreadAsRead",
    "/notifications/threads/:thread_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityMarkThreadAsReadParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityMarkThreadAsRead(input, activityMarkThreadAsReadResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityMarkThreadAsReadResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityMarkThreadAsDoneParamSchema = z.object({
    thread_id: z.coerce.number(),
  })

  router.delete(
    "activityMarkThreadAsDone",
    "/notifications/threads/:thread_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityMarkThreadAsDoneParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityMarkThreadAsDone(input, activityMarkThreadAsDoneResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityMarkThreadAsDoneResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityGetThreadSubscriptionForAuthenticatedUserParamSchema = z.object(
    { thread_id: z.coerce.number() },
  )

  router.get(
    "activityGetThreadSubscriptionForAuthenticatedUser",
    "/notifications/threads/:thread_id/subscription",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityGetThreadSubscriptionForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityGetThreadSubscriptionForAuthenticatedUser(
          input,
          activityGetThreadSubscriptionForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        activityGetThreadSubscriptionForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const activitySetThreadSubscriptionParamSchema = z.object({
    thread_id: z.coerce.number(),
  })

  const activitySetThreadSubscriptionBodySchema = z
    .object({ ignored: PermissiveBoolean.optional().default(false) })
    .optional()

  router.put(
    "activitySetThreadSubscription",
    "/notifications/threads/:thread_id/subscription",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activitySetThreadSubscriptionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          activitySetThreadSubscriptionBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .activitySetThreadSubscription(
          input,
          activitySetThreadSubscriptionResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activitySetThreadSubscriptionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityDeleteThreadSubscriptionParamSchema = z.object({
    thread_id: z.coerce.number(),
  })

  router.delete(
    "activityDeleteThreadSubscription",
    "/notifications/threads/:thread_id/subscription",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityDeleteThreadSubscriptionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityDeleteThreadSubscription(
          input,
          activityDeleteThreadSubscriptionResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityDeleteThreadSubscriptionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const metaGetOctocatQuerySchema = z.object({ s: z.string().optional() })

  router.get("metaGetOctocat", "/octocat", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        metaGetOctocatQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .metaGetOctocat(input, metaGetOctocatResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = metaGetOctocatResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const orgsListQuerySchema = z.object({
    since: z.coerce.number().optional(),
    per_page: z.coerce.number().optional().default(30),
  })

  router.get("orgsList", "/organizations", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        orgsListQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .orgsList(input, orgsListResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = orgsListResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const billingGetGithubBillingUsageReportOrgParamSchema = z.object({
    org: z.string(),
  })

  const billingGetGithubBillingUsageReportOrgQuerySchema = z.object({
    year: z.coerce.number().optional(),
    month: z.coerce.number().optional(),
    day: z.coerce.number().optional(),
    hour: z.coerce.number().optional(),
  })

  router.get(
    "billingGetGithubBillingUsageReportOrg",
    "/organizations/:org/settings/billing/usage",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          billingGetGithubBillingUsageReportOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          billingGetGithubBillingUsageReportOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .billingGetGithubBillingUsageReportOrg(
          input,
          billingGetGithubBillingUsageReportOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = billingGetGithubBillingUsageReportOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsGetParamSchema = z.object({ org: z.string() })

  router.get("orgsGet", "/orgs/:org", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        orgsGetParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .orgsGet(input, orgsGetResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = orgsGetResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const orgsUpdateParamSchema = z.object({ org: z.string() })

  const orgsUpdateBodySchema = z
    .object({
      billing_email: z.string().optional(),
      company: z.string().optional(),
      email: z.string().optional(),
      twitter_username: z.string().optional(),
      location: z.string().optional(),
      name: z.string().optional(),
      description: z.string().optional(),
      has_organization_projects: PermissiveBoolean.optional(),
      has_repository_projects: PermissiveBoolean.optional(),
      default_repository_permission: z
        .enum(["read", "write", "admin", "none"])
        .optional()
        .default("read"),
      members_can_create_repositories:
        PermissiveBoolean.optional().default(true),
      members_can_create_internal_repositories: PermissiveBoolean.optional(),
      members_can_create_private_repositories: PermissiveBoolean.optional(),
      members_can_create_public_repositories: PermissiveBoolean.optional(),
      members_allowed_repository_creation_type: z
        .enum(["all", "private", "none"])
        .optional(),
      members_can_create_pages: PermissiveBoolean.optional().default(true),
      members_can_create_public_pages:
        PermissiveBoolean.optional().default(true),
      members_can_create_private_pages:
        PermissiveBoolean.optional().default(true),
      members_can_fork_private_repositories:
        PermissiveBoolean.optional().default(false),
      web_commit_signoff_required: PermissiveBoolean.optional().default(false),
      blog: z.string().optional(),
      advanced_security_enabled_for_new_repositories:
        PermissiveBoolean.optional(),
      dependabot_alerts_enabled_for_new_repositories:
        PermissiveBoolean.optional(),
      dependabot_security_updates_enabled_for_new_repositories:
        PermissiveBoolean.optional(),
      dependency_graph_enabled_for_new_repositories:
        PermissiveBoolean.optional(),
      secret_scanning_enabled_for_new_repositories:
        PermissiveBoolean.optional(),
      secret_scanning_push_protection_enabled_for_new_repositories:
        PermissiveBoolean.optional(),
      secret_scanning_push_protection_custom_link_enabled:
        PermissiveBoolean.optional(),
      secret_scanning_push_protection_custom_link: z.string().optional(),
      deploy_keys_enabled_for_repositories: PermissiveBoolean.optional(),
    })
    .optional()

  router.patch("orgsUpdate", "/orgs/:org", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        orgsUpdateParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        orgsUpdateBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const response = await implementation
      .orgsUpdate(input, orgsUpdateResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = orgsUpdateResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const orgsDeleteParamSchema = z.object({ org: z.string() })

  router.delete("orgsDelete", "/orgs/:org", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        orgsDeleteParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .orgsDelete(input, orgsDeleteResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = orgsDeleteResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const actionsGetActionsCacheUsageForOrgParamSchema = z.object({
    org: z.string(),
  })

  router.get(
    "actionsGetActionsCacheUsageForOrg",
    "/orgs/:org/actions/cache/usage",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetActionsCacheUsageForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetActionsCacheUsageForOrg(
          input,
          actionsGetActionsCacheUsageForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetActionsCacheUsageForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsGetActionsCacheUsageByRepoForOrgParamSchema = z.object({
    org: z.string(),
  })

  const actionsGetActionsCacheUsageByRepoForOrgQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "actionsGetActionsCacheUsageByRepoForOrg",
    "/orgs/:org/actions/cache/usage-by-repository",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetActionsCacheUsageByRepoForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsGetActionsCacheUsageByRepoForOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetActionsCacheUsageByRepoForOrg(
          input,
          actionsGetActionsCacheUsageByRepoForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetActionsCacheUsageByRepoForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsListHostedRunnersForOrgParamSchema = z.object({
    org: z.string(),
  })

  const actionsListHostedRunnersForOrgQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "actionsListHostedRunnersForOrg",
    "/orgs/:org/actions/hosted-runners",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListHostedRunnersForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListHostedRunnersForOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListHostedRunnersForOrg(
          input,
          actionsListHostedRunnersForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListHostedRunnersForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsCreateHostedRunnerForOrgParamSchema = z.object({
    org: z.string(),
  })

  const actionsCreateHostedRunnerForOrgBodySchema = z.object({
    name: z.string(),
    image: z.object({
      id: z.string().optional(),
      source: z.enum(["github", "partner", "custom"]).optional(),
    }),
    size: z.string(),
    runner_group_id: z.coerce.number(),
    maximum_runners: z.coerce.number().optional(),
    enable_static_ip: PermissiveBoolean.optional(),
  })

  router.post(
    "actionsCreateHostedRunnerForOrg",
    "/orgs/:org/actions/hosted-runners",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCreateHostedRunnerForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsCreateHostedRunnerForOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsCreateHostedRunnerForOrg(
          input,
          actionsCreateHostedRunnerForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCreateHostedRunnerForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetHostedRunnersGithubOwnedImagesForOrgParamSchema = z.object({
    org: z.string(),
  })

  router.get(
    "actionsGetHostedRunnersGithubOwnedImagesForOrg",
    "/orgs/:org/actions/hosted-runners/images/github-owned",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetHostedRunnersGithubOwnedImagesForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetHostedRunnersGithubOwnedImagesForOrg(
          input,
          actionsGetHostedRunnersGithubOwnedImagesForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsGetHostedRunnersGithubOwnedImagesForOrgResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsGetHostedRunnersPartnerImagesForOrgParamSchema = z.object({
    org: z.string(),
  })

  router.get(
    "actionsGetHostedRunnersPartnerImagesForOrg",
    "/orgs/:org/actions/hosted-runners/images/partner",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetHostedRunnersPartnerImagesForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetHostedRunnersPartnerImagesForOrg(
          input,
          actionsGetHostedRunnersPartnerImagesForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetHostedRunnersPartnerImagesForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsGetHostedRunnersLimitsForOrgParamSchema = z.object({
    org: z.string(),
  })

  router.get(
    "actionsGetHostedRunnersLimitsForOrg",
    "/orgs/:org/actions/hosted-runners/limits",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetHostedRunnersLimitsForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetHostedRunnersLimitsForOrg(
          input,
          actionsGetHostedRunnersLimitsForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetHostedRunnersLimitsForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsGetHostedRunnersMachineSpecsForOrgParamSchema = z.object({
    org: z.string(),
  })

  router.get(
    "actionsGetHostedRunnersMachineSpecsForOrg",
    "/orgs/:org/actions/hosted-runners/machine-sizes",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetHostedRunnersMachineSpecsForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetHostedRunnersMachineSpecsForOrg(
          input,
          actionsGetHostedRunnersMachineSpecsForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetHostedRunnersMachineSpecsForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsGetHostedRunnersPlatformsForOrgParamSchema = z.object({
    org: z.string(),
  })

  router.get(
    "actionsGetHostedRunnersPlatformsForOrg",
    "/orgs/:org/actions/hosted-runners/platforms",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetHostedRunnersPlatformsForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetHostedRunnersPlatformsForOrg(
          input,
          actionsGetHostedRunnersPlatformsForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetHostedRunnersPlatformsForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsGetHostedRunnerForOrgParamSchema = z.object({
    org: z.string(),
    hosted_runner_id: z.coerce.number(),
  })

  router.get(
    "actionsGetHostedRunnerForOrg",
    "/orgs/:org/actions/hosted-runners/:hosted_runner_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetHostedRunnerForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetHostedRunnerForOrg(
          input,
          actionsGetHostedRunnerForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetHostedRunnerForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsUpdateHostedRunnerForOrgParamSchema = z.object({
    org: z.string(),
    hosted_runner_id: z.coerce.number(),
  })

  const actionsUpdateHostedRunnerForOrgBodySchema = z.object({
    name: z.string().optional(),
    runner_group_id: z.coerce.number().optional(),
    maximum_runners: z.coerce.number().optional(),
    enable_static_ip: PermissiveBoolean.optional(),
  })

  router.patch(
    "actionsUpdateHostedRunnerForOrg",
    "/orgs/:org/actions/hosted-runners/:hosted_runner_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsUpdateHostedRunnerForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsUpdateHostedRunnerForOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsUpdateHostedRunnerForOrg(
          input,
          actionsUpdateHostedRunnerForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsUpdateHostedRunnerForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteHostedRunnerForOrgParamSchema = z.object({
    org: z.string(),
    hosted_runner_id: z.coerce.number(),
  })

  router.delete(
    "actionsDeleteHostedRunnerForOrg",
    "/orgs/:org/actions/hosted-runners/:hosted_runner_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteHostedRunnerForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsDeleteHostedRunnerForOrg(
          input,
          actionsDeleteHostedRunnerForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteHostedRunnerForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const oidcGetOidcCustomSubTemplateForOrgParamSchema = z.object({
    org: z.string(),
  })

  router.get(
    "oidcGetOidcCustomSubTemplateForOrg",
    "/orgs/:org/actions/oidc/customization/sub",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          oidcGetOidcCustomSubTemplateForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .oidcGetOidcCustomSubTemplateForOrg(
          input,
          oidcGetOidcCustomSubTemplateForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = oidcGetOidcCustomSubTemplateForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const oidcUpdateOidcCustomSubTemplateForOrgParamSchema = z.object({
    org: z.string(),
  })

  const oidcUpdateOidcCustomSubTemplateForOrgBodySchema = s_oidc_custom_sub

  router.put(
    "oidcUpdateOidcCustomSubTemplateForOrg",
    "/orgs/:org/actions/oidc/customization/sub",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          oidcUpdateOidcCustomSubTemplateForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          oidcUpdateOidcCustomSubTemplateForOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .oidcUpdateOidcCustomSubTemplateForOrg(
          input,
          oidcUpdateOidcCustomSubTemplateForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = oidcUpdateOidcCustomSubTemplateForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsGetGithubActionsPermissionsOrganizationParamSchema = z.object({
    org: z.string(),
  })

  router.get(
    "actionsGetGithubActionsPermissionsOrganization",
    "/orgs/:org/actions/permissions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetGithubActionsPermissionsOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetGithubActionsPermissionsOrganization(
          input,
          actionsGetGithubActionsPermissionsOrganizationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsGetGithubActionsPermissionsOrganizationResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsSetGithubActionsPermissionsOrganizationParamSchema = z.object({
    org: z.string(),
  })

  const actionsSetGithubActionsPermissionsOrganizationBodySchema = z.object({
    enabled_repositories: s_enabled_repositories,
    allowed_actions: s_allowed_actions.optional(),
  })

  router.put(
    "actionsSetGithubActionsPermissionsOrganization",
    "/orgs/:org/actions/permissions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetGithubActionsPermissionsOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetGithubActionsPermissionsOrganizationBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsSetGithubActionsPermissionsOrganization(
          input,
          actionsSetGithubActionsPermissionsOrganizationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsSetGithubActionsPermissionsOrganizationResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsListSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema =
    z.object({ org: z.string() })

  const actionsListSelectedRepositoriesEnabledGithubActionsOrganizationQuerySchema =
    z.object({
      per_page: z.coerce.number().optional().default(30),
      page: z.coerce.number().optional().default(1),
    })

  router.get(
    "actionsListSelectedRepositoriesEnabledGithubActionsOrganization",
    "/orgs/:org/actions/permissions/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListSelectedRepositoriesEnabledGithubActionsOrganizationQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListSelectedRepositoriesEnabledGithubActionsOrganization(
          input,
          actionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema =
    z.object({ org: z.string() })

  const actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationBodySchema =
    z.object({ selected_repository_ids: z.array(z.coerce.number()) })

  router.put(
    "actionsSetSelectedRepositoriesEnabledGithubActionsOrganization",
    "/orgs/:org/actions/permissions/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsSetSelectedRepositoriesEnabledGithubActionsOrganization(
          input,
          actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsEnableSelectedRepositoryGithubActionsOrganizationParamSchema =
    z.object({ org: z.string(), repository_id: z.coerce.number() })

  router.put(
    "actionsEnableSelectedRepositoryGithubActionsOrganization",
    "/orgs/:org/actions/permissions/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsEnableSelectedRepositoryGithubActionsOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsEnableSelectedRepositoryGithubActionsOrganization(
          input,
          actionsEnableSelectedRepositoryGithubActionsOrganizationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsEnableSelectedRepositoryGithubActionsOrganizationResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsDisableSelectedRepositoryGithubActionsOrganizationParamSchema =
    z.object({ org: z.string(), repository_id: z.coerce.number() })

  router.delete(
    "actionsDisableSelectedRepositoryGithubActionsOrganization",
    "/orgs/:org/actions/permissions/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDisableSelectedRepositoryGithubActionsOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsDisableSelectedRepositoryGithubActionsOrganization(
          input,
          actionsDisableSelectedRepositoryGithubActionsOrganizationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsDisableSelectedRepositoryGithubActionsOrganizationResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsGetAllowedActionsOrganizationParamSchema = z.object({
    org: z.string(),
  })

  router.get(
    "actionsGetAllowedActionsOrganization",
    "/orgs/:org/actions/permissions/selected-actions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetAllowedActionsOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetAllowedActionsOrganization(
          input,
          actionsGetAllowedActionsOrganizationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetAllowedActionsOrganizationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsSetAllowedActionsOrganizationParamSchema = z.object({
    org: z.string(),
  })

  const actionsSetAllowedActionsOrganizationBodySchema =
    s_selected_actions.optional()

  router.put(
    "actionsSetAllowedActionsOrganization",
    "/orgs/:org/actions/permissions/selected-actions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetAllowedActionsOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetAllowedActionsOrganizationBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsSetAllowedActionsOrganization(
          input,
          actionsSetAllowedActionsOrganizationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsSetAllowedActionsOrganizationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema =
    z.object({ org: z.string() })

  router.get(
    "actionsGetGithubActionsDefaultWorkflowPermissionsOrganization",
    "/orgs/:org/actions/permissions/workflow",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetGithubActionsDefaultWorkflowPermissionsOrganization(
          input,
          actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema =
    z.object({ org: z.string() })

  const actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationBodySchema =
    s_actions_set_default_workflow_permissions.optional()

  router.put(
    "actionsSetGithubActionsDefaultWorkflowPermissionsOrganization",
    "/orgs/:org/actions/permissions/workflow",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsSetGithubActionsDefaultWorkflowPermissionsOrganization(
          input,
          actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsListSelfHostedRunnerGroupsForOrgParamSchema = z.object({
    org: z.string(),
  })

  const actionsListSelfHostedRunnerGroupsForOrgQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
    visible_to_repository: z.string().optional(),
  })

  router.get(
    "actionsListSelfHostedRunnerGroupsForOrg",
    "/orgs/:org/actions/runner-groups",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListSelfHostedRunnerGroupsForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListSelfHostedRunnerGroupsForOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListSelfHostedRunnerGroupsForOrg(
          input,
          actionsListSelfHostedRunnerGroupsForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListSelfHostedRunnerGroupsForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsCreateSelfHostedRunnerGroupForOrgParamSchema = z.object({
    org: z.string(),
  })

  const actionsCreateSelfHostedRunnerGroupForOrgBodySchema = z.object({
    name: z.string(),
    visibility: z
      .enum(["selected", "all", "private"])
      .optional()
      .default("all"),
    selected_repository_ids: z.array(z.coerce.number()).optional(),
    runners: z.array(z.coerce.number()).optional(),
    allows_public_repositories: PermissiveBoolean.optional().default(false),
    restricted_to_workflows: PermissiveBoolean.optional().default(false),
    selected_workflows: z.array(z.string()).optional(),
    network_configuration_id: z.string().optional(),
  })

  router.post(
    "actionsCreateSelfHostedRunnerGroupForOrg",
    "/orgs/:org/actions/runner-groups",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCreateSelfHostedRunnerGroupForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsCreateSelfHostedRunnerGroupForOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsCreateSelfHostedRunnerGroupForOrg(
          input,
          actionsCreateSelfHostedRunnerGroupForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCreateSelfHostedRunnerGroupForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsGetSelfHostedRunnerGroupForOrgParamSchema = z.object({
    org: z.string(),
    runner_group_id: z.coerce.number(),
  })

  router.get(
    "actionsGetSelfHostedRunnerGroupForOrg",
    "/orgs/:org/actions/runner-groups/:runner_group_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetSelfHostedRunnerGroupForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetSelfHostedRunnerGroupForOrg(
          input,
          actionsGetSelfHostedRunnerGroupForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetSelfHostedRunnerGroupForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsUpdateSelfHostedRunnerGroupForOrgParamSchema = z.object({
    org: z.string(),
    runner_group_id: z.coerce.number(),
  })

  const actionsUpdateSelfHostedRunnerGroupForOrgBodySchema = z.object({
    name: z.string(),
    visibility: z.enum(["selected", "all", "private"]).optional(),
    allows_public_repositories: PermissiveBoolean.optional().default(false),
    restricted_to_workflows: PermissiveBoolean.optional().default(false),
    selected_workflows: z.array(z.string()).optional(),
    network_configuration_id: z.string().nullable().optional(),
  })

  router.patch(
    "actionsUpdateSelfHostedRunnerGroupForOrg",
    "/orgs/:org/actions/runner-groups/:runner_group_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsUpdateSelfHostedRunnerGroupForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsUpdateSelfHostedRunnerGroupForOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsUpdateSelfHostedRunnerGroupForOrg(
          input,
          actionsUpdateSelfHostedRunnerGroupForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsUpdateSelfHostedRunnerGroupForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteSelfHostedRunnerGroupFromOrgParamSchema = z.object({
    org: z.string(),
    runner_group_id: z.coerce.number(),
  })

  router.delete(
    "actionsDeleteSelfHostedRunnerGroupFromOrg",
    "/orgs/:org/actions/runner-groups/:runner_group_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteSelfHostedRunnerGroupFromOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsDeleteSelfHostedRunnerGroupFromOrg(
          input,
          actionsDeleteSelfHostedRunnerGroupFromOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteSelfHostedRunnerGroupFromOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsListGithubHostedRunnersInGroupForOrgParamSchema = z.object({
    org: z.string(),
    runner_group_id: z.coerce.number(),
  })

  const actionsListGithubHostedRunnersInGroupForOrgQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "actionsListGithubHostedRunnersInGroupForOrg",
    "/orgs/:org/actions/runner-groups/:runner_group_id/hosted-runners",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListGithubHostedRunnersInGroupForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListGithubHostedRunnersInGroupForOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListGithubHostedRunnersInGroupForOrg(
          input,
          actionsListGithubHostedRunnersInGroupForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListGithubHostedRunnersInGroupForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsListRepoAccessToSelfHostedRunnerGroupInOrgParamSchema = z.object(
    { org: z.string(), runner_group_id: z.coerce.number() },
  )

  const actionsListRepoAccessToSelfHostedRunnerGroupInOrgQuerySchema = z.object(
    {
      page: z.coerce.number().optional().default(1),
      per_page: z.coerce.number().optional().default(30),
    },
  )

  router.get(
    "actionsListRepoAccessToSelfHostedRunnerGroupInOrg",
    "/orgs/:org/actions/runner-groups/:runner_group_id/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListRepoAccessToSelfHostedRunnerGroupInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListRepoAccessToSelfHostedRunnerGroupInOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListRepoAccessToSelfHostedRunnerGroupInOrg(
          input,
          actionsListRepoAccessToSelfHostedRunnerGroupInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsListRepoAccessToSelfHostedRunnerGroupInOrgResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsSetRepoAccessToSelfHostedRunnerGroupInOrgParamSchema = z.object({
    org: z.string(),
    runner_group_id: z.coerce.number(),
  })

  const actionsSetRepoAccessToSelfHostedRunnerGroupInOrgBodySchema = z.object({
    selected_repository_ids: z.array(z.coerce.number()),
  })

  router.put(
    "actionsSetRepoAccessToSelfHostedRunnerGroupInOrg",
    "/orgs/:org/actions/runner-groups/:runner_group_id/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetRepoAccessToSelfHostedRunnerGroupInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetRepoAccessToSelfHostedRunnerGroupInOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsSetRepoAccessToSelfHostedRunnerGroupInOrg(
          input,
          actionsSetRepoAccessToSelfHostedRunnerGroupInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsSetRepoAccessToSelfHostedRunnerGroupInOrgResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsAddRepoAccessToSelfHostedRunnerGroupInOrgParamSchema = z.object({
    org: z.string(),
    runner_group_id: z.coerce.number(),
    repository_id: z.coerce.number(),
  })

  router.put(
    "actionsAddRepoAccessToSelfHostedRunnerGroupInOrg",
    "/orgs/:org/actions/runner-groups/:runner_group_id/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsAddRepoAccessToSelfHostedRunnerGroupInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsAddRepoAccessToSelfHostedRunnerGroupInOrg(
          input,
          actionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgParamSchema =
    z.object({
      org: z.string(),
      runner_group_id: z.coerce.number(),
      repository_id: z.coerce.number(),
    })

  router.delete(
    "actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg",
    "/orgs/:org/actions/runner-groups/:runner_group_id/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg(
          input,
          actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsListSelfHostedRunnersInGroupForOrgParamSchema = z.object({
    org: z.string(),
    runner_group_id: z.coerce.number(),
  })

  const actionsListSelfHostedRunnersInGroupForOrgQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "actionsListSelfHostedRunnersInGroupForOrg",
    "/orgs/:org/actions/runner-groups/:runner_group_id/runners",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListSelfHostedRunnersInGroupForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListSelfHostedRunnersInGroupForOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListSelfHostedRunnersInGroupForOrg(
          input,
          actionsListSelfHostedRunnersInGroupForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListSelfHostedRunnersInGroupForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsSetSelfHostedRunnersInGroupForOrgParamSchema = z.object({
    org: z.string(),
    runner_group_id: z.coerce.number(),
  })

  const actionsSetSelfHostedRunnersInGroupForOrgBodySchema = z.object({
    runners: z.array(z.coerce.number()),
  })

  router.put(
    "actionsSetSelfHostedRunnersInGroupForOrg",
    "/orgs/:org/actions/runner-groups/:runner_group_id/runners",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetSelfHostedRunnersInGroupForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetSelfHostedRunnersInGroupForOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsSetSelfHostedRunnersInGroupForOrg(
          input,
          actionsSetSelfHostedRunnersInGroupForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsSetSelfHostedRunnersInGroupForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsAddSelfHostedRunnerToGroupForOrgParamSchema = z.object({
    org: z.string(),
    runner_group_id: z.coerce.number(),
    runner_id: z.coerce.number(),
  })

  router.put(
    "actionsAddSelfHostedRunnerToGroupForOrg",
    "/orgs/:org/actions/runner-groups/:runner_group_id/runners/:runner_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsAddSelfHostedRunnerToGroupForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsAddSelfHostedRunnerToGroupForOrg(
          input,
          actionsAddSelfHostedRunnerToGroupForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsAddSelfHostedRunnerToGroupForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsRemoveSelfHostedRunnerFromGroupForOrgParamSchema = z.object({
    org: z.string(),
    runner_group_id: z.coerce.number(),
    runner_id: z.coerce.number(),
  })

  router.delete(
    "actionsRemoveSelfHostedRunnerFromGroupForOrg",
    "/orgs/:org/actions/runner-groups/:runner_group_id/runners/:runner_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsRemoveSelfHostedRunnerFromGroupForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsRemoveSelfHostedRunnerFromGroupForOrg(
          input,
          actionsRemoveSelfHostedRunnerFromGroupForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsRemoveSelfHostedRunnerFromGroupForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsListSelfHostedRunnersForOrgParamSchema = z.object({
    org: z.string(),
  })

  const actionsListSelfHostedRunnersForOrgQuerySchema = z.object({
    name: z.string().optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "actionsListSelfHostedRunnersForOrg",
    "/orgs/:org/actions/runners",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListSelfHostedRunnersForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListSelfHostedRunnersForOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListSelfHostedRunnersForOrg(
          input,
          actionsListSelfHostedRunnersForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListSelfHostedRunnersForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsListRunnerApplicationsForOrgParamSchema = z.object({
    org: z.string(),
  })

  router.get(
    "actionsListRunnerApplicationsForOrg",
    "/orgs/:org/actions/runners/downloads",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListRunnerApplicationsForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListRunnerApplicationsForOrg(
          input,
          actionsListRunnerApplicationsForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListRunnerApplicationsForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsGenerateRunnerJitconfigForOrgParamSchema = z.object({
    org: z.string(),
  })

  const actionsGenerateRunnerJitconfigForOrgBodySchema = z.object({
    name: z.string(),
    runner_group_id: z.coerce.number(),
    labels: z.array(z.string()).min(1).max(100),
    work_folder: z.string().optional().default("_work"),
  })

  router.post(
    "actionsGenerateRunnerJitconfigForOrg",
    "/orgs/:org/actions/runners/generate-jitconfig",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGenerateRunnerJitconfigForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsGenerateRunnerJitconfigForOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsGenerateRunnerJitconfigForOrg(
          input,
          actionsGenerateRunnerJitconfigForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGenerateRunnerJitconfigForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsCreateRegistrationTokenForOrgParamSchema = z.object({
    org: z.string(),
  })

  router.post(
    "actionsCreateRegistrationTokenForOrg",
    "/orgs/:org/actions/runners/registration-token",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCreateRegistrationTokenForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsCreateRegistrationTokenForOrg(
          input,
          actionsCreateRegistrationTokenForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCreateRegistrationTokenForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsCreateRemoveTokenForOrgParamSchema = z.object({
    org: z.string(),
  })

  router.post(
    "actionsCreateRemoveTokenForOrg",
    "/orgs/:org/actions/runners/remove-token",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCreateRemoveTokenForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsCreateRemoveTokenForOrg(
          input,
          actionsCreateRemoveTokenForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCreateRemoveTokenForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetSelfHostedRunnerForOrgParamSchema = z.object({
    org: z.string(),
    runner_id: z.coerce.number(),
  })

  router.get(
    "actionsGetSelfHostedRunnerForOrg",
    "/orgs/:org/actions/runners/:runner_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetSelfHostedRunnerForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetSelfHostedRunnerForOrg(
          input,
          actionsGetSelfHostedRunnerForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetSelfHostedRunnerForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteSelfHostedRunnerFromOrgParamSchema = z.object({
    org: z.string(),
    runner_id: z.coerce.number(),
  })

  router.delete(
    "actionsDeleteSelfHostedRunnerFromOrg",
    "/orgs/:org/actions/runners/:runner_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteSelfHostedRunnerFromOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsDeleteSelfHostedRunnerFromOrg(
          input,
          actionsDeleteSelfHostedRunnerFromOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteSelfHostedRunnerFromOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsListLabelsForSelfHostedRunnerForOrgParamSchema = z.object({
    org: z.string(),
    runner_id: z.coerce.number(),
  })

  router.get(
    "actionsListLabelsForSelfHostedRunnerForOrg",
    "/orgs/:org/actions/runners/:runner_id/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListLabelsForSelfHostedRunnerForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListLabelsForSelfHostedRunnerForOrg(
          input,
          actionsListLabelsForSelfHostedRunnerForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListLabelsForSelfHostedRunnerForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsAddCustomLabelsToSelfHostedRunnerForOrgParamSchema = z.object({
    org: z.string(),
    runner_id: z.coerce.number(),
  })

  const actionsAddCustomLabelsToSelfHostedRunnerForOrgBodySchema = z.object({
    labels: z.array(z.string()).min(1).max(100),
  })

  router.post(
    "actionsAddCustomLabelsToSelfHostedRunnerForOrg",
    "/orgs/:org/actions/runners/:runner_id/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsAddCustomLabelsToSelfHostedRunnerForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsAddCustomLabelsToSelfHostedRunnerForOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsAddCustomLabelsToSelfHostedRunnerForOrg(
          input,
          actionsAddCustomLabelsToSelfHostedRunnerForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsAddCustomLabelsToSelfHostedRunnerForOrgResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsSetCustomLabelsForSelfHostedRunnerForOrgParamSchema = z.object({
    org: z.string(),
    runner_id: z.coerce.number(),
  })

  const actionsSetCustomLabelsForSelfHostedRunnerForOrgBodySchema = z.object({
    labels: z.array(z.string()).min(0).max(100),
  })

  router.put(
    "actionsSetCustomLabelsForSelfHostedRunnerForOrg",
    "/orgs/:org/actions/runners/:runner_id/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetCustomLabelsForSelfHostedRunnerForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetCustomLabelsForSelfHostedRunnerForOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsSetCustomLabelsForSelfHostedRunnerForOrg(
          input,
          actionsSetCustomLabelsForSelfHostedRunnerForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsSetCustomLabelsForSelfHostedRunnerForOrgResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgParamSchema =
    z.object({ org: z.string(), runner_id: z.coerce.number() })

  router.delete(
    "actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg",
    "/orgs/:org/actions/runners/:runner_id/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg(
          input,
          actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsRemoveCustomLabelFromSelfHostedRunnerForOrgParamSchema =
    z.object({
      org: z.string(),
      runner_id: z.coerce.number(),
      name: z.string(),
    })

  router.delete(
    "actionsRemoveCustomLabelFromSelfHostedRunnerForOrg",
    "/orgs/:org/actions/runners/:runner_id/labels/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsRemoveCustomLabelFromSelfHostedRunnerForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsRemoveCustomLabelFromSelfHostedRunnerForOrg(
          input,
          actionsRemoveCustomLabelFromSelfHostedRunnerForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsRemoveCustomLabelFromSelfHostedRunnerForOrgResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsListOrgSecretsParamSchema = z.object({ org: z.string() })

  const actionsListOrgSecretsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "actionsListOrgSecrets",
    "/orgs/:org/actions/secrets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListOrgSecretsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListOrgSecretsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListOrgSecrets(input, actionsListOrgSecretsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListOrgSecretsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetOrgPublicKeyParamSchema = z.object({ org: z.string() })

  router.get(
    "actionsGetOrgPublicKey",
    "/orgs/:org/actions/secrets/public-key",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetOrgPublicKeyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetOrgPublicKey(input, actionsGetOrgPublicKeyResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetOrgPublicKeyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  router.get(
    "actionsGetOrgSecret",
    "/orgs/:org/actions/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetOrgSecret(input, actionsGetOrgSecretResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetOrgSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsCreateOrUpdateOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const actionsCreateOrUpdateOrgSecretBodySchema = z.object({
    encrypted_value: z
      .string()
      .regex(
        new RegExp(
          "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$",
        ),
      ),
    key_id: z.string(),
    visibility: z.enum(["all", "private", "selected"]),
    selected_repository_ids: z.array(z.coerce.number()).optional(),
  })

  router.put(
    "actionsCreateOrUpdateOrgSecret",
    "/orgs/:org/actions/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCreateOrUpdateOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsCreateOrUpdateOrgSecretBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsCreateOrUpdateOrgSecret(
          input,
          actionsCreateOrUpdateOrgSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCreateOrUpdateOrgSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  router.delete(
    "actionsDeleteOrgSecret",
    "/orgs/:org/actions/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsDeleteOrgSecret(input, actionsDeleteOrgSecretResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteOrgSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsListSelectedReposForOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const actionsListSelectedReposForOrgSecretQuerySchema = z.object({
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
  })

  router.get(
    "actionsListSelectedReposForOrgSecret",
    "/orgs/:org/actions/secrets/:secret_name/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListSelectedReposForOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListSelectedReposForOrgSecretQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListSelectedReposForOrgSecret(
          input,
          actionsListSelectedReposForOrgSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListSelectedReposForOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsSetSelectedReposForOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const actionsSetSelectedReposForOrgSecretBodySchema = z.object({
    selected_repository_ids: z.array(z.coerce.number()),
  })

  router.put(
    "actionsSetSelectedReposForOrgSecret",
    "/orgs/:org/actions/secrets/:secret_name/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetSelectedReposForOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetSelectedReposForOrgSecretBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsSetSelectedReposForOrgSecret(
          input,
          actionsSetSelectedReposForOrgSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsSetSelectedReposForOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsAddSelectedRepoToOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
    repository_id: z.coerce.number(),
  })

  router.put(
    "actionsAddSelectedRepoToOrgSecret",
    "/orgs/:org/actions/secrets/:secret_name/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsAddSelectedRepoToOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsAddSelectedRepoToOrgSecret(
          input,
          actionsAddSelectedRepoToOrgSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsAddSelectedRepoToOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsRemoveSelectedRepoFromOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
    repository_id: z.coerce.number(),
  })

  router.delete(
    "actionsRemoveSelectedRepoFromOrgSecret",
    "/orgs/:org/actions/secrets/:secret_name/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsRemoveSelectedRepoFromOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsRemoveSelectedRepoFromOrgSecret(
          input,
          actionsRemoveSelectedRepoFromOrgSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsRemoveSelectedRepoFromOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsListOrgVariablesParamSchema = z.object({ org: z.string() })

  const actionsListOrgVariablesQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(10),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "actionsListOrgVariables",
    "/orgs/:org/actions/variables",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListOrgVariablesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListOrgVariablesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListOrgVariables(input, actionsListOrgVariablesResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListOrgVariablesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsCreateOrgVariableParamSchema = z.object({ org: z.string() })

  const actionsCreateOrgVariableBodySchema = z.object({
    name: z.string(),
    value: z.string(),
    visibility: z.enum(["all", "private", "selected"]),
    selected_repository_ids: z.array(z.coerce.number()).optional(),
  })

  router.post(
    "actionsCreateOrgVariable",
    "/orgs/:org/actions/variables",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCreateOrgVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsCreateOrgVariableBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsCreateOrgVariable(input, actionsCreateOrgVariableResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCreateOrgVariableResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetOrgVariableParamSchema = z.object({
    org: z.string(),
    name: z.string(),
  })

  router.get(
    "actionsGetOrgVariable",
    "/orgs/:org/actions/variables/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetOrgVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetOrgVariable(input, actionsGetOrgVariableResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetOrgVariableResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsUpdateOrgVariableParamSchema = z.object({
    org: z.string(),
    name: z.string(),
  })

  const actionsUpdateOrgVariableBodySchema = z.object({
    name: z.string().optional(),
    value: z.string().optional(),
    visibility: z.enum(["all", "private", "selected"]).optional(),
    selected_repository_ids: z.array(z.coerce.number()).optional(),
  })

  router.patch(
    "actionsUpdateOrgVariable",
    "/orgs/:org/actions/variables/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsUpdateOrgVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsUpdateOrgVariableBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsUpdateOrgVariable(input, actionsUpdateOrgVariableResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsUpdateOrgVariableResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteOrgVariableParamSchema = z.object({
    org: z.string(),
    name: z.string(),
  })

  router.delete(
    "actionsDeleteOrgVariable",
    "/orgs/:org/actions/variables/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteOrgVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsDeleteOrgVariable(input, actionsDeleteOrgVariableResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteOrgVariableResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsListSelectedReposForOrgVariableParamSchema = z.object({
    org: z.string(),
    name: z.string(),
  })

  const actionsListSelectedReposForOrgVariableQuerySchema = z.object({
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
  })

  router.get(
    "actionsListSelectedReposForOrgVariable",
    "/orgs/:org/actions/variables/:name/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListSelectedReposForOrgVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListSelectedReposForOrgVariableQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListSelectedReposForOrgVariable(
          input,
          actionsListSelectedReposForOrgVariableResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListSelectedReposForOrgVariableResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsSetSelectedReposForOrgVariableParamSchema = z.object({
    org: z.string(),
    name: z.string(),
  })

  const actionsSetSelectedReposForOrgVariableBodySchema = z.object({
    selected_repository_ids: z.array(z.coerce.number()),
  })

  router.put(
    "actionsSetSelectedReposForOrgVariable",
    "/orgs/:org/actions/variables/:name/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetSelectedReposForOrgVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetSelectedReposForOrgVariableBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsSetSelectedReposForOrgVariable(
          input,
          actionsSetSelectedReposForOrgVariableResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsSetSelectedReposForOrgVariableResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsAddSelectedRepoToOrgVariableParamSchema = z.object({
    org: z.string(),
    name: z.string(),
    repository_id: z.coerce.number(),
  })

  router.put(
    "actionsAddSelectedRepoToOrgVariable",
    "/orgs/:org/actions/variables/:name/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsAddSelectedRepoToOrgVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsAddSelectedRepoToOrgVariable(
          input,
          actionsAddSelectedRepoToOrgVariableResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsAddSelectedRepoToOrgVariableResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsRemoveSelectedRepoFromOrgVariableParamSchema = z.object({
    org: z.string(),
    name: z.string(),
    repository_id: z.coerce.number(),
  })

  router.delete(
    "actionsRemoveSelectedRepoFromOrgVariable",
    "/orgs/:org/actions/variables/:name/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsRemoveSelectedRepoFromOrgVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsRemoveSelectedRepoFromOrgVariable(
          input,
          actionsRemoveSelectedRepoFromOrgVariableResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsRemoveSelectedRepoFromOrgVariableResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsListAttestationsParamSchema = z.object({
    org: z.string(),
    subject_digest: z.string(),
  })

  const orgsListAttestationsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    before: z.string().optional(),
    after: z.string().optional(),
    predicate_type: z.string().optional(),
  })

  router.get(
    "orgsListAttestations",
    "/orgs/:org/attestations/:subject_digest",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListAttestationsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListAttestationsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsListAttestations(input, orgsListAttestationsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListAttestationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListBlockedUsersParamSchema = z.object({ org: z.string() })

  const orgsListBlockedUsersQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get("orgsListBlockedUsers", "/orgs/:org/blocks", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        orgsListBlockedUsersParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: parseRequestInput(
        orgsListBlockedUsersQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .orgsListBlockedUsers(input, orgsListBlockedUsersResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = orgsListBlockedUsersResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const orgsCheckBlockedUserParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  router.get(
    "orgsCheckBlockedUser",
    "/orgs/:org/blocks/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsCheckBlockedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsCheckBlockedUser(input, orgsCheckBlockedUserResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsCheckBlockedUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsBlockUserParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  router.put(
    "orgsBlockUser",
    "/orgs/:org/blocks/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsBlockUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsBlockUser(input, orgsBlockUserResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsBlockUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsUnblockUserParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  router.delete(
    "orgsUnblockUser",
    "/orgs/:org/blocks/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsUnblockUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsUnblockUser(input, orgsUnblockUserResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsUnblockUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const campaignsListOrgCampaignsParamSchema = z.object({ org: z.string() })

  const campaignsListOrgCampaignsQuerySchema = z.object({
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    state: s_campaign_state.optional(),
    sort: z
      .enum(["created", "updated", "ends_at", "published"])
      .optional()
      .default("created"),
  })

  router.get(
    "campaignsListOrgCampaigns",
    "/orgs/:org/campaigns",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          campaignsListOrgCampaignsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          campaignsListOrgCampaignsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .campaignsListOrgCampaigns(
          input,
          campaignsListOrgCampaignsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = campaignsListOrgCampaignsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const campaignsCreateCampaignParamSchema = z.object({ org: z.string() })

  const campaignsCreateCampaignBodySchema = z.object({
    name: z.string().min(1).max(50),
    description: z.string().min(1).max(255),
    managers: z.array(z.string()).max(10).optional(),
    team_managers: z.array(z.string()).max(10).optional(),
    ends_at: z.string().datetime({ offset: true }),
    contact_link: z.string().nullable().optional(),
    code_scanning_alerts: z
      .array(
        z.object({
          repository_id: z.coerce.number(),
          alert_numbers: z.array(z.coerce.number()).min(1),
        }),
      )
      .min(1),
    generate_issues: PermissiveBoolean.optional().default(false),
  })

  router.post(
    "campaignsCreateCampaign",
    "/orgs/:org/campaigns",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          campaignsCreateCampaignParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          campaignsCreateCampaignBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .campaignsCreateCampaign(input, campaignsCreateCampaignResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = campaignsCreateCampaignResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const campaignsGetCampaignSummaryParamSchema = z.object({
    org: z.string(),
    campaign_number: z.coerce.number(),
  })

  router.get(
    "campaignsGetCampaignSummary",
    "/orgs/:org/campaigns/:campaign_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          campaignsGetCampaignSummaryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .campaignsGetCampaignSummary(
          input,
          campaignsGetCampaignSummaryResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = campaignsGetCampaignSummaryResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const campaignsUpdateCampaignParamSchema = z.object({
    org: z.string(),
    campaign_number: z.coerce.number(),
  })

  const campaignsUpdateCampaignBodySchema = z.object({
    name: z.string().min(1).max(50).optional(),
    description: z.string().min(1).max(255).optional(),
    managers: z.array(z.string()).max(10).optional(),
    team_managers: z.array(z.string()).max(10).optional(),
    ends_at: z.string().datetime({ offset: true }).optional(),
    contact_link: z.string().nullable().optional(),
    state: s_campaign_state.optional(),
  })

  router.patch(
    "campaignsUpdateCampaign",
    "/orgs/:org/campaigns/:campaign_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          campaignsUpdateCampaignParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          campaignsUpdateCampaignBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .campaignsUpdateCampaign(input, campaignsUpdateCampaignResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = campaignsUpdateCampaignResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const campaignsDeleteCampaignParamSchema = z.object({
    org: z.string(),
    campaign_number: z.coerce.number(),
  })

  router.delete(
    "campaignsDeleteCampaign",
    "/orgs/:org/campaigns/:campaign_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          campaignsDeleteCampaignParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .campaignsDeleteCampaign(input, campaignsDeleteCampaignResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = campaignsDeleteCampaignResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningListAlertsForOrgParamSchema = z.object({ org: z.string() })

  const codeScanningListAlertsForOrgQuerySchema = z.object({
    tool_name: s_code_scanning_analysis_tool_name.optional(),
    tool_guid: s_code_scanning_analysis_tool_guid.optional(),
    before: z.string().optional(),
    after: z.string().optional(),
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    state: s_code_scanning_alert_state_query.optional(),
    sort: z.enum(["created", "updated"]).optional().default("created"),
    severity: s_code_scanning_alert_severity.optional(),
  })

  router.get(
    "codeScanningListAlertsForOrg",
    "/orgs/:org/code-scanning/alerts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningListAlertsForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codeScanningListAlertsForOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeScanningListAlertsForOrg(
          input,
          codeScanningListAlertsForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningListAlertsForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeSecurityGetConfigurationsForOrgParamSchema = z.object({
    org: z.string(),
  })

  const codeSecurityGetConfigurationsForOrgQuerySchema = z.object({
    target_type: z.enum(["global", "all"]).optional().default("all"),
    per_page: z.coerce.number().optional().default(30),
    before: z.string().optional(),
    after: z.string().optional(),
  })

  router.get(
    "codeSecurityGetConfigurationsForOrg",
    "/orgs/:org/code-security/configurations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeSecurityGetConfigurationsForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codeSecurityGetConfigurationsForOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeSecurityGetConfigurationsForOrg(
          input,
          codeSecurityGetConfigurationsForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeSecurityGetConfigurationsForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codeSecurityCreateConfigurationParamSchema = z.object({
    org: z.string(),
  })

  const codeSecurityCreateConfigurationBodySchema = z.object({
    name: z.string(),
    description: z.string().max(255),
    advanced_security: z
      .enum(["enabled", "disabled", "code_security", "secret_protection"])
      .optional()
      .default("disabled"),
    dependency_graph: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("enabled"),
    dependency_graph_autosubmit_action: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    dependency_graph_autosubmit_action_options: z
      .object({ labeled_runners: PermissiveBoolean.optional().default(false) })
      .optional(),
    dependabot_alerts: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    dependabot_security_updates: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    code_scanning_default_setup: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    code_scanning_default_setup_options:
      s_code_scanning_default_setup_options.optional(),
    code_scanning_delegated_alert_dismissal: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("not_set"),
    secret_scanning: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    secret_scanning_push_protection: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    secret_scanning_delegated_bypass: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    secret_scanning_delegated_bypass_options: z
      .object({
        reviewers: z
          .array(
            z.object({
              reviewer_id: z.coerce.number(),
              reviewer_type: z.enum(["TEAM", "ROLE"]),
            }),
          )
          .optional(),
      })
      .optional(),
    secret_scanning_validity_checks: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    secret_scanning_non_provider_patterns: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    secret_scanning_generic_secrets: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    secret_scanning_delegated_alert_dismissal: z
      .enum(["enabled", "disabled", "not_set"])
      .optional(),
    private_vulnerability_reporting: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    enforcement: z
      .enum(["enforced", "unenforced"])
      .optional()
      .default("enforced"),
  })

  router.post(
    "codeSecurityCreateConfiguration",
    "/orgs/:org/code-security/configurations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeSecurityCreateConfigurationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codeSecurityCreateConfigurationBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codeSecurityCreateConfiguration(
          input,
          codeSecurityCreateConfigurationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeSecurityCreateConfigurationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeSecurityGetDefaultConfigurationsParamSchema = z.object({
    org: z.string(),
  })

  router.get(
    "codeSecurityGetDefaultConfigurations",
    "/orgs/:org/code-security/configurations/defaults",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeSecurityGetDefaultConfigurationsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeSecurityGetDefaultConfigurations(
          input,
          codeSecurityGetDefaultConfigurationsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeSecurityGetDefaultConfigurationsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codeSecurityDetachConfigurationParamSchema = z.object({
    org: z.string(),
  })

  const codeSecurityDetachConfigurationBodySchema = z.object({
    selected_repository_ids: z.array(z.coerce.number()).optional(),
  })

  router.delete(
    "codeSecurityDetachConfiguration",
    "/orgs/:org/code-security/configurations/detach",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeSecurityDetachConfigurationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codeSecurityDetachConfigurationBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codeSecurityDetachConfiguration(
          input,
          codeSecurityDetachConfigurationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeSecurityDetachConfigurationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeSecurityGetConfigurationParamSchema = z.object({
    org: z.string(),
    configuration_id: z.coerce.number(),
  })

  router.get(
    "codeSecurityGetConfiguration",
    "/orgs/:org/code-security/configurations/:configuration_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeSecurityGetConfigurationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeSecurityGetConfiguration(
          input,
          codeSecurityGetConfigurationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeSecurityGetConfigurationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeSecurityUpdateConfigurationParamSchema = z.object({
    org: z.string(),
    configuration_id: z.coerce.number(),
  })

  const codeSecurityUpdateConfigurationBodySchema = z.object({
    name: z.string().optional(),
    description: z.string().max(255).optional(),
    advanced_security: z
      .enum(["enabled", "disabled", "code_security", "secret_protection"])
      .optional(),
    dependency_graph: z.enum(["enabled", "disabled", "not_set"]).optional(),
    dependency_graph_autosubmit_action: z
      .enum(["enabled", "disabled", "not_set"])
      .optional(),
    dependency_graph_autosubmit_action_options: z
      .object({ labeled_runners: PermissiveBoolean.optional() })
      .optional(),
    dependabot_alerts: z.enum(["enabled", "disabled", "not_set"]).optional(),
    dependabot_security_updates: z
      .enum(["enabled", "disabled", "not_set"])
      .optional(),
    code_scanning_default_setup: z
      .enum(["enabled", "disabled", "not_set"])
      .optional(),
    code_scanning_default_setup_options:
      s_code_scanning_default_setup_options.optional(),
    code_scanning_delegated_alert_dismissal: z
      .enum(["enabled", "disabled", "not_set"])
      .optional()
      .default("disabled"),
    secret_scanning: z.enum(["enabled", "disabled", "not_set"]).optional(),
    secret_scanning_push_protection: z
      .enum(["enabled", "disabled", "not_set"])
      .optional(),
    secret_scanning_delegated_bypass: z
      .enum(["enabled", "disabled", "not_set"])
      .optional(),
    secret_scanning_delegated_bypass_options: z
      .object({
        reviewers: z
          .array(
            z.object({
              reviewer_id: z.coerce.number(),
              reviewer_type: z.enum(["TEAM", "ROLE"]),
            }),
          )
          .optional(),
      })
      .optional(),
    secret_scanning_validity_checks: z
      .enum(["enabled", "disabled", "not_set"])
      .optional(),
    secret_scanning_non_provider_patterns: z
      .enum(["enabled", "disabled", "not_set"])
      .optional(),
    secret_scanning_generic_secrets: z
      .enum(["enabled", "disabled", "not_set"])
      .optional(),
    secret_scanning_delegated_alert_dismissal: z
      .enum(["enabled", "disabled", "not_set"])
      .optional(),
    private_vulnerability_reporting: z
      .enum(["enabled", "disabled", "not_set"])
      .optional(),
    enforcement: z.enum(["enforced", "unenforced"]).optional(),
  })

  router.patch(
    "codeSecurityUpdateConfiguration",
    "/orgs/:org/code-security/configurations/:configuration_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeSecurityUpdateConfigurationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codeSecurityUpdateConfigurationBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codeSecurityUpdateConfiguration(
          input,
          codeSecurityUpdateConfigurationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeSecurityUpdateConfigurationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeSecurityDeleteConfigurationParamSchema = z.object({
    org: z.string(),
    configuration_id: z.coerce.number(),
  })

  router.delete(
    "codeSecurityDeleteConfiguration",
    "/orgs/:org/code-security/configurations/:configuration_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeSecurityDeleteConfigurationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeSecurityDeleteConfiguration(
          input,
          codeSecurityDeleteConfigurationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeSecurityDeleteConfigurationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeSecurityAttachConfigurationParamSchema = z.object({
    org: z.string(),
    configuration_id: z.coerce.number(),
  })

  const codeSecurityAttachConfigurationBodySchema = z.object({
    scope: z.enum([
      "all",
      "all_without_configurations",
      "public",
      "private_or_internal",
      "selected",
    ]),
    selected_repository_ids: z.array(z.coerce.number()).optional(),
  })

  router.post(
    "codeSecurityAttachConfiguration",
    "/orgs/:org/code-security/configurations/:configuration_id/attach",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeSecurityAttachConfigurationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codeSecurityAttachConfigurationBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codeSecurityAttachConfiguration(
          input,
          codeSecurityAttachConfigurationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeSecurityAttachConfigurationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeSecuritySetConfigurationAsDefaultParamSchema = z.object({
    org: z.string(),
    configuration_id: z.coerce.number(),
  })

  const codeSecuritySetConfigurationAsDefaultBodySchema = z.object({
    default_for_new_repos: z
      .enum(["all", "none", "private_and_internal", "public"])
      .optional(),
  })

  router.put(
    "codeSecuritySetConfigurationAsDefault",
    "/orgs/:org/code-security/configurations/:configuration_id/defaults",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeSecuritySetConfigurationAsDefaultParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codeSecuritySetConfigurationAsDefaultBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codeSecuritySetConfigurationAsDefault(
          input,
          codeSecuritySetConfigurationAsDefaultResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeSecuritySetConfigurationAsDefaultResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codeSecurityGetRepositoriesForConfigurationParamSchema = z.object({
    org: z.string(),
    configuration_id: z.coerce.number(),
  })

  const codeSecurityGetRepositoriesForConfigurationQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    before: z.string().optional(),
    after: z.string().optional(),
    status: z.string().optional().default("all"),
  })

  router.get(
    "codeSecurityGetRepositoriesForConfiguration",
    "/orgs/:org/code-security/configurations/:configuration_id/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeSecurityGetRepositoriesForConfigurationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codeSecurityGetRepositoriesForConfigurationQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeSecurityGetRepositoriesForConfiguration(
          input,
          codeSecurityGetRepositoriesForConfigurationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeSecurityGetRepositoriesForConfigurationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesListInOrganizationParamSchema = z.object({ org: z.string() })

  const codespacesListInOrganizationQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "codespacesListInOrganization",
    "/orgs/:org/codespaces",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesListInOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codespacesListInOrganizationQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesListInOrganization(
          input,
          codespacesListInOrganizationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesListInOrganizationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesSetCodespacesAccessParamSchema = z.object({ org: z.string() })

  const codespacesSetCodespacesAccessBodySchema = z.object({
    visibility: z.enum([
      "disabled",
      "selected_members",
      "all_members",
      "all_members_and_outside_collaborators",
    ]),
    selected_usernames: z.array(z.string()).max(100).optional(),
  })

  router.put(
    "codespacesSetCodespacesAccess",
    "/orgs/:org/codespaces/access",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesSetCodespacesAccessParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codespacesSetCodespacesAccessBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codespacesSetCodespacesAccess(
          input,
          codespacesSetCodespacesAccessResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesSetCodespacesAccessResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesSetCodespacesAccessUsersParamSchema = z.object({
    org: z.string(),
  })

  const codespacesSetCodespacesAccessUsersBodySchema = z.object({
    selected_usernames: z.array(z.string()).max(100),
  })

  router.post(
    "codespacesSetCodespacesAccessUsers",
    "/orgs/:org/codespaces/access/selected_users",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesSetCodespacesAccessUsersParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codespacesSetCodespacesAccessUsersBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codespacesSetCodespacesAccessUsers(
          input,
          codespacesSetCodespacesAccessUsersResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesSetCodespacesAccessUsersResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesDeleteCodespacesAccessUsersParamSchema = z.object({
    org: z.string(),
  })

  const codespacesDeleteCodespacesAccessUsersBodySchema = z.object({
    selected_usernames: z.array(z.string()).max(100),
  })

  router.delete(
    "codespacesDeleteCodespacesAccessUsers",
    "/orgs/:org/codespaces/access/selected_users",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesDeleteCodespacesAccessUsersParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codespacesDeleteCodespacesAccessUsersBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codespacesDeleteCodespacesAccessUsers(
          input,
          codespacesDeleteCodespacesAccessUsersResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesDeleteCodespacesAccessUsersResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesListOrgSecretsParamSchema = z.object({ org: z.string() })

  const codespacesListOrgSecretsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "codespacesListOrgSecrets",
    "/orgs/:org/codespaces/secrets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesListOrgSecretsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codespacesListOrgSecretsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesListOrgSecrets(input, codespacesListOrgSecretsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesListOrgSecretsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesGetOrgPublicKeyParamSchema = z.object({ org: z.string() })

  router.get(
    "codespacesGetOrgPublicKey",
    "/orgs/:org/codespaces/secrets/public-key",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesGetOrgPublicKeyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesGetOrgPublicKey(
          input,
          codespacesGetOrgPublicKeyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesGetOrgPublicKeyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesGetOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  router.get(
    "codespacesGetOrgSecret",
    "/orgs/:org/codespaces/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesGetOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesGetOrgSecret(input, codespacesGetOrgSecretResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesGetOrgSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesCreateOrUpdateOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const codespacesCreateOrUpdateOrgSecretBodySchema = z.object({
    encrypted_value: z
      .string()
      .regex(
        new RegExp(
          "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$",
        ),
      )
      .optional(),
    key_id: z.string().optional(),
    visibility: z.enum(["all", "private", "selected"]),
    selected_repository_ids: z.array(z.coerce.number()).optional(),
  })

  router.put(
    "codespacesCreateOrUpdateOrgSecret",
    "/orgs/:org/codespaces/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesCreateOrUpdateOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codespacesCreateOrUpdateOrgSecretBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codespacesCreateOrUpdateOrgSecret(
          input,
          codespacesCreateOrUpdateOrgSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesCreateOrUpdateOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesDeleteOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  router.delete(
    "codespacesDeleteOrgSecret",
    "/orgs/:org/codespaces/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesDeleteOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesDeleteOrgSecret(
          input,
          codespacesDeleteOrgSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesDeleteOrgSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesListSelectedReposForOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const codespacesListSelectedReposForOrgSecretQuerySchema = z.object({
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
  })

  router.get(
    "codespacesListSelectedReposForOrgSecret",
    "/orgs/:org/codespaces/secrets/:secret_name/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesListSelectedReposForOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codespacesListSelectedReposForOrgSecretQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesListSelectedReposForOrgSecret(
          input,
          codespacesListSelectedReposForOrgSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesListSelectedReposForOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesSetSelectedReposForOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const codespacesSetSelectedReposForOrgSecretBodySchema = z.object({
    selected_repository_ids: z.array(z.coerce.number()),
  })

  router.put(
    "codespacesSetSelectedReposForOrgSecret",
    "/orgs/:org/codespaces/secrets/:secret_name/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesSetSelectedReposForOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codespacesSetSelectedReposForOrgSecretBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codespacesSetSelectedReposForOrgSecret(
          input,
          codespacesSetSelectedReposForOrgSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesSetSelectedReposForOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesAddSelectedRepoToOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
    repository_id: z.coerce.number(),
  })

  router.put(
    "codespacesAddSelectedRepoToOrgSecret",
    "/orgs/:org/codespaces/secrets/:secret_name/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesAddSelectedRepoToOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesAddSelectedRepoToOrgSecret(
          input,
          codespacesAddSelectedRepoToOrgSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesAddSelectedRepoToOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesRemoveSelectedRepoFromOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
    repository_id: z.coerce.number(),
  })

  router.delete(
    "codespacesRemoveSelectedRepoFromOrgSecret",
    "/orgs/:org/codespaces/secrets/:secret_name/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesRemoveSelectedRepoFromOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesRemoveSelectedRepoFromOrgSecret(
          input,
          codespacesRemoveSelectedRepoFromOrgSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesRemoveSelectedRepoFromOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const copilotGetCopilotOrganizationDetailsParamSchema = z.object({
    org: z.string(),
  })

  router.get(
    "copilotGetCopilotOrganizationDetails",
    "/orgs/:org/copilot/billing",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          copilotGetCopilotOrganizationDetailsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .copilotGetCopilotOrganizationDetails(
          input,
          copilotGetCopilotOrganizationDetailsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = copilotGetCopilotOrganizationDetailsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const copilotListCopilotSeatsParamSchema = z.object({ org: z.string() })

  const copilotListCopilotSeatsQuerySchema = z.object({
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(50),
  })

  router.get(
    "copilotListCopilotSeats",
    "/orgs/:org/copilot/billing/seats",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          copilotListCopilotSeatsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          copilotListCopilotSeatsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .copilotListCopilotSeats(input, copilotListCopilotSeatsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = copilotListCopilotSeatsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const copilotAddCopilotSeatsForTeamsParamSchema = z.object({
    org: z.string(),
  })

  const copilotAddCopilotSeatsForTeamsBodySchema = z.object({
    selected_teams: z.array(z.string()).min(1),
  })

  router.post(
    "copilotAddCopilotSeatsForTeams",
    "/orgs/:org/copilot/billing/selected_teams",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          copilotAddCopilotSeatsForTeamsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          copilotAddCopilotSeatsForTeamsBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .copilotAddCopilotSeatsForTeams(
          input,
          copilotAddCopilotSeatsForTeamsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = copilotAddCopilotSeatsForTeamsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const copilotCancelCopilotSeatAssignmentForTeamsParamSchema = z.object({
    org: z.string(),
  })

  const copilotCancelCopilotSeatAssignmentForTeamsBodySchema = z.object({
    selected_teams: z.array(z.string()).min(1),
  })

  router.delete(
    "copilotCancelCopilotSeatAssignmentForTeams",
    "/orgs/:org/copilot/billing/selected_teams",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          copilotCancelCopilotSeatAssignmentForTeamsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          copilotCancelCopilotSeatAssignmentForTeamsBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .copilotCancelCopilotSeatAssignmentForTeams(
          input,
          copilotCancelCopilotSeatAssignmentForTeamsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = copilotCancelCopilotSeatAssignmentForTeamsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const copilotAddCopilotSeatsForUsersParamSchema = z.object({
    org: z.string(),
  })

  const copilotAddCopilotSeatsForUsersBodySchema = z.object({
    selected_usernames: z.array(z.string()).min(1),
  })

  router.post(
    "copilotAddCopilotSeatsForUsers",
    "/orgs/:org/copilot/billing/selected_users",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          copilotAddCopilotSeatsForUsersParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          copilotAddCopilotSeatsForUsersBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .copilotAddCopilotSeatsForUsers(
          input,
          copilotAddCopilotSeatsForUsersResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = copilotAddCopilotSeatsForUsersResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const copilotCancelCopilotSeatAssignmentForUsersParamSchema = z.object({
    org: z.string(),
  })

  const copilotCancelCopilotSeatAssignmentForUsersBodySchema = z.object({
    selected_usernames: z.array(z.string()).min(1),
  })

  router.delete(
    "copilotCancelCopilotSeatAssignmentForUsers",
    "/orgs/:org/copilot/billing/selected_users",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          copilotCancelCopilotSeatAssignmentForUsersParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          copilotCancelCopilotSeatAssignmentForUsersBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .copilotCancelCopilotSeatAssignmentForUsers(
          input,
          copilotCancelCopilotSeatAssignmentForUsersResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = copilotCancelCopilotSeatAssignmentForUsersResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const copilotCopilotMetricsForOrganizationParamSchema = z.object({
    org: z.string(),
  })

  const copilotCopilotMetricsForOrganizationQuerySchema = z.object({
    since: z.string().optional(),
    until: z.string().optional(),
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(28),
  })

  router.get(
    "copilotCopilotMetricsForOrganization",
    "/orgs/:org/copilot/metrics",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          copilotCopilotMetricsForOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          copilotCopilotMetricsForOrganizationQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .copilotCopilotMetricsForOrganization(
          input,
          copilotCopilotMetricsForOrganizationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = copilotCopilotMetricsForOrganizationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const dependabotListAlertsForOrgParamSchema = z.object({ org: z.string() })

  const dependabotListAlertsForOrgQuerySchema = z.object({
    state: z.string().optional(),
    severity: z.string().optional(),
    ecosystem: z.string().optional(),
    package: z.string().optional(),
    epss_percentage: z.string().optional(),
    scope: z.enum(["development", "runtime"]).optional(),
    sort: z
      .enum(["created", "updated", "epss_percentage"])
      .optional()
      .default("created"),
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    before: z.string().optional(),
    after: z.string().optional(),
    first: z.coerce.number().min(1).max(100).optional().default(30),
    last: z.coerce.number().min(1).max(100).optional(),
    per_page: z.coerce.number().optional().default(30),
  })

  router.get(
    "dependabotListAlertsForOrg",
    "/orgs/:org/dependabot/alerts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotListAlertsForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          dependabotListAlertsForOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .dependabotListAlertsForOrg(
          input,
          dependabotListAlertsForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotListAlertsForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependabotListOrgSecretsParamSchema = z.object({ org: z.string() })

  const dependabotListOrgSecretsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "dependabotListOrgSecrets",
    "/orgs/:org/dependabot/secrets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotListOrgSecretsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          dependabotListOrgSecretsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .dependabotListOrgSecrets(input, dependabotListOrgSecretsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotListOrgSecretsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependabotGetOrgPublicKeyParamSchema = z.object({ org: z.string() })

  router.get(
    "dependabotGetOrgPublicKey",
    "/orgs/:org/dependabot/secrets/public-key",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotGetOrgPublicKeyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .dependabotGetOrgPublicKey(
          input,
          dependabotGetOrgPublicKeyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotGetOrgPublicKeyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependabotGetOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  router.get(
    "dependabotGetOrgSecret",
    "/orgs/:org/dependabot/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotGetOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .dependabotGetOrgSecret(input, dependabotGetOrgSecretResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotGetOrgSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependabotCreateOrUpdateOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const dependabotCreateOrUpdateOrgSecretBodySchema = z.object({
    encrypted_value: z
      .string()
      .regex(
        new RegExp(
          "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$",
        ),
      )
      .optional(),
    key_id: z.string().optional(),
    visibility: z.enum(["all", "private", "selected"]),
    selected_repository_ids: z.array(z.string()).optional(),
  })

  router.put(
    "dependabotCreateOrUpdateOrgSecret",
    "/orgs/:org/dependabot/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotCreateOrUpdateOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          dependabotCreateOrUpdateOrgSecretBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .dependabotCreateOrUpdateOrgSecret(
          input,
          dependabotCreateOrUpdateOrgSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotCreateOrUpdateOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const dependabotDeleteOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  router.delete(
    "dependabotDeleteOrgSecret",
    "/orgs/:org/dependabot/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotDeleteOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .dependabotDeleteOrgSecret(
          input,
          dependabotDeleteOrgSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotDeleteOrgSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependabotListSelectedReposForOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const dependabotListSelectedReposForOrgSecretQuerySchema = z.object({
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
  })

  router.get(
    "dependabotListSelectedReposForOrgSecret",
    "/orgs/:org/dependabot/secrets/:secret_name/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotListSelectedReposForOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          dependabotListSelectedReposForOrgSecretQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .dependabotListSelectedReposForOrgSecret(
          input,
          dependabotListSelectedReposForOrgSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotListSelectedReposForOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const dependabotSetSelectedReposForOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const dependabotSetSelectedReposForOrgSecretBodySchema = z.object({
    selected_repository_ids: z.array(z.coerce.number()),
  })

  router.put(
    "dependabotSetSelectedReposForOrgSecret",
    "/orgs/:org/dependabot/secrets/:secret_name/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotSetSelectedReposForOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          dependabotSetSelectedReposForOrgSecretBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .dependabotSetSelectedReposForOrgSecret(
          input,
          dependabotSetSelectedReposForOrgSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotSetSelectedReposForOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const dependabotAddSelectedRepoToOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
    repository_id: z.coerce.number(),
  })

  router.put(
    "dependabotAddSelectedRepoToOrgSecret",
    "/orgs/:org/dependabot/secrets/:secret_name/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotAddSelectedRepoToOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .dependabotAddSelectedRepoToOrgSecret(
          input,
          dependabotAddSelectedRepoToOrgSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotAddSelectedRepoToOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const dependabotRemoveSelectedRepoFromOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
    repository_id: z.coerce.number(),
  })

  router.delete(
    "dependabotRemoveSelectedRepoFromOrgSecret",
    "/orgs/:org/dependabot/secrets/:secret_name/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotRemoveSelectedRepoFromOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .dependabotRemoveSelectedRepoFromOrgSecret(
          input,
          dependabotRemoveSelectedRepoFromOrgSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotRemoveSelectedRepoFromOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const packagesListDockerMigrationConflictingPackagesForOrganizationParamSchema =
    z.object({ org: z.string() })

  router.get(
    "packagesListDockerMigrationConflictingPackagesForOrganization",
    "/orgs/:org/docker/conflicts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesListDockerMigrationConflictingPackagesForOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesListDockerMigrationConflictingPackagesForOrganization(
          input,
          packagesListDockerMigrationConflictingPackagesForOrganizationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        packagesListDockerMigrationConflictingPackagesForOrganizationResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const activityListPublicOrgEventsParamSchema = z.object({ org: z.string() })

  const activityListPublicOrgEventsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "activityListPublicOrgEvents",
    "/orgs/:org/events",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListPublicOrgEventsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListPublicOrgEventsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityListPublicOrgEvents(
          input,
          activityListPublicOrgEventsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListPublicOrgEventsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListFailedInvitationsParamSchema = z.object({ org: z.string() })

  const orgsListFailedInvitationsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "orgsListFailedInvitations",
    "/orgs/:org/failed_invitations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListFailedInvitationsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListFailedInvitationsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsListFailedInvitations(
          input,
          orgsListFailedInvitationsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListFailedInvitationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListWebhooksParamSchema = z.object({ org: z.string() })

  const orgsListWebhooksQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get("orgsListWebhooks", "/orgs/:org/hooks", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        orgsListWebhooksParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: parseRequestInput(
        orgsListWebhooksQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .orgsListWebhooks(input, orgsListWebhooksResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = orgsListWebhooksResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const orgsCreateWebhookParamSchema = z.object({ org: z.string() })

  const orgsCreateWebhookBodySchema = z.object({
    name: z.string(),
    config: z.object({
      url: s_webhook_config_url,
      content_type: s_webhook_config_content_type.optional(),
      secret: s_webhook_config_secret.optional(),
      insecure_ssl: s_webhook_config_insecure_ssl.optional(),
      username: z.string().optional(),
      password: z.string().optional(),
    }),
    events: z.array(z.string()).optional().default(["push"]),
    active: PermissiveBoolean.optional().default(true),
  })

  router.post("orgsCreateWebhook", "/orgs/:org/hooks", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        orgsCreateWebhookParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        orgsCreateWebhookBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const response = await implementation
      .orgsCreateWebhook(input, orgsCreateWebhookResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = orgsCreateWebhookResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const orgsGetWebhookParamSchema = z.object({
    org: z.string(),
    hook_id: z.coerce.number(),
  })

  router.get(
    "orgsGetWebhook",
    "/orgs/:org/hooks/:hook_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsGetWebhookParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsGetWebhook(input, orgsGetWebhookResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsGetWebhookResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsUpdateWebhookParamSchema = z.object({
    org: z.string(),
    hook_id: z.coerce.number(),
  })

  const orgsUpdateWebhookBodySchema = z
    .object({
      config: z
        .object({
          url: s_webhook_config_url,
          content_type: s_webhook_config_content_type.optional(),
          secret: s_webhook_config_secret.optional(),
          insecure_ssl: s_webhook_config_insecure_ssl.optional(),
        })
        .optional(),
      events: z.array(z.string()).optional().default(["push"]),
      active: PermissiveBoolean.optional().default(true),
      name: z.string().optional(),
    })
    .optional()

  router.patch(
    "orgsUpdateWebhook",
    "/orgs/:org/hooks/:hook_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsUpdateWebhookParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsUpdateWebhookBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .orgsUpdateWebhook(input, orgsUpdateWebhookResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsUpdateWebhookResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsDeleteWebhookParamSchema = z.object({
    org: z.string(),
    hook_id: z.coerce.number(),
  })

  router.delete(
    "orgsDeleteWebhook",
    "/orgs/:org/hooks/:hook_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsDeleteWebhookParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsDeleteWebhook(input, orgsDeleteWebhookResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsDeleteWebhookResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsGetWebhookConfigForOrgParamSchema = z.object({
    org: z.string(),
    hook_id: z.coerce.number(),
  })

  router.get(
    "orgsGetWebhookConfigForOrg",
    "/orgs/:org/hooks/:hook_id/config",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsGetWebhookConfigForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsGetWebhookConfigForOrg(
          input,
          orgsGetWebhookConfigForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsGetWebhookConfigForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsUpdateWebhookConfigForOrgParamSchema = z.object({
    org: z.string(),
    hook_id: z.coerce.number(),
  })

  const orgsUpdateWebhookConfigForOrgBodySchema = z
    .object({
      url: s_webhook_config_url.optional(),
      content_type: s_webhook_config_content_type.optional(),
      secret: s_webhook_config_secret.optional(),
      insecure_ssl: s_webhook_config_insecure_ssl.optional(),
    })
    .optional()

  router.patch(
    "orgsUpdateWebhookConfigForOrg",
    "/orgs/:org/hooks/:hook_id/config",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsUpdateWebhookConfigForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsUpdateWebhookConfigForOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .orgsUpdateWebhookConfigForOrg(
          input,
          orgsUpdateWebhookConfigForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsUpdateWebhookConfigForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListWebhookDeliveriesParamSchema = z.object({
    org: z.string(),
    hook_id: z.coerce.number(),
  })

  const orgsListWebhookDeliveriesQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    cursor: z.string().optional(),
  })

  router.get(
    "orgsListWebhookDeliveries",
    "/orgs/:org/hooks/:hook_id/deliveries",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListWebhookDeliveriesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListWebhookDeliveriesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsListWebhookDeliveries(
          input,
          orgsListWebhookDeliveriesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListWebhookDeliveriesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsGetWebhookDeliveryParamSchema = z.object({
    org: z.string(),
    hook_id: z.coerce.number(),
    delivery_id: z.coerce.number(),
  })

  router.get(
    "orgsGetWebhookDelivery",
    "/orgs/:org/hooks/:hook_id/deliveries/:delivery_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsGetWebhookDeliveryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsGetWebhookDelivery(input, orgsGetWebhookDeliveryResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsGetWebhookDeliveryResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsRedeliverWebhookDeliveryParamSchema = z.object({
    org: z.string(),
    hook_id: z.coerce.number(),
    delivery_id: z.coerce.number(),
  })

  router.post(
    "orgsRedeliverWebhookDelivery",
    "/orgs/:org/hooks/:hook_id/deliveries/:delivery_id/attempts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsRedeliverWebhookDeliveryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsRedeliverWebhookDelivery(
          input,
          orgsRedeliverWebhookDeliveryResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsRedeliverWebhookDeliveryResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsPingWebhookParamSchema = z.object({
    org: z.string(),
    hook_id: z.coerce.number(),
  })

  router.post(
    "orgsPingWebhook",
    "/orgs/:org/hooks/:hook_id/pings",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsPingWebhookParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsPingWebhook(input, orgsPingWebhookResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsPingWebhookResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const apiInsightsGetRouteStatsByActorParamSchema = z.object({
    org: z.string(),
    actor_type: z.enum([
      "installation",
      "classic_pat",
      "fine_grained_pat",
      "oauth_app",
      "github_app_user_to_server",
    ]),
    actor_id: z.coerce.number(),
  })

  const apiInsightsGetRouteStatsByActorQuerySchema = z.object({
    min_timestamp: z.string(),
    max_timestamp: z.string().optional(),
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    sort: z
      .preprocess(
        (it: unknown) => (Array.isArray(it) || it === undefined ? it : [it]),
        z.array(
          z
            .enum([
              "last_rate_limited_timestamp",
              "last_request_timestamp",
              "rate_limited_request_count",
              "http_method",
              "api_route",
              "total_request_count",
            ])
            .default("total_request_count"),
        ),
      )
      .optional(),
    api_route_substring: z.string().optional(),
  })

  router.get(
    "apiInsightsGetRouteStatsByActor",
    "/orgs/:org/insights/api/route-stats/:actor_type/:actor_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          apiInsightsGetRouteStatsByActorParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          apiInsightsGetRouteStatsByActorQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .apiInsightsGetRouteStatsByActor(
          input,
          apiInsightsGetRouteStatsByActorResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = apiInsightsGetRouteStatsByActorResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const apiInsightsGetSubjectStatsParamSchema = z.object({ org: z.string() })

  const apiInsightsGetSubjectStatsQuerySchema = z.object({
    min_timestamp: z.string(),
    max_timestamp: z.string().optional(),
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    sort: z
      .preprocess(
        (it: unknown) => (Array.isArray(it) || it === undefined ? it : [it]),
        z.array(
          z
            .enum([
              "last_rate_limited_timestamp",
              "last_request_timestamp",
              "rate_limited_request_count",
              "subject_name",
              "total_request_count",
            ])
            .default("total_request_count"),
        ),
      )
      .optional(),
    subject_name_substring: z.string().optional(),
  })

  router.get(
    "apiInsightsGetSubjectStats",
    "/orgs/:org/insights/api/subject-stats",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          apiInsightsGetSubjectStatsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          apiInsightsGetSubjectStatsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .apiInsightsGetSubjectStats(
          input,
          apiInsightsGetSubjectStatsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = apiInsightsGetSubjectStatsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const apiInsightsGetSummaryStatsParamSchema = z.object({ org: z.string() })

  const apiInsightsGetSummaryStatsQuerySchema = z.object({
    min_timestamp: z.string(),
    max_timestamp: z.string().optional(),
  })

  router.get(
    "apiInsightsGetSummaryStats",
    "/orgs/:org/insights/api/summary-stats",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          apiInsightsGetSummaryStatsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          apiInsightsGetSummaryStatsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .apiInsightsGetSummaryStats(
          input,
          apiInsightsGetSummaryStatsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = apiInsightsGetSummaryStatsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const apiInsightsGetSummaryStatsByUserParamSchema = z.object({
    org: z.string(),
    user_id: z.string(),
  })

  const apiInsightsGetSummaryStatsByUserQuerySchema = z.object({
    min_timestamp: z.string(),
    max_timestamp: z.string().optional(),
  })

  router.get(
    "apiInsightsGetSummaryStatsByUser",
    "/orgs/:org/insights/api/summary-stats/users/:user_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          apiInsightsGetSummaryStatsByUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          apiInsightsGetSummaryStatsByUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .apiInsightsGetSummaryStatsByUser(
          input,
          apiInsightsGetSummaryStatsByUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = apiInsightsGetSummaryStatsByUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const apiInsightsGetSummaryStatsByActorParamSchema = z.object({
    org: z.string(),
    actor_type: z.enum([
      "installation",
      "classic_pat",
      "fine_grained_pat",
      "oauth_app",
      "github_app_user_to_server",
    ]),
    actor_id: z.coerce.number(),
  })

  const apiInsightsGetSummaryStatsByActorQuerySchema = z.object({
    min_timestamp: z.string(),
    max_timestamp: z.string().optional(),
  })

  router.get(
    "apiInsightsGetSummaryStatsByActor",
    "/orgs/:org/insights/api/summary-stats/:actor_type/:actor_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          apiInsightsGetSummaryStatsByActorParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          apiInsightsGetSummaryStatsByActorQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .apiInsightsGetSummaryStatsByActor(
          input,
          apiInsightsGetSummaryStatsByActorResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = apiInsightsGetSummaryStatsByActorResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const apiInsightsGetTimeStatsParamSchema = z.object({ org: z.string() })

  const apiInsightsGetTimeStatsQuerySchema = z.object({
    min_timestamp: z.string(),
    max_timestamp: z.string().optional(),
    timestamp_increment: z.string(),
  })

  router.get(
    "apiInsightsGetTimeStats",
    "/orgs/:org/insights/api/time-stats",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          apiInsightsGetTimeStatsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          apiInsightsGetTimeStatsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .apiInsightsGetTimeStats(input, apiInsightsGetTimeStatsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = apiInsightsGetTimeStatsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const apiInsightsGetTimeStatsByUserParamSchema = z.object({
    org: z.string(),
    user_id: z.string(),
  })

  const apiInsightsGetTimeStatsByUserQuerySchema = z.object({
    min_timestamp: z.string(),
    max_timestamp: z.string().optional(),
    timestamp_increment: z.string(),
  })

  router.get(
    "apiInsightsGetTimeStatsByUser",
    "/orgs/:org/insights/api/time-stats/users/:user_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          apiInsightsGetTimeStatsByUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          apiInsightsGetTimeStatsByUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .apiInsightsGetTimeStatsByUser(
          input,
          apiInsightsGetTimeStatsByUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = apiInsightsGetTimeStatsByUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const apiInsightsGetTimeStatsByActorParamSchema = z.object({
    org: z.string(),
    actor_type: z.enum([
      "installation",
      "classic_pat",
      "fine_grained_pat",
      "oauth_app",
      "github_app_user_to_server",
    ]),
    actor_id: z.coerce.number(),
  })

  const apiInsightsGetTimeStatsByActorQuerySchema = z.object({
    min_timestamp: z.string(),
    max_timestamp: z.string().optional(),
    timestamp_increment: z.string(),
  })

  router.get(
    "apiInsightsGetTimeStatsByActor",
    "/orgs/:org/insights/api/time-stats/:actor_type/:actor_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          apiInsightsGetTimeStatsByActorParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          apiInsightsGetTimeStatsByActorQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .apiInsightsGetTimeStatsByActor(
          input,
          apiInsightsGetTimeStatsByActorResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = apiInsightsGetTimeStatsByActorResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const apiInsightsGetUserStatsParamSchema = z.object({
    org: z.string(),
    user_id: z.string(),
  })

  const apiInsightsGetUserStatsQuerySchema = z.object({
    min_timestamp: z.string(),
    max_timestamp: z.string().optional(),
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    sort: z
      .preprocess(
        (it: unknown) => (Array.isArray(it) || it === undefined ? it : [it]),
        z.array(
          z
            .enum([
              "last_rate_limited_timestamp",
              "last_request_timestamp",
              "rate_limited_request_count",
              "subject_name",
              "total_request_count",
            ])
            .default("total_request_count"),
        ),
      )
      .optional(),
    actor_name_substring: z.string().optional(),
  })

  router.get(
    "apiInsightsGetUserStats",
    "/orgs/:org/insights/api/user-stats/:user_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          apiInsightsGetUserStatsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          apiInsightsGetUserStatsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .apiInsightsGetUserStats(input, apiInsightsGetUserStatsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = apiInsightsGetUserStatsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsGetOrgInstallationParamSchema = z.object({ org: z.string() })

  router.get(
    "appsGetOrgInstallation",
    "/orgs/:org/installation",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsGetOrgInstallationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsGetOrgInstallation(input, appsGetOrgInstallationResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsGetOrgInstallationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListAppInstallationsParamSchema = z.object({ org: z.string() })

  const orgsListAppInstallationsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "orgsListAppInstallations",
    "/orgs/:org/installations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListAppInstallationsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListAppInstallationsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsListAppInstallations(input, orgsListAppInstallationsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListAppInstallationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const interactionsGetRestrictionsForOrgParamSchema = z.object({
    org: z.string(),
  })

  router.get(
    "interactionsGetRestrictionsForOrg",
    "/orgs/:org/interaction-limits",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          interactionsGetRestrictionsForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .interactionsGetRestrictionsForOrg(
          input,
          interactionsGetRestrictionsForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = interactionsGetRestrictionsForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const interactionsSetRestrictionsForOrgParamSchema = z.object({
    org: z.string(),
  })

  const interactionsSetRestrictionsForOrgBodySchema = s_interaction_limit

  router.put(
    "interactionsSetRestrictionsForOrg",
    "/orgs/:org/interaction-limits",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          interactionsSetRestrictionsForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          interactionsSetRestrictionsForOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .interactionsSetRestrictionsForOrg(
          input,
          interactionsSetRestrictionsForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = interactionsSetRestrictionsForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const interactionsRemoveRestrictionsForOrgParamSchema = z.object({
    org: z.string(),
  })

  router.delete(
    "interactionsRemoveRestrictionsForOrg",
    "/orgs/:org/interaction-limits",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          interactionsRemoveRestrictionsForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .interactionsRemoveRestrictionsForOrg(
          input,
          interactionsRemoveRestrictionsForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = interactionsRemoveRestrictionsForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsListPendingInvitationsParamSchema = z.object({ org: z.string() })

  const orgsListPendingInvitationsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
    role: z
      .enum([
        "all",
        "admin",
        "direct_member",
        "billing_manager",
        "hiring_manager",
      ])
      .optional()
      .default("all"),
    invitation_source: z
      .enum(["all", "member", "scim"])
      .optional()
      .default("all"),
  })

  router.get(
    "orgsListPendingInvitations",
    "/orgs/:org/invitations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListPendingInvitationsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListPendingInvitationsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsListPendingInvitations(
          input,
          orgsListPendingInvitationsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListPendingInvitationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsCreateInvitationParamSchema = z.object({ org: z.string() })

  const orgsCreateInvitationBodySchema = z
    .object({
      invitee_id: z.coerce.number().optional(),
      email: z.string().optional(),
      role: z
        .enum(["admin", "direct_member", "billing_manager", "reinstate"])
        .optional()
        .default("direct_member"),
      team_ids: z.array(z.coerce.number()).optional(),
    })
    .optional()

  router.post(
    "orgsCreateInvitation",
    "/orgs/:org/invitations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsCreateInvitationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsCreateInvitationBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .orgsCreateInvitation(input, orgsCreateInvitationResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsCreateInvitationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsCancelInvitationParamSchema = z.object({
    org: z.string(),
    invitation_id: z.coerce.number(),
  })

  router.delete(
    "orgsCancelInvitation",
    "/orgs/:org/invitations/:invitation_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsCancelInvitationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsCancelInvitation(input, orgsCancelInvitationResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsCancelInvitationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListInvitationTeamsParamSchema = z.object({
    org: z.string(),
    invitation_id: z.coerce.number(),
  })

  const orgsListInvitationTeamsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "orgsListInvitationTeams",
    "/orgs/:org/invitations/:invitation_id/teams",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListInvitationTeamsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListInvitationTeamsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsListInvitationTeams(input, orgsListInvitationTeamsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListInvitationTeamsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListIssueTypesParamSchema = z.object({ org: z.string() })

  router.get(
    "orgsListIssueTypes",
    "/orgs/:org/issue-types",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListIssueTypesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsListIssueTypes(input, orgsListIssueTypesResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListIssueTypesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsCreateIssueTypeParamSchema = z.object({ org: z.string() })

  const orgsCreateIssueTypeBodySchema = s_organization_create_issue_type

  router.post(
    "orgsCreateIssueType",
    "/orgs/:org/issue-types",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsCreateIssueTypeParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsCreateIssueTypeBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .orgsCreateIssueType(input, orgsCreateIssueTypeResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsCreateIssueTypeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsUpdateIssueTypeParamSchema = z.object({
    org: z.string(),
    issue_type_id: z.coerce.number(),
  })

  const orgsUpdateIssueTypeBodySchema = s_organization_update_issue_type

  router.put(
    "orgsUpdateIssueType",
    "/orgs/:org/issue-types/:issue_type_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsUpdateIssueTypeParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsUpdateIssueTypeBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .orgsUpdateIssueType(input, orgsUpdateIssueTypeResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsUpdateIssueTypeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsDeleteIssueTypeParamSchema = z.object({
    org: z.string(),
    issue_type_id: z.coerce.number(),
  })

  router.delete(
    "orgsDeleteIssueType",
    "/orgs/:org/issue-types/:issue_type_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsDeleteIssueTypeParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsDeleteIssueType(input, orgsDeleteIssueTypeResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsDeleteIssueTypeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesListForOrgParamSchema = z.object({ org: z.string() })

  const issuesListForOrgQuerySchema = z.object({
    filter: z
      .enum(["assigned", "created", "mentioned", "subscribed", "repos", "all"])
      .optional()
      .default("assigned"),
    state: z.enum(["open", "closed", "all"]).optional().default("open"),
    labels: z.string().optional(),
    type: z.string().optional(),
    sort: z
      .enum(["created", "updated", "comments"])
      .optional()
      .default("created"),
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    since: z.string().datetime({ offset: true }).optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get("issuesListForOrg", "/orgs/:org/issues", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        issuesListForOrgParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: parseRequestInput(
        issuesListForOrgQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .issuesListForOrg(input, issuesListForOrgResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = issuesListForOrgResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const orgsListMembersParamSchema = z.object({ org: z.string() })

  const orgsListMembersQuerySchema = z.object({
    filter: z.enum(["2fa_disabled", "all"]).optional().default("all"),
    role: z.enum(["all", "admin", "member"]).optional().default("all"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get("orgsListMembers", "/orgs/:org/members", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        orgsListMembersParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: parseRequestInput(
        orgsListMembersQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .orgsListMembers(input, orgsListMembersResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = orgsListMembersResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const orgsCheckMembershipForUserParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  router.get(
    "orgsCheckMembershipForUser",
    "/orgs/:org/members/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsCheckMembershipForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsCheckMembershipForUser(
          input,
          orgsCheckMembershipForUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsCheckMembershipForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsRemoveMemberParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  router.delete(
    "orgsRemoveMember",
    "/orgs/:org/members/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsRemoveMemberParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsRemoveMember(input, orgsRemoveMemberResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsRemoveMemberResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesGetCodespacesForUserInOrgParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  const codespacesGetCodespacesForUserInOrgQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "codespacesGetCodespacesForUserInOrg",
    "/orgs/:org/members/:username/codespaces",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesGetCodespacesForUserInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codespacesGetCodespacesForUserInOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesGetCodespacesForUserInOrg(
          input,
          codespacesGetCodespacesForUserInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesGetCodespacesForUserInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesDeleteFromOrganizationParamSchema = z.object({
    org: z.string(),
    username: z.string(),
    codespace_name: z.string(),
  })

  router.delete(
    "codespacesDeleteFromOrganization",
    "/orgs/:org/members/:username/codespaces/:codespace_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesDeleteFromOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesDeleteFromOrganization(
          input,
          codespacesDeleteFromOrganizationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesDeleteFromOrganizationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesStopInOrganizationParamSchema = z.object({
    org: z.string(),
    username: z.string(),
    codespace_name: z.string(),
  })

  router.post(
    "codespacesStopInOrganization",
    "/orgs/:org/members/:username/codespaces/:codespace_name/stop",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesStopInOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesStopInOrganization(
          input,
          codespacesStopInOrganizationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesStopInOrganizationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const copilotGetCopilotSeatDetailsForUserParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  router.get(
    "copilotGetCopilotSeatDetailsForUser",
    "/orgs/:org/members/:username/copilot",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          copilotGetCopilotSeatDetailsForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .copilotGetCopilotSeatDetailsForUser(
          input,
          copilotGetCopilotSeatDetailsForUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = copilotGetCopilotSeatDetailsForUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsGetMembershipForUserParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  router.get(
    "orgsGetMembershipForUser",
    "/orgs/:org/memberships/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsGetMembershipForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsGetMembershipForUser(input, orgsGetMembershipForUserResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsGetMembershipForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsSetMembershipForUserParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  const orgsSetMembershipForUserBodySchema = z
    .object({ role: z.enum(["admin", "member"]).optional().default("member") })
    .optional()

  router.put(
    "orgsSetMembershipForUser",
    "/orgs/:org/memberships/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsSetMembershipForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsSetMembershipForUserBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .orgsSetMembershipForUser(input, orgsSetMembershipForUserResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsSetMembershipForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsRemoveMembershipForUserParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  router.delete(
    "orgsRemoveMembershipForUser",
    "/orgs/:org/memberships/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsRemoveMembershipForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsRemoveMembershipForUser(
          input,
          orgsRemoveMembershipForUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsRemoveMembershipForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsListForOrgParamSchema = z.object({ org: z.string() })

  const migrationsListForOrgQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
    exclude: z
      .preprocess(
        (it: unknown) => (Array.isArray(it) || it === undefined ? it : [it]),
        z.array(z.enum(["repositories"])),
      )
      .optional(),
  })

  router.get(
    "migrationsListForOrg",
    "/orgs/:org/migrations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsListForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          migrationsListForOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .migrationsListForOrg(input, migrationsListForOrgResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsListForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsStartForOrgParamSchema = z.object({ org: z.string() })

  const migrationsStartForOrgBodySchema = z.object({
    repositories: z.array(z.string()),
    lock_repositories: PermissiveBoolean.optional().default(false),
    exclude_metadata: PermissiveBoolean.optional().default(false),
    exclude_git_data: PermissiveBoolean.optional().default(false),
    exclude_attachments: PermissiveBoolean.optional().default(false),
    exclude_releases: PermissiveBoolean.optional().default(false),
    exclude_owner_projects: PermissiveBoolean.optional().default(false),
    org_metadata_only: PermissiveBoolean.optional().default(false),
    exclude: z.array(z.enum(["repositories"])).optional(),
  })

  router.post(
    "migrationsStartForOrg",
    "/orgs/:org/migrations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsStartForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          migrationsStartForOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .migrationsStartForOrg(input, migrationsStartForOrgResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsStartForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsGetStatusForOrgParamSchema = z.object({
    org: z.string(),
    migration_id: z.coerce.number(),
  })

  const migrationsGetStatusForOrgQuerySchema = z.object({
    exclude: z
      .preprocess(
        (it: unknown) => (Array.isArray(it) || it === undefined ? it : [it]),
        z.array(z.enum(["repositories"])),
      )
      .optional(),
  })

  router.get(
    "migrationsGetStatusForOrg",
    "/orgs/:org/migrations/:migration_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsGetStatusForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          migrationsGetStatusForOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .migrationsGetStatusForOrg(
          input,
          migrationsGetStatusForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsGetStatusForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsDownloadArchiveForOrgParamSchema = z.object({
    org: z.string(),
    migration_id: z.coerce.number(),
  })

  router.get(
    "migrationsDownloadArchiveForOrg",
    "/orgs/:org/migrations/:migration_id/archive",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsDownloadArchiveForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .migrationsDownloadArchiveForOrg(
          input,
          migrationsDownloadArchiveForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsDownloadArchiveForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsDeleteArchiveForOrgParamSchema = z.object({
    org: z.string(),
    migration_id: z.coerce.number(),
  })

  router.delete(
    "migrationsDeleteArchiveForOrg",
    "/orgs/:org/migrations/:migration_id/archive",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsDeleteArchiveForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .migrationsDeleteArchiveForOrg(
          input,
          migrationsDeleteArchiveForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsDeleteArchiveForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsUnlockRepoForOrgParamSchema = z.object({
    org: z.string(),
    migration_id: z.coerce.number(),
    repo_name: z.string(),
  })

  router.delete(
    "migrationsUnlockRepoForOrg",
    "/orgs/:org/migrations/:migration_id/repos/:repo_name/lock",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsUnlockRepoForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .migrationsUnlockRepoForOrg(
          input,
          migrationsUnlockRepoForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsUnlockRepoForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsListReposForOrgParamSchema = z.object({
    org: z.string(),
    migration_id: z.coerce.number(),
  })

  const migrationsListReposForOrgQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "migrationsListReposForOrg",
    "/orgs/:org/migrations/:migration_id/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsListReposForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          migrationsListReposForOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .migrationsListReposForOrg(
          input,
          migrationsListReposForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsListReposForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListOrgRolesParamSchema = z.object({ org: z.string() })

  router.get(
    "orgsListOrgRoles",
    "/orgs/:org/organization-roles",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListOrgRolesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsListOrgRoles(input, orgsListOrgRolesResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListOrgRolesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsRevokeAllOrgRolesTeamParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  router.delete(
    "orgsRevokeAllOrgRolesTeam",
    "/orgs/:org/organization-roles/teams/:team_slug",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsRevokeAllOrgRolesTeamParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsRevokeAllOrgRolesTeam(
          input,
          orgsRevokeAllOrgRolesTeamResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsRevokeAllOrgRolesTeamResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsAssignTeamToOrgRoleParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    role_id: z.coerce.number(),
  })

  router.put(
    "orgsAssignTeamToOrgRole",
    "/orgs/:org/organization-roles/teams/:team_slug/:role_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsAssignTeamToOrgRoleParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsAssignTeamToOrgRole(input, orgsAssignTeamToOrgRoleResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsAssignTeamToOrgRoleResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsRevokeOrgRoleTeamParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    role_id: z.coerce.number(),
  })

  router.delete(
    "orgsRevokeOrgRoleTeam",
    "/orgs/:org/organization-roles/teams/:team_slug/:role_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsRevokeOrgRoleTeamParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsRevokeOrgRoleTeam(input, orgsRevokeOrgRoleTeamResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsRevokeOrgRoleTeamResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsRevokeAllOrgRolesUserParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  router.delete(
    "orgsRevokeAllOrgRolesUser",
    "/orgs/:org/organization-roles/users/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsRevokeAllOrgRolesUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsRevokeAllOrgRolesUser(
          input,
          orgsRevokeAllOrgRolesUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsRevokeAllOrgRolesUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsAssignUserToOrgRoleParamSchema = z.object({
    org: z.string(),
    username: z.string(),
    role_id: z.coerce.number(),
  })

  router.put(
    "orgsAssignUserToOrgRole",
    "/orgs/:org/organization-roles/users/:username/:role_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsAssignUserToOrgRoleParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsAssignUserToOrgRole(input, orgsAssignUserToOrgRoleResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsAssignUserToOrgRoleResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsRevokeOrgRoleUserParamSchema = z.object({
    org: z.string(),
    username: z.string(),
    role_id: z.coerce.number(),
  })

  router.delete(
    "orgsRevokeOrgRoleUser",
    "/orgs/:org/organization-roles/users/:username/:role_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsRevokeOrgRoleUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsRevokeOrgRoleUser(input, orgsRevokeOrgRoleUserResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsRevokeOrgRoleUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsGetOrgRoleParamSchema = z.object({
    org: z.string(),
    role_id: z.coerce.number(),
  })

  router.get(
    "orgsGetOrgRole",
    "/orgs/:org/organization-roles/:role_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsGetOrgRoleParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsGetOrgRole(input, orgsGetOrgRoleResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsGetOrgRoleResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListOrgRoleTeamsParamSchema = z.object({
    org: z.string(),
    role_id: z.coerce.number(),
  })

  const orgsListOrgRoleTeamsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "orgsListOrgRoleTeams",
    "/orgs/:org/organization-roles/:role_id/teams",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListOrgRoleTeamsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListOrgRoleTeamsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsListOrgRoleTeams(input, orgsListOrgRoleTeamsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListOrgRoleTeamsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListOrgRoleUsersParamSchema = z.object({
    org: z.string(),
    role_id: z.coerce.number(),
  })

  const orgsListOrgRoleUsersQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "orgsListOrgRoleUsers",
    "/orgs/:org/organization-roles/:role_id/users",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListOrgRoleUsersParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListOrgRoleUsersQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsListOrgRoleUsers(input, orgsListOrgRoleUsersResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListOrgRoleUsersResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListOutsideCollaboratorsParamSchema = z.object({ org: z.string() })

  const orgsListOutsideCollaboratorsQuerySchema = z.object({
    filter: z.enum(["2fa_disabled", "all"]).optional().default("all"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "orgsListOutsideCollaborators",
    "/orgs/:org/outside_collaborators",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListOutsideCollaboratorsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListOutsideCollaboratorsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsListOutsideCollaborators(
          input,
          orgsListOutsideCollaboratorsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListOutsideCollaboratorsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsConvertMemberToOutsideCollaboratorParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  const orgsConvertMemberToOutsideCollaboratorBodySchema = z
    .object({ async: PermissiveBoolean.optional().default(false) })
    .optional()

  router.put(
    "orgsConvertMemberToOutsideCollaborator",
    "/orgs/:org/outside_collaborators/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsConvertMemberToOutsideCollaboratorParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsConvertMemberToOutsideCollaboratorBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .orgsConvertMemberToOutsideCollaborator(
          input,
          orgsConvertMemberToOutsideCollaboratorResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsConvertMemberToOutsideCollaboratorResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsRemoveOutsideCollaboratorParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  router.delete(
    "orgsRemoveOutsideCollaborator",
    "/orgs/:org/outside_collaborators/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsRemoveOutsideCollaboratorParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsRemoveOutsideCollaborator(
          input,
          orgsRemoveOutsideCollaboratorResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsRemoveOutsideCollaboratorResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const packagesListPackagesForOrganizationParamSchema = z.object({
    org: z.string(),
  })

  const packagesListPackagesForOrganizationQuerySchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    visibility: z.enum(["public", "private", "internal"]).optional(),
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
  })

  router.get(
    "packagesListPackagesForOrganization",
    "/orgs/:org/packages",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesListPackagesForOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          packagesListPackagesForOrganizationQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesListPackagesForOrganization(
          input,
          packagesListPackagesForOrganizationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesListPackagesForOrganizationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const packagesGetPackageForOrganizationParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    org: z.string(),
  })

  router.get(
    "packagesGetPackageForOrganization",
    "/orgs/:org/packages/:package_type/:package_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesGetPackageForOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesGetPackageForOrganization(
          input,
          packagesGetPackageForOrganizationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesGetPackageForOrganizationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const packagesDeletePackageForOrgParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    org: z.string(),
  })

  router.delete(
    "packagesDeletePackageForOrg",
    "/orgs/:org/packages/:package_type/:package_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesDeletePackageForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesDeletePackageForOrg(
          input,
          packagesDeletePackageForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesDeletePackageForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const packagesRestorePackageForOrgParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    org: z.string(),
  })

  const packagesRestorePackageForOrgQuerySchema = z.object({
    token: z.string().optional(),
  })

  router.post(
    "packagesRestorePackageForOrg",
    "/orgs/:org/packages/:package_type/:package_name/restore",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesRestorePackageForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          packagesRestorePackageForOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesRestorePackageForOrg(
          input,
          packagesRestorePackageForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesRestorePackageForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const packagesGetAllPackageVersionsForPackageOwnedByOrgParamSchema = z.object(
    {
      package_type: z.enum([
        "npm",
        "maven",
        "rubygems",
        "docker",
        "nuget",
        "container",
      ]),
      package_name: z.string(),
      org: z.string(),
    },
  )

  const packagesGetAllPackageVersionsForPackageOwnedByOrgQuerySchema = z.object(
    {
      page: z.coerce.number().optional().default(1),
      per_page: z.coerce.number().optional().default(30),
      state: z.enum(["active", "deleted"]).optional().default("active"),
    },
  )

  router.get(
    "packagesGetAllPackageVersionsForPackageOwnedByOrg",
    "/orgs/:org/packages/:package_type/:package_name/versions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesGetAllPackageVersionsForPackageOwnedByOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          packagesGetAllPackageVersionsForPackageOwnedByOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesGetAllPackageVersionsForPackageOwnedByOrg(
          input,
          packagesGetAllPackageVersionsForPackageOwnedByOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        packagesGetAllPackageVersionsForPackageOwnedByOrgResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const packagesGetPackageVersionForOrganizationParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    org: z.string(),
    package_version_id: z.coerce.number(),
  })

  router.get(
    "packagesGetPackageVersionForOrganization",
    "/orgs/:org/packages/:package_type/:package_name/versions/:package_version_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesGetPackageVersionForOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesGetPackageVersionForOrganization(
          input,
          packagesGetPackageVersionForOrganizationResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesGetPackageVersionForOrganizationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const packagesDeletePackageVersionForOrgParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    org: z.string(),
    package_version_id: z.coerce.number(),
  })

  router.delete(
    "packagesDeletePackageVersionForOrg",
    "/orgs/:org/packages/:package_type/:package_name/versions/:package_version_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesDeletePackageVersionForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesDeletePackageVersionForOrg(
          input,
          packagesDeletePackageVersionForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesDeletePackageVersionForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const packagesRestorePackageVersionForOrgParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    org: z.string(),
    package_version_id: z.coerce.number(),
  })

  router.post(
    "packagesRestorePackageVersionForOrg",
    "/orgs/:org/packages/:package_type/:package_name/versions/:package_version_id/restore",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesRestorePackageVersionForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesRestorePackageVersionForOrg(
          input,
          packagesRestorePackageVersionForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesRestorePackageVersionForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsListPatGrantRequestsParamSchema = z.object({ org: z.string() })

  const orgsListPatGrantRequestsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
    sort: z.enum(["created_at"]).optional().default("created_at"),
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    owner: z
      .preprocess(
        (it: unknown) => (Array.isArray(it) || it === undefined ? it : [it]),
        z.array(z.string()).max(10),
      )
      .optional(),
    repository: z.string().optional(),
    permission: z.string().optional(),
    last_used_before: z.string().datetime({ offset: true }).optional(),
    last_used_after: z.string().datetime({ offset: true }).optional(),
    token_id: z
      .preprocess(
        (it: unknown) => (Array.isArray(it) || it === undefined ? it : [it]),
        z.array(z.string()).max(50),
      )
      .optional(),
  })

  router.get(
    "orgsListPatGrantRequests",
    "/orgs/:org/personal-access-token-requests",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListPatGrantRequestsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListPatGrantRequestsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsListPatGrantRequests(input, orgsListPatGrantRequestsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListPatGrantRequestsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsReviewPatGrantRequestsInBulkParamSchema = z.object({
    org: z.string(),
  })

  const orgsReviewPatGrantRequestsInBulkBodySchema = z.object({
    pat_request_ids: z.array(z.coerce.number()).min(1).max(100).optional(),
    action: z.enum(["approve", "deny"]),
    reason: z.string().max(1024).nullable().optional(),
  })

  router.post(
    "orgsReviewPatGrantRequestsInBulk",
    "/orgs/:org/personal-access-token-requests",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsReviewPatGrantRequestsInBulkParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsReviewPatGrantRequestsInBulkBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .orgsReviewPatGrantRequestsInBulk(
          input,
          orgsReviewPatGrantRequestsInBulkResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsReviewPatGrantRequestsInBulkResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsReviewPatGrantRequestParamSchema = z.object({
    org: z.string(),
    pat_request_id: z.coerce.number(),
  })

  const orgsReviewPatGrantRequestBodySchema = z.object({
    action: z.enum(["approve", "deny"]),
    reason: z.string().max(1024).nullable().optional(),
  })

  router.post(
    "orgsReviewPatGrantRequest",
    "/orgs/:org/personal-access-token-requests/:pat_request_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsReviewPatGrantRequestParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsReviewPatGrantRequestBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .orgsReviewPatGrantRequest(
          input,
          orgsReviewPatGrantRequestResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsReviewPatGrantRequestResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListPatGrantRequestRepositoriesParamSchema = z.object({
    org: z.string(),
    pat_request_id: z.coerce.number(),
  })

  const orgsListPatGrantRequestRepositoriesQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "orgsListPatGrantRequestRepositories",
    "/orgs/:org/personal-access-token-requests/:pat_request_id/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListPatGrantRequestRepositoriesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListPatGrantRequestRepositoriesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsListPatGrantRequestRepositories(
          input,
          orgsListPatGrantRequestRepositoriesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListPatGrantRequestRepositoriesResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsListPatGrantsParamSchema = z.object({ org: z.string() })

  const orgsListPatGrantsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
    sort: z.enum(["created_at"]).optional().default("created_at"),
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    owner: z
      .preprocess(
        (it: unknown) => (Array.isArray(it) || it === undefined ? it : [it]),
        z.array(z.string()).max(10),
      )
      .optional(),
    repository: z.string().optional(),
    permission: z.string().optional(),
    last_used_before: z.string().datetime({ offset: true }).optional(),
    last_used_after: z.string().datetime({ offset: true }).optional(),
    token_id: z
      .preprocess(
        (it: unknown) => (Array.isArray(it) || it === undefined ? it : [it]),
        z.array(z.string()).max(50),
      )
      .optional(),
  })

  router.get(
    "orgsListPatGrants",
    "/orgs/:org/personal-access-tokens",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListPatGrantsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListPatGrantsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsListPatGrants(input, orgsListPatGrantsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListPatGrantsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsUpdatePatAccessesParamSchema = z.object({ org: z.string() })

  const orgsUpdatePatAccessesBodySchema = z.object({
    action: z.enum(["revoke"]),
    pat_ids: z.array(z.coerce.number()).min(1).max(100),
  })

  router.post(
    "orgsUpdatePatAccesses",
    "/orgs/:org/personal-access-tokens",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsUpdatePatAccessesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsUpdatePatAccessesBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .orgsUpdatePatAccesses(input, orgsUpdatePatAccessesResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsUpdatePatAccessesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsUpdatePatAccessParamSchema = z.object({
    org: z.string(),
    pat_id: z.coerce.number(),
  })

  const orgsUpdatePatAccessBodySchema = z.object({ action: z.enum(["revoke"]) })

  router.post(
    "orgsUpdatePatAccess",
    "/orgs/:org/personal-access-tokens/:pat_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsUpdatePatAccessParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsUpdatePatAccessBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .orgsUpdatePatAccess(input, orgsUpdatePatAccessResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsUpdatePatAccessResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListPatGrantRepositoriesParamSchema = z.object({
    org: z.string(),
    pat_id: z.coerce.number(),
  })

  const orgsListPatGrantRepositoriesQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "orgsListPatGrantRepositories",
    "/orgs/:org/personal-access-tokens/:pat_id/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListPatGrantRepositoriesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListPatGrantRepositoriesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsListPatGrantRepositories(
          input,
          orgsListPatGrantRepositoriesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListPatGrantRepositoriesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const privateRegistriesListOrgPrivateRegistriesParamSchema = z.object({
    org: z.string(),
  })

  const privateRegistriesListOrgPrivateRegistriesQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "privateRegistriesListOrgPrivateRegistries",
    "/orgs/:org/private-registries",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          privateRegistriesListOrgPrivateRegistriesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          privateRegistriesListOrgPrivateRegistriesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .privateRegistriesListOrgPrivateRegistries(
          input,
          privateRegistriesListOrgPrivateRegistriesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = privateRegistriesListOrgPrivateRegistriesResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const privateRegistriesCreateOrgPrivateRegistryParamSchema = z.object({
    org: z.string(),
  })

  const privateRegistriesCreateOrgPrivateRegistryBodySchema = z.object({
    registry_type: z.enum(["maven_repository"]),
    username: z.string().nullable().optional(),
    encrypted_value: z
      .string()
      .regex(
        new RegExp(
          "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$",
        ),
      ),
    key_id: z.string(),
    visibility: z.enum(["all", "private", "selected"]),
    selected_repository_ids: z.array(z.coerce.number()).optional(),
  })

  router.post(
    "privateRegistriesCreateOrgPrivateRegistry",
    "/orgs/:org/private-registries",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          privateRegistriesCreateOrgPrivateRegistryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          privateRegistriesCreateOrgPrivateRegistryBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .privateRegistriesCreateOrgPrivateRegistry(
          input,
          privateRegistriesCreateOrgPrivateRegistryResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = privateRegistriesCreateOrgPrivateRegistryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const privateRegistriesGetOrgPublicKeyParamSchema = z.object({
    org: z.string(),
  })

  router.get(
    "privateRegistriesGetOrgPublicKey",
    "/orgs/:org/private-registries/public-key",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          privateRegistriesGetOrgPublicKeyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .privateRegistriesGetOrgPublicKey(
          input,
          privateRegistriesGetOrgPublicKeyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = privateRegistriesGetOrgPublicKeyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const privateRegistriesGetOrgPrivateRegistryParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  router.get(
    "privateRegistriesGetOrgPrivateRegistry",
    "/orgs/:org/private-registries/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          privateRegistriesGetOrgPrivateRegistryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .privateRegistriesGetOrgPrivateRegistry(
          input,
          privateRegistriesGetOrgPrivateRegistryResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = privateRegistriesGetOrgPrivateRegistryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const privateRegistriesUpdateOrgPrivateRegistryParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const privateRegistriesUpdateOrgPrivateRegistryBodySchema = z.object({
    registry_type: z.enum(["maven_repository"]).optional(),
    username: z.string().nullable().optional(),
    encrypted_value: z
      .string()
      .regex(
        new RegExp(
          "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$",
        ),
      )
      .optional(),
    key_id: z.string().optional(),
    visibility: z.enum(["all", "private", "selected"]).optional(),
    selected_repository_ids: z.array(z.coerce.number()).optional(),
  })

  router.patch(
    "privateRegistriesUpdateOrgPrivateRegistry",
    "/orgs/:org/private-registries/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          privateRegistriesUpdateOrgPrivateRegistryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          privateRegistriesUpdateOrgPrivateRegistryBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .privateRegistriesUpdateOrgPrivateRegistry(
          input,
          privateRegistriesUpdateOrgPrivateRegistryResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = privateRegistriesUpdateOrgPrivateRegistryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const privateRegistriesDeleteOrgPrivateRegistryParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  router.delete(
    "privateRegistriesDeleteOrgPrivateRegistry",
    "/orgs/:org/private-registries/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          privateRegistriesDeleteOrgPrivateRegistryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .privateRegistriesDeleteOrgPrivateRegistry(
          input,
          privateRegistriesDeleteOrgPrivateRegistryResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = privateRegistriesDeleteOrgPrivateRegistryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const projectsListForOrgParamSchema = z.object({ org: z.string() })

  const projectsListForOrgQuerySchema = z.object({
    state: z.enum(["open", "closed", "all"]).optional().default("open"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get("projectsListForOrg", "/orgs/:org/projects", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        projectsListForOrgParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: parseRequestInput(
        projectsListForOrgQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .projectsListForOrg(input, projectsListForOrgResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = projectsListForOrgResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const projectsCreateForOrgParamSchema = z.object({ org: z.string() })

  const projectsCreateForOrgBodySchema = z.object({
    name: z.string(),
    body: z.string().optional(),
  })

  router.post(
    "projectsCreateForOrg",
    "/orgs/:org/projects",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsCreateForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          projectsCreateForOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .projectsCreateForOrg(input, projectsCreateForOrgResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsCreateForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsGetAllCustomPropertiesParamSchema = z.object({ org: z.string() })

  router.get(
    "orgsGetAllCustomProperties",
    "/orgs/:org/properties/schema",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsGetAllCustomPropertiesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsGetAllCustomProperties(
          input,
          orgsGetAllCustomPropertiesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsGetAllCustomPropertiesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsCreateOrUpdateCustomPropertiesParamSchema = z.object({
    org: z.string(),
  })

  const orgsCreateOrUpdateCustomPropertiesBodySchema = z.object({
    properties: z.array(s_custom_property).min(1).max(100),
  })

  router.patch(
    "orgsCreateOrUpdateCustomProperties",
    "/orgs/:org/properties/schema",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsCreateOrUpdateCustomPropertiesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsCreateOrUpdateCustomPropertiesBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .orgsCreateOrUpdateCustomProperties(
          input,
          orgsCreateOrUpdateCustomPropertiesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsCreateOrUpdateCustomPropertiesResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsGetCustomPropertyParamSchema = z.object({
    org: z.string(),
    custom_property_name: z.string(),
  })

  router.get(
    "orgsGetCustomProperty",
    "/orgs/:org/properties/schema/:custom_property_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsGetCustomPropertyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsGetCustomProperty(input, orgsGetCustomPropertyResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsGetCustomPropertyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsCreateOrUpdateCustomPropertyParamSchema = z.object({
    org: z.string(),
    custom_property_name: z.string(),
  })

  const orgsCreateOrUpdateCustomPropertyBodySchema =
    s_custom_property_set_payload

  router.put(
    "orgsCreateOrUpdateCustomProperty",
    "/orgs/:org/properties/schema/:custom_property_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsCreateOrUpdateCustomPropertyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsCreateOrUpdateCustomPropertyBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .orgsCreateOrUpdateCustomProperty(
          input,
          orgsCreateOrUpdateCustomPropertyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsCreateOrUpdateCustomPropertyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsRemoveCustomPropertyParamSchema = z.object({
    org: z.string(),
    custom_property_name: z.string(),
  })

  router.delete(
    "orgsRemoveCustomProperty",
    "/orgs/:org/properties/schema/:custom_property_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsRemoveCustomPropertyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsRemoveCustomProperty(input, orgsRemoveCustomPropertyResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsRemoveCustomPropertyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListCustomPropertiesValuesForReposParamSchema = z.object({
    org: z.string(),
  })

  const orgsListCustomPropertiesValuesForReposQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
    repository_query: z.string().optional(),
  })

  router.get(
    "orgsListCustomPropertiesValuesForRepos",
    "/orgs/:org/properties/values",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListCustomPropertiesValuesForReposParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListCustomPropertiesValuesForReposQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsListCustomPropertiesValuesForRepos(
          input,
          orgsListCustomPropertiesValuesForReposResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListCustomPropertiesValuesForReposResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsCreateOrUpdateCustomPropertiesValuesForReposParamSchema = z.object({
    org: z.string(),
  })

  const orgsCreateOrUpdateCustomPropertiesValuesForReposBodySchema = z.object({
    repository_names: z.array(z.string()).min(1).max(30),
    properties: z.array(s_custom_property_value),
  })

  router.patch(
    "orgsCreateOrUpdateCustomPropertiesValuesForRepos",
    "/orgs/:org/properties/values",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsCreateOrUpdateCustomPropertiesValuesForReposParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsCreateOrUpdateCustomPropertiesValuesForReposBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .orgsCreateOrUpdateCustomPropertiesValuesForRepos(
          input,
          orgsCreateOrUpdateCustomPropertiesValuesForReposResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        orgsCreateOrUpdateCustomPropertiesValuesForReposResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const orgsListPublicMembersParamSchema = z.object({ org: z.string() })

  const orgsListPublicMembersQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "orgsListPublicMembers",
    "/orgs/:org/public_members",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListPublicMembersParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListPublicMembersQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsListPublicMembers(input, orgsListPublicMembersResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListPublicMembersResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsCheckPublicMembershipForUserParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  router.get(
    "orgsCheckPublicMembershipForUser",
    "/orgs/:org/public_members/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsCheckPublicMembershipForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsCheckPublicMembershipForUser(
          input,
          orgsCheckPublicMembershipForUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsCheckPublicMembershipForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsSetPublicMembershipForAuthenticatedUserParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  router.put(
    "orgsSetPublicMembershipForAuthenticatedUser",
    "/orgs/:org/public_members/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsSetPublicMembershipForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsSetPublicMembershipForAuthenticatedUser(
          input,
          orgsSetPublicMembershipForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsSetPublicMembershipForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsRemovePublicMembershipForAuthenticatedUserParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  router.delete(
    "orgsRemovePublicMembershipForAuthenticatedUser",
    "/orgs/:org/public_members/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsRemovePublicMembershipForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsRemovePublicMembershipForAuthenticatedUser(
          input,
          orgsRemovePublicMembershipForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        orgsRemovePublicMembershipForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const reposListForOrgParamSchema = z.object({ org: z.string() })

  const reposListForOrgQuerySchema = z.object({
    type: z
      .enum(["all", "public", "private", "forks", "sources", "member"])
      .optional()
      .default("all"),
    sort: z
      .enum(["created", "updated", "pushed", "full_name"])
      .optional()
      .default("created"),
    direction: z.enum(["asc", "desc"]).optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get("reposListForOrg", "/orgs/:org/repos", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        reposListForOrgParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: parseRequestInput(
        reposListForOrgQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .reposListForOrg(input, reposListForOrgResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = reposListForOrgResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const reposCreateInOrgParamSchema = z.object({ org: z.string() })

  const reposCreateInOrgBodySchema = z.object({
    name: z.string(),
    description: z.string().optional(),
    homepage: z.string().optional(),
    private: PermissiveBoolean.optional().default(false),
    visibility: z.enum(["public", "private"]).optional(),
    has_issues: PermissiveBoolean.optional().default(true),
    has_projects: PermissiveBoolean.optional().default(true),
    has_wiki: PermissiveBoolean.optional().default(true),
    has_downloads: PermissiveBoolean.optional().default(true),
    is_template: PermissiveBoolean.optional().default(false),
    team_id: z.coerce.number().optional(),
    auto_init: PermissiveBoolean.optional().default(false),
    gitignore_template: z.string().optional(),
    license_template: z.string().optional(),
    allow_squash_merge: PermissiveBoolean.optional().default(true),
    allow_merge_commit: PermissiveBoolean.optional().default(true),
    allow_rebase_merge: PermissiveBoolean.optional().default(true),
    allow_auto_merge: PermissiveBoolean.optional().default(false),
    delete_branch_on_merge: PermissiveBoolean.optional().default(false),
    use_squash_pr_title_as_default: PermissiveBoolean.optional().default(false),
    squash_merge_commit_title: z
      .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
      .optional(),
    squash_merge_commit_message: z
      .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
      .optional(),
    merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
    merge_commit_message: z.enum(["PR_BODY", "PR_TITLE", "BLANK"]).optional(),
    custom_properties: z.record(z.unknown()).optional(),
  })

  router.post("reposCreateInOrg", "/orgs/:org/repos", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        reposCreateInOrgParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        reposCreateInOrgBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const response = await implementation
      .reposCreateInOrg(input, reposCreateInOrgResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = reposCreateInOrgResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const reposGetOrgRulesetsParamSchema = z.object({ org: z.string() })

  const reposGetOrgRulesetsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
    targets: z.string().optional(),
  })

  router.get(
    "reposGetOrgRulesets",
    "/orgs/:org/rulesets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetOrgRulesetsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetOrgRulesetsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetOrgRulesets(input, reposGetOrgRulesetsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetOrgRulesetsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateOrgRulesetParamSchema = z.object({ org: z.string() })

  const reposCreateOrgRulesetBodySchema = z.object({
    name: z.string(),
    target: z
      .enum(["branch", "tag", "push", "repository"])
      .optional()
      .default("branch"),
    enforcement: s_repository_rule_enforcement,
    bypass_actors: z.array(s_repository_ruleset_bypass_actor).optional(),
    conditions: s_org_ruleset_conditions.optional(),
    rules: z.array(s_repository_rule).optional(),
  })

  router.post(
    "reposCreateOrgRuleset",
    "/orgs/:org/rulesets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateOrgRulesetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateOrgRulesetBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposCreateOrgRuleset(input, reposCreateOrgRulesetResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateOrgRulesetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetOrgRuleSuitesParamSchema = z.object({ org: z.string() })

  const reposGetOrgRuleSuitesQuerySchema = z.object({
    ref: z.string().optional(),
    repository_name: z.string().optional(),
    time_period: z
      .enum(["hour", "day", "week", "month"])
      .optional()
      .default("day"),
    actor_name: z.string().optional(),
    rule_suite_result: z
      .enum(["pass", "fail", "bypass", "all"])
      .optional()
      .default("all"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposGetOrgRuleSuites",
    "/orgs/:org/rulesets/rule-suites",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetOrgRuleSuitesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetOrgRuleSuitesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetOrgRuleSuites(input, reposGetOrgRuleSuitesResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetOrgRuleSuitesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetOrgRuleSuiteParamSchema = z.object({
    org: z.string(),
    rule_suite_id: z.coerce.number(),
  })

  router.get(
    "reposGetOrgRuleSuite",
    "/orgs/:org/rulesets/rule-suites/:rule_suite_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetOrgRuleSuiteParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetOrgRuleSuite(input, reposGetOrgRuleSuiteResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetOrgRuleSuiteResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetOrgRulesetParamSchema = z.object({
    org: z.string(),
    ruleset_id: z.coerce.number(),
  })

  router.get(
    "reposGetOrgRuleset",
    "/orgs/:org/rulesets/:ruleset_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetOrgRulesetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetOrgRuleset(input, reposGetOrgRulesetResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetOrgRulesetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUpdateOrgRulesetParamSchema = z.object({
    org: z.string(),
    ruleset_id: z.coerce.number(),
  })

  const reposUpdateOrgRulesetBodySchema = z
    .object({
      name: z.string().optional(),
      target: z.enum(["branch", "tag", "push", "repository"]).optional(),
      enforcement: s_repository_rule_enforcement.optional(),
      bypass_actors: z.array(s_repository_ruleset_bypass_actor).optional(),
      conditions: s_org_ruleset_conditions.optional(),
      rules: z.array(s_repository_rule).optional(),
    })
    .optional()

  router.put(
    "reposUpdateOrgRuleset",
    "/orgs/:org/rulesets/:ruleset_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdateOrgRulesetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdateOrgRulesetBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposUpdateOrgRuleset(input, reposUpdateOrgRulesetResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdateOrgRulesetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteOrgRulesetParamSchema = z.object({
    org: z.string(),
    ruleset_id: z.coerce.number(),
  })

  router.delete(
    "reposDeleteOrgRuleset",
    "/orgs/:org/rulesets/:ruleset_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteOrgRulesetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDeleteOrgRuleset(input, reposDeleteOrgRulesetResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteOrgRulesetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsGetOrgRulesetHistoryParamSchema = z.object({
    org: z.string(),
    ruleset_id: z.coerce.number(),
  })

  const orgsGetOrgRulesetHistoryQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "orgsGetOrgRulesetHistory",
    "/orgs/:org/rulesets/:ruleset_id/history",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsGetOrgRulesetHistoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsGetOrgRulesetHistoryQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsGetOrgRulesetHistory(input, orgsGetOrgRulesetHistoryResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsGetOrgRulesetHistoryResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsGetOrgRulesetVersionParamSchema = z.object({
    org: z.string(),
    ruleset_id: z.coerce.number(),
    version_id: z.coerce.number(),
  })

  router.get(
    "orgsGetOrgRulesetVersion",
    "/orgs/:org/rulesets/:ruleset_id/history/:version_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsGetOrgRulesetVersionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsGetOrgRulesetVersion(input, orgsGetOrgRulesetVersionResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsGetOrgRulesetVersionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const secretScanningListAlertsForOrgParamSchema = z.object({
    org: z.string(),
  })

  const secretScanningListAlertsForOrgQuerySchema = z.object({
    state: z.enum(["open", "resolved"]).optional(),
    secret_type: z.string().optional(),
    resolution: z.string().optional(),
    sort: z.enum(["created", "updated"]).optional().default("created"),
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
    before: z.string().optional(),
    after: z.string().optional(),
    validity: z.string().optional(),
    is_publicly_leaked: PermissiveBoolean.optional().default(false),
    is_multi_repo: PermissiveBoolean.optional().default(false),
  })

  router.get(
    "secretScanningListAlertsForOrg",
    "/orgs/:org/secret-scanning/alerts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          secretScanningListAlertsForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          secretScanningListAlertsForOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .secretScanningListAlertsForOrg(
          input,
          secretScanningListAlertsForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = secretScanningListAlertsForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const securityAdvisoriesListOrgRepositoryAdvisoriesParamSchema = z.object({
    org: z.string(),
  })

  const securityAdvisoriesListOrgRepositoryAdvisoriesQuerySchema = z.object({
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    sort: z
      .enum(["created", "updated", "published"])
      .optional()
      .default("created"),
    before: z.string().optional(),
    after: z.string().optional(),
    per_page: z.coerce.number().min(1).max(100).optional().default(30),
    state: z.enum(["triage", "draft", "published", "closed"]).optional(),
  })

  router.get(
    "securityAdvisoriesListOrgRepositoryAdvisories",
    "/orgs/:org/security-advisories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          securityAdvisoriesListOrgRepositoryAdvisoriesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          securityAdvisoriesListOrgRepositoryAdvisoriesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .securityAdvisoriesListOrgRepositoryAdvisories(
          input,
          securityAdvisoriesListOrgRepositoryAdvisoriesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = securityAdvisoriesListOrgRepositoryAdvisoriesResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsListSecurityManagerTeamsParamSchema = z.object({ org: z.string() })

  router.get(
    "orgsListSecurityManagerTeams",
    "/orgs/:org/security-managers",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListSecurityManagerTeamsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsListSecurityManagerTeams(
          input,
          orgsListSecurityManagerTeamsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListSecurityManagerTeamsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsAddSecurityManagerTeamParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  router.put(
    "orgsAddSecurityManagerTeam",
    "/orgs/:org/security-managers/teams/:team_slug",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsAddSecurityManagerTeamParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsAddSecurityManagerTeam(
          input,
          orgsAddSecurityManagerTeamResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsAddSecurityManagerTeamResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsRemoveSecurityManagerTeamParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  router.delete(
    "orgsRemoveSecurityManagerTeam",
    "/orgs/:org/security-managers/teams/:team_slug",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsRemoveSecurityManagerTeamParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsRemoveSecurityManagerTeam(
          input,
          orgsRemoveSecurityManagerTeamResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsRemoveSecurityManagerTeamResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const billingGetGithubActionsBillingOrgParamSchema = z.object({
    org: z.string(),
  })

  router.get(
    "billingGetGithubActionsBillingOrg",
    "/orgs/:org/settings/billing/actions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          billingGetGithubActionsBillingOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .billingGetGithubActionsBillingOrg(
          input,
          billingGetGithubActionsBillingOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = billingGetGithubActionsBillingOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const billingGetGithubPackagesBillingOrgParamSchema = z.object({
    org: z.string(),
  })

  router.get(
    "billingGetGithubPackagesBillingOrg",
    "/orgs/:org/settings/billing/packages",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          billingGetGithubPackagesBillingOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .billingGetGithubPackagesBillingOrg(
          input,
          billingGetGithubPackagesBillingOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = billingGetGithubPackagesBillingOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const billingGetSharedStorageBillingOrgParamSchema = z.object({
    org: z.string(),
  })

  router.get(
    "billingGetSharedStorageBillingOrg",
    "/orgs/:org/settings/billing/shared-storage",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          billingGetSharedStorageBillingOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .billingGetSharedStorageBillingOrg(
          input,
          billingGetSharedStorageBillingOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = billingGetSharedStorageBillingOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const hostedComputeListNetworkConfigurationsForOrgParamSchema = z.object({
    org: z.string(),
  })

  const hostedComputeListNetworkConfigurationsForOrgQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "hostedComputeListNetworkConfigurationsForOrg",
    "/orgs/:org/settings/network-configurations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          hostedComputeListNetworkConfigurationsForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          hostedComputeListNetworkConfigurationsForOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .hostedComputeListNetworkConfigurationsForOrg(
          input,
          hostedComputeListNetworkConfigurationsForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = hostedComputeListNetworkConfigurationsForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const hostedComputeCreateNetworkConfigurationForOrgParamSchema = z.object({
    org: z.string(),
  })

  const hostedComputeCreateNetworkConfigurationForOrgBodySchema = z.object({
    name: z.string(),
    compute_service: z.enum(["none", "actions"]).optional(),
    network_settings_ids: z.array(z.string()).min(1).max(1),
  })

  router.post(
    "hostedComputeCreateNetworkConfigurationForOrg",
    "/orgs/:org/settings/network-configurations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          hostedComputeCreateNetworkConfigurationForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          hostedComputeCreateNetworkConfigurationForOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .hostedComputeCreateNetworkConfigurationForOrg(
          input,
          hostedComputeCreateNetworkConfigurationForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = hostedComputeCreateNetworkConfigurationForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const hostedComputeGetNetworkConfigurationForOrgParamSchema = z.object({
    org: z.string(),
    network_configuration_id: z.string(),
  })

  router.get(
    "hostedComputeGetNetworkConfigurationForOrg",
    "/orgs/:org/settings/network-configurations/:network_configuration_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          hostedComputeGetNetworkConfigurationForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .hostedComputeGetNetworkConfigurationForOrg(
          input,
          hostedComputeGetNetworkConfigurationForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = hostedComputeGetNetworkConfigurationForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const hostedComputeUpdateNetworkConfigurationForOrgParamSchema = z.object({
    org: z.string(),
    network_configuration_id: z.string(),
  })

  const hostedComputeUpdateNetworkConfigurationForOrgBodySchema = z.object({
    name: z.string().optional(),
    compute_service: z.enum(["none", "actions"]).optional(),
    network_settings_ids: z.array(z.string()).min(0).max(1).optional(),
  })

  router.patch(
    "hostedComputeUpdateNetworkConfigurationForOrg",
    "/orgs/:org/settings/network-configurations/:network_configuration_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          hostedComputeUpdateNetworkConfigurationForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          hostedComputeUpdateNetworkConfigurationForOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .hostedComputeUpdateNetworkConfigurationForOrg(
          input,
          hostedComputeUpdateNetworkConfigurationForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = hostedComputeUpdateNetworkConfigurationForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const hostedComputeDeleteNetworkConfigurationFromOrgParamSchema = z.object({
    org: z.string(),
    network_configuration_id: z.string(),
  })

  router.delete(
    "hostedComputeDeleteNetworkConfigurationFromOrg",
    "/orgs/:org/settings/network-configurations/:network_configuration_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          hostedComputeDeleteNetworkConfigurationFromOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .hostedComputeDeleteNetworkConfigurationFromOrg(
          input,
          hostedComputeDeleteNetworkConfigurationFromOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        hostedComputeDeleteNetworkConfigurationFromOrgResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const hostedComputeGetNetworkSettingsForOrgParamSchema = z.object({
    org: z.string(),
    network_settings_id: z.string(),
  })

  router.get(
    "hostedComputeGetNetworkSettingsForOrg",
    "/orgs/:org/settings/network-settings/:network_settings_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          hostedComputeGetNetworkSettingsForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .hostedComputeGetNetworkSettingsForOrg(
          input,
          hostedComputeGetNetworkSettingsForOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = hostedComputeGetNetworkSettingsForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const copilotCopilotMetricsForTeamParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  const copilotCopilotMetricsForTeamQuerySchema = z.object({
    since: z.string().optional(),
    until: z.string().optional(),
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(28),
  })

  router.get(
    "copilotCopilotMetricsForTeam",
    "/orgs/:org/team/:team_slug/copilot/metrics",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          copilotCopilotMetricsForTeamParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          copilotCopilotMetricsForTeamQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .copilotCopilotMetricsForTeam(
          input,
          copilotCopilotMetricsForTeamResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = copilotCopilotMetricsForTeamResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsListParamSchema = z.object({ org: z.string() })

  const teamsListQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get("teamsList", "/orgs/:org/teams", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        teamsListParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: parseRequestInput(
        teamsListQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .teamsList(input, teamsListResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = teamsListResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const teamsCreateParamSchema = z.object({ org: z.string() })

  const teamsCreateBodySchema = z.object({
    name: z.string(),
    description: z.string().optional(),
    maintainers: z.array(z.string()).optional(),
    repo_names: z.array(z.string()).optional(),
    privacy: z.enum(["secret", "closed"]).optional(),
    notification_setting: z
      .enum(["notifications_enabled", "notifications_disabled"])
      .optional(),
    permission: z.enum(["pull", "push"]).optional().default("pull"),
    parent_team_id: z.coerce.number().optional(),
  })

  router.post("teamsCreate", "/orgs/:org/teams", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        teamsCreateParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        teamsCreateBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const response = await implementation
      .teamsCreate(input, teamsCreateResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = teamsCreateResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const teamsGetByNameParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  router.get(
    "teamsGetByName",
    "/orgs/:org/teams/:team_slug",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsGetByNameParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsGetByName(input, teamsGetByNameResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsGetByNameResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsUpdateInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  const teamsUpdateInOrgBodySchema = z
    .object({
      name: z.string().optional(),
      description: z.string().optional(),
      privacy: z.enum(["secret", "closed"]).optional(),
      notification_setting: z
        .enum(["notifications_enabled", "notifications_disabled"])
        .optional(),
      permission: z.enum(["pull", "push", "admin"]).optional().default("pull"),
      parent_team_id: z.coerce.number().nullable().optional(),
    })
    .optional()

  router.patch(
    "teamsUpdateInOrg",
    "/orgs/:org/teams/:team_slug",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsUpdateInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsUpdateInOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .teamsUpdateInOrg(input, teamsUpdateInOrgResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsUpdateInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsDeleteInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  router.delete(
    "teamsDeleteInOrg",
    "/orgs/:org/teams/:team_slug",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsDeleteInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsDeleteInOrg(input, teamsDeleteInOrgResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsDeleteInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsListDiscussionsInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  const teamsListDiscussionsInOrgQuerySchema = z.object({
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
    pinned: z.string().optional(),
  })

  router.get(
    "teamsListDiscussionsInOrg",
    "/orgs/:org/teams/:team_slug/discussions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListDiscussionsInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListDiscussionsInOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsListDiscussionsInOrg(
          input,
          teamsListDiscussionsInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListDiscussionsInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsCreateDiscussionInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  const teamsCreateDiscussionInOrgBodySchema = z.object({
    title: z.string(),
    body: z.string(),
    private: PermissiveBoolean.optional().default(false),
  })

  router.post(
    "teamsCreateDiscussionInOrg",
    "/orgs/:org/teams/:team_slug/discussions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsCreateDiscussionInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsCreateDiscussionInOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .teamsCreateDiscussionInOrg(
          input,
          teamsCreateDiscussionInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsCreateDiscussionInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsGetDiscussionInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
  })

  router.get(
    "teamsGetDiscussionInOrg",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsGetDiscussionInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsGetDiscussionInOrg(input, teamsGetDiscussionInOrgResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsGetDiscussionInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsUpdateDiscussionInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
  })

  const teamsUpdateDiscussionInOrgBodySchema = z
    .object({ title: z.string().optional(), body: z.string().optional() })
    .optional()

  router.patch(
    "teamsUpdateDiscussionInOrg",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsUpdateDiscussionInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsUpdateDiscussionInOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .teamsUpdateDiscussionInOrg(
          input,
          teamsUpdateDiscussionInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsUpdateDiscussionInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsDeleteDiscussionInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
  })

  router.delete(
    "teamsDeleteDiscussionInOrg",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsDeleteDiscussionInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsDeleteDiscussionInOrg(
          input,
          teamsDeleteDiscussionInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsDeleteDiscussionInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsListDiscussionCommentsInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
  })

  const teamsListDiscussionCommentsInOrgQuerySchema = z.object({
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "teamsListDiscussionCommentsInOrg",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListDiscussionCommentsInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListDiscussionCommentsInOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsListDiscussionCommentsInOrg(
          input,
          teamsListDiscussionCommentsInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListDiscussionCommentsInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsCreateDiscussionCommentInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
  })

  const teamsCreateDiscussionCommentInOrgBodySchema = z.object({
    body: z.string(),
  })

  router.post(
    "teamsCreateDiscussionCommentInOrg",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsCreateDiscussionCommentInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsCreateDiscussionCommentInOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .teamsCreateDiscussionCommentInOrg(
          input,
          teamsCreateDiscussionCommentInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsCreateDiscussionCommentInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsGetDiscussionCommentInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
    comment_number: z.coerce.number(),
  })

  router.get(
    "teamsGetDiscussionCommentInOrg",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsGetDiscussionCommentInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsGetDiscussionCommentInOrg(
          input,
          teamsGetDiscussionCommentInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsGetDiscussionCommentInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsUpdateDiscussionCommentInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
    comment_number: z.coerce.number(),
  })

  const teamsUpdateDiscussionCommentInOrgBodySchema = z.object({
    body: z.string(),
  })

  router.patch(
    "teamsUpdateDiscussionCommentInOrg",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsUpdateDiscussionCommentInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsUpdateDiscussionCommentInOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .teamsUpdateDiscussionCommentInOrg(
          input,
          teamsUpdateDiscussionCommentInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsUpdateDiscussionCommentInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsDeleteDiscussionCommentInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
    comment_number: z.coerce.number(),
  })

  router.delete(
    "teamsDeleteDiscussionCommentInOrg",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsDeleteDiscussionCommentInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsDeleteDiscussionCommentInOrg(
          input,
          teamsDeleteDiscussionCommentInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsDeleteDiscussionCommentInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reactionsListForTeamDiscussionCommentInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
    comment_number: z.coerce.number(),
  })

  const reactionsListForTeamDiscussionCommentInOrgQuerySchema = z.object({
    content: z
      .enum([
        "+1",
        "-1",
        "laugh",
        "confused",
        "heart",
        "hooray",
        "rocket",
        "eyes",
      ])
      .optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reactionsListForTeamDiscussionCommentInOrg",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsListForTeamDiscussionCommentInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reactionsListForTeamDiscussionCommentInOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reactionsListForTeamDiscussionCommentInOrg(
          input,
          reactionsListForTeamDiscussionCommentInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsListForTeamDiscussionCommentInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reactionsCreateForTeamDiscussionCommentInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
    comment_number: z.coerce.number(),
  })

  const reactionsCreateForTeamDiscussionCommentInOrgBodySchema = z.object({
    content: z.enum([
      "+1",
      "-1",
      "laugh",
      "confused",
      "heart",
      "hooray",
      "rocket",
      "eyes",
    ]),
  })

  router.post(
    "reactionsCreateForTeamDiscussionCommentInOrg",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsCreateForTeamDiscussionCommentInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reactionsCreateForTeamDiscussionCommentInOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reactionsCreateForTeamDiscussionCommentInOrg(
          input,
          reactionsCreateForTeamDiscussionCommentInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsCreateForTeamDiscussionCommentInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reactionsDeleteForTeamDiscussionCommentParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
    comment_number: z.coerce.number(),
    reaction_id: z.coerce.number(),
  })

  router.delete(
    "reactionsDeleteForTeamDiscussionComment",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsDeleteForTeamDiscussionCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reactionsDeleteForTeamDiscussionComment(
          input,
          reactionsDeleteForTeamDiscussionCommentResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsDeleteForTeamDiscussionCommentResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reactionsListForTeamDiscussionInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
  })

  const reactionsListForTeamDiscussionInOrgQuerySchema = z.object({
    content: z
      .enum([
        "+1",
        "-1",
        "laugh",
        "confused",
        "heart",
        "hooray",
        "rocket",
        "eyes",
      ])
      .optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reactionsListForTeamDiscussionInOrg",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsListForTeamDiscussionInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reactionsListForTeamDiscussionInOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reactionsListForTeamDiscussionInOrg(
          input,
          reactionsListForTeamDiscussionInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsListForTeamDiscussionInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reactionsCreateForTeamDiscussionInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
  })

  const reactionsCreateForTeamDiscussionInOrgBodySchema = z.object({
    content: z.enum([
      "+1",
      "-1",
      "laugh",
      "confused",
      "heart",
      "hooray",
      "rocket",
      "eyes",
    ]),
  })

  router.post(
    "reactionsCreateForTeamDiscussionInOrg",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsCreateForTeamDiscussionInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reactionsCreateForTeamDiscussionInOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reactionsCreateForTeamDiscussionInOrg(
          input,
          reactionsCreateForTeamDiscussionInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsCreateForTeamDiscussionInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reactionsDeleteForTeamDiscussionParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
    reaction_id: z.coerce.number(),
  })

  router.delete(
    "reactionsDeleteForTeamDiscussion",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number/reactions/:reaction_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsDeleteForTeamDiscussionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reactionsDeleteForTeamDiscussion(
          input,
          reactionsDeleteForTeamDiscussionResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsDeleteForTeamDiscussionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsListPendingInvitationsInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  const teamsListPendingInvitationsInOrgQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "teamsListPendingInvitationsInOrg",
    "/orgs/:org/teams/:team_slug/invitations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListPendingInvitationsInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListPendingInvitationsInOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsListPendingInvitationsInOrg(
          input,
          teamsListPendingInvitationsInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListPendingInvitationsInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsListMembersInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  const teamsListMembersInOrgQuerySchema = z.object({
    role: z.enum(["member", "maintainer", "all"]).optional().default("all"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "teamsListMembersInOrg",
    "/orgs/:org/teams/:team_slug/members",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListMembersInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListMembersInOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsListMembersInOrg(input, teamsListMembersInOrgResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListMembersInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsGetMembershipForUserInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    username: z.string(),
  })

  router.get(
    "teamsGetMembershipForUserInOrg",
    "/orgs/:org/teams/:team_slug/memberships/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsGetMembershipForUserInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsGetMembershipForUserInOrg(
          input,
          teamsGetMembershipForUserInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsGetMembershipForUserInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsAddOrUpdateMembershipForUserInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    username: z.string(),
  })

  const teamsAddOrUpdateMembershipForUserInOrgBodySchema = z
    .object({
      role: z.enum(["member", "maintainer"]).optional().default("member"),
    })
    .optional()

  router.put(
    "teamsAddOrUpdateMembershipForUserInOrg",
    "/orgs/:org/teams/:team_slug/memberships/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsAddOrUpdateMembershipForUserInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsAddOrUpdateMembershipForUserInOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .teamsAddOrUpdateMembershipForUserInOrg(
          input,
          teamsAddOrUpdateMembershipForUserInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsAddOrUpdateMembershipForUserInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsRemoveMembershipForUserInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    username: z.string(),
  })

  router.delete(
    "teamsRemoveMembershipForUserInOrg",
    "/orgs/:org/teams/:team_slug/memberships/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsRemoveMembershipForUserInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsRemoveMembershipForUserInOrg(
          input,
          teamsRemoveMembershipForUserInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsRemoveMembershipForUserInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsListProjectsInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  const teamsListProjectsInOrgQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "teamsListProjectsInOrg",
    "/orgs/:org/teams/:team_slug/projects",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListProjectsInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListProjectsInOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsListProjectsInOrg(input, teamsListProjectsInOrgResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListProjectsInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsCheckPermissionsForProjectInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    project_id: z.coerce.number(),
  })

  router.get(
    "teamsCheckPermissionsForProjectInOrg",
    "/orgs/:org/teams/:team_slug/projects/:project_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsCheckPermissionsForProjectInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsCheckPermissionsForProjectInOrg(
          input,
          teamsCheckPermissionsForProjectInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsCheckPermissionsForProjectInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsAddOrUpdateProjectPermissionsInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    project_id: z.coerce.number(),
  })

  const teamsAddOrUpdateProjectPermissionsInOrgBodySchema = z
    .object({ permission: z.enum(["read", "write", "admin"]).optional() })
    .nullable()
    .optional()

  router.put(
    "teamsAddOrUpdateProjectPermissionsInOrg",
    "/orgs/:org/teams/:team_slug/projects/:project_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsAddOrUpdateProjectPermissionsInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsAddOrUpdateProjectPermissionsInOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .teamsAddOrUpdateProjectPermissionsInOrg(
          input,
          teamsAddOrUpdateProjectPermissionsInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsAddOrUpdateProjectPermissionsInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsRemoveProjectInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    project_id: z.coerce.number(),
  })

  router.delete(
    "teamsRemoveProjectInOrg",
    "/orgs/:org/teams/:team_slug/projects/:project_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsRemoveProjectInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsRemoveProjectInOrg(input, teamsRemoveProjectInOrgResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsRemoveProjectInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsListReposInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  const teamsListReposInOrgQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "teamsListReposInOrg",
    "/orgs/:org/teams/:team_slug/repos",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListReposInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListReposInOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsListReposInOrg(input, teamsListReposInOrgResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListReposInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsCheckPermissionsForRepoInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "teamsCheckPermissionsForRepoInOrg",
    "/orgs/:org/teams/:team_slug/repos/:owner/:repo",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsCheckPermissionsForRepoInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsCheckPermissionsForRepoInOrg(
          input,
          teamsCheckPermissionsForRepoInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsCheckPermissionsForRepoInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsAddOrUpdateRepoPermissionsInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    owner: z.string(),
    repo: z.string(),
  })

  const teamsAddOrUpdateRepoPermissionsInOrgBodySchema = z
    .object({ permission: z.string().optional() })
    .optional()

  router.put(
    "teamsAddOrUpdateRepoPermissionsInOrg",
    "/orgs/:org/teams/:team_slug/repos/:owner/:repo",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsAddOrUpdateRepoPermissionsInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsAddOrUpdateRepoPermissionsInOrgBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .teamsAddOrUpdateRepoPermissionsInOrg(
          input,
          teamsAddOrUpdateRepoPermissionsInOrgResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsAddOrUpdateRepoPermissionsInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsRemoveRepoInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    owner: z.string(),
    repo: z.string(),
  })

  router.delete(
    "teamsRemoveRepoInOrg",
    "/orgs/:org/teams/:team_slug/repos/:owner/:repo",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsRemoveRepoInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsRemoveRepoInOrg(input, teamsRemoveRepoInOrgResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsRemoveRepoInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsListChildInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  const teamsListChildInOrgQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "teamsListChildInOrg",
    "/orgs/:org/teams/:team_slug/teams",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListChildInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListChildInOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsListChildInOrg(input, teamsListChildInOrgResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListChildInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsEnableOrDisableSecurityProductOnAllOrgReposParamSchema = z.object({
    org: z.string(),
    security_product: z.enum([
      "dependency_graph",
      "dependabot_alerts",
      "dependabot_security_updates",
      "advanced_security",
      "code_scanning_default_setup",
      "secret_scanning",
      "secret_scanning_push_protection",
    ]),
    enablement: z.enum(["enable_all", "disable_all"]),
  })

  const orgsEnableOrDisableSecurityProductOnAllOrgReposBodySchema = z
    .object({ query_suite: z.enum(["default", "extended"]).optional() })
    .optional()

  router.post(
    "orgsEnableOrDisableSecurityProductOnAllOrgRepos",
    "/orgs/:org/:security_product/:enablement",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsEnableOrDisableSecurityProductOnAllOrgReposParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsEnableOrDisableSecurityProductOnAllOrgReposBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .orgsEnableOrDisableSecurityProductOnAllOrgRepos(
          input,
          orgsEnableOrDisableSecurityProductOnAllOrgReposResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        orgsEnableOrDisableSecurityProductOnAllOrgReposResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const projectsGetCardParamSchema = z.object({ card_id: z.coerce.number() })

  router.get(
    "projectsGetCard",
    "/projects/columns/cards/:card_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsGetCardParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .projectsGetCard(input, projectsGetCardResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsGetCardResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsUpdateCardParamSchema = z.object({ card_id: z.coerce.number() })

  const projectsUpdateCardBodySchema = z
    .object({
      note: z.string().nullable().optional(),
      archived: PermissiveBoolean.optional(),
    })
    .optional()

  router.patch(
    "projectsUpdateCard",
    "/projects/columns/cards/:card_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsUpdateCardParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          projectsUpdateCardBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .projectsUpdateCard(input, projectsUpdateCardResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsUpdateCardResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsDeleteCardParamSchema = z.object({ card_id: z.coerce.number() })

  router.delete(
    "projectsDeleteCard",
    "/projects/columns/cards/:card_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsDeleteCardParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .projectsDeleteCard(input, projectsDeleteCardResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsDeleteCardResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsMoveCardParamSchema = z.object({ card_id: z.coerce.number() })

  const projectsMoveCardBodySchema = z.object({
    position: z.string().regex(new RegExp("^(?:top|bottom|after:\\d+)$")),
    column_id: z.coerce.number().optional(),
  })

  router.post(
    "projectsMoveCard",
    "/projects/columns/cards/:card_id/moves",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsMoveCardParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          projectsMoveCardBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .projectsMoveCard(input, projectsMoveCardResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsMoveCardResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsGetColumnParamSchema = z.object({
    column_id: z.coerce.number(),
  })

  router.get(
    "projectsGetColumn",
    "/projects/columns/:column_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsGetColumnParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .projectsGetColumn(input, projectsGetColumnResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsGetColumnResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsUpdateColumnParamSchema = z.object({
    column_id: z.coerce.number(),
  })

  const projectsUpdateColumnBodySchema = z.object({ name: z.string() })

  router.patch(
    "projectsUpdateColumn",
    "/projects/columns/:column_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsUpdateColumnParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          projectsUpdateColumnBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .projectsUpdateColumn(input, projectsUpdateColumnResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsUpdateColumnResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsDeleteColumnParamSchema = z.object({
    column_id: z.coerce.number(),
  })

  router.delete(
    "projectsDeleteColumn",
    "/projects/columns/:column_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsDeleteColumnParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .projectsDeleteColumn(input, projectsDeleteColumnResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsDeleteColumnResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsListCardsParamSchema = z.object({
    column_id: z.coerce.number(),
  })

  const projectsListCardsQuerySchema = z.object({
    archived_state: z
      .enum(["all", "archived", "not_archived"])
      .optional()
      .default("not_archived"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "projectsListCards",
    "/projects/columns/:column_id/cards",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsListCardsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          projectsListCardsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .projectsListCards(input, projectsListCardsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsListCardsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsCreateCardParamSchema = z.object({
    column_id: z.coerce.number(),
  })

  const projectsCreateCardBodySchema = z.union([
    z.object({ note: z.string().nullable() }),
    z.object({ content_id: z.coerce.number(), content_type: z.string() }),
  ])

  router.post(
    "projectsCreateCard",
    "/projects/columns/:column_id/cards",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsCreateCardParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          projectsCreateCardBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .projectsCreateCard(input, projectsCreateCardResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsCreateCardResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsMoveColumnParamSchema = z.object({
    column_id: z.coerce.number(),
  })

  const projectsMoveColumnBodySchema = z.object({
    position: z.string().regex(new RegExp("^(?:first|last|after:\\d+)$")),
  })

  router.post(
    "projectsMoveColumn",
    "/projects/columns/:column_id/moves",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsMoveColumnParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          projectsMoveColumnBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .projectsMoveColumn(input, projectsMoveColumnResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsMoveColumnResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsGetParamSchema = z.object({ project_id: z.coerce.number() })

  router.get("projectsGet", "/projects/:project_id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        projectsGetParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .projectsGet(input, projectsGetResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = projectsGetResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const projectsUpdateParamSchema = z.object({ project_id: z.coerce.number() })

  const projectsUpdateBodySchema = z
    .object({
      name: z.string().optional(),
      body: z.string().nullable().optional(),
      state: z.string().optional(),
      organization_permission: z
        .enum(["read", "write", "admin", "none"])
        .optional(),
      private: PermissiveBoolean.optional(),
    })
    .optional()

  router.patch("projectsUpdate", "/projects/:project_id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        projectsUpdateParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        projectsUpdateBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const response = await implementation
      .projectsUpdate(input, projectsUpdateResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = projectsUpdateResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const projectsDeleteParamSchema = z.object({ project_id: z.coerce.number() })

  router.delete(
    "projectsDelete",
    "/projects/:project_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsDeleteParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .projectsDelete(input, projectsDeleteResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsDeleteResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsListCollaboratorsParamSchema = z.object({
    project_id: z.coerce.number(),
  })

  const projectsListCollaboratorsQuerySchema = z.object({
    affiliation: z.enum(["outside", "direct", "all"]).optional().default("all"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "projectsListCollaborators",
    "/projects/:project_id/collaborators",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsListCollaboratorsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          projectsListCollaboratorsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .projectsListCollaborators(
          input,
          projectsListCollaboratorsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsListCollaboratorsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsAddCollaboratorParamSchema = z.object({
    project_id: z.coerce.number(),
    username: z.string(),
  })

  const projectsAddCollaboratorBodySchema = z
    .object({
      permission: z
        .enum(["read", "write", "admin"])
        .optional()
        .default("write"),
    })
    .nullable()
    .optional()

  router.put(
    "projectsAddCollaborator",
    "/projects/:project_id/collaborators/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsAddCollaboratorParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          projectsAddCollaboratorBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .projectsAddCollaborator(input, projectsAddCollaboratorResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsAddCollaboratorResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsRemoveCollaboratorParamSchema = z.object({
    project_id: z.coerce.number(),
    username: z.string(),
  })

  router.delete(
    "projectsRemoveCollaborator",
    "/projects/:project_id/collaborators/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsRemoveCollaboratorParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .projectsRemoveCollaborator(
          input,
          projectsRemoveCollaboratorResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsRemoveCollaboratorResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsGetPermissionForUserParamSchema = z.object({
    project_id: z.coerce.number(),
    username: z.string(),
  })

  router.get(
    "projectsGetPermissionForUser",
    "/projects/:project_id/collaborators/:username/permission",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsGetPermissionForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .projectsGetPermissionForUser(
          input,
          projectsGetPermissionForUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsGetPermissionForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsListColumnsParamSchema = z.object({
    project_id: z.coerce.number(),
  })

  const projectsListColumnsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "projectsListColumns",
    "/projects/:project_id/columns",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsListColumnsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          projectsListColumnsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .projectsListColumns(input, projectsListColumnsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsListColumnsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsCreateColumnParamSchema = z.object({
    project_id: z.coerce.number(),
  })

  const projectsCreateColumnBodySchema = z.object({ name: z.string() })

  router.post(
    "projectsCreateColumn",
    "/projects/:project_id/columns",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsCreateColumnParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          projectsCreateColumnBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .projectsCreateColumn(input, projectsCreateColumnResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsCreateColumnResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  router.get("rateLimitGet", "/rate_limit", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .rateLimitGet(input, rateLimitGetResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = rateLimitGetResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const reposGetParamSchema = z.object({ owner: z.string(), repo: z.string() })

  router.get("reposGet", "/repos/:owner/:repo", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        reposGetParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .reposGet(input, reposGetResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = reposGetResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const reposUpdateParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposUpdateBodySchema = z
    .object({
      name: z.string().optional(),
      description: z.string().optional(),
      homepage: z.string().optional(),
      private: PermissiveBoolean.optional().default(false),
      visibility: z.enum(["public", "private"]).optional(),
      security_and_analysis: z
        .object({
          advanced_security: z
            .object({ status: z.string().optional() })
            .optional(),
          code_security: z.object({ status: z.string().optional() }).optional(),
          secret_scanning: z
            .object({ status: z.string().optional() })
            .optional(),
          secret_scanning_push_protection: z
            .object({ status: z.string().optional() })
            .optional(),
          secret_scanning_ai_detection: z
            .object({ status: z.string().optional() })
            .optional(),
          secret_scanning_non_provider_patterns: z
            .object({ status: z.string().optional() })
            .optional(),
        })
        .nullable()
        .optional(),
      has_issues: PermissiveBoolean.optional().default(true),
      has_projects: PermissiveBoolean.optional().default(true),
      has_wiki: PermissiveBoolean.optional().default(true),
      is_template: PermissiveBoolean.optional().default(false),
      default_branch: z.string().optional(),
      allow_squash_merge: PermissiveBoolean.optional().default(true),
      allow_merge_commit: PermissiveBoolean.optional().default(true),
      allow_rebase_merge: PermissiveBoolean.optional().default(true),
      allow_auto_merge: PermissiveBoolean.optional().default(false),
      delete_branch_on_merge: PermissiveBoolean.optional().default(false),
      allow_update_branch: PermissiveBoolean.optional().default(false),
      use_squash_pr_title_as_default:
        PermissiveBoolean.optional().default(false),
      squash_merge_commit_title: z
        .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
        .optional(),
      squash_merge_commit_message: z
        .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
        .optional(),
      merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
      merge_commit_message: z.enum(["PR_BODY", "PR_TITLE", "BLANK"]).optional(),
      archived: PermissiveBoolean.optional().default(false),
      allow_forking: PermissiveBoolean.optional().default(false),
      web_commit_signoff_required: PermissiveBoolean.optional().default(false),
    })
    .optional()

  router.patch("reposUpdate", "/repos/:owner/:repo", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        reposUpdateParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        reposUpdateBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const response = await implementation
      .reposUpdate(input, reposUpdateResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = reposUpdateResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const reposDeleteParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.delete("reposDelete", "/repos/:owner/:repo", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        reposDeleteParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .reposDelete(input, reposDeleteResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = reposDeleteResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const actionsListArtifactsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsListArtifactsForRepoQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
    name: z.string().optional(),
  })

  router.get(
    "actionsListArtifactsForRepo",
    "/repos/:owner/:repo/actions/artifacts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListArtifactsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListArtifactsForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListArtifactsForRepo(
          input,
          actionsListArtifactsForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListArtifactsForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetArtifactParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    artifact_id: z.coerce.number(),
  })

  router.get(
    "actionsGetArtifact",
    "/repos/:owner/:repo/actions/artifacts/:artifact_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetArtifactParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetArtifact(input, actionsGetArtifactResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetArtifactResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteArtifactParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    artifact_id: z.coerce.number(),
  })

  router.delete(
    "actionsDeleteArtifact",
    "/repos/:owner/:repo/actions/artifacts/:artifact_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteArtifactParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsDeleteArtifact(input, actionsDeleteArtifactResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteArtifactResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDownloadArtifactParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    artifact_id: z.coerce.number(),
    archive_format: z.string(),
  })

  router.get(
    "actionsDownloadArtifact",
    "/repos/:owner/:repo/actions/artifacts/:artifact_id/:archive_format",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDownloadArtifactParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsDownloadArtifact(input, actionsDownloadArtifactResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDownloadArtifactResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetActionsCacheUsageParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "actionsGetActionsCacheUsage",
    "/repos/:owner/:repo/actions/cache/usage",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetActionsCacheUsageParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetActionsCacheUsage(
          input,
          actionsGetActionsCacheUsageResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetActionsCacheUsageResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetActionsCacheListParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsGetActionsCacheListQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
    ref: z.string().optional(),
    key: z.string().optional(),
    sort: z
      .enum(["created_at", "last_accessed_at", "size_in_bytes"])
      .optional()
      .default("last_accessed_at"),
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
  })

  router.get(
    "actionsGetActionsCacheList",
    "/repos/:owner/:repo/actions/caches",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetActionsCacheListParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsGetActionsCacheListQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetActionsCacheList(
          input,
          actionsGetActionsCacheListResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetActionsCacheListResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteActionsCacheByKeyParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsDeleteActionsCacheByKeyQuerySchema = z.object({
    key: z.string(),
    ref: z.string().optional(),
  })

  router.delete(
    "actionsDeleteActionsCacheByKey",
    "/repos/:owner/:repo/actions/caches",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteActionsCacheByKeyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsDeleteActionsCacheByKeyQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsDeleteActionsCacheByKey(
          input,
          actionsDeleteActionsCacheByKeyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteActionsCacheByKeyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteActionsCacheByIdParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    cache_id: z.coerce.number(),
  })

  router.delete(
    "actionsDeleteActionsCacheById",
    "/repos/:owner/:repo/actions/caches/:cache_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteActionsCacheByIdParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsDeleteActionsCacheById(
          input,
          actionsDeleteActionsCacheByIdResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteActionsCacheByIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetJobForWorkflowRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    job_id: z.coerce.number(),
  })

  router.get(
    "actionsGetJobForWorkflowRun",
    "/repos/:owner/:repo/actions/jobs/:job_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetJobForWorkflowRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetJobForWorkflowRun(
          input,
          actionsGetJobForWorkflowRunResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetJobForWorkflowRunResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDownloadJobLogsForWorkflowRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    job_id: z.coerce.number(),
  })

  router.get(
    "actionsDownloadJobLogsForWorkflowRun",
    "/repos/:owner/:repo/actions/jobs/:job_id/logs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDownloadJobLogsForWorkflowRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsDownloadJobLogsForWorkflowRun(
          input,
          actionsDownloadJobLogsForWorkflowRunResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDownloadJobLogsForWorkflowRunResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsReRunJobForWorkflowRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    job_id: z.coerce.number(),
  })

  const actionsReRunJobForWorkflowRunBodySchema = z
    .object({
      enable_debug_logging: PermissiveBoolean.optional().default(false),
    })
    .nullable()
    .optional()

  router.post(
    "actionsReRunJobForWorkflowRun",
    "/repos/:owner/:repo/actions/jobs/:job_id/rerun",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsReRunJobForWorkflowRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsReRunJobForWorkflowRunBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsReRunJobForWorkflowRun(
          input,
          actionsReRunJobForWorkflowRunResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsReRunJobForWorkflowRunResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetCustomOidcSubClaimForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "actionsGetCustomOidcSubClaimForRepo",
    "/repos/:owner/:repo/actions/oidc/customization/sub",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetCustomOidcSubClaimForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetCustomOidcSubClaimForRepo(
          input,
          actionsGetCustomOidcSubClaimForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetCustomOidcSubClaimForRepoResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsSetCustomOidcSubClaimForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsSetCustomOidcSubClaimForRepoBodySchema = z.object({
    use_default: PermissiveBoolean,
    include_claim_keys: z.array(z.string()).optional(),
  })

  router.put(
    "actionsSetCustomOidcSubClaimForRepo",
    "/repos/:owner/:repo/actions/oidc/customization/sub",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetCustomOidcSubClaimForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetCustomOidcSubClaimForRepoBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsSetCustomOidcSubClaimForRepo(
          input,
          actionsSetCustomOidcSubClaimForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsSetCustomOidcSubClaimForRepoResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsListRepoOrganizationSecretsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsListRepoOrganizationSecretsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "actionsListRepoOrganizationSecrets",
    "/repos/:owner/:repo/actions/organization-secrets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListRepoOrganizationSecretsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListRepoOrganizationSecretsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListRepoOrganizationSecrets(
          input,
          actionsListRepoOrganizationSecretsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListRepoOrganizationSecretsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsListRepoOrganizationVariablesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsListRepoOrganizationVariablesQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(10),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "actionsListRepoOrganizationVariables",
    "/repos/:owner/:repo/actions/organization-variables",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListRepoOrganizationVariablesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListRepoOrganizationVariablesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListRepoOrganizationVariables(
          input,
          actionsListRepoOrganizationVariablesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListRepoOrganizationVariablesResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsGetGithubActionsPermissionsRepositoryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "actionsGetGithubActionsPermissionsRepository",
    "/repos/:owner/:repo/actions/permissions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetGithubActionsPermissionsRepositoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetGithubActionsPermissionsRepository(
          input,
          actionsGetGithubActionsPermissionsRepositoryResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetGithubActionsPermissionsRepositoryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsSetGithubActionsPermissionsRepositoryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsSetGithubActionsPermissionsRepositoryBodySchema = z.object({
    enabled: s_actions_enabled,
    allowed_actions: s_allowed_actions.optional(),
  })

  router.put(
    "actionsSetGithubActionsPermissionsRepository",
    "/repos/:owner/:repo/actions/permissions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetGithubActionsPermissionsRepositoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetGithubActionsPermissionsRepositoryBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsSetGithubActionsPermissionsRepository(
          input,
          actionsSetGithubActionsPermissionsRepositoryResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsSetGithubActionsPermissionsRepositoryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsGetWorkflowAccessToRepositoryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "actionsGetWorkflowAccessToRepository",
    "/repos/:owner/:repo/actions/permissions/access",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetWorkflowAccessToRepositoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetWorkflowAccessToRepository(
          input,
          actionsGetWorkflowAccessToRepositoryResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetWorkflowAccessToRepositoryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsSetWorkflowAccessToRepositoryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsSetWorkflowAccessToRepositoryBodySchema =
    s_actions_workflow_access_to_repository

  router.put(
    "actionsSetWorkflowAccessToRepository",
    "/repos/:owner/:repo/actions/permissions/access",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetWorkflowAccessToRepositoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetWorkflowAccessToRepositoryBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsSetWorkflowAccessToRepository(
          input,
          actionsSetWorkflowAccessToRepositoryResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsSetWorkflowAccessToRepositoryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsGetAllowedActionsRepositoryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "actionsGetAllowedActionsRepository",
    "/repos/:owner/:repo/actions/permissions/selected-actions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetAllowedActionsRepositoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetAllowedActionsRepository(
          input,
          actionsGetAllowedActionsRepositoryResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetAllowedActionsRepositoryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsSetAllowedActionsRepositoryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsSetAllowedActionsRepositoryBodySchema =
    s_selected_actions.optional()

  router.put(
    "actionsSetAllowedActionsRepository",
    "/repos/:owner/:repo/actions/permissions/selected-actions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetAllowedActionsRepositoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetAllowedActionsRepositoryBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsSetAllowedActionsRepository(
          input,
          actionsSetAllowedActionsRepositoryResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsSetAllowedActionsRepositoryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema =
    z.object({ owner: z.string(), repo: z.string() })

  router.get(
    "actionsGetGithubActionsDefaultWorkflowPermissionsRepository",
    "/repos/:owner/:repo/actions/permissions/workflow",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetGithubActionsDefaultWorkflowPermissionsRepository(
          input,
          actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema =
    z.object({ owner: z.string(), repo: z.string() })

  const actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryBodySchema =
    s_actions_set_default_workflow_permissions

  router.put(
    "actionsSetGithubActionsDefaultWorkflowPermissionsRepository",
    "/repos/:owner/:repo/actions/permissions/workflow",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsSetGithubActionsDefaultWorkflowPermissionsRepository(
          input,
          actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsListSelfHostedRunnersForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsListSelfHostedRunnersForRepoQuerySchema = z.object({
    name: z.string().optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "actionsListSelfHostedRunnersForRepo",
    "/repos/:owner/:repo/actions/runners",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListSelfHostedRunnersForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListSelfHostedRunnersForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListSelfHostedRunnersForRepo(
          input,
          actionsListSelfHostedRunnersForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListSelfHostedRunnersForRepoResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsListRunnerApplicationsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "actionsListRunnerApplicationsForRepo",
    "/repos/:owner/:repo/actions/runners/downloads",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListRunnerApplicationsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListRunnerApplicationsForRepo(
          input,
          actionsListRunnerApplicationsForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListRunnerApplicationsForRepoResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsGenerateRunnerJitconfigForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsGenerateRunnerJitconfigForRepoBodySchema = z.object({
    name: z.string(),
    runner_group_id: z.coerce.number(),
    labels: z.array(z.string()).min(1).max(100),
    work_folder: z.string().optional().default("_work"),
  })

  router.post(
    "actionsGenerateRunnerJitconfigForRepo",
    "/repos/:owner/:repo/actions/runners/generate-jitconfig",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGenerateRunnerJitconfigForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsGenerateRunnerJitconfigForRepoBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsGenerateRunnerJitconfigForRepo(
          input,
          actionsGenerateRunnerJitconfigForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGenerateRunnerJitconfigForRepoResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsCreateRegistrationTokenForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.post(
    "actionsCreateRegistrationTokenForRepo",
    "/repos/:owner/:repo/actions/runners/registration-token",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCreateRegistrationTokenForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsCreateRegistrationTokenForRepo(
          input,
          actionsCreateRegistrationTokenForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCreateRegistrationTokenForRepoResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsCreateRemoveTokenForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.post(
    "actionsCreateRemoveTokenForRepo",
    "/repos/:owner/:repo/actions/runners/remove-token",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCreateRemoveTokenForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsCreateRemoveTokenForRepo(
          input,
          actionsCreateRemoveTokenForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCreateRemoveTokenForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetSelfHostedRunnerForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    runner_id: z.coerce.number(),
  })

  router.get(
    "actionsGetSelfHostedRunnerForRepo",
    "/repos/:owner/:repo/actions/runners/:runner_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetSelfHostedRunnerForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetSelfHostedRunnerForRepo(
          input,
          actionsGetSelfHostedRunnerForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetSelfHostedRunnerForRepoResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteSelfHostedRunnerFromRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    runner_id: z.coerce.number(),
  })

  router.delete(
    "actionsDeleteSelfHostedRunnerFromRepo",
    "/repos/:owner/:repo/actions/runners/:runner_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteSelfHostedRunnerFromRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsDeleteSelfHostedRunnerFromRepo(
          input,
          actionsDeleteSelfHostedRunnerFromRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteSelfHostedRunnerFromRepoResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsListLabelsForSelfHostedRunnerForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    runner_id: z.coerce.number(),
  })

  router.get(
    "actionsListLabelsForSelfHostedRunnerForRepo",
    "/repos/:owner/:repo/actions/runners/:runner_id/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListLabelsForSelfHostedRunnerForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListLabelsForSelfHostedRunnerForRepo(
          input,
          actionsListLabelsForSelfHostedRunnerForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListLabelsForSelfHostedRunnerForRepoResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsAddCustomLabelsToSelfHostedRunnerForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    runner_id: z.coerce.number(),
  })

  const actionsAddCustomLabelsToSelfHostedRunnerForRepoBodySchema = z.object({
    labels: z.array(z.string()).min(1).max(100),
  })

  router.post(
    "actionsAddCustomLabelsToSelfHostedRunnerForRepo",
    "/repos/:owner/:repo/actions/runners/:runner_id/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsAddCustomLabelsToSelfHostedRunnerForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsAddCustomLabelsToSelfHostedRunnerForRepoBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsAddCustomLabelsToSelfHostedRunnerForRepo(
          input,
          actionsAddCustomLabelsToSelfHostedRunnerForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsAddCustomLabelsToSelfHostedRunnerForRepoResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsSetCustomLabelsForSelfHostedRunnerForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    runner_id: z.coerce.number(),
  })

  const actionsSetCustomLabelsForSelfHostedRunnerForRepoBodySchema = z.object({
    labels: z.array(z.string()).min(0).max(100),
  })

  router.put(
    "actionsSetCustomLabelsForSelfHostedRunnerForRepo",
    "/repos/:owner/:repo/actions/runners/:runner_id/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetCustomLabelsForSelfHostedRunnerForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetCustomLabelsForSelfHostedRunnerForRepoBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsSetCustomLabelsForSelfHostedRunnerForRepo(
          input,
          actionsSetCustomLabelsForSelfHostedRunnerForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsSetCustomLabelsForSelfHostedRunnerForRepoResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoParamSchema =
    z.object({
      owner: z.string(),
      repo: z.string(),
      runner_id: z.coerce.number(),
    })

  router.delete(
    "actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo",
    "/repos/:owner/:repo/actions/runners/:runner_id/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo(
          input,
          actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsRemoveCustomLabelFromSelfHostedRunnerForRepoParamSchema =
    z.object({
      owner: z.string(),
      repo: z.string(),
      runner_id: z.coerce.number(),
      name: z.string(),
    })

  router.delete(
    "actionsRemoveCustomLabelFromSelfHostedRunnerForRepo",
    "/repos/:owner/:repo/actions/runners/:runner_id/labels/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsRemoveCustomLabelFromSelfHostedRunnerForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsRemoveCustomLabelFromSelfHostedRunnerForRepo(
          input,
          actionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsListWorkflowRunsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsListWorkflowRunsForRepoQuerySchema = z.object({
    actor: z.string().optional(),
    branch: z.string().optional(),
    event: z.string().optional(),
    status: z
      .enum([
        "completed",
        "action_required",
        "cancelled",
        "failure",
        "neutral",
        "skipped",
        "stale",
        "success",
        "timed_out",
        "in_progress",
        "queued",
        "requested",
        "waiting",
        "pending",
      ])
      .optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
    created: z.string().datetime({ offset: true }).optional(),
    exclude_pull_requests: PermissiveBoolean.optional().default(false),
    check_suite_id: z.coerce.number().optional(),
    head_sha: z.string().optional(),
  })

  router.get(
    "actionsListWorkflowRunsForRepo",
    "/repos/:owner/:repo/actions/runs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListWorkflowRunsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListWorkflowRunsForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListWorkflowRunsForRepo(
          input,
          actionsListWorkflowRunsForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListWorkflowRunsForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetWorkflowRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  const actionsGetWorkflowRunQuerySchema = z.object({
    exclude_pull_requests: PermissiveBoolean.optional().default(false),
  })

  router.get(
    "actionsGetWorkflowRun",
    "/repos/:owner/:repo/actions/runs/:run_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetWorkflowRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsGetWorkflowRunQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetWorkflowRun(input, actionsGetWorkflowRunResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetWorkflowRunResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteWorkflowRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  router.delete(
    "actionsDeleteWorkflowRun",
    "/repos/:owner/:repo/actions/runs/:run_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteWorkflowRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsDeleteWorkflowRun(input, actionsDeleteWorkflowRunResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteWorkflowRunResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetReviewsForRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  router.get(
    "actionsGetReviewsForRun",
    "/repos/:owner/:repo/actions/runs/:run_id/approvals",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetReviewsForRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetReviewsForRun(input, actionsGetReviewsForRunResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetReviewsForRunResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsApproveWorkflowRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  router.post(
    "actionsApproveWorkflowRun",
    "/repos/:owner/:repo/actions/runs/:run_id/approve",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsApproveWorkflowRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsApproveWorkflowRun(
          input,
          actionsApproveWorkflowRunResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsApproveWorkflowRunResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsListWorkflowRunArtifactsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  const actionsListWorkflowRunArtifactsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
    name: z.string().optional(),
  })

  router.get(
    "actionsListWorkflowRunArtifacts",
    "/repos/:owner/:repo/actions/runs/:run_id/artifacts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListWorkflowRunArtifactsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListWorkflowRunArtifactsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListWorkflowRunArtifacts(
          input,
          actionsListWorkflowRunArtifactsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListWorkflowRunArtifactsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetWorkflowRunAttemptParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
    attempt_number: z.coerce.number(),
  })

  const actionsGetWorkflowRunAttemptQuerySchema = z.object({
    exclude_pull_requests: PermissiveBoolean.optional().default(false),
  })

  router.get(
    "actionsGetWorkflowRunAttempt",
    "/repos/:owner/:repo/actions/runs/:run_id/attempts/:attempt_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetWorkflowRunAttemptParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsGetWorkflowRunAttemptQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetWorkflowRunAttempt(
          input,
          actionsGetWorkflowRunAttemptResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetWorkflowRunAttemptResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsListJobsForWorkflowRunAttemptParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
    attempt_number: z.coerce.number(),
  })

  const actionsListJobsForWorkflowRunAttemptQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "actionsListJobsForWorkflowRunAttempt",
    "/repos/:owner/:repo/actions/runs/:run_id/attempts/:attempt_number/jobs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListJobsForWorkflowRunAttemptParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListJobsForWorkflowRunAttemptQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListJobsForWorkflowRunAttempt(
          input,
          actionsListJobsForWorkflowRunAttemptResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListJobsForWorkflowRunAttemptResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsDownloadWorkflowRunAttemptLogsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
    attempt_number: z.coerce.number(),
  })

  router.get(
    "actionsDownloadWorkflowRunAttemptLogs",
    "/repos/:owner/:repo/actions/runs/:run_id/attempts/:attempt_number/logs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDownloadWorkflowRunAttemptLogsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsDownloadWorkflowRunAttemptLogs(
          input,
          actionsDownloadWorkflowRunAttemptLogsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDownloadWorkflowRunAttemptLogsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsCancelWorkflowRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  router.post(
    "actionsCancelWorkflowRun",
    "/repos/:owner/:repo/actions/runs/:run_id/cancel",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCancelWorkflowRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsCancelWorkflowRun(input, actionsCancelWorkflowRunResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCancelWorkflowRunResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsReviewCustomGatesForRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  const actionsReviewCustomGatesForRunBodySchema = z.union([
    s_review_custom_gates_comment_required,
    s_review_custom_gates_state_required,
  ])

  router.post(
    "actionsReviewCustomGatesForRun",
    "/repos/:owner/:repo/actions/runs/:run_id/deployment_protection_rule",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsReviewCustomGatesForRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsReviewCustomGatesForRunBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsReviewCustomGatesForRun(
          input,
          actionsReviewCustomGatesForRunResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsReviewCustomGatesForRunResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsForceCancelWorkflowRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  router.post(
    "actionsForceCancelWorkflowRun",
    "/repos/:owner/:repo/actions/runs/:run_id/force-cancel",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsForceCancelWorkflowRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsForceCancelWorkflowRun(
          input,
          actionsForceCancelWorkflowRunResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsForceCancelWorkflowRunResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsListJobsForWorkflowRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  const actionsListJobsForWorkflowRunQuerySchema = z.object({
    filter: z.enum(["latest", "all"]).optional().default("latest"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "actionsListJobsForWorkflowRun",
    "/repos/:owner/:repo/actions/runs/:run_id/jobs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListJobsForWorkflowRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListJobsForWorkflowRunQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListJobsForWorkflowRun(
          input,
          actionsListJobsForWorkflowRunResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListJobsForWorkflowRunResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDownloadWorkflowRunLogsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  router.get(
    "actionsDownloadWorkflowRunLogs",
    "/repos/:owner/:repo/actions/runs/:run_id/logs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDownloadWorkflowRunLogsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsDownloadWorkflowRunLogs(
          input,
          actionsDownloadWorkflowRunLogsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDownloadWorkflowRunLogsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteWorkflowRunLogsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  router.delete(
    "actionsDeleteWorkflowRunLogs",
    "/repos/:owner/:repo/actions/runs/:run_id/logs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteWorkflowRunLogsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsDeleteWorkflowRunLogs(
          input,
          actionsDeleteWorkflowRunLogsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteWorkflowRunLogsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetPendingDeploymentsForRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  router.get(
    "actionsGetPendingDeploymentsForRun",
    "/repos/:owner/:repo/actions/runs/:run_id/pending_deployments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetPendingDeploymentsForRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetPendingDeploymentsForRun(
          input,
          actionsGetPendingDeploymentsForRunResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetPendingDeploymentsForRunResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsReviewPendingDeploymentsForRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  const actionsReviewPendingDeploymentsForRunBodySchema = z.object({
    environment_ids: z.array(z.coerce.number()),
    state: z.enum(["approved", "rejected"]),
    comment: z.string(),
  })

  router.post(
    "actionsReviewPendingDeploymentsForRun",
    "/repos/:owner/:repo/actions/runs/:run_id/pending_deployments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsReviewPendingDeploymentsForRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsReviewPendingDeploymentsForRunBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsReviewPendingDeploymentsForRun(
          input,
          actionsReviewPendingDeploymentsForRunResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsReviewPendingDeploymentsForRunResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsReRunWorkflowParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  const actionsReRunWorkflowBodySchema = z
    .object({
      enable_debug_logging: PermissiveBoolean.optional().default(false),
    })
    .nullable()
    .optional()

  router.post(
    "actionsReRunWorkflow",
    "/repos/:owner/:repo/actions/runs/:run_id/rerun",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsReRunWorkflowParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsReRunWorkflowBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsReRunWorkflow(input, actionsReRunWorkflowResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsReRunWorkflowResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsReRunWorkflowFailedJobsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  const actionsReRunWorkflowFailedJobsBodySchema = z
    .object({
      enable_debug_logging: PermissiveBoolean.optional().default(false),
    })
    .nullable()
    .optional()

  router.post(
    "actionsReRunWorkflowFailedJobs",
    "/repos/:owner/:repo/actions/runs/:run_id/rerun-failed-jobs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsReRunWorkflowFailedJobsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsReRunWorkflowFailedJobsBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsReRunWorkflowFailedJobs(
          input,
          actionsReRunWorkflowFailedJobsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsReRunWorkflowFailedJobsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetWorkflowRunUsageParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  router.get(
    "actionsGetWorkflowRunUsage",
    "/repos/:owner/:repo/actions/runs/:run_id/timing",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetWorkflowRunUsageParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetWorkflowRunUsage(
          input,
          actionsGetWorkflowRunUsageResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetWorkflowRunUsageResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsListRepoSecretsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsListRepoSecretsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "actionsListRepoSecrets",
    "/repos/:owner/:repo/actions/secrets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListRepoSecretsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListRepoSecretsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListRepoSecrets(input, actionsListRepoSecretsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListRepoSecretsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetRepoPublicKeyParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "actionsGetRepoPublicKey",
    "/repos/:owner/:repo/actions/secrets/public-key",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetRepoPublicKeyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetRepoPublicKey(input, actionsGetRepoPublicKeyResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetRepoPublicKeyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetRepoSecretParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  })

  router.get(
    "actionsGetRepoSecret",
    "/repos/:owner/:repo/actions/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetRepoSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetRepoSecret(input, actionsGetRepoSecretResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetRepoSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsCreateOrUpdateRepoSecretParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  })

  const actionsCreateOrUpdateRepoSecretBodySchema = z.object({
    encrypted_value: z
      .string()
      .regex(
        new RegExp(
          "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$",
        ),
      ),
    key_id: z.string(),
  })

  router.put(
    "actionsCreateOrUpdateRepoSecret",
    "/repos/:owner/:repo/actions/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCreateOrUpdateRepoSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsCreateOrUpdateRepoSecretBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsCreateOrUpdateRepoSecret(
          input,
          actionsCreateOrUpdateRepoSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCreateOrUpdateRepoSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteRepoSecretParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  })

  router.delete(
    "actionsDeleteRepoSecret",
    "/repos/:owner/:repo/actions/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteRepoSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsDeleteRepoSecret(input, actionsDeleteRepoSecretResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteRepoSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsListRepoVariablesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsListRepoVariablesQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(10),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "actionsListRepoVariables",
    "/repos/:owner/:repo/actions/variables",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListRepoVariablesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListRepoVariablesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListRepoVariables(input, actionsListRepoVariablesResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListRepoVariablesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsCreateRepoVariableParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsCreateRepoVariableBodySchema = z.object({
    name: z.string(),
    value: z.string(),
  })

  router.post(
    "actionsCreateRepoVariable",
    "/repos/:owner/:repo/actions/variables",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCreateRepoVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsCreateRepoVariableBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsCreateRepoVariable(
          input,
          actionsCreateRepoVariableResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCreateRepoVariableResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetRepoVariableParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    name: z.string(),
  })

  router.get(
    "actionsGetRepoVariable",
    "/repos/:owner/:repo/actions/variables/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetRepoVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetRepoVariable(input, actionsGetRepoVariableResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetRepoVariableResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsUpdateRepoVariableParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    name: z.string(),
  })

  const actionsUpdateRepoVariableBodySchema = z.object({
    name: z.string().optional(),
    value: z.string().optional(),
  })

  router.patch(
    "actionsUpdateRepoVariable",
    "/repos/:owner/:repo/actions/variables/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsUpdateRepoVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsUpdateRepoVariableBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsUpdateRepoVariable(
          input,
          actionsUpdateRepoVariableResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsUpdateRepoVariableResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteRepoVariableParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    name: z.string(),
  })

  router.delete(
    "actionsDeleteRepoVariable",
    "/repos/:owner/:repo/actions/variables/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteRepoVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsDeleteRepoVariable(
          input,
          actionsDeleteRepoVariableResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteRepoVariableResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsListRepoWorkflowsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsListRepoWorkflowsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "actionsListRepoWorkflows",
    "/repos/:owner/:repo/actions/workflows",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListRepoWorkflowsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListRepoWorkflowsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListRepoWorkflows(input, actionsListRepoWorkflowsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListRepoWorkflowsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetWorkflowParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    workflow_id: z.union([z.coerce.number(), z.string()]),
  })

  router.get(
    "actionsGetWorkflow",
    "/repos/:owner/:repo/actions/workflows/:workflow_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetWorkflowParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetWorkflow(input, actionsGetWorkflowResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetWorkflowResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDisableWorkflowParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    workflow_id: z.union([z.coerce.number(), z.string()]),
  })

  router.put(
    "actionsDisableWorkflow",
    "/repos/:owner/:repo/actions/workflows/:workflow_id/disable",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDisableWorkflowParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsDisableWorkflow(input, actionsDisableWorkflowResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDisableWorkflowResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsCreateWorkflowDispatchParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    workflow_id: z.union([z.coerce.number(), z.string()]),
  })

  const actionsCreateWorkflowDispatchBodySchema = z.object({
    ref: z.string(),
    inputs: z.record(z.unknown()).optional(),
  })

  router.post(
    "actionsCreateWorkflowDispatch",
    "/repos/:owner/:repo/actions/workflows/:workflow_id/dispatches",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCreateWorkflowDispatchParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsCreateWorkflowDispatchBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsCreateWorkflowDispatch(
          input,
          actionsCreateWorkflowDispatchResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCreateWorkflowDispatchResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsEnableWorkflowParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    workflow_id: z.union([z.coerce.number(), z.string()]),
  })

  router.put(
    "actionsEnableWorkflow",
    "/repos/:owner/:repo/actions/workflows/:workflow_id/enable",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsEnableWorkflowParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsEnableWorkflow(input, actionsEnableWorkflowResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsEnableWorkflowResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsListWorkflowRunsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    workflow_id: z.union([z.coerce.number(), z.string()]),
  })

  const actionsListWorkflowRunsQuerySchema = z.object({
    actor: z.string().optional(),
    branch: z.string().optional(),
    event: z.string().optional(),
    status: z
      .enum([
        "completed",
        "action_required",
        "cancelled",
        "failure",
        "neutral",
        "skipped",
        "stale",
        "success",
        "timed_out",
        "in_progress",
        "queued",
        "requested",
        "waiting",
        "pending",
      ])
      .optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
    created: z.string().datetime({ offset: true }).optional(),
    exclude_pull_requests: PermissiveBoolean.optional().default(false),
    check_suite_id: z.coerce.number().optional(),
    head_sha: z.string().optional(),
  })

  router.get(
    "actionsListWorkflowRuns",
    "/repos/:owner/:repo/actions/workflows/:workflow_id/runs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListWorkflowRunsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListWorkflowRunsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListWorkflowRuns(input, actionsListWorkflowRunsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListWorkflowRunsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetWorkflowUsageParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    workflow_id: z.union([z.coerce.number(), z.string()]),
  })

  router.get(
    "actionsGetWorkflowUsage",
    "/repos/:owner/:repo/actions/workflows/:workflow_id/timing",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetWorkflowUsageParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetWorkflowUsage(input, actionsGetWorkflowUsageResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetWorkflowUsageResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListActivitiesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListActivitiesQuerySchema = z.object({
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    per_page: z.coerce.number().optional().default(30),
    before: z.string().optional(),
    after: z.string().optional(),
    ref: z.string().optional(),
    actor: z.string().optional(),
    time_period: z.enum(["day", "week", "month", "quarter", "year"]).optional(),
    activity_type: z
      .enum([
        "push",
        "force_push",
        "branch_creation",
        "branch_deletion",
        "pr_merge",
        "merge_queue_merge",
      ])
      .optional(),
  })

  router.get(
    "reposListActivities",
    "/repos/:owner/:repo/activity",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListActivitiesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListActivitiesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListActivities(input, reposListActivitiesResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListActivitiesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesListAssigneesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const issuesListAssigneesQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "issuesListAssignees",
    "/repos/:owner/:repo/assignees",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesListAssigneesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          issuesListAssigneesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesListAssignees(input, issuesListAssigneesResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListAssigneesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesCheckUserCanBeAssignedParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    assignee: z.string(),
  })

  router.get(
    "issuesCheckUserCanBeAssigned",
    "/repos/:owner/:repo/assignees/:assignee",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesCheckUserCanBeAssignedParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesCheckUserCanBeAssigned(
          input,
          issuesCheckUserCanBeAssignedResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesCheckUserCanBeAssignedResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateAttestationParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCreateAttestationBodySchema = z.object({
    bundle: z.object({
      mediaType: z.string().optional(),
      verificationMaterial: z.record(z.unknown()).optional(),
      dsseEnvelope: z.record(z.unknown()).optional(),
    }),
  })

  router.post(
    "reposCreateAttestation",
    "/repos/:owner/:repo/attestations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateAttestationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateAttestationBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposCreateAttestation(input, reposCreateAttestationResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateAttestationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListAttestationsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    subject_digest: z.string(),
  })

  const reposListAttestationsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    before: z.string().optional(),
    after: z.string().optional(),
    predicate_type: z.string().optional(),
  })

  router.get(
    "reposListAttestations",
    "/repos/:owner/:repo/attestations/:subject_digest",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListAttestationsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListAttestationsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListAttestations(input, reposListAttestationsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListAttestationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListAutolinksParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "reposListAutolinks",
    "/repos/:owner/:repo/autolinks",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListAutolinksParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListAutolinks(input, reposListAutolinksResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListAutolinksResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateAutolinkParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCreateAutolinkBodySchema = z.object({
    key_prefix: z.string(),
    url_template: z.string(),
    is_alphanumeric: PermissiveBoolean.optional().default(true),
  })

  router.post(
    "reposCreateAutolink",
    "/repos/:owner/:repo/autolinks",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateAutolinkParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateAutolinkBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposCreateAutolink(input, reposCreateAutolinkResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateAutolinkResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetAutolinkParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    autolink_id: z.coerce.number(),
  })

  router.get(
    "reposGetAutolink",
    "/repos/:owner/:repo/autolinks/:autolink_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetAutolinkParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetAutolink(input, reposGetAutolinkResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetAutolinkResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteAutolinkParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    autolink_id: z.coerce.number(),
  })

  router.delete(
    "reposDeleteAutolink",
    "/repos/:owner/:repo/autolinks/:autolink_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteAutolinkParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDeleteAutolink(input, reposDeleteAutolinkResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteAutolinkResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCheckAutomatedSecurityFixesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "reposCheckAutomatedSecurityFixes",
    "/repos/:owner/:repo/automated-security-fixes",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCheckAutomatedSecurityFixesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposCheckAutomatedSecurityFixes(
          input,
          reposCheckAutomatedSecurityFixesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCheckAutomatedSecurityFixesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposEnableAutomatedSecurityFixesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.put(
    "reposEnableAutomatedSecurityFixes",
    "/repos/:owner/:repo/automated-security-fixes",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposEnableAutomatedSecurityFixesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposEnableAutomatedSecurityFixes(
          input,
          reposEnableAutomatedSecurityFixesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposEnableAutomatedSecurityFixesResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposDisableAutomatedSecurityFixesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.delete(
    "reposDisableAutomatedSecurityFixes",
    "/repos/:owner/:repo/automated-security-fixes",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDisableAutomatedSecurityFixesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDisableAutomatedSecurityFixes(
          input,
          reposDisableAutomatedSecurityFixesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDisableAutomatedSecurityFixesResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposListBranchesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListBranchesQuerySchema = z.object({
    protected: PermissiveBoolean.optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposListBranches",
    "/repos/:owner/:repo/branches",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListBranchesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListBranchesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListBranches(input, reposListBranchesResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListBranchesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetBranchParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  router.get(
    "reposGetBranch",
    "/repos/:owner/:repo/branches/:branch",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetBranchParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetBranch(input, reposGetBranchResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetBranchResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetBranchProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  router.get(
    "reposGetBranchProtection",
    "/repos/:owner/:repo/branches/:branch/protection",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetBranchProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetBranchProtection(input, reposGetBranchProtectionResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetBranchProtectionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUpdateBranchProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposUpdateBranchProtectionBodySchema = z.object({
    required_status_checks: z
      .object({
        strict: PermissiveBoolean,
        contexts: z.array(z.string()),
        checks: z
          .array(
            z.object({
              context: z.string(),
              app_id: z.coerce.number().optional(),
            }),
          )
          .optional(),
      })
      .nullable(),
    enforce_admins: PermissiveBoolean.nullable(),
    required_pull_request_reviews: z
      .object({
        dismissal_restrictions: z
          .object({
            users: z.array(z.string()).optional(),
            teams: z.array(z.string()).optional(),
            apps: z.array(z.string()).optional(),
          })
          .optional(),
        dismiss_stale_reviews: PermissiveBoolean.optional(),
        require_code_owner_reviews: PermissiveBoolean.optional(),
        required_approving_review_count: z.coerce.number().optional(),
        require_last_push_approval: PermissiveBoolean.optional().default(false),
        bypass_pull_request_allowances: z
          .object({
            users: z.array(z.string()).optional(),
            teams: z.array(z.string()).optional(),
            apps: z.array(z.string()).optional(),
          })
          .optional(),
      })
      .nullable(),
    restrictions: z
      .object({
        users: z.array(z.string()),
        teams: z.array(z.string()),
        apps: z.array(z.string()).optional(),
      })
      .nullable(),
    required_linear_history: PermissiveBoolean.optional(),
    allow_force_pushes: PermissiveBoolean.nullable().optional(),
    allow_deletions: PermissiveBoolean.optional(),
    block_creations: PermissiveBoolean.optional(),
    required_conversation_resolution: PermissiveBoolean.optional(),
    lock_branch: PermissiveBoolean.optional().default(false),
    allow_fork_syncing: PermissiveBoolean.optional().default(false),
  })

  router.put(
    "reposUpdateBranchProtection",
    "/repos/:owner/:repo/branches/:branch/protection",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdateBranchProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdateBranchProtectionBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposUpdateBranchProtection(
          input,
          reposUpdateBranchProtectionResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdateBranchProtectionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteBranchProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  router.delete(
    "reposDeleteBranchProtection",
    "/repos/:owner/:repo/branches/:branch/protection",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteBranchProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDeleteBranchProtection(
          input,
          reposDeleteBranchProtectionResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteBranchProtectionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetAdminBranchProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  router.get(
    "reposGetAdminBranchProtection",
    "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetAdminBranchProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetAdminBranchProtection(
          input,
          reposGetAdminBranchProtectionResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetAdminBranchProtectionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposSetAdminBranchProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  router.post(
    "reposSetAdminBranchProtection",
    "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposSetAdminBranchProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposSetAdminBranchProtection(
          input,
          reposSetAdminBranchProtectionResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposSetAdminBranchProtectionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteAdminBranchProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  router.delete(
    "reposDeleteAdminBranchProtection",
    "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteAdminBranchProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDeleteAdminBranchProtection(
          input,
          reposDeleteAdminBranchProtectionResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteAdminBranchProtectionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetPullRequestReviewProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  router.get(
    "reposGetPullRequestReviewProtection",
    "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetPullRequestReviewProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetPullRequestReviewProtection(
          input,
          reposGetPullRequestReviewProtectionResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetPullRequestReviewProtectionResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposUpdatePullRequestReviewProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposUpdatePullRequestReviewProtectionBodySchema = z
    .object({
      dismissal_restrictions: z
        .object({
          users: z.array(z.string()).optional(),
          teams: z.array(z.string()).optional(),
          apps: z.array(z.string()).optional(),
        })
        .optional(),
      dismiss_stale_reviews: PermissiveBoolean.optional(),
      require_code_owner_reviews: PermissiveBoolean.optional(),
      required_approving_review_count: z.coerce.number().optional(),
      require_last_push_approval: PermissiveBoolean.optional().default(false),
      bypass_pull_request_allowances: z
        .object({
          users: z.array(z.string()).optional(),
          teams: z.array(z.string()).optional(),
          apps: z.array(z.string()).optional(),
        })
        .optional(),
    })
    .optional()

  router.patch(
    "reposUpdatePullRequestReviewProtection",
    "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdatePullRequestReviewProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdatePullRequestReviewProtectionBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposUpdatePullRequestReviewProtection(
          input,
          reposUpdatePullRequestReviewProtectionResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdatePullRequestReviewProtectionResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposDeletePullRequestReviewProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  router.delete(
    "reposDeletePullRequestReviewProtection",
    "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeletePullRequestReviewProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDeletePullRequestReviewProtection(
          input,
          reposDeletePullRequestReviewProtectionResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeletePullRequestReviewProtectionResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposGetCommitSignatureProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  router.get(
    "reposGetCommitSignatureProtection",
    "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetCommitSignatureProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetCommitSignatureProtection(
          input,
          reposGetCommitSignatureProtectionResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetCommitSignatureProtectionResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposCreateCommitSignatureProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  router.post(
    "reposCreateCommitSignatureProtection",
    "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateCommitSignatureProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposCreateCommitSignatureProtection(
          input,
          reposCreateCommitSignatureProtectionResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateCommitSignatureProtectionResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposDeleteCommitSignatureProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  router.delete(
    "reposDeleteCommitSignatureProtection",
    "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteCommitSignatureProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDeleteCommitSignatureProtection(
          input,
          reposDeleteCommitSignatureProtectionResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteCommitSignatureProtectionResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposGetStatusChecksProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  router.get(
    "reposGetStatusChecksProtection",
    "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetStatusChecksProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetStatusChecksProtection(
          input,
          reposGetStatusChecksProtectionResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetStatusChecksProtectionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUpdateStatusCheckProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposUpdateStatusCheckProtectionBodySchema = z
    .object({
      strict: PermissiveBoolean.optional(),
      contexts: z.array(z.string()).optional(),
      checks: z
        .array(
          z.object({
            context: z.string(),
            app_id: z.coerce.number().optional(),
          }),
        )
        .optional(),
    })
    .optional()

  router.patch(
    "reposUpdateStatusCheckProtection",
    "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdateStatusCheckProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdateStatusCheckProtectionBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposUpdateStatusCheckProtection(
          input,
          reposUpdateStatusCheckProtectionResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdateStatusCheckProtectionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposRemoveStatusCheckProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  router.delete(
    "reposRemoveStatusCheckProtection",
    "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposRemoveStatusCheckProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposRemoveStatusCheckProtection(
          input,
          reposRemoveStatusCheckProtectionResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposRemoveStatusCheckProtectionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetAllStatusCheckContextsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  router.get(
    "reposGetAllStatusCheckContexts",
    "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetAllStatusCheckContextsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetAllStatusCheckContexts(
          input,
          reposGetAllStatusCheckContextsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetAllStatusCheckContextsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposAddStatusCheckContextsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposAddStatusCheckContextsBodySchema = z
    .union([z.object({ contexts: z.array(z.string()) }), z.array(z.string())])
    .optional()

  router.post(
    "reposAddStatusCheckContexts",
    "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposAddStatusCheckContextsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposAddStatusCheckContextsBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposAddStatusCheckContexts(
          input,
          reposAddStatusCheckContextsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposAddStatusCheckContextsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposSetStatusCheckContextsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposSetStatusCheckContextsBodySchema = z
    .union([z.object({ contexts: z.array(z.string()) }), z.array(z.string())])
    .optional()

  router.put(
    "reposSetStatusCheckContexts",
    "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposSetStatusCheckContextsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposSetStatusCheckContextsBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposSetStatusCheckContexts(
          input,
          reposSetStatusCheckContextsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposSetStatusCheckContextsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposRemoveStatusCheckContextsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposRemoveStatusCheckContextsBodySchema = z.union([
    z.object({ contexts: z.array(z.string()) }),
    z.array(z.string()),
  ])

  router.delete(
    "reposRemoveStatusCheckContexts",
    "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposRemoveStatusCheckContextsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposRemoveStatusCheckContextsBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposRemoveStatusCheckContexts(
          input,
          reposRemoveStatusCheckContextsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposRemoveStatusCheckContextsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetAccessRestrictionsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  router.get(
    "reposGetAccessRestrictions",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetAccessRestrictionsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetAccessRestrictions(
          input,
          reposGetAccessRestrictionsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetAccessRestrictionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteAccessRestrictionsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  router.delete(
    "reposDeleteAccessRestrictions",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteAccessRestrictionsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDeleteAccessRestrictions(
          input,
          reposDeleteAccessRestrictionsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteAccessRestrictionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetAppsWithAccessToProtectedBranchParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  router.get(
    "reposGetAppsWithAccessToProtectedBranch",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetAppsWithAccessToProtectedBranchParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetAppsWithAccessToProtectedBranch(
          input,
          reposGetAppsWithAccessToProtectedBranchResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetAppsWithAccessToProtectedBranchResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposAddAppAccessRestrictionsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposAddAppAccessRestrictionsBodySchema = z.object({
    apps: z.array(z.string()),
  })

  router.post(
    "reposAddAppAccessRestrictions",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposAddAppAccessRestrictionsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposAddAppAccessRestrictionsBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposAddAppAccessRestrictions(
          input,
          reposAddAppAccessRestrictionsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposAddAppAccessRestrictionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposSetAppAccessRestrictionsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposSetAppAccessRestrictionsBodySchema = z.object({
    apps: z.array(z.string()),
  })

  router.put(
    "reposSetAppAccessRestrictions",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposSetAppAccessRestrictionsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposSetAppAccessRestrictionsBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposSetAppAccessRestrictions(
          input,
          reposSetAppAccessRestrictionsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposSetAppAccessRestrictionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposRemoveAppAccessRestrictionsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposRemoveAppAccessRestrictionsBodySchema = z.object({
    apps: z.array(z.string()),
  })

  router.delete(
    "reposRemoveAppAccessRestrictions",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposRemoveAppAccessRestrictionsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposRemoveAppAccessRestrictionsBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposRemoveAppAccessRestrictions(
          input,
          reposRemoveAppAccessRestrictionsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposRemoveAppAccessRestrictionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetTeamsWithAccessToProtectedBranchParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  router.get(
    "reposGetTeamsWithAccessToProtectedBranch",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetTeamsWithAccessToProtectedBranchParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetTeamsWithAccessToProtectedBranch(
          input,
          reposGetTeamsWithAccessToProtectedBranchResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetTeamsWithAccessToProtectedBranchResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposAddTeamAccessRestrictionsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposAddTeamAccessRestrictionsBodySchema = z
    .union([z.object({ teams: z.array(z.string()) }), z.array(z.string())])
    .optional()

  router.post(
    "reposAddTeamAccessRestrictions",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposAddTeamAccessRestrictionsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposAddTeamAccessRestrictionsBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposAddTeamAccessRestrictions(
          input,
          reposAddTeamAccessRestrictionsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposAddTeamAccessRestrictionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposSetTeamAccessRestrictionsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposSetTeamAccessRestrictionsBodySchema = z
    .union([z.object({ teams: z.array(z.string()) }), z.array(z.string())])
    .optional()

  router.put(
    "reposSetTeamAccessRestrictions",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposSetTeamAccessRestrictionsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposSetTeamAccessRestrictionsBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposSetTeamAccessRestrictions(
          input,
          reposSetTeamAccessRestrictionsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposSetTeamAccessRestrictionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposRemoveTeamAccessRestrictionsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposRemoveTeamAccessRestrictionsBodySchema = z.union([
    z.object({ teams: z.array(z.string()) }),
    z.array(z.string()),
  ])

  router.delete(
    "reposRemoveTeamAccessRestrictions",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposRemoveTeamAccessRestrictionsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposRemoveTeamAccessRestrictionsBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposRemoveTeamAccessRestrictions(
          input,
          reposRemoveTeamAccessRestrictionsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposRemoveTeamAccessRestrictionsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposGetUsersWithAccessToProtectedBranchParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  router.get(
    "reposGetUsersWithAccessToProtectedBranch",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetUsersWithAccessToProtectedBranchParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetUsersWithAccessToProtectedBranch(
          input,
          reposGetUsersWithAccessToProtectedBranchResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetUsersWithAccessToProtectedBranchResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposAddUserAccessRestrictionsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposAddUserAccessRestrictionsBodySchema = z.object({
    users: z.array(z.string()),
  })

  router.post(
    "reposAddUserAccessRestrictions",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposAddUserAccessRestrictionsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposAddUserAccessRestrictionsBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposAddUserAccessRestrictions(
          input,
          reposAddUserAccessRestrictionsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposAddUserAccessRestrictionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposSetUserAccessRestrictionsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposSetUserAccessRestrictionsBodySchema = z.object({
    users: z.array(z.string()),
  })

  router.put(
    "reposSetUserAccessRestrictions",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposSetUserAccessRestrictionsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposSetUserAccessRestrictionsBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposSetUserAccessRestrictions(
          input,
          reposSetUserAccessRestrictionsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposSetUserAccessRestrictionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposRemoveUserAccessRestrictionsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposRemoveUserAccessRestrictionsBodySchema = z.object({
    users: z.array(z.string()),
  })

  router.delete(
    "reposRemoveUserAccessRestrictions",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposRemoveUserAccessRestrictionsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposRemoveUserAccessRestrictionsBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposRemoveUserAccessRestrictions(
          input,
          reposRemoveUserAccessRestrictionsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposRemoveUserAccessRestrictionsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposRenameBranchParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposRenameBranchBodySchema = z.object({ new_name: z.string() })

  router.post(
    "reposRenameBranch",
    "/repos/:owner/:repo/branches/:branch/rename",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposRenameBranchParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposRenameBranchBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposRenameBranch(input, reposRenameBranchResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposRenameBranchResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const checksCreateParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const checksCreateBodySchema = z.union([
    z.intersection(z.object({ status: z.object({}) }), z.record(z.unknown())),
    z.intersection(
      z.object({ status: z.object({}).optional() }),
      z.record(z.unknown()),
    ),
  ])

  router.post(
    "checksCreate",
    "/repos/:owner/:repo/check-runs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          checksCreateParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          checksCreateBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .checksCreate(input, checksCreateResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = checksCreateResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const checksGetParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    check_run_id: z.coerce.number(),
  })

  router.get(
    "checksGet",
    "/repos/:owner/:repo/check-runs/:check_run_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          checksGetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .checksGet(input, checksGetResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = checksGetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const checksUpdateParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    check_run_id: z.coerce.number(),
  })

  const checksUpdateBodySchema = z.object({
    name: z.string().optional(),
    details_url: z.string().optional(),
    external_id: z.string().optional(),
    started_at: z.string().datetime({ offset: true }).optional(),
    status: z
      .enum([
        "queued",
        "in_progress",
        "completed",
        "waiting",
        "requested",
        "pending",
      ])
      .optional(),
    conclusion: z
      .enum([
        "action_required",
        "cancelled",
        "failure",
        "neutral",
        "success",
        "skipped",
        "stale",
        "timed_out",
      ])
      .optional(),
    completed_at: z.string().datetime({ offset: true }).optional(),
    output: z
      .object({
        title: z.string().optional(),
        summary: z.string().max(65535),
        text: z.string().max(65535).optional(),
        annotations: z
          .array(
            z.object({
              path: z.string(),
              start_line: z.coerce.number(),
              end_line: z.coerce.number(),
              start_column: z.coerce.number().optional(),
              end_column: z.coerce.number().optional(),
              annotation_level: z.enum(["notice", "warning", "failure"]),
              message: z.string(),
              title: z.string().optional(),
              raw_details: z.string().optional(),
            }),
          )
          .max(50)
          .optional(),
        images: z
          .array(
            z.object({
              alt: z.string(),
              image_url: z.string(),
              caption: z.string().optional(),
            }),
          )
          .optional(),
      })
      .optional(),
    actions: z
      .array(
        z.object({
          label: z.string().max(20),
          description: z.string().max(40),
          identifier: z.string().max(20),
        }),
      )
      .max(3)
      .optional(),
  })

  router.patch(
    "checksUpdate",
    "/repos/:owner/:repo/check-runs/:check_run_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          checksUpdateParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          checksUpdateBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .checksUpdate(input, checksUpdateResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = checksUpdateResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const checksListAnnotationsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    check_run_id: z.coerce.number(),
  })

  const checksListAnnotationsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "checksListAnnotations",
    "/repos/:owner/:repo/check-runs/:check_run_id/annotations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          checksListAnnotationsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          checksListAnnotationsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .checksListAnnotations(input, checksListAnnotationsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = checksListAnnotationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const checksRerequestRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    check_run_id: z.coerce.number(),
  })

  router.post(
    "checksRerequestRun",
    "/repos/:owner/:repo/check-runs/:check_run_id/rerequest",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          checksRerequestRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .checksRerequestRun(input, checksRerequestRunResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = checksRerequestRunResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const checksCreateSuiteParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const checksCreateSuiteBodySchema = z.object({ head_sha: z.string() })

  router.post(
    "checksCreateSuite",
    "/repos/:owner/:repo/check-suites",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          checksCreateSuiteParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          checksCreateSuiteBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .checksCreateSuite(input, checksCreateSuiteResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = checksCreateSuiteResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const checksSetSuitesPreferencesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const checksSetSuitesPreferencesBodySchema = z.object({
    auto_trigger_checks: z
      .array(
        z.object({
          app_id: z.coerce.number(),
          setting: PermissiveBoolean.default(true),
        }),
      )
      .optional(),
  })

  router.patch(
    "checksSetSuitesPreferences",
    "/repos/:owner/:repo/check-suites/preferences",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          checksSetSuitesPreferencesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          checksSetSuitesPreferencesBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .checksSetSuitesPreferences(
          input,
          checksSetSuitesPreferencesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = checksSetSuitesPreferencesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const checksGetSuiteParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    check_suite_id: z.coerce.number(),
  })

  router.get(
    "checksGetSuite",
    "/repos/:owner/:repo/check-suites/:check_suite_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          checksGetSuiteParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .checksGetSuite(input, checksGetSuiteResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = checksGetSuiteResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const checksListForSuiteParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    check_suite_id: z.coerce.number(),
  })

  const checksListForSuiteQuerySchema = z.object({
    check_name: z.string().optional(),
    status: z.enum(["queued", "in_progress", "completed"]).optional(),
    filter: z.enum(["latest", "all"]).optional().default("latest"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "checksListForSuite",
    "/repos/:owner/:repo/check-suites/:check_suite_id/check-runs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          checksListForSuiteParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          checksListForSuiteQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .checksListForSuite(input, checksListForSuiteResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = checksListForSuiteResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const checksRerequestSuiteParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    check_suite_id: z.coerce.number(),
  })

  router.post(
    "checksRerequestSuite",
    "/repos/:owner/:repo/check-suites/:check_suite_id/rerequest",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          checksRerequestSuiteParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .checksRerequestSuite(input, checksRerequestSuiteResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = checksRerequestSuiteResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningListAlertsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const codeScanningListAlertsForRepoQuerySchema = z.object({
    tool_name: s_code_scanning_analysis_tool_name.optional(),
    tool_guid: s_code_scanning_analysis_tool_guid.optional(),
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
    ref: s_code_scanning_ref.optional(),
    pr: z.coerce.number().optional(),
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    before: z.string().optional(),
    after: z.string().optional(),
    sort: z.enum(["created", "updated"]).optional().default("created"),
    state: s_code_scanning_alert_state_query.optional(),
    severity: s_code_scanning_alert_severity.optional(),
  })

  router.get(
    "codeScanningListAlertsForRepo",
    "/repos/:owner/:repo/code-scanning/alerts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningListAlertsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codeScanningListAlertsForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeScanningListAlertsForRepo(
          input,
          codeScanningListAlertsForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningListAlertsForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningGetAlertParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    alert_number: s_alert_number,
  })

  router.get(
    "codeScanningGetAlert",
    "/repos/:owner/:repo/code-scanning/alerts/:alert_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningGetAlertParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeScanningGetAlert(input, codeScanningGetAlertResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningGetAlertResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningUpdateAlertParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    alert_number: s_alert_number,
  })

  const codeScanningUpdateAlertBodySchema = z.object({
    state: s_code_scanning_alert_set_state,
    dismissed_reason: s_code_scanning_alert_dismissed_reason.optional(),
    dismissed_comment: s_code_scanning_alert_dismissed_comment.optional(),
    create_request: s_code_scanning_alert_create_request.optional(),
  })

  router.patch(
    "codeScanningUpdateAlert",
    "/repos/:owner/:repo/code-scanning/alerts/:alert_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningUpdateAlertParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codeScanningUpdateAlertBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codeScanningUpdateAlert(input, codeScanningUpdateAlertResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningUpdateAlertResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningGetAutofixParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    alert_number: s_alert_number,
  })

  router.get(
    "codeScanningGetAutofix",
    "/repos/:owner/:repo/code-scanning/alerts/:alert_number/autofix",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningGetAutofixParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeScanningGetAutofix(input, codeScanningGetAutofixResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningGetAutofixResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningCreateAutofixParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    alert_number: s_alert_number,
  })

  router.post(
    "codeScanningCreateAutofix",
    "/repos/:owner/:repo/code-scanning/alerts/:alert_number/autofix",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningCreateAutofixParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeScanningCreateAutofix(
          input,
          codeScanningCreateAutofixResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningCreateAutofixResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningCommitAutofixParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    alert_number: s_alert_number,
  })

  const codeScanningCommitAutofixBodySchema =
    s_code_scanning_autofix_commits.optional()

  router.post(
    "codeScanningCommitAutofix",
    "/repos/:owner/:repo/code-scanning/alerts/:alert_number/autofix/commits",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningCommitAutofixParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codeScanningCommitAutofixBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codeScanningCommitAutofix(
          input,
          codeScanningCommitAutofixResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningCommitAutofixResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningListAlertInstancesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    alert_number: s_alert_number,
  })

  const codeScanningListAlertInstancesQuerySchema = z.object({
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
    ref: s_code_scanning_ref.optional(),
    pr: z.coerce.number().optional(),
  })

  router.get(
    "codeScanningListAlertInstances",
    "/repos/:owner/:repo/code-scanning/alerts/:alert_number/instances",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningListAlertInstancesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codeScanningListAlertInstancesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeScanningListAlertInstances(
          input,
          codeScanningListAlertInstancesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningListAlertInstancesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningListRecentAnalysesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const codeScanningListRecentAnalysesQuerySchema = z.object({
    tool_name: s_code_scanning_analysis_tool_name.optional(),
    tool_guid: s_code_scanning_analysis_tool_guid.optional(),
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
    pr: z.coerce.number().optional(),
    ref: s_code_scanning_ref.optional(),
    sarif_id: s_code_scanning_analysis_sarif_id.optional(),
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    sort: z.enum(["created"]).optional().default("created"),
  })

  router.get(
    "codeScanningListRecentAnalyses",
    "/repos/:owner/:repo/code-scanning/analyses",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningListRecentAnalysesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codeScanningListRecentAnalysesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeScanningListRecentAnalyses(
          input,
          codeScanningListRecentAnalysesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningListRecentAnalysesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningGetAnalysisParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    analysis_id: z.coerce.number(),
  })

  router.get(
    "codeScanningGetAnalysis",
    "/repos/:owner/:repo/code-scanning/analyses/:analysis_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningGetAnalysisParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeScanningGetAnalysis(input, codeScanningGetAnalysisResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningGetAnalysisResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningDeleteAnalysisParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    analysis_id: z.coerce.number(),
  })

  const codeScanningDeleteAnalysisQuerySchema = z.object({
    confirm_delete: z.string().nullable().optional(),
  })

  router.delete(
    "codeScanningDeleteAnalysis",
    "/repos/:owner/:repo/code-scanning/analyses/:analysis_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningDeleteAnalysisParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codeScanningDeleteAnalysisQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeScanningDeleteAnalysis(
          input,
          codeScanningDeleteAnalysisResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningDeleteAnalysisResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningListCodeqlDatabasesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "codeScanningListCodeqlDatabases",
    "/repos/:owner/:repo/code-scanning/codeql/databases",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningListCodeqlDatabasesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeScanningListCodeqlDatabases(
          input,
          codeScanningListCodeqlDatabasesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningListCodeqlDatabasesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningGetCodeqlDatabaseParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    language: z.string(),
  })

  router.get(
    "codeScanningGetCodeqlDatabase",
    "/repos/:owner/:repo/code-scanning/codeql/databases/:language",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningGetCodeqlDatabaseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeScanningGetCodeqlDatabase(
          input,
          codeScanningGetCodeqlDatabaseResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningGetCodeqlDatabaseResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningDeleteCodeqlDatabaseParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    language: z.string(),
  })

  router.delete(
    "codeScanningDeleteCodeqlDatabase",
    "/repos/:owner/:repo/code-scanning/codeql/databases/:language",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningDeleteCodeqlDatabaseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeScanningDeleteCodeqlDatabase(
          input,
          codeScanningDeleteCodeqlDatabaseResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningDeleteCodeqlDatabaseResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningCreateVariantAnalysisParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const codeScanningCreateVariantAnalysisBodySchema = z.union([
    z.object({}),
    z.object({}),
    z.object({}),
  ])

  router.post(
    "codeScanningCreateVariantAnalysis",
    "/repos/:owner/:repo/code-scanning/codeql/variant-analyses",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningCreateVariantAnalysisParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codeScanningCreateVariantAnalysisBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codeScanningCreateVariantAnalysis(
          input,
          codeScanningCreateVariantAnalysisResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningCreateVariantAnalysisResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codeScanningGetVariantAnalysisParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    codeql_variant_analysis_id: z.coerce.number(),
  })

  router.get(
    "codeScanningGetVariantAnalysis",
    "/repos/:owner/:repo/code-scanning/codeql/variant-analyses/:codeql_variant_analysis_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningGetVariantAnalysisParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeScanningGetVariantAnalysis(
          input,
          codeScanningGetVariantAnalysisResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningGetVariantAnalysisResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningGetVariantAnalysisRepoTaskParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    codeql_variant_analysis_id: z.coerce.number(),
    repo_owner: z.string(),
    repo_name: z.string(),
  })

  router.get(
    "codeScanningGetVariantAnalysisRepoTask",
    "/repos/:owner/:repo/code-scanning/codeql/variant-analyses/:codeql_variant_analysis_id/repos/:repo_owner/:repo_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningGetVariantAnalysisRepoTaskParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeScanningGetVariantAnalysisRepoTask(
          input,
          codeScanningGetVariantAnalysisRepoTaskResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningGetVariantAnalysisRepoTaskResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codeScanningGetDefaultSetupParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "codeScanningGetDefaultSetup",
    "/repos/:owner/:repo/code-scanning/default-setup",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningGetDefaultSetupParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeScanningGetDefaultSetup(
          input,
          codeScanningGetDefaultSetupResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningGetDefaultSetupResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningUpdateDefaultSetupParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const codeScanningUpdateDefaultSetupBodySchema =
    s_code_scanning_default_setup_update

  router.patch(
    "codeScanningUpdateDefaultSetup",
    "/repos/:owner/:repo/code-scanning/default-setup",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningUpdateDefaultSetupParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codeScanningUpdateDefaultSetupBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codeScanningUpdateDefaultSetup(
          input,
          codeScanningUpdateDefaultSetupResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningUpdateDefaultSetupResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningUploadSarifParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const codeScanningUploadSarifBodySchema = z.object({
    commit_sha: s_code_scanning_analysis_commit_sha,
    ref: s_code_scanning_ref_full,
    sarif: s_code_scanning_analysis_sarif_file,
    checkout_uri: z.string().optional(),
    started_at: z.string().datetime({ offset: true }).optional(),
    tool_name: z.string().optional(),
    validate: PermissiveBoolean.optional(),
  })

  router.post(
    "codeScanningUploadSarif",
    "/repos/:owner/:repo/code-scanning/sarifs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningUploadSarifParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codeScanningUploadSarifBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codeScanningUploadSarif(input, codeScanningUploadSarifResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningUploadSarifResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningGetSarifParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    sarif_id: z.string(),
  })

  router.get(
    "codeScanningGetSarif",
    "/repos/:owner/:repo/code-scanning/sarifs/:sarif_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningGetSarifParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeScanningGetSarif(input, codeScanningGetSarifResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningGetSarifResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeSecurityGetConfigurationForRepositoryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "codeSecurityGetConfigurationForRepository",
    "/repos/:owner/:repo/code-security-configuration",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeSecurityGetConfigurationForRepositoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codeSecurityGetConfigurationForRepository(
          input,
          codeSecurityGetConfigurationForRepositoryResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeSecurityGetConfigurationForRepositoryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposCodeownersErrorsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCodeownersErrorsQuerySchema = z.object({
    ref: z.string().optional(),
  })

  router.get(
    "reposCodeownersErrors",
    "/repos/:owner/:repo/codeowners/errors",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCodeownersErrorsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposCodeownersErrorsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposCodeownersErrors(input, reposCodeownersErrorsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCodeownersErrorsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesListInRepositoryForAuthenticatedUserParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const codespacesListInRepositoryForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "codespacesListInRepositoryForAuthenticatedUser",
    "/repos/:owner/:repo/codespaces",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesListInRepositoryForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codespacesListInRepositoryForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesListInRepositoryForAuthenticatedUser(
          input,
          codespacesListInRepositoryForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        codespacesListInRepositoryForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const codespacesCreateWithRepoForAuthenticatedUserParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const codespacesCreateWithRepoForAuthenticatedUserBodySchema = z
    .object({
      ref: z.string().optional(),
      location: z.string().optional(),
      geo: z
        .enum(["EuropeWest", "SoutheastAsia", "UsEast", "UsWest"])
        .optional(),
      client_ip: z.string().optional(),
      machine: z.string().optional(),
      devcontainer_path: z.string().optional(),
      multi_repo_permissions_opt_out: PermissiveBoolean.optional(),
      working_directory: z.string().optional(),
      idle_timeout_minutes: z.coerce.number().optional(),
      display_name: z.string().optional(),
      retention_period_minutes: z.coerce.number().optional(),
    })
    .nullable()

  router.post(
    "codespacesCreateWithRepoForAuthenticatedUser",
    "/repos/:owner/:repo/codespaces",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesCreateWithRepoForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codespacesCreateWithRepoForAuthenticatedUserBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codespacesCreateWithRepoForAuthenticatedUser(
          input,
          codespacesCreateWithRepoForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesCreateWithRepoForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesListDevcontainersInRepositoryForAuthenticatedUserParamSchema =
    z.object({ owner: z.string(), repo: z.string() })

  const codespacesListDevcontainersInRepositoryForAuthenticatedUserQuerySchema =
    z.object({
      per_page: z.coerce.number().optional().default(30),
      page: z.coerce.number().optional().default(1),
    })

  router.get(
    "codespacesListDevcontainersInRepositoryForAuthenticatedUser",
    "/repos/:owner/:repo/codespaces/devcontainers",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesListDevcontainersInRepositoryForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codespacesListDevcontainersInRepositoryForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesListDevcontainersInRepositoryForAuthenticatedUser(
          input,
          codespacesListDevcontainersInRepositoryForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        codespacesListDevcontainersInRepositoryForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const codespacesRepoMachinesForAuthenticatedUserParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const codespacesRepoMachinesForAuthenticatedUserQuerySchema = z.object({
    location: z.string().optional(),
    client_ip: z.string().optional(),
    ref: z.string().optional(),
  })

  router.get(
    "codespacesRepoMachinesForAuthenticatedUser",
    "/repos/:owner/:repo/codespaces/machines",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesRepoMachinesForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codespacesRepoMachinesForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesRepoMachinesForAuthenticatedUser(
          input,
          codespacesRepoMachinesForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesRepoMachinesForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesPreFlightWithRepoForAuthenticatedUserParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const codespacesPreFlightWithRepoForAuthenticatedUserQuerySchema = z.object({
    ref: z.string().optional(),
    client_ip: z.string().optional(),
  })

  router.get(
    "codespacesPreFlightWithRepoForAuthenticatedUser",
    "/repos/:owner/:repo/codespaces/new",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesPreFlightWithRepoForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codespacesPreFlightWithRepoForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesPreFlightWithRepoForAuthenticatedUser(
          input,
          codespacesPreFlightWithRepoForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        codespacesPreFlightWithRepoForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const codespacesCheckPermissionsForDevcontainerParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const codespacesCheckPermissionsForDevcontainerQuerySchema = z.object({
    ref: z.string(),
    devcontainer_path: z.string(),
  })

  router.get(
    "codespacesCheckPermissionsForDevcontainer",
    "/repos/:owner/:repo/codespaces/permissions_check",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesCheckPermissionsForDevcontainerParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codespacesCheckPermissionsForDevcontainerQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesCheckPermissionsForDevcontainer(
          input,
          codespacesCheckPermissionsForDevcontainerResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesCheckPermissionsForDevcontainerResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesListRepoSecretsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const codespacesListRepoSecretsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "codespacesListRepoSecrets",
    "/repos/:owner/:repo/codespaces/secrets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesListRepoSecretsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codespacesListRepoSecretsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesListRepoSecrets(
          input,
          codespacesListRepoSecretsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesListRepoSecretsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesGetRepoPublicKeyParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "codespacesGetRepoPublicKey",
    "/repos/:owner/:repo/codespaces/secrets/public-key",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesGetRepoPublicKeyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesGetRepoPublicKey(
          input,
          codespacesGetRepoPublicKeyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesGetRepoPublicKeyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesGetRepoSecretParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  })

  router.get(
    "codespacesGetRepoSecret",
    "/repos/:owner/:repo/codespaces/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesGetRepoSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesGetRepoSecret(input, codespacesGetRepoSecretResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesGetRepoSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesCreateOrUpdateRepoSecretParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  })

  const codespacesCreateOrUpdateRepoSecretBodySchema = z.object({
    encrypted_value: z
      .string()
      .regex(
        new RegExp(
          "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$",
        ),
      )
      .optional(),
    key_id: z.string().optional(),
  })

  router.put(
    "codespacesCreateOrUpdateRepoSecret",
    "/repos/:owner/:repo/codespaces/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesCreateOrUpdateRepoSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codespacesCreateOrUpdateRepoSecretBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codespacesCreateOrUpdateRepoSecret(
          input,
          codespacesCreateOrUpdateRepoSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesCreateOrUpdateRepoSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesDeleteRepoSecretParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  })

  router.delete(
    "codespacesDeleteRepoSecret",
    "/repos/:owner/:repo/codespaces/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesDeleteRepoSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesDeleteRepoSecret(
          input,
          codespacesDeleteRepoSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesDeleteRepoSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListCollaboratorsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListCollaboratorsQuerySchema = z.object({
    affiliation: z.enum(["outside", "direct", "all"]).optional().default("all"),
    permission: z
      .enum(["pull", "triage", "push", "maintain", "admin"])
      .optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposListCollaborators",
    "/repos/:owner/:repo/collaborators",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListCollaboratorsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListCollaboratorsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListCollaborators(input, reposListCollaboratorsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListCollaboratorsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCheckCollaboratorParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    username: z.string(),
  })

  router.get(
    "reposCheckCollaborator",
    "/repos/:owner/:repo/collaborators/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCheckCollaboratorParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposCheckCollaborator(input, reposCheckCollaboratorResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCheckCollaboratorResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposAddCollaboratorParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    username: z.string(),
  })

  const reposAddCollaboratorBodySchema = z
    .object({ permission: z.string().optional().default("push") })
    .optional()

  router.put(
    "reposAddCollaborator",
    "/repos/:owner/:repo/collaborators/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposAddCollaboratorParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposAddCollaboratorBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposAddCollaborator(input, reposAddCollaboratorResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposAddCollaboratorResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposRemoveCollaboratorParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    username: z.string(),
  })

  router.delete(
    "reposRemoveCollaborator",
    "/repos/:owner/:repo/collaborators/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposRemoveCollaboratorParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposRemoveCollaborator(input, reposRemoveCollaboratorResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposRemoveCollaboratorResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetCollaboratorPermissionLevelParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    username: z.string(),
  })

  router.get(
    "reposGetCollaboratorPermissionLevel",
    "/repos/:owner/:repo/collaborators/:username/permission",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetCollaboratorPermissionLevelParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetCollaboratorPermissionLevel(
          input,
          reposGetCollaboratorPermissionLevelResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetCollaboratorPermissionLevelResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposListCommitCommentsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListCommitCommentsForRepoQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposListCommitCommentsForRepo",
    "/repos/:owner/:repo/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListCommitCommentsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListCommitCommentsForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListCommitCommentsForRepo(
          input,
          reposListCommitCommentsForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListCommitCommentsForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetCommitCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  router.get(
    "reposGetCommitComment",
    "/repos/:owner/:repo/comments/:comment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetCommitCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetCommitComment(input, reposGetCommitCommentResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetCommitCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUpdateCommitCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  const reposUpdateCommitCommentBodySchema = z.object({ body: z.string() })

  router.patch(
    "reposUpdateCommitComment",
    "/repos/:owner/:repo/comments/:comment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdateCommitCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdateCommitCommentBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposUpdateCommitComment(input, reposUpdateCommitCommentResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdateCommitCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteCommitCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  router.delete(
    "reposDeleteCommitComment",
    "/repos/:owner/:repo/comments/:comment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteCommitCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDeleteCommitComment(input, reposDeleteCommitCommentResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteCommitCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsListForCommitCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  const reactionsListForCommitCommentQuerySchema = z.object({
    content: z
      .enum([
        "+1",
        "-1",
        "laugh",
        "confused",
        "heart",
        "hooray",
        "rocket",
        "eyes",
      ])
      .optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reactionsListForCommitComment",
    "/repos/:owner/:repo/comments/:comment_id/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsListForCommitCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reactionsListForCommitCommentQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reactionsListForCommitComment(
          input,
          reactionsListForCommitCommentResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsListForCommitCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsCreateForCommitCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  const reactionsCreateForCommitCommentBodySchema = z.object({
    content: z.enum([
      "+1",
      "-1",
      "laugh",
      "confused",
      "heart",
      "hooray",
      "rocket",
      "eyes",
    ]),
  })

  router.post(
    "reactionsCreateForCommitComment",
    "/repos/:owner/:repo/comments/:comment_id/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsCreateForCommitCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reactionsCreateForCommitCommentBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reactionsCreateForCommitComment(
          input,
          reactionsCreateForCommitCommentResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsCreateForCommitCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsDeleteForCommitCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
    reaction_id: z.coerce.number(),
  })

  router.delete(
    "reactionsDeleteForCommitComment",
    "/repos/:owner/:repo/comments/:comment_id/reactions/:reaction_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsDeleteForCommitCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reactionsDeleteForCommitComment(
          input,
          reactionsDeleteForCommitCommentResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsDeleteForCommitCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListCommitsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListCommitsQuerySchema = z.object({
    sha: z.string().optional(),
    path: z.string().optional(),
    author: z.string().optional(),
    committer: z.string().optional(),
    since: z.string().datetime({ offset: true }).optional(),
    until: z.string().datetime({ offset: true }).optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposListCommits",
    "/repos/:owner/:repo/commits",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListCommitsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListCommitsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListCommits(input, reposListCommitsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListCommitsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListBranchesForHeadCommitParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    commit_sha: z.string(),
  })

  router.get(
    "reposListBranchesForHeadCommit",
    "/repos/:owner/:repo/commits/:commit_sha/branches-where-head",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListBranchesForHeadCommitParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListBranchesForHeadCommit(
          input,
          reposListBranchesForHeadCommitResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListBranchesForHeadCommitResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListCommentsForCommitParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    commit_sha: z.string(),
  })

  const reposListCommentsForCommitQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposListCommentsForCommit",
    "/repos/:owner/:repo/commits/:commit_sha/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListCommentsForCommitParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListCommentsForCommitQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListCommentsForCommit(
          input,
          reposListCommentsForCommitResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListCommentsForCommitResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateCommitCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    commit_sha: z.string(),
  })

  const reposCreateCommitCommentBodySchema = z.object({
    body: z.string(),
    path: z.string().optional(),
    position: z.coerce.number().optional(),
    line: z.coerce.number().optional(),
  })

  router.post(
    "reposCreateCommitComment",
    "/repos/:owner/:repo/commits/:commit_sha/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateCommitCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateCommitCommentBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposCreateCommitComment(input, reposCreateCommitCommentResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateCommitCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListPullRequestsAssociatedWithCommitParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    commit_sha: z.string(),
  })

  const reposListPullRequestsAssociatedWithCommitQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposListPullRequestsAssociatedWithCommit",
    "/repos/:owner/:repo/commits/:commit_sha/pulls",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListPullRequestsAssociatedWithCommitParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListPullRequestsAssociatedWithCommitQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListPullRequestsAssociatedWithCommit(
          input,
          reposListPullRequestsAssociatedWithCommitResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListPullRequestsAssociatedWithCommitResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposGetCommitParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  })

  const reposGetCommitQuerySchema = z.object({
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
  })

  router.get(
    "reposGetCommit",
    "/repos/:owner/:repo/commits/:ref",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetCommitParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetCommitQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetCommit(input, reposGetCommitResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetCommitResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const checksListForRefParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  })

  const checksListForRefQuerySchema = z.object({
    check_name: z.string().optional(),
    status: z.enum(["queued", "in_progress", "completed"]).optional(),
    filter: z.enum(["latest", "all"]).optional().default("latest"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
    app_id: z.coerce.number().optional(),
  })

  router.get(
    "checksListForRef",
    "/repos/:owner/:repo/commits/:ref/check-runs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          checksListForRefParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          checksListForRefQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .checksListForRef(input, checksListForRefResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = checksListForRefResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const checksListSuitesForRefParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  })

  const checksListSuitesForRefQuerySchema = z.object({
    app_id: z.coerce.number().optional(),
    check_name: z.string().optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "checksListSuitesForRef",
    "/repos/:owner/:repo/commits/:ref/check-suites",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          checksListSuitesForRefParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          checksListSuitesForRefQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .checksListSuitesForRef(input, checksListSuitesForRefResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = checksListSuitesForRefResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetCombinedStatusForRefParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  })

  const reposGetCombinedStatusForRefQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposGetCombinedStatusForRef",
    "/repos/:owner/:repo/commits/:ref/status",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetCombinedStatusForRefParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetCombinedStatusForRefQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetCombinedStatusForRef(
          input,
          reposGetCombinedStatusForRefResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetCombinedStatusForRefResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListCommitStatusesForRefParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  })

  const reposListCommitStatusesForRefQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposListCommitStatusesForRef",
    "/repos/:owner/:repo/commits/:ref/statuses",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListCommitStatusesForRefParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListCommitStatusesForRefQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListCommitStatusesForRef(
          input,
          reposListCommitStatusesForRefResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListCommitStatusesForRefResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetCommunityProfileMetricsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "reposGetCommunityProfileMetrics",
    "/repos/:owner/:repo/community/profile",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetCommunityProfileMetricsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetCommunityProfileMetrics(
          input,
          reposGetCommunityProfileMetricsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetCommunityProfileMetricsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCompareCommitsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    basehead: z.string(),
  })

  const reposCompareCommitsQuerySchema = z.object({
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
  })

  router.get(
    "reposCompareCommits",
    "/repos/:owner/:repo/compare/:basehead",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCompareCommitsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposCompareCommitsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposCompareCommits(input, reposCompareCommitsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCompareCommitsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetContentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    path: z.string(),
  })

  const reposGetContentQuerySchema = z.object({ ref: z.string().optional() })

  router.get(
    "reposGetContent",
    "/repos/:owner/:repo/contents/:path",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetContentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetContentQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetContent(input, reposGetContentResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetContentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateOrUpdateFileContentsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    path: z.string(),
  })

  const reposCreateOrUpdateFileContentsBodySchema = z.object({
    message: z.string(),
    content: z.string(),
    sha: z.string().optional(),
    branch: z.string().optional(),
    committer: z
      .object({
        name: z.string(),
        email: z.string(),
        date: z.string().optional(),
      })
      .optional(),
    author: z
      .object({
        name: z.string(),
        email: z.string(),
        date: z.string().optional(),
      })
      .optional(),
  })

  router.put(
    "reposCreateOrUpdateFileContents",
    "/repos/:owner/:repo/contents/:path",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateOrUpdateFileContentsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateOrUpdateFileContentsBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposCreateOrUpdateFileContents(
          input,
          reposCreateOrUpdateFileContentsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateOrUpdateFileContentsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteFileParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    path: z.string(),
  })

  const reposDeleteFileBodySchema = z.object({
    message: z.string(),
    sha: z.string(),
    branch: z.string().optional(),
    committer: z
      .object({ name: z.string().optional(), email: z.string().optional() })
      .optional(),
    author: z
      .object({ name: z.string().optional(), email: z.string().optional() })
      .optional(),
  })

  router.delete(
    "reposDeleteFile",
    "/repos/:owner/:repo/contents/:path",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteFileParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposDeleteFileBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposDeleteFile(input, reposDeleteFileResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteFileResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListContributorsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListContributorsQuerySchema = z.object({
    anon: z.string().optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposListContributors",
    "/repos/:owner/:repo/contributors",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListContributorsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListContributorsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListContributors(input, reposListContributorsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListContributorsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependabotListAlertsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const dependabotListAlertsForRepoQuerySchema = z.object({
    state: z.string().optional(),
    severity: z.string().optional(),
    ecosystem: z.string().optional(),
    package: z.string().optional(),
    manifest: z.string().optional(),
    epss_percentage: z.string().optional(),
    scope: z.enum(["development", "runtime"]).optional(),
    sort: z
      .enum(["created", "updated", "epss_percentage"])
      .optional()
      .default("created"),
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
    before: z.string().optional(),
    after: z.string().optional(),
    first: z.coerce.number().min(1).max(100).optional().default(30),
    last: z.coerce.number().min(1).max(100).optional(),
  })

  router.get(
    "dependabotListAlertsForRepo",
    "/repos/:owner/:repo/dependabot/alerts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotListAlertsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          dependabotListAlertsForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .dependabotListAlertsForRepo(
          input,
          dependabotListAlertsForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotListAlertsForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependabotGetAlertParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    alert_number: s_alert_number,
  })

  router.get(
    "dependabotGetAlert",
    "/repos/:owner/:repo/dependabot/alerts/:alert_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotGetAlertParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .dependabotGetAlert(input, dependabotGetAlertResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotGetAlertResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependabotUpdateAlertParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    alert_number: s_alert_number,
  })

  const dependabotUpdateAlertBodySchema = z.object({
    state: z.enum(["dismissed", "open"]),
    dismissed_reason: z
      .enum([
        "fix_started",
        "inaccurate",
        "no_bandwidth",
        "not_used",
        "tolerable_risk",
      ])
      .optional(),
    dismissed_comment: z.string().max(280).optional(),
  })

  router.patch(
    "dependabotUpdateAlert",
    "/repos/:owner/:repo/dependabot/alerts/:alert_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotUpdateAlertParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          dependabotUpdateAlertBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .dependabotUpdateAlert(input, dependabotUpdateAlertResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotUpdateAlertResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependabotListRepoSecretsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const dependabotListRepoSecretsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "dependabotListRepoSecrets",
    "/repos/:owner/:repo/dependabot/secrets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotListRepoSecretsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          dependabotListRepoSecretsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .dependabotListRepoSecrets(
          input,
          dependabotListRepoSecretsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotListRepoSecretsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependabotGetRepoPublicKeyParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "dependabotGetRepoPublicKey",
    "/repos/:owner/:repo/dependabot/secrets/public-key",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotGetRepoPublicKeyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .dependabotGetRepoPublicKey(
          input,
          dependabotGetRepoPublicKeyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotGetRepoPublicKeyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependabotGetRepoSecretParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  })

  router.get(
    "dependabotGetRepoSecret",
    "/repos/:owner/:repo/dependabot/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotGetRepoSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .dependabotGetRepoSecret(input, dependabotGetRepoSecretResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotGetRepoSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependabotCreateOrUpdateRepoSecretParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  })

  const dependabotCreateOrUpdateRepoSecretBodySchema = z.object({
    encrypted_value: z
      .string()
      .regex(
        new RegExp(
          "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$",
        ),
      )
      .optional(),
    key_id: z.string().optional(),
  })

  router.put(
    "dependabotCreateOrUpdateRepoSecret",
    "/repos/:owner/:repo/dependabot/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotCreateOrUpdateRepoSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          dependabotCreateOrUpdateRepoSecretBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .dependabotCreateOrUpdateRepoSecret(
          input,
          dependabotCreateOrUpdateRepoSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotCreateOrUpdateRepoSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const dependabotDeleteRepoSecretParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  })

  router.delete(
    "dependabotDeleteRepoSecret",
    "/repos/:owner/:repo/dependabot/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotDeleteRepoSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .dependabotDeleteRepoSecret(
          input,
          dependabotDeleteRepoSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotDeleteRepoSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependencyGraphDiffRangeParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    basehead: z.string(),
  })

  const dependencyGraphDiffRangeQuerySchema = z.object({
    name: z.string().optional(),
  })

  router.get(
    "dependencyGraphDiffRange",
    "/repos/:owner/:repo/dependency-graph/compare/:basehead",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependencyGraphDiffRangeParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          dependencyGraphDiffRangeQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .dependencyGraphDiffRange(input, dependencyGraphDiffRangeResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependencyGraphDiffRangeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependencyGraphExportSbomParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "dependencyGraphExportSbom",
    "/repos/:owner/:repo/dependency-graph/sbom",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependencyGraphExportSbomParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .dependencyGraphExportSbom(
          input,
          dependencyGraphExportSbomResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependencyGraphExportSbomResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependencyGraphCreateRepositorySnapshotParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const dependencyGraphCreateRepositorySnapshotBodySchema = s_snapshot

  router.post(
    "dependencyGraphCreateRepositorySnapshot",
    "/repos/:owner/:repo/dependency-graph/snapshots",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependencyGraphCreateRepositorySnapshotParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          dependencyGraphCreateRepositorySnapshotBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .dependencyGraphCreateRepositorySnapshot(
          input,
          dependencyGraphCreateRepositorySnapshotResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependencyGraphCreateRepositorySnapshotResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposListDeploymentsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListDeploymentsQuerySchema = z.object({
    sha: z.string().optional().default("none"),
    ref: z.string().optional().default("none"),
    task: z.string().optional().default("none"),
    environment: z.string().nullable().optional().default("none"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposListDeployments",
    "/repos/:owner/:repo/deployments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListDeploymentsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListDeploymentsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListDeployments(input, reposListDeploymentsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListDeploymentsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateDeploymentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCreateDeploymentBodySchema = z.object({
    ref: z.string(),
    task: z.string().optional().default("deploy"),
    auto_merge: PermissiveBoolean.optional().default(true),
    required_contexts: z.array(z.string()).optional(),
    payload: z
      .union([z.record(z.unknown()), z.string().default("")])
      .optional(),
    environment: z.string().optional().default("production"),
    description: z.string().nullable().optional().default(""),
    transient_environment: PermissiveBoolean.optional().default(false),
    production_environment: PermissiveBoolean.optional(),
  })

  router.post(
    "reposCreateDeployment",
    "/repos/:owner/:repo/deployments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateDeploymentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateDeploymentBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposCreateDeployment(input, reposCreateDeploymentResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateDeploymentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetDeploymentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    deployment_id: z.coerce.number(),
  })

  router.get(
    "reposGetDeployment",
    "/repos/:owner/:repo/deployments/:deployment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetDeploymentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetDeployment(input, reposGetDeploymentResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetDeploymentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteDeploymentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    deployment_id: z.coerce.number(),
  })

  router.delete(
    "reposDeleteDeployment",
    "/repos/:owner/:repo/deployments/:deployment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteDeploymentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDeleteDeployment(input, reposDeleteDeploymentResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteDeploymentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListDeploymentStatusesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    deployment_id: z.coerce.number(),
  })

  const reposListDeploymentStatusesQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposListDeploymentStatuses",
    "/repos/:owner/:repo/deployments/:deployment_id/statuses",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListDeploymentStatusesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListDeploymentStatusesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListDeploymentStatuses(
          input,
          reposListDeploymentStatusesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListDeploymentStatusesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateDeploymentStatusParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    deployment_id: z.coerce.number(),
  })

  const reposCreateDeploymentStatusBodySchema = z.object({
    state: z.enum([
      "error",
      "failure",
      "inactive",
      "in_progress",
      "queued",
      "pending",
      "success",
    ]),
    target_url: z.string().optional().default(""),
    log_url: z.string().optional().default(""),
    description: z.string().optional().default(""),
    environment: z.string().optional(),
    environment_url: z.string().optional().default(""),
    auto_inactive: PermissiveBoolean.optional(),
  })

  router.post(
    "reposCreateDeploymentStatus",
    "/repos/:owner/:repo/deployments/:deployment_id/statuses",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateDeploymentStatusParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateDeploymentStatusBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposCreateDeploymentStatus(
          input,
          reposCreateDeploymentStatusResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateDeploymentStatusResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetDeploymentStatusParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    deployment_id: z.coerce.number(),
    status_id: z.coerce.number(),
  })

  router.get(
    "reposGetDeploymentStatus",
    "/repos/:owner/:repo/deployments/:deployment_id/statuses/:status_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetDeploymentStatusParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetDeploymentStatus(input, reposGetDeploymentStatusResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetDeploymentStatusResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateDispatchEventParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCreateDispatchEventBodySchema = z.object({
    event_type: z.string().min(1).max(100),
    client_payload: z.record(z.unknown()).optional(),
  })

  router.post(
    "reposCreateDispatchEvent",
    "/repos/:owner/:repo/dispatches",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateDispatchEventParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateDispatchEventBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposCreateDispatchEvent(input, reposCreateDispatchEventResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateDispatchEventResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetAllEnvironmentsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetAllEnvironmentsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposGetAllEnvironments",
    "/repos/:owner/:repo/environments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetAllEnvironmentsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetAllEnvironmentsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetAllEnvironments(input, reposGetAllEnvironmentsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetAllEnvironmentsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetEnvironmentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
  })

  router.get(
    "reposGetEnvironment",
    "/repos/:owner/:repo/environments/:environment_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetEnvironmentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetEnvironment(input, reposGetEnvironmentResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetEnvironmentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateOrUpdateEnvironmentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
  })

  const reposCreateOrUpdateEnvironmentBodySchema = z
    .object({
      wait_timer: s_wait_timer.optional(),
      prevent_self_review: s_prevent_self_review.optional(),
      reviewers: z
        .array(
          z.object({
            type: s_deployment_reviewer_type.optional(),
            id: z.coerce.number().optional(),
          }),
        )
        .nullable()
        .optional(),
      deployment_branch_policy: s_deployment_branch_policy_settings.optional(),
    })
    .nullable()
    .optional()

  router.put(
    "reposCreateOrUpdateEnvironment",
    "/repos/:owner/:repo/environments/:environment_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateOrUpdateEnvironmentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateOrUpdateEnvironmentBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposCreateOrUpdateEnvironment(
          input,
          reposCreateOrUpdateEnvironmentResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateOrUpdateEnvironmentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteAnEnvironmentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
  })

  router.delete(
    "reposDeleteAnEnvironment",
    "/repos/:owner/:repo/environments/:environment_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteAnEnvironmentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDeleteAnEnvironment(input, reposDeleteAnEnvironmentResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteAnEnvironmentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListDeploymentBranchPoliciesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
  })

  const reposListDeploymentBranchPoliciesQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposListDeploymentBranchPolicies",
    "/repos/:owner/:repo/environments/:environment_name/deployment-branch-policies",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListDeploymentBranchPoliciesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListDeploymentBranchPoliciesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListDeploymentBranchPolicies(
          input,
          reposListDeploymentBranchPoliciesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListDeploymentBranchPoliciesResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposCreateDeploymentBranchPolicyParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
  })

  const reposCreateDeploymentBranchPolicyBodySchema =
    s_deployment_branch_policy_name_pattern_with_type

  router.post(
    "reposCreateDeploymentBranchPolicy",
    "/repos/:owner/:repo/environments/:environment_name/deployment-branch-policies",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateDeploymentBranchPolicyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateDeploymentBranchPolicyBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposCreateDeploymentBranchPolicy(
          input,
          reposCreateDeploymentBranchPolicyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateDeploymentBranchPolicyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposGetDeploymentBranchPolicyParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
    branch_policy_id: z.coerce.number(),
  })

  router.get(
    "reposGetDeploymentBranchPolicy",
    "/repos/:owner/:repo/environments/:environment_name/deployment-branch-policies/:branch_policy_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetDeploymentBranchPolicyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetDeploymentBranchPolicy(
          input,
          reposGetDeploymentBranchPolicyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetDeploymentBranchPolicyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUpdateDeploymentBranchPolicyParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
    branch_policy_id: z.coerce.number(),
  })

  const reposUpdateDeploymentBranchPolicyBodySchema =
    s_deployment_branch_policy_name_pattern

  router.put(
    "reposUpdateDeploymentBranchPolicy",
    "/repos/:owner/:repo/environments/:environment_name/deployment-branch-policies/:branch_policy_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdateDeploymentBranchPolicyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdateDeploymentBranchPolicyBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposUpdateDeploymentBranchPolicy(
          input,
          reposUpdateDeploymentBranchPolicyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdateDeploymentBranchPolicyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposDeleteDeploymentBranchPolicyParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
    branch_policy_id: z.coerce.number(),
  })

  router.delete(
    "reposDeleteDeploymentBranchPolicy",
    "/repos/:owner/:repo/environments/:environment_name/deployment-branch-policies/:branch_policy_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteDeploymentBranchPolicyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDeleteDeploymentBranchPolicy(
          input,
          reposDeleteDeploymentBranchPolicyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteDeploymentBranchPolicyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposGetAllDeploymentProtectionRulesParamSchema = z.object({
    environment_name: z.string(),
    repo: z.string(),
    owner: z.string(),
  })

  router.get(
    "reposGetAllDeploymentProtectionRules",
    "/repos/:owner/:repo/environments/:environment_name/deployment_protection_rules",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetAllDeploymentProtectionRulesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetAllDeploymentProtectionRules(
          input,
          reposGetAllDeploymentProtectionRulesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetAllDeploymentProtectionRulesResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposCreateDeploymentProtectionRuleParamSchema = z.object({
    environment_name: z.string(),
    repo: z.string(),
    owner: z.string(),
  })

  const reposCreateDeploymentProtectionRuleBodySchema = z.object({
    integration_id: z.coerce.number().optional(),
  })

  router.post(
    "reposCreateDeploymentProtectionRule",
    "/repos/:owner/:repo/environments/:environment_name/deployment_protection_rules",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateDeploymentProtectionRuleParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateDeploymentProtectionRuleBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposCreateDeploymentProtectionRule(
          input,
          reposCreateDeploymentProtectionRuleResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateDeploymentProtectionRuleResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposListCustomDeploymentRuleIntegrationsParamSchema = z.object({
    environment_name: z.string(),
    repo: z.string(),
    owner: z.string(),
  })

  const reposListCustomDeploymentRuleIntegrationsQuerySchema = z.object({
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
  })

  router.get(
    "reposListCustomDeploymentRuleIntegrations",
    "/repos/:owner/:repo/environments/:environment_name/deployment_protection_rules/apps",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListCustomDeploymentRuleIntegrationsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListCustomDeploymentRuleIntegrationsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListCustomDeploymentRuleIntegrations(
          input,
          reposListCustomDeploymentRuleIntegrationsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListCustomDeploymentRuleIntegrationsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposGetCustomDeploymentProtectionRuleParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
    protection_rule_id: z.coerce.number(),
  })

  router.get(
    "reposGetCustomDeploymentProtectionRule",
    "/repos/:owner/:repo/environments/:environment_name/deployment_protection_rules/:protection_rule_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetCustomDeploymentProtectionRuleParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetCustomDeploymentProtectionRule(
          input,
          reposGetCustomDeploymentProtectionRuleResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetCustomDeploymentProtectionRuleResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposDisableDeploymentProtectionRuleParamSchema = z.object({
    environment_name: z.string(),
    repo: z.string(),
    owner: z.string(),
    protection_rule_id: z.coerce.number(),
  })

  router.delete(
    "reposDisableDeploymentProtectionRule",
    "/repos/:owner/:repo/environments/:environment_name/deployment_protection_rules/:protection_rule_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDisableDeploymentProtectionRuleParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDisableDeploymentProtectionRule(
          input,
          reposDisableDeploymentProtectionRuleResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDisableDeploymentProtectionRuleResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsListEnvironmentSecretsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
  })

  const actionsListEnvironmentSecretsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "actionsListEnvironmentSecrets",
    "/repos/:owner/:repo/environments/:environment_name/secrets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListEnvironmentSecretsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListEnvironmentSecretsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListEnvironmentSecrets(
          input,
          actionsListEnvironmentSecretsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListEnvironmentSecretsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetEnvironmentPublicKeyParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
  })

  router.get(
    "actionsGetEnvironmentPublicKey",
    "/repos/:owner/:repo/environments/:environment_name/secrets/public-key",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetEnvironmentPublicKeyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetEnvironmentPublicKey(
          input,
          actionsGetEnvironmentPublicKeyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetEnvironmentPublicKeyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetEnvironmentSecretParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
    secret_name: z.string(),
  })

  router.get(
    "actionsGetEnvironmentSecret",
    "/repos/:owner/:repo/environments/:environment_name/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetEnvironmentSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetEnvironmentSecret(
          input,
          actionsGetEnvironmentSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetEnvironmentSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsCreateOrUpdateEnvironmentSecretParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
    secret_name: z.string(),
  })

  const actionsCreateOrUpdateEnvironmentSecretBodySchema = z.object({
    encrypted_value: z
      .string()
      .regex(
        new RegExp(
          "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$",
        ),
      ),
    key_id: z.string(),
  })

  router.put(
    "actionsCreateOrUpdateEnvironmentSecret",
    "/repos/:owner/:repo/environments/:environment_name/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCreateOrUpdateEnvironmentSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsCreateOrUpdateEnvironmentSecretBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsCreateOrUpdateEnvironmentSecret(
          input,
          actionsCreateOrUpdateEnvironmentSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCreateOrUpdateEnvironmentSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteEnvironmentSecretParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
    secret_name: z.string(),
  })

  router.delete(
    "actionsDeleteEnvironmentSecret",
    "/repos/:owner/:repo/environments/:environment_name/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteEnvironmentSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsDeleteEnvironmentSecret(
          input,
          actionsDeleteEnvironmentSecretResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteEnvironmentSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsListEnvironmentVariablesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
  })

  const actionsListEnvironmentVariablesQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(10),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "actionsListEnvironmentVariables",
    "/repos/:owner/:repo/environments/:environment_name/variables",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListEnvironmentVariablesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListEnvironmentVariablesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsListEnvironmentVariables(
          input,
          actionsListEnvironmentVariablesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListEnvironmentVariablesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsCreateEnvironmentVariableParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
  })

  const actionsCreateEnvironmentVariableBodySchema = z.object({
    name: z.string(),
    value: z.string(),
  })

  router.post(
    "actionsCreateEnvironmentVariable",
    "/repos/:owner/:repo/environments/:environment_name/variables",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCreateEnvironmentVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsCreateEnvironmentVariableBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsCreateEnvironmentVariable(
          input,
          actionsCreateEnvironmentVariableResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCreateEnvironmentVariableResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetEnvironmentVariableParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
    name: z.string(),
  })

  router.get(
    "actionsGetEnvironmentVariable",
    "/repos/:owner/:repo/environments/:environment_name/variables/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetEnvironmentVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsGetEnvironmentVariable(
          input,
          actionsGetEnvironmentVariableResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetEnvironmentVariableResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsUpdateEnvironmentVariableParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    name: z.string(),
    environment_name: z.string(),
  })

  const actionsUpdateEnvironmentVariableBodySchema = z.object({
    name: z.string().optional(),
    value: z.string().optional(),
  })

  router.patch(
    "actionsUpdateEnvironmentVariable",
    "/repos/:owner/:repo/environments/:environment_name/variables/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsUpdateEnvironmentVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsUpdateEnvironmentVariableBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .actionsUpdateEnvironmentVariable(
          input,
          actionsUpdateEnvironmentVariableResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsUpdateEnvironmentVariableResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteEnvironmentVariableParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    name: z.string(),
    environment_name: z.string(),
  })

  router.delete(
    "actionsDeleteEnvironmentVariable",
    "/repos/:owner/:repo/environments/:environment_name/variables/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteEnvironmentVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .actionsDeleteEnvironmentVariable(
          input,
          actionsDeleteEnvironmentVariableResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteEnvironmentVariableResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityListRepoEventsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const activityListRepoEventsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "activityListRepoEvents",
    "/repos/:owner/:repo/events",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListRepoEventsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListRepoEventsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityListRepoEvents(input, activityListRepoEventsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListRepoEventsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListForksParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListForksQuerySchema = z.object({
    sort: z
      .enum(["newest", "oldest", "stargazers", "watchers"])
      .optional()
      .default("newest"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposListForks",
    "/repos/:owner/:repo/forks",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListForksParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListForksQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListForks(input, reposListForksResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListForksResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateForkParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCreateForkBodySchema = z
    .object({
      organization: z.string().optional(),
      name: z.string().optional(),
      default_branch_only: PermissiveBoolean.optional(),
    })
    .nullable()
    .optional()

  router.post(
    "reposCreateFork",
    "/repos/:owner/:repo/forks",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateForkParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateForkBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposCreateFork(input, reposCreateForkResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateForkResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitCreateBlobParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const gitCreateBlobBodySchema = z.object({
    content: z.string(),
    encoding: z.string().optional().default("utf-8"),
  })

  router.post(
    "gitCreateBlob",
    "/repos/:owner/:repo/git/blobs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitCreateBlobParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          gitCreateBlobBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .gitCreateBlob(input, gitCreateBlobResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitCreateBlobResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitGetBlobParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    file_sha: z.string(),
  })

  router.get(
    "gitGetBlob",
    "/repos/:owner/:repo/git/blobs/:file_sha",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitGetBlobParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .gitGetBlob(input, gitGetBlobResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitGetBlobResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitCreateCommitParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const gitCreateCommitBodySchema = z.object({
    message: z.string(),
    tree: z.string(),
    parents: z.array(z.string()).optional(),
    author: z
      .object({
        name: z.string(),
        email: z.string(),
        date: z.string().datetime({ offset: true }).optional(),
      })
      .optional(),
    committer: z
      .object({
        name: z.string().optional(),
        email: z.string().optional(),
        date: z.string().datetime({ offset: true }).optional(),
      })
      .optional(),
    signature: z.string().optional(),
  })

  router.post(
    "gitCreateCommit",
    "/repos/:owner/:repo/git/commits",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitCreateCommitParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          gitCreateCommitBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .gitCreateCommit(input, gitCreateCommitResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitCreateCommitResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitGetCommitParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    commit_sha: z.string(),
  })

  router.get(
    "gitGetCommit",
    "/repos/:owner/:repo/git/commits/:commit_sha",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitGetCommitParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .gitGetCommit(input, gitGetCommitResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitGetCommitResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitListMatchingRefsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  })

  router.get(
    "gitListMatchingRefs",
    "/repos/:owner/:repo/git/matching-refs/:ref",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitListMatchingRefsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .gitListMatchingRefs(input, gitListMatchingRefsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitListMatchingRefsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitGetRefParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  })

  router.get(
    "gitGetRef",
    "/repos/:owner/:repo/git/ref/:ref",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitGetRefParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .gitGetRef(input, gitGetRefResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitGetRefResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitCreateRefParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const gitCreateRefBodySchema = z.object({ ref: z.string(), sha: z.string() })

  router.post(
    "gitCreateRef",
    "/repos/:owner/:repo/git/refs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitCreateRefParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          gitCreateRefBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .gitCreateRef(input, gitCreateRefResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitCreateRefResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitUpdateRefParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  })

  const gitUpdateRefBodySchema = z.object({
    sha: z.string(),
    force: PermissiveBoolean.optional().default(false),
  })

  router.patch(
    "gitUpdateRef",
    "/repos/:owner/:repo/git/refs/:ref",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitUpdateRefParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          gitUpdateRefBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .gitUpdateRef(input, gitUpdateRefResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitUpdateRefResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitDeleteRefParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  })

  router.delete(
    "gitDeleteRef",
    "/repos/:owner/:repo/git/refs/:ref",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitDeleteRefParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .gitDeleteRef(input, gitDeleteRefResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitDeleteRefResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitCreateTagParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const gitCreateTagBodySchema = z.object({
    tag: z.string(),
    message: z.string(),
    object: z.string(),
    type: z.enum(["commit", "tree", "blob"]),
    tagger: z
      .object({
        name: z.string(),
        email: z.string(),
        date: z.string().datetime({ offset: true }).optional(),
      })
      .optional(),
  })

  router.post(
    "gitCreateTag",
    "/repos/:owner/:repo/git/tags",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitCreateTagParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          gitCreateTagBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .gitCreateTag(input, gitCreateTagResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitCreateTagResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitGetTagParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    tag_sha: z.string(),
  })

  router.get(
    "gitGetTag",
    "/repos/:owner/:repo/git/tags/:tag_sha",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitGetTagParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .gitGetTag(input, gitGetTagResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitGetTagResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitCreateTreeParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const gitCreateTreeBodySchema = z.object({
    tree: z.array(
      z.object({
        path: z.string().optional(),
        mode: z
          .enum(["100644", "100755", "040000", "160000", "120000"])
          .optional(),
        type: z.enum(["blob", "tree", "commit"]).optional(),
        sha: z.string().nullable().optional(),
        content: z.string().optional(),
      }),
    ),
    base_tree: z.string().optional(),
  })

  router.post(
    "gitCreateTree",
    "/repos/:owner/:repo/git/trees",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitCreateTreeParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          gitCreateTreeBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .gitCreateTree(input, gitCreateTreeResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitCreateTreeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitGetTreeParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    tree_sha: z.string(),
  })

  const gitGetTreeQuerySchema = z.object({ recursive: z.string().optional() })

  router.get(
    "gitGetTree",
    "/repos/:owner/:repo/git/trees/:tree_sha",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitGetTreeParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          gitGetTreeQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .gitGetTree(input, gitGetTreeResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitGetTreeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListWebhooksParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListWebhooksQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposListWebhooks",
    "/repos/:owner/:repo/hooks",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListWebhooksParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListWebhooksQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListWebhooks(input, reposListWebhooksResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListWebhooksResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateWebhookParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCreateWebhookBodySchema = z
    .object({
      name: z.string().optional(),
      config: z
        .object({
          url: s_webhook_config_url.optional(),
          content_type: s_webhook_config_content_type.optional(),
          secret: s_webhook_config_secret.optional(),
          insecure_ssl: s_webhook_config_insecure_ssl.optional(),
        })
        .optional(),
      events: z.array(z.string()).optional().default(["push"]),
      active: PermissiveBoolean.optional().default(true),
    })
    .nullable()
    .optional()

  router.post(
    "reposCreateWebhook",
    "/repos/:owner/:repo/hooks",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateWebhookParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateWebhookBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposCreateWebhook(input, reposCreateWebhookResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateWebhookResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetWebhookParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    hook_id: z.coerce.number(),
  })

  router.get(
    "reposGetWebhook",
    "/repos/:owner/:repo/hooks/:hook_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetWebhookParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetWebhook(input, reposGetWebhookResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetWebhookResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUpdateWebhookParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    hook_id: z.coerce.number(),
  })

  const reposUpdateWebhookBodySchema = z.object({
    config: s_webhook_config.optional(),
    events: z.array(z.string()).optional().default(["push"]),
    add_events: z.array(z.string()).optional(),
    remove_events: z.array(z.string()).optional(),
    active: PermissiveBoolean.optional().default(true),
  })

  router.patch(
    "reposUpdateWebhook",
    "/repos/:owner/:repo/hooks/:hook_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdateWebhookParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdateWebhookBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposUpdateWebhook(input, reposUpdateWebhookResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdateWebhookResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteWebhookParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    hook_id: z.coerce.number(),
  })

  router.delete(
    "reposDeleteWebhook",
    "/repos/:owner/:repo/hooks/:hook_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteWebhookParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDeleteWebhook(input, reposDeleteWebhookResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteWebhookResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetWebhookConfigForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    hook_id: z.coerce.number(),
  })

  router.get(
    "reposGetWebhookConfigForRepo",
    "/repos/:owner/:repo/hooks/:hook_id/config",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetWebhookConfigForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetWebhookConfigForRepo(
          input,
          reposGetWebhookConfigForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetWebhookConfigForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUpdateWebhookConfigForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    hook_id: z.coerce.number(),
  })

  const reposUpdateWebhookConfigForRepoBodySchema = z
    .object({
      url: s_webhook_config_url.optional(),
      content_type: s_webhook_config_content_type.optional(),
      secret: s_webhook_config_secret.optional(),
      insecure_ssl: s_webhook_config_insecure_ssl.optional(),
    })
    .optional()

  router.patch(
    "reposUpdateWebhookConfigForRepo",
    "/repos/:owner/:repo/hooks/:hook_id/config",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdateWebhookConfigForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdateWebhookConfigForRepoBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposUpdateWebhookConfigForRepo(
          input,
          reposUpdateWebhookConfigForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdateWebhookConfigForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListWebhookDeliveriesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    hook_id: z.coerce.number(),
  })

  const reposListWebhookDeliveriesQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    cursor: z.string().optional(),
  })

  router.get(
    "reposListWebhookDeliveries",
    "/repos/:owner/:repo/hooks/:hook_id/deliveries",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListWebhookDeliveriesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListWebhookDeliveriesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListWebhookDeliveries(
          input,
          reposListWebhookDeliveriesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListWebhookDeliveriesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetWebhookDeliveryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    hook_id: z.coerce.number(),
    delivery_id: z.coerce.number(),
  })

  router.get(
    "reposGetWebhookDelivery",
    "/repos/:owner/:repo/hooks/:hook_id/deliveries/:delivery_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetWebhookDeliveryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetWebhookDelivery(input, reposGetWebhookDeliveryResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetWebhookDeliveryResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposRedeliverWebhookDeliveryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    hook_id: z.coerce.number(),
    delivery_id: z.coerce.number(),
  })

  router.post(
    "reposRedeliverWebhookDelivery",
    "/repos/:owner/:repo/hooks/:hook_id/deliveries/:delivery_id/attempts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposRedeliverWebhookDeliveryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposRedeliverWebhookDelivery(
          input,
          reposRedeliverWebhookDeliveryResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposRedeliverWebhookDeliveryResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposPingWebhookParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    hook_id: z.coerce.number(),
  })

  router.post(
    "reposPingWebhook",
    "/repos/:owner/:repo/hooks/:hook_id/pings",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposPingWebhookParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposPingWebhook(input, reposPingWebhookResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposPingWebhookResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposTestPushWebhookParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    hook_id: z.coerce.number(),
  })

  router.post(
    "reposTestPushWebhook",
    "/repos/:owner/:repo/hooks/:hook_id/tests",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposTestPushWebhookParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposTestPushWebhook(input, reposTestPushWebhookResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposTestPushWebhookResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsGetImportStatusParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "migrationsGetImportStatus",
    "/repos/:owner/:repo/import",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsGetImportStatusParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .migrationsGetImportStatus(
          input,
          migrationsGetImportStatusResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsGetImportStatusResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsStartImportParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const migrationsStartImportBodySchema = z.object({
    vcs_url: z.string(),
    vcs: z.enum(["subversion", "git", "mercurial", "tfvc"]).optional(),
    vcs_username: z.string().optional(),
    vcs_password: z.string().optional(),
    tfvc_project: z.string().optional(),
  })

  router.put(
    "migrationsStartImport",
    "/repos/:owner/:repo/import",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsStartImportParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          migrationsStartImportBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .migrationsStartImport(input, migrationsStartImportResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsStartImportResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsUpdateImportParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const migrationsUpdateImportBodySchema = z
    .object({
      vcs_username: z.string().optional(),
      vcs_password: z.string().optional(),
      vcs: z.enum(["subversion", "tfvc", "git", "mercurial"]).optional(),
      tfvc_project: z.string().optional(),
    })
    .nullable()
    .optional()

  router.patch(
    "migrationsUpdateImport",
    "/repos/:owner/:repo/import",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsUpdateImportParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          migrationsUpdateImportBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .migrationsUpdateImport(input, migrationsUpdateImportResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsUpdateImportResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsCancelImportParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.delete(
    "migrationsCancelImport",
    "/repos/:owner/:repo/import",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsCancelImportParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .migrationsCancelImport(input, migrationsCancelImportResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsCancelImportResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsGetCommitAuthorsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const migrationsGetCommitAuthorsQuerySchema = z.object({
    since: z.coerce.number().optional(),
  })

  router.get(
    "migrationsGetCommitAuthors",
    "/repos/:owner/:repo/import/authors",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsGetCommitAuthorsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          migrationsGetCommitAuthorsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .migrationsGetCommitAuthors(
          input,
          migrationsGetCommitAuthorsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsGetCommitAuthorsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsMapCommitAuthorParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    author_id: z.coerce.number(),
  })

  const migrationsMapCommitAuthorBodySchema = z
    .object({ email: z.string().optional(), name: z.string().optional() })
    .optional()

  router.patch(
    "migrationsMapCommitAuthor",
    "/repos/:owner/:repo/import/authors/:author_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsMapCommitAuthorParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          migrationsMapCommitAuthorBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .migrationsMapCommitAuthor(
          input,
          migrationsMapCommitAuthorResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsMapCommitAuthorResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsGetLargeFilesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "migrationsGetLargeFiles",
    "/repos/:owner/:repo/import/large_files",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsGetLargeFilesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .migrationsGetLargeFiles(input, migrationsGetLargeFilesResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsGetLargeFilesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsSetLfsPreferenceParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const migrationsSetLfsPreferenceBodySchema = z.object({
    use_lfs: z.enum(["opt_in", "opt_out"]),
  })

  router.patch(
    "migrationsSetLfsPreference",
    "/repos/:owner/:repo/import/lfs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsSetLfsPreferenceParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          migrationsSetLfsPreferenceBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .migrationsSetLfsPreference(
          input,
          migrationsSetLfsPreferenceResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsSetLfsPreferenceResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsGetRepoInstallationParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "appsGetRepoInstallation",
    "/repos/:owner/:repo/installation",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsGetRepoInstallationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsGetRepoInstallation(input, appsGetRepoInstallationResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsGetRepoInstallationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const interactionsGetRestrictionsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "interactionsGetRestrictionsForRepo",
    "/repos/:owner/:repo/interaction-limits",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          interactionsGetRestrictionsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .interactionsGetRestrictionsForRepo(
          input,
          interactionsGetRestrictionsForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = interactionsGetRestrictionsForRepoResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const interactionsSetRestrictionsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const interactionsSetRestrictionsForRepoBodySchema = s_interaction_limit

  router.put(
    "interactionsSetRestrictionsForRepo",
    "/repos/:owner/:repo/interaction-limits",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          interactionsSetRestrictionsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          interactionsSetRestrictionsForRepoBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .interactionsSetRestrictionsForRepo(
          input,
          interactionsSetRestrictionsForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = interactionsSetRestrictionsForRepoResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const interactionsRemoveRestrictionsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.delete(
    "interactionsRemoveRestrictionsForRepo",
    "/repos/:owner/:repo/interaction-limits",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          interactionsRemoveRestrictionsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .interactionsRemoveRestrictionsForRepo(
          input,
          interactionsRemoveRestrictionsForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = interactionsRemoveRestrictionsForRepoResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposListInvitationsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListInvitationsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposListInvitations",
    "/repos/:owner/:repo/invitations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListInvitationsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListInvitationsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListInvitations(input, reposListInvitationsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListInvitationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUpdateInvitationParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    invitation_id: z.coerce.number(),
  })

  const reposUpdateInvitationBodySchema = z
    .object({
      permissions: z
        .enum(["read", "write", "maintain", "triage", "admin"])
        .optional(),
    })
    .optional()

  router.patch(
    "reposUpdateInvitation",
    "/repos/:owner/:repo/invitations/:invitation_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdateInvitationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdateInvitationBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposUpdateInvitation(input, reposUpdateInvitationResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdateInvitationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteInvitationParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    invitation_id: z.coerce.number(),
  })

  router.delete(
    "reposDeleteInvitation",
    "/repos/:owner/:repo/invitations/:invitation_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteInvitationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDeleteInvitation(input, reposDeleteInvitationResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteInvitationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesListForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const issuesListForRepoQuerySchema = z.object({
    milestone: z.string().optional(),
    state: z.enum(["open", "closed", "all"]).optional().default("open"),
    assignee: z.string().optional(),
    type: z.string().optional(),
    creator: z.string().optional(),
    mentioned: z.string().optional(),
    labels: z.string().optional(),
    sort: z
      .enum(["created", "updated", "comments"])
      .optional()
      .default("created"),
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    since: z.string().datetime({ offset: true }).optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "issuesListForRepo",
    "/repos/:owner/:repo/issues",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesListForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          issuesListForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesListForRepo(input, issuesListForRepoResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesCreateParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const issuesCreateBodySchema = z.object({
    title: z.union([z.string(), z.coerce.number()]),
    body: z.string().optional(),
    assignee: z.string().nullable().optional(),
    milestone: z.union([z.string(), z.coerce.number()]).nullable().optional(),
    labels: z
      .array(
        z.union([
          z.string(),
          z.object({
            id: z.coerce.number().optional(),
            name: z.string().optional(),
            description: z.string().nullable().optional(),
            color: z.string().nullable().optional(),
          }),
        ]),
      )
      .optional(),
    assignees: z.array(z.string()).optional(),
    type: z.string().nullable().optional(),
  })

  router.post(
    "issuesCreate",
    "/repos/:owner/:repo/issues",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesCreateParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesCreateBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .issuesCreate(input, issuesCreateResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesCreateResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesListCommentsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const issuesListCommentsForRepoQuerySchema = z.object({
    sort: z.enum(["created", "updated"]).optional().default("created"),
    direction: z.enum(["asc", "desc"]).optional(),
    since: z.string().datetime({ offset: true }).optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "issuesListCommentsForRepo",
    "/repos/:owner/:repo/issues/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesListCommentsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          issuesListCommentsForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesListCommentsForRepo(
          input,
          issuesListCommentsForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListCommentsForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesGetCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  router.get(
    "issuesGetComment",
    "/repos/:owner/:repo/issues/comments/:comment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesGetCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesGetComment(input, issuesGetCommentResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesGetCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesUpdateCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  const issuesUpdateCommentBodySchema = z.object({ body: z.string() })

  router.patch(
    "issuesUpdateComment",
    "/repos/:owner/:repo/issues/comments/:comment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesUpdateCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesUpdateCommentBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .issuesUpdateComment(input, issuesUpdateCommentResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesUpdateCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesDeleteCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  router.delete(
    "issuesDeleteComment",
    "/repos/:owner/:repo/issues/comments/:comment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesDeleteCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesDeleteComment(input, issuesDeleteCommentResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesDeleteCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsListForIssueCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  const reactionsListForIssueCommentQuerySchema = z.object({
    content: z
      .enum([
        "+1",
        "-1",
        "laugh",
        "confused",
        "heart",
        "hooray",
        "rocket",
        "eyes",
      ])
      .optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reactionsListForIssueComment",
    "/repos/:owner/:repo/issues/comments/:comment_id/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsListForIssueCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reactionsListForIssueCommentQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reactionsListForIssueComment(
          input,
          reactionsListForIssueCommentResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsListForIssueCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsCreateForIssueCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  const reactionsCreateForIssueCommentBodySchema = z.object({
    content: z.enum([
      "+1",
      "-1",
      "laugh",
      "confused",
      "heart",
      "hooray",
      "rocket",
      "eyes",
    ]),
  })

  router.post(
    "reactionsCreateForIssueComment",
    "/repos/:owner/:repo/issues/comments/:comment_id/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsCreateForIssueCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reactionsCreateForIssueCommentBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reactionsCreateForIssueComment(
          input,
          reactionsCreateForIssueCommentResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsCreateForIssueCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsDeleteForIssueCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
    reaction_id: z.coerce.number(),
  })

  router.delete(
    "reactionsDeleteForIssueComment",
    "/repos/:owner/:repo/issues/comments/:comment_id/reactions/:reaction_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsDeleteForIssueCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reactionsDeleteForIssueComment(
          input,
          reactionsDeleteForIssueCommentResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsDeleteForIssueCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesListEventsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const issuesListEventsForRepoQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "issuesListEventsForRepo",
    "/repos/:owner/:repo/issues/events",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesListEventsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          issuesListEventsForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesListEventsForRepo(input, issuesListEventsForRepoResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListEventsForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesGetEventParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    event_id: z.coerce.number(),
  })

  router.get(
    "issuesGetEvent",
    "/repos/:owner/:repo/issues/events/:event_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesGetEventParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesGetEvent(input, issuesGetEventResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesGetEventResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesGetParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  router.get(
    "issuesGet",
    "/repos/:owner/:repo/issues/:issue_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesGetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesGet(input, issuesGetResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesGetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesUpdateParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesUpdateBodySchema = z
    .object({
      title: z.union([z.string(), z.coerce.number()]).nullable().optional(),
      body: z.string().nullable().optional(),
      assignee: z.string().nullable().optional(),
      state: z.enum(["open", "closed"]).optional(),
      state_reason: z
        .enum(["completed", "not_planned", "reopened"])
        .nullable()
        .optional(),
      milestone: z.union([z.string(), z.coerce.number()]).nullable().optional(),
      labels: z
        .array(
          z.union([
            z.string(),
            z.object({
              id: z.coerce.number().optional(),
              name: z.string().optional(),
              description: z.string().nullable().optional(),
              color: z.string().nullable().optional(),
            }),
          ]),
        )
        .optional(),
      assignees: z.array(z.string()).optional(),
      type: z.string().nullable().optional(),
    })
    .optional()

  router.patch(
    "issuesUpdate",
    "/repos/:owner/:repo/issues/:issue_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesUpdateParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesUpdateBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .issuesUpdate(input, issuesUpdateResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesUpdateResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesAddAssigneesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesAddAssigneesBodySchema = z
    .object({ assignees: z.array(z.string()).optional() })
    .optional()

  router.post(
    "issuesAddAssignees",
    "/repos/:owner/:repo/issues/:issue_number/assignees",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesAddAssigneesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesAddAssigneesBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .issuesAddAssignees(input, issuesAddAssigneesResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesAddAssigneesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesRemoveAssigneesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesRemoveAssigneesBodySchema = z.object({
    assignees: z.array(z.string()).optional(),
  })

  router.delete(
    "issuesRemoveAssignees",
    "/repos/:owner/:repo/issues/:issue_number/assignees",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesRemoveAssigneesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesRemoveAssigneesBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .issuesRemoveAssignees(input, issuesRemoveAssigneesResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesRemoveAssigneesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesCheckUserCanBeAssignedToIssueParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
    assignee: z.string(),
  })

  router.get(
    "issuesCheckUserCanBeAssignedToIssue",
    "/repos/:owner/:repo/issues/:issue_number/assignees/:assignee",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesCheckUserCanBeAssignedToIssueParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesCheckUserCanBeAssignedToIssue(
          input,
          issuesCheckUserCanBeAssignedToIssueResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesCheckUserCanBeAssignedToIssueResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const issuesListCommentsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesListCommentsQuerySchema = z.object({
    since: z.string().datetime({ offset: true }).optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "issuesListComments",
    "/repos/:owner/:repo/issues/:issue_number/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesListCommentsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          issuesListCommentsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesListComments(input, issuesListCommentsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListCommentsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesCreateCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesCreateCommentBodySchema = z.object({ body: z.string() })

  router.post(
    "issuesCreateComment",
    "/repos/:owner/:repo/issues/:issue_number/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesCreateCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesCreateCommentBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .issuesCreateComment(input, issuesCreateCommentResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesCreateCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesListEventsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesListEventsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "issuesListEvents",
    "/repos/:owner/:repo/issues/:issue_number/events",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesListEventsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          issuesListEventsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesListEvents(input, issuesListEventsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListEventsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesListLabelsOnIssueParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesListLabelsOnIssueQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "issuesListLabelsOnIssue",
    "/repos/:owner/:repo/issues/:issue_number/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesListLabelsOnIssueParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          issuesListLabelsOnIssueQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesListLabelsOnIssue(input, issuesListLabelsOnIssueResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListLabelsOnIssueResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesAddLabelsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesAddLabelsBodySchema = z
    .union([
      z.object({ labels: z.array(z.string()).min(1).optional() }),
      z.array(z.string()).min(1),
      z.object({
        labels: z
          .array(z.object({ name: z.string() }))
          .min(1)
          .optional(),
      }),
      z.array(z.object({ name: z.string() })).min(1),
      z.string(),
    ])
    .optional()

  router.post(
    "issuesAddLabels",
    "/repos/:owner/:repo/issues/:issue_number/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesAddLabelsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesAddLabelsBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .issuesAddLabels(input, issuesAddLabelsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesAddLabelsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesSetLabelsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesSetLabelsBodySchema = z
    .union([
      z.object({ labels: z.array(z.string()).min(1).optional() }),
      z.array(z.string()).min(1),
      z.object({
        labels: z
          .array(z.object({ name: z.string() }))
          .min(1)
          .optional(),
      }),
      z.array(z.object({ name: z.string() })).min(1),
      z.string(),
    ])
    .optional()

  router.put(
    "issuesSetLabels",
    "/repos/:owner/:repo/issues/:issue_number/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesSetLabelsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesSetLabelsBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .issuesSetLabels(input, issuesSetLabelsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesSetLabelsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesRemoveAllLabelsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  router.delete(
    "issuesRemoveAllLabels",
    "/repos/:owner/:repo/issues/:issue_number/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesRemoveAllLabelsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesRemoveAllLabels(input, issuesRemoveAllLabelsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesRemoveAllLabelsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesRemoveLabelParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
    name: z.string(),
  })

  router.delete(
    "issuesRemoveLabel",
    "/repos/:owner/:repo/issues/:issue_number/labels/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesRemoveLabelParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesRemoveLabel(input, issuesRemoveLabelResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesRemoveLabelResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesLockParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesLockBodySchema = z
    .object({
      lock_reason: z
        .enum(["off-topic", "too heated", "resolved", "spam"])
        .optional(),
    })
    .nullable()
    .optional()

  router.put(
    "issuesLock",
    "/repos/:owner/:repo/issues/:issue_number/lock",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesLockParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesLockBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .issuesLock(input, issuesLockResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesLockResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesUnlockParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  router.delete(
    "issuesUnlock",
    "/repos/:owner/:repo/issues/:issue_number/lock",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesUnlockParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesUnlock(input, issuesUnlockResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesUnlockResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsListForIssueParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const reactionsListForIssueQuerySchema = z.object({
    content: z
      .enum([
        "+1",
        "-1",
        "laugh",
        "confused",
        "heart",
        "hooray",
        "rocket",
        "eyes",
      ])
      .optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reactionsListForIssue",
    "/repos/:owner/:repo/issues/:issue_number/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsListForIssueParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reactionsListForIssueQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reactionsListForIssue(input, reactionsListForIssueResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsListForIssueResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsCreateForIssueParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const reactionsCreateForIssueBodySchema = z.object({
    content: z.enum([
      "+1",
      "-1",
      "laugh",
      "confused",
      "heart",
      "hooray",
      "rocket",
      "eyes",
    ]),
  })

  router.post(
    "reactionsCreateForIssue",
    "/repos/:owner/:repo/issues/:issue_number/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsCreateForIssueParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reactionsCreateForIssueBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reactionsCreateForIssue(input, reactionsCreateForIssueResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsCreateForIssueResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsDeleteForIssueParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
    reaction_id: z.coerce.number(),
  })

  router.delete(
    "reactionsDeleteForIssue",
    "/repos/:owner/:repo/issues/:issue_number/reactions/:reaction_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsDeleteForIssueParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reactionsDeleteForIssue(input, reactionsDeleteForIssueResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsDeleteForIssueResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesRemoveSubIssueParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesRemoveSubIssueBodySchema = z.object({
    sub_issue_id: z.coerce.number(),
  })

  router.delete(
    "issuesRemoveSubIssue",
    "/repos/:owner/:repo/issues/:issue_number/sub_issue",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesRemoveSubIssueParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesRemoveSubIssueBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .issuesRemoveSubIssue(input, issuesRemoveSubIssueResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesRemoveSubIssueResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesListSubIssuesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesListSubIssuesQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "issuesListSubIssues",
    "/repos/:owner/:repo/issues/:issue_number/sub_issues",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesListSubIssuesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          issuesListSubIssuesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesListSubIssues(input, issuesListSubIssuesResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListSubIssuesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesAddSubIssueParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesAddSubIssueBodySchema = z.object({
    sub_issue_id: z.coerce.number(),
    replace_parent: PermissiveBoolean.optional(),
  })

  router.post(
    "issuesAddSubIssue",
    "/repos/:owner/:repo/issues/:issue_number/sub_issues",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesAddSubIssueParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesAddSubIssueBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .issuesAddSubIssue(input, issuesAddSubIssueResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesAddSubIssueResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesReprioritizeSubIssueParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesReprioritizeSubIssueBodySchema = z.object({
    sub_issue_id: z.coerce.number(),
    after_id: z.coerce.number().optional(),
    before_id: z.coerce.number().optional(),
  })

  router.patch(
    "issuesReprioritizeSubIssue",
    "/repos/:owner/:repo/issues/:issue_number/sub_issues/priority",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesReprioritizeSubIssueParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesReprioritizeSubIssueBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .issuesReprioritizeSubIssue(
          input,
          issuesReprioritizeSubIssueResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesReprioritizeSubIssueResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesListEventsForTimelineParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesListEventsForTimelineQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "issuesListEventsForTimeline",
    "/repos/:owner/:repo/issues/:issue_number/timeline",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesListEventsForTimelineParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          issuesListEventsForTimelineQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesListEventsForTimeline(
          input,
          issuesListEventsForTimelineResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListEventsForTimelineResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListDeployKeysParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListDeployKeysQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposListDeployKeys",
    "/repos/:owner/:repo/keys",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListDeployKeysParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListDeployKeysQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListDeployKeys(input, reposListDeployKeysResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListDeployKeysResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateDeployKeyParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCreateDeployKeyBodySchema = z.object({
    title: z.string().optional(),
    key: z.string(),
    read_only: PermissiveBoolean.optional(),
  })

  router.post(
    "reposCreateDeployKey",
    "/repos/:owner/:repo/keys",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateDeployKeyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateDeployKeyBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposCreateDeployKey(input, reposCreateDeployKeyResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateDeployKeyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetDeployKeyParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    key_id: z.coerce.number(),
  })

  router.get(
    "reposGetDeployKey",
    "/repos/:owner/:repo/keys/:key_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetDeployKeyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetDeployKey(input, reposGetDeployKeyResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetDeployKeyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteDeployKeyParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    key_id: z.coerce.number(),
  })

  router.delete(
    "reposDeleteDeployKey",
    "/repos/:owner/:repo/keys/:key_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteDeployKeyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDeleteDeployKey(input, reposDeleteDeployKeyResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteDeployKeyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesListLabelsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const issuesListLabelsForRepoQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "issuesListLabelsForRepo",
    "/repos/:owner/:repo/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesListLabelsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          issuesListLabelsForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesListLabelsForRepo(input, issuesListLabelsForRepoResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListLabelsForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesCreateLabelParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const issuesCreateLabelBodySchema = z.object({
    name: z.string(),
    color: z.string().optional(),
    description: z.string().optional(),
  })

  router.post(
    "issuesCreateLabel",
    "/repos/:owner/:repo/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesCreateLabelParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesCreateLabelBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .issuesCreateLabel(input, issuesCreateLabelResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesCreateLabelResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesGetLabelParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    name: z.string(),
  })

  router.get(
    "issuesGetLabel",
    "/repos/:owner/:repo/labels/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesGetLabelParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesGetLabel(input, issuesGetLabelResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesGetLabelResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesUpdateLabelParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    name: z.string(),
  })

  const issuesUpdateLabelBodySchema = z
    .object({
      new_name: z.string().optional(),
      color: z.string().optional(),
      description: z.string().optional(),
    })
    .optional()

  router.patch(
    "issuesUpdateLabel",
    "/repos/:owner/:repo/labels/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesUpdateLabelParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesUpdateLabelBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .issuesUpdateLabel(input, issuesUpdateLabelResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesUpdateLabelResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesDeleteLabelParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    name: z.string(),
  })

  router.delete(
    "issuesDeleteLabel",
    "/repos/:owner/:repo/labels/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesDeleteLabelParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesDeleteLabel(input, issuesDeleteLabelResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesDeleteLabelResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListLanguagesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "reposListLanguages",
    "/repos/:owner/:repo/languages",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListLanguagesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListLanguages(input, reposListLanguagesResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListLanguagesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const licensesGetForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const licensesGetForRepoQuerySchema = z.object({
    ref: s_code_scanning_ref.optional(),
  })

  router.get(
    "licensesGetForRepo",
    "/repos/:owner/:repo/license",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          licensesGetForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          licensesGetForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .licensesGetForRepo(input, licensesGetForRepoResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = licensesGetForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposMergeUpstreamParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposMergeUpstreamBodySchema = z.object({ branch: z.string() })

  router.post(
    "reposMergeUpstream",
    "/repos/:owner/:repo/merge-upstream",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposMergeUpstreamParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposMergeUpstreamBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposMergeUpstream(input, reposMergeUpstreamResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposMergeUpstreamResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposMergeParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposMergeBodySchema = z.object({
    base: z.string(),
    head: z.string(),
    commit_message: z.string().optional(),
  })

  router.post("reposMerge", "/repos/:owner/:repo/merges", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        reposMergeParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        reposMergeBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const response = await implementation
      .reposMerge(input, reposMergeResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = reposMergeResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const issuesListMilestonesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const issuesListMilestonesQuerySchema = z.object({
    state: z.enum(["open", "closed", "all"]).optional().default("open"),
    sort: z.enum(["due_on", "completeness"]).optional().default("due_on"),
    direction: z.enum(["asc", "desc"]).optional().default("asc"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "issuesListMilestones",
    "/repos/:owner/:repo/milestones",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesListMilestonesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          issuesListMilestonesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesListMilestones(input, issuesListMilestonesResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListMilestonesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesCreateMilestoneParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const issuesCreateMilestoneBodySchema = z.object({
    title: z.string(),
    state: z.enum(["open", "closed"]).optional().default("open"),
    description: z.string().optional(),
    due_on: z.string().datetime({ offset: true }).optional(),
  })

  router.post(
    "issuesCreateMilestone",
    "/repos/:owner/:repo/milestones",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesCreateMilestoneParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesCreateMilestoneBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .issuesCreateMilestone(input, issuesCreateMilestoneResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesCreateMilestoneResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesGetMilestoneParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    milestone_number: z.coerce.number(),
  })

  router.get(
    "issuesGetMilestone",
    "/repos/:owner/:repo/milestones/:milestone_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesGetMilestoneParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesGetMilestone(input, issuesGetMilestoneResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesGetMilestoneResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesUpdateMilestoneParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    milestone_number: z.coerce.number(),
  })

  const issuesUpdateMilestoneBodySchema = z
    .object({
      title: z.string().optional(),
      state: z.enum(["open", "closed"]).optional().default("open"),
      description: z.string().optional(),
      due_on: z.string().datetime({ offset: true }).optional(),
    })
    .optional()

  router.patch(
    "issuesUpdateMilestone",
    "/repos/:owner/:repo/milestones/:milestone_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesUpdateMilestoneParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesUpdateMilestoneBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .issuesUpdateMilestone(input, issuesUpdateMilestoneResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesUpdateMilestoneResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesDeleteMilestoneParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    milestone_number: z.coerce.number(),
  })

  router.delete(
    "issuesDeleteMilestone",
    "/repos/:owner/:repo/milestones/:milestone_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesDeleteMilestoneParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesDeleteMilestone(input, issuesDeleteMilestoneResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesDeleteMilestoneResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesListLabelsForMilestoneParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    milestone_number: z.coerce.number(),
  })

  const issuesListLabelsForMilestoneQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "issuesListLabelsForMilestone",
    "/repos/:owner/:repo/milestones/:milestone_number/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesListLabelsForMilestoneParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          issuesListLabelsForMilestoneQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesListLabelsForMilestone(
          input,
          issuesListLabelsForMilestoneResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListLabelsForMilestoneResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityListRepoNotificationsForAuthenticatedUserParamSchema = z.object(
    { owner: z.string(), repo: z.string() },
  )

  const activityListRepoNotificationsForAuthenticatedUserQuerySchema = z.object(
    {
      all: PermissiveBoolean.optional().default(false),
      participating: PermissiveBoolean.optional().default(false),
      since: z.string().datetime({ offset: true }).optional(),
      before: z.string().datetime({ offset: true }).optional(),
      per_page: z.coerce.number().optional().default(30),
      page: z.coerce.number().optional().default(1),
    },
  )

  router.get(
    "activityListRepoNotificationsForAuthenticatedUser",
    "/repos/:owner/:repo/notifications",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListRepoNotificationsForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListRepoNotificationsForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityListRepoNotificationsForAuthenticatedUser(
          input,
          activityListRepoNotificationsForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        activityListRepoNotificationsForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const activityMarkRepoNotificationsAsReadParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const activityMarkRepoNotificationsAsReadBodySchema = z
    .object({ last_read_at: z.string().datetime({ offset: true }).optional() })
    .optional()

  router.put(
    "activityMarkRepoNotificationsAsRead",
    "/repos/:owner/:repo/notifications",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityMarkRepoNotificationsAsReadParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          activityMarkRepoNotificationsAsReadBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .activityMarkRepoNotificationsAsRead(
          input,
          activityMarkRepoNotificationsAsReadResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityMarkRepoNotificationsAsReadResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposGetPagesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "reposGetPages",
    "/repos/:owner/:repo/pages",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetPagesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetPages(input, reposGetPagesResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetPagesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreatePagesSiteParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCreatePagesSiteBodySchema = z
    .object({
      build_type: z.enum(["legacy", "workflow"]).optional(),
      source: z
        .object({
          branch: z.string(),
          path: z.enum(["/", "/docs"]).optional().default("/"),
        })
        .optional(),
    })
    .nullable()

  router.post(
    "reposCreatePagesSite",
    "/repos/:owner/:repo/pages",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreatePagesSiteParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreatePagesSiteBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposCreatePagesSite(input, reposCreatePagesSiteResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreatePagesSiteResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUpdateInformationAboutPagesSiteParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposUpdateInformationAboutPagesSiteBodySchema = z.object({
    cname: z.string().nullable().optional(),
    https_enforced: PermissiveBoolean.optional(),
    build_type: z.enum(["legacy", "workflow"]).optional(),
    source: z
      .union([
        z.enum(["gh-pages", "master", "master /docs"]),
        z.object({ branch: z.string(), path: z.enum(["/", "/docs"]) }),
      ])
      .optional(),
  })

  router.put(
    "reposUpdateInformationAboutPagesSite",
    "/repos/:owner/:repo/pages",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdateInformationAboutPagesSiteParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdateInformationAboutPagesSiteBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposUpdateInformationAboutPagesSite(
          input,
          reposUpdateInformationAboutPagesSiteResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdateInformationAboutPagesSiteResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposDeletePagesSiteParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.delete(
    "reposDeletePagesSite",
    "/repos/:owner/:repo/pages",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeletePagesSiteParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDeletePagesSite(input, reposDeletePagesSiteResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeletePagesSiteResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListPagesBuildsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListPagesBuildsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposListPagesBuilds",
    "/repos/:owner/:repo/pages/builds",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListPagesBuildsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListPagesBuildsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListPagesBuilds(input, reposListPagesBuildsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListPagesBuildsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposRequestPagesBuildParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.post(
    "reposRequestPagesBuild",
    "/repos/:owner/:repo/pages/builds",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposRequestPagesBuildParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposRequestPagesBuild(input, reposRequestPagesBuildResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposRequestPagesBuildResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetLatestPagesBuildParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "reposGetLatestPagesBuild",
    "/repos/:owner/:repo/pages/builds/latest",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetLatestPagesBuildParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetLatestPagesBuild(input, reposGetLatestPagesBuildResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetLatestPagesBuildResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetPagesBuildParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    build_id: z.coerce.number(),
  })

  router.get(
    "reposGetPagesBuild",
    "/repos/:owner/:repo/pages/builds/:build_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetPagesBuildParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetPagesBuild(input, reposGetPagesBuildResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetPagesBuildResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreatePagesDeploymentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCreatePagesDeploymentBodySchema = z.object({
    artifact_id: z.coerce.number().optional(),
    artifact_url: z.string().optional(),
    environment: z.string().optional().default("github-pages"),
    pages_build_version: z.string().default("GITHUB_SHA"),
    oidc_token: z.string(),
  })

  router.post(
    "reposCreatePagesDeployment",
    "/repos/:owner/:repo/pages/deployments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreatePagesDeploymentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreatePagesDeploymentBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposCreatePagesDeployment(
          input,
          reposCreatePagesDeploymentResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreatePagesDeploymentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetPagesDeploymentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pages_deployment_id: z.union([z.coerce.number(), z.string()]),
  })

  router.get(
    "reposGetPagesDeployment",
    "/repos/:owner/:repo/pages/deployments/:pages_deployment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetPagesDeploymentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetPagesDeployment(input, reposGetPagesDeploymentResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetPagesDeploymentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCancelPagesDeploymentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pages_deployment_id: z.union([z.coerce.number(), z.string()]),
  })

  router.post(
    "reposCancelPagesDeployment",
    "/repos/:owner/:repo/pages/deployments/:pages_deployment_id/cancel",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCancelPagesDeploymentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposCancelPagesDeployment(
          input,
          reposCancelPagesDeploymentResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCancelPagesDeploymentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetPagesHealthCheckParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "reposGetPagesHealthCheck",
    "/repos/:owner/:repo/pages/health",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetPagesHealthCheckParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetPagesHealthCheck(input, reposGetPagesHealthCheckResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetPagesHealthCheckResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCheckPrivateVulnerabilityReportingParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "reposCheckPrivateVulnerabilityReporting",
    "/repos/:owner/:repo/private-vulnerability-reporting",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCheckPrivateVulnerabilityReportingParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposCheckPrivateVulnerabilityReporting(
          input,
          reposCheckPrivateVulnerabilityReportingResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCheckPrivateVulnerabilityReportingResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposEnablePrivateVulnerabilityReportingParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.put(
    "reposEnablePrivateVulnerabilityReporting",
    "/repos/:owner/:repo/private-vulnerability-reporting",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposEnablePrivateVulnerabilityReportingParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposEnablePrivateVulnerabilityReporting(
          input,
          reposEnablePrivateVulnerabilityReportingResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposEnablePrivateVulnerabilityReportingResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposDisablePrivateVulnerabilityReportingParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.delete(
    "reposDisablePrivateVulnerabilityReporting",
    "/repos/:owner/:repo/private-vulnerability-reporting",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDisablePrivateVulnerabilityReportingParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDisablePrivateVulnerabilityReporting(
          input,
          reposDisablePrivateVulnerabilityReportingResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDisablePrivateVulnerabilityReportingResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const projectsListForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const projectsListForRepoQuerySchema = z.object({
    state: z.enum(["open", "closed", "all"]).optional().default("open"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "projectsListForRepo",
    "/repos/:owner/:repo/projects",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsListForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          projectsListForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .projectsListForRepo(input, projectsListForRepoResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsListForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsCreateForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const projectsCreateForRepoBodySchema = z.object({
    name: z.string(),
    body: z.string().optional(),
  })

  router.post(
    "projectsCreateForRepo",
    "/repos/:owner/:repo/projects",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsCreateForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          projectsCreateForRepoBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .projectsCreateForRepo(input, projectsCreateForRepoResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsCreateForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetCustomPropertiesValuesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "reposGetCustomPropertiesValues",
    "/repos/:owner/:repo/properties/values",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetCustomPropertiesValuesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetCustomPropertiesValues(
          input,
          reposGetCustomPropertiesValuesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetCustomPropertiesValuesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateOrUpdateCustomPropertiesValuesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCreateOrUpdateCustomPropertiesValuesBodySchema = z.object({
    properties: z.array(s_custom_property_value),
  })

  router.patch(
    "reposCreateOrUpdateCustomPropertiesValues",
    "/repos/:owner/:repo/properties/values",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateOrUpdateCustomPropertiesValuesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateOrUpdateCustomPropertiesValuesBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposCreateOrUpdateCustomPropertiesValues(
          input,
          reposCreateOrUpdateCustomPropertiesValuesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateOrUpdateCustomPropertiesValuesResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const pullsListParamSchema = z.object({ owner: z.string(), repo: z.string() })

  const pullsListQuerySchema = z.object({
    state: z.enum(["open", "closed", "all"]).optional().default("open"),
    head: z.string().optional(),
    base: z.string().optional(),
    sort: z
      .enum(["created", "updated", "popularity", "long-running"])
      .optional()
      .default("created"),
    direction: z.enum(["asc", "desc"]).optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get("pullsList", "/repos/:owner/:repo/pulls", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        pullsListParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: parseRequestInput(
        pullsListQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .pullsList(input, pullsListResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = pullsListResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const pullsCreateParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const pullsCreateBodySchema = z.object({
    title: z.string().optional(),
    head: z.string(),
    head_repo: z.string().optional(),
    base: z.string(),
    body: z.string().optional(),
    maintainer_can_modify: PermissiveBoolean.optional(),
    draft: PermissiveBoolean.optional(),
    issue: z.coerce.number().optional(),
  })

  router.post("pullsCreate", "/repos/:owner/:repo/pulls", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        pullsCreateParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        pullsCreateBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const response = await implementation
      .pullsCreate(input, pullsCreateResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = pullsCreateResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const pullsListReviewCommentsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const pullsListReviewCommentsForRepoQuerySchema = z.object({
    sort: z.enum(["created", "updated", "created_at"]).optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    since: z.string().datetime({ offset: true }).optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "pullsListReviewCommentsForRepo",
    "/repos/:owner/:repo/pulls/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsListReviewCommentsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          pullsListReviewCommentsForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .pullsListReviewCommentsForRepo(
          input,
          pullsListReviewCommentsForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsListReviewCommentsForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsGetReviewCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  router.get(
    "pullsGetReviewComment",
    "/repos/:owner/:repo/pulls/comments/:comment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsGetReviewCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .pullsGetReviewComment(input, pullsGetReviewCommentResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsGetReviewCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsUpdateReviewCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  const pullsUpdateReviewCommentBodySchema = z.object({ body: z.string() })

  router.patch(
    "pullsUpdateReviewComment",
    "/repos/:owner/:repo/pulls/comments/:comment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsUpdateReviewCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          pullsUpdateReviewCommentBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .pullsUpdateReviewComment(input, pullsUpdateReviewCommentResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsUpdateReviewCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsDeleteReviewCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  router.delete(
    "pullsDeleteReviewComment",
    "/repos/:owner/:repo/pulls/comments/:comment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsDeleteReviewCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .pullsDeleteReviewComment(input, pullsDeleteReviewCommentResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsDeleteReviewCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsListForPullRequestReviewCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  const reactionsListForPullRequestReviewCommentQuerySchema = z.object({
    content: z
      .enum([
        "+1",
        "-1",
        "laugh",
        "confused",
        "heart",
        "hooray",
        "rocket",
        "eyes",
      ])
      .optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reactionsListForPullRequestReviewComment",
    "/repos/:owner/:repo/pulls/comments/:comment_id/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsListForPullRequestReviewCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reactionsListForPullRequestReviewCommentQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reactionsListForPullRequestReviewComment(
          input,
          reactionsListForPullRequestReviewCommentResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsListForPullRequestReviewCommentResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reactionsCreateForPullRequestReviewCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  const reactionsCreateForPullRequestReviewCommentBodySchema = z.object({
    content: z.enum([
      "+1",
      "-1",
      "laugh",
      "confused",
      "heart",
      "hooray",
      "rocket",
      "eyes",
    ]),
  })

  router.post(
    "reactionsCreateForPullRequestReviewComment",
    "/repos/:owner/:repo/pulls/comments/:comment_id/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsCreateForPullRequestReviewCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reactionsCreateForPullRequestReviewCommentBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reactionsCreateForPullRequestReviewComment(
          input,
          reactionsCreateForPullRequestReviewCommentResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsCreateForPullRequestReviewCommentResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reactionsDeleteForPullRequestCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
    reaction_id: z.coerce.number(),
  })

  router.delete(
    "reactionsDeleteForPullRequestComment",
    "/repos/:owner/:repo/pulls/comments/:comment_id/reactions/:reaction_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsDeleteForPullRequestCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reactionsDeleteForPullRequestComment(
          input,
          reactionsDeleteForPullRequestCommentResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsDeleteForPullRequestCommentResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const pullsGetParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  router.get(
    "pullsGet",
    "/repos/:owner/:repo/pulls/:pull_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsGetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .pullsGet(input, pullsGetResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsGetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsUpdateParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsUpdateBodySchema = z
    .object({
      title: z.string().optional(),
      body: z.string().optional(),
      state: z.enum(["open", "closed"]).optional(),
      base: z.string().optional(),
      maintainer_can_modify: PermissiveBoolean.optional(),
    })
    .optional()

  router.patch(
    "pullsUpdate",
    "/repos/:owner/:repo/pulls/:pull_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsUpdateParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          pullsUpdateBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .pullsUpdate(input, pullsUpdateResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsUpdateResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesCreateWithPrForAuthenticatedUserParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const codespacesCreateWithPrForAuthenticatedUserBodySchema = z
    .object({
      location: z.string().optional(),
      geo: z
        .enum(["EuropeWest", "SoutheastAsia", "UsEast", "UsWest"])
        .optional(),
      client_ip: z.string().optional(),
      machine: z.string().optional(),
      devcontainer_path: z.string().optional(),
      multi_repo_permissions_opt_out: PermissiveBoolean.optional(),
      working_directory: z.string().optional(),
      idle_timeout_minutes: z.coerce.number().optional(),
      display_name: z.string().optional(),
      retention_period_minutes: z.coerce.number().optional(),
    })
    .nullable()

  router.post(
    "codespacesCreateWithPrForAuthenticatedUser",
    "/repos/:owner/:repo/pulls/:pull_number/codespaces",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesCreateWithPrForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codespacesCreateWithPrForAuthenticatedUserBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codespacesCreateWithPrForAuthenticatedUser(
          input,
          codespacesCreateWithPrForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesCreateWithPrForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const pullsListReviewCommentsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsListReviewCommentsQuerySchema = z.object({
    sort: z.enum(["created", "updated"]).optional().default("created"),
    direction: z.enum(["asc", "desc"]).optional(),
    since: z.string().datetime({ offset: true }).optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "pullsListReviewComments",
    "/repos/:owner/:repo/pulls/:pull_number/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsListReviewCommentsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          pullsListReviewCommentsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .pullsListReviewComments(input, pullsListReviewCommentsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsListReviewCommentsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsCreateReviewCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsCreateReviewCommentBodySchema = z.object({
    body: z.string(),
    commit_id: z.string(),
    path: z.string(),
    position: z.coerce.number().optional(),
    side: z.enum(["LEFT", "RIGHT"]).optional(),
    line: z.coerce.number().optional(),
    start_line: z.coerce.number().optional(),
    start_side: z.enum(["LEFT", "RIGHT", "side"]).optional(),
    in_reply_to: z.coerce.number().optional(),
    subject_type: z.enum(["line", "file"]).optional(),
  })

  router.post(
    "pullsCreateReviewComment",
    "/repos/:owner/:repo/pulls/:pull_number/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsCreateReviewCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          pullsCreateReviewCommentBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .pullsCreateReviewComment(input, pullsCreateReviewCommentResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsCreateReviewCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsCreateReplyForReviewCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
    comment_id: z.coerce.number(),
  })

  const pullsCreateReplyForReviewCommentBodySchema = z.object({
    body: z.string(),
  })

  router.post(
    "pullsCreateReplyForReviewComment",
    "/repos/:owner/:repo/pulls/:pull_number/comments/:comment_id/replies",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsCreateReplyForReviewCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          pullsCreateReplyForReviewCommentBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .pullsCreateReplyForReviewComment(
          input,
          pullsCreateReplyForReviewCommentResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsCreateReplyForReviewCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsListCommitsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsListCommitsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "pullsListCommits",
    "/repos/:owner/:repo/pulls/:pull_number/commits",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsListCommitsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          pullsListCommitsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .pullsListCommits(input, pullsListCommitsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsListCommitsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsListFilesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsListFilesQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "pullsListFiles",
    "/repos/:owner/:repo/pulls/:pull_number/files",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsListFilesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          pullsListFilesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .pullsListFiles(input, pullsListFilesResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsListFilesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsCheckIfMergedParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  router.get(
    "pullsCheckIfMerged",
    "/repos/:owner/:repo/pulls/:pull_number/merge",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsCheckIfMergedParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .pullsCheckIfMerged(input, pullsCheckIfMergedResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsCheckIfMergedResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsMergeParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsMergeBodySchema = z
    .object({
      commit_title: z.string().optional(),
      commit_message: z.string().optional(),
      sha: z.string().optional(),
      merge_method: z.enum(["merge", "squash", "rebase"]).optional(),
    })
    .nullable()
    .optional()

  router.put(
    "pullsMerge",
    "/repos/:owner/:repo/pulls/:pull_number/merge",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsMergeParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          pullsMergeBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .pullsMerge(input, pullsMergeResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsMergeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsListRequestedReviewersParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  router.get(
    "pullsListRequestedReviewers",
    "/repos/:owner/:repo/pulls/:pull_number/requested_reviewers",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsListRequestedReviewersParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .pullsListRequestedReviewers(
          input,
          pullsListRequestedReviewersResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsListRequestedReviewersResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsRequestReviewersParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsRequestReviewersBodySchema = z
    .object({
      reviewers: z.array(z.string()).optional(),
      team_reviewers: z.array(z.string()).optional(),
    })
    .optional()

  router.post(
    "pullsRequestReviewers",
    "/repos/:owner/:repo/pulls/:pull_number/requested_reviewers",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsRequestReviewersParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          pullsRequestReviewersBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .pullsRequestReviewers(input, pullsRequestReviewersResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsRequestReviewersResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsRemoveRequestedReviewersParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsRemoveRequestedReviewersBodySchema = z.object({
    reviewers: z.array(z.string()),
    team_reviewers: z.array(z.string()).optional(),
  })

  router.delete(
    "pullsRemoveRequestedReviewers",
    "/repos/:owner/:repo/pulls/:pull_number/requested_reviewers",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsRemoveRequestedReviewersParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          pullsRemoveRequestedReviewersBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .pullsRemoveRequestedReviewers(
          input,
          pullsRemoveRequestedReviewersResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsRemoveRequestedReviewersResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsListReviewsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsListReviewsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "pullsListReviews",
    "/repos/:owner/:repo/pulls/:pull_number/reviews",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsListReviewsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          pullsListReviewsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .pullsListReviews(input, pullsListReviewsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsListReviewsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsCreateReviewParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsCreateReviewBodySchema = z
    .object({
      commit_id: z.string().optional(),
      body: z.string().optional(),
      event: z.enum(["APPROVE", "REQUEST_CHANGES", "COMMENT"]).optional(),
      comments: z
        .array(
          z.object({
            path: z.string(),
            position: z.coerce.number().optional(),
            body: z.string(),
            line: z.coerce.number().optional(),
            side: z.string().optional(),
            start_line: z.coerce.number().optional(),
            start_side: z.string().optional(),
          }),
        )
        .optional(),
    })
    .optional()

  router.post(
    "pullsCreateReview",
    "/repos/:owner/:repo/pulls/:pull_number/reviews",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsCreateReviewParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          pullsCreateReviewBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .pullsCreateReview(input, pullsCreateReviewResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsCreateReviewResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsGetReviewParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
    review_id: z.coerce.number(),
  })

  router.get(
    "pullsGetReview",
    "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsGetReviewParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .pullsGetReview(input, pullsGetReviewResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsGetReviewResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsUpdateReviewParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
    review_id: z.coerce.number(),
  })

  const pullsUpdateReviewBodySchema = z.object({ body: z.string() })

  router.put(
    "pullsUpdateReview",
    "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsUpdateReviewParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          pullsUpdateReviewBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .pullsUpdateReview(input, pullsUpdateReviewResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsUpdateReviewResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsDeletePendingReviewParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
    review_id: z.coerce.number(),
  })

  router.delete(
    "pullsDeletePendingReview",
    "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsDeletePendingReviewParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .pullsDeletePendingReview(input, pullsDeletePendingReviewResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsDeletePendingReviewResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsListCommentsForReviewParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
    review_id: z.coerce.number(),
  })

  const pullsListCommentsForReviewQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "pullsListCommentsForReview",
    "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsListCommentsForReviewParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          pullsListCommentsForReviewQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .pullsListCommentsForReview(
          input,
          pullsListCommentsForReviewResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsListCommentsForReviewResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsDismissReviewParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
    review_id: z.coerce.number(),
  })

  const pullsDismissReviewBodySchema = z.object({
    message: z.string(),
    event: z.enum(["DISMISS"]).optional(),
  })

  router.put(
    "pullsDismissReview",
    "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/dismissals",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsDismissReviewParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          pullsDismissReviewBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .pullsDismissReview(input, pullsDismissReviewResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsDismissReviewResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsSubmitReviewParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
    review_id: z.coerce.number(),
  })

  const pullsSubmitReviewBodySchema = z.object({
    body: z.string().optional(),
    event: z.enum(["APPROVE", "REQUEST_CHANGES", "COMMENT"]),
  })

  router.post(
    "pullsSubmitReview",
    "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/events",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsSubmitReviewParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          pullsSubmitReviewBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .pullsSubmitReview(input, pullsSubmitReviewResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsSubmitReviewResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsUpdateBranchParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsUpdateBranchBodySchema = z
    .object({ expected_head_sha: z.string().optional() })
    .nullable()
    .optional()

  router.put(
    "pullsUpdateBranch",
    "/repos/:owner/:repo/pulls/:pull_number/update-branch",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsUpdateBranchParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          pullsUpdateBranchBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .pullsUpdateBranch(input, pullsUpdateBranchResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsUpdateBranchResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetReadmeParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetReadmeQuerySchema = z.object({ ref: z.string().optional() })

  router.get(
    "reposGetReadme",
    "/repos/:owner/:repo/readme",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetReadmeParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetReadmeQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetReadme(input, reposGetReadmeResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetReadmeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetReadmeInDirectoryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    dir: z.string(),
  })

  const reposGetReadmeInDirectoryQuerySchema = z.object({
    ref: z.string().optional(),
  })

  router.get(
    "reposGetReadmeInDirectory",
    "/repos/:owner/:repo/readme/:dir",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetReadmeInDirectoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetReadmeInDirectoryQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetReadmeInDirectory(
          input,
          reposGetReadmeInDirectoryResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetReadmeInDirectoryResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListReleasesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListReleasesQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposListReleases",
    "/repos/:owner/:repo/releases",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListReleasesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListReleasesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListReleases(input, reposListReleasesResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListReleasesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateReleaseParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCreateReleaseBodySchema = z.object({
    tag_name: z.string(),
    target_commitish: z.string().optional(),
    name: z.string().optional(),
    body: z.string().optional(),
    draft: PermissiveBoolean.optional().default(false),
    prerelease: PermissiveBoolean.optional().default(false),
    discussion_category_name: z.string().optional(),
    generate_release_notes: PermissiveBoolean.optional().default(false),
    make_latest: z.enum(["true", "false", "legacy"]).optional().default("true"),
  })

  router.post(
    "reposCreateRelease",
    "/repos/:owner/:repo/releases",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateReleaseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateReleaseBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposCreateRelease(input, reposCreateReleaseResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateReleaseResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetReleaseAssetParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    asset_id: z.coerce.number(),
  })

  router.get(
    "reposGetReleaseAsset",
    "/repos/:owner/:repo/releases/assets/:asset_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetReleaseAssetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetReleaseAsset(input, reposGetReleaseAssetResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetReleaseAssetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUpdateReleaseAssetParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    asset_id: z.coerce.number(),
  })

  const reposUpdateReleaseAssetBodySchema = z
    .object({
      name: z.string().optional(),
      label: z.string().optional(),
      state: z.string().optional(),
    })
    .optional()

  router.patch(
    "reposUpdateReleaseAsset",
    "/repos/:owner/:repo/releases/assets/:asset_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdateReleaseAssetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdateReleaseAssetBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposUpdateReleaseAsset(input, reposUpdateReleaseAssetResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdateReleaseAssetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteReleaseAssetParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    asset_id: z.coerce.number(),
  })

  router.delete(
    "reposDeleteReleaseAsset",
    "/repos/:owner/:repo/releases/assets/:asset_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteReleaseAssetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDeleteReleaseAsset(input, reposDeleteReleaseAssetResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteReleaseAssetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGenerateReleaseNotesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGenerateReleaseNotesBodySchema = z.object({
    tag_name: z.string(),
    target_commitish: z.string().optional(),
    previous_tag_name: z.string().optional(),
    configuration_file_path: z.string().optional(),
  })

  router.post(
    "reposGenerateReleaseNotes",
    "/repos/:owner/:repo/releases/generate-notes",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGenerateReleaseNotesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposGenerateReleaseNotesBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposGenerateReleaseNotes(
          input,
          reposGenerateReleaseNotesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGenerateReleaseNotesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetLatestReleaseParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "reposGetLatestRelease",
    "/repos/:owner/:repo/releases/latest",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetLatestReleaseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetLatestRelease(input, reposGetLatestReleaseResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetLatestReleaseResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetReleaseByTagParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    tag: z.string(),
  })

  router.get(
    "reposGetReleaseByTag",
    "/repos/:owner/:repo/releases/tags/:tag",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetReleaseByTagParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetReleaseByTag(input, reposGetReleaseByTagResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetReleaseByTagResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetReleaseParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    release_id: z.coerce.number(),
  })

  router.get(
    "reposGetRelease",
    "/repos/:owner/:repo/releases/:release_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetReleaseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetRelease(input, reposGetReleaseResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetReleaseResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUpdateReleaseParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    release_id: z.coerce.number(),
  })

  const reposUpdateReleaseBodySchema = z
    .object({
      tag_name: z.string().optional(),
      target_commitish: z.string().optional(),
      name: z.string().optional(),
      body: z.string().optional(),
      draft: PermissiveBoolean.optional(),
      prerelease: PermissiveBoolean.optional(),
      make_latest: z
        .enum(["true", "false", "legacy"])
        .optional()
        .default("true"),
      discussion_category_name: z.string().optional(),
    })
    .optional()

  router.patch(
    "reposUpdateRelease",
    "/repos/:owner/:repo/releases/:release_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdateReleaseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdateReleaseBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposUpdateRelease(input, reposUpdateReleaseResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdateReleaseResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteReleaseParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    release_id: z.coerce.number(),
  })

  router.delete(
    "reposDeleteRelease",
    "/repos/:owner/:repo/releases/:release_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteReleaseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDeleteRelease(input, reposDeleteReleaseResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteReleaseResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListReleaseAssetsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    release_id: z.coerce.number(),
  })

  const reposListReleaseAssetsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposListReleaseAssets",
    "/repos/:owner/:repo/releases/:release_id/assets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListReleaseAssetsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListReleaseAssetsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListReleaseAssets(input, reposListReleaseAssetsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListReleaseAssetsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUploadReleaseAssetParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    release_id: z.coerce.number(),
  })

  const reposUploadReleaseAssetQuerySchema = z.object({
    name: z.string(),
    label: z.string().optional(),
  })

  const reposUploadReleaseAssetBodySchema = z.string().optional()

  router.post(
    "reposUploadReleaseAsset",
    "/repos/:owner/:repo/releases/:release_id/assets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUploadReleaseAssetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposUploadReleaseAssetQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: parseRequestInput(
          reposUploadReleaseAssetBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposUploadReleaseAsset(input, reposUploadReleaseAssetResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUploadReleaseAssetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsListForReleaseParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    release_id: z.coerce.number(),
  })

  const reactionsListForReleaseQuerySchema = z.object({
    content: z
      .enum(["+1", "laugh", "heart", "hooray", "rocket", "eyes"])
      .optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reactionsListForRelease",
    "/repos/:owner/:repo/releases/:release_id/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsListForReleaseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reactionsListForReleaseQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reactionsListForRelease(input, reactionsListForReleaseResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsListForReleaseResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsCreateForReleaseParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    release_id: z.coerce.number(),
  })

  const reactionsCreateForReleaseBodySchema = z.object({
    content: z.enum(["+1", "laugh", "heart", "hooray", "rocket", "eyes"]),
  })

  router.post(
    "reactionsCreateForRelease",
    "/repos/:owner/:repo/releases/:release_id/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsCreateForReleaseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reactionsCreateForReleaseBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reactionsCreateForRelease(
          input,
          reactionsCreateForReleaseResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsCreateForReleaseResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsDeleteForReleaseParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    release_id: z.coerce.number(),
    reaction_id: z.coerce.number(),
  })

  router.delete(
    "reactionsDeleteForRelease",
    "/repos/:owner/:repo/releases/:release_id/reactions/:reaction_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsDeleteForReleaseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reactionsDeleteForRelease(
          input,
          reactionsDeleteForReleaseResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsDeleteForReleaseResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetBranchRulesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposGetBranchRulesQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposGetBranchRules",
    "/repos/:owner/:repo/rules/branches/:branch",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetBranchRulesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetBranchRulesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetBranchRules(input, reposGetBranchRulesResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetBranchRulesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetRepoRulesetsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetRepoRulesetsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
    includes_parents: PermissiveBoolean.optional().default(true),
    targets: z.string().optional(),
  })

  router.get(
    "reposGetRepoRulesets",
    "/repos/:owner/:repo/rulesets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetRepoRulesetsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetRepoRulesetsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetRepoRulesets(input, reposGetRepoRulesetsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetRepoRulesetsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateRepoRulesetParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCreateRepoRulesetBodySchema = z.object({
    name: z.string(),
    target: z.enum(["branch", "tag", "push"]).optional().default("branch"),
    enforcement: s_repository_rule_enforcement,
    bypass_actors: z.array(s_repository_ruleset_bypass_actor).optional(),
    conditions: s_repository_ruleset_conditions.optional(),
    rules: z.array(s_repository_rule).optional(),
  })

  router.post(
    "reposCreateRepoRuleset",
    "/repos/:owner/:repo/rulesets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateRepoRulesetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateRepoRulesetBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposCreateRepoRuleset(input, reposCreateRepoRulesetResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateRepoRulesetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetRepoRuleSuitesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetRepoRuleSuitesQuerySchema = z.object({
    ref: z.string().optional(),
    time_period: z
      .enum(["hour", "day", "week", "month"])
      .optional()
      .default("day"),
    actor_name: z.string().optional(),
    rule_suite_result: z
      .enum(["pass", "fail", "bypass", "all"])
      .optional()
      .default("all"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposGetRepoRuleSuites",
    "/repos/:owner/:repo/rulesets/rule-suites",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetRepoRuleSuitesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetRepoRuleSuitesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetRepoRuleSuites(input, reposGetRepoRuleSuitesResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetRepoRuleSuitesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetRepoRuleSuiteParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    rule_suite_id: z.coerce.number(),
  })

  router.get(
    "reposGetRepoRuleSuite",
    "/repos/:owner/:repo/rulesets/rule-suites/:rule_suite_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetRepoRuleSuiteParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetRepoRuleSuite(input, reposGetRepoRuleSuiteResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetRepoRuleSuiteResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetRepoRulesetParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ruleset_id: z.coerce.number(),
  })

  const reposGetRepoRulesetQuerySchema = z.object({
    includes_parents: PermissiveBoolean.optional().default(true),
  })

  router.get(
    "reposGetRepoRuleset",
    "/repos/:owner/:repo/rulesets/:ruleset_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetRepoRulesetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetRepoRulesetQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetRepoRuleset(input, reposGetRepoRulesetResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetRepoRulesetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUpdateRepoRulesetParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ruleset_id: z.coerce.number(),
  })

  const reposUpdateRepoRulesetBodySchema = z
    .object({
      name: z.string().optional(),
      target: z.enum(["branch", "tag", "push"]).optional(),
      enforcement: s_repository_rule_enforcement.optional(),
      bypass_actors: z.array(s_repository_ruleset_bypass_actor).optional(),
      conditions: s_repository_ruleset_conditions.optional(),
      rules: z.array(s_repository_rule).optional(),
    })
    .optional()

  router.put(
    "reposUpdateRepoRuleset",
    "/repos/:owner/:repo/rulesets/:ruleset_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdateRepoRulesetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdateRepoRulesetBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposUpdateRepoRuleset(input, reposUpdateRepoRulesetResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdateRepoRulesetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteRepoRulesetParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ruleset_id: z.coerce.number(),
  })

  router.delete(
    "reposDeleteRepoRuleset",
    "/repos/:owner/:repo/rulesets/:ruleset_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteRepoRulesetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDeleteRepoRuleset(input, reposDeleteRepoRulesetResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteRepoRulesetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetRepoRulesetHistoryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ruleset_id: z.coerce.number(),
  })

  const reposGetRepoRulesetHistoryQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposGetRepoRulesetHistory",
    "/repos/:owner/:repo/rulesets/:ruleset_id/history",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetRepoRulesetHistoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetRepoRulesetHistoryQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetRepoRulesetHistory(
          input,
          reposGetRepoRulesetHistoryResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetRepoRulesetHistoryResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetRepoRulesetVersionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ruleset_id: z.coerce.number(),
    version_id: z.coerce.number(),
  })

  router.get(
    "reposGetRepoRulesetVersion",
    "/repos/:owner/:repo/rulesets/:ruleset_id/history/:version_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetRepoRulesetVersionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetRepoRulesetVersion(
          input,
          reposGetRepoRulesetVersionResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetRepoRulesetVersionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const secretScanningListAlertsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const secretScanningListAlertsForRepoQuerySchema = z.object({
    state: z.enum(["open", "resolved"]).optional(),
    secret_type: z.string().optional(),
    resolution: z.string().optional(),
    sort: z.enum(["created", "updated"]).optional().default("created"),
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
    before: z.string().optional(),
    after: z.string().optional(),
    validity: z.string().optional(),
    is_publicly_leaked: PermissiveBoolean.optional().default(false),
    is_multi_repo: PermissiveBoolean.optional().default(false),
  })

  router.get(
    "secretScanningListAlertsForRepo",
    "/repos/:owner/:repo/secret-scanning/alerts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          secretScanningListAlertsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          secretScanningListAlertsForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .secretScanningListAlertsForRepo(
          input,
          secretScanningListAlertsForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = secretScanningListAlertsForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const secretScanningGetAlertParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    alert_number: s_alert_number,
  })

  router.get(
    "secretScanningGetAlert",
    "/repos/:owner/:repo/secret-scanning/alerts/:alert_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          secretScanningGetAlertParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .secretScanningGetAlert(input, secretScanningGetAlertResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = secretScanningGetAlertResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const secretScanningUpdateAlertParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    alert_number: s_alert_number,
  })

  const secretScanningUpdateAlertBodySchema = z.object({
    state: s_secret_scanning_alert_state,
    resolution: s_secret_scanning_alert_resolution.optional(),
    resolution_comment: s_secret_scanning_alert_resolution_comment.optional(),
  })

  router.patch(
    "secretScanningUpdateAlert",
    "/repos/:owner/:repo/secret-scanning/alerts/:alert_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          secretScanningUpdateAlertParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          secretScanningUpdateAlertBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .secretScanningUpdateAlert(
          input,
          secretScanningUpdateAlertResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = secretScanningUpdateAlertResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const secretScanningListLocationsForAlertParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    alert_number: s_alert_number,
  })

  const secretScanningListLocationsForAlertQuerySchema = z.object({
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
  })

  router.get(
    "secretScanningListLocationsForAlert",
    "/repos/:owner/:repo/secret-scanning/alerts/:alert_number/locations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          secretScanningListLocationsForAlertParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          secretScanningListLocationsForAlertQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .secretScanningListLocationsForAlert(
          input,
          secretScanningListLocationsForAlertResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = secretScanningListLocationsForAlertResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const secretScanningCreatePushProtectionBypassParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const secretScanningCreatePushProtectionBypassBodySchema = z.object({
    reason: s_secret_scanning_push_protection_bypass_reason,
    placeholder_id: s_secret_scanning_push_protection_bypass_placeholder_id,
  })

  router.post(
    "secretScanningCreatePushProtectionBypass",
    "/repos/:owner/:repo/secret-scanning/push-protection-bypasses",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          secretScanningCreatePushProtectionBypassParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          secretScanningCreatePushProtectionBypassBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .secretScanningCreatePushProtectionBypass(
          input,
          secretScanningCreatePushProtectionBypassResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = secretScanningCreatePushProtectionBypassResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const secretScanningGetScanHistoryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "secretScanningGetScanHistory",
    "/repos/:owner/:repo/secret-scanning/scan-history",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          secretScanningGetScanHistoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .secretScanningGetScanHistory(
          input,
          secretScanningGetScanHistoryResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = secretScanningGetScanHistoryResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const securityAdvisoriesListRepositoryAdvisoriesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const securityAdvisoriesListRepositoryAdvisoriesQuerySchema = z.object({
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    sort: z
      .enum(["created", "updated", "published"])
      .optional()
      .default("created"),
    before: z.string().optional(),
    after: z.string().optional(),
    per_page: z.coerce.number().min(1).max(100).optional().default(30),
    state: z.enum(["triage", "draft", "published", "closed"]).optional(),
  })

  router.get(
    "securityAdvisoriesListRepositoryAdvisories",
    "/repos/:owner/:repo/security-advisories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          securityAdvisoriesListRepositoryAdvisoriesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          securityAdvisoriesListRepositoryAdvisoriesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .securityAdvisoriesListRepositoryAdvisories(
          input,
          securityAdvisoriesListRepositoryAdvisoriesResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = securityAdvisoriesListRepositoryAdvisoriesResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const securityAdvisoriesCreateRepositoryAdvisoryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const securityAdvisoriesCreateRepositoryAdvisoryBodySchema =
    s_repository_advisory_create

  router.post(
    "securityAdvisoriesCreateRepositoryAdvisory",
    "/repos/:owner/:repo/security-advisories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          securityAdvisoriesCreateRepositoryAdvisoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          securityAdvisoriesCreateRepositoryAdvisoryBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .securityAdvisoriesCreateRepositoryAdvisory(
          input,
          securityAdvisoriesCreateRepositoryAdvisoryResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = securityAdvisoriesCreateRepositoryAdvisoryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const securityAdvisoriesCreatePrivateVulnerabilityReportParamSchema =
    z.object({ owner: z.string(), repo: z.string() })

  const securityAdvisoriesCreatePrivateVulnerabilityReportBodySchema =
    s_private_vulnerability_report_create

  router.post(
    "securityAdvisoriesCreatePrivateVulnerabilityReport",
    "/repos/:owner/:repo/security-advisories/reports",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          securityAdvisoriesCreatePrivateVulnerabilityReportParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          securityAdvisoriesCreatePrivateVulnerabilityReportBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .securityAdvisoriesCreatePrivateVulnerabilityReport(
          input,
          securityAdvisoriesCreatePrivateVulnerabilityReportResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        securityAdvisoriesCreatePrivateVulnerabilityReportResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const securityAdvisoriesGetRepositoryAdvisoryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ghsa_id: z.string(),
  })

  router.get(
    "securityAdvisoriesGetRepositoryAdvisory",
    "/repos/:owner/:repo/security-advisories/:ghsa_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          securityAdvisoriesGetRepositoryAdvisoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .securityAdvisoriesGetRepositoryAdvisory(
          input,
          securityAdvisoriesGetRepositoryAdvisoryResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = securityAdvisoriesGetRepositoryAdvisoryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const securityAdvisoriesUpdateRepositoryAdvisoryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ghsa_id: z.string(),
  })

  const securityAdvisoriesUpdateRepositoryAdvisoryBodySchema =
    s_repository_advisory_update

  router.patch(
    "securityAdvisoriesUpdateRepositoryAdvisory",
    "/repos/:owner/:repo/security-advisories/:ghsa_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          securityAdvisoriesUpdateRepositoryAdvisoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          securityAdvisoriesUpdateRepositoryAdvisoryBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .securityAdvisoriesUpdateRepositoryAdvisory(
          input,
          securityAdvisoriesUpdateRepositoryAdvisoryResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = securityAdvisoriesUpdateRepositoryAdvisoryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const securityAdvisoriesCreateRepositoryAdvisoryCveRequestParamSchema =
    z.object({ owner: z.string(), repo: z.string(), ghsa_id: z.string() })

  router.post(
    "securityAdvisoriesCreateRepositoryAdvisoryCveRequest",
    "/repos/:owner/:repo/security-advisories/:ghsa_id/cve",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          securityAdvisoriesCreateRepositoryAdvisoryCveRequestParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .securityAdvisoriesCreateRepositoryAdvisoryCveRequest(
          input,
          securityAdvisoriesCreateRepositoryAdvisoryCveRequestResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        securityAdvisoriesCreateRepositoryAdvisoryCveRequestResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const securityAdvisoriesCreateForkParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ghsa_id: z.string(),
  })

  router.post(
    "securityAdvisoriesCreateFork",
    "/repos/:owner/:repo/security-advisories/:ghsa_id/forks",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          securityAdvisoriesCreateForkParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .securityAdvisoriesCreateFork(
          input,
          securityAdvisoriesCreateForkResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = securityAdvisoriesCreateForkResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityListStargazersForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const activityListStargazersForRepoQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "activityListStargazersForRepo",
    "/repos/:owner/:repo/stargazers",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListStargazersForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListStargazersForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityListStargazersForRepo(
          input,
          activityListStargazersForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListStargazersForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetCodeFrequencyStatsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "reposGetCodeFrequencyStats",
    "/repos/:owner/:repo/stats/code_frequency",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetCodeFrequencyStatsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetCodeFrequencyStats(
          input,
          reposGetCodeFrequencyStatsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetCodeFrequencyStatsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetCommitActivityStatsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "reposGetCommitActivityStats",
    "/repos/:owner/:repo/stats/commit_activity",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetCommitActivityStatsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetCommitActivityStats(
          input,
          reposGetCommitActivityStatsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetCommitActivityStatsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetContributorsStatsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "reposGetContributorsStats",
    "/repos/:owner/:repo/stats/contributors",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetContributorsStatsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetContributorsStats(
          input,
          reposGetContributorsStatsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetContributorsStatsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetParticipationStatsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "reposGetParticipationStats",
    "/repos/:owner/:repo/stats/participation",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetParticipationStatsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetParticipationStats(
          input,
          reposGetParticipationStatsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetParticipationStatsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetPunchCardStatsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "reposGetPunchCardStats",
    "/repos/:owner/:repo/stats/punch_card",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetPunchCardStatsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetPunchCardStats(input, reposGetPunchCardStatsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetPunchCardStatsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateCommitStatusParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    sha: z.string(),
  })

  const reposCreateCommitStatusBodySchema = z.object({
    state: z.enum(["error", "failure", "pending", "success"]),
    target_url: z.string().nullable().optional(),
    description: z.string().nullable().optional(),
    context: z.string().optional().default("default"),
  })

  router.post(
    "reposCreateCommitStatus",
    "/repos/:owner/:repo/statuses/:sha",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateCommitStatusParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateCommitStatusBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposCreateCommitStatus(input, reposCreateCommitStatusResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateCommitStatusResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityListWatchersForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const activityListWatchersForRepoQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "activityListWatchersForRepo",
    "/repos/:owner/:repo/subscribers",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListWatchersForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListWatchersForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityListWatchersForRepo(
          input,
          activityListWatchersForRepoResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListWatchersForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityGetRepoSubscriptionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "activityGetRepoSubscription",
    "/repos/:owner/:repo/subscription",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityGetRepoSubscriptionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityGetRepoSubscription(
          input,
          activityGetRepoSubscriptionResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityGetRepoSubscriptionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activitySetRepoSubscriptionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const activitySetRepoSubscriptionBodySchema = z
    .object({
      subscribed: PermissiveBoolean.optional(),
      ignored: PermissiveBoolean.optional(),
    })
    .optional()

  router.put(
    "activitySetRepoSubscription",
    "/repos/:owner/:repo/subscription",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activitySetRepoSubscriptionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          activitySetRepoSubscriptionBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .activitySetRepoSubscription(
          input,
          activitySetRepoSubscriptionResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activitySetRepoSubscriptionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityDeleteRepoSubscriptionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.delete(
    "activityDeleteRepoSubscription",
    "/repos/:owner/:repo/subscription",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityDeleteRepoSubscriptionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityDeleteRepoSubscription(
          input,
          activityDeleteRepoSubscriptionResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityDeleteRepoSubscriptionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListTagsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListTagsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get("reposListTags", "/repos/:owner/:repo/tags", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        reposListTagsParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: parseRequestInput(
        reposListTagsQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .reposListTags(input, reposListTagsResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = reposListTagsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const reposListTagProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "reposListTagProtection",
    "/repos/:owner/:repo/tags/protection",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListTagProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListTagProtection(input, reposListTagProtectionResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListTagProtectionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateTagProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCreateTagProtectionBodySchema = z.object({ pattern: z.string() })

  router.post(
    "reposCreateTagProtection",
    "/repos/:owner/:repo/tags/protection",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateTagProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateTagProtectionBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposCreateTagProtection(input, reposCreateTagProtectionResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateTagProtectionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteTagProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    tag_protection_id: z.coerce.number(),
  })

  router.delete(
    "reposDeleteTagProtection",
    "/repos/:owner/:repo/tags/protection/:tag_protection_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteTagProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDeleteTagProtection(input, reposDeleteTagProtectionResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteTagProtectionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDownloadTarballArchiveParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  })

  router.get(
    "reposDownloadTarballArchive",
    "/repos/:owner/:repo/tarball/:ref",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDownloadTarballArchiveParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDownloadTarballArchive(
          input,
          reposDownloadTarballArchiveResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDownloadTarballArchiveResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListTeamsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListTeamsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposListTeams",
    "/repos/:owner/:repo/teams",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListTeamsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListTeamsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListTeams(input, reposListTeamsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListTeamsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetAllTopicsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetAllTopicsQuerySchema = z.object({
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
  })

  router.get(
    "reposGetAllTopics",
    "/repos/:owner/:repo/topics",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetAllTopicsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetAllTopicsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetAllTopics(input, reposGetAllTopicsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetAllTopicsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposReplaceAllTopicsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposReplaceAllTopicsBodySchema = z.object({
    names: z.array(z.string()),
  })

  router.put(
    "reposReplaceAllTopics",
    "/repos/:owner/:repo/topics",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposReplaceAllTopicsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposReplaceAllTopicsBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposReplaceAllTopics(input, reposReplaceAllTopicsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposReplaceAllTopicsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetClonesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetClonesQuerySchema = z.object({
    per: z.enum(["day", "week"]).optional().default("day"),
  })

  router.get(
    "reposGetClones",
    "/repos/:owner/:repo/traffic/clones",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetClonesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetClonesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetClones(input, reposGetClonesResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetClonesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetTopPathsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "reposGetTopPaths",
    "/repos/:owner/:repo/traffic/popular/paths",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetTopPathsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetTopPaths(input, reposGetTopPathsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetTopPathsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetTopReferrersParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "reposGetTopReferrers",
    "/repos/:owner/:repo/traffic/popular/referrers",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetTopReferrersParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetTopReferrers(input, reposGetTopReferrersResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetTopReferrersResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetViewsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetViewsQuerySchema = z.object({
    per: z.enum(["day", "week"]).optional().default("day"),
  })

  router.get(
    "reposGetViews",
    "/repos/:owner/:repo/traffic/views",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetViewsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetViewsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposGetViews(input, reposGetViewsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetViewsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposTransferParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposTransferBodySchema = z.object({
    new_owner: z.string(),
    new_name: z.string().optional(),
    team_ids: z.array(z.coerce.number()).optional(),
  })

  router.post(
    "reposTransfer",
    "/repos/:owner/:repo/transfer",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposTransferParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposTransferBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposTransfer(input, reposTransferResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposTransferResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCheckVulnerabilityAlertsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "reposCheckVulnerabilityAlerts",
    "/repos/:owner/:repo/vulnerability-alerts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCheckVulnerabilityAlertsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposCheckVulnerabilityAlerts(
          input,
          reposCheckVulnerabilityAlertsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCheckVulnerabilityAlertsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposEnableVulnerabilityAlertsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.put(
    "reposEnableVulnerabilityAlerts",
    "/repos/:owner/:repo/vulnerability-alerts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposEnableVulnerabilityAlertsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposEnableVulnerabilityAlerts(
          input,
          reposEnableVulnerabilityAlertsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposEnableVulnerabilityAlertsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDisableVulnerabilityAlertsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.delete(
    "reposDisableVulnerabilityAlerts",
    "/repos/:owner/:repo/vulnerability-alerts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDisableVulnerabilityAlertsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDisableVulnerabilityAlerts(
          input,
          reposDisableVulnerabilityAlertsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDisableVulnerabilityAlertsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDownloadZipballArchiveParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  })

  router.get(
    "reposDownloadZipballArchive",
    "/repos/:owner/:repo/zipball/:ref",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDownloadZipballArchiveParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDownloadZipballArchive(
          input,
          reposDownloadZipballArchiveResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDownloadZipballArchiveResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateUsingTemplateParamSchema = z.object({
    template_owner: z.string(),
    template_repo: z.string(),
  })

  const reposCreateUsingTemplateBodySchema = z.object({
    owner: z.string().optional(),
    name: z.string(),
    description: z.string().optional(),
    include_all_branches: PermissiveBoolean.optional().default(false),
    private: PermissiveBoolean.optional().default(false),
  })

  router.post(
    "reposCreateUsingTemplate",
    "/repos/:template_owner/:template_repo/generate",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateUsingTemplateParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateUsingTemplateBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposCreateUsingTemplate(input, reposCreateUsingTemplateResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateUsingTemplateResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListPublicQuerySchema = z.object({
    since: z.coerce.number().optional(),
  })

  router.get("reposListPublic", "/repositories", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        reposListPublicQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .reposListPublic(input, reposListPublicResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = reposListPublicResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const searchCodeQuerySchema = z.object({
    q: z.string(),
    sort: z.enum(["indexed"]).optional(),
    order: z.enum(["desc", "asc"]).optional().default("desc"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get("searchCode", "/search/code", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        searchCodeQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .searchCode(input, searchCodeResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = searchCodeResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const searchCommitsQuerySchema = z.object({
    q: z.string(),
    sort: z.enum(["author-date", "committer-date"]).optional(),
    order: z.enum(["desc", "asc"]).optional().default("desc"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get("searchCommits", "/search/commits", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        searchCommitsQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .searchCommits(input, searchCommitsResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = searchCommitsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const searchIssuesAndPullRequestsQuerySchema = z.object({
    q: z.string(),
    sort: z
      .enum([
        "comments",
        "reactions",
        "reactions-+1",
        "reactions--1",
        "reactions-smile",
        "reactions-thinking_face",
        "reactions-heart",
        "reactions-tada",
        "interactions",
        "created",
        "updated",
      ])
      .optional(),
    order: z.enum(["desc", "asc"]).optional().default("desc"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
    advanced_search: z.string().optional(),
  })

  router.get(
    "searchIssuesAndPullRequests",
    "/search/issues",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          searchIssuesAndPullRequestsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .searchIssuesAndPullRequests(
          input,
          searchIssuesAndPullRequestsResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = searchIssuesAndPullRequestsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const searchLabelsQuerySchema = z.object({
    repository_id: z.coerce.number(),
    q: z.string(),
    sort: z.enum(["created", "updated"]).optional(),
    order: z.enum(["desc", "asc"]).optional().default("desc"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get("searchLabels", "/search/labels", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        searchLabelsQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .searchLabels(input, searchLabelsResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = searchLabelsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const searchReposQuerySchema = z.object({
    q: z.string(),
    sort: z
      .enum(["stars", "forks", "help-wanted-issues", "updated"])
      .optional(),
    order: z.enum(["desc", "asc"]).optional().default("desc"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get("searchRepos", "/search/repositories", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        searchReposQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .searchRepos(input, searchReposResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = searchReposResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const searchTopicsQuerySchema = z.object({
    q: z.string(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get("searchTopics", "/search/topics", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        searchTopicsQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .searchTopics(input, searchTopicsResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = searchTopicsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const searchUsersQuerySchema = z.object({
    q: z.string(),
    sort: z.enum(["followers", "repositories", "joined"]).optional(),
    order: z.enum(["desc", "asc"]).optional().default("desc"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get("searchUsers", "/search/users", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        searchUsersQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .searchUsers(input, searchUsersResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = searchUsersResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const teamsGetLegacyParamSchema = z.object({ team_id: z.coerce.number() })

  router.get("teamsGetLegacy", "/teams/:team_id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        teamsGetLegacyParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .teamsGetLegacy(input, teamsGetLegacyResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = teamsGetLegacyResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const teamsUpdateLegacyParamSchema = z.object({ team_id: z.coerce.number() })

  const teamsUpdateLegacyBodySchema = z.object({
    name: z.string(),
    description: z.string().optional(),
    privacy: z.enum(["secret", "closed"]).optional(),
    notification_setting: z
      .enum(["notifications_enabled", "notifications_disabled"])
      .optional(),
    permission: z.enum(["pull", "push", "admin"]).optional().default("pull"),
    parent_team_id: z.coerce.number().nullable().optional(),
  })

  router.patch("teamsUpdateLegacy", "/teams/:team_id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        teamsUpdateLegacyParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        teamsUpdateLegacyBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const response = await implementation
      .teamsUpdateLegacy(input, teamsUpdateLegacyResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = teamsUpdateLegacyResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const teamsDeleteLegacyParamSchema = z.object({ team_id: z.coerce.number() })

  router.delete("teamsDeleteLegacy", "/teams/:team_id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        teamsDeleteLegacyParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .teamsDeleteLegacy(input, teamsDeleteLegacyResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = teamsDeleteLegacyResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const teamsListDiscussionsLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
  })

  const teamsListDiscussionsLegacyQuerySchema = z.object({
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "teamsListDiscussionsLegacy",
    "/teams/:team_id/discussions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListDiscussionsLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListDiscussionsLegacyQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsListDiscussionsLegacy(
          input,
          teamsListDiscussionsLegacyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListDiscussionsLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsCreateDiscussionLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
  })

  const teamsCreateDiscussionLegacyBodySchema = z.object({
    title: z.string(),
    body: z.string(),
    private: PermissiveBoolean.optional().default(false),
  })

  router.post(
    "teamsCreateDiscussionLegacy",
    "/teams/:team_id/discussions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsCreateDiscussionLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsCreateDiscussionLegacyBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .teamsCreateDiscussionLegacy(
          input,
          teamsCreateDiscussionLegacyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsCreateDiscussionLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsGetDiscussionLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    discussion_number: z.coerce.number(),
  })

  router.get(
    "teamsGetDiscussionLegacy",
    "/teams/:team_id/discussions/:discussion_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsGetDiscussionLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsGetDiscussionLegacy(input, teamsGetDiscussionLegacyResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsGetDiscussionLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsUpdateDiscussionLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    discussion_number: z.coerce.number(),
  })

  const teamsUpdateDiscussionLegacyBodySchema = z
    .object({ title: z.string().optional(), body: z.string().optional() })
    .optional()

  router.patch(
    "teamsUpdateDiscussionLegacy",
    "/teams/:team_id/discussions/:discussion_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsUpdateDiscussionLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsUpdateDiscussionLegacyBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .teamsUpdateDiscussionLegacy(
          input,
          teamsUpdateDiscussionLegacyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsUpdateDiscussionLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsDeleteDiscussionLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    discussion_number: z.coerce.number(),
  })

  router.delete(
    "teamsDeleteDiscussionLegacy",
    "/teams/:team_id/discussions/:discussion_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsDeleteDiscussionLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsDeleteDiscussionLegacy(
          input,
          teamsDeleteDiscussionLegacyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsDeleteDiscussionLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsListDiscussionCommentsLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    discussion_number: z.coerce.number(),
  })

  const teamsListDiscussionCommentsLegacyQuerySchema = z.object({
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "teamsListDiscussionCommentsLegacy",
    "/teams/:team_id/discussions/:discussion_number/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListDiscussionCommentsLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListDiscussionCommentsLegacyQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsListDiscussionCommentsLegacy(
          input,
          teamsListDiscussionCommentsLegacyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListDiscussionCommentsLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsCreateDiscussionCommentLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    discussion_number: z.coerce.number(),
  })

  const teamsCreateDiscussionCommentLegacyBodySchema = z.object({
    body: z.string(),
  })

  router.post(
    "teamsCreateDiscussionCommentLegacy",
    "/teams/:team_id/discussions/:discussion_number/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsCreateDiscussionCommentLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsCreateDiscussionCommentLegacyBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .teamsCreateDiscussionCommentLegacy(
          input,
          teamsCreateDiscussionCommentLegacyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsCreateDiscussionCommentLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsGetDiscussionCommentLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    discussion_number: z.coerce.number(),
    comment_number: z.coerce.number(),
  })

  router.get(
    "teamsGetDiscussionCommentLegacy",
    "/teams/:team_id/discussions/:discussion_number/comments/:comment_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsGetDiscussionCommentLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsGetDiscussionCommentLegacy(
          input,
          teamsGetDiscussionCommentLegacyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsGetDiscussionCommentLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsUpdateDiscussionCommentLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    discussion_number: z.coerce.number(),
    comment_number: z.coerce.number(),
  })

  const teamsUpdateDiscussionCommentLegacyBodySchema = z.object({
    body: z.string(),
  })

  router.patch(
    "teamsUpdateDiscussionCommentLegacy",
    "/teams/:team_id/discussions/:discussion_number/comments/:comment_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsUpdateDiscussionCommentLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsUpdateDiscussionCommentLegacyBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .teamsUpdateDiscussionCommentLegacy(
          input,
          teamsUpdateDiscussionCommentLegacyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsUpdateDiscussionCommentLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsDeleteDiscussionCommentLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    discussion_number: z.coerce.number(),
    comment_number: z.coerce.number(),
  })

  router.delete(
    "teamsDeleteDiscussionCommentLegacy",
    "/teams/:team_id/discussions/:discussion_number/comments/:comment_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsDeleteDiscussionCommentLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsDeleteDiscussionCommentLegacy(
          input,
          teamsDeleteDiscussionCommentLegacyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsDeleteDiscussionCommentLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reactionsListForTeamDiscussionCommentLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    discussion_number: z.coerce.number(),
    comment_number: z.coerce.number(),
  })

  const reactionsListForTeamDiscussionCommentLegacyQuerySchema = z.object({
    content: z
      .enum([
        "+1",
        "-1",
        "laugh",
        "confused",
        "heart",
        "hooray",
        "rocket",
        "eyes",
      ])
      .optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reactionsListForTeamDiscussionCommentLegacy",
    "/teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsListForTeamDiscussionCommentLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reactionsListForTeamDiscussionCommentLegacyQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reactionsListForTeamDiscussionCommentLegacy(
          input,
          reactionsListForTeamDiscussionCommentLegacyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsListForTeamDiscussionCommentLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reactionsCreateForTeamDiscussionCommentLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    discussion_number: z.coerce.number(),
    comment_number: z.coerce.number(),
  })

  const reactionsCreateForTeamDiscussionCommentLegacyBodySchema = z.object({
    content: z.enum([
      "+1",
      "-1",
      "laugh",
      "confused",
      "heart",
      "hooray",
      "rocket",
      "eyes",
    ]),
  })

  router.post(
    "reactionsCreateForTeamDiscussionCommentLegacy",
    "/teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsCreateForTeamDiscussionCommentLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reactionsCreateForTeamDiscussionCommentLegacyBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reactionsCreateForTeamDiscussionCommentLegacy(
          input,
          reactionsCreateForTeamDiscussionCommentLegacyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsCreateForTeamDiscussionCommentLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reactionsListForTeamDiscussionLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    discussion_number: z.coerce.number(),
  })

  const reactionsListForTeamDiscussionLegacyQuerySchema = z.object({
    content: z
      .enum([
        "+1",
        "-1",
        "laugh",
        "confused",
        "heart",
        "hooray",
        "rocket",
        "eyes",
      ])
      .optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reactionsListForTeamDiscussionLegacy",
    "/teams/:team_id/discussions/:discussion_number/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsListForTeamDiscussionLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reactionsListForTeamDiscussionLegacyQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reactionsListForTeamDiscussionLegacy(
          input,
          reactionsListForTeamDiscussionLegacyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsListForTeamDiscussionLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reactionsCreateForTeamDiscussionLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    discussion_number: z.coerce.number(),
  })

  const reactionsCreateForTeamDiscussionLegacyBodySchema = z.object({
    content: z.enum([
      "+1",
      "-1",
      "laugh",
      "confused",
      "heart",
      "hooray",
      "rocket",
      "eyes",
    ]),
  })

  router.post(
    "reactionsCreateForTeamDiscussionLegacy",
    "/teams/:team_id/discussions/:discussion_number/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsCreateForTeamDiscussionLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reactionsCreateForTeamDiscussionLegacyBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reactionsCreateForTeamDiscussionLegacy(
          input,
          reactionsCreateForTeamDiscussionLegacyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsCreateForTeamDiscussionLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsListPendingInvitationsLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
  })

  const teamsListPendingInvitationsLegacyQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "teamsListPendingInvitationsLegacy",
    "/teams/:team_id/invitations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListPendingInvitationsLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListPendingInvitationsLegacyQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsListPendingInvitationsLegacy(
          input,
          teamsListPendingInvitationsLegacyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListPendingInvitationsLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsListMembersLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
  })

  const teamsListMembersLegacyQuerySchema = z.object({
    role: z.enum(["member", "maintainer", "all"]).optional().default("all"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "teamsListMembersLegacy",
    "/teams/:team_id/members",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListMembersLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListMembersLegacyQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsListMembersLegacy(input, teamsListMembersLegacyResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListMembersLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsGetMemberLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    username: z.string(),
  })

  router.get(
    "teamsGetMemberLegacy",
    "/teams/:team_id/members/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsGetMemberLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsGetMemberLegacy(input, teamsGetMemberLegacyResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsGetMemberLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsAddMemberLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    username: z.string(),
  })

  router.put(
    "teamsAddMemberLegacy",
    "/teams/:team_id/members/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsAddMemberLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsAddMemberLegacy(input, teamsAddMemberLegacyResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsAddMemberLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsRemoveMemberLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    username: z.string(),
  })

  router.delete(
    "teamsRemoveMemberLegacy",
    "/teams/:team_id/members/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsRemoveMemberLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsRemoveMemberLegacy(input, teamsRemoveMemberLegacyResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsRemoveMemberLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsGetMembershipForUserLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    username: z.string(),
  })

  router.get(
    "teamsGetMembershipForUserLegacy",
    "/teams/:team_id/memberships/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsGetMembershipForUserLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsGetMembershipForUserLegacy(
          input,
          teamsGetMembershipForUserLegacyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsGetMembershipForUserLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsAddOrUpdateMembershipForUserLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    username: z.string(),
  })

  const teamsAddOrUpdateMembershipForUserLegacyBodySchema = z
    .object({
      role: z.enum(["member", "maintainer"]).optional().default("member"),
    })
    .optional()

  router.put(
    "teamsAddOrUpdateMembershipForUserLegacy",
    "/teams/:team_id/memberships/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsAddOrUpdateMembershipForUserLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsAddOrUpdateMembershipForUserLegacyBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .teamsAddOrUpdateMembershipForUserLegacy(
          input,
          teamsAddOrUpdateMembershipForUserLegacyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsAddOrUpdateMembershipForUserLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsRemoveMembershipForUserLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    username: z.string(),
  })

  router.delete(
    "teamsRemoveMembershipForUserLegacy",
    "/teams/:team_id/memberships/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsRemoveMembershipForUserLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsRemoveMembershipForUserLegacy(
          input,
          teamsRemoveMembershipForUserLegacyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsRemoveMembershipForUserLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsListProjectsLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
  })

  const teamsListProjectsLegacyQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "teamsListProjectsLegacy",
    "/teams/:team_id/projects",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListProjectsLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListProjectsLegacyQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsListProjectsLegacy(input, teamsListProjectsLegacyResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListProjectsLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsCheckPermissionsForProjectLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    project_id: z.coerce.number(),
  })

  router.get(
    "teamsCheckPermissionsForProjectLegacy",
    "/teams/:team_id/projects/:project_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsCheckPermissionsForProjectLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsCheckPermissionsForProjectLegacy(
          input,
          teamsCheckPermissionsForProjectLegacyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsCheckPermissionsForProjectLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsAddOrUpdateProjectPermissionsLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    project_id: z.coerce.number(),
  })

  const teamsAddOrUpdateProjectPermissionsLegacyBodySchema = z
    .object({ permission: z.enum(["read", "write", "admin"]).optional() })
    .optional()

  router.put(
    "teamsAddOrUpdateProjectPermissionsLegacy",
    "/teams/:team_id/projects/:project_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsAddOrUpdateProjectPermissionsLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsAddOrUpdateProjectPermissionsLegacyBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .teamsAddOrUpdateProjectPermissionsLegacy(
          input,
          teamsAddOrUpdateProjectPermissionsLegacyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsAddOrUpdateProjectPermissionsLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsRemoveProjectLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    project_id: z.coerce.number(),
  })

  router.delete(
    "teamsRemoveProjectLegacy",
    "/teams/:team_id/projects/:project_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsRemoveProjectLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsRemoveProjectLegacy(input, teamsRemoveProjectLegacyResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsRemoveProjectLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsListReposLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
  })

  const teamsListReposLegacyQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "teamsListReposLegacy",
    "/teams/:team_id/repos",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListReposLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListReposLegacyQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsListReposLegacy(input, teamsListReposLegacyResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListReposLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsCheckPermissionsForRepoLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "teamsCheckPermissionsForRepoLegacy",
    "/teams/:team_id/repos/:owner/:repo",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsCheckPermissionsForRepoLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsCheckPermissionsForRepoLegacy(
          input,
          teamsCheckPermissionsForRepoLegacyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsCheckPermissionsForRepoLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsAddOrUpdateRepoPermissionsLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    owner: z.string(),
    repo: z.string(),
  })

  const teamsAddOrUpdateRepoPermissionsLegacyBodySchema = z
    .object({ permission: z.enum(["pull", "push", "admin"]).optional() })
    .optional()

  router.put(
    "teamsAddOrUpdateRepoPermissionsLegacy",
    "/teams/:team_id/repos/:owner/:repo",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsAddOrUpdateRepoPermissionsLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsAddOrUpdateRepoPermissionsLegacyBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .teamsAddOrUpdateRepoPermissionsLegacy(
          input,
          teamsAddOrUpdateRepoPermissionsLegacyResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsAddOrUpdateRepoPermissionsLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsRemoveRepoLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    owner: z.string(),
    repo: z.string(),
  })

  router.delete(
    "teamsRemoveRepoLegacy",
    "/teams/:team_id/repos/:owner/:repo",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsRemoveRepoLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsRemoveRepoLegacy(input, teamsRemoveRepoLegacyResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsRemoveRepoLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsListChildLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
  })

  const teamsListChildLegacyQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "teamsListChildLegacy",
    "/teams/:team_id/teams",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListChildLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListChildLegacyQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsListChildLegacy(input, teamsListChildLegacyResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListChildLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  router.get("usersGetAuthenticated", "/user", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .usersGetAuthenticated(input, usersGetAuthenticatedResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = usersGetAuthenticatedResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const usersUpdateAuthenticatedBodySchema = z
    .object({
      name: z.string().optional(),
      email: z.string().optional(),
      blog: z.string().optional(),
      twitter_username: z.string().nullable().optional(),
      company: z.string().optional(),
      location: z.string().optional(),
      hireable: PermissiveBoolean.optional(),
      bio: z.string().optional(),
    })
    .optional()

  router.patch("usersUpdateAuthenticated", "/user", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(
        usersUpdateAuthenticatedBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const response = await implementation
      .usersUpdateAuthenticated(input, usersUpdateAuthenticatedResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = usersUpdateAuthenticatedResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const usersListBlockedByAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "usersListBlockedByAuthenticatedUser",
    "/user/blocks",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          usersListBlockedByAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersListBlockedByAuthenticatedUser(
          input,
          usersListBlockedByAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListBlockedByAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersCheckBlockedParamSchema = z.object({ username: z.string() })

  router.get(
    "usersCheckBlocked",
    "/user/blocks/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersCheckBlockedParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersCheckBlocked(input, usersCheckBlockedResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersCheckBlockedResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const usersBlockParamSchema = z.object({ username: z.string() })

  router.put("usersBlock", "/user/blocks/:username", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        usersBlockParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .usersBlock(input, usersBlockResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = usersBlockResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const usersUnblockParamSchema = z.object({ username: z.string() })

  router.delete("usersUnblock", "/user/blocks/:username", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        usersUnblockParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .usersUnblock(input, usersUnblockResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = usersUnblockResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const codespacesListForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
    repository_id: z.coerce.number().optional(),
  })

  router.get(
    "codespacesListForAuthenticatedUser",
    "/user/codespaces",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          codespacesListForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesListForAuthenticatedUser(
          input,
          codespacesListForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesListForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesCreateForAuthenticatedUserBodySchema = z.union([
    z.object({
      repository_id: z.coerce.number(),
      ref: z.string().optional(),
      location: z.string().optional(),
      geo: z
        .enum(["EuropeWest", "SoutheastAsia", "UsEast", "UsWest"])
        .optional(),
      client_ip: z.string().optional(),
      machine: z.string().optional(),
      devcontainer_path: z.string().optional(),
      multi_repo_permissions_opt_out: PermissiveBoolean.optional(),
      working_directory: z.string().optional(),
      idle_timeout_minutes: z.coerce.number().optional(),
      display_name: z.string().optional(),
      retention_period_minutes: z.coerce.number().optional(),
    }),
    z.object({
      pull_request: z.object({
        pull_request_number: z.coerce.number(),
        repository_id: z.coerce.number(),
      }),
      location: z.string().optional(),
      geo: z
        .enum(["EuropeWest", "SoutheastAsia", "UsEast", "UsWest"])
        .optional(),
      machine: z.string().optional(),
      devcontainer_path: z.string().optional(),
      working_directory: z.string().optional(),
      idle_timeout_minutes: z.coerce.number().optional(),
    }),
  ])

  router.post(
    "codespacesCreateForAuthenticatedUser",
    "/user/codespaces",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          codespacesCreateForAuthenticatedUserBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codespacesCreateForAuthenticatedUser(
          input,
          codespacesCreateForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesCreateForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesListSecretsForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "codespacesListSecretsForAuthenticatedUser",
    "/user/codespaces/secrets",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          codespacesListSecretsForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesListSecretsForAuthenticatedUser(
          input,
          codespacesListSecretsForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesListSecretsForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  router.get(
    "codespacesGetPublicKeyForAuthenticatedUser",
    "/user/codespaces/secrets/public-key",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesGetPublicKeyForAuthenticatedUser(
          input,
          codespacesGetPublicKeyForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesGetPublicKeyForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesGetSecretForAuthenticatedUserParamSchema = z.object({
    secret_name: z.string(),
  })

  router.get(
    "codespacesGetSecretForAuthenticatedUser",
    "/user/codespaces/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesGetSecretForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesGetSecretForAuthenticatedUser(
          input,
          codespacesGetSecretForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesGetSecretForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesCreateOrUpdateSecretForAuthenticatedUserParamSchema =
    z.object({ secret_name: z.string() })

  const codespacesCreateOrUpdateSecretForAuthenticatedUserBodySchema = z.object(
    {
      encrypted_value: z
        .string()
        .regex(
          new RegExp(
            "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$",
          ),
        )
        .optional(),
      key_id: z.string(),
      selected_repository_ids: z
        .array(z.union([z.coerce.number(), z.string()]))
        .optional(),
    },
  )

  router.put(
    "codespacesCreateOrUpdateSecretForAuthenticatedUser",
    "/user/codespaces/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesCreateOrUpdateSecretForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codespacesCreateOrUpdateSecretForAuthenticatedUserBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codespacesCreateOrUpdateSecretForAuthenticatedUser(
          input,
          codespacesCreateOrUpdateSecretForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        codespacesCreateOrUpdateSecretForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const codespacesDeleteSecretForAuthenticatedUserParamSchema = z.object({
    secret_name: z.string(),
  })

  router.delete(
    "codespacesDeleteSecretForAuthenticatedUser",
    "/user/codespaces/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesDeleteSecretForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesDeleteSecretForAuthenticatedUser(
          input,
          codespacesDeleteSecretForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesDeleteSecretForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesListRepositoriesForSecretForAuthenticatedUserParamSchema =
    z.object({ secret_name: z.string() })

  router.get(
    "codespacesListRepositoriesForSecretForAuthenticatedUser",
    "/user/codespaces/secrets/:secret_name/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesListRepositoriesForSecretForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesListRepositoriesForSecretForAuthenticatedUser(
          input,
          codespacesListRepositoriesForSecretForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        codespacesListRepositoriesForSecretForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const codespacesSetRepositoriesForSecretForAuthenticatedUserParamSchema =
    z.object({ secret_name: z.string() })

  const codespacesSetRepositoriesForSecretForAuthenticatedUserBodySchema =
    z.object({ selected_repository_ids: z.array(z.coerce.number()) })

  router.put(
    "codespacesSetRepositoriesForSecretForAuthenticatedUser",
    "/user/codespaces/secrets/:secret_name/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesSetRepositoriesForSecretForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codespacesSetRepositoriesForSecretForAuthenticatedUserBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codespacesSetRepositoriesForSecretForAuthenticatedUser(
          input,
          codespacesSetRepositoriesForSecretForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        codespacesSetRepositoriesForSecretForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const codespacesAddRepositoryForSecretForAuthenticatedUserParamSchema =
    z.object({ secret_name: z.string(), repository_id: z.coerce.number() })

  router.put(
    "codespacesAddRepositoryForSecretForAuthenticatedUser",
    "/user/codespaces/secrets/:secret_name/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesAddRepositoryForSecretForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesAddRepositoryForSecretForAuthenticatedUser(
          input,
          codespacesAddRepositoryForSecretForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        codespacesAddRepositoryForSecretForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const codespacesRemoveRepositoryForSecretForAuthenticatedUserParamSchema =
    z.object({ secret_name: z.string(), repository_id: z.coerce.number() })

  router.delete(
    "codespacesRemoveRepositoryForSecretForAuthenticatedUser",
    "/user/codespaces/secrets/:secret_name/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesRemoveRepositoryForSecretForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesRemoveRepositoryForSecretForAuthenticatedUser(
          input,
          codespacesRemoveRepositoryForSecretForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        codespacesRemoveRepositoryForSecretForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const codespacesGetForAuthenticatedUserParamSchema = z.object({
    codespace_name: z.string(),
  })

  router.get(
    "codespacesGetForAuthenticatedUser",
    "/user/codespaces/:codespace_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesGetForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesGetForAuthenticatedUser(
          input,
          codespacesGetForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesGetForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesUpdateForAuthenticatedUserParamSchema = z.object({
    codespace_name: z.string(),
  })

  const codespacesUpdateForAuthenticatedUserBodySchema = z
    .object({
      machine: z.string().optional(),
      display_name: z.string().optional(),
      recent_folders: z.array(z.string()).optional(),
    })
    .optional()

  router.patch(
    "codespacesUpdateForAuthenticatedUser",
    "/user/codespaces/:codespace_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesUpdateForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codespacesUpdateForAuthenticatedUserBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codespacesUpdateForAuthenticatedUser(
          input,
          codespacesUpdateForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesUpdateForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesDeleteForAuthenticatedUserParamSchema = z.object({
    codespace_name: z.string(),
  })

  router.delete(
    "codespacesDeleteForAuthenticatedUser",
    "/user/codespaces/:codespace_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesDeleteForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesDeleteForAuthenticatedUser(
          input,
          codespacesDeleteForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesDeleteForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesExportForAuthenticatedUserParamSchema = z.object({
    codespace_name: z.string(),
  })

  router.post(
    "codespacesExportForAuthenticatedUser",
    "/user/codespaces/:codespace_name/exports",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesExportForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesExportForAuthenticatedUser(
          input,
          codespacesExportForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesExportForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesGetExportDetailsForAuthenticatedUserParamSchema = z.object({
    codespace_name: z.string(),
    export_id: z.string(),
  })

  router.get(
    "codespacesGetExportDetailsForAuthenticatedUser",
    "/user/codespaces/:codespace_name/exports/:export_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesGetExportDetailsForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesGetExportDetailsForAuthenticatedUser(
          input,
          codespacesGetExportDetailsForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        codespacesGetExportDetailsForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const codespacesCodespaceMachinesForAuthenticatedUserParamSchema = z.object({
    codespace_name: z.string(),
  })

  router.get(
    "codespacesCodespaceMachinesForAuthenticatedUser",
    "/user/codespaces/:codespace_name/machines",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesCodespaceMachinesForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesCodespaceMachinesForAuthenticatedUser(
          input,
          codespacesCodespaceMachinesForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        codespacesCodespaceMachinesForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const codespacesPublishForAuthenticatedUserParamSchema = z.object({
    codespace_name: z.string(),
  })

  const codespacesPublishForAuthenticatedUserBodySchema = z.object({
    name: z.string().optional(),
    private: PermissiveBoolean.optional().default(false),
  })

  router.post(
    "codespacesPublishForAuthenticatedUser",
    "/user/codespaces/:codespace_name/publish",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesPublishForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codespacesPublishForAuthenticatedUserBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .codespacesPublishForAuthenticatedUser(
          input,
          codespacesPublishForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesPublishForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesStartForAuthenticatedUserParamSchema = z.object({
    codespace_name: z.string(),
  })

  router.post(
    "codespacesStartForAuthenticatedUser",
    "/user/codespaces/:codespace_name/start",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesStartForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesStartForAuthenticatedUser(
          input,
          codespacesStartForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesStartForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesStopForAuthenticatedUserParamSchema = z.object({
    codespace_name: z.string(),
  })

  router.post(
    "codespacesStopForAuthenticatedUser",
    "/user/codespaces/:codespace_name/stop",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesStopForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .codespacesStopForAuthenticatedUser(
          input,
          codespacesStopForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesStopForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  router.get(
    "packagesListDockerMigrationConflictingPackagesForAuthenticatedUser",
    "/user/docker/conflicts",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesListDockerMigrationConflictingPackagesForAuthenticatedUser(
          input,
          packagesListDockerMigrationConflictingPackagesForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        packagesListDockerMigrationConflictingPackagesForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const usersSetPrimaryEmailVisibilityForAuthenticatedUserBodySchema = z.object(
    { visibility: z.enum(["public", "private"]) },
  )

  router.patch(
    "usersSetPrimaryEmailVisibilityForAuthenticatedUser",
    "/user/email/visibility",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          usersSetPrimaryEmailVisibilityForAuthenticatedUserBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .usersSetPrimaryEmailVisibilityForAuthenticatedUser(
          input,
          usersSetPrimaryEmailVisibilityForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        usersSetPrimaryEmailVisibilityForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const usersListEmailsForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "usersListEmailsForAuthenticatedUser",
    "/user/emails",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          usersListEmailsForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersListEmailsForAuthenticatedUser(
          input,
          usersListEmailsForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListEmailsForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersAddEmailForAuthenticatedUserBodySchema = z
    .union([
      z.object({ emails: z.array(z.string()).min(1) }),
      z.array(z.string()).min(1),
      z.string(),
    ])
    .optional()

  router.post(
    "usersAddEmailForAuthenticatedUser",
    "/user/emails",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          usersAddEmailForAuthenticatedUserBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .usersAddEmailForAuthenticatedUser(
          input,
          usersAddEmailForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersAddEmailForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersDeleteEmailForAuthenticatedUserBodySchema = z.union([
    z.object({ emails: z.array(z.string()).min(1) }),
    z.array(z.string()).min(1),
    z.string(),
  ])

  router.delete(
    "usersDeleteEmailForAuthenticatedUser",
    "/user/emails",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          usersDeleteEmailForAuthenticatedUserBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .usersDeleteEmailForAuthenticatedUser(
          input,
          usersDeleteEmailForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersDeleteEmailForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersListFollowersForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "usersListFollowersForAuthenticatedUser",
    "/user/followers",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          usersListFollowersForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersListFollowersForAuthenticatedUser(
          input,
          usersListFollowersForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListFollowersForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersListFollowedByAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "usersListFollowedByAuthenticatedUser",
    "/user/following",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          usersListFollowedByAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersListFollowedByAuthenticatedUser(
          input,
          usersListFollowedByAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListFollowedByAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersCheckPersonIsFollowedByAuthenticatedParamSchema = z.object({
    username: z.string(),
  })

  router.get(
    "usersCheckPersonIsFollowedByAuthenticated",
    "/user/following/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersCheckPersonIsFollowedByAuthenticatedParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersCheckPersonIsFollowedByAuthenticated(
          input,
          usersCheckPersonIsFollowedByAuthenticatedResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersCheckPersonIsFollowedByAuthenticatedResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersFollowParamSchema = z.object({ username: z.string() })

  router.put("usersFollow", "/user/following/:username", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        usersFollowParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .usersFollow(input, usersFollowResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = usersFollowResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const usersUnfollowParamSchema = z.object({ username: z.string() })

  router.delete(
    "usersUnfollow",
    "/user/following/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersUnfollowParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersUnfollow(input, usersUnfollowResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersUnfollowResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const usersListGpgKeysForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "usersListGpgKeysForAuthenticatedUser",
    "/user/gpg_keys",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          usersListGpgKeysForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersListGpgKeysForAuthenticatedUser(
          input,
          usersListGpgKeysForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListGpgKeysForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersCreateGpgKeyForAuthenticatedUserBodySchema = z.object({
    name: z.string().optional(),
    armored_public_key: z.string(),
  })

  router.post(
    "usersCreateGpgKeyForAuthenticatedUser",
    "/user/gpg_keys",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          usersCreateGpgKeyForAuthenticatedUserBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .usersCreateGpgKeyForAuthenticatedUser(
          input,
          usersCreateGpgKeyForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersCreateGpgKeyForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersGetGpgKeyForAuthenticatedUserParamSchema = z.object({
    gpg_key_id: z.coerce.number(),
  })

  router.get(
    "usersGetGpgKeyForAuthenticatedUser",
    "/user/gpg_keys/:gpg_key_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersGetGpgKeyForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersGetGpgKeyForAuthenticatedUser(
          input,
          usersGetGpgKeyForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersGetGpgKeyForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersDeleteGpgKeyForAuthenticatedUserParamSchema = z.object({
    gpg_key_id: z.coerce.number(),
  })

  router.delete(
    "usersDeleteGpgKeyForAuthenticatedUser",
    "/user/gpg_keys/:gpg_key_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersDeleteGpgKeyForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersDeleteGpgKeyForAuthenticatedUser(
          input,
          usersDeleteGpgKeyForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersDeleteGpgKeyForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const appsListInstallationsForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "appsListInstallationsForAuthenticatedUser",
    "/user/installations",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          appsListInstallationsForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsListInstallationsForAuthenticatedUser(
          input,
          appsListInstallationsForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsListInstallationsForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const appsListInstallationReposForAuthenticatedUserParamSchema = z.object({
    installation_id: z.coerce.number(),
  })

  const appsListInstallationReposForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "appsListInstallationReposForAuthenticatedUser",
    "/user/installations/:installation_id/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsListInstallationReposForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          appsListInstallationReposForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsListInstallationReposForAuthenticatedUser(
          input,
          appsListInstallationReposForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsListInstallationReposForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const appsAddRepoToInstallationForAuthenticatedUserParamSchema = z.object({
    installation_id: z.coerce.number(),
    repository_id: z.coerce.number(),
  })

  router.put(
    "appsAddRepoToInstallationForAuthenticatedUser",
    "/user/installations/:installation_id/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsAddRepoToInstallationForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsAddRepoToInstallationForAuthenticatedUser(
          input,
          appsAddRepoToInstallationForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsAddRepoToInstallationForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const appsRemoveRepoFromInstallationForAuthenticatedUserParamSchema =
    z.object({
      installation_id: z.coerce.number(),
      repository_id: z.coerce.number(),
    })

  router.delete(
    "appsRemoveRepoFromInstallationForAuthenticatedUser",
    "/user/installations/:installation_id/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsRemoveRepoFromInstallationForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsRemoveRepoFromInstallationForAuthenticatedUser(
          input,
          appsRemoveRepoFromInstallationForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        appsRemoveRepoFromInstallationForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  router.get(
    "interactionsGetRestrictionsForAuthenticatedUser",
    "/user/interaction-limits",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .interactionsGetRestrictionsForAuthenticatedUser(
          input,
          interactionsGetRestrictionsForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        interactionsGetRestrictionsForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const interactionsSetRestrictionsForAuthenticatedUserBodySchema =
    s_interaction_limit

  router.put(
    "interactionsSetRestrictionsForAuthenticatedUser",
    "/user/interaction-limits",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          interactionsSetRestrictionsForAuthenticatedUserBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .interactionsSetRestrictionsForAuthenticatedUser(
          input,
          interactionsSetRestrictionsForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        interactionsSetRestrictionsForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  router.delete(
    "interactionsRemoveRestrictionsForAuthenticatedUser",
    "/user/interaction-limits",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .interactionsRemoveRestrictionsForAuthenticatedUser(
          input,
          interactionsRemoveRestrictionsForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        interactionsRemoveRestrictionsForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const issuesListForAuthenticatedUserQuerySchema = z.object({
    filter: z
      .enum(["assigned", "created", "mentioned", "subscribed", "repos", "all"])
      .optional()
      .default("assigned"),
    state: z.enum(["open", "closed", "all"]).optional().default("open"),
    labels: z.string().optional(),
    sort: z
      .enum(["created", "updated", "comments"])
      .optional()
      .default("created"),
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    since: z.string().datetime({ offset: true }).optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "issuesListForAuthenticatedUser",
    "/user/issues",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          issuesListForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .issuesListForAuthenticatedUser(
          input,
          issuesListForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListForAuthenticatedUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const usersListPublicSshKeysForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "usersListPublicSshKeysForAuthenticatedUser",
    "/user/keys",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          usersListPublicSshKeysForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersListPublicSshKeysForAuthenticatedUser(
          input,
          usersListPublicSshKeysForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListPublicSshKeysForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersCreatePublicSshKeyForAuthenticatedUserBodySchema = z.object({
    title: z.string().optional(),
    key: z
      .string()
      .regex(
        new RegExp("^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) "),
      ),
  })

  router.post(
    "usersCreatePublicSshKeyForAuthenticatedUser",
    "/user/keys",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          usersCreatePublicSshKeyForAuthenticatedUserBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .usersCreatePublicSshKeyForAuthenticatedUser(
          input,
          usersCreatePublicSshKeyForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersCreatePublicSshKeyForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersGetPublicSshKeyForAuthenticatedUserParamSchema = z.object({
    key_id: z.coerce.number(),
  })

  router.get(
    "usersGetPublicSshKeyForAuthenticatedUser",
    "/user/keys/:key_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersGetPublicSshKeyForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersGetPublicSshKeyForAuthenticatedUser(
          input,
          usersGetPublicSshKeyForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersGetPublicSshKeyForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersDeletePublicSshKeyForAuthenticatedUserParamSchema = z.object({
    key_id: z.coerce.number(),
  })

  router.delete(
    "usersDeletePublicSshKeyForAuthenticatedUser",
    "/user/keys/:key_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersDeletePublicSshKeyForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersDeletePublicSshKeyForAuthenticatedUser(
          input,
          usersDeletePublicSshKeyForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersDeletePublicSshKeyForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const appsListSubscriptionsForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "appsListSubscriptionsForAuthenticatedUser",
    "/user/marketplace_purchases",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          appsListSubscriptionsForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsListSubscriptionsForAuthenticatedUser(
          input,
          appsListSubscriptionsForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsListSubscriptionsForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const appsListSubscriptionsForAuthenticatedUserStubbedQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "appsListSubscriptionsForAuthenticatedUserStubbed",
    "/user/marketplace_purchases/stubbed",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          appsListSubscriptionsForAuthenticatedUserStubbedQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsListSubscriptionsForAuthenticatedUserStubbed(
          input,
          appsListSubscriptionsForAuthenticatedUserStubbedResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        appsListSubscriptionsForAuthenticatedUserStubbedResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const orgsListMembershipsForAuthenticatedUserQuerySchema = z.object({
    state: z.enum(["active", "pending"]).optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "orgsListMembershipsForAuthenticatedUser",
    "/user/memberships/orgs",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          orgsListMembershipsForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsListMembershipsForAuthenticatedUser(
          input,
          orgsListMembershipsForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListMembershipsForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsGetMembershipForAuthenticatedUserParamSchema = z.object({
    org: z.string(),
  })

  router.get(
    "orgsGetMembershipForAuthenticatedUser",
    "/user/memberships/orgs/:org",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsGetMembershipForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsGetMembershipForAuthenticatedUser(
          input,
          orgsGetMembershipForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsGetMembershipForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsUpdateMembershipForAuthenticatedUserParamSchema = z.object({
    org: z.string(),
  })

  const orgsUpdateMembershipForAuthenticatedUserBodySchema = z.object({
    state: z.enum(["active"]),
  })

  router.patch(
    "orgsUpdateMembershipForAuthenticatedUser",
    "/user/memberships/orgs/:org",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsUpdateMembershipForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsUpdateMembershipForAuthenticatedUserBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .orgsUpdateMembershipForAuthenticatedUser(
          input,
          orgsUpdateMembershipForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsUpdateMembershipForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const migrationsListForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "migrationsListForAuthenticatedUser",
    "/user/migrations",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          migrationsListForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .migrationsListForAuthenticatedUser(
          input,
          migrationsListForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsListForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const migrationsStartForAuthenticatedUserBodySchema = z.object({
    lock_repositories: PermissiveBoolean.optional(),
    exclude_metadata: PermissiveBoolean.optional(),
    exclude_git_data: PermissiveBoolean.optional(),
    exclude_attachments: PermissiveBoolean.optional(),
    exclude_releases: PermissiveBoolean.optional(),
    exclude_owner_projects: PermissiveBoolean.optional(),
    org_metadata_only: PermissiveBoolean.optional().default(false),
    exclude: z.array(z.enum(["repositories"])).optional(),
    repositories: z.array(z.string()),
  })

  router.post(
    "migrationsStartForAuthenticatedUser",
    "/user/migrations",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          migrationsStartForAuthenticatedUserBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .migrationsStartForAuthenticatedUser(
          input,
          migrationsStartForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsStartForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const migrationsGetStatusForAuthenticatedUserParamSchema = z.object({
    migration_id: z.coerce.number(),
  })

  const migrationsGetStatusForAuthenticatedUserQuerySchema = z.object({
    exclude: z
      .preprocess(
        (it: unknown) => (Array.isArray(it) || it === undefined ? it : [it]),
        z.array(z.string()),
      )
      .optional(),
  })

  router.get(
    "migrationsGetStatusForAuthenticatedUser",
    "/user/migrations/:migration_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsGetStatusForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          migrationsGetStatusForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .migrationsGetStatusForAuthenticatedUser(
          input,
          migrationsGetStatusForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsGetStatusForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const migrationsGetArchiveForAuthenticatedUserParamSchema = z.object({
    migration_id: z.coerce.number(),
  })

  router.get(
    "migrationsGetArchiveForAuthenticatedUser",
    "/user/migrations/:migration_id/archive",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsGetArchiveForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .migrationsGetArchiveForAuthenticatedUser(
          input,
          migrationsGetArchiveForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsGetArchiveForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const migrationsDeleteArchiveForAuthenticatedUserParamSchema = z.object({
    migration_id: z.coerce.number(),
  })

  router.delete(
    "migrationsDeleteArchiveForAuthenticatedUser",
    "/user/migrations/:migration_id/archive",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsDeleteArchiveForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .migrationsDeleteArchiveForAuthenticatedUser(
          input,
          migrationsDeleteArchiveForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsDeleteArchiveForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const migrationsUnlockRepoForAuthenticatedUserParamSchema = z.object({
    migration_id: z.coerce.number(),
    repo_name: z.string(),
  })

  router.delete(
    "migrationsUnlockRepoForAuthenticatedUser",
    "/user/migrations/:migration_id/repos/:repo_name/lock",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsUnlockRepoForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .migrationsUnlockRepoForAuthenticatedUser(
          input,
          migrationsUnlockRepoForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsUnlockRepoForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const migrationsListReposForAuthenticatedUserParamSchema = z.object({
    migration_id: z.coerce.number(),
  })

  const migrationsListReposForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "migrationsListReposForAuthenticatedUser",
    "/user/migrations/:migration_id/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsListReposForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          migrationsListReposForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .migrationsListReposForAuthenticatedUser(
          input,
          migrationsListReposForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsListReposForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsListForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "orgsListForAuthenticatedUser",
    "/user/orgs",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          orgsListForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .orgsListForAuthenticatedUser(
          input,
          orgsListForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListForAuthenticatedUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const packagesListPackagesForAuthenticatedUserQuerySchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    visibility: z.enum(["public", "private", "internal"]).optional(),
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
  })

  router.get(
    "packagesListPackagesForAuthenticatedUser",
    "/user/packages",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          packagesListPackagesForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesListPackagesForAuthenticatedUser(
          input,
          packagesListPackagesForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesListPackagesForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const packagesGetPackageForAuthenticatedUserParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
  })

  router.get(
    "packagesGetPackageForAuthenticatedUser",
    "/user/packages/:package_type/:package_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesGetPackageForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesGetPackageForAuthenticatedUser(
          input,
          packagesGetPackageForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesGetPackageForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const packagesDeletePackageForAuthenticatedUserParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
  })

  router.delete(
    "packagesDeletePackageForAuthenticatedUser",
    "/user/packages/:package_type/:package_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesDeletePackageForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesDeletePackageForAuthenticatedUser(
          input,
          packagesDeletePackageForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesDeletePackageForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const packagesRestorePackageForAuthenticatedUserParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
  })

  const packagesRestorePackageForAuthenticatedUserQuerySchema = z.object({
    token: z.string().optional(),
  })

  router.post(
    "packagesRestorePackageForAuthenticatedUser",
    "/user/packages/:package_type/:package_name/restore",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesRestorePackageForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          packagesRestorePackageForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesRestorePackageForAuthenticatedUser(
          input,
          packagesRestorePackageForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesRestorePackageForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParamSchema =
    z.object({
      package_type: z.enum([
        "npm",
        "maven",
        "rubygems",
        "docker",
        "nuget",
        "container",
      ]),
      package_name: z.string(),
    })

  const packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQuerySchema =
    z.object({
      page: z.coerce.number().optional().default(1),
      per_page: z.coerce.number().optional().default(30),
      state: z.enum(["active", "deleted"]).optional().default("active"),
    })

  router.get(
    "packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser",
    "/user/packages/:package_type/:package_name/versions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser(
          input,
          packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const packagesGetPackageVersionForAuthenticatedUserParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    package_version_id: z.coerce.number(),
  })

  router.get(
    "packagesGetPackageVersionForAuthenticatedUser",
    "/user/packages/:package_type/:package_name/versions/:package_version_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesGetPackageVersionForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesGetPackageVersionForAuthenticatedUser(
          input,
          packagesGetPackageVersionForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesGetPackageVersionForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const packagesDeletePackageVersionForAuthenticatedUserParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    package_version_id: z.coerce.number(),
  })

  router.delete(
    "packagesDeletePackageVersionForAuthenticatedUser",
    "/user/packages/:package_type/:package_name/versions/:package_version_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesDeletePackageVersionForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesDeletePackageVersionForAuthenticatedUser(
          input,
          packagesDeletePackageVersionForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        packagesDeletePackageVersionForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const packagesRestorePackageVersionForAuthenticatedUserParamSchema = z.object(
    {
      package_type: z.enum([
        "npm",
        "maven",
        "rubygems",
        "docker",
        "nuget",
        "container",
      ]),
      package_name: z.string(),
      package_version_id: z.coerce.number(),
    },
  )

  router.post(
    "packagesRestorePackageVersionForAuthenticatedUser",
    "/user/packages/:package_type/:package_name/versions/:package_version_id/restore",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesRestorePackageVersionForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesRestorePackageVersionForAuthenticatedUser(
          input,
          packagesRestorePackageVersionForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        packagesRestorePackageVersionForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const projectsCreateForAuthenticatedUserBodySchema = z.object({
    name: z.string(),
    body: z.string().nullable().optional(),
  })

  router.post(
    "projectsCreateForAuthenticatedUser",
    "/user/projects",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          projectsCreateForAuthenticatedUserBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .projectsCreateForAuthenticatedUser(
          input,
          projectsCreateForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsCreateForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersListPublicEmailsForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "usersListPublicEmailsForAuthenticatedUser",
    "/user/public_emails",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          usersListPublicEmailsForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersListPublicEmailsForAuthenticatedUser(
          input,
          usersListPublicEmailsForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListPublicEmailsForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposListForAuthenticatedUserQuerySchema = z.object({
    visibility: z.enum(["all", "public", "private"]).optional().default("all"),
    affiliation: z
      .string()
      .optional()
      .default("owner,collaborator,organization_member"),
    type: z
      .enum(["all", "owner", "public", "private", "member"])
      .optional()
      .default("all"),
    sort: z
      .enum(["created", "updated", "pushed", "full_name"])
      .optional()
      .default("full_name"),
    direction: z.enum(["asc", "desc"]).optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
    since: z.string().datetime({ offset: true }).optional(),
    before: z.string().datetime({ offset: true }).optional(),
  })

  router.get(
    "reposListForAuthenticatedUser",
    "/user/repos",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          reposListForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListForAuthenticatedUser(
          input,
          reposListForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListForAuthenticatedUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateForAuthenticatedUserBodySchema = z.object({
    name: z.string(),
    description: z.string().optional(),
    homepage: z.string().optional(),
    private: PermissiveBoolean.optional().default(false),
    has_issues: PermissiveBoolean.optional().default(true),
    has_projects: PermissiveBoolean.optional().default(true),
    has_wiki: PermissiveBoolean.optional().default(true),
    has_discussions: PermissiveBoolean.optional().default(false),
    team_id: z.coerce.number().optional(),
    auto_init: PermissiveBoolean.optional().default(false),
    gitignore_template: z.string().optional(),
    license_template: z.string().optional(),
    allow_squash_merge: PermissiveBoolean.optional().default(true),
    allow_merge_commit: PermissiveBoolean.optional().default(true),
    allow_rebase_merge: PermissiveBoolean.optional().default(true),
    allow_auto_merge: PermissiveBoolean.optional().default(false),
    delete_branch_on_merge: PermissiveBoolean.optional().default(false),
    squash_merge_commit_title: z
      .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
      .optional(),
    squash_merge_commit_message: z
      .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
      .optional(),
    merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
    merge_commit_message: z.enum(["PR_BODY", "PR_TITLE", "BLANK"]).optional(),
    has_downloads: PermissiveBoolean.optional().default(true),
    is_template: PermissiveBoolean.optional().default(false),
  })

  router.post(
    "reposCreateForAuthenticatedUser",
    "/user/repos",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          reposCreateForAuthenticatedUserBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .reposCreateForAuthenticatedUser(
          input,
          reposCreateForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateForAuthenticatedUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListInvitationsForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposListInvitationsForAuthenticatedUser",
    "/user/repository_invitations",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          reposListInvitationsForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListInvitationsForAuthenticatedUser(
          input,
          reposListInvitationsForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListInvitationsForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposAcceptInvitationForAuthenticatedUserParamSchema = z.object({
    invitation_id: z.coerce.number(),
  })

  router.patch(
    "reposAcceptInvitationForAuthenticatedUser",
    "/user/repository_invitations/:invitation_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposAcceptInvitationForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposAcceptInvitationForAuthenticatedUser(
          input,
          reposAcceptInvitationForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposAcceptInvitationForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposDeclineInvitationForAuthenticatedUserParamSchema = z.object({
    invitation_id: z.coerce.number(),
  })

  router.delete(
    "reposDeclineInvitationForAuthenticatedUser",
    "/user/repository_invitations/:invitation_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeclineInvitationForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposDeclineInvitationForAuthenticatedUser(
          input,
          reposDeclineInvitationForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeclineInvitationForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersListSocialAccountsForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "usersListSocialAccountsForAuthenticatedUser",
    "/user/social_accounts",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          usersListSocialAccountsForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersListSocialAccountsForAuthenticatedUser(
          input,
          usersListSocialAccountsForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListSocialAccountsForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersAddSocialAccountForAuthenticatedUserBodySchema = z.object({
    account_urls: z.array(z.string()),
  })

  router.post(
    "usersAddSocialAccountForAuthenticatedUser",
    "/user/social_accounts",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          usersAddSocialAccountForAuthenticatedUserBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .usersAddSocialAccountForAuthenticatedUser(
          input,
          usersAddSocialAccountForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersAddSocialAccountForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersDeleteSocialAccountForAuthenticatedUserBodySchema = z.object({
    account_urls: z.array(z.string()),
  })

  router.delete(
    "usersDeleteSocialAccountForAuthenticatedUser",
    "/user/social_accounts",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          usersDeleteSocialAccountForAuthenticatedUserBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .usersDeleteSocialAccountForAuthenticatedUser(
          input,
          usersDeleteSocialAccountForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersDeleteSocialAccountForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersListSshSigningKeysForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "usersListSshSigningKeysForAuthenticatedUser",
    "/user/ssh_signing_keys",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          usersListSshSigningKeysForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersListSshSigningKeysForAuthenticatedUser(
          input,
          usersListSshSigningKeysForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListSshSigningKeysForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersCreateSshSigningKeyForAuthenticatedUserBodySchema = z.object({
    title: z.string().optional(),
    key: z
      .string()
      .regex(
        new RegExp(
          "^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) |^(sk-ssh-ed25519|sk-ecdsa-sha2-nistp256)@openssh.com ",
        ),
      ),
  })

  router.post(
    "usersCreateSshSigningKeyForAuthenticatedUser",
    "/user/ssh_signing_keys",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          usersCreateSshSigningKeyForAuthenticatedUserBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .usersCreateSshSigningKeyForAuthenticatedUser(
          input,
          usersCreateSshSigningKeyForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersCreateSshSigningKeyForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersGetSshSigningKeyForAuthenticatedUserParamSchema = z.object({
    ssh_signing_key_id: z.coerce.number(),
  })

  router.get(
    "usersGetSshSigningKeyForAuthenticatedUser",
    "/user/ssh_signing_keys/:ssh_signing_key_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersGetSshSigningKeyForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersGetSshSigningKeyForAuthenticatedUser(
          input,
          usersGetSshSigningKeyForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersGetSshSigningKeyForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersDeleteSshSigningKeyForAuthenticatedUserParamSchema = z.object({
    ssh_signing_key_id: z.coerce.number(),
  })

  router.delete(
    "usersDeleteSshSigningKeyForAuthenticatedUser",
    "/user/ssh_signing_keys/:ssh_signing_key_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersDeleteSshSigningKeyForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersDeleteSshSigningKeyForAuthenticatedUser(
          input,
          usersDeleteSshSigningKeyForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersDeleteSshSigningKeyForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const activityListReposStarredByAuthenticatedUserQuerySchema = z.object({
    sort: z.enum(["created", "updated"]).optional().default("created"),
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "activityListReposStarredByAuthenticatedUser",
    "/user/starred",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          activityListReposStarredByAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityListReposStarredByAuthenticatedUser(
          input,
          activityListReposStarredByAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListReposStarredByAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const activityCheckRepoIsStarredByAuthenticatedUserParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.get(
    "activityCheckRepoIsStarredByAuthenticatedUser",
    "/user/starred/:owner/:repo",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityCheckRepoIsStarredByAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityCheckRepoIsStarredByAuthenticatedUser(
          input,
          activityCheckRepoIsStarredByAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityCheckRepoIsStarredByAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const activityStarRepoForAuthenticatedUserParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.put(
    "activityStarRepoForAuthenticatedUser",
    "/user/starred/:owner/:repo",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityStarRepoForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityStarRepoForAuthenticatedUser(
          input,
          activityStarRepoForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityStarRepoForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const activityUnstarRepoForAuthenticatedUserParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  router.delete(
    "activityUnstarRepoForAuthenticatedUser",
    "/user/starred/:owner/:repo",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityUnstarRepoForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityUnstarRepoForAuthenticatedUser(
          input,
          activityUnstarRepoForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityUnstarRepoForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const activityListWatchedReposForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "activityListWatchedReposForAuthenticatedUser",
    "/user/subscriptions",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          activityListWatchedReposForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityListWatchedReposForAuthenticatedUser(
          input,
          activityListWatchedReposForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListWatchedReposForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsListForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "teamsListForAuthenticatedUser",
    "/user/teams",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          teamsListForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .teamsListForAuthenticatedUser(
          input,
          teamsListForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListForAuthenticatedUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const usersGetByIdParamSchema = z.object({ account_id: z.coerce.number() })

  router.get("usersGetById", "/user/:account_id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        usersGetByIdParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .usersGetById(input, usersGetByIdResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = usersGetByIdResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const usersListQuerySchema = z.object({
    since: z.coerce.number().optional(),
    per_page: z.coerce.number().optional().default(30),
  })

  router.get("usersList", "/users", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        usersListQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .usersList(input, usersListResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = usersListResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const usersGetByUsernameParamSchema = z.object({ username: z.string() })

  router.get("usersGetByUsername", "/users/:username", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        usersGetByUsernameParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .usersGetByUsername(input, usersGetByUsernameResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = usersGetByUsernameResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const usersListAttestationsParamSchema = z.object({
    username: z.string(),
    subject_digest: z.string(),
  })

  const usersListAttestationsQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    before: z.string().optional(),
    after: z.string().optional(),
    predicate_type: z.string().optional(),
  })

  router.get(
    "usersListAttestations",
    "/users/:username/attestations/:subject_digest",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersListAttestationsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          usersListAttestationsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersListAttestations(input, usersListAttestationsResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListAttestationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const packagesListDockerMigrationConflictingPackagesForUserParamSchema =
    z.object({ username: z.string() })

  router.get(
    "packagesListDockerMigrationConflictingPackagesForUser",
    "/users/:username/docker/conflicts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesListDockerMigrationConflictingPackagesForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesListDockerMigrationConflictingPackagesForUser(
          input,
          packagesListDockerMigrationConflictingPackagesForUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        packagesListDockerMigrationConflictingPackagesForUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const activityListEventsForAuthenticatedUserParamSchema = z.object({
    username: z.string(),
  })

  const activityListEventsForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "activityListEventsForAuthenticatedUser",
    "/users/:username/events",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListEventsForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListEventsForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityListEventsForAuthenticatedUser(
          input,
          activityListEventsForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListEventsForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const activityListOrgEventsForAuthenticatedUserParamSchema = z.object({
    username: z.string(),
    org: z.string(),
  })

  const activityListOrgEventsForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "activityListOrgEventsForAuthenticatedUser",
    "/users/:username/events/orgs/:org",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListOrgEventsForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListOrgEventsForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityListOrgEventsForAuthenticatedUser(
          input,
          activityListOrgEventsForAuthenticatedUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListOrgEventsForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const activityListPublicEventsForUserParamSchema = z.object({
    username: z.string(),
  })

  const activityListPublicEventsForUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "activityListPublicEventsForUser",
    "/users/:username/events/public",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListPublicEventsForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListPublicEventsForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityListPublicEventsForUser(
          input,
          activityListPublicEventsForUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListPublicEventsForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const usersListFollowersForUserParamSchema = z.object({
    username: z.string(),
  })

  const usersListFollowersForUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "usersListFollowersForUser",
    "/users/:username/followers",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersListFollowersForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          usersListFollowersForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersListFollowersForUser(
          input,
          usersListFollowersForUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListFollowersForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const usersListFollowingForUserParamSchema = z.object({
    username: z.string(),
  })

  const usersListFollowingForUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "usersListFollowingForUser",
    "/users/:username/following",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersListFollowingForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          usersListFollowingForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersListFollowingForUser(
          input,
          usersListFollowingForUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListFollowingForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const usersCheckFollowingForUserParamSchema = z.object({
    username: z.string(),
    target_user: z.string(),
  })

  router.get(
    "usersCheckFollowingForUser",
    "/users/:username/following/:target_user",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersCheckFollowingForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersCheckFollowingForUser(
          input,
          usersCheckFollowingForUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersCheckFollowingForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gistsListForUserParamSchema = z.object({ username: z.string() })

  const gistsListForUserQuerySchema = z.object({
    since: z.string().datetime({ offset: true }).optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "gistsListForUser",
    "/users/:username/gists",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gistsListForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          gistsListForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .gistsListForUser(input, gistsListForUserResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gistsListForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const usersListGpgKeysForUserParamSchema = z.object({ username: z.string() })

  const usersListGpgKeysForUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "usersListGpgKeysForUser",
    "/users/:username/gpg_keys",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersListGpgKeysForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          usersListGpgKeysForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersListGpgKeysForUser(input, usersListGpgKeysForUserResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListGpgKeysForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const usersGetContextForUserParamSchema = z.object({ username: z.string() })

  const usersGetContextForUserQuerySchema = z.object({
    subject_type: z
      .enum(["organization", "repository", "issue", "pull_request"])
      .optional(),
    subject_id: z.string().optional(),
  })

  router.get(
    "usersGetContextForUser",
    "/users/:username/hovercard",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersGetContextForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          usersGetContextForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersGetContextForUser(input, usersGetContextForUserResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersGetContextForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsGetUserInstallationParamSchema = z.object({ username: z.string() })

  router.get(
    "appsGetUserInstallation",
    "/users/:username/installation",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsGetUserInstallationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .appsGetUserInstallation(input, appsGetUserInstallationResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsGetUserInstallationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const usersListPublicKeysForUserParamSchema = z.object({
    username: z.string(),
  })

  const usersListPublicKeysForUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "usersListPublicKeysForUser",
    "/users/:username/keys",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersListPublicKeysForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          usersListPublicKeysForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersListPublicKeysForUser(
          input,
          usersListPublicKeysForUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListPublicKeysForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListForUserParamSchema = z.object({ username: z.string() })

  const orgsListForUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get("orgsListForUser", "/users/:username/orgs", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        orgsListForUserParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: parseRequestInput(
        orgsListForUserQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .orgsListForUser(input, orgsListForUserResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = orgsListForUserResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const packagesListPackagesForUserParamSchema = z.object({
    username: z.string(),
  })

  const packagesListPackagesForUserQuerySchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    visibility: z.enum(["public", "private", "internal"]).optional(),
    page: z.coerce.number().optional().default(1),
    per_page: z.coerce.number().optional().default(30),
  })

  router.get(
    "packagesListPackagesForUser",
    "/users/:username/packages",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesListPackagesForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          packagesListPackagesForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesListPackagesForUser(
          input,
          packagesListPackagesForUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesListPackagesForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const packagesGetPackageForUserParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    username: z.string(),
  })

  router.get(
    "packagesGetPackageForUser",
    "/users/:username/packages/:package_type/:package_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesGetPackageForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesGetPackageForUser(
          input,
          packagesGetPackageForUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesGetPackageForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const packagesDeletePackageForUserParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    username: z.string(),
  })

  router.delete(
    "packagesDeletePackageForUser",
    "/users/:username/packages/:package_type/:package_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesDeletePackageForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesDeletePackageForUser(
          input,
          packagesDeletePackageForUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesDeletePackageForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const packagesRestorePackageForUserParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    username: z.string(),
  })

  const packagesRestorePackageForUserQuerySchema = z.object({
    token: z.string().optional(),
  })

  router.post(
    "packagesRestorePackageForUser",
    "/users/:username/packages/:package_type/:package_name/restore",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesRestorePackageForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          packagesRestorePackageForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesRestorePackageForUser(
          input,
          packagesRestorePackageForUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesRestorePackageForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const packagesGetAllPackageVersionsForPackageOwnedByUserParamSchema =
    z.object({
      package_type: z.enum([
        "npm",
        "maven",
        "rubygems",
        "docker",
        "nuget",
        "container",
      ]),
      package_name: z.string(),
      username: z.string(),
    })

  router.get(
    "packagesGetAllPackageVersionsForPackageOwnedByUser",
    "/users/:username/packages/:package_type/:package_name/versions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesGetAllPackageVersionsForPackageOwnedByUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesGetAllPackageVersionsForPackageOwnedByUser(
          input,
          packagesGetAllPackageVersionsForPackageOwnedByUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        packagesGetAllPackageVersionsForPackageOwnedByUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const packagesGetPackageVersionForUserParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    package_version_id: z.coerce.number(),
    username: z.string(),
  })

  router.get(
    "packagesGetPackageVersionForUser",
    "/users/:username/packages/:package_type/:package_name/versions/:package_version_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesGetPackageVersionForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesGetPackageVersionForUser(
          input,
          packagesGetPackageVersionForUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesGetPackageVersionForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const packagesDeletePackageVersionForUserParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    username: z.string(),
    package_version_id: z.coerce.number(),
  })

  router.delete(
    "packagesDeletePackageVersionForUser",
    "/users/:username/packages/:package_type/:package_name/versions/:package_version_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesDeletePackageVersionForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesDeletePackageVersionForUser(
          input,
          packagesDeletePackageVersionForUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesDeletePackageVersionForUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const packagesRestorePackageVersionForUserParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    username: z.string(),
    package_version_id: z.coerce.number(),
  })

  router.post(
    "packagesRestorePackageVersionForUser",
    "/users/:username/packages/:package_type/:package_name/versions/:package_version_id/restore",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesRestorePackageVersionForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .packagesRestorePackageVersionForUser(
          input,
          packagesRestorePackageVersionForUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesRestorePackageVersionForUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const projectsListForUserParamSchema = z.object({ username: z.string() })

  const projectsListForUserQuerySchema = z.object({
    state: z.enum(["open", "closed", "all"]).optional().default("open"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "projectsListForUser",
    "/users/:username/projects",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsListForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          projectsListForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .projectsListForUser(input, projectsListForUserResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsListForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityListReceivedEventsForUserParamSchema = z.object({
    username: z.string(),
  })

  const activityListReceivedEventsForUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "activityListReceivedEventsForUser",
    "/users/:username/received_events",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListReceivedEventsForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListReceivedEventsForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityListReceivedEventsForUser(
          input,
          activityListReceivedEventsForUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListReceivedEventsForUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const activityListReceivedPublicEventsForUserParamSchema = z.object({
    username: z.string(),
  })

  const activityListReceivedPublicEventsForUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "activityListReceivedPublicEventsForUser",
    "/users/:username/received_events/public",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListReceivedPublicEventsForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListReceivedPublicEventsForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityListReceivedPublicEventsForUser(
          input,
          activityListReceivedPublicEventsForUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListReceivedPublicEventsForUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposListForUserParamSchema = z.object({ username: z.string() })

  const reposListForUserQuerySchema = z.object({
    type: z.enum(["all", "owner", "member"]).optional().default("owner"),
    sort: z
      .enum(["created", "updated", "pushed", "full_name"])
      .optional()
      .default("full_name"),
    direction: z.enum(["asc", "desc"]).optional(),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "reposListForUser",
    "/users/:username/repos",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .reposListForUser(input, reposListForUserResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const billingGetGithubActionsBillingUserParamSchema = z.object({
    username: z.string(),
  })

  router.get(
    "billingGetGithubActionsBillingUser",
    "/users/:username/settings/billing/actions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          billingGetGithubActionsBillingUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .billingGetGithubActionsBillingUser(
          input,
          billingGetGithubActionsBillingUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = billingGetGithubActionsBillingUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const billingGetGithubPackagesBillingUserParamSchema = z.object({
    username: z.string(),
  })

  router.get(
    "billingGetGithubPackagesBillingUser",
    "/users/:username/settings/billing/packages",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          billingGetGithubPackagesBillingUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .billingGetGithubPackagesBillingUser(
          input,
          billingGetGithubPackagesBillingUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = billingGetGithubPackagesBillingUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const billingGetSharedStorageBillingUserParamSchema = z.object({
    username: z.string(),
  })

  router.get(
    "billingGetSharedStorageBillingUser",
    "/users/:username/settings/billing/shared-storage",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          billingGetSharedStorageBillingUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .billingGetSharedStorageBillingUser(
          input,
          billingGetSharedStorageBillingUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = billingGetSharedStorageBillingUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersListSocialAccountsForUserParamSchema = z.object({
    username: z.string(),
  })

  const usersListSocialAccountsForUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "usersListSocialAccountsForUser",
    "/users/:username/social_accounts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersListSocialAccountsForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          usersListSocialAccountsForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersListSocialAccountsForUser(
          input,
          usersListSocialAccountsForUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListSocialAccountsForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const usersListSshSigningKeysForUserParamSchema = z.object({
    username: z.string(),
  })

  const usersListSshSigningKeysForUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "usersListSshSigningKeysForUser",
    "/users/:username/ssh_signing_keys",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersListSshSigningKeysForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          usersListSshSigningKeysForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .usersListSshSigningKeysForUser(
          input,
          usersListSshSigningKeysForUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListSshSigningKeysForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityListReposStarredByUserParamSchema = z.object({
    username: z.string(),
  })

  const activityListReposStarredByUserQuerySchema = z.object({
    sort: z.enum(["created", "updated"]).optional().default("created"),
    direction: z.enum(["asc", "desc"]).optional().default("desc"),
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "activityListReposStarredByUser",
    "/users/:username/starred",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListReposStarredByUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListReposStarredByUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityListReposStarredByUser(
          input,
          activityListReposStarredByUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListReposStarredByUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityListReposWatchedByUserParamSchema = z.object({
    username: z.string(),
  })

  const activityListReposWatchedByUserQuerySchema = z.object({
    per_page: z.coerce.number().optional().default(30),
    page: z.coerce.number().optional().default(1),
  })

  router.get(
    "activityListReposWatchedByUser",
    "/users/:username/subscriptions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListReposWatchedByUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListReposWatchedByUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .activityListReposWatchedByUser(
          input,
          activityListReposWatchedByUserResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListReposWatchedByUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  router.get("metaGetAllVersions", "/versions", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .metaGetAllVersions(input, metaGetAllVersionsResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = metaGetAllVersionsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  router.get("metaGetZen", "/zen", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .metaGetZen(input, metaGetZenResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = metaGetZenResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  return router
}

export async function bootstrap(config: ServerConfig) {
  // GitHub v3 REST API
  return startServer(config)
}
