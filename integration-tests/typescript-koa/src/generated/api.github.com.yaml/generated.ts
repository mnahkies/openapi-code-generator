/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  EmptyObject,
  t_ActionsAddCustomLabelsToSelfHostedRunnerForOrgBodySchema,
  t_ActionsAddCustomLabelsToSelfHostedRunnerForOrgParamSchema,
  t_ActionsAddCustomLabelsToSelfHostedRunnerForRepoBodySchema,
  t_ActionsAddCustomLabelsToSelfHostedRunnerForRepoParamSchema,
  t_ActionsAddSelectedRepoToOrgSecretParamSchema,
  t_ActionsAddSelectedRepoToOrgVariableParamSchema,
  t_ActionsApproveWorkflowRunParamSchema,
  t_ActionsCancelWorkflowRunParamSchema,
  t_ActionsCreateEnvironmentVariableBodySchema,
  t_ActionsCreateEnvironmentVariableParamSchema,
  t_ActionsCreateOrUpdateEnvironmentSecretBodySchema,
  t_ActionsCreateOrUpdateEnvironmentSecretParamSchema,
  t_ActionsCreateOrUpdateOrgSecretBodySchema,
  t_ActionsCreateOrUpdateOrgSecretParamSchema,
  t_ActionsCreateOrUpdateRepoSecretBodySchema,
  t_ActionsCreateOrUpdateRepoSecretParamSchema,
  t_ActionsCreateOrgVariableBodySchema,
  t_ActionsCreateOrgVariableParamSchema,
  t_ActionsCreateRegistrationTokenForOrgParamSchema,
  t_ActionsCreateRegistrationTokenForRepoParamSchema,
  t_ActionsCreateRemoveTokenForOrgParamSchema,
  t_ActionsCreateRemoveTokenForRepoParamSchema,
  t_ActionsCreateRepoVariableBodySchema,
  t_ActionsCreateRepoVariableParamSchema,
  t_ActionsCreateWorkflowDispatchBodySchema,
  t_ActionsCreateWorkflowDispatchParamSchema,
  t_ActionsDeleteActionsCacheByIdParamSchema,
  t_ActionsDeleteActionsCacheByKeyParamSchema,
  t_ActionsDeleteActionsCacheByKeyQuerySchema,
  t_ActionsDeleteArtifactParamSchema,
  t_ActionsDeleteEnvironmentSecretParamSchema,
  t_ActionsDeleteEnvironmentVariableParamSchema,
  t_ActionsDeleteOrgSecretParamSchema,
  t_ActionsDeleteOrgVariableParamSchema,
  t_ActionsDeleteRepoSecretParamSchema,
  t_ActionsDeleteRepoVariableParamSchema,
  t_ActionsDeleteSelfHostedRunnerFromOrgParamSchema,
  t_ActionsDeleteSelfHostedRunnerFromRepoParamSchema,
  t_ActionsDeleteWorkflowRunLogsParamSchema,
  t_ActionsDeleteWorkflowRunParamSchema,
  t_ActionsDisableSelectedRepositoryGithubActionsOrganizationParamSchema,
  t_ActionsDisableWorkflowParamSchema,
  t_ActionsDownloadArtifactParamSchema,
  t_ActionsDownloadJobLogsForWorkflowRunParamSchema,
  t_ActionsDownloadWorkflowRunAttemptLogsParamSchema,
  t_ActionsDownloadWorkflowRunLogsParamSchema,
  t_ActionsEnableSelectedRepositoryGithubActionsOrganizationParamSchema,
  t_ActionsEnableWorkflowParamSchema,
  t_ActionsGenerateRunnerJitconfigForOrgBodySchema,
  t_ActionsGenerateRunnerJitconfigForOrgParamSchema,
  t_ActionsGenerateRunnerJitconfigForRepoBodySchema,
  t_ActionsGenerateRunnerJitconfigForRepoParamSchema,
  t_ActionsGetActionsCacheListParamSchema,
  t_ActionsGetActionsCacheListQuerySchema,
  t_ActionsGetActionsCacheUsageByRepoForOrgParamSchema,
  t_ActionsGetActionsCacheUsageByRepoForOrgQuerySchema,
  t_ActionsGetActionsCacheUsageForOrgParamSchema,
  t_ActionsGetActionsCacheUsageParamSchema,
  t_ActionsGetAllowedActionsOrganizationParamSchema,
  t_ActionsGetAllowedActionsRepositoryParamSchema,
  t_ActionsGetArtifactParamSchema,
  t_ActionsGetCustomOidcSubClaimForRepoParamSchema,
  t_ActionsGetEnvironmentPublicKeyParamSchema,
  t_ActionsGetEnvironmentSecretParamSchema,
  t_ActionsGetEnvironmentVariableParamSchema,
  t_ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema,
  t_ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema,
  t_ActionsGetGithubActionsPermissionsOrganizationParamSchema,
  t_ActionsGetGithubActionsPermissionsRepositoryParamSchema,
  t_ActionsGetJobForWorkflowRunParamSchema,
  t_ActionsGetOrgPublicKeyParamSchema,
  t_ActionsGetOrgSecretParamSchema,
  t_ActionsGetOrgVariableParamSchema,
  t_ActionsGetPendingDeploymentsForRunParamSchema,
  t_ActionsGetRepoPublicKeyParamSchema,
  t_ActionsGetRepoSecretParamSchema,
  t_ActionsGetRepoVariableParamSchema,
  t_ActionsGetReviewsForRunParamSchema,
  t_ActionsGetSelfHostedRunnerForOrgParamSchema,
  t_ActionsGetSelfHostedRunnerForRepoParamSchema,
  t_ActionsGetWorkflowAccessToRepositoryParamSchema,
  t_ActionsGetWorkflowParamSchema,
  t_ActionsGetWorkflowRunAttemptParamSchema,
  t_ActionsGetWorkflowRunAttemptQuerySchema,
  t_ActionsGetWorkflowRunParamSchema,
  t_ActionsGetWorkflowRunQuerySchema,
  t_ActionsGetWorkflowRunUsageParamSchema,
  t_ActionsGetWorkflowUsageParamSchema,
  t_ActionsListArtifactsForRepoParamSchema,
  t_ActionsListArtifactsForRepoQuerySchema,
  t_ActionsListEnvironmentSecretsParamSchema,
  t_ActionsListEnvironmentSecretsQuerySchema,
  t_ActionsListEnvironmentVariablesParamSchema,
  t_ActionsListEnvironmentVariablesQuerySchema,
  t_ActionsListJobsForWorkflowRunAttemptParamSchema,
  t_ActionsListJobsForWorkflowRunAttemptQuerySchema,
  t_ActionsListJobsForWorkflowRunParamSchema,
  t_ActionsListJobsForWorkflowRunQuerySchema,
  t_ActionsListLabelsForSelfHostedRunnerForOrgParamSchema,
  t_ActionsListLabelsForSelfHostedRunnerForRepoParamSchema,
  t_ActionsListOrgSecretsParamSchema,
  t_ActionsListOrgSecretsQuerySchema,
  t_ActionsListOrgVariablesParamSchema,
  t_ActionsListOrgVariablesQuerySchema,
  t_ActionsListRepoOrganizationSecretsParamSchema,
  t_ActionsListRepoOrganizationSecretsQuerySchema,
  t_ActionsListRepoOrganizationVariablesParamSchema,
  t_ActionsListRepoOrganizationVariablesQuerySchema,
  t_ActionsListRepoSecretsParamSchema,
  t_ActionsListRepoSecretsQuerySchema,
  t_ActionsListRepoVariablesParamSchema,
  t_ActionsListRepoVariablesQuerySchema,
  t_ActionsListRepoWorkflowsParamSchema,
  t_ActionsListRepoWorkflowsQuerySchema,
  t_ActionsListRunnerApplicationsForOrgParamSchema,
  t_ActionsListRunnerApplicationsForRepoParamSchema,
  t_ActionsListSelectedReposForOrgSecretParamSchema,
  t_ActionsListSelectedReposForOrgSecretQuerySchema,
  t_ActionsListSelectedReposForOrgVariableParamSchema,
  t_ActionsListSelectedReposForOrgVariableQuerySchema,
  t_ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema,
  t_ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationQuerySchema,
  t_ActionsListSelfHostedRunnersForOrgParamSchema,
  t_ActionsListSelfHostedRunnersForOrgQuerySchema,
  t_ActionsListSelfHostedRunnersForRepoParamSchema,
  t_ActionsListSelfHostedRunnersForRepoQuerySchema,
  t_ActionsListWorkflowRunArtifactsParamSchema,
  t_ActionsListWorkflowRunArtifactsQuerySchema,
  t_ActionsListWorkflowRunsForRepoParamSchema,
  t_ActionsListWorkflowRunsForRepoQuerySchema,
  t_ActionsListWorkflowRunsParamSchema,
  t_ActionsListWorkflowRunsQuerySchema,
  t_ActionsReRunJobForWorkflowRunBodySchema,
  t_ActionsReRunJobForWorkflowRunParamSchema,
  t_ActionsReRunWorkflowBodySchema,
  t_ActionsReRunWorkflowFailedJobsBodySchema,
  t_ActionsReRunWorkflowFailedJobsParamSchema,
  t_ActionsReRunWorkflowParamSchema,
  t_ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgParamSchema,
  t_ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoParamSchema,
  t_ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgParamSchema,
  t_ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoParamSchema,
  t_ActionsRemoveSelectedRepoFromOrgSecretParamSchema,
  t_ActionsRemoveSelectedRepoFromOrgVariableParamSchema,
  t_ActionsReviewCustomGatesForRunBodySchema,
  t_ActionsReviewCustomGatesForRunParamSchema,
  t_ActionsReviewPendingDeploymentsForRunBodySchema,
  t_ActionsReviewPendingDeploymentsForRunParamSchema,
  t_ActionsSetAllowedActionsOrganizationBodySchema,
  t_ActionsSetAllowedActionsOrganizationParamSchema,
  t_ActionsSetAllowedActionsRepositoryBodySchema,
  t_ActionsSetAllowedActionsRepositoryParamSchema,
  t_ActionsSetCustomLabelsForSelfHostedRunnerForOrgBodySchema,
  t_ActionsSetCustomLabelsForSelfHostedRunnerForOrgParamSchema,
  t_ActionsSetCustomLabelsForSelfHostedRunnerForRepoBodySchema,
  t_ActionsSetCustomLabelsForSelfHostedRunnerForRepoParamSchema,
  t_ActionsSetCustomOidcSubClaimForRepoBodySchema,
  t_ActionsSetCustomOidcSubClaimForRepoParamSchema,
  t_ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationBodySchema,
  t_ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema,
  t_ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryBodySchema,
  t_ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema,
  t_ActionsSetGithubActionsPermissionsOrganizationBodySchema,
  t_ActionsSetGithubActionsPermissionsOrganizationParamSchema,
  t_ActionsSetGithubActionsPermissionsRepositoryBodySchema,
  t_ActionsSetGithubActionsPermissionsRepositoryParamSchema,
  t_ActionsSetSelectedReposForOrgSecretBodySchema,
  t_ActionsSetSelectedReposForOrgSecretParamSchema,
  t_ActionsSetSelectedReposForOrgVariableBodySchema,
  t_ActionsSetSelectedReposForOrgVariableParamSchema,
  t_ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationBodySchema,
  t_ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema,
  t_ActionsSetWorkflowAccessToRepositoryBodySchema,
  t_ActionsSetWorkflowAccessToRepositoryParamSchema,
  t_ActionsUpdateEnvironmentVariableBodySchema,
  t_ActionsUpdateEnvironmentVariableParamSchema,
  t_ActionsUpdateOrgVariableBodySchema,
  t_ActionsUpdateOrgVariableParamSchema,
  t_ActionsUpdateRepoVariableBodySchema,
  t_ActionsUpdateRepoVariableParamSchema,
  t_ActivityCheckRepoIsStarredByAuthenticatedUserParamSchema,
  t_ActivityDeleteRepoSubscriptionParamSchema,
  t_ActivityDeleteThreadSubscriptionParamSchema,
  t_ActivityGetRepoSubscriptionParamSchema,
  t_ActivityGetThreadParamSchema,
  t_ActivityGetThreadSubscriptionForAuthenticatedUserParamSchema,
  t_ActivityListEventsForAuthenticatedUserParamSchema,
  t_ActivityListEventsForAuthenticatedUserQuerySchema,
  t_ActivityListNotificationsForAuthenticatedUserQuerySchema,
  t_ActivityListOrgEventsForAuthenticatedUserParamSchema,
  t_ActivityListOrgEventsForAuthenticatedUserQuerySchema,
  t_ActivityListPublicEventsForRepoNetworkParamSchema,
  t_ActivityListPublicEventsForRepoNetworkQuerySchema,
  t_ActivityListPublicEventsForUserParamSchema,
  t_ActivityListPublicEventsForUserQuerySchema,
  t_ActivityListPublicEventsQuerySchema,
  t_ActivityListPublicOrgEventsParamSchema,
  t_ActivityListPublicOrgEventsQuerySchema,
  t_ActivityListReceivedEventsForUserParamSchema,
  t_ActivityListReceivedEventsForUserQuerySchema,
  t_ActivityListReceivedPublicEventsForUserParamSchema,
  t_ActivityListReceivedPublicEventsForUserQuerySchema,
  t_ActivityListRepoEventsParamSchema,
  t_ActivityListRepoEventsQuerySchema,
  t_ActivityListRepoNotificationsForAuthenticatedUserParamSchema,
  t_ActivityListRepoNotificationsForAuthenticatedUserQuerySchema,
  t_ActivityListReposStarredByAuthenticatedUserQuerySchema,
  t_ActivityListReposStarredByUserParamSchema,
  t_ActivityListReposStarredByUserQuerySchema,
  t_ActivityListReposWatchedByUserParamSchema,
  t_ActivityListReposWatchedByUserQuerySchema,
  t_ActivityListStargazersForRepoParamSchema,
  t_ActivityListStargazersForRepoQuerySchema,
  t_ActivityListWatchedReposForAuthenticatedUserQuerySchema,
  t_ActivityListWatchersForRepoParamSchema,
  t_ActivityListWatchersForRepoQuerySchema,
  t_ActivityMarkNotificationsAsReadBodySchema,
  t_ActivityMarkRepoNotificationsAsReadBodySchema,
  t_ActivityMarkRepoNotificationsAsReadParamSchema,
  t_ActivityMarkThreadAsReadParamSchema,
  t_ActivitySetRepoSubscriptionBodySchema,
  t_ActivitySetRepoSubscriptionParamSchema,
  t_ActivitySetThreadSubscriptionBodySchema,
  t_ActivitySetThreadSubscriptionParamSchema,
  t_ActivityStarRepoForAuthenticatedUserParamSchema,
  t_ActivityUnstarRepoForAuthenticatedUserParamSchema,
  t_AppsAddRepoToInstallationForAuthenticatedUserParamSchema,
  t_AppsCheckTokenBodySchema,
  t_AppsCheckTokenParamSchema,
  t_AppsCreateFromManifestParamSchema,
  t_AppsCreateInstallationAccessTokenBodySchema,
  t_AppsCreateInstallationAccessTokenParamSchema,
  t_AppsDeleteAuthorizationBodySchema,
  t_AppsDeleteAuthorizationParamSchema,
  t_AppsDeleteInstallationParamSchema,
  t_AppsDeleteTokenBodySchema,
  t_AppsDeleteTokenParamSchema,
  t_AppsGetBySlugParamSchema,
  t_AppsGetInstallationParamSchema,
  t_AppsGetOrgInstallationParamSchema,
  t_AppsGetRepoInstallationParamSchema,
  t_AppsGetSubscriptionPlanForAccountParamSchema,
  t_AppsGetSubscriptionPlanForAccountStubbedParamSchema,
  t_AppsGetUserInstallationParamSchema,
  t_AppsGetWebhookDeliveryParamSchema,
  t_AppsListAccountsForPlanParamSchema,
  t_AppsListAccountsForPlanQuerySchema,
  t_AppsListAccountsForPlanStubbedParamSchema,
  t_AppsListAccountsForPlanStubbedQuerySchema,
  t_AppsListInstallationReposForAuthenticatedUserParamSchema,
  t_AppsListInstallationReposForAuthenticatedUserQuerySchema,
  t_AppsListInstallationRequestsForAuthenticatedAppQuerySchema,
  t_AppsListInstallationsForAuthenticatedUserQuerySchema,
  t_AppsListInstallationsQuerySchema,
  t_AppsListPlansQuerySchema,
  t_AppsListPlansStubbedQuerySchema,
  t_AppsListReposAccessibleToInstallationQuerySchema,
  t_AppsListSubscriptionsForAuthenticatedUserQuerySchema,
  t_AppsListSubscriptionsForAuthenticatedUserStubbedQuerySchema,
  t_AppsListWebhookDeliveriesQuerySchema,
  t_AppsRedeliverWebhookDeliveryParamSchema,
  t_AppsRemoveRepoFromInstallationForAuthenticatedUserParamSchema,
  t_AppsResetTokenBodySchema,
  t_AppsResetTokenParamSchema,
  t_AppsScopeTokenBodySchema,
  t_AppsScopeTokenParamSchema,
  t_AppsSuspendInstallationParamSchema,
  t_AppsUnsuspendInstallationParamSchema,
  t_AppsUpdateWebhookConfigForAppBodySchema,
  t_BillingGetGithubActionsBillingOrgParamSchema,
  t_BillingGetGithubActionsBillingUserParamSchema,
  t_BillingGetGithubPackagesBillingOrgParamSchema,
  t_BillingGetGithubPackagesBillingUserParamSchema,
  t_BillingGetSharedStorageBillingOrgParamSchema,
  t_BillingGetSharedStorageBillingUserParamSchema,
  t_ChecksCreateBodySchema,
  t_ChecksCreateParamSchema,
  t_ChecksCreateSuiteBodySchema,
  t_ChecksCreateSuiteParamSchema,
  t_ChecksGetParamSchema,
  t_ChecksGetSuiteParamSchema,
  t_ChecksListAnnotationsParamSchema,
  t_ChecksListAnnotationsQuerySchema,
  t_ChecksListForRefParamSchema,
  t_ChecksListForRefQuerySchema,
  t_ChecksListForSuiteParamSchema,
  t_ChecksListForSuiteQuerySchema,
  t_ChecksListSuitesForRefParamSchema,
  t_ChecksListSuitesForRefQuerySchema,
  t_ChecksRerequestRunParamSchema,
  t_ChecksRerequestSuiteParamSchema,
  t_ChecksSetSuitesPreferencesBodySchema,
  t_ChecksSetSuitesPreferencesParamSchema,
  t_ChecksUpdateBodySchema,
  t_ChecksUpdateParamSchema,
  t_ClassroomGetAClassroomParamSchema,
  t_ClassroomGetAnAssignmentParamSchema,
  t_ClassroomGetAssignmentGradesParamSchema,
  t_ClassroomListAcceptedAssigmentsForAnAssignmentParamSchema,
  t_ClassroomListAcceptedAssigmentsForAnAssignmentQuerySchema,
  t_ClassroomListAssignmentsForAClassroomParamSchema,
  t_ClassroomListAssignmentsForAClassroomQuerySchema,
  t_ClassroomListClassroomsQuerySchema,
  t_CodeScanningDeleteAnalysisParamSchema,
  t_CodeScanningDeleteAnalysisQuerySchema,
  t_CodeScanningGetAlertParamSchema,
  t_CodeScanningGetAnalysisParamSchema,
  t_CodeScanningGetCodeqlDatabaseParamSchema,
  t_CodeScanningGetDefaultSetupParamSchema,
  t_CodeScanningGetSarifParamSchema,
  t_CodeScanningListAlertInstancesParamSchema,
  t_CodeScanningListAlertInstancesQuerySchema,
  t_CodeScanningListAlertsForOrgParamSchema,
  t_CodeScanningListAlertsForOrgQuerySchema,
  t_CodeScanningListAlertsForRepoParamSchema,
  t_CodeScanningListAlertsForRepoQuerySchema,
  t_CodeScanningListCodeqlDatabasesParamSchema,
  t_CodeScanningListRecentAnalysesParamSchema,
  t_CodeScanningListRecentAnalysesQuerySchema,
  t_CodeScanningUpdateAlertBodySchema,
  t_CodeScanningUpdateAlertParamSchema,
  t_CodeScanningUpdateDefaultSetupBodySchema,
  t_CodeScanningUpdateDefaultSetupParamSchema,
  t_CodeScanningUploadSarifBodySchema,
  t_CodeScanningUploadSarifParamSchema,
  t_CodesOfConductGetConductCodeParamSchema,
  t_CodespacesAddRepositoryForSecretForAuthenticatedUserParamSchema,
  t_CodespacesAddSelectedRepoToOrgSecretParamSchema,
  t_CodespacesCodespaceMachinesForAuthenticatedUserParamSchema,
  t_CodespacesCreateForAuthenticatedUserBodySchema,
  t_CodespacesCreateOrUpdateOrgSecretBodySchema,
  t_CodespacesCreateOrUpdateOrgSecretParamSchema,
  t_CodespacesCreateOrUpdateRepoSecretBodySchema,
  t_CodespacesCreateOrUpdateRepoSecretParamSchema,
  t_CodespacesCreateOrUpdateSecretForAuthenticatedUserBodySchema,
  t_CodespacesCreateOrUpdateSecretForAuthenticatedUserParamSchema,
  t_CodespacesCreateWithPrForAuthenticatedUserBodySchema,
  t_CodespacesCreateWithPrForAuthenticatedUserParamSchema,
  t_CodespacesCreateWithRepoForAuthenticatedUserBodySchema,
  t_CodespacesCreateWithRepoForAuthenticatedUserParamSchema,
  t_CodespacesDeleteCodespacesAccessUsersBodySchema,
  t_CodespacesDeleteCodespacesAccessUsersParamSchema,
  t_CodespacesDeleteForAuthenticatedUserParamSchema,
  t_CodespacesDeleteFromOrganizationParamSchema,
  t_CodespacesDeleteOrgSecretParamSchema,
  t_CodespacesDeleteRepoSecretParamSchema,
  t_CodespacesDeleteSecretForAuthenticatedUserParamSchema,
  t_CodespacesExportForAuthenticatedUserParamSchema,
  t_CodespacesGetCodespacesForUserInOrgParamSchema,
  t_CodespacesGetCodespacesForUserInOrgQuerySchema,
  t_CodespacesGetExportDetailsForAuthenticatedUserParamSchema,
  t_CodespacesGetForAuthenticatedUserParamSchema,
  t_CodespacesGetOrgPublicKeyParamSchema,
  t_CodespacesGetOrgSecretParamSchema,
  t_CodespacesGetRepoPublicKeyParamSchema,
  t_CodespacesGetRepoSecretParamSchema,
  t_CodespacesGetSecretForAuthenticatedUserParamSchema,
  t_CodespacesListDevcontainersInRepositoryForAuthenticatedUserParamSchema,
  t_CodespacesListDevcontainersInRepositoryForAuthenticatedUserQuerySchema,
  t_CodespacesListForAuthenticatedUserQuerySchema,
  t_CodespacesListInOrganizationParamSchema,
  t_CodespacesListInOrganizationQuerySchema,
  t_CodespacesListInRepositoryForAuthenticatedUserParamSchema,
  t_CodespacesListInRepositoryForAuthenticatedUserQuerySchema,
  t_CodespacesListOrgSecretsParamSchema,
  t_CodespacesListOrgSecretsQuerySchema,
  t_CodespacesListRepoSecretsParamSchema,
  t_CodespacesListRepoSecretsQuerySchema,
  t_CodespacesListRepositoriesForSecretForAuthenticatedUserParamSchema,
  t_CodespacesListSecretsForAuthenticatedUserQuerySchema,
  t_CodespacesListSelectedReposForOrgSecretParamSchema,
  t_CodespacesListSelectedReposForOrgSecretQuerySchema,
  t_CodespacesPreFlightWithRepoForAuthenticatedUserParamSchema,
  t_CodespacesPreFlightWithRepoForAuthenticatedUserQuerySchema,
  t_CodespacesPublishForAuthenticatedUserBodySchema,
  t_CodespacesPublishForAuthenticatedUserParamSchema,
  t_CodespacesRemoveRepositoryForSecretForAuthenticatedUserParamSchema,
  t_CodespacesRemoveSelectedRepoFromOrgSecretParamSchema,
  t_CodespacesRepoMachinesForAuthenticatedUserParamSchema,
  t_CodespacesRepoMachinesForAuthenticatedUserQuerySchema,
  t_CodespacesSetCodespacesAccessBodySchema,
  t_CodespacesSetCodespacesAccessParamSchema,
  t_CodespacesSetCodespacesAccessUsersBodySchema,
  t_CodespacesSetCodespacesAccessUsersParamSchema,
  t_CodespacesSetRepositoriesForSecretForAuthenticatedUserBodySchema,
  t_CodespacesSetRepositoriesForSecretForAuthenticatedUserParamSchema,
  t_CodespacesSetSelectedReposForOrgSecretBodySchema,
  t_CodespacesSetSelectedReposForOrgSecretParamSchema,
  t_CodespacesStartForAuthenticatedUserParamSchema,
  t_CodespacesStopForAuthenticatedUserParamSchema,
  t_CodespacesStopInOrganizationParamSchema,
  t_CodespacesUpdateForAuthenticatedUserBodySchema,
  t_CodespacesUpdateForAuthenticatedUserParamSchema,
  t_CopilotAddCopilotForBusinessSeatsForTeamsBodySchema,
  t_CopilotAddCopilotForBusinessSeatsForTeamsParamSchema,
  t_CopilotAddCopilotForBusinessSeatsForUsersBodySchema,
  t_CopilotAddCopilotForBusinessSeatsForUsersParamSchema,
  t_CopilotCancelCopilotSeatAssignmentForTeamsBodySchema,
  t_CopilotCancelCopilotSeatAssignmentForTeamsParamSchema,
  t_CopilotCancelCopilotSeatAssignmentForUsersBodySchema,
  t_CopilotCancelCopilotSeatAssignmentForUsersParamSchema,
  t_CopilotGetCopilotOrganizationDetailsParamSchema,
  t_CopilotGetCopilotSeatAssignmentDetailsForUserParamSchema,
  t_CopilotListCopilotSeatsParamSchema,
  t_CopilotListCopilotSeatsQuerySchema,
  t_DependabotAddSelectedRepoToOrgSecretParamSchema,
  t_DependabotCreateOrUpdateOrgSecretBodySchema,
  t_DependabotCreateOrUpdateOrgSecretParamSchema,
  t_DependabotCreateOrUpdateRepoSecretBodySchema,
  t_DependabotCreateOrUpdateRepoSecretParamSchema,
  t_DependabotDeleteOrgSecretParamSchema,
  t_DependabotDeleteRepoSecretParamSchema,
  t_DependabotGetAlertParamSchema,
  t_DependabotGetOrgPublicKeyParamSchema,
  t_DependabotGetOrgSecretParamSchema,
  t_DependabotGetRepoPublicKeyParamSchema,
  t_DependabotGetRepoSecretParamSchema,
  t_DependabotListAlertsForEnterpriseParamSchema,
  t_DependabotListAlertsForEnterpriseQuerySchema,
  t_DependabotListAlertsForOrgParamSchema,
  t_DependabotListAlertsForOrgQuerySchema,
  t_DependabotListAlertsForRepoParamSchema,
  t_DependabotListAlertsForRepoQuerySchema,
  t_DependabotListOrgSecretsParamSchema,
  t_DependabotListOrgSecretsQuerySchema,
  t_DependabotListRepoSecretsParamSchema,
  t_DependabotListRepoSecretsQuerySchema,
  t_DependabotListSelectedReposForOrgSecretParamSchema,
  t_DependabotListSelectedReposForOrgSecretQuerySchema,
  t_DependabotRemoveSelectedRepoFromOrgSecretParamSchema,
  t_DependabotSetSelectedReposForOrgSecretBodySchema,
  t_DependabotSetSelectedReposForOrgSecretParamSchema,
  t_DependabotUpdateAlertBodySchema,
  t_DependabotUpdateAlertParamSchema,
  t_DependencyGraphCreateRepositorySnapshotBodySchema,
  t_DependencyGraphCreateRepositorySnapshotParamSchema,
  t_DependencyGraphDiffRangeParamSchema,
  t_DependencyGraphDiffRangeQuerySchema,
  t_DependencyGraphExportSbomParamSchema,
  t_GistsCheckIsStarredParamSchema,
  t_GistsCreateBodySchema,
  t_GistsCreateCommentBodySchema,
  t_GistsCreateCommentParamSchema,
  t_GistsDeleteCommentParamSchema,
  t_GistsDeleteParamSchema,
  t_GistsForkParamSchema,
  t_GistsGetCommentParamSchema,
  t_GistsGetParamSchema,
  t_GistsGetRevisionParamSchema,
  t_GistsListCommentsParamSchema,
  t_GistsListCommentsQuerySchema,
  t_GistsListCommitsParamSchema,
  t_GistsListCommitsQuerySchema,
  t_GistsListForUserParamSchema,
  t_GistsListForUserQuerySchema,
  t_GistsListForksParamSchema,
  t_GistsListForksQuerySchema,
  t_GistsListPublicQuerySchema,
  t_GistsListQuerySchema,
  t_GistsListStarredQuerySchema,
  t_GistsStarParamSchema,
  t_GistsUnstarParamSchema,
  t_GistsUpdateBodySchema,
  t_GistsUpdateCommentBodySchema,
  t_GistsUpdateCommentParamSchema,
  t_GistsUpdateParamSchema,
  t_GitCreateBlobBodySchema,
  t_GitCreateBlobParamSchema,
  t_GitCreateCommitBodySchema,
  t_GitCreateCommitParamSchema,
  t_GitCreateRefBodySchema,
  t_GitCreateRefParamSchema,
  t_GitCreateTagBodySchema,
  t_GitCreateTagParamSchema,
  t_GitCreateTreeBodySchema,
  t_GitCreateTreeParamSchema,
  t_GitDeleteRefParamSchema,
  t_GitGetBlobParamSchema,
  t_GitGetCommitParamSchema,
  t_GitGetRefParamSchema,
  t_GitGetTagParamSchema,
  t_GitGetTreeParamSchema,
  t_GitGetTreeQuerySchema,
  t_GitListMatchingRefsParamSchema,
  t_GitUpdateRefBodySchema,
  t_GitUpdateRefParamSchema,
  t_GitignoreGetTemplateParamSchema,
  t_InteractionsGetRestrictionsForOrgParamSchema,
  t_InteractionsGetRestrictionsForRepoParamSchema,
  t_InteractionsRemoveRestrictionsForOrgParamSchema,
  t_InteractionsRemoveRestrictionsForRepoParamSchema,
  t_InteractionsSetRestrictionsForAuthenticatedUserBodySchema,
  t_InteractionsSetRestrictionsForOrgBodySchema,
  t_InteractionsSetRestrictionsForOrgParamSchema,
  t_InteractionsSetRestrictionsForRepoBodySchema,
  t_InteractionsSetRestrictionsForRepoParamSchema,
  t_IssuesAddAssigneesBodySchema,
  t_IssuesAddAssigneesParamSchema,
  t_IssuesAddLabelsBodySchema,
  t_IssuesAddLabelsParamSchema,
  t_IssuesCheckUserCanBeAssignedParamSchema,
  t_IssuesCheckUserCanBeAssignedToIssueParamSchema,
  t_IssuesCreateBodySchema,
  t_IssuesCreateCommentBodySchema,
  t_IssuesCreateCommentParamSchema,
  t_IssuesCreateLabelBodySchema,
  t_IssuesCreateLabelParamSchema,
  t_IssuesCreateMilestoneBodySchema,
  t_IssuesCreateMilestoneParamSchema,
  t_IssuesCreateParamSchema,
  t_IssuesDeleteCommentParamSchema,
  t_IssuesDeleteLabelParamSchema,
  t_IssuesDeleteMilestoneParamSchema,
  t_IssuesGetCommentParamSchema,
  t_IssuesGetEventParamSchema,
  t_IssuesGetLabelParamSchema,
  t_IssuesGetMilestoneParamSchema,
  t_IssuesGetParamSchema,
  t_IssuesListAssigneesParamSchema,
  t_IssuesListAssigneesQuerySchema,
  t_IssuesListCommentsForRepoParamSchema,
  t_IssuesListCommentsForRepoQuerySchema,
  t_IssuesListCommentsParamSchema,
  t_IssuesListCommentsQuerySchema,
  t_IssuesListEventsForRepoParamSchema,
  t_IssuesListEventsForRepoQuerySchema,
  t_IssuesListEventsForTimelineParamSchema,
  t_IssuesListEventsForTimelineQuerySchema,
  t_IssuesListEventsParamSchema,
  t_IssuesListEventsQuerySchema,
  t_IssuesListForAuthenticatedUserQuerySchema,
  t_IssuesListForOrgParamSchema,
  t_IssuesListForOrgQuerySchema,
  t_IssuesListForRepoParamSchema,
  t_IssuesListForRepoQuerySchema,
  t_IssuesListLabelsForMilestoneParamSchema,
  t_IssuesListLabelsForMilestoneQuerySchema,
  t_IssuesListLabelsForRepoParamSchema,
  t_IssuesListLabelsForRepoQuerySchema,
  t_IssuesListLabelsOnIssueParamSchema,
  t_IssuesListLabelsOnIssueQuerySchema,
  t_IssuesListMilestonesParamSchema,
  t_IssuesListMilestonesQuerySchema,
  t_IssuesListQuerySchema,
  t_IssuesLockBodySchema,
  t_IssuesLockParamSchema,
  t_IssuesRemoveAllLabelsParamSchema,
  t_IssuesRemoveAssigneesBodySchema,
  t_IssuesRemoveAssigneesParamSchema,
  t_IssuesRemoveLabelParamSchema,
  t_IssuesSetLabelsBodySchema,
  t_IssuesSetLabelsParamSchema,
  t_IssuesUnlockParamSchema,
  t_IssuesUpdateBodySchema,
  t_IssuesUpdateCommentBodySchema,
  t_IssuesUpdateCommentParamSchema,
  t_IssuesUpdateLabelBodySchema,
  t_IssuesUpdateLabelParamSchema,
  t_IssuesUpdateMilestoneBodySchema,
  t_IssuesUpdateMilestoneParamSchema,
  t_IssuesUpdateParamSchema,
  t_LicensesGetAllCommonlyUsedQuerySchema,
  t_LicensesGetForRepoParamSchema,
  t_LicensesGetParamSchema,
  t_MarkdownRenderBodySchema,
  t_MarkdownRenderRawBodySchema,
  t_MetaGetOctocatQuerySchema,
  t_MigrationsCancelImportParamSchema,
  t_MigrationsDeleteArchiveForAuthenticatedUserParamSchema,
  t_MigrationsDeleteArchiveForOrgParamSchema,
  t_MigrationsDownloadArchiveForOrgParamSchema,
  t_MigrationsGetArchiveForAuthenticatedUserParamSchema,
  t_MigrationsGetCommitAuthorsParamSchema,
  t_MigrationsGetCommitAuthorsQuerySchema,
  t_MigrationsGetImportStatusParamSchema,
  t_MigrationsGetLargeFilesParamSchema,
  t_MigrationsGetStatusForAuthenticatedUserParamSchema,
  t_MigrationsGetStatusForAuthenticatedUserQuerySchema,
  t_MigrationsGetStatusForOrgParamSchema,
  t_MigrationsGetStatusForOrgQuerySchema,
  t_MigrationsListForAuthenticatedUserQuerySchema,
  t_MigrationsListForOrgParamSchema,
  t_MigrationsListForOrgQuerySchema,
  t_MigrationsListReposForAuthenticatedUserParamSchema,
  t_MigrationsListReposForAuthenticatedUserQuerySchema,
  t_MigrationsListReposForOrgParamSchema,
  t_MigrationsListReposForOrgQuerySchema,
  t_MigrationsMapCommitAuthorBodySchema,
  t_MigrationsMapCommitAuthorParamSchema,
  t_MigrationsSetLfsPreferenceBodySchema,
  t_MigrationsSetLfsPreferenceParamSchema,
  t_MigrationsStartForAuthenticatedUserBodySchema,
  t_MigrationsStartForOrgBodySchema,
  t_MigrationsStartForOrgParamSchema,
  t_MigrationsStartImportBodySchema,
  t_MigrationsStartImportParamSchema,
  t_MigrationsUnlockRepoForAuthenticatedUserParamSchema,
  t_MigrationsUnlockRepoForOrgParamSchema,
  t_MigrationsUpdateImportBodySchema,
  t_MigrationsUpdateImportParamSchema,
  t_OidcGetOidcCustomSubTemplateForOrgParamSchema,
  t_OidcUpdateOidcCustomSubTemplateForOrgBodySchema,
  t_OidcUpdateOidcCustomSubTemplateForOrgParamSchema,
  t_OrgsAddSecurityManagerTeamParamSchema,
  t_OrgsBlockUserParamSchema,
  t_OrgsCancelInvitationParamSchema,
  t_OrgsCheckBlockedUserParamSchema,
  t_OrgsCheckMembershipForUserParamSchema,
  t_OrgsCheckPublicMembershipForUserParamSchema,
  t_OrgsConvertMemberToOutsideCollaboratorBodySchema,
  t_OrgsConvertMemberToOutsideCollaboratorParamSchema,
  t_OrgsCreateInvitationBodySchema,
  t_OrgsCreateInvitationParamSchema,
  t_OrgsCreateWebhookBodySchema,
  t_OrgsCreateWebhookParamSchema,
  t_OrgsDeleteParamSchema,
  t_OrgsDeleteWebhookParamSchema,
  t_OrgsEnableOrDisableSecurityProductOnAllOrgReposBodySchema,
  t_OrgsEnableOrDisableSecurityProductOnAllOrgReposParamSchema,
  t_OrgsGetMembershipForAuthenticatedUserParamSchema,
  t_OrgsGetMembershipForUserParamSchema,
  t_OrgsGetParamSchema,
  t_OrgsGetWebhookConfigForOrgParamSchema,
  t_OrgsGetWebhookDeliveryParamSchema,
  t_OrgsGetWebhookParamSchema,
  t_OrgsListAppInstallationsParamSchema,
  t_OrgsListAppInstallationsQuerySchema,
  t_OrgsListBlockedUsersParamSchema,
  t_OrgsListBlockedUsersQuerySchema,
  t_OrgsListFailedInvitationsParamSchema,
  t_OrgsListFailedInvitationsQuerySchema,
  t_OrgsListForAuthenticatedUserQuerySchema,
  t_OrgsListForUserParamSchema,
  t_OrgsListForUserQuerySchema,
  t_OrgsListInvitationTeamsParamSchema,
  t_OrgsListInvitationTeamsQuerySchema,
  t_OrgsListMembersParamSchema,
  t_OrgsListMembersQuerySchema,
  t_OrgsListMembershipsForAuthenticatedUserQuerySchema,
  t_OrgsListOutsideCollaboratorsParamSchema,
  t_OrgsListOutsideCollaboratorsQuerySchema,
  t_OrgsListPatGrantRepositoriesParamSchema,
  t_OrgsListPatGrantRepositoriesQuerySchema,
  t_OrgsListPatGrantRequestRepositoriesParamSchema,
  t_OrgsListPatGrantRequestRepositoriesQuerySchema,
  t_OrgsListPatGrantRequestsParamSchema,
  t_OrgsListPatGrantRequestsQuerySchema,
  t_OrgsListPatGrantsParamSchema,
  t_OrgsListPatGrantsQuerySchema,
  t_OrgsListPendingInvitationsParamSchema,
  t_OrgsListPendingInvitationsQuerySchema,
  t_OrgsListPublicMembersParamSchema,
  t_OrgsListPublicMembersQuerySchema,
  t_OrgsListQuerySchema,
  t_OrgsListSecurityManagerTeamsParamSchema,
  t_OrgsListWebhookDeliveriesParamSchema,
  t_OrgsListWebhookDeliveriesQuerySchema,
  t_OrgsListWebhooksParamSchema,
  t_OrgsListWebhooksQuerySchema,
  t_OrgsPingWebhookParamSchema,
  t_OrgsRedeliverWebhookDeliveryParamSchema,
  t_OrgsRemoveMemberParamSchema,
  t_OrgsRemoveMembershipForUserParamSchema,
  t_OrgsRemoveOutsideCollaboratorParamSchema,
  t_OrgsRemovePublicMembershipForAuthenticatedUserParamSchema,
  t_OrgsRemoveSecurityManagerTeamParamSchema,
  t_OrgsReviewPatGrantRequestBodySchema,
  t_OrgsReviewPatGrantRequestParamSchema,
  t_OrgsReviewPatGrantRequestsInBulkBodySchema,
  t_OrgsReviewPatGrantRequestsInBulkParamSchema,
  t_OrgsSetMembershipForUserBodySchema,
  t_OrgsSetMembershipForUserParamSchema,
  t_OrgsSetPublicMembershipForAuthenticatedUserParamSchema,
  t_OrgsUnblockUserParamSchema,
  t_OrgsUpdateBodySchema,
  t_OrgsUpdateMembershipForAuthenticatedUserBodySchema,
  t_OrgsUpdateMembershipForAuthenticatedUserParamSchema,
  t_OrgsUpdateParamSchema,
  t_OrgsUpdatePatAccessBodySchema,
  t_OrgsUpdatePatAccessParamSchema,
  t_OrgsUpdatePatAccessesBodySchema,
  t_OrgsUpdatePatAccessesParamSchema,
  t_OrgsUpdateWebhookBodySchema,
  t_OrgsUpdateWebhookConfigForOrgBodySchema,
  t_OrgsUpdateWebhookConfigForOrgParamSchema,
  t_OrgsUpdateWebhookParamSchema,
  t_PackagesDeletePackageForAuthenticatedUserParamSchema,
  t_PackagesDeletePackageForOrgParamSchema,
  t_PackagesDeletePackageForUserParamSchema,
  t_PackagesDeletePackageVersionForAuthenticatedUserParamSchema,
  t_PackagesDeletePackageVersionForOrgParamSchema,
  t_PackagesDeletePackageVersionForUserParamSchema,
  t_PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParamSchema,
  t_PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQuerySchema,
  t_PackagesGetAllPackageVersionsForPackageOwnedByOrgParamSchema,
  t_PackagesGetAllPackageVersionsForPackageOwnedByOrgQuerySchema,
  t_PackagesGetAllPackageVersionsForPackageOwnedByUserParamSchema,
  t_PackagesGetPackageForAuthenticatedUserParamSchema,
  t_PackagesGetPackageForOrganizationParamSchema,
  t_PackagesGetPackageForUserParamSchema,
  t_PackagesGetPackageVersionForAuthenticatedUserParamSchema,
  t_PackagesGetPackageVersionForOrganizationParamSchema,
  t_PackagesGetPackageVersionForUserParamSchema,
  t_PackagesListDockerMigrationConflictingPackagesForOrganizationParamSchema,
  t_PackagesListDockerMigrationConflictingPackagesForUserParamSchema,
  t_PackagesListPackagesForAuthenticatedUserQuerySchema,
  t_PackagesListPackagesForOrganizationParamSchema,
  t_PackagesListPackagesForOrganizationQuerySchema,
  t_PackagesListPackagesForUserParamSchema,
  t_PackagesListPackagesForUserQuerySchema,
  t_PackagesRestorePackageForAuthenticatedUserParamSchema,
  t_PackagesRestorePackageForAuthenticatedUserQuerySchema,
  t_PackagesRestorePackageForOrgParamSchema,
  t_PackagesRestorePackageForOrgQuerySchema,
  t_PackagesRestorePackageForUserParamSchema,
  t_PackagesRestorePackageForUserQuerySchema,
  t_PackagesRestorePackageVersionForAuthenticatedUserParamSchema,
  t_PackagesRestorePackageVersionForOrgParamSchema,
  t_PackagesRestorePackageVersionForUserParamSchema,
  t_ProjectsAddCollaboratorBodySchema,
  t_ProjectsAddCollaboratorParamSchema,
  t_ProjectsCreateCardBodySchema,
  t_ProjectsCreateCardParamSchema,
  t_ProjectsCreateColumnBodySchema,
  t_ProjectsCreateColumnParamSchema,
  t_ProjectsCreateForAuthenticatedUserBodySchema,
  t_ProjectsCreateForOrgBodySchema,
  t_ProjectsCreateForOrgParamSchema,
  t_ProjectsCreateForRepoBodySchema,
  t_ProjectsCreateForRepoParamSchema,
  t_ProjectsDeleteCardParamSchema,
  t_ProjectsDeleteColumnParamSchema,
  t_ProjectsDeleteParamSchema,
  t_ProjectsGetCardParamSchema,
  t_ProjectsGetColumnParamSchema,
  t_ProjectsGetParamSchema,
  t_ProjectsGetPermissionForUserParamSchema,
  t_ProjectsListCardsParamSchema,
  t_ProjectsListCardsQuerySchema,
  t_ProjectsListCollaboratorsParamSchema,
  t_ProjectsListCollaboratorsQuerySchema,
  t_ProjectsListColumnsParamSchema,
  t_ProjectsListColumnsQuerySchema,
  t_ProjectsListForOrgParamSchema,
  t_ProjectsListForOrgQuerySchema,
  t_ProjectsListForRepoParamSchema,
  t_ProjectsListForRepoQuerySchema,
  t_ProjectsListForUserParamSchema,
  t_ProjectsListForUserQuerySchema,
  t_ProjectsMoveCardBodySchema,
  t_ProjectsMoveCardParamSchema,
  t_ProjectsMoveColumnBodySchema,
  t_ProjectsMoveColumnParamSchema,
  t_ProjectsRemoveCollaboratorParamSchema,
  t_ProjectsUpdateBodySchema,
  t_ProjectsUpdateCardBodySchema,
  t_ProjectsUpdateCardParamSchema,
  t_ProjectsUpdateColumnBodySchema,
  t_ProjectsUpdateColumnParamSchema,
  t_ProjectsUpdateParamSchema,
  t_PullsCheckIfMergedParamSchema,
  t_PullsCreateBodySchema,
  t_PullsCreateParamSchema,
  t_PullsCreateReplyForReviewCommentBodySchema,
  t_PullsCreateReplyForReviewCommentParamSchema,
  t_PullsCreateReviewBodySchema,
  t_PullsCreateReviewCommentBodySchema,
  t_PullsCreateReviewCommentParamSchema,
  t_PullsCreateReviewParamSchema,
  t_PullsDeletePendingReviewParamSchema,
  t_PullsDeleteReviewCommentParamSchema,
  t_PullsDismissReviewBodySchema,
  t_PullsDismissReviewParamSchema,
  t_PullsGetParamSchema,
  t_PullsGetReviewCommentParamSchema,
  t_PullsGetReviewParamSchema,
  t_PullsListCommentsForReviewParamSchema,
  t_PullsListCommentsForReviewQuerySchema,
  t_PullsListCommitsParamSchema,
  t_PullsListCommitsQuerySchema,
  t_PullsListFilesParamSchema,
  t_PullsListFilesQuerySchema,
  t_PullsListParamSchema,
  t_PullsListQuerySchema,
  t_PullsListRequestedReviewersParamSchema,
  t_PullsListReviewCommentsForRepoParamSchema,
  t_PullsListReviewCommentsForRepoQuerySchema,
  t_PullsListReviewCommentsParamSchema,
  t_PullsListReviewCommentsQuerySchema,
  t_PullsListReviewsParamSchema,
  t_PullsListReviewsQuerySchema,
  t_PullsMergeBodySchema,
  t_PullsMergeParamSchema,
  t_PullsRemoveRequestedReviewersBodySchema,
  t_PullsRemoveRequestedReviewersParamSchema,
  t_PullsRequestReviewersBodySchema,
  t_PullsRequestReviewersParamSchema,
  t_PullsSubmitReviewBodySchema,
  t_PullsSubmitReviewParamSchema,
  t_PullsUpdateBodySchema,
  t_PullsUpdateBranchBodySchema,
  t_PullsUpdateBranchParamSchema,
  t_PullsUpdateParamSchema,
  t_PullsUpdateReviewBodySchema,
  t_PullsUpdateReviewCommentBodySchema,
  t_PullsUpdateReviewCommentParamSchema,
  t_PullsUpdateReviewParamSchema,
  t_ReactionsCreateForCommitCommentBodySchema,
  t_ReactionsCreateForCommitCommentParamSchema,
  t_ReactionsCreateForIssueBodySchema,
  t_ReactionsCreateForIssueCommentBodySchema,
  t_ReactionsCreateForIssueCommentParamSchema,
  t_ReactionsCreateForIssueParamSchema,
  t_ReactionsCreateForPullRequestReviewCommentBodySchema,
  t_ReactionsCreateForPullRequestReviewCommentParamSchema,
  t_ReactionsCreateForReleaseBodySchema,
  t_ReactionsCreateForReleaseParamSchema,
  t_ReactionsCreateForTeamDiscussionCommentInOrgBodySchema,
  t_ReactionsCreateForTeamDiscussionCommentInOrgParamSchema,
  t_ReactionsCreateForTeamDiscussionCommentLegacyBodySchema,
  t_ReactionsCreateForTeamDiscussionCommentLegacyParamSchema,
  t_ReactionsCreateForTeamDiscussionInOrgBodySchema,
  t_ReactionsCreateForTeamDiscussionInOrgParamSchema,
  t_ReactionsCreateForTeamDiscussionLegacyBodySchema,
  t_ReactionsCreateForTeamDiscussionLegacyParamSchema,
  t_ReactionsDeleteForCommitCommentParamSchema,
  t_ReactionsDeleteForIssueCommentParamSchema,
  t_ReactionsDeleteForIssueParamSchema,
  t_ReactionsDeleteForPullRequestCommentParamSchema,
  t_ReactionsDeleteForReleaseParamSchema,
  t_ReactionsDeleteForTeamDiscussionCommentParamSchema,
  t_ReactionsDeleteForTeamDiscussionParamSchema,
  t_ReactionsListForCommitCommentParamSchema,
  t_ReactionsListForCommitCommentQuerySchema,
  t_ReactionsListForIssueCommentParamSchema,
  t_ReactionsListForIssueCommentQuerySchema,
  t_ReactionsListForIssueParamSchema,
  t_ReactionsListForIssueQuerySchema,
  t_ReactionsListForPullRequestReviewCommentParamSchema,
  t_ReactionsListForPullRequestReviewCommentQuerySchema,
  t_ReactionsListForReleaseParamSchema,
  t_ReactionsListForReleaseQuerySchema,
  t_ReactionsListForTeamDiscussionCommentInOrgParamSchema,
  t_ReactionsListForTeamDiscussionCommentInOrgQuerySchema,
  t_ReactionsListForTeamDiscussionCommentLegacyParamSchema,
  t_ReactionsListForTeamDiscussionCommentLegacyQuerySchema,
  t_ReactionsListForTeamDiscussionInOrgParamSchema,
  t_ReactionsListForTeamDiscussionInOrgQuerySchema,
  t_ReactionsListForTeamDiscussionLegacyParamSchema,
  t_ReactionsListForTeamDiscussionLegacyQuerySchema,
  t_ReposAcceptInvitationForAuthenticatedUserParamSchema,
  t_ReposAddAppAccessRestrictionsBodySchema,
  t_ReposAddAppAccessRestrictionsParamSchema,
  t_ReposAddCollaboratorBodySchema,
  t_ReposAddCollaboratorParamSchema,
  t_ReposAddStatusCheckContextsBodySchema,
  t_ReposAddStatusCheckContextsParamSchema,
  t_ReposAddTeamAccessRestrictionsBodySchema,
  t_ReposAddTeamAccessRestrictionsParamSchema,
  t_ReposAddUserAccessRestrictionsBodySchema,
  t_ReposAddUserAccessRestrictionsParamSchema,
  t_ReposCheckAutomatedSecurityFixesParamSchema,
  t_ReposCheckCollaboratorParamSchema,
  t_ReposCheckVulnerabilityAlertsParamSchema,
  t_ReposCodeownersErrorsParamSchema,
  t_ReposCodeownersErrorsQuerySchema,
  t_ReposCompareCommitsParamSchema,
  t_ReposCompareCommitsQuerySchema,
  t_ReposCreateAutolinkBodySchema,
  t_ReposCreateAutolinkParamSchema,
  t_ReposCreateCommitCommentBodySchema,
  t_ReposCreateCommitCommentParamSchema,
  t_ReposCreateCommitSignatureProtectionParamSchema,
  t_ReposCreateCommitStatusBodySchema,
  t_ReposCreateCommitStatusParamSchema,
  t_ReposCreateDeployKeyBodySchema,
  t_ReposCreateDeployKeyParamSchema,
  t_ReposCreateDeploymentBodySchema,
  t_ReposCreateDeploymentBranchPolicyBodySchema,
  t_ReposCreateDeploymentBranchPolicyParamSchema,
  t_ReposCreateDeploymentParamSchema,
  t_ReposCreateDeploymentProtectionRuleBodySchema,
  t_ReposCreateDeploymentProtectionRuleParamSchema,
  t_ReposCreateDeploymentStatusBodySchema,
  t_ReposCreateDeploymentStatusParamSchema,
  t_ReposCreateDispatchEventBodySchema,
  t_ReposCreateDispatchEventParamSchema,
  t_ReposCreateForAuthenticatedUserBodySchema,
  t_ReposCreateForkBodySchema,
  t_ReposCreateForkParamSchema,
  t_ReposCreateInOrgBodySchema,
  t_ReposCreateInOrgParamSchema,
  t_ReposCreateOrUpdateEnvironmentBodySchema,
  t_ReposCreateOrUpdateEnvironmentParamSchema,
  t_ReposCreateOrUpdateFileContentsBodySchema,
  t_ReposCreateOrUpdateFileContentsParamSchema,
  t_ReposCreateOrgRulesetBodySchema,
  t_ReposCreateOrgRulesetParamSchema,
  t_ReposCreatePagesDeploymentBodySchema,
  t_ReposCreatePagesDeploymentParamSchema,
  t_ReposCreatePagesSiteBodySchema,
  t_ReposCreatePagesSiteParamSchema,
  t_ReposCreateReleaseBodySchema,
  t_ReposCreateReleaseParamSchema,
  t_ReposCreateRepoRulesetBodySchema,
  t_ReposCreateRepoRulesetParamSchema,
  t_ReposCreateTagProtectionBodySchema,
  t_ReposCreateTagProtectionParamSchema,
  t_ReposCreateUsingTemplateBodySchema,
  t_ReposCreateUsingTemplateParamSchema,
  t_ReposCreateWebhookBodySchema,
  t_ReposCreateWebhookParamSchema,
  t_ReposDeclineInvitationForAuthenticatedUserParamSchema,
  t_ReposDeleteAccessRestrictionsParamSchema,
  t_ReposDeleteAdminBranchProtectionParamSchema,
  t_ReposDeleteAnEnvironmentParamSchema,
  t_ReposDeleteAutolinkParamSchema,
  t_ReposDeleteBranchProtectionParamSchema,
  t_ReposDeleteCommitCommentParamSchema,
  t_ReposDeleteCommitSignatureProtectionParamSchema,
  t_ReposDeleteDeployKeyParamSchema,
  t_ReposDeleteDeploymentBranchPolicyParamSchema,
  t_ReposDeleteDeploymentParamSchema,
  t_ReposDeleteFileBodySchema,
  t_ReposDeleteFileParamSchema,
  t_ReposDeleteInvitationParamSchema,
  t_ReposDeleteOrgRulesetParamSchema,
  t_ReposDeletePagesSiteParamSchema,
  t_ReposDeleteParamSchema,
  t_ReposDeletePullRequestReviewProtectionParamSchema,
  t_ReposDeleteReleaseAssetParamSchema,
  t_ReposDeleteReleaseParamSchema,
  t_ReposDeleteRepoRulesetParamSchema,
  t_ReposDeleteTagProtectionParamSchema,
  t_ReposDeleteWebhookParamSchema,
  t_ReposDisableAutomatedSecurityFixesParamSchema,
  t_ReposDisableDeploymentProtectionRuleParamSchema,
  t_ReposDisablePrivateVulnerabilityReportingParamSchema,
  t_ReposDisableVulnerabilityAlertsParamSchema,
  t_ReposDownloadTarballArchiveParamSchema,
  t_ReposDownloadZipballArchiveParamSchema,
  t_ReposEnableAutomatedSecurityFixesParamSchema,
  t_ReposEnablePrivateVulnerabilityReportingParamSchema,
  t_ReposEnableVulnerabilityAlertsParamSchema,
  t_ReposGenerateReleaseNotesBodySchema,
  t_ReposGenerateReleaseNotesParamSchema,
  t_ReposGetAccessRestrictionsParamSchema,
  t_ReposGetAdminBranchProtectionParamSchema,
  t_ReposGetAllDeploymentProtectionRulesParamSchema,
  t_ReposGetAllEnvironmentsParamSchema,
  t_ReposGetAllEnvironmentsQuerySchema,
  t_ReposGetAllStatusCheckContextsParamSchema,
  t_ReposGetAllTopicsParamSchema,
  t_ReposGetAllTopicsQuerySchema,
  t_ReposGetAppsWithAccessToProtectedBranchParamSchema,
  t_ReposGetAutolinkParamSchema,
  t_ReposGetBranchParamSchema,
  t_ReposGetBranchProtectionParamSchema,
  t_ReposGetBranchRulesParamSchema,
  t_ReposGetBranchRulesQuerySchema,
  t_ReposGetClonesParamSchema,
  t_ReposGetClonesQuerySchema,
  t_ReposGetCodeFrequencyStatsParamSchema,
  t_ReposGetCollaboratorPermissionLevelParamSchema,
  t_ReposGetCombinedStatusForRefParamSchema,
  t_ReposGetCombinedStatusForRefQuerySchema,
  t_ReposGetCommitActivityStatsParamSchema,
  t_ReposGetCommitCommentParamSchema,
  t_ReposGetCommitParamSchema,
  t_ReposGetCommitQuerySchema,
  t_ReposGetCommitSignatureProtectionParamSchema,
  t_ReposGetCommunityProfileMetricsParamSchema,
  t_ReposGetContentParamSchema,
  t_ReposGetContentQuerySchema,
  t_ReposGetContributorsStatsParamSchema,
  t_ReposGetCustomDeploymentProtectionRuleParamSchema,
  t_ReposGetDeployKeyParamSchema,
  t_ReposGetDeploymentBranchPolicyParamSchema,
  t_ReposGetDeploymentParamSchema,
  t_ReposGetDeploymentStatusParamSchema,
  t_ReposGetEnvironmentParamSchema,
  t_ReposGetLatestPagesBuildParamSchema,
  t_ReposGetLatestReleaseParamSchema,
  t_ReposGetOrgRulesetParamSchema,
  t_ReposGetOrgRulesetsParamSchema,
  t_ReposGetOrgRulesetsQuerySchema,
  t_ReposGetPagesBuildParamSchema,
  t_ReposGetPagesHealthCheckParamSchema,
  t_ReposGetPagesParamSchema,
  t_ReposGetParamSchema,
  t_ReposGetParticipationStatsParamSchema,
  t_ReposGetPullRequestReviewProtectionParamSchema,
  t_ReposGetPunchCardStatsParamSchema,
  t_ReposGetReadmeInDirectoryParamSchema,
  t_ReposGetReadmeInDirectoryQuerySchema,
  t_ReposGetReadmeParamSchema,
  t_ReposGetReadmeQuerySchema,
  t_ReposGetReleaseAssetParamSchema,
  t_ReposGetReleaseByTagParamSchema,
  t_ReposGetReleaseParamSchema,
  t_ReposGetRepoRulesetParamSchema,
  t_ReposGetRepoRulesetQuerySchema,
  t_ReposGetRepoRulesetsParamSchema,
  t_ReposGetRepoRulesetsQuerySchema,
  t_ReposGetStatusChecksProtectionParamSchema,
  t_ReposGetTeamsWithAccessToProtectedBranchParamSchema,
  t_ReposGetTopPathsParamSchema,
  t_ReposGetTopReferrersParamSchema,
  t_ReposGetUsersWithAccessToProtectedBranchParamSchema,
  t_ReposGetViewsParamSchema,
  t_ReposGetViewsQuerySchema,
  t_ReposGetWebhookConfigForRepoParamSchema,
  t_ReposGetWebhookDeliveryParamSchema,
  t_ReposGetWebhookParamSchema,
  t_ReposListActivitiesParamSchema,
  t_ReposListActivitiesQuerySchema,
  t_ReposListAutolinksParamSchema,
  t_ReposListAutolinksQuerySchema,
  t_ReposListBranchesForHeadCommitParamSchema,
  t_ReposListBranchesParamSchema,
  t_ReposListBranchesQuerySchema,
  t_ReposListCollaboratorsParamSchema,
  t_ReposListCollaboratorsQuerySchema,
  t_ReposListCommentsForCommitParamSchema,
  t_ReposListCommentsForCommitQuerySchema,
  t_ReposListCommitCommentsForRepoParamSchema,
  t_ReposListCommitCommentsForRepoQuerySchema,
  t_ReposListCommitStatusesForRefParamSchema,
  t_ReposListCommitStatusesForRefQuerySchema,
  t_ReposListCommitsParamSchema,
  t_ReposListCommitsQuerySchema,
  t_ReposListContributorsParamSchema,
  t_ReposListContributorsQuerySchema,
  t_ReposListCustomDeploymentRuleIntegrationsParamSchema,
  t_ReposListCustomDeploymentRuleIntegrationsQuerySchema,
  t_ReposListDeployKeysParamSchema,
  t_ReposListDeployKeysQuerySchema,
  t_ReposListDeploymentBranchPoliciesParamSchema,
  t_ReposListDeploymentBranchPoliciesQuerySchema,
  t_ReposListDeploymentStatusesParamSchema,
  t_ReposListDeploymentStatusesQuerySchema,
  t_ReposListDeploymentsParamSchema,
  t_ReposListDeploymentsQuerySchema,
  t_ReposListForAuthenticatedUserQuerySchema,
  t_ReposListForOrgParamSchema,
  t_ReposListForOrgQuerySchema,
  t_ReposListForUserParamSchema,
  t_ReposListForUserQuerySchema,
  t_ReposListForksParamSchema,
  t_ReposListForksQuerySchema,
  t_ReposListInvitationsForAuthenticatedUserQuerySchema,
  t_ReposListInvitationsParamSchema,
  t_ReposListInvitationsQuerySchema,
  t_ReposListLanguagesParamSchema,
  t_ReposListPagesBuildsParamSchema,
  t_ReposListPagesBuildsQuerySchema,
  t_ReposListPublicQuerySchema,
  t_ReposListPullRequestsAssociatedWithCommitParamSchema,
  t_ReposListPullRequestsAssociatedWithCommitQuerySchema,
  t_ReposListReleaseAssetsParamSchema,
  t_ReposListReleaseAssetsQuerySchema,
  t_ReposListReleasesParamSchema,
  t_ReposListReleasesQuerySchema,
  t_ReposListTagProtectionParamSchema,
  t_ReposListTagsParamSchema,
  t_ReposListTagsQuerySchema,
  t_ReposListTeamsParamSchema,
  t_ReposListTeamsQuerySchema,
  t_ReposListWebhookDeliveriesParamSchema,
  t_ReposListWebhookDeliveriesQuerySchema,
  t_ReposListWebhooksParamSchema,
  t_ReposListWebhooksQuerySchema,
  t_ReposMergeBodySchema,
  t_ReposMergeParamSchema,
  t_ReposMergeUpstreamBodySchema,
  t_ReposMergeUpstreamParamSchema,
  t_ReposPingWebhookParamSchema,
  t_ReposRedeliverWebhookDeliveryParamSchema,
  t_ReposRemoveAppAccessRestrictionsBodySchema,
  t_ReposRemoveAppAccessRestrictionsParamSchema,
  t_ReposRemoveCollaboratorParamSchema,
  t_ReposRemoveStatusCheckContextsBodySchema,
  t_ReposRemoveStatusCheckContextsParamSchema,
  t_ReposRemoveStatusCheckProtectionParamSchema,
  t_ReposRemoveTeamAccessRestrictionsBodySchema,
  t_ReposRemoveTeamAccessRestrictionsParamSchema,
  t_ReposRemoveUserAccessRestrictionsBodySchema,
  t_ReposRemoveUserAccessRestrictionsParamSchema,
  t_ReposRenameBranchBodySchema,
  t_ReposRenameBranchParamSchema,
  t_ReposReplaceAllTopicsBodySchema,
  t_ReposReplaceAllTopicsParamSchema,
  t_ReposRequestPagesBuildParamSchema,
  t_ReposSetAdminBranchProtectionParamSchema,
  t_ReposSetAppAccessRestrictionsBodySchema,
  t_ReposSetAppAccessRestrictionsParamSchema,
  t_ReposSetStatusCheckContextsBodySchema,
  t_ReposSetStatusCheckContextsParamSchema,
  t_ReposSetTeamAccessRestrictionsBodySchema,
  t_ReposSetTeamAccessRestrictionsParamSchema,
  t_ReposSetUserAccessRestrictionsBodySchema,
  t_ReposSetUserAccessRestrictionsParamSchema,
  t_ReposTestPushWebhookParamSchema,
  t_ReposTransferBodySchema,
  t_ReposTransferParamSchema,
  t_ReposUpdateBodySchema,
  t_ReposUpdateBranchProtectionBodySchema,
  t_ReposUpdateBranchProtectionParamSchema,
  t_ReposUpdateCommitCommentBodySchema,
  t_ReposUpdateCommitCommentParamSchema,
  t_ReposUpdateDeploymentBranchPolicyBodySchema,
  t_ReposUpdateDeploymentBranchPolicyParamSchema,
  t_ReposUpdateInformationAboutPagesSiteBodySchema,
  t_ReposUpdateInformationAboutPagesSiteParamSchema,
  t_ReposUpdateInvitationBodySchema,
  t_ReposUpdateInvitationParamSchema,
  t_ReposUpdateOrgRulesetBodySchema,
  t_ReposUpdateOrgRulesetParamSchema,
  t_ReposUpdateParamSchema,
  t_ReposUpdatePullRequestReviewProtectionBodySchema,
  t_ReposUpdatePullRequestReviewProtectionParamSchema,
  t_ReposUpdateReleaseAssetBodySchema,
  t_ReposUpdateReleaseAssetParamSchema,
  t_ReposUpdateReleaseBodySchema,
  t_ReposUpdateReleaseParamSchema,
  t_ReposUpdateRepoRulesetBodySchema,
  t_ReposUpdateRepoRulesetParamSchema,
  t_ReposUpdateStatusCheckProtectionBodySchema,
  t_ReposUpdateStatusCheckProtectionParamSchema,
  t_ReposUpdateWebhookBodySchema,
  t_ReposUpdateWebhookConfigForRepoBodySchema,
  t_ReposUpdateWebhookConfigForRepoParamSchema,
  t_ReposUpdateWebhookParamSchema,
  t_ReposUploadReleaseAssetBodySchema,
  t_ReposUploadReleaseAssetParamSchema,
  t_ReposUploadReleaseAssetQuerySchema,
  t_SearchCodeQuerySchema,
  t_SearchCommitsQuerySchema,
  t_SearchIssuesAndPullRequestsQuerySchema,
  t_SearchLabelsQuerySchema,
  t_SearchReposQuerySchema,
  t_SearchTopicsQuerySchema,
  t_SearchUsersQuerySchema,
  t_SecretScanningGetAlertParamSchema,
  t_SecretScanningListAlertsForEnterpriseParamSchema,
  t_SecretScanningListAlertsForEnterpriseQuerySchema,
  t_SecretScanningListAlertsForOrgParamSchema,
  t_SecretScanningListAlertsForOrgQuerySchema,
  t_SecretScanningListAlertsForRepoParamSchema,
  t_SecretScanningListAlertsForRepoQuerySchema,
  t_SecretScanningListLocationsForAlertParamSchema,
  t_SecretScanningListLocationsForAlertQuerySchema,
  t_SecretScanningUpdateAlertBodySchema,
  t_SecretScanningUpdateAlertParamSchema,
  t_SecurityAdvisoriesCreatePrivateVulnerabilityReportBodySchema,
  t_SecurityAdvisoriesCreatePrivateVulnerabilityReportParamSchema,
  t_SecurityAdvisoriesCreateRepositoryAdvisoryBodySchema,
  t_SecurityAdvisoriesCreateRepositoryAdvisoryCveRequestParamSchema,
  t_SecurityAdvisoriesCreateRepositoryAdvisoryParamSchema,
  t_SecurityAdvisoriesGetGlobalAdvisoryParamSchema,
  t_SecurityAdvisoriesGetRepositoryAdvisoryParamSchema,
  t_SecurityAdvisoriesListGlobalAdvisoriesQuerySchema,
  t_SecurityAdvisoriesListOrgRepositoryAdvisoriesParamSchema,
  t_SecurityAdvisoriesListOrgRepositoryAdvisoriesQuerySchema,
  t_SecurityAdvisoriesListRepositoryAdvisoriesParamSchema,
  t_SecurityAdvisoriesListRepositoryAdvisoriesQuerySchema,
  t_SecurityAdvisoriesUpdateRepositoryAdvisoryBodySchema,
  t_SecurityAdvisoriesUpdateRepositoryAdvisoryParamSchema,
  t_TeamsAddMemberLegacyParamSchema,
  t_TeamsAddOrUpdateMembershipForUserInOrgBodySchema,
  t_TeamsAddOrUpdateMembershipForUserInOrgParamSchema,
  t_TeamsAddOrUpdateMembershipForUserLegacyBodySchema,
  t_TeamsAddOrUpdateMembershipForUserLegacyParamSchema,
  t_TeamsAddOrUpdateProjectPermissionsInOrgBodySchema,
  t_TeamsAddOrUpdateProjectPermissionsInOrgParamSchema,
  t_TeamsAddOrUpdateProjectPermissionsLegacyBodySchema,
  t_TeamsAddOrUpdateProjectPermissionsLegacyParamSchema,
  t_TeamsAddOrUpdateRepoPermissionsInOrgBodySchema,
  t_TeamsAddOrUpdateRepoPermissionsInOrgParamSchema,
  t_TeamsAddOrUpdateRepoPermissionsLegacyBodySchema,
  t_TeamsAddOrUpdateRepoPermissionsLegacyParamSchema,
  t_TeamsCheckPermissionsForProjectInOrgParamSchema,
  t_TeamsCheckPermissionsForProjectLegacyParamSchema,
  t_TeamsCheckPermissionsForRepoInOrgParamSchema,
  t_TeamsCheckPermissionsForRepoLegacyParamSchema,
  t_TeamsCreateBodySchema,
  t_TeamsCreateDiscussionCommentInOrgBodySchema,
  t_TeamsCreateDiscussionCommentInOrgParamSchema,
  t_TeamsCreateDiscussionCommentLegacyBodySchema,
  t_TeamsCreateDiscussionCommentLegacyParamSchema,
  t_TeamsCreateDiscussionInOrgBodySchema,
  t_TeamsCreateDiscussionInOrgParamSchema,
  t_TeamsCreateDiscussionLegacyBodySchema,
  t_TeamsCreateDiscussionLegacyParamSchema,
  t_TeamsCreateParamSchema,
  t_TeamsDeleteDiscussionCommentInOrgParamSchema,
  t_TeamsDeleteDiscussionCommentLegacyParamSchema,
  t_TeamsDeleteDiscussionInOrgParamSchema,
  t_TeamsDeleteDiscussionLegacyParamSchema,
  t_TeamsDeleteInOrgParamSchema,
  t_TeamsDeleteLegacyParamSchema,
  t_TeamsGetByNameParamSchema,
  t_TeamsGetDiscussionCommentInOrgParamSchema,
  t_TeamsGetDiscussionCommentLegacyParamSchema,
  t_TeamsGetDiscussionInOrgParamSchema,
  t_TeamsGetDiscussionLegacyParamSchema,
  t_TeamsGetLegacyParamSchema,
  t_TeamsGetMemberLegacyParamSchema,
  t_TeamsGetMembershipForUserInOrgParamSchema,
  t_TeamsGetMembershipForUserLegacyParamSchema,
  t_TeamsListChildInOrgParamSchema,
  t_TeamsListChildInOrgQuerySchema,
  t_TeamsListChildLegacyParamSchema,
  t_TeamsListChildLegacyQuerySchema,
  t_TeamsListDiscussionCommentsInOrgParamSchema,
  t_TeamsListDiscussionCommentsInOrgQuerySchema,
  t_TeamsListDiscussionCommentsLegacyParamSchema,
  t_TeamsListDiscussionCommentsLegacyQuerySchema,
  t_TeamsListDiscussionsInOrgParamSchema,
  t_TeamsListDiscussionsInOrgQuerySchema,
  t_TeamsListDiscussionsLegacyParamSchema,
  t_TeamsListDiscussionsLegacyQuerySchema,
  t_TeamsListForAuthenticatedUserQuerySchema,
  t_TeamsListMembersInOrgParamSchema,
  t_TeamsListMembersInOrgQuerySchema,
  t_TeamsListMembersLegacyParamSchema,
  t_TeamsListMembersLegacyQuerySchema,
  t_TeamsListParamSchema,
  t_TeamsListPendingInvitationsInOrgParamSchema,
  t_TeamsListPendingInvitationsInOrgQuerySchema,
  t_TeamsListPendingInvitationsLegacyParamSchema,
  t_TeamsListPendingInvitationsLegacyQuerySchema,
  t_TeamsListProjectsInOrgParamSchema,
  t_TeamsListProjectsInOrgQuerySchema,
  t_TeamsListProjectsLegacyParamSchema,
  t_TeamsListProjectsLegacyQuerySchema,
  t_TeamsListQuerySchema,
  t_TeamsListReposInOrgParamSchema,
  t_TeamsListReposInOrgQuerySchema,
  t_TeamsListReposLegacyParamSchema,
  t_TeamsListReposLegacyQuerySchema,
  t_TeamsRemoveMemberLegacyParamSchema,
  t_TeamsRemoveMembershipForUserInOrgParamSchema,
  t_TeamsRemoveMembershipForUserLegacyParamSchema,
  t_TeamsRemoveProjectInOrgParamSchema,
  t_TeamsRemoveProjectLegacyParamSchema,
  t_TeamsRemoveRepoInOrgParamSchema,
  t_TeamsRemoveRepoLegacyParamSchema,
  t_TeamsUpdateDiscussionCommentInOrgBodySchema,
  t_TeamsUpdateDiscussionCommentInOrgParamSchema,
  t_TeamsUpdateDiscussionCommentLegacyBodySchema,
  t_TeamsUpdateDiscussionCommentLegacyParamSchema,
  t_TeamsUpdateDiscussionInOrgBodySchema,
  t_TeamsUpdateDiscussionInOrgParamSchema,
  t_TeamsUpdateDiscussionLegacyBodySchema,
  t_TeamsUpdateDiscussionLegacyParamSchema,
  t_TeamsUpdateInOrgBodySchema,
  t_TeamsUpdateInOrgParamSchema,
  t_TeamsUpdateLegacyBodySchema,
  t_TeamsUpdateLegacyParamSchema,
  t_UsersAddEmailForAuthenticatedUserBodySchema,
  t_UsersAddSocialAccountForAuthenticatedUserBodySchema,
  t_UsersBlockParamSchema,
  t_UsersCheckBlockedParamSchema,
  t_UsersCheckFollowingForUserParamSchema,
  t_UsersCheckPersonIsFollowedByAuthenticatedParamSchema,
  t_UsersCreateGpgKeyForAuthenticatedUserBodySchema,
  t_UsersCreatePublicSshKeyForAuthenticatedUserBodySchema,
  t_UsersCreateSshSigningKeyForAuthenticatedUserBodySchema,
  t_UsersDeleteEmailForAuthenticatedUserBodySchema,
  t_UsersDeleteGpgKeyForAuthenticatedUserParamSchema,
  t_UsersDeletePublicSshKeyForAuthenticatedUserParamSchema,
  t_UsersDeleteSocialAccountForAuthenticatedUserBodySchema,
  t_UsersDeleteSshSigningKeyForAuthenticatedUserParamSchema,
  t_UsersFollowParamSchema,
  t_UsersGetByUsernameParamSchema,
  t_UsersGetContextForUserParamSchema,
  t_UsersGetContextForUserQuerySchema,
  t_UsersGetGpgKeyForAuthenticatedUserParamSchema,
  t_UsersGetPublicSshKeyForAuthenticatedUserParamSchema,
  t_UsersGetSshSigningKeyForAuthenticatedUserParamSchema,
  t_UsersListBlockedByAuthenticatedUserQuerySchema,
  t_UsersListEmailsForAuthenticatedUserQuerySchema,
  t_UsersListFollowedByAuthenticatedUserQuerySchema,
  t_UsersListFollowersForAuthenticatedUserQuerySchema,
  t_UsersListFollowersForUserParamSchema,
  t_UsersListFollowersForUserQuerySchema,
  t_UsersListFollowingForUserParamSchema,
  t_UsersListFollowingForUserQuerySchema,
  t_UsersListGpgKeysForAuthenticatedUserQuerySchema,
  t_UsersListGpgKeysForUserParamSchema,
  t_UsersListGpgKeysForUserQuerySchema,
  t_UsersListPublicEmailsForAuthenticatedUserQuerySchema,
  t_UsersListPublicKeysForUserParamSchema,
  t_UsersListPublicKeysForUserQuerySchema,
  t_UsersListPublicSshKeysForAuthenticatedUserQuerySchema,
  t_UsersListQuerySchema,
  t_UsersListSocialAccountsForAuthenticatedUserQuerySchema,
  t_UsersListSocialAccountsForUserParamSchema,
  t_UsersListSocialAccountsForUserQuerySchema,
  t_UsersListSshSigningKeysForAuthenticatedUserQuerySchema,
  t_UsersListSshSigningKeysForUserParamSchema,
  t_UsersListSshSigningKeysForUserQuerySchema,
  t_UsersSetPrimaryEmailVisibilityForAuthenticatedUserBodySchema,
  t_UsersUnblockParamSchema,
  t_UsersUnfollowParamSchema,
  t_UsersUpdateAuthenticatedBodySchema,
  t_actions_billing_usage,
  t_actions_cache_list,
  t_actions_cache_usage_by_repository,
  t_actions_cache_usage_org_enterprise,
  t_actions_can_approve_pull_request_reviews,
  t_actions_default_workflow_permissions,
  t_actions_enabled,
  t_actions_get_default_workflow_permissions,
  t_actions_organization_permissions,
  t_actions_public_key,
  t_actions_repository_permissions,
  t_actions_secret,
  t_actions_variable,
  t_actions_workflow_access_to_repository,
  t_activity,
  t_actor,
  t_added_to_project_issue_event,
  t_alert_auto_dismissed_at,
  t_alert_created_at,
  t_alert_dismissed_at,
  t_alert_fixed_at,
  t_alert_html_url,
  t_alert_instances_url,
  t_alert_number,
  t_alert_updated_at,
  t_alert_url,
  t_allowed_actions,
  t_api_overview,
  t_app_permissions,
  t_artifact,
  t_assigned_issue_event,
  t_authentication_token,
  t_author_association,
  t_authorization,
  t_auto_merge,
  t_autolink,
  t_base_gist,
  t_basic_error,
  t_blob,
  t_branch_protection,
  t_branch_restriction_policy,
  t_branch_short,
  t_branch_with_protection,
  t_check_annotation,
  t_check_automated_security_fixes,
  t_check_run,
  t_check_suite,
  t_check_suite_preference,
  t_classroom,
  t_classroom_accepted_assignment,
  t_classroom_assignment,
  t_classroom_assignment_grade,
  t_clone_traffic,
  t_code_frequency_stat,
  t_code_of_conduct,
  t_code_of_conduct_simple,
  t_code_scanning_alert,
  t_code_scanning_alert_classification,
  t_code_scanning_alert_dismissed_comment,
  t_code_scanning_alert_dismissed_reason,
  t_code_scanning_alert_environment,
  t_code_scanning_alert_instance,
  t_code_scanning_alert_items,
  t_code_scanning_alert_location,
  t_code_scanning_alert_rule,
  t_code_scanning_alert_rule_summary,
  t_code_scanning_alert_set_state,
  t_code_scanning_alert_severity,
  t_code_scanning_alert_state,
  t_code_scanning_alert_state_query,
  t_code_scanning_analysis,
  t_code_scanning_analysis_analysis_key,
  t_code_scanning_analysis_category,
  t_code_scanning_analysis_commit_sha,
  t_code_scanning_analysis_created_at,
  t_code_scanning_analysis_deletion,
  t_code_scanning_analysis_environment,
  t_code_scanning_analysis_sarif_file,
  t_code_scanning_analysis_sarif_id,
  t_code_scanning_analysis_tool,
  t_code_scanning_analysis_tool_guid,
  t_code_scanning_analysis_tool_name,
  t_code_scanning_analysis_tool_version,
  t_code_scanning_analysis_url,
  t_code_scanning_codeql_database,
  t_code_scanning_default_setup,
  t_code_scanning_default_setup_update_response,
  t_code_scanning_organization_alert_items,
  t_code_scanning_ref,
  t_code_scanning_sarifs_receipt,
  t_code_scanning_sarifs_status,
  t_code_search_result_item,
  t_codeowners_errors,
  t_codespace,
  t_codespace_export_details,
  t_codespace_machine,
  t_codespace_with_full_repository,
  t_codespaces_org_secret,
  t_codespaces_public_key,
  t_codespaces_secret,
  t_codespaces_user_public_key,
  t_collaborator,
  t_combined_billing_usage,
  t_combined_commit_status,
  t_commit,
  t_commit_activity,
  t_commit_comment,
  t_commit_comparison,
  t_commit_search_result_item,
  t_community_profile,
  t_content_directory,
  t_content_file,
  t_content_submodule,
  t_content_symlink,
  t_content_traffic,
  t_contributor,
  t_contributor_activity,
  t_converted_note_to_issue_issue_event,
  t_copilot_organization_details,
  t_copilot_seat_breakdown,
  t_copilot_seat_details,
  t_custom_deployment_rule_app,
  t_demilestoned_issue_event,
  t_dependabot_alert,
  t_dependabot_alert_package,
  t_dependabot_alert_security_advisory,
  t_dependabot_alert_security_vulnerability,
  t_dependabot_alert_with_repository,
  t_dependabot_public_key,
  t_dependabot_secret,
  t_dependency,
  t_dependency_graph_diff,
  t_dependency_graph_spdx_sbom,
  t_deploy_key,
  t_deployment,
  t_deployment_branch_policy,
  t_deployment_branch_policy_settings,
  t_deployment_protection_rule,
  t_deployment_reviewer_type,
  t_deployment_simple,
  t_deployment_status,
  t_diff_entry,
  t_email,
  t_empty_object,
  t_enabled_repositories,
  t_enterprise,
  t_environment,
  t_environment_approvals,
  t_event,
  t_feed,
  t_file_commit,
  t_full_repository,
  t_gist_comment,
  t_gist_commit,
  t_gist_history,
  t_gist_simple,
  t_git_commit,
  t_git_ref,
  t_git_tag,
  t_git_tree,
  t_gitignore_template,
  t_global_advisory,
  t_gpg_key,
  t_hook,
  t_hook_delivery,
  t_hook_delivery_item,
  t_hook_response,
  t_hovercard,
  t_import,
  t_installation,
  t_installation_token,
  t_integration,
  t_integration_installation_request,
  t_interaction_expiry,
  t_interaction_group,
  t_interaction_limit_response,
  t_issue,
  t_issue_comment,
  t_issue_event,
  t_issue_event_dismissed_review,
  t_issue_event_for_issue,
  t_issue_event_label,
  t_issue_event_milestone,
  t_issue_event_project_card,
  t_issue_event_rename,
  t_issue_search_result_item,
  t_job,
  t_key,
  t_key_simple,
  t_label,
  t_label_search_result_item,
  t_labeled_issue_event,
  t_language,
  t_license,
  t_license_content,
  t_license_simple,
  t_link,
  t_link_with_type,
  t_locked_issue_event,
  t_manifest,
  t_marketplace_account,
  t_marketplace_listing_plan,
  t_marketplace_purchase,
  t_merged_upstream,
  t_metadata,
  t_migration,
  t_milestone,
  t_milestoned_issue_event,
  t_minimal_repository,
  t_moved_column_in_project_issue_event,
  t_nullable_alert_updated_at,
  t_nullable_code_of_conduct_simple,
  t_nullable_codespace_machine,
  t_nullable_collaborator,
  t_nullable_community_health_file,
  t_nullable_git_user,
  t_nullable_integration,
  t_nullable_issue,
  t_nullable_license_simple,
  t_nullable_milestone,
  t_nullable_minimal_repository,
  t_nullable_repository,
  t_nullable_scoped_installation,
  t_nullable_simple_commit,
  t_nullable_simple_user,
  t_nullable_team_simple,
  t_oidc_custom_sub,
  t_oidc_custom_sub_repo,
  t_org_hook,
  t_org_membership,
  t_org_ruleset_conditions,
  t_organization_actions_secret,
  t_organization_actions_variable,
  t_organization_dependabot_secret,
  t_organization_full,
  t_organization_invitation,
  t_organization_programmatic_access_grant,
  t_organization_programmatic_access_grant_request,
  t_organization_secret_scanning_alert,
  t_organization_simple,
  t_package,
  t_package_version,
  t_packages_billing_usage,
  t_page,
  t_page_build,
  t_page_build_status,
  t_page_deployment,
  t_pages_health_check,
  t_pages_https_certificate,
  t_pages_source_hash,
  t_participation_stats,
  t_pending_deployment,
  t_porter_author,
  t_porter_large_file,
  t_private_user,
  t_project,
  t_project_card,
  t_project_collaborator_permission,
  t_project_column,
  t_protected_branch,
  t_protected_branch_admin_enforced,
  t_protected_branch_pull_request_review,
  t_protected_branch_required_status_check,
  t_public_user,
  t_pull_request,
  t_pull_request_merge_result,
  t_pull_request_minimal,
  t_pull_request_review,
  t_pull_request_review_comment,
  t_pull_request_review_request,
  t_pull_request_simple,
  t_rate_limit,
  t_rate_limit_overview,
  t_reaction,
  t_reaction_rollup,
  t_referenced_workflow,
  t_referrer_traffic,
  t_release,
  t_release_asset,
  t_release_notes_content,
  t_removed_from_project_issue_event,
  t_renamed_issue_event,
  t_repo_codespaces_secret,
  t_repo_search_result_item,
  t_repository,
  t_repository_advisory,
  t_repository_advisory_credit,
  t_repository_advisory_vulnerability,
  t_repository_collaborator_permission,
  t_repository_invitation,
  t_repository_rule,
  t_repository_rule_branch_name_pattern,
  t_repository_rule_commit_author_email_pattern,
  t_repository_rule_commit_message_pattern,
  t_repository_rule_committer_email_pattern,
  t_repository_rule_creation,
  t_repository_rule_deletion,
  t_repository_rule_detailed,
  t_repository_rule_enforcement,
  t_repository_rule_non_fast_forward,
  t_repository_rule_params_status_check_configuration,
  t_repository_rule_pull_request,
  t_repository_rule_required_deployments,
  t_repository_rule_required_linear_history,
  t_repository_rule_required_signatures,
  t_repository_rule_required_status_checks,
  t_repository_rule_ruleset_info,
  t_repository_rule_tag_name_pattern,
  t_repository_rule_update,
  t_repository_ruleset,
  t_repository_ruleset_bypass_actor,
  t_repository_ruleset_conditions,
  t_repository_ruleset_conditions_repository_id_target,
  t_repository_ruleset_conditions_repository_name_target,
  t_repository_subscription,
  t_review_comment,
  t_review_custom_gates_comment_required,
  t_review_custom_gates_state_required,
  t_review_dismissed_issue_event,
  t_review_request_removed_issue_event,
  t_review_requested_issue_event,
  t_root,
  t_runner,
  t_runner_application,
  t_runner_label,
  t_scim_error,
  t_search_result_text_matches,
  t_secret_scanning_alert,
  t_secret_scanning_alert_resolution,
  t_secret_scanning_alert_resolution_comment,
  t_secret_scanning_alert_state,
  t_secret_scanning_location,
  t_secret_scanning_location_commit,
  t_secret_scanning_location_issue_body,
  t_secret_scanning_location_issue_comment,
  t_secret_scanning_location_issue_title,
  t_security_advisory_credit_types,
  t_security_advisory_ecosystems,
  t_security_and_analysis,
  t_selected_actions,
  t_selected_actions_url,
  t_short_blob,
  t_short_branch,
  t_simple_classroom,
  t_simple_classroom_assignment,
  t_simple_classroom_organization,
  t_simple_classroom_repository,
  t_simple_classroom_user,
  t_simple_commit,
  t_simple_commit_status,
  t_simple_repository,
  t_simple_user,
  t_social_account,
  t_ssh_signing_key,
  t_stargazer,
  t_starred_repository,
  t_state_change_issue_event,
  t_status,
  t_status_check_policy,
  t_tag,
  t_tag_protection,
  t_team,
  t_team_discussion,
  t_team_discussion_comment,
  t_team_full,
  t_team_membership,
  t_team_organization,
  t_team_project,
  t_team_repository,
  t_team_simple,
  t_thread,
  t_thread_subscription,
  t_timeline_assigned_issue_event,
  t_timeline_comment_event,
  t_timeline_commit_commented_event,
  t_timeline_committed_event,
  t_timeline_cross_referenced_event,
  t_timeline_issue_events,
  t_timeline_line_commented_event,
  t_timeline_reviewed_event,
  t_timeline_unassigned_issue_event,
  t_topic,
  t_topic_search_result_item,
  t_traffic,
  t_unassigned_issue_event,
  t_unlabeled_issue_event,
  t_user_marketplace_purchase,
  t_user_search_result_item,
  t_validation_error,
  t_validation_error_simple,
  t_verification,
  t_view_traffic,
  t_wait_timer,
  t_webhook_config,
  t_webhook_config_content_type,
  t_webhook_config_insecure_ssl,
  t_webhook_config_secret,
  t_webhook_config_url,
  t_workflow,
  t_workflow_run,
  t_workflow_run_usage,
  t_workflow_usage,
} from "./models"
import {
  s_actions_billing_usage,
  s_actions_cache_list,
  s_actions_cache_usage_by_repository,
  s_actions_cache_usage_org_enterprise,
  s_actions_can_approve_pull_request_reviews,
  s_actions_default_workflow_permissions,
  s_actions_enabled,
  s_actions_get_default_workflow_permissions,
  s_actions_organization_permissions,
  s_actions_public_key,
  s_actions_repository_permissions,
  s_actions_secret,
  s_actions_set_default_workflow_permissions,
  s_actions_variable,
  s_actions_workflow_access_to_repository,
  s_activity,
  s_actor,
  s_added_to_project_issue_event,
  s_alert_auto_dismissed_at,
  s_alert_created_at,
  s_alert_dismissed_at,
  s_alert_fixed_at,
  s_alert_html_url,
  s_alert_instances_url,
  s_alert_number,
  s_alert_updated_at,
  s_alert_url,
  s_allowed_actions,
  s_api_overview,
  s_app_permissions,
  s_artifact,
  s_assigned_issue_event,
  s_authentication_token,
  s_author_association,
  s_authorization,
  s_auto_merge,
  s_autolink,
  s_base_gist,
  s_basic_error,
  s_blob,
  s_branch_protection,
  s_branch_restriction_policy,
  s_branch_short,
  s_branch_with_protection,
  s_check_annotation,
  s_check_automated_security_fixes,
  s_check_run,
  s_check_suite,
  s_check_suite_preference,
  s_classroom,
  s_classroom_accepted_assignment,
  s_classroom_assignment,
  s_classroom_assignment_grade,
  s_clone_traffic,
  s_code_frequency_stat,
  s_code_of_conduct,
  s_code_of_conduct_simple,
  s_code_scanning_alert,
  s_code_scanning_alert_classification,
  s_code_scanning_alert_dismissed_comment,
  s_code_scanning_alert_dismissed_reason,
  s_code_scanning_alert_environment,
  s_code_scanning_alert_instance,
  s_code_scanning_alert_items,
  s_code_scanning_alert_location,
  s_code_scanning_alert_rule,
  s_code_scanning_alert_rule_summary,
  s_code_scanning_alert_set_state,
  s_code_scanning_alert_severity,
  s_code_scanning_alert_state,
  s_code_scanning_alert_state_query,
  s_code_scanning_analysis,
  s_code_scanning_analysis_analysis_key,
  s_code_scanning_analysis_category,
  s_code_scanning_analysis_commit_sha,
  s_code_scanning_analysis_created_at,
  s_code_scanning_analysis_deletion,
  s_code_scanning_analysis_environment,
  s_code_scanning_analysis_sarif_file,
  s_code_scanning_analysis_sarif_id,
  s_code_scanning_analysis_tool,
  s_code_scanning_analysis_tool_guid,
  s_code_scanning_analysis_tool_name,
  s_code_scanning_analysis_tool_version,
  s_code_scanning_analysis_url,
  s_code_scanning_codeql_database,
  s_code_scanning_default_setup,
  s_code_scanning_default_setup_update,
  s_code_scanning_default_setup_update_response,
  s_code_scanning_organization_alert_items,
  s_code_scanning_ref,
  s_code_scanning_sarifs_receipt,
  s_code_scanning_sarifs_status,
  s_code_search_result_item,
  s_codeowners_errors,
  s_codespace,
  s_codespace_export_details,
  s_codespace_machine,
  s_codespace_with_full_repository,
  s_codespaces_org_secret,
  s_codespaces_public_key,
  s_codespaces_secret,
  s_codespaces_user_public_key,
  s_collaborator,
  s_combined_billing_usage,
  s_combined_commit_status,
  s_commit,
  s_commit_activity,
  s_commit_comment,
  s_commit_comparison,
  s_commit_search_result_item,
  s_community_profile,
  s_content_directory,
  s_content_file,
  s_content_submodule,
  s_content_symlink,
  s_content_traffic,
  s_contributor,
  s_contributor_activity,
  s_converted_note_to_issue_issue_event,
  s_copilot_organization_details,
  s_copilot_seat_breakdown,
  s_copilot_seat_details,
  s_custom_deployment_rule_app,
  s_demilestoned_issue_event,
  s_dependabot_alert,
  s_dependabot_alert_package,
  s_dependabot_alert_security_advisory,
  s_dependabot_alert_security_vulnerability,
  s_dependabot_alert_with_repository,
  s_dependabot_public_key,
  s_dependabot_secret,
  s_dependency_graph_diff,
  s_dependency_graph_spdx_sbom,
  s_deploy_key,
  s_deployment,
  s_deployment_branch_policy,
  s_deployment_branch_policy_name_pattern,
  s_deployment_branch_policy_settings,
  s_deployment_protection_rule,
  s_deployment_reviewer_type,
  s_deployment_simple,
  s_deployment_status,
  s_diff_entry,
  s_email,
  s_empty_object,
  s_enabled_repositories,
  s_enterprise,
  s_environment,
  s_environment_approvals,
  s_event,
  s_feed,
  s_file_commit,
  s_full_repository,
  s_gist_comment,
  s_gist_commit,
  s_gist_history,
  s_gist_simple,
  s_git_commit,
  s_git_ref,
  s_git_tag,
  s_git_tree,
  s_gitignore_template,
  s_global_advisory,
  s_gpg_key,
  s_hook,
  s_hook_delivery,
  s_hook_delivery_item,
  s_hook_response,
  s_hovercard,
  s_import,
  s_installation,
  s_installation_token,
  s_integration,
  s_integration_installation_request,
  s_interaction_expiry,
  s_interaction_group,
  s_interaction_limit,
  s_interaction_limit_response,
  s_issue,
  s_issue_comment,
  s_issue_event,
  s_issue_event_dismissed_review,
  s_issue_event_for_issue,
  s_issue_event_label,
  s_issue_event_milestone,
  s_issue_event_project_card,
  s_issue_event_rename,
  s_issue_search_result_item,
  s_job,
  s_key,
  s_key_simple,
  s_label,
  s_label_search_result_item,
  s_labeled_issue_event,
  s_language,
  s_license,
  s_license_content,
  s_license_simple,
  s_link,
  s_link_with_type,
  s_locked_issue_event,
  s_marketplace_account,
  s_marketplace_listing_plan,
  s_marketplace_purchase,
  s_merged_upstream,
  s_metadata,
  s_migration,
  s_milestone,
  s_milestoned_issue_event,
  s_minimal_repository,
  s_moved_column_in_project_issue_event,
  s_nullable_alert_updated_at,
  s_nullable_code_of_conduct_simple,
  s_nullable_codespace_machine,
  s_nullable_collaborator,
  s_nullable_community_health_file,
  s_nullable_git_user,
  s_nullable_integration,
  s_nullable_issue,
  s_nullable_license_simple,
  s_nullable_milestone,
  s_nullable_minimal_repository,
  s_nullable_repository,
  s_nullable_scoped_installation,
  s_nullable_simple_commit,
  s_nullable_simple_user,
  s_nullable_team_simple,
  s_oidc_custom_sub,
  s_oidc_custom_sub_repo,
  s_org_hook,
  s_org_membership,
  s_org_ruleset_conditions,
  s_organization_actions_secret,
  s_organization_actions_variable,
  s_organization_dependabot_secret,
  s_organization_full,
  s_organization_invitation,
  s_organization_programmatic_access_grant,
  s_organization_programmatic_access_grant_request,
  s_organization_secret_scanning_alert,
  s_organization_simple,
  s_package,
  s_package_version,
  s_packages_billing_usage,
  s_page,
  s_page_build,
  s_page_build_status,
  s_page_deployment,
  s_pages_health_check,
  s_pages_https_certificate,
  s_pages_source_hash,
  s_participation_stats,
  s_pending_deployment,
  s_porter_author,
  s_porter_large_file,
  s_private_user,
  s_private_vulnerability_report_create,
  s_project,
  s_project_card,
  s_project_collaborator_permission,
  s_project_column,
  s_protected_branch,
  s_protected_branch_admin_enforced,
  s_protected_branch_pull_request_review,
  s_protected_branch_required_status_check,
  s_public_user,
  s_pull_request,
  s_pull_request_merge_result,
  s_pull_request_minimal,
  s_pull_request_review,
  s_pull_request_review_comment,
  s_pull_request_review_request,
  s_pull_request_simple,
  s_rate_limit,
  s_rate_limit_overview,
  s_reaction,
  s_reaction_rollup,
  s_referenced_workflow,
  s_referrer_traffic,
  s_release,
  s_release_asset,
  s_release_notes_content,
  s_removed_from_project_issue_event,
  s_renamed_issue_event,
  s_repo_codespaces_secret,
  s_repo_search_result_item,
  s_repository,
  s_repository_advisory,
  s_repository_advisory_create,
  s_repository_advisory_credit,
  s_repository_advisory_update,
  s_repository_advisory_vulnerability,
  s_repository_collaborator_permission,
  s_repository_invitation,
  s_repository_rule,
  s_repository_rule_branch_name_pattern,
  s_repository_rule_commit_author_email_pattern,
  s_repository_rule_commit_message_pattern,
  s_repository_rule_committer_email_pattern,
  s_repository_rule_creation,
  s_repository_rule_deletion,
  s_repository_rule_detailed,
  s_repository_rule_enforcement,
  s_repository_rule_non_fast_forward,
  s_repository_rule_params_status_check_configuration,
  s_repository_rule_pull_request,
  s_repository_rule_required_deployments,
  s_repository_rule_required_linear_history,
  s_repository_rule_required_signatures,
  s_repository_rule_required_status_checks,
  s_repository_rule_ruleset_info,
  s_repository_rule_tag_name_pattern,
  s_repository_rule_update,
  s_repository_ruleset,
  s_repository_ruleset_bypass_actor,
  s_repository_ruleset_conditions,
  s_repository_ruleset_conditions_repository_id_target,
  s_repository_ruleset_conditions_repository_name_target,
  s_repository_subscription,
  s_review_comment,
  s_review_custom_gates_comment_required,
  s_review_custom_gates_state_required,
  s_review_dismissed_issue_event,
  s_review_request_removed_issue_event,
  s_review_requested_issue_event,
  s_root,
  s_runner,
  s_runner_application,
  s_runner_label,
  s_scim_error,
  s_search_result_text_matches,
  s_secret_scanning_alert,
  s_secret_scanning_alert_resolution,
  s_secret_scanning_alert_resolution_comment,
  s_secret_scanning_alert_state,
  s_secret_scanning_location,
  s_secret_scanning_location_commit,
  s_secret_scanning_location_issue_body,
  s_secret_scanning_location_issue_comment,
  s_secret_scanning_location_issue_title,
  s_security_advisory_credit_types,
  s_security_advisory_ecosystems,
  s_security_and_analysis,
  s_selected_actions,
  s_selected_actions_url,
  s_short_blob,
  s_short_branch,
  s_simple_classroom,
  s_simple_classroom_assignment,
  s_simple_classroom_organization,
  s_simple_classroom_repository,
  s_simple_classroom_user,
  s_simple_commit,
  s_simple_commit_status,
  s_simple_repository,
  s_simple_user,
  s_snapshot,
  s_social_account,
  s_ssh_signing_key,
  s_stargazer,
  s_starred_repository,
  s_state_change_issue_event,
  s_status,
  s_status_check_policy,
  s_tag,
  s_tag_protection,
  s_team,
  s_team_discussion,
  s_team_discussion_comment,
  s_team_full,
  s_team_membership,
  s_team_organization,
  s_team_project,
  s_team_repository,
  s_team_simple,
  s_thread,
  s_thread_subscription,
  s_timeline_assigned_issue_event,
  s_timeline_comment_event,
  s_timeline_commit_commented_event,
  s_timeline_committed_event,
  s_timeline_cross_referenced_event,
  s_timeline_issue_events,
  s_timeline_line_commented_event,
  s_timeline_reviewed_event,
  s_timeline_unassigned_issue_event,
  s_topic,
  s_topic_search_result_item,
  s_traffic,
  s_unassigned_issue_event,
  s_unlabeled_issue_event,
  s_user_marketplace_purchase,
  s_user_search_result_item,
  s_validation_error,
  s_validation_error_simple,
  s_verification,
  s_view_traffic,
  s_wait_timer,
  s_webhook_config,
  s_webhook_config_content_type,
  s_webhook_config_insecure_ssl,
  s_webhook_config_secret,
  s_webhook_config_url,
  s_workflow,
  s_workflow_run,
  s_workflow_run_usage,
  s_workflow_usage,
} from "./schemas"
import KoaRouter from "@koa/router"
import {
  KoaRuntimeError,
  RequestInputType,
} from "@nahkies/typescript-koa-runtime/errors"
import {
  KoaRuntimeResponder,
  KoaRuntimeResponse,
  Response,
  ServerConfig,
  StatusCode,
  StatusCode2xx,
  StatusCode3xx,
  StatusCode4xx,
  StatusCode5xx,
  startServer,
} from "@nahkies/typescript-koa-runtime/server"
import {
  Params,
  parseRequestInput,
  responseValidationFactory,
} from "@nahkies/typescript-koa-runtime/zod"
import { Context } from "koa"
import koaBody from "koa-body"
import { z } from "zod"

//region safe-edit-region-header

//endregion safe-edit-region-header
export type MetaRootResponder = {
  with200(): KoaRuntimeResponse<t_root>
} & KoaRuntimeResponder

export type MetaRoot = (
  params: Params<void, void, void>,
  respond: MetaRootResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_root>>

export type SecurityAdvisoriesListGlobalAdvisoriesResponder = {
  with200(): KoaRuntimeResponse<t_global_advisory[]>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
  with429(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type SecurityAdvisoriesListGlobalAdvisories = (
  params: Params<
    void,
    t_SecurityAdvisoriesListGlobalAdvisoriesQuerySchema,
    void
  >,
  respond: SecurityAdvisoriesListGlobalAdvisoriesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_global_advisory[]>
  | Response<422, t_validation_error_simple>
  | Response<429, t_basic_error>
>

export type SecurityAdvisoriesGetGlobalAdvisoryResponder = {
  with200(): KoaRuntimeResponse<t_global_advisory>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type SecurityAdvisoriesGetGlobalAdvisory = (
  params: Params<t_SecurityAdvisoriesGetGlobalAdvisoryParamSchema, void, void>,
  respond: SecurityAdvisoriesGetGlobalAdvisoryResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_global_advisory>
  | Response<404, t_basic_error>
>

export type AppsGetAuthenticatedResponder = {
  with200(): KoaRuntimeResponse<t_integration>
} & KoaRuntimeResponder

export type AppsGetAuthenticated = (
  params: Params<void, void, void>,
  respond: AppsGetAuthenticatedResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_integration>>

export type AppsCreateFromManifestResponder = {
  with201(): KoaRuntimeResponse<
    t_integration &
      (
        | {
            client_id: string
            client_secret: string
            pem: string
            webhook_secret: string | null
          }
        | {
            [key: string]: unknown
          }
      )
  >
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type AppsCreateFromManifest = (
  params: Params<t_AppsCreateFromManifestParamSchema, void, void>,
  respond: AppsCreateFromManifestResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      201,
      t_integration &
        (
          | {
              client_id: string
              client_secret: string
              pem: string
              webhook_secret: string | null
            }
          | {
              [key: string]: unknown
            }
        )
    >
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type AppsGetWebhookConfigForAppResponder = {
  with200(): KoaRuntimeResponse<t_webhook_config>
} & KoaRuntimeResponder

export type AppsGetWebhookConfigForApp = (
  params: Params<void, void, void>,
  respond: AppsGetWebhookConfigForAppResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_webhook_config>>

export type AppsUpdateWebhookConfigForAppResponder = {
  with200(): KoaRuntimeResponse<t_webhook_config>
} & KoaRuntimeResponder

export type AppsUpdateWebhookConfigForApp = (
  params: Params<void, void, t_AppsUpdateWebhookConfigForAppBodySchema>,
  respond: AppsUpdateWebhookConfigForAppResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_webhook_config>>

export type AppsListWebhookDeliveriesResponder = {
  with200(): KoaRuntimeResponse<t_hook_delivery_item[]>
  with400(): KoaRuntimeResponse<t_scim_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type AppsListWebhookDeliveries = (
  params: Params<void, t_AppsListWebhookDeliveriesQuerySchema, void>,
  respond: AppsListWebhookDeliveriesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_hook_delivery_item[]>
  | Response<400, t_scim_error>
  | Response<422, t_validation_error>
>

export type AppsGetWebhookDeliveryResponder = {
  with200(): KoaRuntimeResponse<t_hook_delivery>
  with400(): KoaRuntimeResponse<t_scim_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type AppsGetWebhookDelivery = (
  params: Params<t_AppsGetWebhookDeliveryParamSchema, void, void>,
  respond: AppsGetWebhookDeliveryResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_hook_delivery>
  | Response<400, t_scim_error>
  | Response<422, t_validation_error>
>

export type AppsRedeliverWebhookDeliveryResponder = {
  with202(): KoaRuntimeResponse<EmptyObject>
  with400(): KoaRuntimeResponse<t_scim_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type AppsRedeliverWebhookDelivery = (
  params: Params<t_AppsRedeliverWebhookDeliveryParamSchema, void, void>,
  respond: AppsRedeliverWebhookDeliveryResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<202, EmptyObject>
  | Response<400, t_scim_error>
  | Response<422, t_validation_error>
>

export type AppsListInstallationRequestsForAuthenticatedAppResponder = {
  with200(): KoaRuntimeResponse<t_integration_installation_request[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type AppsListInstallationRequestsForAuthenticatedApp = (
  params: Params<
    void,
    t_AppsListInstallationRequestsForAuthenticatedAppQuerySchema,
    void
  >,
  respond: AppsListInstallationRequestsForAuthenticatedAppResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_integration_installation_request[]>
  | Response<304, void>
  | Response<401, t_basic_error>
>

export type AppsListInstallationsResponder = {
  with200(): KoaRuntimeResponse<t_installation[]>
} & KoaRuntimeResponder

export type AppsListInstallations = (
  params: Params<void, t_AppsListInstallationsQuerySchema, void>,
  respond: AppsListInstallationsResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_installation[]>>

export type AppsGetInstallationResponder = {
  with200(): KoaRuntimeResponse<t_installation>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type AppsGetInstallation = (
  params: Params<t_AppsGetInstallationParamSchema, void, void>,
  respond: AppsGetInstallationResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_installation>
  | Response<404, t_basic_error>
>

export type AppsDeleteInstallationResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type AppsDeleteInstallation = (
  params: Params<t_AppsDeleteInstallationParamSchema, void, void>,
  respond: AppsDeleteInstallationResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

export type AppsCreateInstallationAccessTokenResponder = {
  with201(): KoaRuntimeResponse<t_installation_token>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type AppsCreateInstallationAccessToken = (
  params: Params<
    t_AppsCreateInstallationAccessTokenParamSchema,
    void,
    t_AppsCreateInstallationAccessTokenBodySchema | undefined
  >,
  respond: AppsCreateInstallationAccessTokenResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_installation_token>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type AppsSuspendInstallationResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type AppsSuspendInstallation = (
  params: Params<t_AppsSuspendInstallationParamSchema, void, void>,
  respond: AppsSuspendInstallationResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

export type AppsUnsuspendInstallationResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type AppsUnsuspendInstallation = (
  params: Params<t_AppsUnsuspendInstallationParamSchema, void, void>,
  respond: AppsUnsuspendInstallationResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

export type AppsDeleteAuthorizationResponder = {
  with204(): KoaRuntimeResponse<void>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type AppsDeleteAuthorization = (
  params: Params<
    t_AppsDeleteAuthorizationParamSchema,
    void,
    t_AppsDeleteAuthorizationBodySchema
  >,
  respond: AppsDeleteAuthorizationResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<422, t_validation_error>
>

export type AppsCheckTokenResponder = {
  with200(): KoaRuntimeResponse<t_authorization>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type AppsCheckToken = (
  params: Params<t_AppsCheckTokenParamSchema, void, t_AppsCheckTokenBodySchema>,
  respond: AppsCheckTokenResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_authorization>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type AppsResetTokenResponder = {
  with200(): KoaRuntimeResponse<t_authorization>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type AppsResetToken = (
  params: Params<t_AppsResetTokenParamSchema, void, t_AppsResetTokenBodySchema>,
  respond: AppsResetTokenResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_authorization>
  | Response<422, t_validation_error>
>

export type AppsDeleteTokenResponder = {
  with204(): KoaRuntimeResponse<void>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type AppsDeleteToken = (
  params: Params<
    t_AppsDeleteTokenParamSchema,
    void,
    t_AppsDeleteTokenBodySchema
  >,
  respond: AppsDeleteTokenResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<422, t_validation_error>
>

export type AppsScopeTokenResponder = {
  with200(): KoaRuntimeResponse<t_authorization>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type AppsScopeToken = (
  params: Params<t_AppsScopeTokenParamSchema, void, t_AppsScopeTokenBodySchema>,
  respond: AppsScopeTokenResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_authorization>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type AppsGetBySlugResponder = {
  with200(): KoaRuntimeResponse<t_integration>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type AppsGetBySlug = (
  params: Params<t_AppsGetBySlugParamSchema, void, void>,
  respond: AppsGetBySlugResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_integration>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type ClassroomGetAnAssignmentResponder = {
  with200(): KoaRuntimeResponse<t_classroom_assignment>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ClassroomGetAnAssignment = (
  params: Params<t_ClassroomGetAnAssignmentParamSchema, void, void>,
  respond: ClassroomGetAnAssignmentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_classroom_assignment>
  | Response<404, t_basic_error>
>

export type ClassroomListAcceptedAssigmentsForAnAssignmentResponder = {
  with200(): KoaRuntimeResponse<t_classroom_accepted_assignment[]>
} & KoaRuntimeResponder

export type ClassroomListAcceptedAssigmentsForAnAssignment = (
  params: Params<
    t_ClassroomListAcceptedAssigmentsForAnAssignmentParamSchema,
    t_ClassroomListAcceptedAssigmentsForAnAssignmentQuerySchema,
    void
  >,
  respond: ClassroomListAcceptedAssigmentsForAnAssignmentResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_classroom_accepted_assignment[]>
>

export type ClassroomGetAssignmentGradesResponder = {
  with200(): KoaRuntimeResponse<t_classroom_assignment_grade[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ClassroomGetAssignmentGrades = (
  params: Params<t_ClassroomGetAssignmentGradesParamSchema, void, void>,
  respond: ClassroomGetAssignmentGradesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_classroom_assignment_grade[]>
  | Response<404, t_basic_error>
>

export type ClassroomListClassroomsResponder = {
  with200(): KoaRuntimeResponse<t_simple_classroom[]>
} & KoaRuntimeResponder

export type ClassroomListClassrooms = (
  params: Params<void, t_ClassroomListClassroomsQuerySchema, void>,
  respond: ClassroomListClassroomsResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_simple_classroom[]>>

export type ClassroomGetAClassroomResponder = {
  with200(): KoaRuntimeResponse<t_classroom>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ClassroomGetAClassroom = (
  params: Params<t_ClassroomGetAClassroomParamSchema, void, void>,
  respond: ClassroomGetAClassroomResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_classroom>
  | Response<404, t_basic_error>
>

export type ClassroomListAssignmentsForAClassroomResponder = {
  with200(): KoaRuntimeResponse<t_simple_classroom_assignment[]>
} & KoaRuntimeResponder

export type ClassroomListAssignmentsForAClassroom = (
  params: Params<
    t_ClassroomListAssignmentsForAClassroomParamSchema,
    t_ClassroomListAssignmentsForAClassroomQuerySchema,
    void
  >,
  respond: ClassroomListAssignmentsForAClassroomResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_simple_classroom_assignment[]>
>

export type CodesOfConductGetAllCodesOfConductResponder = {
  with200(): KoaRuntimeResponse<t_code_of_conduct[]>
  with304(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type CodesOfConductGetAllCodesOfConduct = (
  params: Params<void, void, void>,
  respond: CodesOfConductGetAllCodesOfConductResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_of_conduct[]>
  | Response<304, void>
>

export type CodesOfConductGetConductCodeResponder = {
  with200(): KoaRuntimeResponse<t_code_of_conduct>
  with304(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodesOfConductGetConductCode = (
  params: Params<t_CodesOfConductGetConductCodeParamSchema, void, void>,
  respond: CodesOfConductGetConductCodeResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_of_conduct>
  | Response<304, void>
  | Response<404, t_basic_error>
>

export type EmojisGetResponder = {
  with200(): KoaRuntimeResponse<{
    [key: string]: string
  }>
  with304(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type EmojisGet = (
  params: Params<void, void, void>,
  respond: EmojisGetResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        [key: string]: string
      }
    >
  | Response<304, void>
>

export type DependabotListAlertsForEnterpriseResponder = {
  with200(): KoaRuntimeResponse<t_dependabot_alert_with_repository[]>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type DependabotListAlertsForEnterprise = (
  params: Params<
    t_DependabotListAlertsForEnterpriseParamSchema,
    t_DependabotListAlertsForEnterpriseQuerySchema,
    void
  >,
  respond: DependabotListAlertsForEnterpriseResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_dependabot_alert_with_repository[]>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type SecretScanningListAlertsForEnterpriseResponder = {
  with200(): KoaRuntimeResponse<t_organization_secret_scanning_alert[]>
  with404(): KoaRuntimeResponse<t_basic_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type SecretScanningListAlertsForEnterprise = (
  params: Params<
    t_SecretScanningListAlertsForEnterpriseParamSchema,
    t_SecretScanningListAlertsForEnterpriseQuerySchema,
    void
  >,
  respond: SecretScanningListAlertsForEnterpriseResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_organization_secret_scanning_alert[]>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type ActivityListPublicEventsResponder = {
  with200(): KoaRuntimeResponse<t_event[]>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type ActivityListPublicEvents = (
  params: Params<void, t_ActivityListPublicEventsQuerySchema, void>,
  respond: ActivityListPublicEventsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_event[]>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type ActivityGetFeedsResponder = {
  with200(): KoaRuntimeResponse<t_feed>
} & KoaRuntimeResponder

export type ActivityGetFeeds = (
  params: Params<void, void, void>,
  respond: ActivityGetFeedsResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_feed>>

export type GistsListResponder = {
  with200(): KoaRuntimeResponse<t_base_gist[]>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type GistsList = (
  params: Params<void, t_GistsListQuerySchema, void>,
  respond: GistsListResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_base_gist[]>
  | Response<304, void>
  | Response<403, t_basic_error>
>

export type GistsCreateResponder = {
  with201(): KoaRuntimeResponse<t_gist_simple>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type GistsCreate = (
  params: Params<void, void, t_GistsCreateBodySchema>,
  respond: GistsCreateResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_gist_simple>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type GistsListPublicResponder = {
  with200(): KoaRuntimeResponse<t_base_gist[]>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type GistsListPublic = (
  params: Params<void, t_GistsListPublicQuerySchema, void>,
  respond: GistsListPublicResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_base_gist[]>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

export type GistsListStarredResponder = {
  with200(): KoaRuntimeResponse<t_base_gist[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type GistsListStarred = (
  params: Params<void, t_GistsListStarredQuerySchema, void>,
  respond: GistsListStarredResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_base_gist[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type GistsGetResponder = {
  with200(): KoaRuntimeResponse<t_gist_simple>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<{
    block?: {
      created_at?: string
      html_url?: string | null
      reason?: string
    }
    documentation_url?: string
    message?: string
  }>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type GistsGet = (
  params: Params<t_GistsGetParamSchema, void, void>,
  respond: GistsGetResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_gist_simple>
  | Response<304, void>
  | Response<
      403,
      {
        block?: {
          created_at?: string
          html_url?: string | null
          reason?: string
        }
        documentation_url?: string
        message?: string
      }
    >
  | Response<404, t_basic_error>
>

export type GistsUpdateResponder = {
  with200(): KoaRuntimeResponse<t_gist_simple>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type GistsUpdate = (
  params: Params<t_GistsUpdateParamSchema, void, t_GistsUpdateBodySchema>,
  respond: GistsUpdateResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_gist_simple>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type GistsDeleteResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type GistsDelete = (
  params: Params<t_GistsDeleteParamSchema, void, void>,
  respond: GistsDeleteResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type GistsListCommentsResponder = {
  with200(): KoaRuntimeResponse<t_gist_comment[]>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type GistsListComments = (
  params: Params<
    t_GistsListCommentsParamSchema,
    t_GistsListCommentsQuerySchema,
    void
  >,
  respond: GistsListCommentsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_gist_comment[]>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type GistsCreateCommentResponder = {
  with201(): KoaRuntimeResponse<t_gist_comment>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type GistsCreateComment = (
  params: Params<
    t_GistsCreateCommentParamSchema,
    void,
    t_GistsCreateCommentBodySchema
  >,
  respond: GistsCreateCommentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_gist_comment>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type GistsGetCommentResponder = {
  with200(): KoaRuntimeResponse<t_gist_comment>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<{
    block?: {
      created_at?: string
      html_url?: string | null
      reason?: string
    }
    documentation_url?: string
    message?: string
  }>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type GistsGetComment = (
  params: Params<t_GistsGetCommentParamSchema, void, void>,
  respond: GistsGetCommentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_gist_comment>
  | Response<304, void>
  | Response<
      403,
      {
        block?: {
          created_at?: string
          html_url?: string | null
          reason?: string
        }
        documentation_url?: string
        message?: string
      }
    >
  | Response<404, t_basic_error>
>

export type GistsUpdateCommentResponder = {
  with200(): KoaRuntimeResponse<t_gist_comment>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type GistsUpdateComment = (
  params: Params<
    t_GistsUpdateCommentParamSchema,
    void,
    t_GistsUpdateCommentBodySchema
  >,
  respond: GistsUpdateCommentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_gist_comment>
  | Response<404, t_basic_error>
>

export type GistsDeleteCommentResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type GistsDeleteComment = (
  params: Params<t_GistsDeleteCommentParamSchema, void, void>,
  respond: GistsDeleteCommentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type GistsListCommitsResponder = {
  with200(): KoaRuntimeResponse<t_gist_commit[]>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type GistsListCommits = (
  params: Params<
    t_GistsListCommitsParamSchema,
    t_GistsListCommitsQuerySchema,
    void
  >,
  respond: GistsListCommitsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_gist_commit[]>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type GistsListForksResponder = {
  with200(): KoaRuntimeResponse<t_gist_simple[]>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type GistsListForks = (
  params: Params<
    t_GistsListForksParamSchema,
    t_GistsListForksQuerySchema,
    void
  >,
  respond: GistsListForksResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_gist_simple[]>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type GistsForkResponder = {
  with201(): KoaRuntimeResponse<t_base_gist>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type GistsFork = (
  params: Params<t_GistsForkParamSchema, void, void>,
  respond: GistsForkResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_base_gist>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type GistsCheckIsStarredResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<EmptyObject>
} & KoaRuntimeResponder

export type GistsCheckIsStarred = (
  params: Params<t_GistsCheckIsStarredParamSchema, void, void>,
  respond: GistsCheckIsStarredResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, EmptyObject>
>

export type GistsStarResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type GistsStar = (
  params: Params<t_GistsStarParamSchema, void, void>,
  respond: GistsStarResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type GistsUnstarResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type GistsUnstar = (
  params: Params<t_GistsUnstarParamSchema, void, void>,
  respond: GistsUnstarResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type GistsGetRevisionResponder = {
  with200(): KoaRuntimeResponse<t_gist_simple>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type GistsGetRevision = (
  params: Params<t_GistsGetRevisionParamSchema, void, void>,
  respond: GistsGetRevisionResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_gist_simple>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type GitignoreGetAllTemplatesResponder = {
  with200(): KoaRuntimeResponse<string[]>
  with304(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type GitignoreGetAllTemplates = (
  params: Params<void, void, void>,
  respond: GitignoreGetAllTemplatesResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, string[]> | Response<304, void>
>

export type GitignoreGetTemplateResponder = {
  with200(): KoaRuntimeResponse<t_gitignore_template>
  with304(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type GitignoreGetTemplate = (
  params: Params<t_GitignoreGetTemplateParamSchema, void, void>,
  respond: GitignoreGetTemplateResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_gitignore_template>
  | Response<304, void>
>

export type AppsListReposAccessibleToInstallationResponder = {
  with200(): KoaRuntimeResponse<{
    repositories: t_repository[]
    repository_selection?: string
    total_count: number
  }>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type AppsListReposAccessibleToInstallation = (
  params: Params<
    void,
    t_AppsListReposAccessibleToInstallationQuerySchema,
    void
  >,
  respond: AppsListReposAccessibleToInstallationResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        repositories: t_repository[]
        repository_selection?: string
        total_count: number
      }
    >
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type AppsRevokeInstallationAccessTokenResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type AppsRevokeInstallationAccessToken = (
  params: Params<void, void, void>,
  respond: AppsRevokeInstallationAccessTokenResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type IssuesListResponder = {
  with200(): KoaRuntimeResponse<t_issue[]>
  with304(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type IssuesList = (
  params: Params<void, t_IssuesListQuerySchema, void>,
  respond: IssuesListResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue[]>
  | Response<304, void>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type LicensesGetAllCommonlyUsedResponder = {
  with200(): KoaRuntimeResponse<t_license_simple[]>
  with304(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type LicensesGetAllCommonlyUsed = (
  params: Params<void, t_LicensesGetAllCommonlyUsedQuerySchema, void>,
  respond: LicensesGetAllCommonlyUsedResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_license_simple[]>
  | Response<304, void>
>

export type LicensesGetResponder = {
  with200(): KoaRuntimeResponse<t_license>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type LicensesGet = (
  params: Params<t_LicensesGetParamSchema, void, void>,
  respond: LicensesGetResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_license>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type MarkdownRenderResponder = {
  with200(): KoaRuntimeResponse<string>
  with304(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type MarkdownRender = (
  params: Params<void, void, t_MarkdownRenderBodySchema>,
  respond: MarkdownRenderResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, string> | Response<304, void>
>

export type MarkdownRenderRawResponder = {
  with200(): KoaRuntimeResponse<string>
  with304(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type MarkdownRenderRaw = (
  params: Params<void, void, t_MarkdownRenderRawBodySchema | undefined>,
  respond: MarkdownRenderRawResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, string> | Response<304, void>
>

export type AppsGetSubscriptionPlanForAccountResponder = {
  with200(): KoaRuntimeResponse<t_marketplace_purchase>
  with401(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type AppsGetSubscriptionPlanForAccount = (
  params: Params<t_AppsGetSubscriptionPlanForAccountParamSchema, void, void>,
  respond: AppsGetSubscriptionPlanForAccountResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_marketplace_purchase>
  | Response<401, t_basic_error>
  | Response<404, t_basic_error>
>

export type AppsListPlansResponder = {
  with200(): KoaRuntimeResponse<t_marketplace_listing_plan[]>
  with401(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type AppsListPlans = (
  params: Params<void, t_AppsListPlansQuerySchema, void>,
  respond: AppsListPlansResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_marketplace_listing_plan[]>
  | Response<401, t_basic_error>
  | Response<404, t_basic_error>
>

export type AppsListAccountsForPlanResponder = {
  with200(): KoaRuntimeResponse<t_marketplace_purchase[]>
  with401(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type AppsListAccountsForPlan = (
  params: Params<
    t_AppsListAccountsForPlanParamSchema,
    t_AppsListAccountsForPlanQuerySchema,
    void
  >,
  respond: AppsListAccountsForPlanResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_marketplace_purchase[]>
  | Response<401, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type AppsGetSubscriptionPlanForAccountStubbedResponder = {
  with200(): KoaRuntimeResponse<t_marketplace_purchase>
  with401(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type AppsGetSubscriptionPlanForAccountStubbed = (
  params: Params<
    t_AppsGetSubscriptionPlanForAccountStubbedParamSchema,
    void,
    void
  >,
  respond: AppsGetSubscriptionPlanForAccountStubbedResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_marketplace_purchase>
  | Response<401, t_basic_error>
  | Response<404, void>
>

export type AppsListPlansStubbedResponder = {
  with200(): KoaRuntimeResponse<t_marketplace_listing_plan[]>
  with401(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type AppsListPlansStubbed = (
  params: Params<void, t_AppsListPlansStubbedQuerySchema, void>,
  respond: AppsListPlansStubbedResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_marketplace_listing_plan[]>
  | Response<401, t_basic_error>
>

export type AppsListAccountsForPlanStubbedResponder = {
  with200(): KoaRuntimeResponse<t_marketplace_purchase[]>
  with401(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type AppsListAccountsForPlanStubbed = (
  params: Params<
    t_AppsListAccountsForPlanStubbedParamSchema,
    t_AppsListAccountsForPlanStubbedQuerySchema,
    void
  >,
  respond: AppsListAccountsForPlanStubbedResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_marketplace_purchase[]>
  | Response<401, t_basic_error>
>

export type MetaGetResponder = {
  with200(): KoaRuntimeResponse<t_api_overview>
  with304(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type MetaGet = (
  params: Params<void, void, void>,
  respond: MetaGetResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_api_overview>
  | Response<304, void>
>

export type ActivityListPublicEventsForRepoNetworkResponder = {
  with200(): KoaRuntimeResponse<t_event[]>
  with301(): KoaRuntimeResponse<t_basic_error>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ActivityListPublicEventsForRepoNetwork = (
  params: Params<
    t_ActivityListPublicEventsForRepoNetworkParamSchema,
    t_ActivityListPublicEventsForRepoNetworkQuerySchema,
    void
  >,
  respond: ActivityListPublicEventsForRepoNetworkResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_event[]>
  | Response<301, t_basic_error>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type ActivityListNotificationsForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_thread[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ActivityListNotificationsForAuthenticatedUser = (
  params: Params<
    void,
    t_ActivityListNotificationsForAuthenticatedUserQuerySchema,
    void
  >,
  respond: ActivityListNotificationsForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_thread[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

export type ActivityMarkNotificationsAsReadResponder = {
  with202(): KoaRuntimeResponse<{
    message?: string
  }>
  with205(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ActivityMarkNotificationsAsRead = (
  params: Params<
    void,
    void,
    t_ActivityMarkNotificationsAsReadBodySchema | undefined
  >,
  respond: ActivityMarkNotificationsAsReadResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      202,
      {
        message?: string
      }
    >
  | Response<205, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type ActivityGetThreadResponder = {
  with200(): KoaRuntimeResponse<t_thread>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ActivityGetThread = (
  params: Params<t_ActivityGetThreadParamSchema, void, void>,
  respond: ActivityGetThreadResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_thread>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type ActivityMarkThreadAsReadResponder = {
  with205(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ActivityMarkThreadAsRead = (
  params: Params<t_ActivityMarkThreadAsReadParamSchema, void, void>,
  respond: ActivityMarkThreadAsReadResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<205, void>
  | Response<304, void>
  | Response<403, t_basic_error>
>

export type ActivityGetThreadSubscriptionForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_thread_subscription>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ActivityGetThreadSubscriptionForAuthenticatedUser = (
  params: Params<
    t_ActivityGetThreadSubscriptionForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: ActivityGetThreadSubscriptionForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_thread_subscription>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type ActivitySetThreadSubscriptionResponder = {
  with200(): KoaRuntimeResponse<t_thread_subscription>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ActivitySetThreadSubscription = (
  params: Params<
    t_ActivitySetThreadSubscriptionParamSchema,
    void,
    t_ActivitySetThreadSubscriptionBodySchema | undefined
  >,
  respond: ActivitySetThreadSubscriptionResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_thread_subscription>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type ActivityDeleteThreadSubscriptionResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ActivityDeleteThreadSubscription = (
  params: Params<t_ActivityDeleteThreadSubscriptionParamSchema, void, void>,
  respond: ActivityDeleteThreadSubscriptionResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type MetaGetOctocatResponder = {
  with200(): KoaRuntimeResponse<string>
} & KoaRuntimeResponder

export type MetaGetOctocat = (
  params: Params<void, t_MetaGetOctocatQuerySchema, void>,
  respond: MetaGetOctocatResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, string>>

export type OrgsListResponder = {
  with200(): KoaRuntimeResponse<t_organization_simple[]>
  with304(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type OrgsList = (
  params: Params<void, t_OrgsListQuerySchema, void>,
  respond: OrgsListResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_organization_simple[]>
  | Response<304, void>
>

export type OrgsGetResponder = {
  with200(): KoaRuntimeResponse<t_organization_full>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsGet = (
  params: Params<t_OrgsGetParamSchema, void, void>,
  respond: OrgsGetResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_organization_full>
  | Response<404, t_basic_error>
>

export type OrgsUpdateResponder = {
  with200(): KoaRuntimeResponse<t_organization_full>
  with409(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error | t_validation_error_simple>
} & KoaRuntimeResponder

export type OrgsUpdate = (
  params: Params<
    t_OrgsUpdateParamSchema,
    void,
    t_OrgsUpdateBodySchema | undefined
  >,
  respond: OrgsUpdateResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_organization_full>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error | t_validation_error_simple>
>

export type OrgsDeleteResponder = {
  with202(): KoaRuntimeResponse<EmptyObject>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsDelete = (
  params: Params<t_OrgsDeleteParamSchema, void, void>,
  respond: OrgsDeleteResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<202, EmptyObject>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type ActionsGetActionsCacheUsageForOrgResponder = {
  with200(): KoaRuntimeResponse<t_actions_cache_usage_org_enterprise>
} & KoaRuntimeResponder

export type ActionsGetActionsCacheUsageForOrg = (
  params: Params<t_ActionsGetActionsCacheUsageForOrgParamSchema, void, void>,
  respond: ActionsGetActionsCacheUsageForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_actions_cache_usage_org_enterprise>
>

export type ActionsGetActionsCacheUsageByRepoForOrgResponder = {
  with200(): KoaRuntimeResponse<{
    repository_cache_usages: t_actions_cache_usage_by_repository[]
    total_count: number
  }>
} & KoaRuntimeResponder

export type ActionsGetActionsCacheUsageByRepoForOrg = (
  params: Params<
    t_ActionsGetActionsCacheUsageByRepoForOrgParamSchema,
    t_ActionsGetActionsCacheUsageByRepoForOrgQuerySchema,
    void
  >,
  respond: ActionsGetActionsCacheUsageByRepoForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        repository_cache_usages: t_actions_cache_usage_by_repository[]
        total_count: number
      }
    >
>

export type OidcGetOidcCustomSubTemplateForOrgResponder = {
  with200(): KoaRuntimeResponse<t_oidc_custom_sub>
} & KoaRuntimeResponder

export type OidcGetOidcCustomSubTemplateForOrg = (
  params: Params<t_OidcGetOidcCustomSubTemplateForOrgParamSchema, void, void>,
  respond: OidcGetOidcCustomSubTemplateForOrgResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_oidc_custom_sub>>

export type OidcUpdateOidcCustomSubTemplateForOrgResponder = {
  with201(): KoaRuntimeResponse<t_empty_object>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OidcUpdateOidcCustomSubTemplateForOrg = (
  params: Params<
    t_OidcUpdateOidcCustomSubTemplateForOrgParamSchema,
    void,
    t_OidcUpdateOidcCustomSubTemplateForOrgBodySchema
  >,
  respond: OidcUpdateOidcCustomSubTemplateForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type ActionsGetGithubActionsPermissionsOrganizationResponder = {
  with200(): KoaRuntimeResponse<t_actions_organization_permissions>
} & KoaRuntimeResponder

export type ActionsGetGithubActionsPermissionsOrganization = (
  params: Params<
    t_ActionsGetGithubActionsPermissionsOrganizationParamSchema,
    void,
    void
  >,
  respond: ActionsGetGithubActionsPermissionsOrganizationResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_actions_organization_permissions>
>

export type ActionsSetGithubActionsPermissionsOrganizationResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsSetGithubActionsPermissionsOrganization = (
  params: Params<
    t_ActionsSetGithubActionsPermissionsOrganizationParamSchema,
    void,
    t_ActionsSetGithubActionsPermissionsOrganizationBodySchema
  >,
  respond: ActionsSetGithubActionsPermissionsOrganizationResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponder =
  {
    with200(): KoaRuntimeResponse<{
      repositories: t_repository[]
      total_count: number
    }>
  } & KoaRuntimeResponder

export type ActionsListSelectedRepositoriesEnabledGithubActionsOrganization = (
  params: Params<
    t_ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema,
    t_ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationQuerySchema,
    void
  >,
  respond: ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        repositories: t_repository[]
        total_count: number
      }
    >
>

export type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponder =
  {
    with204(): KoaRuntimeResponse<void>
  } & KoaRuntimeResponder

export type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization = (
  params: Params<
    t_ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema,
    void,
    t_ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationBodySchema
  >,
  respond: ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsEnableSelectedRepositoryGithubActionsOrganizationResponder =
  {
    with204(): KoaRuntimeResponse<void>
  } & KoaRuntimeResponder

export type ActionsEnableSelectedRepositoryGithubActionsOrganization = (
  params: Params<
    t_ActionsEnableSelectedRepositoryGithubActionsOrganizationParamSchema,
    void,
    void
  >,
  respond: ActionsEnableSelectedRepositoryGithubActionsOrganizationResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsDisableSelectedRepositoryGithubActionsOrganizationResponder =
  {
    with204(): KoaRuntimeResponse<void>
  } & KoaRuntimeResponder

export type ActionsDisableSelectedRepositoryGithubActionsOrganization = (
  params: Params<
    t_ActionsDisableSelectedRepositoryGithubActionsOrganizationParamSchema,
    void,
    void
  >,
  respond: ActionsDisableSelectedRepositoryGithubActionsOrganizationResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsGetAllowedActionsOrganizationResponder = {
  with200(): KoaRuntimeResponse<t_selected_actions>
} & KoaRuntimeResponder

export type ActionsGetAllowedActionsOrganization = (
  params: Params<t_ActionsGetAllowedActionsOrganizationParamSchema, void, void>,
  respond: ActionsGetAllowedActionsOrganizationResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_selected_actions>>

export type ActionsSetAllowedActionsOrganizationResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsSetAllowedActionsOrganization = (
  params: Params<
    t_ActionsSetAllowedActionsOrganizationParamSchema,
    void,
    t_ActionsSetAllowedActionsOrganizationBodySchema | undefined
  >,
  respond: ActionsSetAllowedActionsOrganizationResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationResponder =
  {
    with200(): KoaRuntimeResponse<t_actions_get_default_workflow_permissions>
  } & KoaRuntimeResponder

export type ActionsGetGithubActionsDefaultWorkflowPermissionsOrganization = (
  params: Params<
    t_ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema,
    void,
    void
  >,
  respond: ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_actions_get_default_workflow_permissions>
>

export type ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationResponder =
  {
    with204(): KoaRuntimeResponse<void>
  } & KoaRuntimeResponder

export type ActionsSetGithubActionsDefaultWorkflowPermissionsOrganization = (
  params: Params<
    t_ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema,
    void,
    | t_ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationBodySchema
    | undefined
  >,
  respond: ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsListSelfHostedRunnersForOrgResponder = {
  with200(): KoaRuntimeResponse<{
    runners: t_runner[]
    total_count: number
  }>
} & KoaRuntimeResponder

export type ActionsListSelfHostedRunnersForOrg = (
  params: Params<
    t_ActionsListSelfHostedRunnersForOrgParamSchema,
    t_ActionsListSelfHostedRunnersForOrgQuerySchema,
    void
  >,
  respond: ActionsListSelfHostedRunnersForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        runners: t_runner[]
        total_count: number
      }
    >
>

export type ActionsListRunnerApplicationsForOrgResponder = {
  with200(): KoaRuntimeResponse<t_runner_application[]>
} & KoaRuntimeResponder

export type ActionsListRunnerApplicationsForOrg = (
  params: Params<t_ActionsListRunnerApplicationsForOrgParamSchema, void, void>,
  respond: ActionsListRunnerApplicationsForOrgResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_runner_application[]>
>

export type ActionsGenerateRunnerJitconfigForOrgResponder = {
  with201(): KoaRuntimeResponse<{
    encoded_jit_config: string
    runner: t_runner
  }>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type ActionsGenerateRunnerJitconfigForOrg = (
  params: Params<
    t_ActionsGenerateRunnerJitconfigForOrgParamSchema,
    void,
    t_ActionsGenerateRunnerJitconfigForOrgBodySchema
  >,
  respond: ActionsGenerateRunnerJitconfigForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      201,
      {
        encoded_jit_config: string
        runner: t_runner
      }
    >
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type ActionsCreateRegistrationTokenForOrgResponder = {
  with201(): KoaRuntimeResponse<t_authentication_token>
} & KoaRuntimeResponder

export type ActionsCreateRegistrationTokenForOrg = (
  params: Params<t_ActionsCreateRegistrationTokenForOrgParamSchema, void, void>,
  respond: ActionsCreateRegistrationTokenForOrgResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<201, t_authentication_token>
>

export type ActionsCreateRemoveTokenForOrgResponder = {
  with201(): KoaRuntimeResponse<t_authentication_token>
} & KoaRuntimeResponder

export type ActionsCreateRemoveTokenForOrg = (
  params: Params<t_ActionsCreateRemoveTokenForOrgParamSchema, void, void>,
  respond: ActionsCreateRemoveTokenForOrgResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<201, t_authentication_token>
>

export type ActionsGetSelfHostedRunnerForOrgResponder = {
  with200(): KoaRuntimeResponse<t_runner>
} & KoaRuntimeResponder

export type ActionsGetSelfHostedRunnerForOrg = (
  params: Params<t_ActionsGetSelfHostedRunnerForOrgParamSchema, void, void>,
  respond: ActionsGetSelfHostedRunnerForOrgResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_runner>>

export type ActionsDeleteSelfHostedRunnerFromOrgResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsDeleteSelfHostedRunnerFromOrg = (
  params: Params<t_ActionsDeleteSelfHostedRunnerFromOrgParamSchema, void, void>,
  respond: ActionsDeleteSelfHostedRunnerFromOrgResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsListLabelsForSelfHostedRunnerForOrgResponder = {
  with200(): KoaRuntimeResponse<{
    labels: t_runner_label[]
    total_count: number
  }>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ActionsListLabelsForSelfHostedRunnerForOrg = (
  params: Params<
    t_ActionsListLabelsForSelfHostedRunnerForOrgParamSchema,
    void,
    void
  >,
  respond: ActionsListLabelsForSelfHostedRunnerForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        labels: t_runner_label[]
        total_count: number
      }
    >
  | Response<404, t_basic_error>
>

export type ActionsAddCustomLabelsToSelfHostedRunnerForOrgResponder = {
  with200(): KoaRuntimeResponse<{
    labels: t_runner_label[]
    total_count: number
  }>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type ActionsAddCustomLabelsToSelfHostedRunnerForOrg = (
  params: Params<
    t_ActionsAddCustomLabelsToSelfHostedRunnerForOrgParamSchema,
    void,
    t_ActionsAddCustomLabelsToSelfHostedRunnerForOrgBodySchema
  >,
  respond: ActionsAddCustomLabelsToSelfHostedRunnerForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        labels: t_runner_label[]
        total_count: number
      }
    >
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type ActionsSetCustomLabelsForSelfHostedRunnerForOrgResponder = {
  with200(): KoaRuntimeResponse<{
    labels: t_runner_label[]
    total_count: number
  }>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type ActionsSetCustomLabelsForSelfHostedRunnerForOrg = (
  params: Params<
    t_ActionsSetCustomLabelsForSelfHostedRunnerForOrgParamSchema,
    void,
    t_ActionsSetCustomLabelsForSelfHostedRunnerForOrgBodySchema
  >,
  respond: ActionsSetCustomLabelsForSelfHostedRunnerForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        labels: t_runner_label[]
        total_count: number
      }
    >
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgResponder = {
  with200(): KoaRuntimeResponse<{
    labels: t_runner_label[]
    total_count: number
  }>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg = (
  params: Params<
    t_ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgParamSchema,
    void,
    void
  >,
  respond: ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        labels: t_runner_label[]
        total_count: number
      }
    >
  | Response<404, t_basic_error>
>

export type ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgResponder = {
  with200(): KoaRuntimeResponse<{
    labels: t_runner_label[]
    total_count: number
  }>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type ActionsRemoveCustomLabelFromSelfHostedRunnerForOrg = (
  params: Params<
    t_ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgParamSchema,
    void,
    void
  >,
  respond: ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        labels: t_runner_label[]
        total_count: number
      }
    >
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type ActionsListOrgSecretsResponder = {
  with200(): KoaRuntimeResponse<{
    secrets: t_organization_actions_secret[]
    total_count: number
  }>
} & KoaRuntimeResponder

export type ActionsListOrgSecrets = (
  params: Params<
    t_ActionsListOrgSecretsParamSchema,
    t_ActionsListOrgSecretsQuerySchema,
    void
  >,
  respond: ActionsListOrgSecretsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        secrets: t_organization_actions_secret[]
        total_count: number
      }
    >
>

export type ActionsGetOrgPublicKeyResponder = {
  with200(): KoaRuntimeResponse<t_actions_public_key>
} & KoaRuntimeResponder

export type ActionsGetOrgPublicKey = (
  params: Params<t_ActionsGetOrgPublicKeyParamSchema, void, void>,
  respond: ActionsGetOrgPublicKeyResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_actions_public_key>>

export type ActionsGetOrgSecretResponder = {
  with200(): KoaRuntimeResponse<t_organization_actions_secret>
} & KoaRuntimeResponder

export type ActionsGetOrgSecret = (
  params: Params<t_ActionsGetOrgSecretParamSchema, void, void>,
  respond: ActionsGetOrgSecretResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_organization_actions_secret>
>

export type ActionsCreateOrUpdateOrgSecretResponder = {
  with201(): KoaRuntimeResponse<t_empty_object>
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsCreateOrUpdateOrgSecret = (
  params: Params<
    t_ActionsCreateOrUpdateOrgSecretParamSchema,
    void,
    t_ActionsCreateOrUpdateOrgSecretBodySchema
  >,
  respond: ActionsCreateOrUpdateOrgSecretResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<204, void>
>

export type ActionsDeleteOrgSecretResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsDeleteOrgSecret = (
  params: Params<t_ActionsDeleteOrgSecretParamSchema, void, void>,
  respond: ActionsDeleteOrgSecretResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsListSelectedReposForOrgSecretResponder = {
  with200(): KoaRuntimeResponse<{
    repositories: t_minimal_repository[]
    total_count: number
  }>
} & KoaRuntimeResponder

export type ActionsListSelectedReposForOrgSecret = (
  params: Params<
    t_ActionsListSelectedReposForOrgSecretParamSchema,
    t_ActionsListSelectedReposForOrgSecretQuerySchema,
    void
  >,
  respond: ActionsListSelectedReposForOrgSecretResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        repositories: t_minimal_repository[]
        total_count: number
      }
    >
>

export type ActionsSetSelectedReposForOrgSecretResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsSetSelectedReposForOrgSecret = (
  params: Params<
    t_ActionsSetSelectedReposForOrgSecretParamSchema,
    void,
    t_ActionsSetSelectedReposForOrgSecretBodySchema
  >,
  respond: ActionsSetSelectedReposForOrgSecretResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsAddSelectedRepoToOrgSecretResponder = {
  with204(): KoaRuntimeResponse<void>
  with409(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsAddSelectedRepoToOrgSecret = (
  params: Params<t_ActionsAddSelectedRepoToOrgSecretParamSchema, void, void>,
  respond: ActionsAddSelectedRepoToOrgSecretResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<409, void>
>

export type ActionsRemoveSelectedRepoFromOrgSecretResponder = {
  with204(): KoaRuntimeResponse<void>
  with409(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsRemoveSelectedRepoFromOrgSecret = (
  params: Params<
    t_ActionsRemoveSelectedRepoFromOrgSecretParamSchema,
    void,
    void
  >,
  respond: ActionsRemoveSelectedRepoFromOrgSecretResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<409, void>
>

export type ActionsListOrgVariablesResponder = {
  with200(): KoaRuntimeResponse<{
    total_count: number
    variables: t_organization_actions_variable[]
  }>
} & KoaRuntimeResponder

export type ActionsListOrgVariables = (
  params: Params<
    t_ActionsListOrgVariablesParamSchema,
    t_ActionsListOrgVariablesQuerySchema,
    void
  >,
  respond: ActionsListOrgVariablesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        total_count: number
        variables: t_organization_actions_variable[]
      }
    >
>

export type ActionsCreateOrgVariableResponder = {
  with201(): KoaRuntimeResponse<t_empty_object>
} & KoaRuntimeResponder

export type ActionsCreateOrgVariable = (
  params: Params<
    t_ActionsCreateOrgVariableParamSchema,
    void,
    t_ActionsCreateOrgVariableBodySchema
  >,
  respond: ActionsCreateOrgVariableResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_empty_object>>

export type ActionsGetOrgVariableResponder = {
  with200(): KoaRuntimeResponse<t_organization_actions_variable>
} & KoaRuntimeResponder

export type ActionsGetOrgVariable = (
  params: Params<t_ActionsGetOrgVariableParamSchema, void, void>,
  respond: ActionsGetOrgVariableResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_organization_actions_variable>
>

export type ActionsUpdateOrgVariableResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsUpdateOrgVariable = (
  params: Params<
    t_ActionsUpdateOrgVariableParamSchema,
    void,
    t_ActionsUpdateOrgVariableBodySchema
  >,
  respond: ActionsUpdateOrgVariableResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsDeleteOrgVariableResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsDeleteOrgVariable = (
  params: Params<t_ActionsDeleteOrgVariableParamSchema, void, void>,
  respond: ActionsDeleteOrgVariableResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsListSelectedReposForOrgVariableResponder = {
  with200(): KoaRuntimeResponse<{
    repositories: t_minimal_repository[]
    total_count: number
  }>
  with409(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsListSelectedReposForOrgVariable = (
  params: Params<
    t_ActionsListSelectedReposForOrgVariableParamSchema,
    t_ActionsListSelectedReposForOrgVariableQuerySchema,
    void
  >,
  respond: ActionsListSelectedReposForOrgVariableResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        repositories: t_minimal_repository[]
        total_count: number
      }
    >
  | Response<409, void>
>

export type ActionsSetSelectedReposForOrgVariableResponder = {
  with204(): KoaRuntimeResponse<void>
  with409(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsSetSelectedReposForOrgVariable = (
  params: Params<
    t_ActionsSetSelectedReposForOrgVariableParamSchema,
    void,
    t_ActionsSetSelectedReposForOrgVariableBodySchema
  >,
  respond: ActionsSetSelectedReposForOrgVariableResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<409, void>
>

export type ActionsAddSelectedRepoToOrgVariableResponder = {
  with204(): KoaRuntimeResponse<void>
  with409(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsAddSelectedRepoToOrgVariable = (
  params: Params<t_ActionsAddSelectedRepoToOrgVariableParamSchema, void, void>,
  respond: ActionsAddSelectedRepoToOrgVariableResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<409, void>
>

export type ActionsRemoveSelectedRepoFromOrgVariableResponder = {
  with204(): KoaRuntimeResponse<void>
  with409(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsRemoveSelectedRepoFromOrgVariable = (
  params: Params<
    t_ActionsRemoveSelectedRepoFromOrgVariableParamSchema,
    void,
    void
  >,
  respond: ActionsRemoveSelectedRepoFromOrgVariableResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<409, void>
>

export type OrgsListBlockedUsersResponder = {
  with200(): KoaRuntimeResponse<t_simple_user[]>
} & KoaRuntimeResponder

export type OrgsListBlockedUsers = (
  params: Params<
    t_OrgsListBlockedUsersParamSchema,
    t_OrgsListBlockedUsersQuerySchema,
    void
  >,
  respond: OrgsListBlockedUsersResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_simple_user[]>>

export type OrgsCheckBlockedUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsCheckBlockedUser = (
  params: Params<t_OrgsCheckBlockedUserParamSchema, void, void>,
  respond: OrgsCheckBlockedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

export type OrgsBlockUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type OrgsBlockUser = (
  params: Params<t_OrgsBlockUserParamSchema, void, void>,
  respond: OrgsBlockUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<422, t_validation_error>
>

export type OrgsUnblockUserResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type OrgsUnblockUser = (
  params: Params<t_OrgsUnblockUserParamSchema, void, void>,
  respond: OrgsUnblockUserResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type CodeScanningListAlertsForOrgResponder = {
  with200(): KoaRuntimeResponse<t_code_scanning_organization_alert_items[]>
  with404(): KoaRuntimeResponse<t_basic_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type CodeScanningListAlertsForOrg = (
  params: Params<
    t_CodeScanningListAlertsForOrgParamSchema,
    t_CodeScanningListAlertsForOrgQuerySchema,
    void
  >,
  respond: CodeScanningListAlertsForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_organization_alert_items[]>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type CodespacesListInOrganizationResponder = {
  with200(): KoaRuntimeResponse<{
    codespaces: t_codespace[]
    total_count: number
  }>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesListInOrganization = (
  params: Params<
    t_CodespacesListInOrganizationParamSchema,
    t_CodespacesListInOrganizationQuerySchema,
    void
  >,
  respond: CodespacesListInOrganizationResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        codespaces: t_codespace[]
        total_count: number
      }
    >
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type CodespacesSetCodespacesAccessResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with400(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesSetCodespacesAccess = (
  params: Params<
    t_CodespacesSetCodespacesAccessParamSchema,
    void,
    t_CodespacesSetCodespacesAccessBodySchema
  >,
  respond: CodespacesSetCodespacesAccessResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<400, void>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<500, t_basic_error>
>

export type CodespacesSetCodespacesAccessUsersResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with400(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesSetCodespacesAccessUsers = (
  params: Params<
    t_CodespacesSetCodespacesAccessUsersParamSchema,
    void,
    t_CodespacesSetCodespacesAccessUsersBodySchema
  >,
  respond: CodespacesSetCodespacesAccessUsersResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<400, void>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<500, t_basic_error>
>

export type CodespacesDeleteCodespacesAccessUsersResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with400(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesDeleteCodespacesAccessUsers = (
  params: Params<
    t_CodespacesDeleteCodespacesAccessUsersParamSchema,
    void,
    t_CodespacesDeleteCodespacesAccessUsersBodySchema
  >,
  respond: CodespacesDeleteCodespacesAccessUsersResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<400, void>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<500, t_basic_error>
>

export type CodespacesListOrgSecretsResponder = {
  with200(): KoaRuntimeResponse<{
    secrets: t_codespaces_org_secret[]
    total_count: number
  }>
} & KoaRuntimeResponder

export type CodespacesListOrgSecrets = (
  params: Params<
    t_CodespacesListOrgSecretsParamSchema,
    t_CodespacesListOrgSecretsQuerySchema,
    void
  >,
  respond: CodespacesListOrgSecretsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        secrets: t_codespaces_org_secret[]
        total_count: number
      }
    >
>

export type CodespacesGetOrgPublicKeyResponder = {
  with200(): KoaRuntimeResponse<t_codespaces_public_key>
} & KoaRuntimeResponder

export type CodespacesGetOrgPublicKey = (
  params: Params<t_CodespacesGetOrgPublicKeyParamSchema, void, void>,
  respond: CodespacesGetOrgPublicKeyResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_codespaces_public_key>
>

export type CodespacesGetOrgSecretResponder = {
  with200(): KoaRuntimeResponse<t_codespaces_org_secret>
} & KoaRuntimeResponder

export type CodespacesGetOrgSecret = (
  params: Params<t_CodespacesGetOrgSecretParamSchema, void, void>,
  respond: CodespacesGetOrgSecretResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_codespaces_org_secret>
>

export type CodespacesCreateOrUpdateOrgSecretResponder = {
  with201(): KoaRuntimeResponse<t_empty_object>
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type CodespacesCreateOrUpdateOrgSecret = (
  params: Params<
    t_CodespacesCreateOrUpdateOrgSecretParamSchema,
    void,
    t_CodespacesCreateOrUpdateOrgSecretBodySchema
  >,
  respond: CodespacesCreateOrUpdateOrgSecretResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type CodespacesDeleteOrgSecretResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesDeleteOrgSecret = (
  params: Params<t_CodespacesDeleteOrgSecretParamSchema, void, void>,
  respond: CodespacesDeleteOrgSecretResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

export type CodespacesListSelectedReposForOrgSecretResponder = {
  with200(): KoaRuntimeResponse<{
    repositories: t_minimal_repository[]
    total_count: number
  }>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesListSelectedReposForOrgSecret = (
  params: Params<
    t_CodespacesListSelectedReposForOrgSecretParamSchema,
    t_CodespacesListSelectedReposForOrgSecretQuerySchema,
    void
  >,
  respond: CodespacesListSelectedReposForOrgSecretResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        repositories: t_minimal_repository[]
        total_count: number
      }
    >
  | Response<404, t_basic_error>
>

export type CodespacesSetSelectedReposForOrgSecretResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
  with409(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type CodespacesSetSelectedReposForOrgSecret = (
  params: Params<
    t_CodespacesSetSelectedReposForOrgSecretParamSchema,
    void,
    t_CodespacesSetSelectedReposForOrgSecretBodySchema
  >,
  respond: CodespacesSetSelectedReposForOrgSecretResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<409, void>
>

export type CodespacesAddSelectedRepoToOrgSecretResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
  with409(): KoaRuntimeResponse<void>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type CodespacesAddSelectedRepoToOrgSecret = (
  params: Params<t_CodespacesAddSelectedRepoToOrgSecretParamSchema, void, void>,
  respond: CodespacesAddSelectedRepoToOrgSecretResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<409, void>
  | Response<422, t_validation_error>
>

export type CodespacesRemoveSelectedRepoFromOrgSecretResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
  with409(): KoaRuntimeResponse<void>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type CodespacesRemoveSelectedRepoFromOrgSecret = (
  params: Params<
    t_CodespacesRemoveSelectedRepoFromOrgSecretParamSchema,
    void,
    void
  >,
  respond: CodespacesRemoveSelectedRepoFromOrgSecretResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<409, void>
  | Response<422, t_validation_error>
>

export type CopilotGetCopilotOrganizationDetailsResponder = {
  with200(): KoaRuntimeResponse<t_copilot_organization_details>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CopilotGetCopilotOrganizationDetails = (
  params: Params<t_CopilotGetCopilotOrganizationDetailsParamSchema, void, void>,
  respond: CopilotGetCopilotOrganizationDetailsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_copilot_organization_details>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type CopilotListCopilotSeatsResponder = {
  with200(): KoaRuntimeResponse<{
    seats?: t_copilot_seat_details[]
    total_seats?: number
  }>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CopilotListCopilotSeats = (
  params: Params<
    t_CopilotListCopilotSeatsParamSchema,
    t_CopilotListCopilotSeatsQuerySchema,
    void
  >,
  respond: CopilotListCopilotSeatsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        seats?: t_copilot_seat_details[]
        total_seats?: number
      }
    >
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type CopilotAddCopilotForBusinessSeatsForTeamsResponder = {
  with201(): KoaRuntimeResponse<{
    seats_created: number
  }>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<void>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CopilotAddCopilotForBusinessSeatsForTeams = (
  params: Params<
    t_CopilotAddCopilotForBusinessSeatsForTeamsParamSchema,
    void,
    t_CopilotAddCopilotForBusinessSeatsForTeamsBodySchema
  >,
  respond: CopilotAddCopilotForBusinessSeatsForTeamsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      201,
      {
        seats_created: number
      }
    >
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, void>
  | Response<500, t_basic_error>
>

export type CopilotCancelCopilotSeatAssignmentForTeamsResponder = {
  with200(): KoaRuntimeResponse<{
    seats_cancelled: number
  }>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<void>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CopilotCancelCopilotSeatAssignmentForTeams = (
  params: Params<
    t_CopilotCancelCopilotSeatAssignmentForTeamsParamSchema,
    void,
    t_CopilotCancelCopilotSeatAssignmentForTeamsBodySchema
  >,
  respond: CopilotCancelCopilotSeatAssignmentForTeamsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        seats_cancelled: number
      }
    >
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, void>
  | Response<500, t_basic_error>
>

export type CopilotAddCopilotForBusinessSeatsForUsersResponder = {
  with201(): KoaRuntimeResponse<{
    seats_created: number
  }>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<void>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CopilotAddCopilotForBusinessSeatsForUsers = (
  params: Params<
    t_CopilotAddCopilotForBusinessSeatsForUsersParamSchema,
    void,
    t_CopilotAddCopilotForBusinessSeatsForUsersBodySchema
  >,
  respond: CopilotAddCopilotForBusinessSeatsForUsersResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      201,
      {
        seats_created: number
      }
    >
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, void>
  | Response<500, t_basic_error>
>

export type CopilotCancelCopilotSeatAssignmentForUsersResponder = {
  with200(): KoaRuntimeResponse<{
    seats_cancelled: number
  }>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<void>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CopilotCancelCopilotSeatAssignmentForUsers = (
  params: Params<
    t_CopilotCancelCopilotSeatAssignmentForUsersParamSchema,
    void,
    t_CopilotCancelCopilotSeatAssignmentForUsersBodySchema
  >,
  respond: CopilotCancelCopilotSeatAssignmentForUsersResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        seats_cancelled: number
      }
    >
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, void>
  | Response<500, t_basic_error>
>

export type DependabotListAlertsForOrgResponder = {
  with200(): KoaRuntimeResponse<t_dependabot_alert_with_repository[]>
  with304(): KoaRuntimeResponse<void>
  with400(): KoaRuntimeResponse<t_scim_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type DependabotListAlertsForOrg = (
  params: Params<
    t_DependabotListAlertsForOrgParamSchema,
    t_DependabotListAlertsForOrgQuerySchema,
    void
  >,
  respond: DependabotListAlertsForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_dependabot_alert_with_repository[]>
  | Response<304, void>
  | Response<400, t_scim_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type DependabotListOrgSecretsResponder = {
  with200(): KoaRuntimeResponse<{
    secrets: t_organization_dependabot_secret[]
    total_count: number
  }>
} & KoaRuntimeResponder

export type DependabotListOrgSecrets = (
  params: Params<
    t_DependabotListOrgSecretsParamSchema,
    t_DependabotListOrgSecretsQuerySchema,
    void
  >,
  respond: DependabotListOrgSecretsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        secrets: t_organization_dependabot_secret[]
        total_count: number
      }
    >
>

export type DependabotGetOrgPublicKeyResponder = {
  with200(): KoaRuntimeResponse<t_dependabot_public_key>
} & KoaRuntimeResponder

export type DependabotGetOrgPublicKey = (
  params: Params<t_DependabotGetOrgPublicKeyParamSchema, void, void>,
  respond: DependabotGetOrgPublicKeyResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_dependabot_public_key>
>

export type DependabotGetOrgSecretResponder = {
  with200(): KoaRuntimeResponse<t_organization_dependabot_secret>
} & KoaRuntimeResponder

export type DependabotGetOrgSecret = (
  params: Params<t_DependabotGetOrgSecretParamSchema, void, void>,
  respond: DependabotGetOrgSecretResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_organization_dependabot_secret>
>

export type DependabotCreateOrUpdateOrgSecretResponder = {
  with201(): KoaRuntimeResponse<t_empty_object>
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type DependabotCreateOrUpdateOrgSecret = (
  params: Params<
    t_DependabotCreateOrUpdateOrgSecretParamSchema,
    void,
    t_DependabotCreateOrUpdateOrgSecretBodySchema
  >,
  respond: DependabotCreateOrUpdateOrgSecretResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<204, void>
>

export type DependabotDeleteOrgSecretResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type DependabotDeleteOrgSecret = (
  params: Params<t_DependabotDeleteOrgSecretParamSchema, void, void>,
  respond: DependabotDeleteOrgSecretResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type DependabotListSelectedReposForOrgSecretResponder = {
  with200(): KoaRuntimeResponse<{
    repositories: t_minimal_repository[]
    total_count: number
  }>
} & KoaRuntimeResponder

export type DependabotListSelectedReposForOrgSecret = (
  params: Params<
    t_DependabotListSelectedReposForOrgSecretParamSchema,
    t_DependabotListSelectedReposForOrgSecretQuerySchema,
    void
  >,
  respond: DependabotListSelectedReposForOrgSecretResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        repositories: t_minimal_repository[]
        total_count: number
      }
    >
>

export type DependabotSetSelectedReposForOrgSecretResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type DependabotSetSelectedReposForOrgSecret = (
  params: Params<
    t_DependabotSetSelectedReposForOrgSecretParamSchema,
    void,
    t_DependabotSetSelectedReposForOrgSecretBodySchema
  >,
  respond: DependabotSetSelectedReposForOrgSecretResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type DependabotAddSelectedRepoToOrgSecretResponder = {
  with204(): KoaRuntimeResponse<void>
  with409(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type DependabotAddSelectedRepoToOrgSecret = (
  params: Params<t_DependabotAddSelectedRepoToOrgSecretParamSchema, void, void>,
  respond: DependabotAddSelectedRepoToOrgSecretResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<409, void>
>

export type DependabotRemoveSelectedRepoFromOrgSecretResponder = {
  with204(): KoaRuntimeResponse<void>
  with409(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type DependabotRemoveSelectedRepoFromOrgSecret = (
  params: Params<
    t_DependabotRemoveSelectedRepoFromOrgSecretParamSchema,
    void,
    void
  >,
  respond: DependabotRemoveSelectedRepoFromOrgSecretResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<409, void>
>

export type PackagesListDockerMigrationConflictingPackagesForOrganizationResponder =
  {
    with200(): KoaRuntimeResponse<t_package[]>
    with401(): KoaRuntimeResponse<t_basic_error>
    with403(): KoaRuntimeResponse<t_basic_error>
  } & KoaRuntimeResponder

export type PackagesListDockerMigrationConflictingPackagesForOrganization = (
  params: Params<
    t_PackagesListDockerMigrationConflictingPackagesForOrganizationParamSchema,
    void,
    void
  >,
  respond: PackagesListDockerMigrationConflictingPackagesForOrganizationResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_package[]>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type ActivityListPublicOrgEventsResponder = {
  with200(): KoaRuntimeResponse<t_event[]>
} & KoaRuntimeResponder

export type ActivityListPublicOrgEvents = (
  params: Params<
    t_ActivityListPublicOrgEventsParamSchema,
    t_ActivityListPublicOrgEventsQuerySchema,
    void
  >,
  respond: ActivityListPublicOrgEventsResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_event[]>>

export type OrgsListFailedInvitationsResponder = {
  with200(): KoaRuntimeResponse<t_organization_invitation[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsListFailedInvitations = (
  params: Params<
    t_OrgsListFailedInvitationsParamSchema,
    t_OrgsListFailedInvitationsQuerySchema,
    void
  >,
  respond: OrgsListFailedInvitationsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_organization_invitation[]>
  | Response<404, t_basic_error>
>

export type OrgsListWebhooksResponder = {
  with200(): KoaRuntimeResponse<t_org_hook[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsListWebhooks = (
  params: Params<
    t_OrgsListWebhooksParamSchema,
    t_OrgsListWebhooksQuerySchema,
    void
  >,
  respond: OrgsListWebhooksResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_org_hook[]>
  | Response<404, t_basic_error>
>

export type OrgsCreateWebhookResponder = {
  with201(): KoaRuntimeResponse<t_org_hook>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type OrgsCreateWebhook = (
  params: Params<
    t_OrgsCreateWebhookParamSchema,
    void,
    t_OrgsCreateWebhookBodySchema
  >,
  respond: OrgsCreateWebhookResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_org_hook>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type OrgsGetWebhookResponder = {
  with200(): KoaRuntimeResponse<t_org_hook>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsGetWebhook = (
  params: Params<t_OrgsGetWebhookParamSchema, void, void>,
  respond: OrgsGetWebhookResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_org_hook>
  | Response<404, t_basic_error>
>

export type OrgsUpdateWebhookResponder = {
  with200(): KoaRuntimeResponse<t_org_hook>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type OrgsUpdateWebhook = (
  params: Params<
    t_OrgsUpdateWebhookParamSchema,
    void,
    t_OrgsUpdateWebhookBodySchema | undefined
  >,
  respond: OrgsUpdateWebhookResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_org_hook>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type OrgsDeleteWebhookResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsDeleteWebhook = (
  params: Params<t_OrgsDeleteWebhookParamSchema, void, void>,
  respond: OrgsDeleteWebhookResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

export type OrgsGetWebhookConfigForOrgResponder = {
  with200(): KoaRuntimeResponse<t_webhook_config>
} & KoaRuntimeResponder

export type OrgsGetWebhookConfigForOrg = (
  params: Params<t_OrgsGetWebhookConfigForOrgParamSchema, void, void>,
  respond: OrgsGetWebhookConfigForOrgResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_webhook_config>>

export type OrgsUpdateWebhookConfigForOrgResponder = {
  with200(): KoaRuntimeResponse<t_webhook_config>
} & KoaRuntimeResponder

export type OrgsUpdateWebhookConfigForOrg = (
  params: Params<
    t_OrgsUpdateWebhookConfigForOrgParamSchema,
    void,
    t_OrgsUpdateWebhookConfigForOrgBodySchema | undefined
  >,
  respond: OrgsUpdateWebhookConfigForOrgResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_webhook_config>>

export type OrgsListWebhookDeliveriesResponder = {
  with200(): KoaRuntimeResponse<t_hook_delivery_item[]>
  with400(): KoaRuntimeResponse<t_scim_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type OrgsListWebhookDeliveries = (
  params: Params<
    t_OrgsListWebhookDeliveriesParamSchema,
    t_OrgsListWebhookDeliveriesQuerySchema,
    void
  >,
  respond: OrgsListWebhookDeliveriesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_hook_delivery_item[]>
  | Response<400, t_scim_error>
  | Response<422, t_validation_error>
>

export type OrgsGetWebhookDeliveryResponder = {
  with200(): KoaRuntimeResponse<t_hook_delivery>
  with400(): KoaRuntimeResponse<t_scim_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type OrgsGetWebhookDelivery = (
  params: Params<t_OrgsGetWebhookDeliveryParamSchema, void, void>,
  respond: OrgsGetWebhookDeliveryResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_hook_delivery>
  | Response<400, t_scim_error>
  | Response<422, t_validation_error>
>

export type OrgsRedeliverWebhookDeliveryResponder = {
  with202(): KoaRuntimeResponse<EmptyObject>
  with400(): KoaRuntimeResponse<t_scim_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type OrgsRedeliverWebhookDelivery = (
  params: Params<t_OrgsRedeliverWebhookDeliveryParamSchema, void, void>,
  respond: OrgsRedeliverWebhookDeliveryResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<202, EmptyObject>
  | Response<400, t_scim_error>
  | Response<422, t_validation_error>
>

export type OrgsPingWebhookResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsPingWebhook = (
  params: Params<t_OrgsPingWebhookParamSchema, void, void>,
  respond: OrgsPingWebhookResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

export type AppsGetOrgInstallationResponder = {
  with200(): KoaRuntimeResponse<t_installation>
} & KoaRuntimeResponder

export type AppsGetOrgInstallation = (
  params: Params<t_AppsGetOrgInstallationParamSchema, void, void>,
  respond: AppsGetOrgInstallationResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_installation>>

export type OrgsListAppInstallationsResponder = {
  with200(): KoaRuntimeResponse<{
    installations: t_installation[]
    total_count: number
  }>
} & KoaRuntimeResponder

export type OrgsListAppInstallations = (
  params: Params<
    t_OrgsListAppInstallationsParamSchema,
    t_OrgsListAppInstallationsQuerySchema,
    void
  >,
  respond: OrgsListAppInstallationsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        installations: t_installation[]
        total_count: number
      }
    >
>

export type InteractionsGetRestrictionsForOrgResponder = {
  with200(): KoaRuntimeResponse<t_interaction_limit_response | EmptyObject>
} & KoaRuntimeResponder

export type InteractionsGetRestrictionsForOrg = (
  params: Params<t_InteractionsGetRestrictionsForOrgParamSchema, void, void>,
  respond: InteractionsGetRestrictionsForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_interaction_limit_response | EmptyObject>
>

export type InteractionsSetRestrictionsForOrgResponder = {
  with200(): KoaRuntimeResponse<t_interaction_limit_response>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type InteractionsSetRestrictionsForOrg = (
  params: Params<
    t_InteractionsSetRestrictionsForOrgParamSchema,
    void,
    t_InteractionsSetRestrictionsForOrgBodySchema
  >,
  respond: InteractionsSetRestrictionsForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_interaction_limit_response>
  | Response<422, t_validation_error>
>

export type InteractionsRemoveRestrictionsForOrgResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type InteractionsRemoveRestrictionsForOrg = (
  params: Params<t_InteractionsRemoveRestrictionsForOrgParamSchema, void, void>,
  respond: InteractionsRemoveRestrictionsForOrgResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type OrgsListPendingInvitationsResponder = {
  with200(): KoaRuntimeResponse<t_organization_invitation[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsListPendingInvitations = (
  params: Params<
    t_OrgsListPendingInvitationsParamSchema,
    t_OrgsListPendingInvitationsQuerySchema,
    void
  >,
  respond: OrgsListPendingInvitationsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_organization_invitation[]>
  | Response<404, t_basic_error>
>

export type OrgsCreateInvitationResponder = {
  with201(): KoaRuntimeResponse<t_organization_invitation>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type OrgsCreateInvitation = (
  params: Params<
    t_OrgsCreateInvitationParamSchema,
    void,
    t_OrgsCreateInvitationBodySchema | undefined
  >,
  respond: OrgsCreateInvitationResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_organization_invitation>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type OrgsCancelInvitationResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type OrgsCancelInvitation = (
  params: Params<t_OrgsCancelInvitationParamSchema, void, void>,
  respond: OrgsCancelInvitationResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type OrgsListInvitationTeamsResponder = {
  with200(): KoaRuntimeResponse<t_team[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsListInvitationTeams = (
  params: Params<
    t_OrgsListInvitationTeamsParamSchema,
    t_OrgsListInvitationTeamsQuerySchema,
    void
  >,
  respond: OrgsListInvitationTeamsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team[]>
  | Response<404, t_basic_error>
>

export type IssuesListForOrgResponder = {
  with200(): KoaRuntimeResponse<t_issue[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type IssuesListForOrg = (
  params: Params<
    t_IssuesListForOrgParamSchema,
    t_IssuesListForOrgQuerySchema,
    void
  >,
  respond: IssuesListForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue[]>
  | Response<404, t_basic_error>
>

export type OrgsListMembersResponder = {
  with200(): KoaRuntimeResponse<t_simple_user[]>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type OrgsListMembers = (
  params: Params<
    t_OrgsListMembersParamSchema,
    t_OrgsListMembersQuerySchema,
    void
  >,
  respond: OrgsListMembersResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[]>
  | Response<422, t_validation_error>
>

export type OrgsCheckMembershipForUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with302(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type OrgsCheckMembershipForUser = (
  params: Params<t_OrgsCheckMembershipForUserParamSchema, void, void>,
  respond: OrgsCheckMembershipForUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<302, void>
  | Response<404, void>
>

export type OrgsRemoveMemberResponder = {
  with204(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsRemoveMember = (
  params: Params<t_OrgsRemoveMemberParamSchema, void, void>,
  respond: OrgsRemoveMemberResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
>

export type CodespacesGetCodespacesForUserInOrgResponder = {
  with200(): KoaRuntimeResponse<{
    codespaces: t_codespace[]
    total_count: number
  }>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesGetCodespacesForUserInOrg = (
  params: Params<
    t_CodespacesGetCodespacesForUserInOrgParamSchema,
    t_CodespacesGetCodespacesForUserInOrgQuerySchema,
    void
  >,
  respond: CodespacesGetCodespacesForUserInOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        codespaces: t_codespace[]
        total_count: number
      }
    >
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type CodespacesDeleteFromOrganizationResponder = {
  with202(): KoaRuntimeResponse<EmptyObject>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesDeleteFromOrganization = (
  params: Params<t_CodespacesDeleteFromOrganizationParamSchema, void, void>,
  respond: CodespacesDeleteFromOrganizationResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<202, EmptyObject>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type CodespacesStopInOrganizationResponder = {
  with200(): KoaRuntimeResponse<t_codespace>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesStopInOrganization = (
  params: Params<t_CodespacesStopInOrganizationParamSchema, void, void>,
  respond: CodespacesStopInOrganizationResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_codespace>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type CopilotGetCopilotSeatAssignmentDetailsForUserResponder = {
  with200(): KoaRuntimeResponse<t_copilot_seat_details>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<void>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CopilotGetCopilotSeatAssignmentDetailsForUser = (
  params: Params<
    t_CopilotGetCopilotSeatAssignmentDetailsForUserParamSchema,
    void,
    void
  >,
  respond: CopilotGetCopilotSeatAssignmentDetailsForUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_copilot_seat_details>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, void>
  | Response<500, t_basic_error>
>

export type OrgsGetMembershipForUserResponder = {
  with200(): KoaRuntimeResponse<t_org_membership>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsGetMembershipForUser = (
  params: Params<t_OrgsGetMembershipForUserParamSchema, void, void>,
  respond: OrgsGetMembershipForUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_org_membership>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type OrgsSetMembershipForUserResponder = {
  with200(): KoaRuntimeResponse<t_org_membership>
  with403(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type OrgsSetMembershipForUser = (
  params: Params<
    t_OrgsSetMembershipForUserParamSchema,
    void,
    t_OrgsSetMembershipForUserBodySchema | undefined
  >,
  respond: OrgsSetMembershipForUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_org_membership>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

export type OrgsRemoveMembershipForUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsRemoveMembershipForUser = (
  params: Params<t_OrgsRemoveMembershipForUserParamSchema, void, void>,
  respond: OrgsRemoveMembershipForUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type MigrationsListForOrgResponder = {
  with200(): KoaRuntimeResponse<t_migration[]>
} & KoaRuntimeResponder

export type MigrationsListForOrg = (
  params: Params<
    t_MigrationsListForOrgParamSchema,
    t_MigrationsListForOrgQuerySchema,
    void
  >,
  respond: MigrationsListForOrgResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_migration[]>>

export type MigrationsStartForOrgResponder = {
  with201(): KoaRuntimeResponse<t_migration>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type MigrationsStartForOrg = (
  params: Params<
    t_MigrationsStartForOrgParamSchema,
    void,
    t_MigrationsStartForOrgBodySchema
  >,
  respond: MigrationsStartForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_migration>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type MigrationsGetStatusForOrgResponder = {
  with200(): KoaRuntimeResponse<t_migration>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type MigrationsGetStatusForOrg = (
  params: Params<
    t_MigrationsGetStatusForOrgParamSchema,
    t_MigrationsGetStatusForOrgQuerySchema,
    void
  >,
  respond: MigrationsGetStatusForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_migration>
  | Response<404, t_basic_error>
>

export type MigrationsDownloadArchiveForOrgResponder = {
  with302(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type MigrationsDownloadArchiveForOrg = (
  params: Params<t_MigrationsDownloadArchiveForOrgParamSchema, void, void>,
  respond: MigrationsDownloadArchiveForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<302, void>
  | Response<404, t_basic_error>
>

export type MigrationsDeleteArchiveForOrgResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type MigrationsDeleteArchiveForOrg = (
  params: Params<t_MigrationsDeleteArchiveForOrgParamSchema, void, void>,
  respond: MigrationsDeleteArchiveForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

export type MigrationsUnlockRepoForOrgResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type MigrationsUnlockRepoForOrg = (
  params: Params<t_MigrationsUnlockRepoForOrgParamSchema, void, void>,
  respond: MigrationsUnlockRepoForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

export type MigrationsListReposForOrgResponder = {
  with200(): KoaRuntimeResponse<t_minimal_repository[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type MigrationsListReposForOrg = (
  params: Params<
    t_MigrationsListReposForOrgParamSchema,
    t_MigrationsListReposForOrgQuerySchema,
    void
  >,
  respond: MigrationsListReposForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_minimal_repository[]>
  | Response<404, t_basic_error>
>

export type OrgsListOutsideCollaboratorsResponder = {
  with200(): KoaRuntimeResponse<t_simple_user[]>
} & KoaRuntimeResponder

export type OrgsListOutsideCollaborators = (
  params: Params<
    t_OrgsListOutsideCollaboratorsParamSchema,
    t_OrgsListOutsideCollaboratorsQuerySchema,
    void
  >,
  respond: OrgsListOutsideCollaboratorsResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_simple_user[]>>

export type OrgsConvertMemberToOutsideCollaboratorResponder = {
  with202(): KoaRuntimeResponse<EmptyObject>
  with204(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsConvertMemberToOutsideCollaborator = (
  params: Params<
    t_OrgsConvertMemberToOutsideCollaboratorParamSchema,
    void,
    t_OrgsConvertMemberToOutsideCollaboratorBodySchema | undefined
  >,
  respond: OrgsConvertMemberToOutsideCollaboratorResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<202, EmptyObject>
  | Response<204, void>
  | Response<403, void>
  | Response<404, t_basic_error>
>

export type OrgsRemoveOutsideCollaboratorResponder = {
  with204(): KoaRuntimeResponse<void>
  with422(): KoaRuntimeResponse<{
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type OrgsRemoveOutsideCollaborator = (
  params: Params<t_OrgsRemoveOutsideCollaboratorParamSchema, void, void>,
  respond: OrgsRemoveOutsideCollaboratorResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<
      422,
      {
        documentation_url?: string
        message?: string
      }
    >
>

export type PackagesListPackagesForOrganizationResponder = {
  with200(): KoaRuntimeResponse<t_package[]>
  with400(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type PackagesListPackagesForOrganization = (
  params: Params<
    t_PackagesListPackagesForOrganizationParamSchema,
    t_PackagesListPackagesForOrganizationQuerySchema,
    void
  >,
  respond: PackagesListPackagesForOrganizationResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_package[]>
  | Response<400, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type PackagesGetPackageForOrganizationResponder = {
  with200(): KoaRuntimeResponse<t_package>
} & KoaRuntimeResponder

export type PackagesGetPackageForOrganization = (
  params: Params<t_PackagesGetPackageForOrganizationParamSchema, void, void>,
  respond: PackagesGetPackageForOrganizationResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_package>>

export type PackagesDeletePackageForOrgResponder = {
  with204(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type PackagesDeletePackageForOrg = (
  params: Params<t_PackagesDeletePackageForOrgParamSchema, void, void>,
  respond: PackagesDeletePackageForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type PackagesRestorePackageForOrgResponder = {
  with204(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type PackagesRestorePackageForOrg = (
  params: Params<
    t_PackagesRestorePackageForOrgParamSchema,
    t_PackagesRestorePackageForOrgQuerySchema,
    void
  >,
  respond: PackagesRestorePackageForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type PackagesGetAllPackageVersionsForPackageOwnedByOrgResponder = {
  with200(): KoaRuntimeResponse<t_package_version[]>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type PackagesGetAllPackageVersionsForPackageOwnedByOrg = (
  params: Params<
    t_PackagesGetAllPackageVersionsForPackageOwnedByOrgParamSchema,
    t_PackagesGetAllPackageVersionsForPackageOwnedByOrgQuerySchema,
    void
  >,
  respond: PackagesGetAllPackageVersionsForPackageOwnedByOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_package_version[]>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type PackagesGetPackageVersionForOrganizationResponder = {
  with200(): KoaRuntimeResponse<t_package_version>
} & KoaRuntimeResponder

export type PackagesGetPackageVersionForOrganization = (
  params: Params<
    t_PackagesGetPackageVersionForOrganizationParamSchema,
    void,
    void
  >,
  respond: PackagesGetPackageVersionForOrganizationResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_package_version>>

export type PackagesDeletePackageVersionForOrgResponder = {
  with204(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type PackagesDeletePackageVersionForOrg = (
  params: Params<t_PackagesDeletePackageVersionForOrgParamSchema, void, void>,
  respond: PackagesDeletePackageVersionForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type PackagesRestorePackageVersionForOrgResponder = {
  with204(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type PackagesRestorePackageVersionForOrg = (
  params: Params<t_PackagesRestorePackageVersionForOrgParamSchema, void, void>,
  respond: PackagesRestorePackageVersionForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type OrgsListPatGrantRequestsResponder = {
  with200(): KoaRuntimeResponse<
    t_organization_programmatic_access_grant_request[]
  >
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsListPatGrantRequests = (
  params: Params<
    t_OrgsListPatGrantRequestsParamSchema,
    t_OrgsListPatGrantRequestsQuerySchema,
    void
  >,
  respond: OrgsListPatGrantRequestsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_organization_programmatic_access_grant_request[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<500, t_basic_error>
>

export type OrgsReviewPatGrantRequestsInBulkResponder = {
  with202(): KoaRuntimeResponse<EmptyObject>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsReviewPatGrantRequestsInBulk = (
  params: Params<
    t_OrgsReviewPatGrantRequestsInBulkParamSchema,
    void,
    t_OrgsReviewPatGrantRequestsInBulkBodySchema
  >,
  respond: OrgsReviewPatGrantRequestsInBulkResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<202, EmptyObject>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<500, t_basic_error>
>

export type OrgsReviewPatGrantRequestResponder = {
  with204(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsReviewPatGrantRequest = (
  params: Params<
    t_OrgsReviewPatGrantRequestParamSchema,
    void,
    t_OrgsReviewPatGrantRequestBodySchema
  >,
  respond: OrgsReviewPatGrantRequestResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<500, t_basic_error>
>

export type OrgsListPatGrantRequestRepositoriesResponder = {
  with200(): KoaRuntimeResponse<t_minimal_repository[]>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsListPatGrantRequestRepositories = (
  params: Params<
    t_OrgsListPatGrantRequestRepositoriesParamSchema,
    t_OrgsListPatGrantRequestRepositoriesQuerySchema,
    void
  >,
  respond: OrgsListPatGrantRequestRepositoriesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_minimal_repository[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type OrgsListPatGrantsResponder = {
  with200(): KoaRuntimeResponse<t_organization_programmatic_access_grant[]>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsListPatGrants = (
  params: Params<
    t_OrgsListPatGrantsParamSchema,
    t_OrgsListPatGrantsQuerySchema,
    void
  >,
  respond: OrgsListPatGrantsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_organization_programmatic_access_grant[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<500, t_basic_error>
>

export type OrgsUpdatePatAccessesResponder = {
  with202(): KoaRuntimeResponse<EmptyObject>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsUpdatePatAccesses = (
  params: Params<
    t_OrgsUpdatePatAccessesParamSchema,
    void,
    t_OrgsUpdatePatAccessesBodySchema
  >,
  respond: OrgsUpdatePatAccessesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<202, EmptyObject>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<500, t_basic_error>
>

export type OrgsUpdatePatAccessResponder = {
  with204(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsUpdatePatAccess = (
  params: Params<
    t_OrgsUpdatePatAccessParamSchema,
    void,
    t_OrgsUpdatePatAccessBodySchema
  >,
  respond: OrgsUpdatePatAccessResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<500, t_basic_error>
>

export type OrgsListPatGrantRepositoriesResponder = {
  with200(): KoaRuntimeResponse<t_minimal_repository[]>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsListPatGrantRepositories = (
  params: Params<
    t_OrgsListPatGrantRepositoriesParamSchema,
    t_OrgsListPatGrantRepositoriesQuerySchema,
    void
  >,
  respond: OrgsListPatGrantRepositoriesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_minimal_repository[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type ProjectsListForOrgResponder = {
  with200(): KoaRuntimeResponse<t_project[]>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type ProjectsListForOrg = (
  params: Params<
    t_ProjectsListForOrgParamSchema,
    t_ProjectsListForOrgQuerySchema,
    void
  >,
  respond: ProjectsListForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_project[]>
  | Response<422, t_validation_error_simple>
>

export type ProjectsCreateForOrgResponder = {
  with201(): KoaRuntimeResponse<t_project>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with410(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type ProjectsCreateForOrg = (
  params: Params<
    t_ProjectsCreateForOrgParamSchema,
    void,
    t_ProjectsCreateForOrgBodySchema
  >,
  respond: ProjectsCreateForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_project>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type OrgsListPublicMembersResponder = {
  with200(): KoaRuntimeResponse<t_simple_user[]>
} & KoaRuntimeResponder

export type OrgsListPublicMembers = (
  params: Params<
    t_OrgsListPublicMembersParamSchema,
    t_OrgsListPublicMembersQuerySchema,
    void
  >,
  respond: OrgsListPublicMembersResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_simple_user[]>>

export type OrgsCheckPublicMembershipForUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type OrgsCheckPublicMembershipForUser = (
  params: Params<t_OrgsCheckPublicMembershipForUserParamSchema, void, void>,
  respond: OrgsCheckPublicMembershipForUserResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<404, void>
>

export type OrgsSetPublicMembershipForAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsSetPublicMembershipForAuthenticatedUser = (
  params: Params<
    t_OrgsSetPublicMembershipForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: OrgsSetPublicMembershipForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
>

export type OrgsRemovePublicMembershipForAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type OrgsRemovePublicMembershipForAuthenticatedUser = (
  params: Params<
    t_OrgsRemovePublicMembershipForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: OrgsRemovePublicMembershipForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ReposListForOrgResponder = {
  with200(): KoaRuntimeResponse<t_minimal_repository[]>
} & KoaRuntimeResponder

export type ReposListForOrg = (
  params: Params<
    t_ReposListForOrgParamSchema,
    t_ReposListForOrgQuerySchema,
    void
  >,
  respond: ReposListForOrgResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_minimal_repository[]>
>

export type ReposCreateInOrgResponder = {
  with201(): KoaRuntimeResponse<t_repository>
  with403(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposCreateInOrg = (
  params: Params<
    t_ReposCreateInOrgParamSchema,
    void,
    t_ReposCreateInOrgBodySchema
  >,
  respond: ReposCreateInOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_repository>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

export type ReposGetOrgRulesetsResponder = {
  with200(): KoaRuntimeResponse<t_repository_ruleset[]>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetOrgRulesets = (
  params: Params<
    t_ReposGetOrgRulesetsParamSchema,
    t_ReposGetOrgRulesetsQuerySchema,
    void
  >,
  respond: ReposGetOrgRulesetsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_ruleset[]>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type ReposCreateOrgRulesetResponder = {
  with201(): KoaRuntimeResponse<t_repository_ruleset>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposCreateOrgRuleset = (
  params: Params<
    t_ReposCreateOrgRulesetParamSchema,
    void,
    t_ReposCreateOrgRulesetBodySchema
  >,
  respond: ReposCreateOrgRulesetResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_repository_ruleset>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type ReposGetOrgRulesetResponder = {
  with200(): KoaRuntimeResponse<t_repository_ruleset>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetOrgRuleset = (
  params: Params<t_ReposGetOrgRulesetParamSchema, void, void>,
  respond: ReposGetOrgRulesetResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_ruleset>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type ReposUpdateOrgRulesetResponder = {
  with200(): KoaRuntimeResponse<t_repository_ruleset>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposUpdateOrgRuleset = (
  params: Params<
    t_ReposUpdateOrgRulesetParamSchema,
    void,
    t_ReposUpdateOrgRulesetBodySchema | undefined
  >,
  respond: ReposUpdateOrgRulesetResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_ruleset>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type ReposDeleteOrgRulesetResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposDeleteOrgRuleset = (
  params: Params<t_ReposDeleteOrgRulesetParamSchema, void, void>,
  respond: ReposDeleteOrgRulesetResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type SecretScanningListAlertsForOrgResponder = {
  with200(): KoaRuntimeResponse<t_organization_secret_scanning_alert[]>
  with404(): KoaRuntimeResponse<t_basic_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type SecretScanningListAlertsForOrg = (
  params: Params<
    t_SecretScanningListAlertsForOrgParamSchema,
    t_SecretScanningListAlertsForOrgQuerySchema,
    void
  >,
  respond: SecretScanningListAlertsForOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_organization_secret_scanning_alert[]>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type SecurityAdvisoriesListOrgRepositoryAdvisoriesResponder = {
  with200(): KoaRuntimeResponse<t_repository_advisory[]>
  with400(): KoaRuntimeResponse<t_scim_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type SecurityAdvisoriesListOrgRepositoryAdvisories = (
  params: Params<
    t_SecurityAdvisoriesListOrgRepositoryAdvisoriesParamSchema,
    t_SecurityAdvisoriesListOrgRepositoryAdvisoriesQuerySchema,
    void
  >,
  respond: SecurityAdvisoriesListOrgRepositoryAdvisoriesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_advisory[]>
  | Response<400, t_scim_error>
  | Response<404, t_basic_error>
>

export type OrgsListSecurityManagerTeamsResponder = {
  with200(): KoaRuntimeResponse<t_team_simple[]>
} & KoaRuntimeResponder

export type OrgsListSecurityManagerTeams = (
  params: Params<t_OrgsListSecurityManagerTeamsParamSchema, void, void>,
  respond: OrgsListSecurityManagerTeamsResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_team_simple[]>>

export type OrgsAddSecurityManagerTeamResponder = {
  with204(): KoaRuntimeResponse<void>
  with409(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type OrgsAddSecurityManagerTeam = (
  params: Params<t_OrgsAddSecurityManagerTeamParamSchema, void, void>,
  respond: OrgsAddSecurityManagerTeamResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<409, void>
>

export type OrgsRemoveSecurityManagerTeamResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type OrgsRemoveSecurityManagerTeam = (
  params: Params<t_OrgsRemoveSecurityManagerTeamParamSchema, void, void>,
  respond: OrgsRemoveSecurityManagerTeamResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type BillingGetGithubActionsBillingOrgResponder = {
  with200(): KoaRuntimeResponse<t_actions_billing_usage>
} & KoaRuntimeResponder

export type BillingGetGithubActionsBillingOrg = (
  params: Params<t_BillingGetGithubActionsBillingOrgParamSchema, void, void>,
  respond: BillingGetGithubActionsBillingOrgResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_actions_billing_usage>
>

export type BillingGetGithubPackagesBillingOrgResponder = {
  with200(): KoaRuntimeResponse<t_packages_billing_usage>
} & KoaRuntimeResponder

export type BillingGetGithubPackagesBillingOrg = (
  params: Params<t_BillingGetGithubPackagesBillingOrgParamSchema, void, void>,
  respond: BillingGetGithubPackagesBillingOrgResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_packages_billing_usage>
>

export type BillingGetSharedStorageBillingOrgResponder = {
  with200(): KoaRuntimeResponse<t_combined_billing_usage>
} & KoaRuntimeResponder

export type BillingGetSharedStorageBillingOrg = (
  params: Params<t_BillingGetSharedStorageBillingOrgParamSchema, void, void>,
  respond: BillingGetSharedStorageBillingOrgResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_combined_billing_usage>
>

export type TeamsListResponder = {
  with200(): KoaRuntimeResponse<t_team[]>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type TeamsList = (
  params: Params<t_TeamsListParamSchema, t_TeamsListQuerySchema, void>,
  respond: TeamsListResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team[]>
  | Response<403, t_basic_error>
>

export type TeamsCreateResponder = {
  with201(): KoaRuntimeResponse<t_team_full>
  with403(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type TeamsCreate = (
  params: Params<t_TeamsCreateParamSchema, void, t_TeamsCreateBodySchema>,
  respond: TeamsCreateResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_team_full>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

export type TeamsGetByNameResponder = {
  with200(): KoaRuntimeResponse<t_team_full>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type TeamsGetByName = (
  params: Params<t_TeamsGetByNameParamSchema, void, void>,
  respond: TeamsGetByNameResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_full>
  | Response<404, t_basic_error>
>

export type TeamsUpdateInOrgResponder = {
  with200(): KoaRuntimeResponse<t_team_full>
  with201(): KoaRuntimeResponse<t_team_full>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type TeamsUpdateInOrg = (
  params: Params<
    t_TeamsUpdateInOrgParamSchema,
    void,
    t_TeamsUpdateInOrgBodySchema | undefined
  >,
  respond: TeamsUpdateInOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_full>
  | Response<201, t_team_full>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type TeamsDeleteInOrgResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type TeamsDeleteInOrg = (
  params: Params<t_TeamsDeleteInOrgParamSchema, void, void>,
  respond: TeamsDeleteInOrgResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type TeamsListDiscussionsInOrgResponder = {
  with200(): KoaRuntimeResponse<t_team_discussion[]>
} & KoaRuntimeResponder

export type TeamsListDiscussionsInOrg = (
  params: Params<
    t_TeamsListDiscussionsInOrgParamSchema,
    t_TeamsListDiscussionsInOrgQuerySchema,
    void
  >,
  respond: TeamsListDiscussionsInOrgResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_team_discussion[]>>

export type TeamsCreateDiscussionInOrgResponder = {
  with201(): KoaRuntimeResponse<t_team_discussion>
} & KoaRuntimeResponder

export type TeamsCreateDiscussionInOrg = (
  params: Params<
    t_TeamsCreateDiscussionInOrgParamSchema,
    void,
    t_TeamsCreateDiscussionInOrgBodySchema
  >,
  respond: TeamsCreateDiscussionInOrgResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_team_discussion>>

export type TeamsGetDiscussionInOrgResponder = {
  with200(): KoaRuntimeResponse<t_team_discussion>
} & KoaRuntimeResponder

export type TeamsGetDiscussionInOrg = (
  params: Params<t_TeamsGetDiscussionInOrgParamSchema, void, void>,
  respond: TeamsGetDiscussionInOrgResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_team_discussion>>

export type TeamsUpdateDiscussionInOrgResponder = {
  with200(): KoaRuntimeResponse<t_team_discussion>
} & KoaRuntimeResponder

export type TeamsUpdateDiscussionInOrg = (
  params: Params<
    t_TeamsUpdateDiscussionInOrgParamSchema,
    void,
    t_TeamsUpdateDiscussionInOrgBodySchema | undefined
  >,
  respond: TeamsUpdateDiscussionInOrgResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_team_discussion>>

export type TeamsDeleteDiscussionInOrgResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type TeamsDeleteDiscussionInOrg = (
  params: Params<t_TeamsDeleteDiscussionInOrgParamSchema, void, void>,
  respond: TeamsDeleteDiscussionInOrgResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type TeamsListDiscussionCommentsInOrgResponder = {
  with200(): KoaRuntimeResponse<t_team_discussion_comment[]>
} & KoaRuntimeResponder

export type TeamsListDiscussionCommentsInOrg = (
  params: Params<
    t_TeamsListDiscussionCommentsInOrgParamSchema,
    t_TeamsListDiscussionCommentsInOrgQuerySchema,
    void
  >,
  respond: TeamsListDiscussionCommentsInOrgResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_team_discussion_comment[]>
>

export type TeamsCreateDiscussionCommentInOrgResponder = {
  with201(): KoaRuntimeResponse<t_team_discussion_comment>
} & KoaRuntimeResponder

export type TeamsCreateDiscussionCommentInOrg = (
  params: Params<
    t_TeamsCreateDiscussionCommentInOrgParamSchema,
    void,
    t_TeamsCreateDiscussionCommentInOrgBodySchema
  >,
  respond: TeamsCreateDiscussionCommentInOrgResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<201, t_team_discussion_comment>
>

export type TeamsGetDiscussionCommentInOrgResponder = {
  with200(): KoaRuntimeResponse<t_team_discussion_comment>
} & KoaRuntimeResponder

export type TeamsGetDiscussionCommentInOrg = (
  params: Params<t_TeamsGetDiscussionCommentInOrgParamSchema, void, void>,
  respond: TeamsGetDiscussionCommentInOrgResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_team_discussion_comment>
>

export type TeamsUpdateDiscussionCommentInOrgResponder = {
  with200(): KoaRuntimeResponse<t_team_discussion_comment>
} & KoaRuntimeResponder

export type TeamsUpdateDiscussionCommentInOrg = (
  params: Params<
    t_TeamsUpdateDiscussionCommentInOrgParamSchema,
    void,
    t_TeamsUpdateDiscussionCommentInOrgBodySchema
  >,
  respond: TeamsUpdateDiscussionCommentInOrgResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_team_discussion_comment>
>

export type TeamsDeleteDiscussionCommentInOrgResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type TeamsDeleteDiscussionCommentInOrg = (
  params: Params<t_TeamsDeleteDiscussionCommentInOrgParamSchema, void, void>,
  respond: TeamsDeleteDiscussionCommentInOrgResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ReactionsListForTeamDiscussionCommentInOrgResponder = {
  with200(): KoaRuntimeResponse<t_reaction[]>
} & KoaRuntimeResponder

export type ReactionsListForTeamDiscussionCommentInOrg = (
  params: Params<
    t_ReactionsListForTeamDiscussionCommentInOrgParamSchema,
    t_ReactionsListForTeamDiscussionCommentInOrgQuerySchema,
    void
  >,
  respond: ReactionsListForTeamDiscussionCommentInOrgResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_reaction[]>>

export type ReactionsCreateForTeamDiscussionCommentInOrgResponder = {
  with200(): KoaRuntimeResponse<t_reaction>
  with201(): KoaRuntimeResponse<t_reaction>
} & KoaRuntimeResponder

export type ReactionsCreateForTeamDiscussionCommentInOrg = (
  params: Params<
    t_ReactionsCreateForTeamDiscussionCommentInOrgParamSchema,
    void,
    t_ReactionsCreateForTeamDiscussionCommentInOrgBodySchema
  >,
  respond: ReactionsCreateForTeamDiscussionCommentInOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_reaction>
  | Response<201, t_reaction>
>

export type ReactionsDeleteForTeamDiscussionCommentResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReactionsDeleteForTeamDiscussionComment = (
  params: Params<
    t_ReactionsDeleteForTeamDiscussionCommentParamSchema,
    void,
    void
  >,
  respond: ReactionsDeleteForTeamDiscussionCommentResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ReactionsListForTeamDiscussionInOrgResponder = {
  with200(): KoaRuntimeResponse<t_reaction[]>
} & KoaRuntimeResponder

export type ReactionsListForTeamDiscussionInOrg = (
  params: Params<
    t_ReactionsListForTeamDiscussionInOrgParamSchema,
    t_ReactionsListForTeamDiscussionInOrgQuerySchema,
    void
  >,
  respond: ReactionsListForTeamDiscussionInOrgResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_reaction[]>>

export type ReactionsCreateForTeamDiscussionInOrgResponder = {
  with200(): KoaRuntimeResponse<t_reaction>
  with201(): KoaRuntimeResponse<t_reaction>
} & KoaRuntimeResponder

export type ReactionsCreateForTeamDiscussionInOrg = (
  params: Params<
    t_ReactionsCreateForTeamDiscussionInOrgParamSchema,
    void,
    t_ReactionsCreateForTeamDiscussionInOrgBodySchema
  >,
  respond: ReactionsCreateForTeamDiscussionInOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_reaction>
  | Response<201, t_reaction>
>

export type ReactionsDeleteForTeamDiscussionResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReactionsDeleteForTeamDiscussion = (
  params: Params<t_ReactionsDeleteForTeamDiscussionParamSchema, void, void>,
  respond: ReactionsDeleteForTeamDiscussionResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type TeamsListPendingInvitationsInOrgResponder = {
  with200(): KoaRuntimeResponse<t_organization_invitation[]>
} & KoaRuntimeResponder

export type TeamsListPendingInvitationsInOrg = (
  params: Params<
    t_TeamsListPendingInvitationsInOrgParamSchema,
    t_TeamsListPendingInvitationsInOrgQuerySchema,
    void
  >,
  respond: TeamsListPendingInvitationsInOrgResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_organization_invitation[]>
>

export type TeamsListMembersInOrgResponder = {
  with200(): KoaRuntimeResponse<t_simple_user[]>
} & KoaRuntimeResponder

export type TeamsListMembersInOrg = (
  params: Params<
    t_TeamsListMembersInOrgParamSchema,
    t_TeamsListMembersInOrgQuerySchema,
    void
  >,
  respond: TeamsListMembersInOrgResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_simple_user[]>>

export type TeamsGetMembershipForUserInOrgResponder = {
  with200(): KoaRuntimeResponse<t_team_membership>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type TeamsGetMembershipForUserInOrg = (
  params: Params<t_TeamsGetMembershipForUserInOrgParamSchema, void, void>,
  respond: TeamsGetMembershipForUserInOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_membership>
  | Response<404, void>
>

export type TeamsAddOrUpdateMembershipForUserInOrgResponder = {
  with200(): KoaRuntimeResponse<t_team_membership>
  with403(): KoaRuntimeResponse<void>
  with422(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type TeamsAddOrUpdateMembershipForUserInOrg = (
  params: Params<
    t_TeamsAddOrUpdateMembershipForUserInOrgParamSchema,
    void,
    t_TeamsAddOrUpdateMembershipForUserInOrgBodySchema | undefined
  >,
  respond: TeamsAddOrUpdateMembershipForUserInOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_membership>
  | Response<403, void>
  | Response<422, void>
>

export type TeamsRemoveMembershipForUserInOrgResponder = {
  with204(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type TeamsRemoveMembershipForUserInOrg = (
  params: Params<t_TeamsRemoveMembershipForUserInOrgParamSchema, void, void>,
  respond: TeamsRemoveMembershipForUserInOrgResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<403, void>
>

export type TeamsListProjectsInOrgResponder = {
  with200(): KoaRuntimeResponse<t_team_project[]>
} & KoaRuntimeResponder

export type TeamsListProjectsInOrg = (
  params: Params<
    t_TeamsListProjectsInOrgParamSchema,
    t_TeamsListProjectsInOrgQuerySchema,
    void
  >,
  respond: TeamsListProjectsInOrgResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_team_project[]>>

export type TeamsCheckPermissionsForProjectInOrgResponder = {
  with200(): KoaRuntimeResponse<t_team_project>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type TeamsCheckPermissionsForProjectInOrg = (
  params: Params<t_TeamsCheckPermissionsForProjectInOrgParamSchema, void, void>,
  respond: TeamsCheckPermissionsForProjectInOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_project>
  | Response<404, void>
>

export type TeamsAddOrUpdateProjectPermissionsInOrgResponder = {
  with204(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<{
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type TeamsAddOrUpdateProjectPermissionsInOrg = (
  params: Params<
    t_TeamsAddOrUpdateProjectPermissionsInOrgParamSchema,
    void,
    t_TeamsAddOrUpdateProjectPermissionsInOrgBodySchema | undefined
  >,
  respond: TeamsAddOrUpdateProjectPermissionsInOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<
      403,
      {
        documentation_url?: string
        message?: string
      }
    >
>

export type TeamsRemoveProjectInOrgResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type TeamsRemoveProjectInOrg = (
  params: Params<t_TeamsRemoveProjectInOrgParamSchema, void, void>,
  respond: TeamsRemoveProjectInOrgResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type TeamsListReposInOrgResponder = {
  with200(): KoaRuntimeResponse<t_minimal_repository[]>
} & KoaRuntimeResponder

export type TeamsListReposInOrg = (
  params: Params<
    t_TeamsListReposInOrgParamSchema,
    t_TeamsListReposInOrgQuerySchema,
    void
  >,
  respond: TeamsListReposInOrgResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_minimal_repository[]>
>

export type TeamsCheckPermissionsForRepoInOrgResponder = {
  with200(): KoaRuntimeResponse<t_team_repository>
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type TeamsCheckPermissionsForRepoInOrg = (
  params: Params<t_TeamsCheckPermissionsForRepoInOrgParamSchema, void, void>,
  respond: TeamsCheckPermissionsForRepoInOrgResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_repository>
  | Response<204, void>
  | Response<404, void>
>

export type TeamsAddOrUpdateRepoPermissionsInOrgResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type TeamsAddOrUpdateRepoPermissionsInOrg = (
  params: Params<
    t_TeamsAddOrUpdateRepoPermissionsInOrgParamSchema,
    void,
    t_TeamsAddOrUpdateRepoPermissionsInOrgBodySchema | undefined
  >,
  respond: TeamsAddOrUpdateRepoPermissionsInOrgResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type TeamsRemoveRepoInOrgResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type TeamsRemoveRepoInOrg = (
  params: Params<t_TeamsRemoveRepoInOrgParamSchema, void, void>,
  respond: TeamsRemoveRepoInOrgResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type TeamsListChildInOrgResponder = {
  with200(): KoaRuntimeResponse<t_team[]>
} & KoaRuntimeResponder

export type TeamsListChildInOrg = (
  params: Params<
    t_TeamsListChildInOrgParamSchema,
    t_TeamsListChildInOrgQuerySchema,
    void
  >,
  respond: TeamsListChildInOrgResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_team[]>>

export type OrgsEnableOrDisableSecurityProductOnAllOrgReposResponder = {
  with204(): KoaRuntimeResponse<void>
  with422(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type OrgsEnableOrDisableSecurityProductOnAllOrgRepos = (
  params: Params<
    t_OrgsEnableOrDisableSecurityProductOnAllOrgReposParamSchema,
    void,
    t_OrgsEnableOrDisableSecurityProductOnAllOrgReposBodySchema | undefined
  >,
  respond: OrgsEnableOrDisableSecurityProductOnAllOrgReposResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<422, void>
>

export type ProjectsGetCardResponder = {
  with200(): KoaRuntimeResponse<t_project_card>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ProjectsGetCard = (
  params: Params<t_ProjectsGetCardParamSchema, void, void>,
  respond: ProjectsGetCardResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_project_card>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type ProjectsUpdateCardResponder = {
  with200(): KoaRuntimeResponse<t_project_card>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type ProjectsUpdateCard = (
  params: Params<
    t_ProjectsUpdateCardParamSchema,
    void,
    t_ProjectsUpdateCardBodySchema | undefined
  >,
  respond: ProjectsUpdateCardResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_project_card>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type ProjectsDeleteCardResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<{
    documentation_url?: string
    errors?: string[]
    message?: string
  }>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ProjectsDeleteCard = (
  params: Params<t_ProjectsDeleteCardParamSchema, void, void>,
  respond: ProjectsDeleteCardResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<
      403,
      {
        documentation_url?: string
        errors?: string[]
        message?: string
      }
    >
  | Response<404, t_basic_error>
>

export type ProjectsMoveCardResponder = {
  with201(): KoaRuntimeResponse<EmptyObject>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<{
    documentation_url?: string
    errors?: {
      code?: string
      field?: string
      message?: string
      resource?: string
    }[]
    message?: string
  }>
  with422(): KoaRuntimeResponse<t_validation_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    errors?: {
      code?: string
      message?: string
    }[]
    message?: string
  }>
} & KoaRuntimeResponder

export type ProjectsMoveCard = (
  params: Params<
    t_ProjectsMoveCardParamSchema,
    void,
    t_ProjectsMoveCardBodySchema
  >,
  respond: ProjectsMoveCardResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, EmptyObject>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<
      403,
      {
        documentation_url?: string
        errors?: {
          code?: string
          field?: string
          message?: string
          resource?: string
        }[]
        message?: string
      }
    >
  | Response<422, t_validation_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        errors?: {
          code?: string
          message?: string
        }[]
        message?: string
      }
    >
>

export type ProjectsGetColumnResponder = {
  with200(): KoaRuntimeResponse<t_project_column>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ProjectsGetColumn = (
  params: Params<t_ProjectsGetColumnParamSchema, void, void>,
  respond: ProjectsGetColumnResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_project_column>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type ProjectsUpdateColumnResponder = {
  with200(): KoaRuntimeResponse<t_project_column>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ProjectsUpdateColumn = (
  params: Params<
    t_ProjectsUpdateColumnParamSchema,
    void,
    t_ProjectsUpdateColumnBodySchema
  >,
  respond: ProjectsUpdateColumnResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_project_column>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type ProjectsDeleteColumnResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ProjectsDeleteColumn = (
  params: Params<t_ProjectsDeleteColumnParamSchema, void, void>,
  respond: ProjectsDeleteColumnResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type ProjectsListCardsResponder = {
  with200(): KoaRuntimeResponse<t_project_card[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ProjectsListCards = (
  params: Params<
    t_ProjectsListCardsParamSchema,
    t_ProjectsListCardsQuerySchema,
    void
  >,
  respond: ProjectsListCardsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_project_card[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type ProjectsCreateCardResponder = {
  with201(): KoaRuntimeResponse<t_project_card>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error | t_validation_error_simple>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    errors?: {
      code?: string
      message?: string
    }[]
    message?: string
  }>
} & KoaRuntimeResponder

export type ProjectsCreateCard = (
  params: Params<
    t_ProjectsCreateCardParamSchema,
    void,
    t_ProjectsCreateCardBodySchema
  >,
  respond: ProjectsCreateCardResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_project_card>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error | t_validation_error_simple>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        errors?: {
          code?: string
          message?: string
        }[]
        message?: string
      }
    >
>

export type ProjectsMoveColumnResponder = {
  with201(): KoaRuntimeResponse<EmptyObject>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type ProjectsMoveColumn = (
  params: Params<
    t_ProjectsMoveColumnParamSchema,
    void,
    t_ProjectsMoveColumnBodySchema
  >,
  respond: ProjectsMoveColumnResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, EmptyObject>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type ProjectsGetResponder = {
  with200(): KoaRuntimeResponse<t_project>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ProjectsGet = (
  params: Params<t_ProjectsGetParamSchema, void, void>,
  respond: ProjectsGetResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_project>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type ProjectsUpdateResponder = {
  with200(): KoaRuntimeResponse<t_project>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<{
    documentation_url?: string
    errors?: string[]
    message?: string
  }>
  with404(): KoaRuntimeResponse<void>
  with410(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type ProjectsUpdate = (
  params: Params<
    t_ProjectsUpdateParamSchema,
    void,
    t_ProjectsUpdateBodySchema | undefined
  >,
  respond: ProjectsUpdateResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_project>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<
      403,
      {
        documentation_url?: string
        errors?: string[]
        message?: string
      }
    >
  | Response<404, void>
  | Response<410, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type ProjectsDeleteResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<{
    documentation_url?: string
    errors?: string[]
    message?: string
  }>
  with404(): KoaRuntimeResponse<t_basic_error>
  with410(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ProjectsDelete = (
  params: Params<t_ProjectsDeleteParamSchema, void, void>,
  respond: ProjectsDeleteResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<
      403,
      {
        documentation_url?: string
        errors?: string[]
        message?: string
      }
    >
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
>

export type ProjectsListCollaboratorsResponder = {
  with200(): KoaRuntimeResponse<t_simple_user[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ProjectsListCollaborators = (
  params: Params<
    t_ProjectsListCollaboratorsParamSchema,
    t_ProjectsListCollaboratorsQuerySchema,
    void
  >,
  respond: ProjectsListCollaboratorsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type ProjectsAddCollaboratorResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ProjectsAddCollaborator = (
  params: Params<
    t_ProjectsAddCollaboratorParamSchema,
    void,
    t_ProjectsAddCollaboratorBodySchema | undefined
  >,
  respond: ProjectsAddCollaboratorResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type ProjectsRemoveCollaboratorResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ProjectsRemoveCollaborator = (
  params: Params<t_ProjectsRemoveCollaboratorParamSchema, void, void>,
  respond: ProjectsRemoveCollaboratorResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type ProjectsGetPermissionForUserResponder = {
  with200(): KoaRuntimeResponse<t_project_collaborator_permission>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ProjectsGetPermissionForUser = (
  params: Params<t_ProjectsGetPermissionForUserParamSchema, void, void>,
  respond: ProjectsGetPermissionForUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_project_collaborator_permission>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type ProjectsListColumnsResponder = {
  with200(): KoaRuntimeResponse<t_project_column[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ProjectsListColumns = (
  params: Params<
    t_ProjectsListColumnsParamSchema,
    t_ProjectsListColumnsQuerySchema,
    void
  >,
  respond: ProjectsListColumnsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_project_column[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type ProjectsCreateColumnResponder = {
  with201(): KoaRuntimeResponse<t_project_column>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type ProjectsCreateColumn = (
  params: Params<
    t_ProjectsCreateColumnParamSchema,
    void,
    t_ProjectsCreateColumnBodySchema
  >,
  respond: ProjectsCreateColumnResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_project_column>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type RateLimitGetResponder = {
  with200(): KoaRuntimeResponse<t_rate_limit_overview>
  with304(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type RateLimitGet = (
  params: Params<void, void, void>,
  respond: RateLimitGetResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_rate_limit_overview>
  | Response<304, void>
  | Response<404, t_basic_error>
>

export type ReposGetResponder = {
  with200(): KoaRuntimeResponse<t_full_repository>
  with301(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGet = (
  params: Params<t_ReposGetParamSchema, void, void>,
  respond: ReposGetResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_full_repository>
  | Response<301, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type ReposUpdateResponder = {
  with200(): KoaRuntimeResponse<t_full_repository>
  with307(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposUpdate = (
  params: Params<
    t_ReposUpdateParamSchema,
    void,
    t_ReposUpdateBodySchema | undefined
  >,
  respond: ReposUpdateResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_full_repository>
  | Response<307, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type ReposDeleteResponder = {
  with204(): KoaRuntimeResponse<void>
  with307(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<{
    documentation_url?: string
    message?: string
  }>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposDelete = (
  params: Params<t_ReposDeleteParamSchema, void, void>,
  respond: ReposDeleteResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<307, t_basic_error>
  | Response<
      403,
      {
        documentation_url?: string
        message?: string
      }
    >
  | Response<404, t_basic_error>
>

export type ActionsListArtifactsForRepoResponder = {
  with200(): KoaRuntimeResponse<{
    artifacts: t_artifact[]
    total_count: number
  }>
} & KoaRuntimeResponder

export type ActionsListArtifactsForRepo = (
  params: Params<
    t_ActionsListArtifactsForRepoParamSchema,
    t_ActionsListArtifactsForRepoQuerySchema,
    void
  >,
  respond: ActionsListArtifactsForRepoResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        artifacts: t_artifact[]
        total_count: number
      }
    >
>

export type ActionsGetArtifactResponder = {
  with200(): KoaRuntimeResponse<t_artifact>
} & KoaRuntimeResponder

export type ActionsGetArtifact = (
  params: Params<t_ActionsGetArtifactParamSchema, void, void>,
  respond: ActionsGetArtifactResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_artifact>>

export type ActionsDeleteArtifactResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsDeleteArtifact = (
  params: Params<t_ActionsDeleteArtifactParamSchema, void, void>,
  respond: ActionsDeleteArtifactResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsDownloadArtifactResponder = {
  with302(): KoaRuntimeResponse<void>
  with410(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ActionsDownloadArtifact = (
  params: Params<t_ActionsDownloadArtifactParamSchema, void, void>,
  respond: ActionsDownloadArtifactResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<302, void>
  | Response<410, t_basic_error>
>

export type ActionsGetActionsCacheUsageResponder = {
  with200(): KoaRuntimeResponse<t_actions_cache_usage_by_repository>
} & KoaRuntimeResponder

export type ActionsGetActionsCacheUsage = (
  params: Params<t_ActionsGetActionsCacheUsageParamSchema, void, void>,
  respond: ActionsGetActionsCacheUsageResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_actions_cache_usage_by_repository>
>

export type ActionsGetActionsCacheListResponder = {
  with200(): KoaRuntimeResponse<t_actions_cache_list>
} & KoaRuntimeResponder

export type ActionsGetActionsCacheList = (
  params: Params<
    t_ActionsGetActionsCacheListParamSchema,
    t_ActionsGetActionsCacheListQuerySchema,
    void
  >,
  respond: ActionsGetActionsCacheListResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_actions_cache_list>>

export type ActionsDeleteActionsCacheByKeyResponder = {
  with200(): KoaRuntimeResponse<t_actions_cache_list>
} & KoaRuntimeResponder

export type ActionsDeleteActionsCacheByKey = (
  params: Params<
    t_ActionsDeleteActionsCacheByKeyParamSchema,
    t_ActionsDeleteActionsCacheByKeyQuerySchema,
    void
  >,
  respond: ActionsDeleteActionsCacheByKeyResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_actions_cache_list>>

export type ActionsDeleteActionsCacheByIdResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsDeleteActionsCacheById = (
  params: Params<t_ActionsDeleteActionsCacheByIdParamSchema, void, void>,
  respond: ActionsDeleteActionsCacheByIdResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsGetJobForWorkflowRunResponder = {
  with200(): KoaRuntimeResponse<t_job>
} & KoaRuntimeResponder

export type ActionsGetJobForWorkflowRun = (
  params: Params<t_ActionsGetJobForWorkflowRunParamSchema, void, void>,
  respond: ActionsGetJobForWorkflowRunResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_job>>

export type ActionsDownloadJobLogsForWorkflowRunResponder = {
  with302(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsDownloadJobLogsForWorkflowRun = (
  params: Params<t_ActionsDownloadJobLogsForWorkflowRunParamSchema, void, void>,
  respond: ActionsDownloadJobLogsForWorkflowRunResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<302, void>>

export type ActionsReRunJobForWorkflowRunResponder = {
  with201(): KoaRuntimeResponse<t_empty_object>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ActionsReRunJobForWorkflowRun = (
  params: Params<
    t_ActionsReRunJobForWorkflowRunParamSchema,
    void,
    t_ActionsReRunJobForWorkflowRunBodySchema | undefined
  >,
  respond: ActionsReRunJobForWorkflowRunResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<403, t_basic_error>
>

export type ActionsGetCustomOidcSubClaimForRepoResponder = {
  with200(): KoaRuntimeResponse<t_oidc_custom_sub_repo>
  with400(): KoaRuntimeResponse<t_scim_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ActionsGetCustomOidcSubClaimForRepo = (
  params: Params<t_ActionsGetCustomOidcSubClaimForRepoParamSchema, void, void>,
  respond: ActionsGetCustomOidcSubClaimForRepoResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_oidc_custom_sub_repo>
  | Response<400, t_scim_error>
  | Response<404, t_basic_error>
>

export type ActionsSetCustomOidcSubClaimForRepoResponder = {
  with201(): KoaRuntimeResponse<t_empty_object>
  with400(): KoaRuntimeResponse<t_scim_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type ActionsSetCustomOidcSubClaimForRepo = (
  params: Params<
    t_ActionsSetCustomOidcSubClaimForRepoParamSchema,
    void,
    t_ActionsSetCustomOidcSubClaimForRepoBodySchema
  >,
  respond: ActionsSetCustomOidcSubClaimForRepoResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<400, t_scim_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type ActionsListRepoOrganizationSecretsResponder = {
  with200(): KoaRuntimeResponse<{
    secrets: t_actions_secret[]
    total_count: number
  }>
} & KoaRuntimeResponder

export type ActionsListRepoOrganizationSecrets = (
  params: Params<
    t_ActionsListRepoOrganizationSecretsParamSchema,
    t_ActionsListRepoOrganizationSecretsQuerySchema,
    void
  >,
  respond: ActionsListRepoOrganizationSecretsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        secrets: t_actions_secret[]
        total_count: number
      }
    >
>

export type ActionsListRepoOrganizationVariablesResponder = {
  with200(): KoaRuntimeResponse<{
    total_count: number
    variables: t_actions_variable[]
  }>
} & KoaRuntimeResponder

export type ActionsListRepoOrganizationVariables = (
  params: Params<
    t_ActionsListRepoOrganizationVariablesParamSchema,
    t_ActionsListRepoOrganizationVariablesQuerySchema,
    void
  >,
  respond: ActionsListRepoOrganizationVariablesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        total_count: number
        variables: t_actions_variable[]
      }
    >
>

export type ActionsGetGithubActionsPermissionsRepositoryResponder = {
  with200(): KoaRuntimeResponse<t_actions_repository_permissions>
} & KoaRuntimeResponder

export type ActionsGetGithubActionsPermissionsRepository = (
  params: Params<
    t_ActionsGetGithubActionsPermissionsRepositoryParamSchema,
    void,
    void
  >,
  respond: ActionsGetGithubActionsPermissionsRepositoryResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_actions_repository_permissions>
>

export type ActionsSetGithubActionsPermissionsRepositoryResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsSetGithubActionsPermissionsRepository = (
  params: Params<
    t_ActionsSetGithubActionsPermissionsRepositoryParamSchema,
    void,
    t_ActionsSetGithubActionsPermissionsRepositoryBodySchema
  >,
  respond: ActionsSetGithubActionsPermissionsRepositoryResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsGetWorkflowAccessToRepositoryResponder = {
  with200(): KoaRuntimeResponse<t_actions_workflow_access_to_repository>
} & KoaRuntimeResponder

export type ActionsGetWorkflowAccessToRepository = (
  params: Params<t_ActionsGetWorkflowAccessToRepositoryParamSchema, void, void>,
  respond: ActionsGetWorkflowAccessToRepositoryResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_actions_workflow_access_to_repository>
>

export type ActionsSetWorkflowAccessToRepositoryResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsSetWorkflowAccessToRepository = (
  params: Params<
    t_ActionsSetWorkflowAccessToRepositoryParamSchema,
    void,
    t_ActionsSetWorkflowAccessToRepositoryBodySchema
  >,
  respond: ActionsSetWorkflowAccessToRepositoryResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsGetAllowedActionsRepositoryResponder = {
  with200(): KoaRuntimeResponse<t_selected_actions>
} & KoaRuntimeResponder

export type ActionsGetAllowedActionsRepository = (
  params: Params<t_ActionsGetAllowedActionsRepositoryParamSchema, void, void>,
  respond: ActionsGetAllowedActionsRepositoryResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_selected_actions>>

export type ActionsSetAllowedActionsRepositoryResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsSetAllowedActionsRepository = (
  params: Params<
    t_ActionsSetAllowedActionsRepositoryParamSchema,
    void,
    t_ActionsSetAllowedActionsRepositoryBodySchema | undefined
  >,
  respond: ActionsSetAllowedActionsRepositoryResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryResponder =
  {
    with200(): KoaRuntimeResponse<t_actions_get_default_workflow_permissions>
  } & KoaRuntimeResponder

export type ActionsGetGithubActionsDefaultWorkflowPermissionsRepository = (
  params: Params<
    t_ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema,
    void,
    void
  >,
  respond: ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_actions_get_default_workflow_permissions>
>

export type ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryResponder =
  {
    with204(): KoaRuntimeResponse<void>
    with409(): KoaRuntimeResponse<void>
  } & KoaRuntimeResponder

export type ActionsSetGithubActionsDefaultWorkflowPermissionsRepository = (
  params: Params<
    t_ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema,
    void,
    t_ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryBodySchema
  >,
  respond: ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<409, void>
>

export type ActionsListSelfHostedRunnersForRepoResponder = {
  with200(): KoaRuntimeResponse<{
    runners: t_runner[]
    total_count: number
  }>
} & KoaRuntimeResponder

export type ActionsListSelfHostedRunnersForRepo = (
  params: Params<
    t_ActionsListSelfHostedRunnersForRepoParamSchema,
    t_ActionsListSelfHostedRunnersForRepoQuerySchema,
    void
  >,
  respond: ActionsListSelfHostedRunnersForRepoResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        runners: t_runner[]
        total_count: number
      }
    >
>

export type ActionsListRunnerApplicationsForRepoResponder = {
  with200(): KoaRuntimeResponse<t_runner_application[]>
} & KoaRuntimeResponder

export type ActionsListRunnerApplicationsForRepo = (
  params: Params<t_ActionsListRunnerApplicationsForRepoParamSchema, void, void>,
  respond: ActionsListRunnerApplicationsForRepoResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_runner_application[]>
>

export type ActionsGenerateRunnerJitconfigForRepoResponder = {
  with201(): KoaRuntimeResponse<{
    encoded_jit_config: string
    runner: t_runner
  }>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type ActionsGenerateRunnerJitconfigForRepo = (
  params: Params<
    t_ActionsGenerateRunnerJitconfigForRepoParamSchema,
    void,
    t_ActionsGenerateRunnerJitconfigForRepoBodySchema
  >,
  respond: ActionsGenerateRunnerJitconfigForRepoResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      201,
      {
        encoded_jit_config: string
        runner: t_runner
      }
    >
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type ActionsCreateRegistrationTokenForRepoResponder = {
  with201(): KoaRuntimeResponse<t_authentication_token>
} & KoaRuntimeResponder

export type ActionsCreateRegistrationTokenForRepo = (
  params: Params<
    t_ActionsCreateRegistrationTokenForRepoParamSchema,
    void,
    void
  >,
  respond: ActionsCreateRegistrationTokenForRepoResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<201, t_authentication_token>
>

export type ActionsCreateRemoveTokenForRepoResponder = {
  with201(): KoaRuntimeResponse<t_authentication_token>
} & KoaRuntimeResponder

export type ActionsCreateRemoveTokenForRepo = (
  params: Params<t_ActionsCreateRemoveTokenForRepoParamSchema, void, void>,
  respond: ActionsCreateRemoveTokenForRepoResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<201, t_authentication_token>
>

export type ActionsGetSelfHostedRunnerForRepoResponder = {
  with200(): KoaRuntimeResponse<t_runner>
} & KoaRuntimeResponder

export type ActionsGetSelfHostedRunnerForRepo = (
  params: Params<t_ActionsGetSelfHostedRunnerForRepoParamSchema, void, void>,
  respond: ActionsGetSelfHostedRunnerForRepoResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_runner>>

export type ActionsDeleteSelfHostedRunnerFromRepoResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsDeleteSelfHostedRunnerFromRepo = (
  params: Params<
    t_ActionsDeleteSelfHostedRunnerFromRepoParamSchema,
    void,
    void
  >,
  respond: ActionsDeleteSelfHostedRunnerFromRepoResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsListLabelsForSelfHostedRunnerForRepoResponder = {
  with200(): KoaRuntimeResponse<{
    labels: t_runner_label[]
    total_count: number
  }>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ActionsListLabelsForSelfHostedRunnerForRepo = (
  params: Params<
    t_ActionsListLabelsForSelfHostedRunnerForRepoParamSchema,
    void,
    void
  >,
  respond: ActionsListLabelsForSelfHostedRunnerForRepoResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        labels: t_runner_label[]
        total_count: number
      }
    >
  | Response<404, t_basic_error>
>

export type ActionsAddCustomLabelsToSelfHostedRunnerForRepoResponder = {
  with200(): KoaRuntimeResponse<{
    labels: t_runner_label[]
    total_count: number
  }>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type ActionsAddCustomLabelsToSelfHostedRunnerForRepo = (
  params: Params<
    t_ActionsAddCustomLabelsToSelfHostedRunnerForRepoParamSchema,
    void,
    t_ActionsAddCustomLabelsToSelfHostedRunnerForRepoBodySchema
  >,
  respond: ActionsAddCustomLabelsToSelfHostedRunnerForRepoResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        labels: t_runner_label[]
        total_count: number
      }
    >
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type ActionsSetCustomLabelsForSelfHostedRunnerForRepoResponder = {
  with200(): KoaRuntimeResponse<{
    labels: t_runner_label[]
    total_count: number
  }>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type ActionsSetCustomLabelsForSelfHostedRunnerForRepo = (
  params: Params<
    t_ActionsSetCustomLabelsForSelfHostedRunnerForRepoParamSchema,
    void,
    t_ActionsSetCustomLabelsForSelfHostedRunnerForRepoBodySchema
  >,
  respond: ActionsSetCustomLabelsForSelfHostedRunnerForRepoResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        labels: t_runner_label[]
        total_count: number
      }
    >
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoResponder = {
  with200(): KoaRuntimeResponse<{
    labels: t_runner_label[]
    total_count: number
  }>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo = (
  params: Params<
    t_ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoParamSchema,
    void,
    void
  >,
  respond: ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        labels: t_runner_label[]
        total_count: number
      }
    >
  | Response<404, t_basic_error>
>

export type ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponder = {
  with200(): KoaRuntimeResponse<{
    labels: t_runner_label[]
    total_count: number
  }>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type ActionsRemoveCustomLabelFromSelfHostedRunnerForRepo = (
  params: Params<
    t_ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoParamSchema,
    void,
    void
  >,
  respond: ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        labels: t_runner_label[]
        total_count: number
      }
    >
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type ActionsListWorkflowRunsForRepoResponder = {
  with200(): KoaRuntimeResponse<{
    total_count: number
    workflow_runs: t_workflow_run[]
  }>
} & KoaRuntimeResponder

export type ActionsListWorkflowRunsForRepo = (
  params: Params<
    t_ActionsListWorkflowRunsForRepoParamSchema,
    t_ActionsListWorkflowRunsForRepoQuerySchema,
    void
  >,
  respond: ActionsListWorkflowRunsForRepoResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        total_count: number
        workflow_runs: t_workflow_run[]
      }
    >
>

export type ActionsGetWorkflowRunResponder = {
  with200(): KoaRuntimeResponse<t_workflow_run>
} & KoaRuntimeResponder

export type ActionsGetWorkflowRun = (
  params: Params<
    t_ActionsGetWorkflowRunParamSchema,
    t_ActionsGetWorkflowRunQuerySchema,
    void
  >,
  respond: ActionsGetWorkflowRunResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_workflow_run>>

export type ActionsDeleteWorkflowRunResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsDeleteWorkflowRun = (
  params: Params<t_ActionsDeleteWorkflowRunParamSchema, void, void>,
  respond: ActionsDeleteWorkflowRunResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsGetReviewsForRunResponder = {
  with200(): KoaRuntimeResponse<t_environment_approvals[]>
} & KoaRuntimeResponder

export type ActionsGetReviewsForRun = (
  params: Params<t_ActionsGetReviewsForRunParamSchema, void, void>,
  respond: ActionsGetReviewsForRunResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_environment_approvals[]>
>

export type ActionsApproveWorkflowRunResponder = {
  with201(): KoaRuntimeResponse<t_empty_object>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ActionsApproveWorkflowRun = (
  params: Params<t_ActionsApproveWorkflowRunParamSchema, void, void>,
  respond: ActionsApproveWorkflowRunResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type ActionsListWorkflowRunArtifactsResponder = {
  with200(): KoaRuntimeResponse<{
    artifacts: t_artifact[]
    total_count: number
  }>
} & KoaRuntimeResponder

export type ActionsListWorkflowRunArtifacts = (
  params: Params<
    t_ActionsListWorkflowRunArtifactsParamSchema,
    t_ActionsListWorkflowRunArtifactsQuerySchema,
    void
  >,
  respond: ActionsListWorkflowRunArtifactsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        artifacts: t_artifact[]
        total_count: number
      }
    >
>

export type ActionsGetWorkflowRunAttemptResponder = {
  with200(): KoaRuntimeResponse<t_workflow_run>
} & KoaRuntimeResponder

export type ActionsGetWorkflowRunAttempt = (
  params: Params<
    t_ActionsGetWorkflowRunAttemptParamSchema,
    t_ActionsGetWorkflowRunAttemptQuerySchema,
    void
  >,
  respond: ActionsGetWorkflowRunAttemptResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_workflow_run>>

export type ActionsListJobsForWorkflowRunAttemptResponder = {
  with200(): KoaRuntimeResponse<{
    jobs: t_job[]
    total_count: number
  }>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ActionsListJobsForWorkflowRunAttempt = (
  params: Params<
    t_ActionsListJobsForWorkflowRunAttemptParamSchema,
    t_ActionsListJobsForWorkflowRunAttemptQuerySchema,
    void
  >,
  respond: ActionsListJobsForWorkflowRunAttemptResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        jobs: t_job[]
        total_count: number
      }
    >
  | Response<404, t_basic_error>
>

export type ActionsDownloadWorkflowRunAttemptLogsResponder = {
  with302(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsDownloadWorkflowRunAttemptLogs = (
  params: Params<
    t_ActionsDownloadWorkflowRunAttemptLogsParamSchema,
    void,
    void
  >,
  respond: ActionsDownloadWorkflowRunAttemptLogsResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<302, void>>

export type ActionsCancelWorkflowRunResponder = {
  with202(): KoaRuntimeResponse<t_empty_object>
  with409(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ActionsCancelWorkflowRun = (
  params: Params<t_ActionsCancelWorkflowRunParamSchema, void, void>,
  respond: ActionsCancelWorkflowRunResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<202, t_empty_object>
  | Response<409, t_basic_error>
>

export type ActionsReviewCustomGatesForRunResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsReviewCustomGatesForRun = (
  params: Params<
    t_ActionsReviewCustomGatesForRunParamSchema,
    void,
    t_ActionsReviewCustomGatesForRunBodySchema
  >,
  respond: ActionsReviewCustomGatesForRunResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsListJobsForWorkflowRunResponder = {
  with200(): KoaRuntimeResponse<{
    jobs: t_job[]
    total_count: number
  }>
} & KoaRuntimeResponder

export type ActionsListJobsForWorkflowRun = (
  params: Params<
    t_ActionsListJobsForWorkflowRunParamSchema,
    t_ActionsListJobsForWorkflowRunQuerySchema,
    void
  >,
  respond: ActionsListJobsForWorkflowRunResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        jobs: t_job[]
        total_count: number
      }
    >
>

export type ActionsDownloadWorkflowRunLogsResponder = {
  with302(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsDownloadWorkflowRunLogs = (
  params: Params<t_ActionsDownloadWorkflowRunLogsParamSchema, void, void>,
  respond: ActionsDownloadWorkflowRunLogsResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<302, void>>

export type ActionsDeleteWorkflowRunLogsResponder = {
  with204(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ActionsDeleteWorkflowRunLogs = (
  params: Params<t_ActionsDeleteWorkflowRunLogsParamSchema, void, void>,
  respond: ActionsDeleteWorkflowRunLogsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<500, t_basic_error>
>

export type ActionsGetPendingDeploymentsForRunResponder = {
  with200(): KoaRuntimeResponse<t_pending_deployment[]>
} & KoaRuntimeResponder

export type ActionsGetPendingDeploymentsForRun = (
  params: Params<t_ActionsGetPendingDeploymentsForRunParamSchema, void, void>,
  respond: ActionsGetPendingDeploymentsForRunResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_pending_deployment[]>
>

export type ActionsReviewPendingDeploymentsForRunResponder = {
  with200(): KoaRuntimeResponse<t_deployment[]>
} & KoaRuntimeResponder

export type ActionsReviewPendingDeploymentsForRun = (
  params: Params<
    t_ActionsReviewPendingDeploymentsForRunParamSchema,
    void,
    t_ActionsReviewPendingDeploymentsForRunBodySchema
  >,
  respond: ActionsReviewPendingDeploymentsForRunResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_deployment[]>>

export type ActionsReRunWorkflowResponder = {
  with201(): KoaRuntimeResponse<t_empty_object>
} & KoaRuntimeResponder

export type ActionsReRunWorkflow = (
  params: Params<
    t_ActionsReRunWorkflowParamSchema,
    void,
    t_ActionsReRunWorkflowBodySchema | undefined
  >,
  respond: ActionsReRunWorkflowResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_empty_object>>

export type ActionsReRunWorkflowFailedJobsResponder = {
  with201(): KoaRuntimeResponse<t_empty_object>
} & KoaRuntimeResponder

export type ActionsReRunWorkflowFailedJobs = (
  params: Params<
    t_ActionsReRunWorkflowFailedJobsParamSchema,
    void,
    t_ActionsReRunWorkflowFailedJobsBodySchema | undefined
  >,
  respond: ActionsReRunWorkflowFailedJobsResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_empty_object>>

export type ActionsGetWorkflowRunUsageResponder = {
  with200(): KoaRuntimeResponse<t_workflow_run_usage>
} & KoaRuntimeResponder

export type ActionsGetWorkflowRunUsage = (
  params: Params<t_ActionsGetWorkflowRunUsageParamSchema, void, void>,
  respond: ActionsGetWorkflowRunUsageResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_workflow_run_usage>>

export type ActionsListRepoSecretsResponder = {
  with200(): KoaRuntimeResponse<{
    secrets: t_actions_secret[]
    total_count: number
  }>
} & KoaRuntimeResponder

export type ActionsListRepoSecrets = (
  params: Params<
    t_ActionsListRepoSecretsParamSchema,
    t_ActionsListRepoSecretsQuerySchema,
    void
  >,
  respond: ActionsListRepoSecretsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        secrets: t_actions_secret[]
        total_count: number
      }
    >
>

export type ActionsGetRepoPublicKeyResponder = {
  with200(): KoaRuntimeResponse<t_actions_public_key>
} & KoaRuntimeResponder

export type ActionsGetRepoPublicKey = (
  params: Params<t_ActionsGetRepoPublicKeyParamSchema, void, void>,
  respond: ActionsGetRepoPublicKeyResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_actions_public_key>>

export type ActionsGetRepoSecretResponder = {
  with200(): KoaRuntimeResponse<t_actions_secret>
} & KoaRuntimeResponder

export type ActionsGetRepoSecret = (
  params: Params<t_ActionsGetRepoSecretParamSchema, void, void>,
  respond: ActionsGetRepoSecretResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_actions_secret>>

export type ActionsCreateOrUpdateRepoSecretResponder = {
  with201(): KoaRuntimeResponse<t_empty_object>
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsCreateOrUpdateRepoSecret = (
  params: Params<
    t_ActionsCreateOrUpdateRepoSecretParamSchema,
    void,
    t_ActionsCreateOrUpdateRepoSecretBodySchema
  >,
  respond: ActionsCreateOrUpdateRepoSecretResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<204, void>
>

export type ActionsDeleteRepoSecretResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsDeleteRepoSecret = (
  params: Params<t_ActionsDeleteRepoSecretParamSchema, void, void>,
  respond: ActionsDeleteRepoSecretResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsListRepoVariablesResponder = {
  with200(): KoaRuntimeResponse<{
    total_count: number
    variables: t_actions_variable[]
  }>
} & KoaRuntimeResponder

export type ActionsListRepoVariables = (
  params: Params<
    t_ActionsListRepoVariablesParamSchema,
    t_ActionsListRepoVariablesQuerySchema,
    void
  >,
  respond: ActionsListRepoVariablesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        total_count: number
        variables: t_actions_variable[]
      }
    >
>

export type ActionsCreateRepoVariableResponder = {
  with201(): KoaRuntimeResponse<t_empty_object>
} & KoaRuntimeResponder

export type ActionsCreateRepoVariable = (
  params: Params<
    t_ActionsCreateRepoVariableParamSchema,
    void,
    t_ActionsCreateRepoVariableBodySchema
  >,
  respond: ActionsCreateRepoVariableResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_empty_object>>

export type ActionsGetRepoVariableResponder = {
  with200(): KoaRuntimeResponse<t_actions_variable>
} & KoaRuntimeResponder

export type ActionsGetRepoVariable = (
  params: Params<t_ActionsGetRepoVariableParamSchema, void, void>,
  respond: ActionsGetRepoVariableResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_actions_variable>>

export type ActionsUpdateRepoVariableResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsUpdateRepoVariable = (
  params: Params<
    t_ActionsUpdateRepoVariableParamSchema,
    void,
    t_ActionsUpdateRepoVariableBodySchema
  >,
  respond: ActionsUpdateRepoVariableResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsDeleteRepoVariableResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsDeleteRepoVariable = (
  params: Params<t_ActionsDeleteRepoVariableParamSchema, void, void>,
  respond: ActionsDeleteRepoVariableResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsListRepoWorkflowsResponder = {
  with200(): KoaRuntimeResponse<{
    total_count: number
    workflows: t_workflow[]
  }>
} & KoaRuntimeResponder

export type ActionsListRepoWorkflows = (
  params: Params<
    t_ActionsListRepoWorkflowsParamSchema,
    t_ActionsListRepoWorkflowsQuerySchema,
    void
  >,
  respond: ActionsListRepoWorkflowsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        total_count: number
        workflows: t_workflow[]
      }
    >
>

export type ActionsGetWorkflowResponder = {
  with200(): KoaRuntimeResponse<t_workflow>
} & KoaRuntimeResponder

export type ActionsGetWorkflow = (
  params: Params<t_ActionsGetWorkflowParamSchema, void, void>,
  respond: ActionsGetWorkflowResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_workflow>>

export type ActionsDisableWorkflowResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsDisableWorkflow = (
  params: Params<t_ActionsDisableWorkflowParamSchema, void, void>,
  respond: ActionsDisableWorkflowResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsCreateWorkflowDispatchResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsCreateWorkflowDispatch = (
  params: Params<
    t_ActionsCreateWorkflowDispatchParamSchema,
    void,
    t_ActionsCreateWorkflowDispatchBodySchema
  >,
  respond: ActionsCreateWorkflowDispatchResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsEnableWorkflowResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsEnableWorkflow = (
  params: Params<t_ActionsEnableWorkflowParamSchema, void, void>,
  respond: ActionsEnableWorkflowResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsListWorkflowRunsResponder = {
  with200(): KoaRuntimeResponse<{
    total_count: number
    workflow_runs: t_workflow_run[]
  }>
} & KoaRuntimeResponder

export type ActionsListWorkflowRuns = (
  params: Params<
    t_ActionsListWorkflowRunsParamSchema,
    t_ActionsListWorkflowRunsQuerySchema,
    void
  >,
  respond: ActionsListWorkflowRunsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        total_count: number
        workflow_runs: t_workflow_run[]
      }
    >
>

export type ActionsGetWorkflowUsageResponder = {
  with200(): KoaRuntimeResponse<t_workflow_usage>
} & KoaRuntimeResponder

export type ActionsGetWorkflowUsage = (
  params: Params<t_ActionsGetWorkflowUsageParamSchema, void, void>,
  respond: ActionsGetWorkflowUsageResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_workflow_usage>>

export type ReposListActivitiesResponder = {
  with200(): KoaRuntimeResponse<t_activity[]>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type ReposListActivities = (
  params: Params<
    t_ReposListActivitiesParamSchema,
    t_ReposListActivitiesQuerySchema,
    void
  >,
  respond: ReposListActivitiesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_activity[]>
  | Response<422, t_validation_error_simple>
>

export type IssuesListAssigneesResponder = {
  with200(): KoaRuntimeResponse<t_simple_user[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type IssuesListAssignees = (
  params: Params<
    t_IssuesListAssigneesParamSchema,
    t_IssuesListAssigneesQuerySchema,
    void
  >,
  respond: IssuesListAssigneesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[]>
  | Response<404, t_basic_error>
>

export type IssuesCheckUserCanBeAssignedResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type IssuesCheckUserCanBeAssigned = (
  params: Params<t_IssuesCheckUserCanBeAssignedParamSchema, void, void>,
  respond: IssuesCheckUserCanBeAssignedResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

export type ReposListAutolinksResponder = {
  with200(): KoaRuntimeResponse<t_autolink[]>
} & KoaRuntimeResponder

export type ReposListAutolinks = (
  params: Params<
    t_ReposListAutolinksParamSchema,
    t_ReposListAutolinksQuerySchema,
    void
  >,
  respond: ReposListAutolinksResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_autolink[]>>

export type ReposCreateAutolinkResponder = {
  with201(): KoaRuntimeResponse<t_autolink>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposCreateAutolink = (
  params: Params<
    t_ReposCreateAutolinkParamSchema,
    void,
    t_ReposCreateAutolinkBodySchema
  >,
  respond: ReposCreateAutolinkResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_autolink>
  | Response<422, t_validation_error>
>

export type ReposGetAutolinkResponder = {
  with200(): KoaRuntimeResponse<t_autolink>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetAutolink = (
  params: Params<t_ReposGetAutolinkParamSchema, void, void>,
  respond: ReposGetAutolinkResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_autolink>
  | Response<404, t_basic_error>
>

export type ReposDeleteAutolinkResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposDeleteAutolink = (
  params: Params<t_ReposDeleteAutolinkParamSchema, void, void>,
  respond: ReposDeleteAutolinkResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

export type ReposCheckAutomatedSecurityFixesResponder = {
  with200(): KoaRuntimeResponse<t_check_automated_security_fixes>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposCheckAutomatedSecurityFixes = (
  params: Params<t_ReposCheckAutomatedSecurityFixesParamSchema, void, void>,
  respond: ReposCheckAutomatedSecurityFixesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_check_automated_security_fixes>
  | Response<404, void>
>

export type ReposEnableAutomatedSecurityFixesResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposEnableAutomatedSecurityFixes = (
  params: Params<t_ReposEnableAutomatedSecurityFixesParamSchema, void, void>,
  respond: ReposEnableAutomatedSecurityFixesResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ReposDisableAutomatedSecurityFixesResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposDisableAutomatedSecurityFixes = (
  params: Params<t_ReposDisableAutomatedSecurityFixesParamSchema, void, void>,
  respond: ReposDisableAutomatedSecurityFixesResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ReposListBranchesResponder = {
  with200(): KoaRuntimeResponse<t_short_branch[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposListBranches = (
  params: Params<
    t_ReposListBranchesParamSchema,
    t_ReposListBranchesQuerySchema,
    void
  >,
  respond: ReposListBranchesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_short_branch[]>
  | Response<404, t_basic_error>
>

export type ReposGetBranchResponder = {
  with200(): KoaRuntimeResponse<t_branch_with_protection>
  with301(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetBranch = (
  params: Params<t_ReposGetBranchParamSchema, void, void>,
  respond: ReposGetBranchResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_branch_with_protection>
  | Response<301, t_basic_error>
  | Response<404, t_basic_error>
>

export type ReposGetBranchProtectionResponder = {
  with200(): KoaRuntimeResponse<t_branch_protection>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetBranchProtection = (
  params: Params<t_ReposGetBranchProtectionParamSchema, void, void>,
  respond: ReposGetBranchProtectionResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_branch_protection>
  | Response<404, t_basic_error>
>

export type ReposUpdateBranchProtectionResponder = {
  with200(): KoaRuntimeResponse<t_protected_branch>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type ReposUpdateBranchProtection = (
  params: Params<
    t_ReposUpdateBranchProtectionParamSchema,
    void,
    t_ReposUpdateBranchProtectionBodySchema
  >,
  respond: ReposUpdateBranchProtectionResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_protected_branch>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type ReposDeleteBranchProtectionResponder = {
  with204(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposDeleteBranchProtection = (
  params: Params<t_ReposDeleteBranchProtectionParamSchema, void, void>,
  respond: ReposDeleteBranchProtectionResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
>

export type ReposGetAdminBranchProtectionResponder = {
  with200(): KoaRuntimeResponse<t_protected_branch_admin_enforced>
} & KoaRuntimeResponder

export type ReposGetAdminBranchProtection = (
  params: Params<t_ReposGetAdminBranchProtectionParamSchema, void, void>,
  respond: ReposGetAdminBranchProtectionResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_protected_branch_admin_enforced>
>

export type ReposSetAdminBranchProtectionResponder = {
  with200(): KoaRuntimeResponse<t_protected_branch_admin_enforced>
} & KoaRuntimeResponder

export type ReposSetAdminBranchProtection = (
  params: Params<t_ReposSetAdminBranchProtectionParamSchema, void, void>,
  respond: ReposSetAdminBranchProtectionResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_protected_branch_admin_enforced>
>

export type ReposDeleteAdminBranchProtectionResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposDeleteAdminBranchProtection = (
  params: Params<t_ReposDeleteAdminBranchProtectionParamSchema, void, void>,
  respond: ReposDeleteAdminBranchProtectionResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

export type ReposGetPullRequestReviewProtectionResponder = {
  with200(): KoaRuntimeResponse<t_protected_branch_pull_request_review>
} & KoaRuntimeResponder

export type ReposGetPullRequestReviewProtection = (
  params: Params<t_ReposGetPullRequestReviewProtectionParamSchema, void, void>,
  respond: ReposGetPullRequestReviewProtectionResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_protected_branch_pull_request_review>
>

export type ReposUpdatePullRequestReviewProtectionResponder = {
  with200(): KoaRuntimeResponse<t_protected_branch_pull_request_review>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposUpdatePullRequestReviewProtection = (
  params: Params<
    t_ReposUpdatePullRequestReviewProtectionParamSchema,
    void,
    t_ReposUpdatePullRequestReviewProtectionBodySchema | undefined
  >,
  respond: ReposUpdatePullRequestReviewProtectionResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_protected_branch_pull_request_review>
  | Response<422, t_validation_error>
>

export type ReposDeletePullRequestReviewProtectionResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposDeletePullRequestReviewProtection = (
  params: Params<
    t_ReposDeletePullRequestReviewProtectionParamSchema,
    void,
    void
  >,
  respond: ReposDeletePullRequestReviewProtectionResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

export type ReposGetCommitSignatureProtectionResponder = {
  with200(): KoaRuntimeResponse<t_protected_branch_admin_enforced>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetCommitSignatureProtection = (
  params: Params<t_ReposGetCommitSignatureProtectionParamSchema, void, void>,
  respond: ReposGetCommitSignatureProtectionResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_protected_branch_admin_enforced>
  | Response<404, t_basic_error>
>

export type ReposCreateCommitSignatureProtectionResponder = {
  with200(): KoaRuntimeResponse<t_protected_branch_admin_enforced>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposCreateCommitSignatureProtection = (
  params: Params<t_ReposCreateCommitSignatureProtectionParamSchema, void, void>,
  respond: ReposCreateCommitSignatureProtectionResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_protected_branch_admin_enforced>
  | Response<404, t_basic_error>
>

export type ReposDeleteCommitSignatureProtectionResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposDeleteCommitSignatureProtection = (
  params: Params<t_ReposDeleteCommitSignatureProtectionParamSchema, void, void>,
  respond: ReposDeleteCommitSignatureProtectionResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

export type ReposGetStatusChecksProtectionResponder = {
  with200(): KoaRuntimeResponse<t_status_check_policy>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetStatusChecksProtection = (
  params: Params<t_ReposGetStatusChecksProtectionParamSchema, void, void>,
  respond: ReposGetStatusChecksProtectionResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_status_check_policy>
  | Response<404, t_basic_error>
>

export type ReposUpdateStatusCheckProtectionResponder = {
  with200(): KoaRuntimeResponse<t_status_check_policy>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposUpdateStatusCheckProtection = (
  params: Params<
    t_ReposUpdateStatusCheckProtectionParamSchema,
    void,
    t_ReposUpdateStatusCheckProtectionBodySchema | undefined
  >,
  respond: ReposUpdateStatusCheckProtectionResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_status_check_policy>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type ReposRemoveStatusCheckProtectionResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposRemoveStatusCheckProtection = (
  params: Params<t_ReposRemoveStatusCheckProtectionParamSchema, void, void>,
  respond: ReposRemoveStatusCheckProtectionResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ReposGetAllStatusCheckContextsResponder = {
  with200(): KoaRuntimeResponse<string[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetAllStatusCheckContexts = (
  params: Params<t_ReposGetAllStatusCheckContextsParamSchema, void, void>,
  respond: ReposGetAllStatusCheckContextsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, string[]>
  | Response<404, t_basic_error>
>

export type ReposAddStatusCheckContextsResponder = {
  with200(): KoaRuntimeResponse<string[]>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposAddStatusCheckContexts = (
  params: Params<
    t_ReposAddStatusCheckContextsParamSchema,
    void,
    t_ReposAddStatusCheckContextsBodySchema | undefined
  >,
  respond: ReposAddStatusCheckContextsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, string[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type ReposSetStatusCheckContextsResponder = {
  with200(): KoaRuntimeResponse<string[]>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposSetStatusCheckContexts = (
  params: Params<
    t_ReposSetStatusCheckContextsParamSchema,
    void,
    t_ReposSetStatusCheckContextsBodySchema | undefined
  >,
  respond: ReposSetStatusCheckContextsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, string[]>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type ReposRemoveStatusCheckContextsResponder = {
  with200(): KoaRuntimeResponse<string[]>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposRemoveStatusCheckContexts = (
  params: Params<
    t_ReposRemoveStatusCheckContextsParamSchema,
    void,
    t_ReposRemoveStatusCheckContextsBodySchema
  >,
  respond: ReposRemoveStatusCheckContextsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, string[]>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type ReposGetAccessRestrictionsResponder = {
  with200(): KoaRuntimeResponse<t_branch_restriction_policy>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetAccessRestrictions = (
  params: Params<t_ReposGetAccessRestrictionsParamSchema, void, void>,
  respond: ReposGetAccessRestrictionsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_branch_restriction_policy>
  | Response<404, t_basic_error>
>

export type ReposDeleteAccessRestrictionsResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposDeleteAccessRestrictions = (
  params: Params<t_ReposDeleteAccessRestrictionsParamSchema, void, void>,
  respond: ReposDeleteAccessRestrictionsResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ReposGetAppsWithAccessToProtectedBranchResponder = {
  with200(): KoaRuntimeResponse<t_integration[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetAppsWithAccessToProtectedBranch = (
  params: Params<
    t_ReposGetAppsWithAccessToProtectedBranchParamSchema,
    void,
    void
  >,
  respond: ReposGetAppsWithAccessToProtectedBranchResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_integration[]>
  | Response<404, t_basic_error>
>

export type ReposAddAppAccessRestrictionsResponder = {
  with200(): KoaRuntimeResponse<t_integration[]>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposAddAppAccessRestrictions = (
  params: Params<
    t_ReposAddAppAccessRestrictionsParamSchema,
    void,
    t_ReposAddAppAccessRestrictionsBodySchema | undefined
  >,
  respond: ReposAddAppAccessRestrictionsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_integration[]>
  | Response<422, t_validation_error>
>

export type ReposSetAppAccessRestrictionsResponder = {
  with200(): KoaRuntimeResponse<t_integration[]>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposSetAppAccessRestrictions = (
  params: Params<
    t_ReposSetAppAccessRestrictionsParamSchema,
    void,
    t_ReposSetAppAccessRestrictionsBodySchema | undefined
  >,
  respond: ReposSetAppAccessRestrictionsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_integration[]>
  | Response<422, t_validation_error>
>

export type ReposRemoveAppAccessRestrictionsResponder = {
  with200(): KoaRuntimeResponse<t_integration[]>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposRemoveAppAccessRestrictions = (
  params: Params<
    t_ReposRemoveAppAccessRestrictionsParamSchema,
    void,
    t_ReposRemoveAppAccessRestrictionsBodySchema
  >,
  respond: ReposRemoveAppAccessRestrictionsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_integration[]>
  | Response<422, t_validation_error>
>

export type ReposGetTeamsWithAccessToProtectedBranchResponder = {
  with200(): KoaRuntimeResponse<t_team[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetTeamsWithAccessToProtectedBranch = (
  params: Params<
    t_ReposGetTeamsWithAccessToProtectedBranchParamSchema,
    void,
    void
  >,
  respond: ReposGetTeamsWithAccessToProtectedBranchResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team[]>
  | Response<404, t_basic_error>
>

export type ReposAddTeamAccessRestrictionsResponder = {
  with200(): KoaRuntimeResponse<t_team[]>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposAddTeamAccessRestrictions = (
  params: Params<
    t_ReposAddTeamAccessRestrictionsParamSchema,
    void,
    t_ReposAddTeamAccessRestrictionsBodySchema | undefined
  >,
  respond: ReposAddTeamAccessRestrictionsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team[]>
  | Response<422, t_validation_error>
>

export type ReposSetTeamAccessRestrictionsResponder = {
  with200(): KoaRuntimeResponse<t_team[]>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposSetTeamAccessRestrictions = (
  params: Params<
    t_ReposSetTeamAccessRestrictionsParamSchema,
    void,
    t_ReposSetTeamAccessRestrictionsBodySchema | undefined
  >,
  respond: ReposSetTeamAccessRestrictionsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team[]>
  | Response<422, t_validation_error>
>

export type ReposRemoveTeamAccessRestrictionsResponder = {
  with200(): KoaRuntimeResponse<t_team[]>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposRemoveTeamAccessRestrictions = (
  params: Params<
    t_ReposRemoveTeamAccessRestrictionsParamSchema,
    void,
    t_ReposRemoveTeamAccessRestrictionsBodySchema
  >,
  respond: ReposRemoveTeamAccessRestrictionsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team[]>
  | Response<422, t_validation_error>
>

export type ReposGetUsersWithAccessToProtectedBranchResponder = {
  with200(): KoaRuntimeResponse<t_simple_user[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetUsersWithAccessToProtectedBranch = (
  params: Params<
    t_ReposGetUsersWithAccessToProtectedBranchParamSchema,
    void,
    void
  >,
  respond: ReposGetUsersWithAccessToProtectedBranchResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[]>
  | Response<404, t_basic_error>
>

export type ReposAddUserAccessRestrictionsResponder = {
  with200(): KoaRuntimeResponse<t_simple_user[]>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposAddUserAccessRestrictions = (
  params: Params<
    t_ReposAddUserAccessRestrictionsParamSchema,
    void,
    t_ReposAddUserAccessRestrictionsBodySchema | undefined
  >,
  respond: ReposAddUserAccessRestrictionsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[]>
  | Response<422, t_validation_error>
>

export type ReposSetUserAccessRestrictionsResponder = {
  with200(): KoaRuntimeResponse<t_simple_user[]>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposSetUserAccessRestrictions = (
  params: Params<
    t_ReposSetUserAccessRestrictionsParamSchema,
    void,
    t_ReposSetUserAccessRestrictionsBodySchema | undefined
  >,
  respond: ReposSetUserAccessRestrictionsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[]>
  | Response<422, t_validation_error>
>

export type ReposRemoveUserAccessRestrictionsResponder = {
  with200(): KoaRuntimeResponse<t_simple_user[]>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposRemoveUserAccessRestrictions = (
  params: Params<
    t_ReposRemoveUserAccessRestrictionsParamSchema,
    void,
    t_ReposRemoveUserAccessRestrictionsBodySchema
  >,
  respond: ReposRemoveUserAccessRestrictionsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[]>
  | Response<422, t_validation_error>
>

export type ReposRenameBranchResponder = {
  with201(): KoaRuntimeResponse<t_branch_with_protection>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposRenameBranch = (
  params: Params<
    t_ReposRenameBranchParamSchema,
    void,
    t_ReposRenameBranchBodySchema
  >,
  respond: ReposRenameBranchResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_branch_with_protection>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type ChecksCreateResponder = {
  with201(): KoaRuntimeResponse<t_check_run>
} & KoaRuntimeResponder

export type ChecksCreate = (
  params: Params<t_ChecksCreateParamSchema, void, t_ChecksCreateBodySchema>,
  respond: ChecksCreateResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_check_run>>

export type ChecksGetResponder = {
  with200(): KoaRuntimeResponse<t_check_run>
} & KoaRuntimeResponder

export type ChecksGet = (
  params: Params<t_ChecksGetParamSchema, void, void>,
  respond: ChecksGetResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_check_run>>

export type ChecksUpdateResponder = {
  with200(): KoaRuntimeResponse<t_check_run>
} & KoaRuntimeResponder

export type ChecksUpdate = (
  params: Params<t_ChecksUpdateParamSchema, void, t_ChecksUpdateBodySchema>,
  respond: ChecksUpdateResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_check_run>>

export type ChecksListAnnotationsResponder = {
  with200(): KoaRuntimeResponse<t_check_annotation[]>
} & KoaRuntimeResponder

export type ChecksListAnnotations = (
  params: Params<
    t_ChecksListAnnotationsParamSchema,
    t_ChecksListAnnotationsQuerySchema,
    void
  >,
  respond: ChecksListAnnotationsResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_check_annotation[]>>

export type ChecksRerequestRunResponder = {
  with201(): KoaRuntimeResponse<t_empty_object>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ChecksRerequestRun = (
  params: Params<t_ChecksRerequestRunParamSchema, void, void>,
  respond: ChecksRerequestRunResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_basic_error>
>

export type ChecksCreateSuiteResponder = {
  with200(): KoaRuntimeResponse<t_check_suite>
  with201(): KoaRuntimeResponse<t_check_suite>
} & KoaRuntimeResponder

export type ChecksCreateSuite = (
  params: Params<
    t_ChecksCreateSuiteParamSchema,
    void,
    t_ChecksCreateSuiteBodySchema
  >,
  respond: ChecksCreateSuiteResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_check_suite>
  | Response<201, t_check_suite>
>

export type ChecksSetSuitesPreferencesResponder = {
  with200(): KoaRuntimeResponse<t_check_suite_preference>
} & KoaRuntimeResponder

export type ChecksSetSuitesPreferences = (
  params: Params<
    t_ChecksSetSuitesPreferencesParamSchema,
    void,
    t_ChecksSetSuitesPreferencesBodySchema
  >,
  respond: ChecksSetSuitesPreferencesResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_check_suite_preference>
>

export type ChecksGetSuiteResponder = {
  with200(): KoaRuntimeResponse<t_check_suite>
} & KoaRuntimeResponder

export type ChecksGetSuite = (
  params: Params<t_ChecksGetSuiteParamSchema, void, void>,
  respond: ChecksGetSuiteResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_check_suite>>

export type ChecksListForSuiteResponder = {
  with200(): KoaRuntimeResponse<{
    check_runs: t_check_run[]
    total_count: number
  }>
} & KoaRuntimeResponder

export type ChecksListForSuite = (
  params: Params<
    t_ChecksListForSuiteParamSchema,
    t_ChecksListForSuiteQuerySchema,
    void
  >,
  respond: ChecksListForSuiteResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        check_runs: t_check_run[]
        total_count: number
      }
    >
>

export type ChecksRerequestSuiteResponder = {
  with201(): KoaRuntimeResponse<t_empty_object>
} & KoaRuntimeResponder

export type ChecksRerequestSuite = (
  params: Params<t_ChecksRerequestSuiteParamSchema, void, void>,
  respond: ChecksRerequestSuiteResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_empty_object>>

export type CodeScanningListAlertsForRepoResponder = {
  with200(): KoaRuntimeResponse<t_code_scanning_alert_items[]>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type CodeScanningListAlertsForRepo = (
  params: Params<
    t_CodeScanningListAlertsForRepoParamSchema,
    t_CodeScanningListAlertsForRepoQuerySchema,
    void
  >,
  respond: CodeScanningListAlertsForRepoResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_alert_items[]>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type CodeScanningGetAlertResponder = {
  with200(): KoaRuntimeResponse<t_code_scanning_alert>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type CodeScanningGetAlert = (
  params: Params<t_CodeScanningGetAlertParamSchema, void, void>,
  respond: CodeScanningGetAlertResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_alert>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type CodeScanningUpdateAlertResponder = {
  with200(): KoaRuntimeResponse<t_code_scanning_alert>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type CodeScanningUpdateAlert = (
  params: Params<
    t_CodeScanningUpdateAlertParamSchema,
    void,
    t_CodeScanningUpdateAlertBodySchema
  >,
  respond: CodeScanningUpdateAlertResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_alert>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type CodeScanningListAlertInstancesResponder = {
  with200(): KoaRuntimeResponse<t_code_scanning_alert_instance[]>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type CodeScanningListAlertInstances = (
  params: Params<
    t_CodeScanningListAlertInstancesParamSchema,
    t_CodeScanningListAlertInstancesQuerySchema,
    void
  >,
  respond: CodeScanningListAlertInstancesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_alert_instance[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type CodeScanningListRecentAnalysesResponder = {
  with200(): KoaRuntimeResponse<t_code_scanning_analysis[]>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type CodeScanningListRecentAnalyses = (
  params: Params<
    t_CodeScanningListRecentAnalysesParamSchema,
    t_CodeScanningListRecentAnalysesQuerySchema,
    void
  >,
  respond: CodeScanningListRecentAnalysesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_analysis[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type CodeScanningGetAnalysisResponder = {
  with200(): KoaRuntimeResponse<{
    [key: string]: unknown
  }>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type CodeScanningGetAnalysis = (
  params: Params<t_CodeScanningGetAnalysisParamSchema, void, void>,
  respond: CodeScanningGetAnalysisResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        [key: string]: unknown
      }
    >
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type CodeScanningDeleteAnalysisResponder = {
  with200(): KoaRuntimeResponse<t_code_scanning_analysis_deletion>
  with400(): KoaRuntimeResponse<t_scim_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type CodeScanningDeleteAnalysis = (
  params: Params<
    t_CodeScanningDeleteAnalysisParamSchema,
    t_CodeScanningDeleteAnalysisQuerySchema,
    void
  >,
  respond: CodeScanningDeleteAnalysisResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_analysis_deletion>
  | Response<400, t_scim_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type CodeScanningListCodeqlDatabasesResponder = {
  with200(): KoaRuntimeResponse<t_code_scanning_codeql_database[]>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type CodeScanningListCodeqlDatabases = (
  params: Params<t_CodeScanningListCodeqlDatabasesParamSchema, void, void>,
  respond: CodeScanningListCodeqlDatabasesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_codeql_database[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type CodeScanningGetCodeqlDatabaseResponder = {
  with200(): KoaRuntimeResponse<t_code_scanning_codeql_database>
  with302(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type CodeScanningGetCodeqlDatabase = (
  params: Params<t_CodeScanningGetCodeqlDatabaseParamSchema, void, void>,
  respond: CodeScanningGetCodeqlDatabaseResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_codeql_database>
  | Response<302, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type CodeScanningGetDefaultSetupResponder = {
  with200(): KoaRuntimeResponse<t_code_scanning_default_setup>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type CodeScanningGetDefaultSetup = (
  params: Params<t_CodeScanningGetDefaultSetupParamSchema, void, void>,
  respond: CodeScanningGetDefaultSetupResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_default_setup>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type CodeScanningUpdateDefaultSetupResponder = {
  with200(): KoaRuntimeResponse<t_empty_object>
  with202(): KoaRuntimeResponse<t_code_scanning_default_setup_update_response>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with409(): KoaRuntimeResponse<t_basic_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type CodeScanningUpdateDefaultSetup = (
  params: Params<
    t_CodeScanningUpdateDefaultSetupParamSchema,
    void,
    t_CodeScanningUpdateDefaultSetupBodySchema
  >,
  respond: CodeScanningUpdateDefaultSetupResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_empty_object>
  | Response<202, t_code_scanning_default_setup_update_response>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type CodeScanningUploadSarifResponder = {
  with202(): KoaRuntimeResponse<t_code_scanning_sarifs_receipt>
  with400(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with413(): KoaRuntimeResponse<void>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type CodeScanningUploadSarif = (
  params: Params<
    t_CodeScanningUploadSarifParamSchema,
    void,
    t_CodeScanningUploadSarifBodySchema
  >,
  respond: CodeScanningUploadSarifResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<202, t_code_scanning_sarifs_receipt>
  | Response<400, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<413, void>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type CodeScanningGetSarifResponder = {
  with200(): KoaRuntimeResponse<t_code_scanning_sarifs_status>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<void>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type CodeScanningGetSarif = (
  params: Params<t_CodeScanningGetSarifParamSchema, void, void>,
  respond: CodeScanningGetSarifResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_scanning_sarifs_status>
  | Response<403, t_basic_error>
  | Response<404, void>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type ReposCodeownersErrorsResponder = {
  with200(): KoaRuntimeResponse<t_codeowners_errors>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposCodeownersErrors = (
  params: Params<
    t_ReposCodeownersErrorsParamSchema,
    t_ReposCodeownersErrorsQuerySchema,
    void
  >,
  respond: ReposCodeownersErrorsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_codeowners_errors>
  | Response<404, void>
>

export type CodespacesListInRepositoryForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<{
    codespaces: t_codespace[]
    total_count: number
  }>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesListInRepositoryForAuthenticatedUser = (
  params: Params<
    t_CodespacesListInRepositoryForAuthenticatedUserParamSchema,
    t_CodespacesListInRepositoryForAuthenticatedUserQuerySchema,
    void
  >,
  respond: CodespacesListInRepositoryForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        codespaces: t_codespace[]
        total_count: number
      }
    >
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type CodespacesCreateWithRepoForAuthenticatedUserResponder = {
  with201(): KoaRuntimeResponse<t_codespace>
  with202(): KoaRuntimeResponse<t_codespace>
  with400(): KoaRuntimeResponse<t_scim_error>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type CodespacesCreateWithRepoForAuthenticatedUser = (
  params: Params<
    t_CodespacesCreateWithRepoForAuthenticatedUserParamSchema,
    void,
    t_CodespacesCreateWithRepoForAuthenticatedUserBodySchema
  >,
  respond: CodespacesCreateWithRepoForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_codespace>
  | Response<202, t_codespace>
  | Response<400, t_scim_error>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type CodespacesListDevcontainersInRepositoryForAuthenticatedUserResponder =
  {
    with200(): KoaRuntimeResponse<{
      devcontainers: {
        display_name?: string
        name?: string
        path: string
      }[]
      total_count: number
    }>
    with400(): KoaRuntimeResponse<t_scim_error>
    with401(): KoaRuntimeResponse<t_basic_error>
    with403(): KoaRuntimeResponse<t_basic_error>
    with404(): KoaRuntimeResponse<t_basic_error>
    with500(): KoaRuntimeResponse<t_basic_error>
  } & KoaRuntimeResponder

export type CodespacesListDevcontainersInRepositoryForAuthenticatedUser = (
  params: Params<
    t_CodespacesListDevcontainersInRepositoryForAuthenticatedUserParamSchema,
    t_CodespacesListDevcontainersInRepositoryForAuthenticatedUserQuerySchema,
    void
  >,
  respond: CodespacesListDevcontainersInRepositoryForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        devcontainers: {
          display_name?: string
          name?: string
          path: string
        }[]
        total_count: number
      }
    >
  | Response<400, t_scim_error>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type CodespacesRepoMachinesForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<{
    machines: t_codespace_machine[]
    total_count: number
  }>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesRepoMachinesForAuthenticatedUser = (
  params: Params<
    t_CodespacesRepoMachinesForAuthenticatedUserParamSchema,
    t_CodespacesRepoMachinesForAuthenticatedUserQuerySchema,
    void
  >,
  respond: CodespacesRepoMachinesForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        machines: t_codespace_machine[]
        total_count: number
      }
    >
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type CodespacesPreFlightWithRepoForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<{
    billable_owner?: t_simple_user
    defaults?: {
      devcontainer_path: string | null
      location: string
    }
  }>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesPreFlightWithRepoForAuthenticatedUser = (
  params: Params<
    t_CodespacesPreFlightWithRepoForAuthenticatedUserParamSchema,
    t_CodespacesPreFlightWithRepoForAuthenticatedUserQuerySchema,
    void
  >,
  respond: CodespacesPreFlightWithRepoForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        billable_owner?: t_simple_user
        defaults?: {
          devcontainer_path: string | null
          location: string
        }
      }
    >
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type CodespacesListRepoSecretsResponder = {
  with200(): KoaRuntimeResponse<{
    secrets: t_repo_codespaces_secret[]
    total_count: number
  }>
} & KoaRuntimeResponder

export type CodespacesListRepoSecrets = (
  params: Params<
    t_CodespacesListRepoSecretsParamSchema,
    t_CodespacesListRepoSecretsQuerySchema,
    void
  >,
  respond: CodespacesListRepoSecretsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        secrets: t_repo_codespaces_secret[]
        total_count: number
      }
    >
>

export type CodespacesGetRepoPublicKeyResponder = {
  with200(): KoaRuntimeResponse<t_codespaces_public_key>
} & KoaRuntimeResponder

export type CodespacesGetRepoPublicKey = (
  params: Params<t_CodespacesGetRepoPublicKeyParamSchema, void, void>,
  respond: CodespacesGetRepoPublicKeyResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_codespaces_public_key>
>

export type CodespacesGetRepoSecretResponder = {
  with200(): KoaRuntimeResponse<t_repo_codespaces_secret>
} & KoaRuntimeResponder

export type CodespacesGetRepoSecret = (
  params: Params<t_CodespacesGetRepoSecretParamSchema, void, void>,
  respond: CodespacesGetRepoSecretResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_repo_codespaces_secret>
>

export type CodespacesCreateOrUpdateRepoSecretResponder = {
  with201(): KoaRuntimeResponse<t_empty_object>
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type CodespacesCreateOrUpdateRepoSecret = (
  params: Params<
    t_CodespacesCreateOrUpdateRepoSecretParamSchema,
    void,
    t_CodespacesCreateOrUpdateRepoSecretBodySchema
  >,
  respond: CodespacesCreateOrUpdateRepoSecretResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<204, void>
>

export type CodespacesDeleteRepoSecretResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type CodespacesDeleteRepoSecret = (
  params: Params<t_CodespacesDeleteRepoSecretParamSchema, void, void>,
  respond: CodespacesDeleteRepoSecretResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ReposListCollaboratorsResponder = {
  with200(): KoaRuntimeResponse<t_collaborator[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposListCollaborators = (
  params: Params<
    t_ReposListCollaboratorsParamSchema,
    t_ReposListCollaboratorsQuerySchema,
    void
  >,
  respond: ReposListCollaboratorsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_collaborator[]>
  | Response<404, t_basic_error>
>

export type ReposCheckCollaboratorResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposCheckCollaborator = (
  params: Params<t_ReposCheckCollaboratorParamSchema, void, void>,
  respond: ReposCheckCollaboratorResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<404, void>
>

export type ReposAddCollaboratorResponder = {
  with201(): KoaRuntimeResponse<t_repository_invitation>
  with204(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposAddCollaborator = (
  params: Params<
    t_ReposAddCollaboratorParamSchema,
    void,
    t_ReposAddCollaboratorBodySchema | undefined
  >,
  respond: ReposAddCollaboratorResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_repository_invitation>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

export type ReposRemoveCollaboratorResponder = {
  with204(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposRemoveCollaborator = (
  params: Params<t_ReposRemoveCollaboratorParamSchema, void, void>,
  respond: ReposRemoveCollaboratorResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

export type ReposGetCollaboratorPermissionLevelResponder = {
  with200(): KoaRuntimeResponse<t_repository_collaborator_permission>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetCollaboratorPermissionLevel = (
  params: Params<t_ReposGetCollaboratorPermissionLevelParamSchema, void, void>,
  respond: ReposGetCollaboratorPermissionLevelResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_collaborator_permission>
  | Response<404, t_basic_error>
>

export type ReposListCommitCommentsForRepoResponder = {
  with200(): KoaRuntimeResponse<t_commit_comment[]>
} & KoaRuntimeResponder

export type ReposListCommitCommentsForRepo = (
  params: Params<
    t_ReposListCommitCommentsForRepoParamSchema,
    t_ReposListCommitCommentsForRepoQuerySchema,
    void
  >,
  respond: ReposListCommitCommentsForRepoResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_commit_comment[]>>

export type ReposGetCommitCommentResponder = {
  with200(): KoaRuntimeResponse<t_commit_comment>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetCommitComment = (
  params: Params<t_ReposGetCommitCommentParamSchema, void, void>,
  respond: ReposGetCommitCommentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_commit_comment>
  | Response<404, t_basic_error>
>

export type ReposUpdateCommitCommentResponder = {
  with200(): KoaRuntimeResponse<t_commit_comment>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposUpdateCommitComment = (
  params: Params<
    t_ReposUpdateCommitCommentParamSchema,
    void,
    t_ReposUpdateCommitCommentBodySchema
  >,
  respond: ReposUpdateCommitCommentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_commit_comment>
  | Response<404, t_basic_error>
>

export type ReposDeleteCommitCommentResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposDeleteCommitComment = (
  params: Params<t_ReposDeleteCommitCommentParamSchema, void, void>,
  respond: ReposDeleteCommitCommentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

export type ReactionsListForCommitCommentResponder = {
  with200(): KoaRuntimeResponse<t_reaction[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReactionsListForCommitComment = (
  params: Params<
    t_ReactionsListForCommitCommentParamSchema,
    t_ReactionsListForCommitCommentQuerySchema,
    void
  >,
  respond: ReactionsListForCommitCommentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_reaction[]>
  | Response<404, t_basic_error>
>

export type ReactionsCreateForCommitCommentResponder = {
  with200(): KoaRuntimeResponse<t_reaction>
  with201(): KoaRuntimeResponse<t_reaction>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReactionsCreateForCommitComment = (
  params: Params<
    t_ReactionsCreateForCommitCommentParamSchema,
    void,
    t_ReactionsCreateForCommitCommentBodySchema
  >,
  respond: ReactionsCreateForCommitCommentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_reaction>
  | Response<201, t_reaction>
  | Response<422, t_validation_error>
>

export type ReactionsDeleteForCommitCommentResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReactionsDeleteForCommitComment = (
  params: Params<t_ReactionsDeleteForCommitCommentParamSchema, void, void>,
  respond: ReactionsDeleteForCommitCommentResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ReposListCommitsResponder = {
  with200(): KoaRuntimeResponse<t_commit[]>
  with400(): KoaRuntimeResponse<t_scim_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with409(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposListCommits = (
  params: Params<
    t_ReposListCommitsParamSchema,
    t_ReposListCommitsQuerySchema,
    void
  >,
  respond: ReposListCommitsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_commit[]>
  | Response<400, t_scim_error>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
  | Response<500, t_basic_error>
>

export type ReposListBranchesForHeadCommitResponder = {
  with200(): KoaRuntimeResponse<t_branch_short[]>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposListBranchesForHeadCommit = (
  params: Params<t_ReposListBranchesForHeadCommitParamSchema, void, void>,
  respond: ReposListBranchesForHeadCommitResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_branch_short[]>
  | Response<422, t_validation_error>
>

export type ReposListCommentsForCommitResponder = {
  with200(): KoaRuntimeResponse<t_commit_comment[]>
} & KoaRuntimeResponder

export type ReposListCommentsForCommit = (
  params: Params<
    t_ReposListCommentsForCommitParamSchema,
    t_ReposListCommentsForCommitQuerySchema,
    void
  >,
  respond: ReposListCommentsForCommitResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_commit_comment[]>>

export type ReposCreateCommitCommentResponder = {
  with201(): KoaRuntimeResponse<t_commit_comment>
  with403(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposCreateCommitComment = (
  params: Params<
    t_ReposCreateCommitCommentParamSchema,
    void,
    t_ReposCreateCommitCommentBodySchema
  >,
  respond: ReposCreateCommitCommentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_commit_comment>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

export type ReposListPullRequestsAssociatedWithCommitResponder = {
  with200(): KoaRuntimeResponse<t_pull_request_simple[]>
} & KoaRuntimeResponder

export type ReposListPullRequestsAssociatedWithCommit = (
  params: Params<
    t_ReposListPullRequestsAssociatedWithCommitParamSchema,
    t_ReposListPullRequestsAssociatedWithCommitQuerySchema,
    void
  >,
  respond: ReposListPullRequestsAssociatedWithCommitResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_pull_request_simple[]>
>

export type ReposGetCommitResponder = {
  with200(): KoaRuntimeResponse<t_commit>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
  with500(): KoaRuntimeResponse<t_basic_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type ReposGetCommit = (
  params: Params<
    t_ReposGetCommitParamSchema,
    t_ReposGetCommitQuerySchema,
    void
  >,
  respond: ReposGetCommitResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_commit>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<500, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type ChecksListForRefResponder = {
  with200(): KoaRuntimeResponse<{
    check_runs: t_check_run[]
    total_count: number
  }>
} & KoaRuntimeResponder

export type ChecksListForRef = (
  params: Params<
    t_ChecksListForRefParamSchema,
    t_ChecksListForRefQuerySchema,
    void
  >,
  respond: ChecksListForRefResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        check_runs: t_check_run[]
        total_count: number
      }
    >
>

export type ChecksListSuitesForRefResponder = {
  with200(): KoaRuntimeResponse<{
    check_suites: t_check_suite[]
    total_count: number
  }>
} & KoaRuntimeResponder

export type ChecksListSuitesForRef = (
  params: Params<
    t_ChecksListSuitesForRefParamSchema,
    t_ChecksListSuitesForRefQuerySchema,
    void
  >,
  respond: ChecksListSuitesForRefResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        check_suites: t_check_suite[]
        total_count: number
      }
    >
>

export type ReposGetCombinedStatusForRefResponder = {
  with200(): KoaRuntimeResponse<t_combined_commit_status>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetCombinedStatusForRef = (
  params: Params<
    t_ReposGetCombinedStatusForRefParamSchema,
    t_ReposGetCombinedStatusForRefQuerySchema,
    void
  >,
  respond: ReposGetCombinedStatusForRefResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_combined_commit_status>
  | Response<404, t_basic_error>
>

export type ReposListCommitStatusesForRefResponder = {
  with200(): KoaRuntimeResponse<t_status[]>
  with301(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposListCommitStatusesForRef = (
  params: Params<
    t_ReposListCommitStatusesForRefParamSchema,
    t_ReposListCommitStatusesForRefQuerySchema,
    void
  >,
  respond: ReposListCommitStatusesForRefResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_status[]>
  | Response<301, t_basic_error>
>

export type ReposGetCommunityProfileMetricsResponder = {
  with200(): KoaRuntimeResponse<t_community_profile>
} & KoaRuntimeResponder

export type ReposGetCommunityProfileMetrics = (
  params: Params<t_ReposGetCommunityProfileMetricsParamSchema, void, void>,
  respond: ReposGetCommunityProfileMetricsResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_community_profile>>

export type ReposCompareCommitsResponder = {
  with200(): KoaRuntimeResponse<t_commit_comparison>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type ReposCompareCommits = (
  params: Params<
    t_ReposCompareCommitsParamSchema,
    t_ReposCompareCommitsQuerySchema,
    void
  >,
  respond: ReposCompareCommitsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_commit_comparison>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type ReposGetContentResponder = {
  with200(): KoaRuntimeResponse<
    | t_content_directory
    | t_content_file
    | t_content_symlink
    | t_content_submodule
  >
  with302(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetContent = (
  params: Params<
    t_ReposGetContentParamSchema,
    t_ReposGetContentQuerySchema,
    void
  >,
  respond: ReposGetContentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      | t_content_directory
      | t_content_file
      | t_content_symlink
      | t_content_submodule
    >
  | Response<302, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type ReposCreateOrUpdateFileContentsResponder = {
  with200(): KoaRuntimeResponse<t_file_commit>
  with201(): KoaRuntimeResponse<t_file_commit>
  with404(): KoaRuntimeResponse<t_basic_error>
  with409(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposCreateOrUpdateFileContents = (
  params: Params<
    t_ReposCreateOrUpdateFileContentsParamSchema,
    void,
    t_ReposCreateOrUpdateFileContentsBodySchema
  >,
  respond: ReposCreateOrUpdateFileContentsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_file_commit>
  | Response<201, t_file_commit>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error>
>

export type ReposDeleteFileResponder = {
  with200(): KoaRuntimeResponse<t_file_commit>
  with404(): KoaRuntimeResponse<t_basic_error>
  with409(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type ReposDeleteFile = (
  params: Params<
    t_ReposDeleteFileParamSchema,
    void,
    t_ReposDeleteFileBodySchema
  >,
  respond: ReposDeleteFileResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_file_commit>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type ReposListContributorsResponder = {
  with200(): KoaRuntimeResponse<t_contributor[]>
  with204(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposListContributors = (
  params: Params<
    t_ReposListContributorsParamSchema,
    t_ReposListContributorsQuerySchema,
    void
  >,
  respond: ReposListContributorsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_contributor[]>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type DependabotListAlertsForRepoResponder = {
  with200(): KoaRuntimeResponse<t_dependabot_alert[]>
  with304(): KoaRuntimeResponse<void>
  with400(): KoaRuntimeResponse<t_scim_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type DependabotListAlertsForRepo = (
  params: Params<
    t_DependabotListAlertsForRepoParamSchema,
    t_DependabotListAlertsForRepoQuerySchema,
    void
  >,
  respond: DependabotListAlertsForRepoResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_dependabot_alert[]>
  | Response<304, void>
  | Response<400, t_scim_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type DependabotGetAlertResponder = {
  with200(): KoaRuntimeResponse<t_dependabot_alert>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type DependabotGetAlert = (
  params: Params<t_DependabotGetAlertParamSchema, void, void>,
  respond: DependabotGetAlertResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_dependabot_alert>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type DependabotUpdateAlertResponder = {
  with200(): KoaRuntimeResponse<t_dependabot_alert>
  with400(): KoaRuntimeResponse<t_scim_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with409(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type DependabotUpdateAlert = (
  params: Params<
    t_DependabotUpdateAlertParamSchema,
    void,
    t_DependabotUpdateAlertBodySchema
  >,
  respond: DependabotUpdateAlertResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_dependabot_alert>
  | Response<400, t_scim_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type DependabotListRepoSecretsResponder = {
  with200(): KoaRuntimeResponse<{
    secrets: t_dependabot_secret[]
    total_count: number
  }>
} & KoaRuntimeResponder

export type DependabotListRepoSecrets = (
  params: Params<
    t_DependabotListRepoSecretsParamSchema,
    t_DependabotListRepoSecretsQuerySchema,
    void
  >,
  respond: DependabotListRepoSecretsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        secrets: t_dependabot_secret[]
        total_count: number
      }
    >
>

export type DependabotGetRepoPublicKeyResponder = {
  with200(): KoaRuntimeResponse<t_dependabot_public_key>
} & KoaRuntimeResponder

export type DependabotGetRepoPublicKey = (
  params: Params<t_DependabotGetRepoPublicKeyParamSchema, void, void>,
  respond: DependabotGetRepoPublicKeyResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_dependabot_public_key>
>

export type DependabotGetRepoSecretResponder = {
  with200(): KoaRuntimeResponse<t_dependabot_secret>
} & KoaRuntimeResponder

export type DependabotGetRepoSecret = (
  params: Params<t_DependabotGetRepoSecretParamSchema, void, void>,
  respond: DependabotGetRepoSecretResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_dependabot_secret>>

export type DependabotCreateOrUpdateRepoSecretResponder = {
  with201(): KoaRuntimeResponse<t_empty_object>
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type DependabotCreateOrUpdateRepoSecret = (
  params: Params<
    t_DependabotCreateOrUpdateRepoSecretParamSchema,
    void,
    t_DependabotCreateOrUpdateRepoSecretBodySchema
  >,
  respond: DependabotCreateOrUpdateRepoSecretResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<204, void>
>

export type DependabotDeleteRepoSecretResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type DependabotDeleteRepoSecret = (
  params: Params<t_DependabotDeleteRepoSecretParamSchema, void, void>,
  respond: DependabotDeleteRepoSecretResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type DependencyGraphDiffRangeResponder = {
  with200(): KoaRuntimeResponse<t_dependency_graph_diff>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type DependencyGraphDiffRange = (
  params: Params<
    t_DependencyGraphDiffRangeParamSchema,
    t_DependencyGraphDiffRangeQuerySchema,
    void
  >,
  respond: DependencyGraphDiffRangeResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_dependency_graph_diff>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type DependencyGraphExportSbomResponder = {
  with200(): KoaRuntimeResponse<t_dependency_graph_spdx_sbom>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type DependencyGraphExportSbom = (
  params: Params<t_DependencyGraphExportSbomParamSchema, void, void>,
  respond: DependencyGraphExportSbomResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_dependency_graph_spdx_sbom>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type DependencyGraphCreateRepositorySnapshotResponder = {
  with201(): KoaRuntimeResponse<{
    created_at: string
    id: number
    message: string
    result: string
  }>
} & KoaRuntimeResponder

export type DependencyGraphCreateRepositorySnapshot = (
  params: Params<
    t_DependencyGraphCreateRepositorySnapshotParamSchema,
    void,
    t_DependencyGraphCreateRepositorySnapshotBodySchema
  >,
  respond: DependencyGraphCreateRepositorySnapshotResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      201,
      {
        created_at: string
        id: number
        message: string
        result: string
      }
    >
>

export type ReposListDeploymentsResponder = {
  with200(): KoaRuntimeResponse<t_deployment[]>
} & KoaRuntimeResponder

export type ReposListDeployments = (
  params: Params<
    t_ReposListDeploymentsParamSchema,
    t_ReposListDeploymentsQuerySchema,
    void
  >,
  respond: ReposListDeploymentsResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_deployment[]>>

export type ReposCreateDeploymentResponder = {
  with201(): KoaRuntimeResponse<t_deployment>
  with202(): KoaRuntimeResponse<{
    message?: string
  }>
  with409(): KoaRuntimeResponse<void>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposCreateDeployment = (
  params: Params<
    t_ReposCreateDeploymentParamSchema,
    void,
    t_ReposCreateDeploymentBodySchema
  >,
  respond: ReposCreateDeploymentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_deployment>
  | Response<
      202,
      {
        message?: string
      }
    >
  | Response<409, void>
  | Response<422, t_validation_error>
>

export type ReposGetDeploymentResponder = {
  with200(): KoaRuntimeResponse<t_deployment>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetDeployment = (
  params: Params<t_ReposGetDeploymentParamSchema, void, void>,
  respond: ReposGetDeploymentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_deployment>
  | Response<404, t_basic_error>
>

export type ReposDeleteDeploymentResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type ReposDeleteDeployment = (
  params: Params<t_ReposDeleteDeploymentParamSchema, void, void>,
  respond: ReposDeleteDeploymentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type ReposListDeploymentStatusesResponder = {
  with200(): KoaRuntimeResponse<t_deployment_status[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposListDeploymentStatuses = (
  params: Params<
    t_ReposListDeploymentStatusesParamSchema,
    t_ReposListDeploymentStatusesQuerySchema,
    void
  >,
  respond: ReposListDeploymentStatusesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_deployment_status[]>
  | Response<404, t_basic_error>
>

export type ReposCreateDeploymentStatusResponder = {
  with201(): KoaRuntimeResponse<t_deployment_status>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposCreateDeploymentStatus = (
  params: Params<
    t_ReposCreateDeploymentStatusParamSchema,
    void,
    t_ReposCreateDeploymentStatusBodySchema
  >,
  respond: ReposCreateDeploymentStatusResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_deployment_status>
  | Response<422, t_validation_error>
>

export type ReposGetDeploymentStatusResponder = {
  with200(): KoaRuntimeResponse<t_deployment_status>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetDeploymentStatus = (
  params: Params<t_ReposGetDeploymentStatusParamSchema, void, void>,
  respond: ReposGetDeploymentStatusResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_deployment_status>
  | Response<404, t_basic_error>
>

export type ReposCreateDispatchEventResponder = {
  with204(): KoaRuntimeResponse<void>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposCreateDispatchEvent = (
  params: Params<
    t_ReposCreateDispatchEventParamSchema,
    void,
    t_ReposCreateDispatchEventBodySchema
  >,
  respond: ReposCreateDispatchEventResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<422, t_validation_error>
>

export type ReposGetAllEnvironmentsResponder = {
  with200(): KoaRuntimeResponse<{
    environments?: t_environment[]
    total_count?: number
  }>
} & KoaRuntimeResponder

export type ReposGetAllEnvironments = (
  params: Params<
    t_ReposGetAllEnvironmentsParamSchema,
    t_ReposGetAllEnvironmentsQuerySchema,
    void
  >,
  respond: ReposGetAllEnvironmentsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        environments?: t_environment[]
        total_count?: number
      }
    >
>

export type ReposGetEnvironmentResponder = {
  with200(): KoaRuntimeResponse<t_environment>
} & KoaRuntimeResponder

export type ReposGetEnvironment = (
  params: Params<t_ReposGetEnvironmentParamSchema, void, void>,
  respond: ReposGetEnvironmentResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_environment>>

export type ReposCreateOrUpdateEnvironmentResponder = {
  with200(): KoaRuntimeResponse<t_environment>
  with422(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposCreateOrUpdateEnvironment = (
  params: Params<
    t_ReposCreateOrUpdateEnvironmentParamSchema,
    void,
    t_ReposCreateOrUpdateEnvironmentBodySchema | undefined
  >,
  respond: ReposCreateOrUpdateEnvironmentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_environment>
  | Response<422, t_basic_error>
>

export type ReposDeleteAnEnvironmentResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposDeleteAnEnvironment = (
  params: Params<t_ReposDeleteAnEnvironmentParamSchema, void, void>,
  respond: ReposDeleteAnEnvironmentResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ReposListDeploymentBranchPoliciesResponder = {
  with200(): KoaRuntimeResponse<{
    branch_policies: t_deployment_branch_policy[]
    total_count: number
  }>
} & KoaRuntimeResponder

export type ReposListDeploymentBranchPolicies = (
  params: Params<
    t_ReposListDeploymentBranchPoliciesParamSchema,
    t_ReposListDeploymentBranchPoliciesQuerySchema,
    void
  >,
  respond: ReposListDeploymentBranchPoliciesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        branch_policies: t_deployment_branch_policy[]
        total_count: number
      }
    >
>

export type ReposCreateDeploymentBranchPolicyResponder = {
  with200(): KoaRuntimeResponse<t_deployment_branch_policy>
  with303(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposCreateDeploymentBranchPolicy = (
  params: Params<
    t_ReposCreateDeploymentBranchPolicyParamSchema,
    void,
    t_ReposCreateDeploymentBranchPolicyBodySchema
  >,
  respond: ReposCreateDeploymentBranchPolicyResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_deployment_branch_policy>
  | Response<303, void>
  | Response<404, void>
>

export type ReposGetDeploymentBranchPolicyResponder = {
  with200(): KoaRuntimeResponse<t_deployment_branch_policy>
} & KoaRuntimeResponder

export type ReposGetDeploymentBranchPolicy = (
  params: Params<t_ReposGetDeploymentBranchPolicyParamSchema, void, void>,
  respond: ReposGetDeploymentBranchPolicyResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_deployment_branch_policy>
>

export type ReposUpdateDeploymentBranchPolicyResponder = {
  with200(): KoaRuntimeResponse<t_deployment_branch_policy>
} & KoaRuntimeResponder

export type ReposUpdateDeploymentBranchPolicy = (
  params: Params<
    t_ReposUpdateDeploymentBranchPolicyParamSchema,
    void,
    t_ReposUpdateDeploymentBranchPolicyBodySchema
  >,
  respond: ReposUpdateDeploymentBranchPolicyResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_deployment_branch_policy>
>

export type ReposDeleteDeploymentBranchPolicyResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposDeleteDeploymentBranchPolicy = (
  params: Params<t_ReposDeleteDeploymentBranchPolicyParamSchema, void, void>,
  respond: ReposDeleteDeploymentBranchPolicyResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ReposGetAllDeploymentProtectionRulesResponder = {
  with200(): KoaRuntimeResponse<{
    custom_deployment_protection_rules?: t_deployment_protection_rule[]
    total_count?: number
  }>
} & KoaRuntimeResponder

export type ReposGetAllDeploymentProtectionRules = (
  params: Params<t_ReposGetAllDeploymentProtectionRulesParamSchema, void, void>,
  respond: ReposGetAllDeploymentProtectionRulesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        custom_deployment_protection_rules?: t_deployment_protection_rule[]
        total_count?: number
      }
    >
>

export type ReposCreateDeploymentProtectionRuleResponder = {
  with201(): KoaRuntimeResponse<t_deployment_protection_rule>
} & KoaRuntimeResponder

export type ReposCreateDeploymentProtectionRule = (
  params: Params<
    t_ReposCreateDeploymentProtectionRuleParamSchema,
    void,
    t_ReposCreateDeploymentProtectionRuleBodySchema
  >,
  respond: ReposCreateDeploymentProtectionRuleResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<201, t_deployment_protection_rule>
>

export type ReposListCustomDeploymentRuleIntegrationsResponder = {
  with200(): KoaRuntimeResponse<{
    available_custom_deployment_protection_rule_integrations?: t_custom_deployment_rule_app[]
    total_count?: number
  }>
} & KoaRuntimeResponder

export type ReposListCustomDeploymentRuleIntegrations = (
  params: Params<
    t_ReposListCustomDeploymentRuleIntegrationsParamSchema,
    t_ReposListCustomDeploymentRuleIntegrationsQuerySchema,
    void
  >,
  respond: ReposListCustomDeploymentRuleIntegrationsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        available_custom_deployment_protection_rule_integrations?: t_custom_deployment_rule_app[]
        total_count?: number
      }
    >
>

export type ReposGetCustomDeploymentProtectionRuleResponder = {
  with200(): KoaRuntimeResponse<t_deployment_protection_rule>
} & KoaRuntimeResponder

export type ReposGetCustomDeploymentProtectionRule = (
  params: Params<
    t_ReposGetCustomDeploymentProtectionRuleParamSchema,
    void,
    void
  >,
  respond: ReposGetCustomDeploymentProtectionRuleResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_deployment_protection_rule>
>

export type ReposDisableDeploymentProtectionRuleResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposDisableDeploymentProtectionRule = (
  params: Params<t_ReposDisableDeploymentProtectionRuleParamSchema, void, void>,
  respond: ReposDisableDeploymentProtectionRuleResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActivityListRepoEventsResponder = {
  with200(): KoaRuntimeResponse<t_event[]>
} & KoaRuntimeResponder

export type ActivityListRepoEvents = (
  params: Params<
    t_ActivityListRepoEventsParamSchema,
    t_ActivityListRepoEventsQuerySchema,
    void
  >,
  respond: ActivityListRepoEventsResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_event[]>>

export type ReposListForksResponder = {
  with200(): KoaRuntimeResponse<t_minimal_repository[]>
  with400(): KoaRuntimeResponse<t_scim_error>
} & KoaRuntimeResponder

export type ReposListForks = (
  params: Params<
    t_ReposListForksParamSchema,
    t_ReposListForksQuerySchema,
    void
  >,
  respond: ReposListForksResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_minimal_repository[]>
  | Response<400, t_scim_error>
>

export type ReposCreateForkResponder = {
  with202(): KoaRuntimeResponse<t_full_repository>
  with400(): KoaRuntimeResponse<t_scim_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposCreateFork = (
  params: Params<
    t_ReposCreateForkParamSchema,
    void,
    t_ReposCreateForkBodySchema | undefined
  >,
  respond: ReposCreateForkResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<202, t_full_repository>
  | Response<400, t_scim_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type GitCreateBlobResponder = {
  with201(): KoaRuntimeResponse<t_short_blob>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with409(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type GitCreateBlob = (
  params: Params<t_GitCreateBlobParamSchema, void, t_GitCreateBlobBodySchema>,
  respond: GitCreateBlobResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_short_blob>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error>
>

export type GitGetBlobResponder = {
  with200(): KoaRuntimeResponse<t_blob>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type GitGetBlob = (
  params: Params<t_GitGetBlobParamSchema, void, void>,
  respond: GitGetBlobResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_blob>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type GitCreateCommitResponder = {
  with201(): KoaRuntimeResponse<t_git_commit>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type GitCreateCommit = (
  params: Params<
    t_GitCreateCommitParamSchema,
    void,
    t_GitCreateCommitBodySchema
  >,
  respond: GitCreateCommitResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_git_commit>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type GitGetCommitResponder = {
  with200(): KoaRuntimeResponse<t_git_commit>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type GitGetCommit = (
  params: Params<t_GitGetCommitParamSchema, void, void>,
  respond: GitGetCommitResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_git_commit>
  | Response<404, t_basic_error>
>

export type GitListMatchingRefsResponder = {
  with200(): KoaRuntimeResponse<t_git_ref[]>
} & KoaRuntimeResponder

export type GitListMatchingRefs = (
  params: Params<t_GitListMatchingRefsParamSchema, void, void>,
  respond: GitListMatchingRefsResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_git_ref[]>>

export type GitGetRefResponder = {
  with200(): KoaRuntimeResponse<t_git_ref>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type GitGetRef = (
  params: Params<t_GitGetRefParamSchema, void, void>,
  respond: GitGetRefResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_git_ref>
  | Response<404, t_basic_error>
>

export type GitCreateRefResponder = {
  with201(): KoaRuntimeResponse<t_git_ref>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type GitCreateRef = (
  params: Params<t_GitCreateRefParamSchema, void, t_GitCreateRefBodySchema>,
  respond: GitCreateRefResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_git_ref>
  | Response<422, t_validation_error>
>

export type GitUpdateRefResponder = {
  with200(): KoaRuntimeResponse<t_git_ref>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type GitUpdateRef = (
  params: Params<t_GitUpdateRefParamSchema, void, t_GitUpdateRefBodySchema>,
  respond: GitUpdateRefResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_git_ref>
  | Response<422, t_validation_error>
>

export type GitDeleteRefResponder = {
  with204(): KoaRuntimeResponse<void>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type GitDeleteRef = (
  params: Params<t_GitDeleteRefParamSchema, void, void>,
  respond: GitDeleteRefResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<422, t_validation_error>
>

export type GitCreateTagResponder = {
  with201(): KoaRuntimeResponse<t_git_tag>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type GitCreateTag = (
  params: Params<t_GitCreateTagParamSchema, void, t_GitCreateTagBodySchema>,
  respond: GitCreateTagResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_git_tag>
  | Response<422, t_validation_error>
>

export type GitGetTagResponder = {
  with200(): KoaRuntimeResponse<t_git_tag>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type GitGetTag = (
  params: Params<t_GitGetTagParamSchema, void, void>,
  respond: GitGetTagResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_git_tag>
  | Response<404, t_basic_error>
>

export type GitCreateTreeResponder = {
  with201(): KoaRuntimeResponse<t_git_tree>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type GitCreateTree = (
  params: Params<t_GitCreateTreeParamSchema, void, t_GitCreateTreeBodySchema>,
  respond: GitCreateTreeResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_git_tree>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type GitGetTreeResponder = {
  with200(): KoaRuntimeResponse<t_git_tree>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type GitGetTree = (
  params: Params<t_GitGetTreeParamSchema, t_GitGetTreeQuerySchema, void>,
  respond: GitGetTreeResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_git_tree>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type ReposListWebhooksResponder = {
  with200(): KoaRuntimeResponse<t_hook[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposListWebhooks = (
  params: Params<
    t_ReposListWebhooksParamSchema,
    t_ReposListWebhooksQuerySchema,
    void
  >,
  respond: ReposListWebhooksResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_hook[]>
  | Response<404, t_basic_error>
>

export type ReposCreateWebhookResponder = {
  with201(): KoaRuntimeResponse<t_hook>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposCreateWebhook = (
  params: Params<
    t_ReposCreateWebhookParamSchema,
    void,
    t_ReposCreateWebhookBodySchema | undefined
  >,
  respond: ReposCreateWebhookResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_hook>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type ReposGetWebhookResponder = {
  with200(): KoaRuntimeResponse<t_hook>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetWebhook = (
  params: Params<t_ReposGetWebhookParamSchema, void, void>,
  respond: ReposGetWebhookResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_hook>
  | Response<404, t_basic_error>
>

export type ReposUpdateWebhookResponder = {
  with200(): KoaRuntimeResponse<t_hook>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposUpdateWebhook = (
  params: Params<
    t_ReposUpdateWebhookParamSchema,
    void,
    t_ReposUpdateWebhookBodySchema
  >,
  respond: ReposUpdateWebhookResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_hook>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type ReposDeleteWebhookResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposDeleteWebhook = (
  params: Params<t_ReposDeleteWebhookParamSchema, void, void>,
  respond: ReposDeleteWebhookResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

export type ReposGetWebhookConfigForRepoResponder = {
  with200(): KoaRuntimeResponse<t_webhook_config>
} & KoaRuntimeResponder

export type ReposGetWebhookConfigForRepo = (
  params: Params<t_ReposGetWebhookConfigForRepoParamSchema, void, void>,
  respond: ReposGetWebhookConfigForRepoResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_webhook_config>>

export type ReposUpdateWebhookConfigForRepoResponder = {
  with200(): KoaRuntimeResponse<t_webhook_config>
} & KoaRuntimeResponder

export type ReposUpdateWebhookConfigForRepo = (
  params: Params<
    t_ReposUpdateWebhookConfigForRepoParamSchema,
    void,
    t_ReposUpdateWebhookConfigForRepoBodySchema | undefined
  >,
  respond: ReposUpdateWebhookConfigForRepoResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_webhook_config>>

export type ReposListWebhookDeliveriesResponder = {
  with200(): KoaRuntimeResponse<t_hook_delivery_item[]>
  with400(): KoaRuntimeResponse<t_scim_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposListWebhookDeliveries = (
  params: Params<
    t_ReposListWebhookDeliveriesParamSchema,
    t_ReposListWebhookDeliveriesQuerySchema,
    void
  >,
  respond: ReposListWebhookDeliveriesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_hook_delivery_item[]>
  | Response<400, t_scim_error>
  | Response<422, t_validation_error>
>

export type ReposGetWebhookDeliveryResponder = {
  with200(): KoaRuntimeResponse<t_hook_delivery>
  with400(): KoaRuntimeResponse<t_scim_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposGetWebhookDelivery = (
  params: Params<t_ReposGetWebhookDeliveryParamSchema, void, void>,
  respond: ReposGetWebhookDeliveryResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_hook_delivery>
  | Response<400, t_scim_error>
  | Response<422, t_validation_error>
>

export type ReposRedeliverWebhookDeliveryResponder = {
  with202(): KoaRuntimeResponse<EmptyObject>
  with400(): KoaRuntimeResponse<t_scim_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposRedeliverWebhookDelivery = (
  params: Params<t_ReposRedeliverWebhookDeliveryParamSchema, void, void>,
  respond: ReposRedeliverWebhookDeliveryResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<202, EmptyObject>
  | Response<400, t_scim_error>
  | Response<422, t_validation_error>
>

export type ReposPingWebhookResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposPingWebhook = (
  params: Params<t_ReposPingWebhookParamSchema, void, void>,
  respond: ReposPingWebhookResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

export type ReposTestPushWebhookResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposTestPushWebhook = (
  params: Params<t_ReposTestPushWebhookParamSchema, void, void>,
  respond: ReposTestPushWebhookResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

export type MigrationsGetImportStatusResponder = {
  with200(): KoaRuntimeResponse<t_import>
  with404(): KoaRuntimeResponse<t_basic_error>
  with503(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type MigrationsGetImportStatus = (
  params: Params<t_MigrationsGetImportStatusParamSchema, void, void>,
  respond: MigrationsGetImportStatusResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_import>
  | Response<404, t_basic_error>
  | Response<503, t_basic_error>
>

export type MigrationsStartImportResponder = {
  with201(): KoaRuntimeResponse<t_import>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
  with503(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type MigrationsStartImport = (
  params: Params<
    t_MigrationsStartImportParamSchema,
    void,
    t_MigrationsStartImportBodySchema
  >,
  respond: MigrationsStartImportResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_import>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<503, t_basic_error>
>

export type MigrationsUpdateImportResponder = {
  with200(): KoaRuntimeResponse<t_import>
  with503(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type MigrationsUpdateImport = (
  params: Params<
    t_MigrationsUpdateImportParamSchema,
    void,
    t_MigrationsUpdateImportBodySchema | undefined
  >,
  respond: MigrationsUpdateImportResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_import>
  | Response<503, t_basic_error>
>

export type MigrationsCancelImportResponder = {
  with204(): KoaRuntimeResponse<void>
  with503(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type MigrationsCancelImport = (
  params: Params<t_MigrationsCancelImportParamSchema, void, void>,
  respond: MigrationsCancelImportResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<503, t_basic_error>
>

export type MigrationsGetCommitAuthorsResponder = {
  with200(): KoaRuntimeResponse<t_porter_author[]>
  with404(): KoaRuntimeResponse<t_basic_error>
  with503(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type MigrationsGetCommitAuthors = (
  params: Params<
    t_MigrationsGetCommitAuthorsParamSchema,
    t_MigrationsGetCommitAuthorsQuerySchema,
    void
  >,
  respond: MigrationsGetCommitAuthorsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_porter_author[]>
  | Response<404, t_basic_error>
  | Response<503, t_basic_error>
>

export type MigrationsMapCommitAuthorResponder = {
  with200(): KoaRuntimeResponse<t_porter_author>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
  with503(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type MigrationsMapCommitAuthor = (
  params: Params<
    t_MigrationsMapCommitAuthorParamSchema,
    void,
    t_MigrationsMapCommitAuthorBodySchema | undefined
  >,
  respond: MigrationsMapCommitAuthorResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_porter_author>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<503, t_basic_error>
>

export type MigrationsGetLargeFilesResponder = {
  with200(): KoaRuntimeResponse<t_porter_large_file[]>
  with503(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type MigrationsGetLargeFiles = (
  params: Params<t_MigrationsGetLargeFilesParamSchema, void, void>,
  respond: MigrationsGetLargeFilesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_porter_large_file[]>
  | Response<503, t_basic_error>
>

export type MigrationsSetLfsPreferenceResponder = {
  with200(): KoaRuntimeResponse<t_import>
  with422(): KoaRuntimeResponse<t_validation_error>
  with503(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type MigrationsSetLfsPreference = (
  params: Params<
    t_MigrationsSetLfsPreferenceParamSchema,
    void,
    t_MigrationsSetLfsPreferenceBodySchema
  >,
  respond: MigrationsSetLfsPreferenceResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_import>
  | Response<422, t_validation_error>
  | Response<503, t_basic_error>
>

export type AppsGetRepoInstallationResponder = {
  with200(): KoaRuntimeResponse<t_installation>
  with301(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type AppsGetRepoInstallation = (
  params: Params<t_AppsGetRepoInstallationParamSchema, void, void>,
  respond: AppsGetRepoInstallationResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_installation>
  | Response<301, t_basic_error>
  | Response<404, t_basic_error>
>

export type InteractionsGetRestrictionsForRepoResponder = {
  with200(): KoaRuntimeResponse<t_interaction_limit_response | EmptyObject>
} & KoaRuntimeResponder

export type InteractionsGetRestrictionsForRepo = (
  params: Params<t_InteractionsGetRestrictionsForRepoParamSchema, void, void>,
  respond: InteractionsGetRestrictionsForRepoResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_interaction_limit_response | EmptyObject>
>

export type InteractionsSetRestrictionsForRepoResponder = {
  with200(): KoaRuntimeResponse<t_interaction_limit_response>
  with409(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type InteractionsSetRestrictionsForRepo = (
  params: Params<
    t_InteractionsSetRestrictionsForRepoParamSchema,
    void,
    t_InteractionsSetRestrictionsForRepoBodySchema
  >,
  respond: InteractionsSetRestrictionsForRepoResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_interaction_limit_response>
  | Response<409, void>
>

export type InteractionsRemoveRestrictionsForRepoResponder = {
  with204(): KoaRuntimeResponse<void>
  with409(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type InteractionsRemoveRestrictionsForRepo = (
  params: Params<
    t_InteractionsRemoveRestrictionsForRepoParamSchema,
    void,
    void
  >,
  respond: InteractionsRemoveRestrictionsForRepoResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<409, void>
>

export type ReposListInvitationsResponder = {
  with200(): KoaRuntimeResponse<t_repository_invitation[]>
} & KoaRuntimeResponder

export type ReposListInvitations = (
  params: Params<
    t_ReposListInvitationsParamSchema,
    t_ReposListInvitationsQuerySchema,
    void
  >,
  respond: ReposListInvitationsResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_repository_invitation[]>
>

export type ReposUpdateInvitationResponder = {
  with200(): KoaRuntimeResponse<t_repository_invitation>
} & KoaRuntimeResponder

export type ReposUpdateInvitation = (
  params: Params<
    t_ReposUpdateInvitationParamSchema,
    void,
    t_ReposUpdateInvitationBodySchema | undefined
  >,
  respond: ReposUpdateInvitationResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_repository_invitation>
>

export type ReposDeleteInvitationResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposDeleteInvitation = (
  params: Params<t_ReposDeleteInvitationParamSchema, void, void>,
  respond: ReposDeleteInvitationResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type IssuesListForRepoResponder = {
  with200(): KoaRuntimeResponse<t_issue[]>
  with301(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type IssuesListForRepo = (
  params: Params<
    t_IssuesListForRepoParamSchema,
    t_IssuesListForRepoQuerySchema,
    void
  >,
  respond: IssuesListForRepoResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue[]>
  | Response<301, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type IssuesCreateResponder = {
  with201(): KoaRuntimeResponse<t_issue>
  with400(): KoaRuntimeResponse<t_scim_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with410(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type IssuesCreate = (
  params: Params<t_IssuesCreateParamSchema, void, t_IssuesCreateBodySchema>,
  respond: IssuesCreateResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_issue>
  | Response<400, t_scim_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
  | Response<422, t_validation_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type IssuesListCommentsForRepoResponder = {
  with200(): KoaRuntimeResponse<t_issue_comment[]>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type IssuesListCommentsForRepo = (
  params: Params<
    t_IssuesListCommentsForRepoParamSchema,
    t_IssuesListCommentsForRepoQuerySchema,
    void
  >,
  respond: IssuesListCommentsForRepoResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue_comment[]>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type IssuesGetCommentResponder = {
  with200(): KoaRuntimeResponse<t_issue_comment>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type IssuesGetComment = (
  params: Params<t_IssuesGetCommentParamSchema, void, void>,
  respond: IssuesGetCommentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue_comment>
  | Response<404, t_basic_error>
>

export type IssuesUpdateCommentResponder = {
  with200(): KoaRuntimeResponse<t_issue_comment>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type IssuesUpdateComment = (
  params: Params<
    t_IssuesUpdateCommentParamSchema,
    void,
    t_IssuesUpdateCommentBodySchema
  >,
  respond: IssuesUpdateCommentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue_comment>
  | Response<422, t_validation_error>
>

export type IssuesDeleteCommentResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type IssuesDeleteComment = (
  params: Params<t_IssuesDeleteCommentParamSchema, void, void>,
  respond: IssuesDeleteCommentResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ReactionsListForIssueCommentResponder = {
  with200(): KoaRuntimeResponse<t_reaction[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReactionsListForIssueComment = (
  params: Params<
    t_ReactionsListForIssueCommentParamSchema,
    t_ReactionsListForIssueCommentQuerySchema,
    void
  >,
  respond: ReactionsListForIssueCommentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_reaction[]>
  | Response<404, t_basic_error>
>

export type ReactionsCreateForIssueCommentResponder = {
  with200(): KoaRuntimeResponse<t_reaction>
  with201(): KoaRuntimeResponse<t_reaction>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReactionsCreateForIssueComment = (
  params: Params<
    t_ReactionsCreateForIssueCommentParamSchema,
    void,
    t_ReactionsCreateForIssueCommentBodySchema
  >,
  respond: ReactionsCreateForIssueCommentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_reaction>
  | Response<201, t_reaction>
  | Response<422, t_validation_error>
>

export type ReactionsDeleteForIssueCommentResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReactionsDeleteForIssueComment = (
  params: Params<t_ReactionsDeleteForIssueCommentParamSchema, void, void>,
  respond: ReactionsDeleteForIssueCommentResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type IssuesListEventsForRepoResponder = {
  with200(): KoaRuntimeResponse<t_issue_event[]>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type IssuesListEventsForRepo = (
  params: Params<
    t_IssuesListEventsForRepoParamSchema,
    t_IssuesListEventsForRepoQuerySchema,
    void
  >,
  respond: IssuesListEventsForRepoResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue_event[]>
  | Response<422, t_validation_error>
>

export type IssuesGetEventResponder = {
  with200(): KoaRuntimeResponse<t_issue_event>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with410(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type IssuesGetEvent = (
  params: Params<t_IssuesGetEventParamSchema, void, void>,
  respond: IssuesGetEventResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue_event>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
>

export type IssuesGetResponder = {
  with200(): KoaRuntimeResponse<t_issue>
  with301(): KoaRuntimeResponse<t_basic_error>
  with304(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
  with410(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type IssuesGet = (
  params: Params<t_IssuesGetParamSchema, void, void>,
  respond: IssuesGetResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue>
  | Response<301, t_basic_error>
  | Response<304, void>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
>

export type IssuesUpdateResponder = {
  with200(): KoaRuntimeResponse<t_issue>
  with301(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with410(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type IssuesUpdate = (
  params: Params<
    t_IssuesUpdateParamSchema,
    void,
    t_IssuesUpdateBodySchema | undefined
  >,
  respond: IssuesUpdateResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue>
  | Response<301, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
  | Response<422, t_validation_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type IssuesAddAssigneesResponder = {
  with201(): KoaRuntimeResponse<t_issue>
} & KoaRuntimeResponder

export type IssuesAddAssignees = (
  params: Params<
    t_IssuesAddAssigneesParamSchema,
    void,
    t_IssuesAddAssigneesBodySchema | undefined
  >,
  respond: IssuesAddAssigneesResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_issue>>

export type IssuesRemoveAssigneesResponder = {
  with200(): KoaRuntimeResponse<t_issue>
} & KoaRuntimeResponder

export type IssuesRemoveAssignees = (
  params: Params<
    t_IssuesRemoveAssigneesParamSchema,
    void,
    t_IssuesRemoveAssigneesBodySchema
  >,
  respond: IssuesRemoveAssigneesResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_issue>>

export type IssuesCheckUserCanBeAssignedToIssueResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type IssuesCheckUserCanBeAssignedToIssue = (
  params: Params<t_IssuesCheckUserCanBeAssignedToIssueParamSchema, void, void>,
  respond: IssuesCheckUserCanBeAssignedToIssueResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

export type IssuesListCommentsResponder = {
  with200(): KoaRuntimeResponse<t_issue_comment[]>
  with404(): KoaRuntimeResponse<t_basic_error>
  with410(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type IssuesListComments = (
  params: Params<
    t_IssuesListCommentsParamSchema,
    t_IssuesListCommentsQuerySchema,
    void
  >,
  respond: IssuesListCommentsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue_comment[]>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
>

export type IssuesCreateCommentResponder = {
  with201(): KoaRuntimeResponse<t_issue_comment>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with410(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type IssuesCreateComment = (
  params: Params<
    t_IssuesCreateCommentParamSchema,
    void,
    t_IssuesCreateCommentBodySchema
  >,
  respond: IssuesCreateCommentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_issue_comment>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
  | Response<422, t_validation_error>
>

export type IssuesListEventsResponder = {
  with200(): KoaRuntimeResponse<t_issue_event_for_issue[]>
  with410(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type IssuesListEvents = (
  params: Params<
    t_IssuesListEventsParamSchema,
    t_IssuesListEventsQuerySchema,
    void
  >,
  respond: IssuesListEventsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue_event_for_issue[]>
  | Response<410, t_basic_error>
>

export type IssuesListLabelsOnIssueResponder = {
  with200(): KoaRuntimeResponse<t_label[]>
  with301(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with410(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type IssuesListLabelsOnIssue = (
  params: Params<
    t_IssuesListLabelsOnIssueParamSchema,
    t_IssuesListLabelsOnIssueQuerySchema,
    void
  >,
  respond: IssuesListLabelsOnIssueResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_label[]>
  | Response<301, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
>

export type IssuesAddLabelsResponder = {
  with200(): KoaRuntimeResponse<t_label[]>
  with301(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with410(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type IssuesAddLabels = (
  params: Params<
    t_IssuesAddLabelsParamSchema,
    void,
    t_IssuesAddLabelsBodySchema | undefined
  >,
  respond: IssuesAddLabelsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_label[]>
  | Response<301, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
  | Response<422, t_validation_error>
>

export type IssuesSetLabelsResponder = {
  with200(): KoaRuntimeResponse<t_label[]>
  with301(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with410(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type IssuesSetLabels = (
  params: Params<
    t_IssuesSetLabelsParamSchema,
    void,
    t_IssuesSetLabelsBodySchema | undefined
  >,
  respond: IssuesSetLabelsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_label[]>
  | Response<301, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
  | Response<422, t_validation_error>
>

export type IssuesRemoveAllLabelsResponder = {
  with204(): KoaRuntimeResponse<void>
  with301(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with410(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type IssuesRemoveAllLabels = (
  params: Params<t_IssuesRemoveAllLabelsParamSchema, void, void>,
  respond: IssuesRemoveAllLabelsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<301, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
>

export type IssuesRemoveLabelResponder = {
  with200(): KoaRuntimeResponse<t_label[]>
  with301(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with410(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type IssuesRemoveLabel = (
  params: Params<t_IssuesRemoveLabelParamSchema, void, void>,
  respond: IssuesRemoveLabelResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_label[]>
  | Response<301, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
>

export type IssuesLockResponder = {
  with204(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with410(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type IssuesLock = (
  params: Params<
    t_IssuesLockParamSchema,
    void,
    t_IssuesLockBodySchema | undefined
  >,
  respond: IssuesLockResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
  | Response<422, t_validation_error>
>

export type IssuesUnlockResponder = {
  with204(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type IssuesUnlock = (
  params: Params<t_IssuesUnlockParamSchema, void, void>,
  respond: IssuesUnlockResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type ReactionsListForIssueResponder = {
  with200(): KoaRuntimeResponse<t_reaction[]>
  with404(): KoaRuntimeResponse<t_basic_error>
  with410(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReactionsListForIssue = (
  params: Params<
    t_ReactionsListForIssueParamSchema,
    t_ReactionsListForIssueQuerySchema,
    void
  >,
  respond: ReactionsListForIssueResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_reaction[]>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
>

export type ReactionsCreateForIssueResponder = {
  with200(): KoaRuntimeResponse<t_reaction>
  with201(): KoaRuntimeResponse<t_reaction>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReactionsCreateForIssue = (
  params: Params<
    t_ReactionsCreateForIssueParamSchema,
    void,
    t_ReactionsCreateForIssueBodySchema
  >,
  respond: ReactionsCreateForIssueResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_reaction>
  | Response<201, t_reaction>
  | Response<422, t_validation_error>
>

export type ReactionsDeleteForIssueResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReactionsDeleteForIssue = (
  params: Params<t_ReactionsDeleteForIssueParamSchema, void, void>,
  respond: ReactionsDeleteForIssueResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type IssuesListEventsForTimelineResponder = {
  with200(): KoaRuntimeResponse<t_timeline_issue_events[]>
  with404(): KoaRuntimeResponse<t_basic_error>
  with410(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type IssuesListEventsForTimeline = (
  params: Params<
    t_IssuesListEventsForTimelineParamSchema,
    t_IssuesListEventsForTimelineQuerySchema,
    void
  >,
  respond: IssuesListEventsForTimelineResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_timeline_issue_events[]>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
>

export type ReposListDeployKeysResponder = {
  with200(): KoaRuntimeResponse<t_deploy_key[]>
} & KoaRuntimeResponder

export type ReposListDeployKeys = (
  params: Params<
    t_ReposListDeployKeysParamSchema,
    t_ReposListDeployKeysQuerySchema,
    void
  >,
  respond: ReposListDeployKeysResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_deploy_key[]>>

export type ReposCreateDeployKeyResponder = {
  with201(): KoaRuntimeResponse<t_deploy_key>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposCreateDeployKey = (
  params: Params<
    t_ReposCreateDeployKeyParamSchema,
    void,
    t_ReposCreateDeployKeyBodySchema
  >,
  respond: ReposCreateDeployKeyResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_deploy_key>
  | Response<422, t_validation_error>
>

export type ReposGetDeployKeyResponder = {
  with200(): KoaRuntimeResponse<t_deploy_key>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetDeployKey = (
  params: Params<t_ReposGetDeployKeyParamSchema, void, void>,
  respond: ReposGetDeployKeyResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_deploy_key>
  | Response<404, t_basic_error>
>

export type ReposDeleteDeployKeyResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposDeleteDeployKey = (
  params: Params<t_ReposDeleteDeployKeyParamSchema, void, void>,
  respond: ReposDeleteDeployKeyResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type IssuesListLabelsForRepoResponder = {
  with200(): KoaRuntimeResponse<t_label[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type IssuesListLabelsForRepo = (
  params: Params<
    t_IssuesListLabelsForRepoParamSchema,
    t_IssuesListLabelsForRepoQuerySchema,
    void
  >,
  respond: IssuesListLabelsForRepoResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_label[]>
  | Response<404, t_basic_error>
>

export type IssuesCreateLabelResponder = {
  with201(): KoaRuntimeResponse<t_label>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type IssuesCreateLabel = (
  params: Params<
    t_IssuesCreateLabelParamSchema,
    void,
    t_IssuesCreateLabelBodySchema
  >,
  respond: IssuesCreateLabelResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_label>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type IssuesGetLabelResponder = {
  with200(): KoaRuntimeResponse<t_label>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type IssuesGetLabel = (
  params: Params<t_IssuesGetLabelParamSchema, void, void>,
  respond: IssuesGetLabelResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_label>
  | Response<404, t_basic_error>
>

export type IssuesUpdateLabelResponder = {
  with200(): KoaRuntimeResponse<t_label>
} & KoaRuntimeResponder

export type IssuesUpdateLabel = (
  params: Params<
    t_IssuesUpdateLabelParamSchema,
    void,
    t_IssuesUpdateLabelBodySchema | undefined
  >,
  respond: IssuesUpdateLabelResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_label>>

export type IssuesDeleteLabelResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type IssuesDeleteLabel = (
  params: Params<t_IssuesDeleteLabelParamSchema, void, void>,
  respond: IssuesDeleteLabelResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ReposListLanguagesResponder = {
  with200(): KoaRuntimeResponse<t_language>
} & KoaRuntimeResponder

export type ReposListLanguages = (
  params: Params<t_ReposListLanguagesParamSchema, void, void>,
  respond: ReposListLanguagesResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_language>>

export type LicensesGetForRepoResponder = {
  with200(): KoaRuntimeResponse<t_license_content>
} & KoaRuntimeResponder

export type LicensesGetForRepo = (
  params: Params<t_LicensesGetForRepoParamSchema, void, void>,
  respond: LicensesGetForRepoResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_license_content>>

export type ReposMergeUpstreamResponder = {
  with200(): KoaRuntimeResponse<t_merged_upstream>
  with409(): KoaRuntimeResponse<void>
  with422(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposMergeUpstream = (
  params: Params<
    t_ReposMergeUpstreamParamSchema,
    void,
    t_ReposMergeUpstreamBodySchema
  >,
  respond: ReposMergeUpstreamResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_merged_upstream>
  | Response<409, void>
  | Response<422, void>
>

export type ReposMergeResponder = {
  with201(): KoaRuntimeResponse<t_commit>
  with204(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<void>
  with409(): KoaRuntimeResponse<void>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposMerge = (
  params: Params<t_ReposMergeParamSchema, void, t_ReposMergeBodySchema>,
  respond: ReposMergeResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_commit>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<404, void>
  | Response<409, void>
  | Response<422, t_validation_error>
>

export type IssuesListMilestonesResponder = {
  with200(): KoaRuntimeResponse<t_milestone[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type IssuesListMilestones = (
  params: Params<
    t_IssuesListMilestonesParamSchema,
    t_IssuesListMilestonesQuerySchema,
    void
  >,
  respond: IssuesListMilestonesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_milestone[]>
  | Response<404, t_basic_error>
>

export type IssuesCreateMilestoneResponder = {
  with201(): KoaRuntimeResponse<t_milestone>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type IssuesCreateMilestone = (
  params: Params<
    t_IssuesCreateMilestoneParamSchema,
    void,
    t_IssuesCreateMilestoneBodySchema
  >,
  respond: IssuesCreateMilestoneResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_milestone>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type IssuesGetMilestoneResponder = {
  with200(): KoaRuntimeResponse<t_milestone>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type IssuesGetMilestone = (
  params: Params<t_IssuesGetMilestoneParamSchema, void, void>,
  respond: IssuesGetMilestoneResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_milestone>
  | Response<404, t_basic_error>
>

export type IssuesUpdateMilestoneResponder = {
  with200(): KoaRuntimeResponse<t_milestone>
} & KoaRuntimeResponder

export type IssuesUpdateMilestone = (
  params: Params<
    t_IssuesUpdateMilestoneParamSchema,
    void,
    t_IssuesUpdateMilestoneBodySchema | undefined
  >,
  respond: IssuesUpdateMilestoneResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_milestone>>

export type IssuesDeleteMilestoneResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type IssuesDeleteMilestone = (
  params: Params<t_IssuesDeleteMilestoneParamSchema, void, void>,
  respond: IssuesDeleteMilestoneResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

export type IssuesListLabelsForMilestoneResponder = {
  with200(): KoaRuntimeResponse<t_label[]>
} & KoaRuntimeResponder

export type IssuesListLabelsForMilestone = (
  params: Params<
    t_IssuesListLabelsForMilestoneParamSchema,
    t_IssuesListLabelsForMilestoneQuerySchema,
    void
  >,
  respond: IssuesListLabelsForMilestoneResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_label[]>>

export type ActivityListRepoNotificationsForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_thread[]>
} & KoaRuntimeResponder

export type ActivityListRepoNotificationsForAuthenticatedUser = (
  params: Params<
    t_ActivityListRepoNotificationsForAuthenticatedUserParamSchema,
    t_ActivityListRepoNotificationsForAuthenticatedUserQuerySchema,
    void
  >,
  respond: ActivityListRepoNotificationsForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_thread[]>>

export type ActivityMarkRepoNotificationsAsReadResponder = {
  with202(): KoaRuntimeResponse<{
    message?: string
    url?: string
  }>
  with205(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActivityMarkRepoNotificationsAsRead = (
  params: Params<
    t_ActivityMarkRepoNotificationsAsReadParamSchema,
    void,
    t_ActivityMarkRepoNotificationsAsReadBodySchema | undefined
  >,
  respond: ActivityMarkRepoNotificationsAsReadResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      202,
      {
        message?: string
        url?: string
      }
    >
  | Response<205, void>
>

export type ReposGetPagesResponder = {
  with200(): KoaRuntimeResponse<t_page>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetPages = (
  params: Params<t_ReposGetPagesParamSchema, void, void>,
  respond: ReposGetPagesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_page>
  | Response<404, t_basic_error>
>

export type ReposCreatePagesSiteResponder = {
  with201(): KoaRuntimeResponse<t_page>
  with409(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposCreatePagesSite = (
  params: Params<
    t_ReposCreatePagesSiteParamSchema,
    void,
    t_ReposCreatePagesSiteBodySchema
  >,
  respond: ReposCreatePagesSiteResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_page>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error>
>

export type ReposUpdateInformationAboutPagesSiteResponder = {
  with204(): KoaRuntimeResponse<void>
  with400(): KoaRuntimeResponse<t_scim_error>
  with409(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposUpdateInformationAboutPagesSite = (
  params: Params<
    t_ReposUpdateInformationAboutPagesSiteParamSchema,
    void,
    t_ReposUpdateInformationAboutPagesSiteBodySchema
  >,
  respond: ReposUpdateInformationAboutPagesSiteResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<400, t_scim_error>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error>
>

export type ReposDeletePagesSiteResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
  with409(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposDeletePagesSite = (
  params: Params<t_ReposDeletePagesSiteParamSchema, void, void>,
  respond: ReposDeletePagesSiteResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
  | Response<422, t_validation_error>
>

export type ReposListPagesBuildsResponder = {
  with200(): KoaRuntimeResponse<t_page_build[]>
} & KoaRuntimeResponder

export type ReposListPagesBuilds = (
  params: Params<
    t_ReposListPagesBuildsParamSchema,
    t_ReposListPagesBuildsQuerySchema,
    void
  >,
  respond: ReposListPagesBuildsResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_page_build[]>>

export type ReposRequestPagesBuildResponder = {
  with201(): KoaRuntimeResponse<t_page_build_status>
} & KoaRuntimeResponder

export type ReposRequestPagesBuild = (
  params: Params<t_ReposRequestPagesBuildParamSchema, void, void>,
  respond: ReposRequestPagesBuildResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_page_build_status>>

export type ReposGetLatestPagesBuildResponder = {
  with200(): KoaRuntimeResponse<t_page_build>
} & KoaRuntimeResponder

export type ReposGetLatestPagesBuild = (
  params: Params<t_ReposGetLatestPagesBuildParamSchema, void, void>,
  respond: ReposGetLatestPagesBuildResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_page_build>>

export type ReposGetPagesBuildResponder = {
  with200(): KoaRuntimeResponse<t_page_build>
} & KoaRuntimeResponder

export type ReposGetPagesBuild = (
  params: Params<t_ReposGetPagesBuildParamSchema, void, void>,
  respond: ReposGetPagesBuildResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_page_build>>

export type ReposCreatePagesDeploymentResponder = {
  with200(): KoaRuntimeResponse<t_page_deployment>
  with400(): KoaRuntimeResponse<t_scim_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposCreatePagesDeployment = (
  params: Params<
    t_ReposCreatePagesDeploymentParamSchema,
    void,
    t_ReposCreatePagesDeploymentBodySchema
  >,
  respond: ReposCreatePagesDeploymentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_page_deployment>
  | Response<400, t_scim_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type ReposGetPagesHealthCheckResponder = {
  with200(): KoaRuntimeResponse<t_pages_health_check>
  with202(): KoaRuntimeResponse<t_empty_object>
  with400(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposGetPagesHealthCheck = (
  params: Params<t_ReposGetPagesHealthCheckParamSchema, void, void>,
  respond: ReposGetPagesHealthCheckResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pages_health_check>
  | Response<202, t_empty_object>
  | Response<400, void>
  | Response<404, t_basic_error>
  | Response<422, void>
>

export type ReposEnablePrivateVulnerabilityReportingResponder = {
  with204(): KoaRuntimeResponse<void>
  with422(): KoaRuntimeResponse<t_scim_error>
} & KoaRuntimeResponder

export type ReposEnablePrivateVulnerabilityReporting = (
  params: Params<
    t_ReposEnablePrivateVulnerabilityReportingParamSchema,
    void,
    void
  >,
  respond: ReposEnablePrivateVulnerabilityReportingResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<422, t_scim_error>
>

export type ReposDisablePrivateVulnerabilityReportingResponder = {
  with204(): KoaRuntimeResponse<void>
  with422(): KoaRuntimeResponse<t_scim_error>
} & KoaRuntimeResponder

export type ReposDisablePrivateVulnerabilityReporting = (
  params: Params<
    t_ReposDisablePrivateVulnerabilityReportingParamSchema,
    void,
    void
  >,
  respond: ReposDisablePrivateVulnerabilityReportingResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<422, t_scim_error>
>

export type ProjectsListForRepoResponder = {
  with200(): KoaRuntimeResponse<t_project[]>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with410(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type ProjectsListForRepo = (
  params: Params<
    t_ProjectsListForRepoParamSchema,
    t_ProjectsListForRepoQuerySchema,
    void
  >,
  respond: ProjectsListForRepoResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_project[]>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type ProjectsCreateForRepoResponder = {
  with201(): KoaRuntimeResponse<t_project>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with410(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type ProjectsCreateForRepo = (
  params: Params<
    t_ProjectsCreateForRepoParamSchema,
    void,
    t_ProjectsCreateForRepoBodySchema
  >,
  respond: ProjectsCreateForRepoResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_project>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<410, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type PullsListResponder = {
  with200(): KoaRuntimeResponse<t_pull_request_simple[]>
  with304(): KoaRuntimeResponse<void>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type PullsList = (
  params: Params<t_PullsListParamSchema, t_PullsListQuerySchema, void>,
  respond: PullsListResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request_simple[]>
  | Response<304, void>
  | Response<422, t_validation_error>
>

export type PullsCreateResponder = {
  with201(): KoaRuntimeResponse<t_pull_request>
  with403(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type PullsCreate = (
  params: Params<t_PullsCreateParamSchema, void, t_PullsCreateBodySchema>,
  respond: PullsCreateResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_pull_request>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

export type PullsListReviewCommentsForRepoResponder = {
  with200(): KoaRuntimeResponse<t_pull_request_review_comment[]>
} & KoaRuntimeResponder

export type PullsListReviewCommentsForRepo = (
  params: Params<
    t_PullsListReviewCommentsForRepoParamSchema,
    t_PullsListReviewCommentsForRepoQuerySchema,
    void
  >,
  respond: PullsListReviewCommentsForRepoResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_pull_request_review_comment[]>
>

export type PullsGetReviewCommentResponder = {
  with200(): KoaRuntimeResponse<t_pull_request_review_comment>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type PullsGetReviewComment = (
  params: Params<t_PullsGetReviewCommentParamSchema, void, void>,
  respond: PullsGetReviewCommentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request_review_comment>
  | Response<404, t_basic_error>
>

export type PullsUpdateReviewCommentResponder = {
  with200(): KoaRuntimeResponse<t_pull_request_review_comment>
} & KoaRuntimeResponder

export type PullsUpdateReviewComment = (
  params: Params<
    t_PullsUpdateReviewCommentParamSchema,
    void,
    t_PullsUpdateReviewCommentBodySchema
  >,
  respond: PullsUpdateReviewCommentResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_pull_request_review_comment>
>

export type PullsDeleteReviewCommentResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type PullsDeleteReviewComment = (
  params: Params<t_PullsDeleteReviewCommentParamSchema, void, void>,
  respond: PullsDeleteReviewCommentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
>

export type ReactionsListForPullRequestReviewCommentResponder = {
  with200(): KoaRuntimeResponse<t_reaction[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReactionsListForPullRequestReviewComment = (
  params: Params<
    t_ReactionsListForPullRequestReviewCommentParamSchema,
    t_ReactionsListForPullRequestReviewCommentQuerySchema,
    void
  >,
  respond: ReactionsListForPullRequestReviewCommentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_reaction[]>
  | Response<404, t_basic_error>
>

export type ReactionsCreateForPullRequestReviewCommentResponder = {
  with200(): KoaRuntimeResponse<t_reaction>
  with201(): KoaRuntimeResponse<t_reaction>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReactionsCreateForPullRequestReviewComment = (
  params: Params<
    t_ReactionsCreateForPullRequestReviewCommentParamSchema,
    void,
    t_ReactionsCreateForPullRequestReviewCommentBodySchema
  >,
  respond: ReactionsCreateForPullRequestReviewCommentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_reaction>
  | Response<201, t_reaction>
  | Response<422, t_validation_error>
>

export type ReactionsDeleteForPullRequestCommentResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReactionsDeleteForPullRequestComment = (
  params: Params<t_ReactionsDeleteForPullRequestCommentParamSchema, void, void>,
  respond: ReactionsDeleteForPullRequestCommentResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type PullsGetResponder = {
  with200(): KoaRuntimeResponse<t_pull_request>
  with304(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type PullsGet = (
  params: Params<t_PullsGetParamSchema, void, void>,
  respond: PullsGetResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request>
  | Response<304, void>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type PullsUpdateResponder = {
  with200(): KoaRuntimeResponse<t_pull_request>
  with403(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type PullsUpdate = (
  params: Params<
    t_PullsUpdateParamSchema,
    void,
    t_PullsUpdateBodySchema | undefined
  >,
  respond: PullsUpdateResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

export type CodespacesCreateWithPrForAuthenticatedUserResponder = {
  with201(): KoaRuntimeResponse<t_codespace>
  with202(): KoaRuntimeResponse<t_codespace>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type CodespacesCreateWithPrForAuthenticatedUser = (
  params: Params<
    t_CodespacesCreateWithPrForAuthenticatedUserParamSchema,
    void,
    t_CodespacesCreateWithPrForAuthenticatedUserBodySchema
  >,
  respond: CodespacesCreateWithPrForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_codespace>
  | Response<202, t_codespace>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type PullsListReviewCommentsResponder = {
  with200(): KoaRuntimeResponse<t_pull_request_review_comment[]>
} & KoaRuntimeResponder

export type PullsListReviewComments = (
  params: Params<
    t_PullsListReviewCommentsParamSchema,
    t_PullsListReviewCommentsQuerySchema,
    void
  >,
  respond: PullsListReviewCommentsResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_pull_request_review_comment[]>
>

export type PullsCreateReviewCommentResponder = {
  with201(): KoaRuntimeResponse<t_pull_request_review_comment>
  with403(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type PullsCreateReviewComment = (
  params: Params<
    t_PullsCreateReviewCommentParamSchema,
    void,
    t_PullsCreateReviewCommentBodySchema
  >,
  respond: PullsCreateReviewCommentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_pull_request_review_comment>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

export type PullsCreateReplyForReviewCommentResponder = {
  with201(): KoaRuntimeResponse<t_pull_request_review_comment>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type PullsCreateReplyForReviewComment = (
  params: Params<
    t_PullsCreateReplyForReviewCommentParamSchema,
    void,
    t_PullsCreateReplyForReviewCommentBodySchema
  >,
  respond: PullsCreateReplyForReviewCommentResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_pull_request_review_comment>
  | Response<404, t_basic_error>
>

export type PullsListCommitsResponder = {
  with200(): KoaRuntimeResponse<t_commit[]>
} & KoaRuntimeResponder

export type PullsListCommits = (
  params: Params<
    t_PullsListCommitsParamSchema,
    t_PullsListCommitsQuerySchema,
    void
  >,
  respond: PullsListCommitsResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_commit[]>>

export type PullsListFilesResponder = {
  with200(): KoaRuntimeResponse<t_diff_entry[]>
  with422(): KoaRuntimeResponse<t_validation_error>
  with500(): KoaRuntimeResponse<t_basic_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type PullsListFiles = (
  params: Params<
    t_PullsListFilesParamSchema,
    t_PullsListFilesQuerySchema,
    void
  >,
  respond: PullsListFilesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_diff_entry[]>
  | Response<422, t_validation_error>
  | Response<500, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type PullsCheckIfMergedResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type PullsCheckIfMerged = (
  params: Params<t_PullsCheckIfMergedParamSchema, void, void>,
  respond: PullsCheckIfMergedResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<404, void>
>

export type PullsMergeResponder = {
  with200(): KoaRuntimeResponse<t_pull_request_merge_result>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with405(): KoaRuntimeResponse<{
    documentation_url?: string
    message?: string
  }>
  with409(): KoaRuntimeResponse<{
    documentation_url?: string
    message?: string
  }>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type PullsMerge = (
  params: Params<
    t_PullsMergeParamSchema,
    void,
    t_PullsMergeBodySchema | undefined
  >,
  respond: PullsMergeResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request_merge_result>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      405,
      {
        documentation_url?: string
        message?: string
      }
    >
  | Response<
      409,
      {
        documentation_url?: string
        message?: string
      }
    >
  | Response<422, t_validation_error>
>

export type PullsListRequestedReviewersResponder = {
  with200(): KoaRuntimeResponse<t_pull_request_review_request>
} & KoaRuntimeResponder

export type PullsListRequestedReviewers = (
  params: Params<t_PullsListRequestedReviewersParamSchema, void, void>,
  respond: PullsListRequestedReviewersResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_pull_request_review_request>
>

export type PullsRequestReviewersResponder = {
  with201(): KoaRuntimeResponse<t_pull_request_simple>
  with403(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type PullsRequestReviewers = (
  params: Params<
    t_PullsRequestReviewersParamSchema,
    void,
    t_PullsRequestReviewersBodySchema | undefined
  >,
  respond: PullsRequestReviewersResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_pull_request_simple>
  | Response<403, t_basic_error>
  | Response<422, void>
>

export type PullsRemoveRequestedReviewersResponder = {
  with200(): KoaRuntimeResponse<t_pull_request_simple>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type PullsRemoveRequestedReviewers = (
  params: Params<
    t_PullsRemoveRequestedReviewersParamSchema,
    void,
    t_PullsRemoveRequestedReviewersBodySchema
  >,
  respond: PullsRemoveRequestedReviewersResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request_simple>
  | Response<422, t_validation_error>
>

export type PullsListReviewsResponder = {
  with200(): KoaRuntimeResponse<t_pull_request_review[]>
} & KoaRuntimeResponder

export type PullsListReviews = (
  params: Params<
    t_PullsListReviewsParamSchema,
    t_PullsListReviewsQuerySchema,
    void
  >,
  respond: PullsListReviewsResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_pull_request_review[]>
>

export type PullsCreateReviewResponder = {
  with200(): KoaRuntimeResponse<t_pull_request_review>
  with403(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type PullsCreateReview = (
  params: Params<
    t_PullsCreateReviewParamSchema,
    void,
    t_PullsCreateReviewBodySchema | undefined
  >,
  respond: PullsCreateReviewResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request_review>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type PullsGetReviewResponder = {
  with200(): KoaRuntimeResponse<t_pull_request_review>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type PullsGetReview = (
  params: Params<t_PullsGetReviewParamSchema, void, void>,
  respond: PullsGetReviewResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request_review>
  | Response<404, t_basic_error>
>

export type PullsUpdateReviewResponder = {
  with200(): KoaRuntimeResponse<t_pull_request_review>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type PullsUpdateReview = (
  params: Params<
    t_PullsUpdateReviewParamSchema,
    void,
    t_PullsUpdateReviewBodySchema
  >,
  respond: PullsUpdateReviewResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request_review>
  | Response<422, t_validation_error_simple>
>

export type PullsDeletePendingReviewResponder = {
  with200(): KoaRuntimeResponse<t_pull_request_review>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type PullsDeletePendingReview = (
  params: Params<t_PullsDeletePendingReviewParamSchema, void, void>,
  respond: PullsDeletePendingReviewResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request_review>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type PullsListCommentsForReviewResponder = {
  with200(): KoaRuntimeResponse<t_review_comment[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type PullsListCommentsForReview = (
  params: Params<
    t_PullsListCommentsForReviewParamSchema,
    t_PullsListCommentsForReviewQuerySchema,
    void
  >,
  respond: PullsListCommentsForReviewResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_review_comment[]>
  | Response<404, t_basic_error>
>

export type PullsDismissReviewResponder = {
  with200(): KoaRuntimeResponse<t_pull_request_review>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type PullsDismissReview = (
  params: Params<
    t_PullsDismissReviewParamSchema,
    void,
    t_PullsDismissReviewBodySchema
  >,
  respond: PullsDismissReviewResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request_review>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type PullsSubmitReviewResponder = {
  with200(): KoaRuntimeResponse<t_pull_request_review>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type PullsSubmitReview = (
  params: Params<
    t_PullsSubmitReviewParamSchema,
    void,
    t_PullsSubmitReviewBodySchema
  >,
  respond: PullsSubmitReviewResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_pull_request_review>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type PullsUpdateBranchResponder = {
  with202(): KoaRuntimeResponse<{
    message?: string
    url?: string
  }>
  with403(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type PullsUpdateBranch = (
  params: Params<
    t_PullsUpdateBranchParamSchema,
    void,
    t_PullsUpdateBranchBodySchema | undefined
  >,
  respond: PullsUpdateBranchResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      202,
      {
        message?: string
        url?: string
      }
    >
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

export type ReposGetReadmeResponder = {
  with200(): KoaRuntimeResponse<t_content_file>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposGetReadme = (
  params: Params<
    t_ReposGetReadmeParamSchema,
    t_ReposGetReadmeQuerySchema,
    void
  >,
  respond: ReposGetReadmeResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_content_file>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type ReposGetReadmeInDirectoryResponder = {
  with200(): KoaRuntimeResponse<t_content_file>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposGetReadmeInDirectory = (
  params: Params<
    t_ReposGetReadmeInDirectoryParamSchema,
    t_ReposGetReadmeInDirectoryQuerySchema,
    void
  >,
  respond: ReposGetReadmeInDirectoryResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_content_file>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type ReposListReleasesResponder = {
  with200(): KoaRuntimeResponse<t_release[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposListReleases = (
  params: Params<
    t_ReposListReleasesParamSchema,
    t_ReposListReleasesQuerySchema,
    void
  >,
  respond: ReposListReleasesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_release[]>
  | Response<404, t_basic_error>
>

export type ReposCreateReleaseResponder = {
  with201(): KoaRuntimeResponse<t_release>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposCreateRelease = (
  params: Params<
    t_ReposCreateReleaseParamSchema,
    void,
    t_ReposCreateReleaseBodySchema
  >,
  respond: ReposCreateReleaseResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_release>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type ReposGetReleaseAssetResponder = {
  with200(): KoaRuntimeResponse<t_release_asset>
  with302(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetReleaseAsset = (
  params: Params<t_ReposGetReleaseAssetParamSchema, void, void>,
  respond: ReposGetReleaseAssetResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_release_asset>
  | Response<302, void>
  | Response<404, t_basic_error>
>

export type ReposUpdateReleaseAssetResponder = {
  with200(): KoaRuntimeResponse<t_release_asset>
} & KoaRuntimeResponder

export type ReposUpdateReleaseAsset = (
  params: Params<
    t_ReposUpdateReleaseAssetParamSchema,
    void,
    t_ReposUpdateReleaseAssetBodySchema | undefined
  >,
  respond: ReposUpdateReleaseAssetResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_release_asset>>

export type ReposDeleteReleaseAssetResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposDeleteReleaseAsset = (
  params: Params<t_ReposDeleteReleaseAssetParamSchema, void, void>,
  respond: ReposDeleteReleaseAssetResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ReposGenerateReleaseNotesResponder = {
  with200(): KoaRuntimeResponse<t_release_notes_content>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGenerateReleaseNotes = (
  params: Params<
    t_ReposGenerateReleaseNotesParamSchema,
    void,
    t_ReposGenerateReleaseNotesBodySchema
  >,
  respond: ReposGenerateReleaseNotesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_release_notes_content>
  | Response<404, t_basic_error>
>

export type ReposGetLatestReleaseResponder = {
  with200(): KoaRuntimeResponse<t_release>
} & KoaRuntimeResponder

export type ReposGetLatestRelease = (
  params: Params<t_ReposGetLatestReleaseParamSchema, void, void>,
  respond: ReposGetLatestReleaseResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_release>>

export type ReposGetReleaseByTagResponder = {
  with200(): KoaRuntimeResponse<t_release>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetReleaseByTag = (
  params: Params<t_ReposGetReleaseByTagParamSchema, void, void>,
  respond: ReposGetReleaseByTagResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_release>
  | Response<404, t_basic_error>
>

export type ReposGetReleaseResponder = {
  with200(): KoaRuntimeResponse<t_release>
  with401(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposGetRelease = (
  params: Params<t_ReposGetReleaseParamSchema, void, void>,
  respond: ReposGetReleaseResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_release> | Response<401, void>
>

export type ReposUpdateReleaseResponder = {
  with200(): KoaRuntimeResponse<t_release>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposUpdateRelease = (
  params: Params<
    t_ReposUpdateReleaseParamSchema,
    void,
    t_ReposUpdateReleaseBodySchema | undefined
  >,
  respond: ReposUpdateReleaseResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_release>
  | Response<404, t_basic_error>
>

export type ReposDeleteReleaseResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposDeleteRelease = (
  params: Params<t_ReposDeleteReleaseParamSchema, void, void>,
  respond: ReposDeleteReleaseResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ReposListReleaseAssetsResponder = {
  with200(): KoaRuntimeResponse<t_release_asset[]>
} & KoaRuntimeResponder

export type ReposListReleaseAssets = (
  params: Params<
    t_ReposListReleaseAssetsParamSchema,
    t_ReposListReleaseAssetsQuerySchema,
    void
  >,
  respond: ReposListReleaseAssetsResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_release_asset[]>>

export type ReposUploadReleaseAssetResponder = {
  with201(): KoaRuntimeResponse<t_release_asset>
  with422(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposUploadReleaseAsset = (
  params: Params<
    t_ReposUploadReleaseAssetParamSchema,
    t_ReposUploadReleaseAssetQuerySchema,
    t_ReposUploadReleaseAssetBodySchema | undefined
  >,
  respond: ReposUploadReleaseAssetResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_release_asset>
  | Response<422, void>
>

export type ReactionsListForReleaseResponder = {
  with200(): KoaRuntimeResponse<t_reaction[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReactionsListForRelease = (
  params: Params<
    t_ReactionsListForReleaseParamSchema,
    t_ReactionsListForReleaseQuerySchema,
    void
  >,
  respond: ReactionsListForReleaseResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_reaction[]>
  | Response<404, t_basic_error>
>

export type ReactionsCreateForReleaseResponder = {
  with200(): KoaRuntimeResponse<t_reaction>
  with201(): KoaRuntimeResponse<t_reaction>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReactionsCreateForRelease = (
  params: Params<
    t_ReactionsCreateForReleaseParamSchema,
    void,
    t_ReactionsCreateForReleaseBodySchema
  >,
  respond: ReactionsCreateForReleaseResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_reaction>
  | Response<201, t_reaction>
  | Response<422, t_validation_error>
>

export type ReactionsDeleteForReleaseResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReactionsDeleteForRelease = (
  params: Params<t_ReactionsDeleteForReleaseParamSchema, void, void>,
  respond: ReactionsDeleteForReleaseResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ReposGetBranchRulesResponder = {
  with200(): KoaRuntimeResponse<t_repository_rule_detailed[]>
} & KoaRuntimeResponder

export type ReposGetBranchRules = (
  params: Params<
    t_ReposGetBranchRulesParamSchema,
    t_ReposGetBranchRulesQuerySchema,
    void
  >,
  respond: ReposGetBranchRulesResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_repository_rule_detailed[]>
>

export type ReposGetRepoRulesetsResponder = {
  with200(): KoaRuntimeResponse<t_repository_ruleset[]>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetRepoRulesets = (
  params: Params<
    t_ReposGetRepoRulesetsParamSchema,
    t_ReposGetRepoRulesetsQuerySchema,
    void
  >,
  respond: ReposGetRepoRulesetsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_ruleset[]>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type ReposCreateRepoRulesetResponder = {
  with201(): KoaRuntimeResponse<t_repository_ruleset>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposCreateRepoRuleset = (
  params: Params<
    t_ReposCreateRepoRulesetParamSchema,
    void,
    t_ReposCreateRepoRulesetBodySchema
  >,
  respond: ReposCreateRepoRulesetResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_repository_ruleset>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type ReposGetRepoRulesetResponder = {
  with200(): KoaRuntimeResponse<t_repository_ruleset>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetRepoRuleset = (
  params: Params<
    t_ReposGetRepoRulesetParamSchema,
    t_ReposGetRepoRulesetQuerySchema,
    void
  >,
  respond: ReposGetRepoRulesetResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_ruleset>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type ReposUpdateRepoRulesetResponder = {
  with200(): KoaRuntimeResponse<t_repository_ruleset>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposUpdateRepoRuleset = (
  params: Params<
    t_ReposUpdateRepoRulesetParamSchema,
    void,
    t_ReposUpdateRepoRulesetBodySchema | undefined
  >,
  respond: ReposUpdateRepoRulesetResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_ruleset>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type ReposDeleteRepoRulesetResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposDeleteRepoRuleset = (
  params: Params<t_ReposDeleteRepoRulesetParamSchema, void, void>,
  respond: ReposDeleteRepoRulesetResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type SecretScanningListAlertsForRepoResponder = {
  with200(): KoaRuntimeResponse<t_secret_scanning_alert[]>
  with404(): KoaRuntimeResponse<void>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type SecretScanningListAlertsForRepo = (
  params: Params<
    t_SecretScanningListAlertsForRepoParamSchema,
    t_SecretScanningListAlertsForRepoQuerySchema,
    void
  >,
  respond: SecretScanningListAlertsForRepoResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_secret_scanning_alert[]>
  | Response<404, void>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type SecretScanningGetAlertResponder = {
  with200(): KoaRuntimeResponse<t_secret_scanning_alert>
  with304(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<void>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type SecretScanningGetAlert = (
  params: Params<t_SecretScanningGetAlertParamSchema, void, void>,
  respond: SecretScanningGetAlertResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_secret_scanning_alert>
  | Response<304, void>
  | Response<404, void>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type SecretScanningUpdateAlertResponder = {
  with200(): KoaRuntimeResponse<t_secret_scanning_alert>
  with400(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<void>
  with422(): KoaRuntimeResponse<void>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type SecretScanningUpdateAlert = (
  params: Params<
    t_SecretScanningUpdateAlertParamSchema,
    void,
    t_SecretScanningUpdateAlertBodySchema
  >,
  respond: SecretScanningUpdateAlertResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_secret_scanning_alert>
  | Response<400, void>
  | Response<404, void>
  | Response<422, void>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type SecretScanningListLocationsForAlertResponder = {
  with200(): KoaRuntimeResponse<t_secret_scanning_location[]>
  with404(): KoaRuntimeResponse<void>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type SecretScanningListLocationsForAlert = (
  params: Params<
    t_SecretScanningListLocationsForAlertParamSchema,
    t_SecretScanningListLocationsForAlertQuerySchema,
    void
  >,
  respond: SecretScanningListLocationsForAlertResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_secret_scanning_location[]>
  | Response<404, void>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type SecurityAdvisoriesListRepositoryAdvisoriesResponder = {
  with200(): KoaRuntimeResponse<t_repository_advisory[]>
  with400(): KoaRuntimeResponse<t_scim_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type SecurityAdvisoriesListRepositoryAdvisories = (
  params: Params<
    t_SecurityAdvisoriesListRepositoryAdvisoriesParamSchema,
    t_SecurityAdvisoriesListRepositoryAdvisoriesQuerySchema,
    void
  >,
  respond: SecurityAdvisoriesListRepositoryAdvisoriesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_advisory[]>
  | Response<400, t_scim_error>
  | Response<404, t_basic_error>
>

export type SecurityAdvisoriesCreateRepositoryAdvisoryResponder = {
  with201(): KoaRuntimeResponse<t_repository_advisory>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type SecurityAdvisoriesCreateRepositoryAdvisory = (
  params: Params<
    t_SecurityAdvisoriesCreateRepositoryAdvisoryParamSchema,
    void,
    t_SecurityAdvisoriesCreateRepositoryAdvisoryBodySchema
  >,
  respond: SecurityAdvisoriesCreateRepositoryAdvisoryResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_repository_advisory>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type SecurityAdvisoriesCreatePrivateVulnerabilityReportResponder = {
  with201(): KoaRuntimeResponse<t_repository_advisory>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type SecurityAdvisoriesCreatePrivateVulnerabilityReport = (
  params: Params<
    t_SecurityAdvisoriesCreatePrivateVulnerabilityReportParamSchema,
    void,
    t_SecurityAdvisoriesCreatePrivateVulnerabilityReportBodySchema
  >,
  respond: SecurityAdvisoriesCreatePrivateVulnerabilityReportResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_repository_advisory>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type SecurityAdvisoriesGetRepositoryAdvisoryResponder = {
  with200(): KoaRuntimeResponse<t_repository_advisory>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type SecurityAdvisoriesGetRepositoryAdvisory = (
  params: Params<
    t_SecurityAdvisoriesGetRepositoryAdvisoryParamSchema,
    void,
    void
  >,
  respond: SecurityAdvisoriesGetRepositoryAdvisoryResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_advisory>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type SecurityAdvisoriesUpdateRepositoryAdvisoryResponder = {
  with200(): KoaRuntimeResponse<t_repository_advisory>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type SecurityAdvisoriesUpdateRepositoryAdvisory = (
  params: Params<
    t_SecurityAdvisoriesUpdateRepositoryAdvisoryParamSchema,
    void,
    t_SecurityAdvisoriesUpdateRepositoryAdvisoryBodySchema
  >,
  respond: SecurityAdvisoriesUpdateRepositoryAdvisoryResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_advisory>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type SecurityAdvisoriesCreateRepositoryAdvisoryCveRequestResponder = {
  with202(): KoaRuntimeResponse<EmptyObject>
  with400(): KoaRuntimeResponse<t_scim_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type SecurityAdvisoriesCreateRepositoryAdvisoryCveRequest = (
  params: Params<
    t_SecurityAdvisoriesCreateRepositoryAdvisoryCveRequestParamSchema,
    void,
    void
  >,
  respond: SecurityAdvisoriesCreateRepositoryAdvisoryCveRequestResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<202, EmptyObject>
  | Response<400, t_scim_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type ActivityListStargazersForRepoResponder = {
  with200(): KoaRuntimeResponse<t_simple_user[] | t_stargazer[]>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ActivityListStargazersForRepo = (
  params: Params<
    t_ActivityListStargazersForRepoParamSchema,
    t_ActivityListStargazersForRepoQuerySchema,
    void
  >,
  respond: ActivityListStargazersForRepoResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[] | t_stargazer[]>
  | Response<422, t_validation_error>
>

export type ReposGetCodeFrequencyStatsResponder = {
  with200(): KoaRuntimeResponse<t_code_frequency_stat[]>
  with202(): KoaRuntimeResponse<EmptyObject>
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposGetCodeFrequencyStats = (
  params: Params<t_ReposGetCodeFrequencyStatsParamSchema, void, void>,
  respond: ReposGetCodeFrequencyStatsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_frequency_stat[]>
  | Response<202, EmptyObject>
  | Response<204, void>
>

export type ReposGetCommitActivityStatsResponder = {
  with200(): KoaRuntimeResponse<t_commit_activity[]>
  with202(): KoaRuntimeResponse<EmptyObject>
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposGetCommitActivityStats = (
  params: Params<t_ReposGetCommitActivityStatsParamSchema, void, void>,
  respond: ReposGetCommitActivityStatsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_commit_activity[]>
  | Response<202, EmptyObject>
  | Response<204, void>
>

export type ReposGetContributorsStatsResponder = {
  with200(): KoaRuntimeResponse<t_contributor_activity[]>
  with202(): KoaRuntimeResponse<EmptyObject>
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposGetContributorsStats = (
  params: Params<t_ReposGetContributorsStatsParamSchema, void, void>,
  respond: ReposGetContributorsStatsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_contributor_activity[]>
  | Response<202, EmptyObject>
  | Response<204, void>
>

export type ReposGetParticipationStatsResponder = {
  with200(): KoaRuntimeResponse<t_participation_stats>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetParticipationStats = (
  params: Params<t_ReposGetParticipationStatsParamSchema, void, void>,
  respond: ReposGetParticipationStatsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_participation_stats>
  | Response<404, t_basic_error>
>

export type ReposGetPunchCardStatsResponder = {
  with200(): KoaRuntimeResponse<t_code_frequency_stat[]>
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposGetPunchCardStats = (
  params: Params<t_ReposGetPunchCardStatsParamSchema, void, void>,
  respond: ReposGetPunchCardStatsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_code_frequency_stat[]>
  | Response<204, void>
>

export type ReposCreateCommitStatusResponder = {
  with201(): KoaRuntimeResponse<t_status>
} & KoaRuntimeResponder

export type ReposCreateCommitStatus = (
  params: Params<
    t_ReposCreateCommitStatusParamSchema,
    void,
    t_ReposCreateCommitStatusBodySchema
  >,
  respond: ReposCreateCommitStatusResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_status>>

export type ActivityListWatchersForRepoResponder = {
  with200(): KoaRuntimeResponse<t_simple_user[]>
} & KoaRuntimeResponder

export type ActivityListWatchersForRepo = (
  params: Params<
    t_ActivityListWatchersForRepoParamSchema,
    t_ActivityListWatchersForRepoQuerySchema,
    void
  >,
  respond: ActivityListWatchersForRepoResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_simple_user[]>>

export type ActivityGetRepoSubscriptionResponder = {
  with200(): KoaRuntimeResponse<t_repository_subscription>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActivityGetRepoSubscription = (
  params: Params<t_ActivityGetRepoSubscriptionParamSchema, void, void>,
  respond: ActivityGetRepoSubscriptionResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_subscription>
  | Response<403, t_basic_error>
  | Response<404, void>
>

export type ActivitySetRepoSubscriptionResponder = {
  with200(): KoaRuntimeResponse<t_repository_subscription>
} & KoaRuntimeResponder

export type ActivitySetRepoSubscription = (
  params: Params<
    t_ActivitySetRepoSubscriptionParamSchema,
    void,
    t_ActivitySetRepoSubscriptionBodySchema | undefined
  >,
  respond: ActivitySetRepoSubscriptionResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_repository_subscription>
>

export type ActivityDeleteRepoSubscriptionResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActivityDeleteRepoSubscription = (
  params: Params<t_ActivityDeleteRepoSubscriptionParamSchema, void, void>,
  respond: ActivityDeleteRepoSubscriptionResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ReposListTagsResponder = {
  with200(): KoaRuntimeResponse<t_tag[]>
} & KoaRuntimeResponder

export type ReposListTags = (
  params: Params<t_ReposListTagsParamSchema, t_ReposListTagsQuerySchema, void>,
  respond: ReposListTagsResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_tag[]>>

export type ReposListTagProtectionResponder = {
  with200(): KoaRuntimeResponse<t_tag_protection[]>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposListTagProtection = (
  params: Params<t_ReposListTagProtectionParamSchema, void, void>,
  respond: ReposListTagProtectionResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_tag_protection[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type ReposCreateTagProtectionResponder = {
  with201(): KoaRuntimeResponse<t_tag_protection>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposCreateTagProtection = (
  params: Params<
    t_ReposCreateTagProtectionParamSchema,
    void,
    t_ReposCreateTagProtectionBodySchema
  >,
  respond: ReposCreateTagProtectionResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_tag_protection>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type ReposDeleteTagProtectionResponder = {
  with204(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposDeleteTagProtection = (
  params: Params<t_ReposDeleteTagProtectionParamSchema, void, void>,
  respond: ReposDeleteTagProtectionResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type ReposDownloadTarballArchiveResponder = {
  with302(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposDownloadTarballArchive = (
  params: Params<t_ReposDownloadTarballArchiveParamSchema, void, void>,
  respond: ReposDownloadTarballArchiveResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<302, void>>

export type ReposListTeamsResponder = {
  with200(): KoaRuntimeResponse<t_team[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposListTeams = (
  params: Params<
    t_ReposListTeamsParamSchema,
    t_ReposListTeamsQuerySchema,
    void
  >,
  respond: ReposListTeamsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team[]>
  | Response<404, t_basic_error>
>

export type ReposGetAllTopicsResponder = {
  with200(): KoaRuntimeResponse<t_topic>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetAllTopics = (
  params: Params<
    t_ReposGetAllTopicsParamSchema,
    t_ReposGetAllTopicsQuerySchema,
    void
  >,
  respond: ReposGetAllTopicsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_topic>
  | Response<404, t_basic_error>
>

export type ReposReplaceAllTopicsResponder = {
  with200(): KoaRuntimeResponse<t_topic>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type ReposReplaceAllTopics = (
  params: Params<
    t_ReposReplaceAllTopicsParamSchema,
    void,
    t_ReposReplaceAllTopicsBodySchema
  >,
  respond: ReposReplaceAllTopicsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_topic>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type ReposGetClonesResponder = {
  with200(): KoaRuntimeResponse<t_clone_traffic>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetClones = (
  params: Params<
    t_ReposGetClonesParamSchema,
    t_ReposGetClonesQuerySchema,
    void
  >,
  respond: ReposGetClonesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_clone_traffic>
  | Response<403, t_basic_error>
>

export type ReposGetTopPathsResponder = {
  with200(): KoaRuntimeResponse<t_content_traffic[]>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetTopPaths = (
  params: Params<t_ReposGetTopPathsParamSchema, void, void>,
  respond: ReposGetTopPathsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_content_traffic[]>
  | Response<403, t_basic_error>
>

export type ReposGetTopReferrersResponder = {
  with200(): KoaRuntimeResponse<t_referrer_traffic[]>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetTopReferrers = (
  params: Params<t_ReposGetTopReferrersParamSchema, void, void>,
  respond: ReposGetTopReferrersResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_referrer_traffic[]>
  | Response<403, t_basic_error>
>

export type ReposGetViewsResponder = {
  with200(): KoaRuntimeResponse<t_view_traffic>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposGetViews = (
  params: Params<t_ReposGetViewsParamSchema, t_ReposGetViewsQuerySchema, void>,
  respond: ReposGetViewsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_view_traffic>
  | Response<403, t_basic_error>
>

export type ReposTransferResponder = {
  with202(): KoaRuntimeResponse<t_minimal_repository>
} & KoaRuntimeResponder

export type ReposTransfer = (
  params: Params<t_ReposTransferParamSchema, void, t_ReposTransferBodySchema>,
  respond: ReposTransferResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<202, t_minimal_repository>>

export type ReposCheckVulnerabilityAlertsResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposCheckVulnerabilityAlerts = (
  params: Params<t_ReposCheckVulnerabilityAlertsParamSchema, void, void>,
  respond: ReposCheckVulnerabilityAlertsResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<404, void>
>

export type ReposEnableVulnerabilityAlertsResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposEnableVulnerabilityAlerts = (
  params: Params<t_ReposEnableVulnerabilityAlertsParamSchema, void, void>,
  respond: ReposEnableVulnerabilityAlertsResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ReposDisableVulnerabilityAlertsResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposDisableVulnerabilityAlerts = (
  params: Params<t_ReposDisableVulnerabilityAlertsParamSchema, void, void>,
  respond: ReposDisableVulnerabilityAlertsResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ReposDownloadZipballArchiveResponder = {
  with302(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ReposDownloadZipballArchive = (
  params: Params<t_ReposDownloadZipballArchiveParamSchema, void, void>,
  respond: ReposDownloadZipballArchiveResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<302, void>>

export type ReposCreateUsingTemplateResponder = {
  with201(): KoaRuntimeResponse<t_repository>
} & KoaRuntimeResponder

export type ReposCreateUsingTemplate = (
  params: Params<
    t_ReposCreateUsingTemplateParamSchema,
    void,
    t_ReposCreateUsingTemplateBodySchema
  >,
  respond: ReposCreateUsingTemplateResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_repository>>

export type ReposListPublicResponder = {
  with200(): KoaRuntimeResponse<t_minimal_repository[]>
  with304(): KoaRuntimeResponse<void>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposListPublic = (
  params: Params<void, t_ReposListPublicQuerySchema, void>,
  respond: ReposListPublicResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_minimal_repository[]>
  | Response<304, void>
  | Response<422, t_validation_error>
>

export type ActionsListEnvironmentSecretsResponder = {
  with200(): KoaRuntimeResponse<{
    secrets: t_actions_secret[]
    total_count: number
  }>
} & KoaRuntimeResponder

export type ActionsListEnvironmentSecrets = (
  params: Params<
    t_ActionsListEnvironmentSecretsParamSchema,
    t_ActionsListEnvironmentSecretsQuerySchema,
    void
  >,
  respond: ActionsListEnvironmentSecretsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        secrets: t_actions_secret[]
        total_count: number
      }
    >
>

export type ActionsGetEnvironmentPublicKeyResponder = {
  with200(): KoaRuntimeResponse<t_actions_public_key>
} & KoaRuntimeResponder

export type ActionsGetEnvironmentPublicKey = (
  params: Params<t_ActionsGetEnvironmentPublicKeyParamSchema, void, void>,
  respond: ActionsGetEnvironmentPublicKeyResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_actions_public_key>>

export type ActionsGetEnvironmentSecretResponder = {
  with200(): KoaRuntimeResponse<t_actions_secret>
} & KoaRuntimeResponder

export type ActionsGetEnvironmentSecret = (
  params: Params<t_ActionsGetEnvironmentSecretParamSchema, void, void>,
  respond: ActionsGetEnvironmentSecretResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_actions_secret>>

export type ActionsCreateOrUpdateEnvironmentSecretResponder = {
  with201(): KoaRuntimeResponse<t_empty_object>
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsCreateOrUpdateEnvironmentSecret = (
  params: Params<
    t_ActionsCreateOrUpdateEnvironmentSecretParamSchema,
    void,
    t_ActionsCreateOrUpdateEnvironmentSecretBodySchema
  >,
  respond: ActionsCreateOrUpdateEnvironmentSecretResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<204, void>
>

export type ActionsDeleteEnvironmentSecretResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsDeleteEnvironmentSecret = (
  params: Params<t_ActionsDeleteEnvironmentSecretParamSchema, void, void>,
  respond: ActionsDeleteEnvironmentSecretResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsListEnvironmentVariablesResponder = {
  with200(): KoaRuntimeResponse<{
    total_count: number
    variables: t_actions_variable[]
  }>
} & KoaRuntimeResponder

export type ActionsListEnvironmentVariables = (
  params: Params<
    t_ActionsListEnvironmentVariablesParamSchema,
    t_ActionsListEnvironmentVariablesQuerySchema,
    void
  >,
  respond: ActionsListEnvironmentVariablesResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        total_count: number
        variables: t_actions_variable[]
      }
    >
>

export type ActionsCreateEnvironmentVariableResponder = {
  with201(): KoaRuntimeResponse<t_empty_object>
} & KoaRuntimeResponder

export type ActionsCreateEnvironmentVariable = (
  params: Params<
    t_ActionsCreateEnvironmentVariableParamSchema,
    void,
    t_ActionsCreateEnvironmentVariableBodySchema
  >,
  respond: ActionsCreateEnvironmentVariableResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_empty_object>>

export type ActionsGetEnvironmentVariableResponder = {
  with200(): KoaRuntimeResponse<t_actions_variable>
} & KoaRuntimeResponder

export type ActionsGetEnvironmentVariable = (
  params: Params<t_ActionsGetEnvironmentVariableParamSchema, void, void>,
  respond: ActionsGetEnvironmentVariableResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_actions_variable>>

export type ActionsUpdateEnvironmentVariableResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsUpdateEnvironmentVariable = (
  params: Params<
    t_ActionsUpdateEnvironmentVariableParamSchema,
    void,
    t_ActionsUpdateEnvironmentVariableBodySchema
  >,
  respond: ActionsUpdateEnvironmentVariableResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ActionsDeleteEnvironmentVariableResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type ActionsDeleteEnvironmentVariable = (
  params: Params<t_ActionsDeleteEnvironmentVariableParamSchema, void, void>,
  respond: ActionsDeleteEnvironmentVariableResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type SearchCodeResponder = {
  with200(): KoaRuntimeResponse<{
    incomplete_results: boolean
    items: t_code_search_result_item[]
    total_count: number
  }>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type SearchCode = (
  params: Params<void, t_SearchCodeQuerySchema, void>,
  respond: SearchCodeResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        incomplete_results: boolean
        items: t_code_search_result_item[]
        total_count: number
      }
    >
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type SearchCommitsResponder = {
  with200(): KoaRuntimeResponse<{
    incomplete_results: boolean
    items: t_commit_search_result_item[]
    total_count: number
  }>
  with304(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type SearchCommits = (
  params: Params<void, t_SearchCommitsQuerySchema, void>,
  respond: SearchCommitsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        incomplete_results: boolean
        items: t_commit_search_result_item[]
        total_count: number
      }
    >
  | Response<304, void>
>

export type SearchIssuesAndPullRequestsResponder = {
  with200(): KoaRuntimeResponse<{
    incomplete_results: boolean
    items: t_issue_search_result_item[]
    total_count: number
  }>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type SearchIssuesAndPullRequests = (
  params: Params<void, t_SearchIssuesAndPullRequestsQuerySchema, void>,
  respond: SearchIssuesAndPullRequestsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        incomplete_results: boolean
        items: t_issue_search_result_item[]
        total_count: number
      }
    >
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type SearchLabelsResponder = {
  with200(): KoaRuntimeResponse<{
    incomplete_results: boolean
    items: t_label_search_result_item[]
    total_count: number
  }>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type SearchLabels = (
  params: Params<void, t_SearchLabelsQuerySchema, void>,
  respond: SearchLabelsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        incomplete_results: boolean
        items: t_label_search_result_item[]
        total_count: number
      }
    >
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type SearchReposResponder = {
  with200(): KoaRuntimeResponse<{
    incomplete_results: boolean
    items: t_repo_search_result_item[]
    total_count: number
  }>
  with304(): KoaRuntimeResponse<void>
  with422(): KoaRuntimeResponse<t_validation_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type SearchRepos = (
  params: Params<void, t_SearchReposQuerySchema, void>,
  respond: SearchReposResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        incomplete_results: boolean
        items: t_repo_search_result_item[]
        total_count: number
      }
    >
  | Response<304, void>
  | Response<422, t_validation_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type SearchTopicsResponder = {
  with200(): KoaRuntimeResponse<{
    incomplete_results: boolean
    items: t_topic_search_result_item[]
    total_count: number
  }>
  with304(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type SearchTopics = (
  params: Params<void, t_SearchTopicsQuerySchema, void>,
  respond: SearchTopicsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        incomplete_results: boolean
        items: t_topic_search_result_item[]
        total_count: number
      }
    >
  | Response<304, void>
>

export type SearchUsersResponder = {
  with200(): KoaRuntimeResponse<{
    incomplete_results: boolean
    items: t_user_search_result_item[]
    total_count: number
  }>
  with304(): KoaRuntimeResponse<void>
  with422(): KoaRuntimeResponse<t_validation_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type SearchUsers = (
  params: Params<void, t_SearchUsersQuerySchema, void>,
  respond: SearchUsersResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        incomplete_results: boolean
        items: t_user_search_result_item[]
        total_count: number
      }
    >
  | Response<304, void>
  | Response<422, t_validation_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type TeamsGetLegacyResponder = {
  with200(): KoaRuntimeResponse<t_team_full>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type TeamsGetLegacy = (
  params: Params<t_TeamsGetLegacyParamSchema, void, void>,
  respond: TeamsGetLegacyResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_full>
  | Response<404, t_basic_error>
>

export type TeamsUpdateLegacyResponder = {
  with200(): KoaRuntimeResponse<t_team_full>
  with201(): KoaRuntimeResponse<t_team_full>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type TeamsUpdateLegacy = (
  params: Params<
    t_TeamsUpdateLegacyParamSchema,
    void,
    t_TeamsUpdateLegacyBodySchema
  >,
  respond: TeamsUpdateLegacyResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_full>
  | Response<201, t_team_full>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type TeamsDeleteLegacyResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type TeamsDeleteLegacy = (
  params: Params<t_TeamsDeleteLegacyParamSchema, void, void>,
  respond: TeamsDeleteLegacyResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type TeamsListDiscussionsLegacyResponder = {
  with200(): KoaRuntimeResponse<t_team_discussion[]>
} & KoaRuntimeResponder

export type TeamsListDiscussionsLegacy = (
  params: Params<
    t_TeamsListDiscussionsLegacyParamSchema,
    t_TeamsListDiscussionsLegacyQuerySchema,
    void
  >,
  respond: TeamsListDiscussionsLegacyResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_team_discussion[]>>

export type TeamsCreateDiscussionLegacyResponder = {
  with201(): KoaRuntimeResponse<t_team_discussion>
} & KoaRuntimeResponder

export type TeamsCreateDiscussionLegacy = (
  params: Params<
    t_TeamsCreateDiscussionLegacyParamSchema,
    void,
    t_TeamsCreateDiscussionLegacyBodySchema
  >,
  respond: TeamsCreateDiscussionLegacyResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_team_discussion>>

export type TeamsGetDiscussionLegacyResponder = {
  with200(): KoaRuntimeResponse<t_team_discussion>
} & KoaRuntimeResponder

export type TeamsGetDiscussionLegacy = (
  params: Params<t_TeamsGetDiscussionLegacyParamSchema, void, void>,
  respond: TeamsGetDiscussionLegacyResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_team_discussion>>

export type TeamsUpdateDiscussionLegacyResponder = {
  with200(): KoaRuntimeResponse<t_team_discussion>
} & KoaRuntimeResponder

export type TeamsUpdateDiscussionLegacy = (
  params: Params<
    t_TeamsUpdateDiscussionLegacyParamSchema,
    void,
    t_TeamsUpdateDiscussionLegacyBodySchema | undefined
  >,
  respond: TeamsUpdateDiscussionLegacyResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_team_discussion>>

export type TeamsDeleteDiscussionLegacyResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type TeamsDeleteDiscussionLegacy = (
  params: Params<t_TeamsDeleteDiscussionLegacyParamSchema, void, void>,
  respond: TeamsDeleteDiscussionLegacyResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type TeamsListDiscussionCommentsLegacyResponder = {
  with200(): KoaRuntimeResponse<t_team_discussion_comment[]>
} & KoaRuntimeResponder

export type TeamsListDiscussionCommentsLegacy = (
  params: Params<
    t_TeamsListDiscussionCommentsLegacyParamSchema,
    t_TeamsListDiscussionCommentsLegacyQuerySchema,
    void
  >,
  respond: TeamsListDiscussionCommentsLegacyResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_team_discussion_comment[]>
>

export type TeamsCreateDiscussionCommentLegacyResponder = {
  with201(): KoaRuntimeResponse<t_team_discussion_comment>
} & KoaRuntimeResponder

export type TeamsCreateDiscussionCommentLegacy = (
  params: Params<
    t_TeamsCreateDiscussionCommentLegacyParamSchema,
    void,
    t_TeamsCreateDiscussionCommentLegacyBodySchema
  >,
  respond: TeamsCreateDiscussionCommentLegacyResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<201, t_team_discussion_comment>
>

export type TeamsGetDiscussionCommentLegacyResponder = {
  with200(): KoaRuntimeResponse<t_team_discussion_comment>
} & KoaRuntimeResponder

export type TeamsGetDiscussionCommentLegacy = (
  params: Params<t_TeamsGetDiscussionCommentLegacyParamSchema, void, void>,
  respond: TeamsGetDiscussionCommentLegacyResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_team_discussion_comment>
>

export type TeamsUpdateDiscussionCommentLegacyResponder = {
  with200(): KoaRuntimeResponse<t_team_discussion_comment>
} & KoaRuntimeResponder

export type TeamsUpdateDiscussionCommentLegacy = (
  params: Params<
    t_TeamsUpdateDiscussionCommentLegacyParamSchema,
    void,
    t_TeamsUpdateDiscussionCommentLegacyBodySchema
  >,
  respond: TeamsUpdateDiscussionCommentLegacyResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_team_discussion_comment>
>

export type TeamsDeleteDiscussionCommentLegacyResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type TeamsDeleteDiscussionCommentLegacy = (
  params: Params<t_TeamsDeleteDiscussionCommentLegacyParamSchema, void, void>,
  respond: TeamsDeleteDiscussionCommentLegacyResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ReactionsListForTeamDiscussionCommentLegacyResponder = {
  with200(): KoaRuntimeResponse<t_reaction[]>
} & KoaRuntimeResponder

export type ReactionsListForTeamDiscussionCommentLegacy = (
  params: Params<
    t_ReactionsListForTeamDiscussionCommentLegacyParamSchema,
    t_ReactionsListForTeamDiscussionCommentLegacyQuerySchema,
    void
  >,
  respond: ReactionsListForTeamDiscussionCommentLegacyResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_reaction[]>>

export type ReactionsCreateForTeamDiscussionCommentLegacyResponder = {
  with201(): KoaRuntimeResponse<t_reaction>
} & KoaRuntimeResponder

export type ReactionsCreateForTeamDiscussionCommentLegacy = (
  params: Params<
    t_ReactionsCreateForTeamDiscussionCommentLegacyParamSchema,
    void,
    t_ReactionsCreateForTeamDiscussionCommentLegacyBodySchema
  >,
  respond: ReactionsCreateForTeamDiscussionCommentLegacyResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_reaction>>

export type ReactionsListForTeamDiscussionLegacyResponder = {
  with200(): KoaRuntimeResponse<t_reaction[]>
} & KoaRuntimeResponder

export type ReactionsListForTeamDiscussionLegacy = (
  params: Params<
    t_ReactionsListForTeamDiscussionLegacyParamSchema,
    t_ReactionsListForTeamDiscussionLegacyQuerySchema,
    void
  >,
  respond: ReactionsListForTeamDiscussionLegacyResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_reaction[]>>

export type ReactionsCreateForTeamDiscussionLegacyResponder = {
  with201(): KoaRuntimeResponse<t_reaction>
} & KoaRuntimeResponder

export type ReactionsCreateForTeamDiscussionLegacy = (
  params: Params<
    t_ReactionsCreateForTeamDiscussionLegacyParamSchema,
    void,
    t_ReactionsCreateForTeamDiscussionLegacyBodySchema
  >,
  respond: ReactionsCreateForTeamDiscussionLegacyResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<201, t_reaction>>

export type TeamsListPendingInvitationsLegacyResponder = {
  with200(): KoaRuntimeResponse<t_organization_invitation[]>
} & KoaRuntimeResponder

export type TeamsListPendingInvitationsLegacy = (
  params: Params<
    t_TeamsListPendingInvitationsLegacyParamSchema,
    t_TeamsListPendingInvitationsLegacyQuerySchema,
    void
  >,
  respond: TeamsListPendingInvitationsLegacyResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_organization_invitation[]>
>

export type TeamsListMembersLegacyResponder = {
  with200(): KoaRuntimeResponse<t_simple_user[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type TeamsListMembersLegacy = (
  params: Params<
    t_TeamsListMembersLegacyParamSchema,
    t_TeamsListMembersLegacyQuerySchema,
    void
  >,
  respond: TeamsListMembersLegacyResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[]>
  | Response<404, t_basic_error>
>

export type TeamsGetMemberLegacyResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type TeamsGetMemberLegacy = (
  params: Params<t_TeamsGetMemberLegacyParamSchema, void, void>,
  respond: TeamsGetMemberLegacyResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<404, void>
>

export type TeamsAddMemberLegacyResponder = {
  with204(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<void>
  with422(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type TeamsAddMemberLegacy = (
  params: Params<t_TeamsAddMemberLegacyParamSchema, void, void>,
  respond: TeamsAddMemberLegacyResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<404, void>
  | Response<422, void>
>

export type TeamsRemoveMemberLegacyResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type TeamsRemoveMemberLegacy = (
  params: Params<t_TeamsRemoveMemberLegacyParamSchema, void, void>,
  respond: TeamsRemoveMemberLegacyResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<404, void>
>

export type TeamsGetMembershipForUserLegacyResponder = {
  with200(): KoaRuntimeResponse<t_team_membership>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type TeamsGetMembershipForUserLegacy = (
  params: Params<t_TeamsGetMembershipForUserLegacyParamSchema, void, void>,
  respond: TeamsGetMembershipForUserLegacyResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_membership>
  | Response<404, t_basic_error>
>

export type TeamsAddOrUpdateMembershipForUserLegacyResponder = {
  with200(): KoaRuntimeResponse<t_team_membership>
  with403(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type TeamsAddOrUpdateMembershipForUserLegacy = (
  params: Params<
    t_TeamsAddOrUpdateMembershipForUserLegacyParamSchema,
    void,
    t_TeamsAddOrUpdateMembershipForUserLegacyBodySchema | undefined
  >,
  respond: TeamsAddOrUpdateMembershipForUserLegacyResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_membership>
  | Response<403, void>
  | Response<404, t_basic_error>
  | Response<422, void>
>

export type TeamsRemoveMembershipForUserLegacyResponder = {
  with204(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type TeamsRemoveMembershipForUserLegacy = (
  params: Params<t_TeamsRemoveMembershipForUserLegacyParamSchema, void, void>,
  respond: TeamsRemoveMembershipForUserLegacyResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<403, void>
>

export type TeamsListProjectsLegacyResponder = {
  with200(): KoaRuntimeResponse<t_team_project[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type TeamsListProjectsLegacy = (
  params: Params<
    t_TeamsListProjectsLegacyParamSchema,
    t_TeamsListProjectsLegacyQuerySchema,
    void
  >,
  respond: TeamsListProjectsLegacyResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_project[]>
  | Response<404, t_basic_error>
>

export type TeamsCheckPermissionsForProjectLegacyResponder = {
  with200(): KoaRuntimeResponse<t_team_project>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type TeamsCheckPermissionsForProjectLegacy = (
  params: Params<
    t_TeamsCheckPermissionsForProjectLegacyParamSchema,
    void,
    void
  >,
  respond: TeamsCheckPermissionsForProjectLegacyResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_project>
  | Response<404, void>
>

export type TeamsAddOrUpdateProjectPermissionsLegacyResponder = {
  with204(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<{
    documentation_url?: string
    message?: string
  }>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type TeamsAddOrUpdateProjectPermissionsLegacy = (
  params: Params<
    t_TeamsAddOrUpdateProjectPermissionsLegacyParamSchema,
    void,
    t_TeamsAddOrUpdateProjectPermissionsLegacyBodySchema | undefined
  >,
  respond: TeamsAddOrUpdateProjectPermissionsLegacyResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<
      403,
      {
        documentation_url?: string
        message?: string
      }
    >
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type TeamsRemoveProjectLegacyResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type TeamsRemoveProjectLegacy = (
  params: Params<t_TeamsRemoveProjectLegacyParamSchema, void, void>,
  respond: TeamsRemoveProjectLegacyResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type TeamsListReposLegacyResponder = {
  with200(): KoaRuntimeResponse<t_minimal_repository[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type TeamsListReposLegacy = (
  params: Params<
    t_TeamsListReposLegacyParamSchema,
    t_TeamsListReposLegacyQuerySchema,
    void
  >,
  respond: TeamsListReposLegacyResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_minimal_repository[]>
  | Response<404, t_basic_error>
>

export type TeamsCheckPermissionsForRepoLegacyResponder = {
  with200(): KoaRuntimeResponse<t_team_repository>
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type TeamsCheckPermissionsForRepoLegacy = (
  params: Params<t_TeamsCheckPermissionsForRepoLegacyParamSchema, void, void>,
  respond: TeamsCheckPermissionsForRepoLegacyResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_repository>
  | Response<204, void>
  | Response<404, void>
>

export type TeamsAddOrUpdateRepoPermissionsLegacyResponder = {
  with204(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type TeamsAddOrUpdateRepoPermissionsLegacy = (
  params: Params<
    t_TeamsAddOrUpdateRepoPermissionsLegacyParamSchema,
    void,
    t_TeamsAddOrUpdateRepoPermissionsLegacyBodySchema | undefined
  >,
  respond: TeamsAddOrUpdateRepoPermissionsLegacyResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

export type TeamsRemoveRepoLegacyResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type TeamsRemoveRepoLegacy = (
  params: Params<t_TeamsRemoveRepoLegacyParamSchema, void, void>,
  respond: TeamsRemoveRepoLegacyResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type TeamsListChildLegacyResponder = {
  with200(): KoaRuntimeResponse<t_team[]>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type TeamsListChildLegacy = (
  params: Params<
    t_TeamsListChildLegacyParamSchema,
    t_TeamsListChildLegacyQuerySchema,
    void
  >,
  respond: TeamsListChildLegacyResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team[]>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type UsersGetAuthenticatedResponder = {
  with200(): KoaRuntimeResponse<t_private_user | t_public_user>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type UsersGetAuthenticated = (
  params: Params<void, void, void>,
  respond: UsersGetAuthenticatedResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_private_user | t_public_user>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type UsersUpdateAuthenticatedResponder = {
  with200(): KoaRuntimeResponse<t_private_user>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type UsersUpdateAuthenticated = (
  params: Params<void, void, t_UsersUpdateAuthenticatedBodySchema | undefined>,
  respond: UsersUpdateAuthenticatedResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_private_user>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type UsersListBlockedByAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_simple_user[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type UsersListBlockedByAuthenticatedUser = (
  params: Params<void, t_UsersListBlockedByAuthenticatedUserQuerySchema, void>,
  respond: UsersListBlockedByAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type UsersCheckBlockedResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type UsersCheckBlocked = (
  params: Params<t_UsersCheckBlockedParamSchema, void, void>,
  respond: UsersCheckBlockedResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type UsersBlockResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type UsersBlock = (
  params: Params<t_UsersBlockParamSchema, void, void>,
  respond: UsersBlockResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type UsersUnblockResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type UsersUnblock = (
  params: Params<t_UsersUnblockParamSchema, void, void>,
  respond: UsersUnblockResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type CodespacesListForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<{
    codespaces: t_codespace[]
    total_count: number
  }>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesListForAuthenticatedUser = (
  params: Params<void, t_CodespacesListForAuthenticatedUserQuerySchema, void>,
  respond: CodespacesListForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        codespaces: t_codespace[]
        total_count: number
      }
    >
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type CodespacesCreateForAuthenticatedUserResponder = {
  with201(): KoaRuntimeResponse<t_codespace>
  with202(): KoaRuntimeResponse<t_codespace>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with503(): KoaRuntimeResponse<{
    code?: string
    documentation_url?: string
    message?: string
  }>
} & KoaRuntimeResponder

export type CodespacesCreateForAuthenticatedUser = (
  params: Params<void, void, t_CodespacesCreateForAuthenticatedUserBodySchema>,
  respond: CodespacesCreateForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_codespace>
  | Response<202, t_codespace>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<
      503,
      {
        code?: string
        documentation_url?: string
        message?: string
      }
    >
>

export type CodespacesListSecretsForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<{
    secrets: t_codespaces_secret[]
    total_count: number
  }>
} & KoaRuntimeResponder

export type CodespacesListSecretsForAuthenticatedUser = (
  params: Params<
    void,
    t_CodespacesListSecretsForAuthenticatedUserQuerySchema,
    void
  >,
  respond: CodespacesListSecretsForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        secrets: t_codespaces_secret[]
        total_count: number
      }
    >
>

export type CodespacesGetPublicKeyForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_codespaces_user_public_key>
} & KoaRuntimeResponder

export type CodespacesGetPublicKeyForAuthenticatedUser = (
  params: Params<void, void, void>,
  respond: CodespacesGetPublicKeyForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_codespaces_user_public_key>
>

export type CodespacesGetSecretForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_codespaces_secret>
} & KoaRuntimeResponder

export type CodespacesGetSecretForAuthenticatedUser = (
  params: Params<
    t_CodespacesGetSecretForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: CodespacesGetSecretForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_codespaces_secret>>

export type CodespacesCreateOrUpdateSecretForAuthenticatedUserResponder = {
  with201(): KoaRuntimeResponse<t_empty_object>
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type CodespacesCreateOrUpdateSecretForAuthenticatedUser = (
  params: Params<
    t_CodespacesCreateOrUpdateSecretForAuthenticatedUserParamSchema,
    void,
    t_CodespacesCreateOrUpdateSecretForAuthenticatedUserBodySchema
  >,
  respond: CodespacesCreateOrUpdateSecretForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_empty_object>
  | Response<204, void>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type CodespacesDeleteSecretForAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type CodespacesDeleteSecretForAuthenticatedUser = (
  params: Params<
    t_CodespacesDeleteSecretForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: CodespacesDeleteSecretForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type CodespacesListRepositoriesForSecretForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<{
    repositories: t_minimal_repository[]
    total_count: number
  }>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesListRepositoriesForSecretForAuthenticatedUser = (
  params: Params<
    t_CodespacesListRepositoriesForSecretForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: CodespacesListRepositoriesForSecretForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        repositories: t_minimal_repository[]
        total_count: number
      }
    >
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type CodespacesSetRepositoriesForSecretForAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesSetRepositoriesForSecretForAuthenticatedUser = (
  params: Params<
    t_CodespacesSetRepositoriesForSecretForAuthenticatedUserParamSchema,
    void,
    t_CodespacesSetRepositoriesForSecretForAuthenticatedUserBodySchema
  >,
  respond: CodespacesSetRepositoriesForSecretForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type CodespacesAddRepositoryForSecretForAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesAddRepositoryForSecretForAuthenticatedUser = (
  params: Params<
    t_CodespacesAddRepositoryForSecretForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: CodespacesAddRepositoryForSecretForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type CodespacesRemoveRepositoryForSecretForAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesRemoveRepositoryForSecretForAuthenticatedUser = (
  params: Params<
    t_CodespacesRemoveRepositoryForSecretForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: CodespacesRemoveRepositoryForSecretForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type CodespacesGetForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_codespace>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesGetForAuthenticatedUser = (
  params: Params<t_CodespacesGetForAuthenticatedUserParamSchema, void, void>,
  respond: CodespacesGetForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_codespace>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type CodespacesUpdateForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_codespace>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesUpdateForAuthenticatedUser = (
  params: Params<
    t_CodespacesUpdateForAuthenticatedUserParamSchema,
    void,
    t_CodespacesUpdateForAuthenticatedUserBodySchema | undefined
  >,
  respond: CodespacesUpdateForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_codespace>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type CodespacesDeleteForAuthenticatedUserResponder = {
  with202(): KoaRuntimeResponse<EmptyObject>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesDeleteForAuthenticatedUser = (
  params: Params<t_CodespacesDeleteForAuthenticatedUserParamSchema, void, void>,
  respond: CodespacesDeleteForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<202, EmptyObject>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type CodespacesExportForAuthenticatedUserResponder = {
  with202(): KoaRuntimeResponse<t_codespace_export_details>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesExportForAuthenticatedUser = (
  params: Params<t_CodespacesExportForAuthenticatedUserParamSchema, void, void>,
  respond: CodespacesExportForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<202, t_codespace_export_details>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
  | Response<500, t_basic_error>
>

export type CodespacesGetExportDetailsForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_codespace_export_details>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesGetExportDetailsForAuthenticatedUser = (
  params: Params<
    t_CodespacesGetExportDetailsForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: CodespacesGetExportDetailsForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_codespace_export_details>
  | Response<404, t_basic_error>
>

export type CodespacesCodespaceMachinesForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<{
    machines: t_codespace_machine[]
    total_count: number
  }>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesCodespaceMachinesForAuthenticatedUser = (
  params: Params<
    t_CodespacesCodespaceMachinesForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: CodespacesCodespaceMachinesForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        machines: t_codespace_machine[]
        total_count: number
      }
    >
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type CodespacesPublishForAuthenticatedUserResponder = {
  with201(): KoaRuntimeResponse<t_codespace_with_full_repository>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type CodespacesPublishForAuthenticatedUser = (
  params: Params<
    t_CodespacesPublishForAuthenticatedUserParamSchema,
    void,
    t_CodespacesPublishForAuthenticatedUserBodySchema
  >,
  respond: CodespacesPublishForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_codespace_with_full_repository>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type CodespacesStartForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_codespace>
  with304(): KoaRuntimeResponse<void>
  with400(): KoaRuntimeResponse<t_scim_error>
  with401(): KoaRuntimeResponse<t_basic_error>
  with402(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with409(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesStartForAuthenticatedUser = (
  params: Params<t_CodespacesStartForAuthenticatedUserParamSchema, void, void>,
  respond: CodespacesStartForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_codespace>
  | Response<304, void>
  | Response<400, t_scim_error>
  | Response<401, t_basic_error>
  | Response<402, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
  | Response<500, t_basic_error>
>

export type CodespacesStopForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_codespace>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with500(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type CodespacesStopForAuthenticatedUser = (
  params: Params<t_CodespacesStopForAuthenticatedUserParamSchema, void, void>,
  respond: CodespacesStopForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_codespace>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<500, t_basic_error>
>

export type PackagesListDockerMigrationConflictingPackagesForAuthenticatedUserResponder =
  {
    with200(): KoaRuntimeResponse<t_package[]>
  } & KoaRuntimeResponder

export type PackagesListDockerMigrationConflictingPackagesForAuthenticatedUser =
  (
    params: Params<void, void, void>,
    respond: PackagesListDockerMigrationConflictingPackagesForAuthenticatedUserResponder,
    ctx: Context,
  ) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_package[]>>

export type UsersSetPrimaryEmailVisibilityForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_email[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type UsersSetPrimaryEmailVisibilityForAuthenticatedUser = (
  params: Params<
    void,
    void,
    t_UsersSetPrimaryEmailVisibilityForAuthenticatedUserBodySchema
  >,
  respond: UsersSetPrimaryEmailVisibilityForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_email[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type UsersListEmailsForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_email[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type UsersListEmailsForAuthenticatedUser = (
  params: Params<void, t_UsersListEmailsForAuthenticatedUserQuerySchema, void>,
  respond: UsersListEmailsForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_email[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type UsersAddEmailForAuthenticatedUserResponder = {
  with201(): KoaRuntimeResponse<t_email[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type UsersAddEmailForAuthenticatedUser = (
  params: Params<
    void,
    void,
    t_UsersAddEmailForAuthenticatedUserBodySchema | undefined
  >,
  respond: UsersAddEmailForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_email[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type UsersDeleteEmailForAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type UsersDeleteEmailForAuthenticatedUser = (
  params: Params<void, void, t_UsersDeleteEmailForAuthenticatedUserBodySchema>,
  respond: UsersDeleteEmailForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type UsersListFollowersForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_simple_user[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type UsersListFollowersForAuthenticatedUser = (
  params: Params<
    void,
    t_UsersListFollowersForAuthenticatedUserQuerySchema,
    void
  >,
  respond: UsersListFollowersForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type UsersListFollowedByAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_simple_user[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type UsersListFollowedByAuthenticatedUser = (
  params: Params<void, t_UsersListFollowedByAuthenticatedUserQuerySchema, void>,
  respond: UsersListFollowedByAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type UsersCheckPersonIsFollowedByAuthenticatedResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type UsersCheckPersonIsFollowedByAuthenticated = (
  params: Params<
    t_UsersCheckPersonIsFollowedByAuthenticatedParamSchema,
    void,
    void
  >,
  respond: UsersCheckPersonIsFollowedByAuthenticatedResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type UsersFollowResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type UsersFollow = (
  params: Params<t_UsersFollowParamSchema, void, void>,
  respond: UsersFollowResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type UsersUnfollowResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type UsersUnfollow = (
  params: Params<t_UsersUnfollowParamSchema, void, void>,
  respond: UsersUnfollowResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type UsersListGpgKeysForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_gpg_key[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type UsersListGpgKeysForAuthenticatedUser = (
  params: Params<void, t_UsersListGpgKeysForAuthenticatedUserQuerySchema, void>,
  respond: UsersListGpgKeysForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_gpg_key[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type UsersCreateGpgKeyForAuthenticatedUserResponder = {
  with201(): KoaRuntimeResponse<t_gpg_key>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type UsersCreateGpgKeyForAuthenticatedUser = (
  params: Params<void, void, t_UsersCreateGpgKeyForAuthenticatedUserBodySchema>,
  respond: UsersCreateGpgKeyForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_gpg_key>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type UsersGetGpgKeyForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_gpg_key>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type UsersGetGpgKeyForAuthenticatedUser = (
  params: Params<t_UsersGetGpgKeyForAuthenticatedUserParamSchema, void, void>,
  respond: UsersGetGpgKeyForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_gpg_key>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type UsersDeleteGpgKeyForAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type UsersDeleteGpgKeyForAuthenticatedUser = (
  params: Params<
    t_UsersDeleteGpgKeyForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: UsersDeleteGpgKeyForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type AppsListInstallationsForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<{
    installations: t_installation[]
    total_count: number
  }>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type AppsListInstallationsForAuthenticatedUser = (
  params: Params<
    void,
    t_AppsListInstallationsForAuthenticatedUserQuerySchema,
    void
  >,
  respond: AppsListInstallationsForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        installations: t_installation[]
        total_count: number
      }
    >
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type AppsListInstallationReposForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<{
    repositories: t_repository[]
    repository_selection?: string
    total_count: number
  }>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type AppsListInstallationReposForAuthenticatedUser = (
  params: Params<
    t_AppsListInstallationReposForAuthenticatedUserParamSchema,
    t_AppsListInstallationReposForAuthenticatedUserQuerySchema,
    void
  >,
  respond: AppsListInstallationReposForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        repositories: t_repository[]
        repository_selection?: string
        total_count: number
      }
    >
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type AppsAddRepoToInstallationForAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type AppsAddRepoToInstallationForAuthenticatedUser = (
  params: Params<
    t_AppsAddRepoToInstallationForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: AppsAddRepoToInstallationForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type AppsRemoveRepoFromInstallationForAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type AppsRemoveRepoFromInstallationForAuthenticatedUser = (
  params: Params<
    t_AppsRemoveRepoFromInstallationForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: AppsRemoveRepoFromInstallationForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, void>
>

export type InteractionsGetRestrictionsForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_interaction_limit_response | EmptyObject>
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type InteractionsGetRestrictionsForAuthenticatedUser = (
  params: Params<void, void, void>,
  respond: InteractionsGetRestrictionsForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_interaction_limit_response | EmptyObject>
  | Response<204, void>
>

export type InteractionsSetRestrictionsForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_interaction_limit_response>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type InteractionsSetRestrictionsForAuthenticatedUser = (
  params: Params<
    void,
    void,
    t_InteractionsSetRestrictionsForAuthenticatedUserBodySchema
  >,
  respond: InteractionsSetRestrictionsForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_interaction_limit_response>
  | Response<422, t_validation_error>
>

export type InteractionsRemoveRestrictionsForAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type InteractionsRemoveRestrictionsForAuthenticatedUser = (
  params: Params<void, void, void>,
  respond: InteractionsRemoveRestrictionsForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type IssuesListForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_issue[]>
  with304(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type IssuesListForAuthenticatedUser = (
  params: Params<void, t_IssuesListForAuthenticatedUserQuerySchema, void>,
  respond: IssuesListForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_issue[]>
  | Response<304, void>
  | Response<404, t_basic_error>
>

export type UsersListPublicSshKeysForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_key[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type UsersListPublicSshKeysForAuthenticatedUser = (
  params: Params<
    void,
    t_UsersListPublicSshKeysForAuthenticatedUserQuerySchema,
    void
  >,
  respond: UsersListPublicSshKeysForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_key[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type UsersCreatePublicSshKeyForAuthenticatedUserResponder = {
  with201(): KoaRuntimeResponse<t_key>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type UsersCreatePublicSshKeyForAuthenticatedUser = (
  params: Params<
    void,
    void,
    t_UsersCreatePublicSshKeyForAuthenticatedUserBodySchema
  >,
  respond: UsersCreatePublicSshKeyForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_key>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type UsersGetPublicSshKeyForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_key>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type UsersGetPublicSshKeyForAuthenticatedUser = (
  params: Params<
    t_UsersGetPublicSshKeyForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: UsersGetPublicSshKeyForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_key>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type UsersDeletePublicSshKeyForAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type UsersDeletePublicSshKeyForAuthenticatedUser = (
  params: Params<
    t_UsersDeletePublicSshKeyForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: UsersDeletePublicSshKeyForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type AppsListSubscriptionsForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_user_marketplace_purchase[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type AppsListSubscriptionsForAuthenticatedUser = (
  params: Params<
    void,
    t_AppsListSubscriptionsForAuthenticatedUserQuerySchema,
    void
  >,
  respond: AppsListSubscriptionsForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_user_marketplace_purchase[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<404, t_basic_error>
>

export type AppsListSubscriptionsForAuthenticatedUserStubbedResponder = {
  with200(): KoaRuntimeResponse<t_user_marketplace_purchase[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type AppsListSubscriptionsForAuthenticatedUserStubbed = (
  params: Params<
    void,
    t_AppsListSubscriptionsForAuthenticatedUserStubbedQuerySchema,
    void
  >,
  respond: AppsListSubscriptionsForAuthenticatedUserStubbedResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_user_marketplace_purchase[]>
  | Response<304, void>
  | Response<401, t_basic_error>
>

export type OrgsListMembershipsForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_org_membership[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type OrgsListMembershipsForAuthenticatedUser = (
  params: Params<
    void,
    t_OrgsListMembershipsForAuthenticatedUserQuerySchema,
    void
  >,
  respond: OrgsListMembershipsForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_org_membership[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

export type OrgsGetMembershipForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_org_membership>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsGetMembershipForAuthenticatedUser = (
  params: Params<
    t_OrgsGetMembershipForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: OrgsGetMembershipForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_org_membership>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type OrgsUpdateMembershipForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_org_membership>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type OrgsUpdateMembershipForAuthenticatedUser = (
  params: Params<
    t_OrgsUpdateMembershipForAuthenticatedUserParamSchema,
    void,
    t_OrgsUpdateMembershipForAuthenticatedUserBodySchema
  >,
  respond: OrgsUpdateMembershipForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_org_membership>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type MigrationsListForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_migration[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type MigrationsListForAuthenticatedUser = (
  params: Params<void, t_MigrationsListForAuthenticatedUserQuerySchema, void>,
  respond: MigrationsListForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_migration[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type MigrationsStartForAuthenticatedUserResponder = {
  with201(): KoaRuntimeResponse<t_migration>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type MigrationsStartForAuthenticatedUser = (
  params: Params<void, void, t_MigrationsStartForAuthenticatedUserBodySchema>,
  respond: MigrationsStartForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_migration>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

export type MigrationsGetStatusForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_migration>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type MigrationsGetStatusForAuthenticatedUser = (
  params: Params<
    t_MigrationsGetStatusForAuthenticatedUserParamSchema,
    t_MigrationsGetStatusForAuthenticatedUserQuerySchema,
    void
  >,
  respond: MigrationsGetStatusForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_migration>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type MigrationsGetArchiveForAuthenticatedUserResponder = {
  with302(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type MigrationsGetArchiveForAuthenticatedUser = (
  params: Params<
    t_MigrationsGetArchiveForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: MigrationsGetArchiveForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<302, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type MigrationsDeleteArchiveForAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type MigrationsDeleteArchiveForAuthenticatedUser = (
  params: Params<
    t_MigrationsDeleteArchiveForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: MigrationsDeleteArchiveForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type MigrationsUnlockRepoForAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type MigrationsUnlockRepoForAuthenticatedUser = (
  params: Params<
    t_MigrationsUnlockRepoForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: MigrationsUnlockRepoForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type MigrationsListReposForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_minimal_repository[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type MigrationsListReposForAuthenticatedUser = (
  params: Params<
    t_MigrationsListReposForAuthenticatedUserParamSchema,
    t_MigrationsListReposForAuthenticatedUserQuerySchema,
    void
  >,
  respond: MigrationsListReposForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_minimal_repository[]>
  | Response<404, t_basic_error>
>

export type OrgsListForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_organization_simple[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type OrgsListForAuthenticatedUser = (
  params: Params<void, t_OrgsListForAuthenticatedUserQuerySchema, void>,
  respond: OrgsListForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_organization_simple[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type PackagesListPackagesForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_package[]>
  with400(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type PackagesListPackagesForAuthenticatedUser = (
  params: Params<
    void,
    t_PackagesListPackagesForAuthenticatedUserQuerySchema,
    void
  >,
  respond: PackagesListPackagesForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_package[]> | Response<400, void>
>

export type PackagesGetPackageForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_package>
} & KoaRuntimeResponder

export type PackagesGetPackageForAuthenticatedUser = (
  params: Params<
    t_PackagesGetPackageForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: PackagesGetPackageForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_package>>

export type PackagesDeletePackageForAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type PackagesDeletePackageForAuthenticatedUser = (
  params: Params<
    t_PackagesDeletePackageForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: PackagesDeletePackageForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type PackagesRestorePackageForAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type PackagesRestorePackageForAuthenticatedUser = (
  params: Params<
    t_PackagesRestorePackageForAuthenticatedUserParamSchema,
    t_PackagesRestorePackageForAuthenticatedUserQuerySchema,
    void
  >,
  respond: PackagesRestorePackageForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponder =
  {
    with200(): KoaRuntimeResponse<t_package_version[]>
    with401(): KoaRuntimeResponse<t_basic_error>
    with403(): KoaRuntimeResponse<t_basic_error>
    with404(): KoaRuntimeResponse<t_basic_error>
  } & KoaRuntimeResponder

export type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser = (
  params: Params<
    t_PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParamSchema,
    t_PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQuerySchema,
    void
  >,
  respond: PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_package_version[]>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type PackagesGetPackageVersionForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_package_version>
} & KoaRuntimeResponder

export type PackagesGetPackageVersionForAuthenticatedUser = (
  params: Params<
    t_PackagesGetPackageVersionForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: PackagesGetPackageVersionForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_package_version>>

export type PackagesDeletePackageVersionForAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type PackagesDeletePackageVersionForAuthenticatedUser = (
  params: Params<
    t_PackagesDeletePackageVersionForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: PackagesDeletePackageVersionForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type PackagesRestorePackageVersionForAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type PackagesRestorePackageVersionForAuthenticatedUser = (
  params: Params<
    t_PackagesRestorePackageVersionForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: PackagesRestorePackageVersionForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type ProjectsCreateForAuthenticatedUserResponder = {
  with201(): KoaRuntimeResponse<t_project>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error_simple>
} & KoaRuntimeResponder

export type ProjectsCreateForAuthenticatedUser = (
  params: Params<void, void, t_ProjectsCreateForAuthenticatedUserBodySchema>,
  respond: ProjectsCreateForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_project>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error_simple>
>

export type UsersListPublicEmailsForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_email[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type UsersListPublicEmailsForAuthenticatedUser = (
  params: Params<
    void,
    t_UsersListPublicEmailsForAuthenticatedUserQuerySchema,
    void
  >,
  respond: UsersListPublicEmailsForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_email[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type ReposListForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_repository[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposListForAuthenticatedUser = (
  params: Params<void, t_ReposListForAuthenticatedUserQuerySchema, void>,
  respond: ReposListForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<422, t_validation_error>
>

export type ReposCreateForAuthenticatedUserResponder = {
  with201(): KoaRuntimeResponse<t_repository>
  with304(): KoaRuntimeResponse<void>
  with400(): KoaRuntimeResponse<t_scim_error>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ReposCreateForAuthenticatedUser = (
  params: Params<void, void, t_ReposCreateForAuthenticatedUserBodySchema>,
  respond: ReposCreateForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_repository>
  | Response<304, void>
  | Response<400, t_scim_error>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type ReposListInvitationsForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_repository_invitation[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposListInvitationsForAuthenticatedUser = (
  params: Params<
    void,
    t_ReposListInvitationsForAuthenticatedUserQuerySchema,
    void
  >,
  respond: ReposListInvitationsForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_repository_invitation[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type ReposAcceptInvitationForAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with409(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposAcceptInvitationForAuthenticatedUser = (
  params: Params<
    t_ReposAcceptInvitationForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: ReposAcceptInvitationForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
>

export type ReposDeclineInvitationForAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with409(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ReposDeclineInvitationForAuthenticatedUser = (
  params: Params<
    t_ReposDeclineInvitationForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: ReposDeclineInvitationForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<409, t_basic_error>
>

export type UsersListSocialAccountsForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_social_account[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type UsersListSocialAccountsForAuthenticatedUser = (
  params: Params<
    void,
    t_UsersListSocialAccountsForAuthenticatedUserQuerySchema,
    void
  >,
  respond: UsersListSocialAccountsForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_social_account[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type UsersAddSocialAccountForAuthenticatedUserResponder = {
  with201(): KoaRuntimeResponse<t_social_account[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type UsersAddSocialAccountForAuthenticatedUser = (
  params: Params<
    void,
    void,
    t_UsersAddSocialAccountForAuthenticatedUserBodySchema
  >,
  respond: UsersAddSocialAccountForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_social_account[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type UsersDeleteSocialAccountForAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type UsersDeleteSocialAccountForAuthenticatedUser = (
  params: Params<
    void,
    void,
    t_UsersDeleteSocialAccountForAuthenticatedUserBodySchema
  >,
  respond: UsersDeleteSocialAccountForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type UsersListSshSigningKeysForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_ssh_signing_key[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type UsersListSshSigningKeysForAuthenticatedUser = (
  params: Params<
    void,
    t_UsersListSshSigningKeysForAuthenticatedUserQuerySchema,
    void
  >,
  respond: UsersListSshSigningKeysForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_ssh_signing_key[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type UsersCreateSshSigningKeyForAuthenticatedUserResponder = {
  with201(): KoaRuntimeResponse<t_ssh_signing_key>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type UsersCreateSshSigningKeyForAuthenticatedUser = (
  params: Params<
    void,
    void,
    t_UsersCreateSshSigningKeyForAuthenticatedUserBodySchema
  >,
  respond: UsersCreateSshSigningKeyForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_ssh_signing_key>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type UsersGetSshSigningKeyForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_ssh_signing_key>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type UsersGetSshSigningKeyForAuthenticatedUser = (
  params: Params<
    t_UsersGetSshSigningKeyForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: UsersGetSshSigningKeyForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_ssh_signing_key>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type UsersDeleteSshSigningKeyForAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type UsersDeleteSshSigningKeyForAuthenticatedUser = (
  params: Params<
    t_UsersDeleteSshSigningKeyForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: UsersDeleteSshSigningKeyForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type ActivityListReposStarredByAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_starred_repository[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ActivityListReposStarredByAuthenticatedUser = (
  params: Params<
    void,
    t_ActivityListReposStarredByAuthenticatedUserQuerySchema,
    void
  >,
  respond: ActivityListReposStarredByAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_starred_repository[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type ActivityCheckRepoIsStarredByAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ActivityCheckRepoIsStarredByAuthenticatedUser = (
  params: Params<
    t_ActivityCheckRepoIsStarredByAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: ActivityCheckRepoIsStarredByAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type ActivityStarRepoForAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ActivityStarRepoForAuthenticatedUser = (
  params: Params<t_ActivityStarRepoForAuthenticatedUserParamSchema, void, void>,
  respond: ActivityStarRepoForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type ActivityUnstarRepoForAuthenticatedUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ActivityUnstarRepoForAuthenticatedUser = (
  params: Params<
    t_ActivityUnstarRepoForAuthenticatedUserParamSchema,
    void,
    void
  >,
  respond: ActivityUnstarRepoForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type ActivityListWatchedReposForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_minimal_repository[]>
  with304(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type ActivityListWatchedReposForAuthenticatedUser = (
  params: Params<
    void,
    t_ActivityListWatchedReposForAuthenticatedUserQuerySchema,
    void
  >,
  respond: ActivityListWatchedReposForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_minimal_repository[]>
  | Response<304, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type TeamsListForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_team_full[]>
  with304(): KoaRuntimeResponse<void>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type TeamsListForAuthenticatedUser = (
  params: Params<void, t_TeamsListForAuthenticatedUserQuerySchema, void>,
  respond: TeamsListForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_team_full[]>
  | Response<304, void>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type UsersListResponder = {
  with200(): KoaRuntimeResponse<t_simple_user[]>
  with304(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type UsersList = (
  params: Params<void, t_UsersListQuerySchema, void>,
  respond: UsersListResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_simple_user[]>
  | Response<304, void>
>

export type UsersGetByUsernameResponder = {
  with200(): KoaRuntimeResponse<t_private_user | t_public_user>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type UsersGetByUsername = (
  params: Params<t_UsersGetByUsernameParamSchema, void, void>,
  respond: UsersGetByUsernameResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_private_user | t_public_user>
  | Response<404, t_basic_error>
>

export type PackagesListDockerMigrationConflictingPackagesForUserResponder = {
  with200(): KoaRuntimeResponse<t_package[]>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type PackagesListDockerMigrationConflictingPackagesForUser = (
  params: Params<
    t_PackagesListDockerMigrationConflictingPackagesForUserParamSchema,
    void,
    void
  >,
  respond: PackagesListDockerMigrationConflictingPackagesForUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_package[]>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type ActivityListEventsForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_event[]>
} & KoaRuntimeResponder

export type ActivityListEventsForAuthenticatedUser = (
  params: Params<
    t_ActivityListEventsForAuthenticatedUserParamSchema,
    t_ActivityListEventsForAuthenticatedUserQuerySchema,
    void
  >,
  respond: ActivityListEventsForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_event[]>>

export type ActivityListOrgEventsForAuthenticatedUserResponder = {
  with200(): KoaRuntimeResponse<t_event[]>
} & KoaRuntimeResponder

export type ActivityListOrgEventsForAuthenticatedUser = (
  params: Params<
    t_ActivityListOrgEventsForAuthenticatedUserParamSchema,
    t_ActivityListOrgEventsForAuthenticatedUserQuerySchema,
    void
  >,
  respond: ActivityListOrgEventsForAuthenticatedUserResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_event[]>>

export type ActivityListPublicEventsForUserResponder = {
  with200(): KoaRuntimeResponse<t_event[]>
} & KoaRuntimeResponder

export type ActivityListPublicEventsForUser = (
  params: Params<
    t_ActivityListPublicEventsForUserParamSchema,
    t_ActivityListPublicEventsForUserQuerySchema,
    void
  >,
  respond: ActivityListPublicEventsForUserResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_event[]>>

export type UsersListFollowersForUserResponder = {
  with200(): KoaRuntimeResponse<t_simple_user[]>
} & KoaRuntimeResponder

export type UsersListFollowersForUser = (
  params: Params<
    t_UsersListFollowersForUserParamSchema,
    t_UsersListFollowersForUserQuerySchema,
    void
  >,
  respond: UsersListFollowersForUserResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_simple_user[]>>

export type UsersListFollowingForUserResponder = {
  with200(): KoaRuntimeResponse<t_simple_user[]>
} & KoaRuntimeResponder

export type UsersListFollowingForUser = (
  params: Params<
    t_UsersListFollowingForUserParamSchema,
    t_UsersListFollowingForUserQuerySchema,
    void
  >,
  respond: UsersListFollowingForUserResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_simple_user[]>>

export type UsersCheckFollowingForUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with404(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type UsersCheckFollowingForUser = (
  params: Params<t_UsersCheckFollowingForUserParamSchema, void, void>,
  respond: UsersCheckFollowingForUserResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<204, void> | Response<404, void>
>

export type GistsListForUserResponder = {
  with200(): KoaRuntimeResponse<t_base_gist[]>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type GistsListForUser = (
  params: Params<
    t_GistsListForUserParamSchema,
    t_GistsListForUserQuerySchema,
    void
  >,
  respond: GistsListForUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_base_gist[]>
  | Response<422, t_validation_error>
>

export type UsersListGpgKeysForUserResponder = {
  with200(): KoaRuntimeResponse<t_gpg_key[]>
} & KoaRuntimeResponder

export type UsersListGpgKeysForUser = (
  params: Params<
    t_UsersListGpgKeysForUserParamSchema,
    t_UsersListGpgKeysForUserQuerySchema,
    void
  >,
  respond: UsersListGpgKeysForUserResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_gpg_key[]>>

export type UsersGetContextForUserResponder = {
  with200(): KoaRuntimeResponse<t_hovercard>
  with404(): KoaRuntimeResponse<t_basic_error>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type UsersGetContextForUser = (
  params: Params<
    t_UsersGetContextForUserParamSchema,
    t_UsersGetContextForUserQuerySchema,
    void
  >,
  respond: UsersGetContextForUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_hovercard>
  | Response<404, t_basic_error>
  | Response<422, t_validation_error>
>

export type AppsGetUserInstallationResponder = {
  with200(): KoaRuntimeResponse<t_installation>
} & KoaRuntimeResponder

export type AppsGetUserInstallation = (
  params: Params<t_AppsGetUserInstallationParamSchema, void, void>,
  respond: AppsGetUserInstallationResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_installation>>

export type UsersListPublicKeysForUserResponder = {
  with200(): KoaRuntimeResponse<t_key_simple[]>
} & KoaRuntimeResponder

export type UsersListPublicKeysForUser = (
  params: Params<
    t_UsersListPublicKeysForUserParamSchema,
    t_UsersListPublicKeysForUserQuerySchema,
    void
  >,
  respond: UsersListPublicKeysForUserResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_key_simple[]>>

export type OrgsListForUserResponder = {
  with200(): KoaRuntimeResponse<t_organization_simple[]>
} & KoaRuntimeResponder

export type OrgsListForUser = (
  params: Params<
    t_OrgsListForUserParamSchema,
    t_OrgsListForUserQuerySchema,
    void
  >,
  respond: OrgsListForUserResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_organization_simple[]>
>

export type PackagesListPackagesForUserResponder = {
  with200(): KoaRuntimeResponse<t_package[]>
  with400(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type PackagesListPackagesForUser = (
  params: Params<
    t_PackagesListPackagesForUserParamSchema,
    t_PackagesListPackagesForUserQuerySchema,
    void
  >,
  respond: PackagesListPackagesForUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_package[]>
  | Response<400, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
>

export type PackagesGetPackageForUserResponder = {
  with200(): KoaRuntimeResponse<t_package>
} & KoaRuntimeResponder

export type PackagesGetPackageForUser = (
  params: Params<t_PackagesGetPackageForUserParamSchema, void, void>,
  respond: PackagesGetPackageForUserResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_package>>

export type PackagesDeletePackageForUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type PackagesDeletePackageForUser = (
  params: Params<t_PackagesDeletePackageForUserParamSchema, void, void>,
  respond: PackagesDeletePackageForUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type PackagesRestorePackageForUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type PackagesRestorePackageForUser = (
  params: Params<
    t_PackagesRestorePackageForUserParamSchema,
    t_PackagesRestorePackageForUserQuerySchema,
    void
  >,
  respond: PackagesRestorePackageForUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type PackagesGetAllPackageVersionsForPackageOwnedByUserResponder = {
  with200(): KoaRuntimeResponse<t_package_version[]>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type PackagesGetAllPackageVersionsForPackageOwnedByUser = (
  params: Params<
    t_PackagesGetAllPackageVersionsForPackageOwnedByUserParamSchema,
    void,
    void
  >,
  respond: PackagesGetAllPackageVersionsForPackageOwnedByUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_package_version[]>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type PackagesGetPackageVersionForUserResponder = {
  with200(): KoaRuntimeResponse<t_package_version>
} & KoaRuntimeResponder

export type PackagesGetPackageVersionForUser = (
  params: Params<t_PackagesGetPackageVersionForUserParamSchema, void, void>,
  respond: PackagesGetPackageVersionForUserResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_package_version>>

export type PackagesDeletePackageVersionForUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type PackagesDeletePackageVersionForUser = (
  params: Params<t_PackagesDeletePackageVersionForUserParamSchema, void, void>,
  respond: PackagesDeletePackageVersionForUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type PackagesRestorePackageVersionForUserResponder = {
  with204(): KoaRuntimeResponse<void>
  with401(): KoaRuntimeResponse<t_basic_error>
  with403(): KoaRuntimeResponse<t_basic_error>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type PackagesRestorePackageVersionForUser = (
  params: Params<t_PackagesRestorePackageVersionForUserParamSchema, void, void>,
  respond: PackagesRestorePackageVersionForUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_basic_error>
  | Response<403, t_basic_error>
  | Response<404, t_basic_error>
>

export type ProjectsListForUserResponder = {
  with200(): KoaRuntimeResponse<t_project[]>
  with422(): KoaRuntimeResponse<t_validation_error>
} & KoaRuntimeResponder

export type ProjectsListForUser = (
  params: Params<
    t_ProjectsListForUserParamSchema,
    t_ProjectsListForUserQuerySchema,
    void
  >,
  respond: ProjectsListForUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_project[]>
  | Response<422, t_validation_error>
>

export type ActivityListReceivedEventsForUserResponder = {
  with200(): KoaRuntimeResponse<t_event[]>
} & KoaRuntimeResponder

export type ActivityListReceivedEventsForUser = (
  params: Params<
    t_ActivityListReceivedEventsForUserParamSchema,
    t_ActivityListReceivedEventsForUserQuerySchema,
    void
  >,
  respond: ActivityListReceivedEventsForUserResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_event[]>>

export type ActivityListReceivedPublicEventsForUserResponder = {
  with200(): KoaRuntimeResponse<t_event[]>
} & KoaRuntimeResponder

export type ActivityListReceivedPublicEventsForUser = (
  params: Params<
    t_ActivityListReceivedPublicEventsForUserParamSchema,
    t_ActivityListReceivedPublicEventsForUserQuerySchema,
    void
  >,
  respond: ActivityListReceivedPublicEventsForUserResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_event[]>>

export type ReposListForUserResponder = {
  with200(): KoaRuntimeResponse<t_minimal_repository[]>
} & KoaRuntimeResponder

export type ReposListForUser = (
  params: Params<
    t_ReposListForUserParamSchema,
    t_ReposListForUserQuerySchema,
    void
  >,
  respond: ReposListForUserResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_minimal_repository[]>
>

export type BillingGetGithubActionsBillingUserResponder = {
  with200(): KoaRuntimeResponse<t_actions_billing_usage>
} & KoaRuntimeResponder

export type BillingGetGithubActionsBillingUser = (
  params: Params<t_BillingGetGithubActionsBillingUserParamSchema, void, void>,
  respond: BillingGetGithubActionsBillingUserResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_actions_billing_usage>
>

export type BillingGetGithubPackagesBillingUserResponder = {
  with200(): KoaRuntimeResponse<t_packages_billing_usage>
} & KoaRuntimeResponder

export type BillingGetGithubPackagesBillingUser = (
  params: Params<t_BillingGetGithubPackagesBillingUserParamSchema, void, void>,
  respond: BillingGetGithubPackagesBillingUserResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_packages_billing_usage>
>

export type BillingGetSharedStorageBillingUserResponder = {
  with200(): KoaRuntimeResponse<t_combined_billing_usage>
} & KoaRuntimeResponder

export type BillingGetSharedStorageBillingUser = (
  params: Params<t_BillingGetSharedStorageBillingUserParamSchema, void, void>,
  respond: BillingGetSharedStorageBillingUserResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_combined_billing_usage>
>

export type UsersListSocialAccountsForUserResponder = {
  with200(): KoaRuntimeResponse<t_social_account[]>
} & KoaRuntimeResponder

export type UsersListSocialAccountsForUser = (
  params: Params<
    t_UsersListSocialAccountsForUserParamSchema,
    t_UsersListSocialAccountsForUserQuerySchema,
    void
  >,
  respond: UsersListSocialAccountsForUserResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_social_account[]>>

export type UsersListSshSigningKeysForUserResponder = {
  with200(): KoaRuntimeResponse<t_ssh_signing_key[]>
} & KoaRuntimeResponder

export type UsersListSshSigningKeysForUser = (
  params: Params<
    t_UsersListSshSigningKeysForUserParamSchema,
    t_UsersListSshSigningKeysForUserQuerySchema,
    void
  >,
  respond: UsersListSshSigningKeysForUserResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_ssh_signing_key[]>>

export type ActivityListReposStarredByUserResponder = {
  with200(): KoaRuntimeResponse<t_starred_repository[] | t_repository[]>
} & KoaRuntimeResponder

export type ActivityListReposStarredByUser = (
  params: Params<
    t_ActivityListReposStarredByUserParamSchema,
    t_ActivityListReposStarredByUserQuerySchema,
    void
  >,
  respond: ActivityListReposStarredByUserResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_starred_repository[] | t_repository[]>
>

export type ActivityListReposWatchedByUserResponder = {
  with200(): KoaRuntimeResponse<t_minimal_repository[]>
} & KoaRuntimeResponder

export type ActivityListReposWatchedByUser = (
  params: Params<
    t_ActivityListReposWatchedByUserParamSchema,
    t_ActivityListReposWatchedByUserQuerySchema,
    void
  >,
  respond: ActivityListReposWatchedByUserResponder,
  ctx: Context,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_minimal_repository[]>
>

export type MetaGetAllVersionsResponder = {
  with200(): KoaRuntimeResponse<string[]>
  with404(): KoaRuntimeResponse<t_basic_error>
} & KoaRuntimeResponder

export type MetaGetAllVersions = (
  params: Params<void, void, void>,
  respond: MetaGetAllVersionsResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, string[]>
  | Response<404, t_basic_error>
>

export type MetaGetZenResponder = {
  with200(): KoaRuntimeResponse<string>
} & KoaRuntimeResponder

export type MetaGetZen = (
  params: Params<void, void, void>,
  respond: MetaGetZenResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, string>>

export type Implementation = {
  metaRoot: MetaRoot
  securityAdvisoriesListGlobalAdvisories: SecurityAdvisoriesListGlobalAdvisories
  securityAdvisoriesGetGlobalAdvisory: SecurityAdvisoriesGetGlobalAdvisory
  appsGetAuthenticated: AppsGetAuthenticated
  appsCreateFromManifest: AppsCreateFromManifest
  appsGetWebhookConfigForApp: AppsGetWebhookConfigForApp
  appsUpdateWebhookConfigForApp: AppsUpdateWebhookConfigForApp
  appsListWebhookDeliveries: AppsListWebhookDeliveries
  appsGetWebhookDelivery: AppsGetWebhookDelivery
  appsRedeliverWebhookDelivery: AppsRedeliverWebhookDelivery
  appsListInstallationRequestsForAuthenticatedApp: AppsListInstallationRequestsForAuthenticatedApp
  appsListInstallations: AppsListInstallations
  appsGetInstallation: AppsGetInstallation
  appsDeleteInstallation: AppsDeleteInstallation
  appsCreateInstallationAccessToken: AppsCreateInstallationAccessToken
  appsSuspendInstallation: AppsSuspendInstallation
  appsUnsuspendInstallation: AppsUnsuspendInstallation
  appsDeleteAuthorization: AppsDeleteAuthorization
  appsCheckToken: AppsCheckToken
  appsResetToken: AppsResetToken
  appsDeleteToken: AppsDeleteToken
  appsScopeToken: AppsScopeToken
  appsGetBySlug: AppsGetBySlug
  classroomGetAnAssignment: ClassroomGetAnAssignment
  classroomListAcceptedAssigmentsForAnAssignment: ClassroomListAcceptedAssigmentsForAnAssignment
  classroomGetAssignmentGrades: ClassroomGetAssignmentGrades
  classroomListClassrooms: ClassroomListClassrooms
  classroomGetAClassroom: ClassroomGetAClassroom
  classroomListAssignmentsForAClassroom: ClassroomListAssignmentsForAClassroom
  codesOfConductGetAllCodesOfConduct: CodesOfConductGetAllCodesOfConduct
  codesOfConductGetConductCode: CodesOfConductGetConductCode
  emojisGet: EmojisGet
  dependabotListAlertsForEnterprise: DependabotListAlertsForEnterprise
  secretScanningListAlertsForEnterprise: SecretScanningListAlertsForEnterprise
  activityListPublicEvents: ActivityListPublicEvents
  activityGetFeeds: ActivityGetFeeds
  gistsList: GistsList
  gistsCreate: GistsCreate
  gistsListPublic: GistsListPublic
  gistsListStarred: GistsListStarred
  gistsGet: GistsGet
  gistsUpdate: GistsUpdate
  gistsDelete: GistsDelete
  gistsListComments: GistsListComments
  gistsCreateComment: GistsCreateComment
  gistsGetComment: GistsGetComment
  gistsUpdateComment: GistsUpdateComment
  gistsDeleteComment: GistsDeleteComment
  gistsListCommits: GistsListCommits
  gistsListForks: GistsListForks
  gistsFork: GistsFork
  gistsCheckIsStarred: GistsCheckIsStarred
  gistsStar: GistsStar
  gistsUnstar: GistsUnstar
  gistsGetRevision: GistsGetRevision
  gitignoreGetAllTemplates: GitignoreGetAllTemplates
  gitignoreGetTemplate: GitignoreGetTemplate
  appsListReposAccessibleToInstallation: AppsListReposAccessibleToInstallation
  appsRevokeInstallationAccessToken: AppsRevokeInstallationAccessToken
  issuesList: IssuesList
  licensesGetAllCommonlyUsed: LicensesGetAllCommonlyUsed
  licensesGet: LicensesGet
  markdownRender: MarkdownRender
  markdownRenderRaw: MarkdownRenderRaw
  appsGetSubscriptionPlanForAccount: AppsGetSubscriptionPlanForAccount
  appsListPlans: AppsListPlans
  appsListAccountsForPlan: AppsListAccountsForPlan
  appsGetSubscriptionPlanForAccountStubbed: AppsGetSubscriptionPlanForAccountStubbed
  appsListPlansStubbed: AppsListPlansStubbed
  appsListAccountsForPlanStubbed: AppsListAccountsForPlanStubbed
  metaGet: MetaGet
  activityListPublicEventsForRepoNetwork: ActivityListPublicEventsForRepoNetwork
  activityListNotificationsForAuthenticatedUser: ActivityListNotificationsForAuthenticatedUser
  activityMarkNotificationsAsRead: ActivityMarkNotificationsAsRead
  activityGetThread: ActivityGetThread
  activityMarkThreadAsRead: ActivityMarkThreadAsRead
  activityGetThreadSubscriptionForAuthenticatedUser: ActivityGetThreadSubscriptionForAuthenticatedUser
  activitySetThreadSubscription: ActivitySetThreadSubscription
  activityDeleteThreadSubscription: ActivityDeleteThreadSubscription
  metaGetOctocat: MetaGetOctocat
  orgsList: OrgsList
  orgsGet: OrgsGet
  orgsUpdate: OrgsUpdate
  orgsDelete: OrgsDelete
  actionsGetActionsCacheUsageForOrg: ActionsGetActionsCacheUsageForOrg
  actionsGetActionsCacheUsageByRepoForOrg: ActionsGetActionsCacheUsageByRepoForOrg
  oidcGetOidcCustomSubTemplateForOrg: OidcGetOidcCustomSubTemplateForOrg
  oidcUpdateOidcCustomSubTemplateForOrg: OidcUpdateOidcCustomSubTemplateForOrg
  actionsGetGithubActionsPermissionsOrganization: ActionsGetGithubActionsPermissionsOrganization
  actionsSetGithubActionsPermissionsOrganization: ActionsSetGithubActionsPermissionsOrganization
  actionsListSelectedRepositoriesEnabledGithubActionsOrganization: ActionsListSelectedRepositoriesEnabledGithubActionsOrganization
  actionsSetSelectedRepositoriesEnabledGithubActionsOrganization: ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization
  actionsEnableSelectedRepositoryGithubActionsOrganization: ActionsEnableSelectedRepositoryGithubActionsOrganization
  actionsDisableSelectedRepositoryGithubActionsOrganization: ActionsDisableSelectedRepositoryGithubActionsOrganization
  actionsGetAllowedActionsOrganization: ActionsGetAllowedActionsOrganization
  actionsSetAllowedActionsOrganization: ActionsSetAllowedActionsOrganization
  actionsGetGithubActionsDefaultWorkflowPermissionsOrganization: ActionsGetGithubActionsDefaultWorkflowPermissionsOrganization
  actionsSetGithubActionsDefaultWorkflowPermissionsOrganization: ActionsSetGithubActionsDefaultWorkflowPermissionsOrganization
  actionsListSelfHostedRunnersForOrg: ActionsListSelfHostedRunnersForOrg
  actionsListRunnerApplicationsForOrg: ActionsListRunnerApplicationsForOrg
  actionsGenerateRunnerJitconfigForOrg: ActionsGenerateRunnerJitconfigForOrg
  actionsCreateRegistrationTokenForOrg: ActionsCreateRegistrationTokenForOrg
  actionsCreateRemoveTokenForOrg: ActionsCreateRemoveTokenForOrg
  actionsGetSelfHostedRunnerForOrg: ActionsGetSelfHostedRunnerForOrg
  actionsDeleteSelfHostedRunnerFromOrg: ActionsDeleteSelfHostedRunnerFromOrg
  actionsListLabelsForSelfHostedRunnerForOrg: ActionsListLabelsForSelfHostedRunnerForOrg
  actionsAddCustomLabelsToSelfHostedRunnerForOrg: ActionsAddCustomLabelsToSelfHostedRunnerForOrg
  actionsSetCustomLabelsForSelfHostedRunnerForOrg: ActionsSetCustomLabelsForSelfHostedRunnerForOrg
  actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg: ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg
  actionsRemoveCustomLabelFromSelfHostedRunnerForOrg: ActionsRemoveCustomLabelFromSelfHostedRunnerForOrg
  actionsListOrgSecrets: ActionsListOrgSecrets
  actionsGetOrgPublicKey: ActionsGetOrgPublicKey
  actionsGetOrgSecret: ActionsGetOrgSecret
  actionsCreateOrUpdateOrgSecret: ActionsCreateOrUpdateOrgSecret
  actionsDeleteOrgSecret: ActionsDeleteOrgSecret
  actionsListSelectedReposForOrgSecret: ActionsListSelectedReposForOrgSecret
  actionsSetSelectedReposForOrgSecret: ActionsSetSelectedReposForOrgSecret
  actionsAddSelectedRepoToOrgSecret: ActionsAddSelectedRepoToOrgSecret
  actionsRemoveSelectedRepoFromOrgSecret: ActionsRemoveSelectedRepoFromOrgSecret
  actionsListOrgVariables: ActionsListOrgVariables
  actionsCreateOrgVariable: ActionsCreateOrgVariable
  actionsGetOrgVariable: ActionsGetOrgVariable
  actionsUpdateOrgVariable: ActionsUpdateOrgVariable
  actionsDeleteOrgVariable: ActionsDeleteOrgVariable
  actionsListSelectedReposForOrgVariable: ActionsListSelectedReposForOrgVariable
  actionsSetSelectedReposForOrgVariable: ActionsSetSelectedReposForOrgVariable
  actionsAddSelectedRepoToOrgVariable: ActionsAddSelectedRepoToOrgVariable
  actionsRemoveSelectedRepoFromOrgVariable: ActionsRemoveSelectedRepoFromOrgVariable
  orgsListBlockedUsers: OrgsListBlockedUsers
  orgsCheckBlockedUser: OrgsCheckBlockedUser
  orgsBlockUser: OrgsBlockUser
  orgsUnblockUser: OrgsUnblockUser
  codeScanningListAlertsForOrg: CodeScanningListAlertsForOrg
  codespacesListInOrganization: CodespacesListInOrganization
  codespacesSetCodespacesAccess: CodespacesSetCodespacesAccess
  codespacesSetCodespacesAccessUsers: CodespacesSetCodespacesAccessUsers
  codespacesDeleteCodespacesAccessUsers: CodespacesDeleteCodespacesAccessUsers
  codespacesListOrgSecrets: CodespacesListOrgSecrets
  codespacesGetOrgPublicKey: CodespacesGetOrgPublicKey
  codespacesGetOrgSecret: CodespacesGetOrgSecret
  codespacesCreateOrUpdateOrgSecret: CodespacesCreateOrUpdateOrgSecret
  codespacesDeleteOrgSecret: CodespacesDeleteOrgSecret
  codespacesListSelectedReposForOrgSecret: CodespacesListSelectedReposForOrgSecret
  codespacesSetSelectedReposForOrgSecret: CodespacesSetSelectedReposForOrgSecret
  codespacesAddSelectedRepoToOrgSecret: CodespacesAddSelectedRepoToOrgSecret
  codespacesRemoveSelectedRepoFromOrgSecret: CodespacesRemoveSelectedRepoFromOrgSecret
  copilotGetCopilotOrganizationDetails: CopilotGetCopilotOrganizationDetails
  copilotListCopilotSeats: CopilotListCopilotSeats
  copilotAddCopilotForBusinessSeatsForTeams: CopilotAddCopilotForBusinessSeatsForTeams
  copilotCancelCopilotSeatAssignmentForTeams: CopilotCancelCopilotSeatAssignmentForTeams
  copilotAddCopilotForBusinessSeatsForUsers: CopilotAddCopilotForBusinessSeatsForUsers
  copilotCancelCopilotSeatAssignmentForUsers: CopilotCancelCopilotSeatAssignmentForUsers
  dependabotListAlertsForOrg: DependabotListAlertsForOrg
  dependabotListOrgSecrets: DependabotListOrgSecrets
  dependabotGetOrgPublicKey: DependabotGetOrgPublicKey
  dependabotGetOrgSecret: DependabotGetOrgSecret
  dependabotCreateOrUpdateOrgSecret: DependabotCreateOrUpdateOrgSecret
  dependabotDeleteOrgSecret: DependabotDeleteOrgSecret
  dependabotListSelectedReposForOrgSecret: DependabotListSelectedReposForOrgSecret
  dependabotSetSelectedReposForOrgSecret: DependabotSetSelectedReposForOrgSecret
  dependabotAddSelectedRepoToOrgSecret: DependabotAddSelectedRepoToOrgSecret
  dependabotRemoveSelectedRepoFromOrgSecret: DependabotRemoveSelectedRepoFromOrgSecret
  packagesListDockerMigrationConflictingPackagesForOrganization: PackagesListDockerMigrationConflictingPackagesForOrganization
  activityListPublicOrgEvents: ActivityListPublicOrgEvents
  orgsListFailedInvitations: OrgsListFailedInvitations
  orgsListWebhooks: OrgsListWebhooks
  orgsCreateWebhook: OrgsCreateWebhook
  orgsGetWebhook: OrgsGetWebhook
  orgsUpdateWebhook: OrgsUpdateWebhook
  orgsDeleteWebhook: OrgsDeleteWebhook
  orgsGetWebhookConfigForOrg: OrgsGetWebhookConfigForOrg
  orgsUpdateWebhookConfigForOrg: OrgsUpdateWebhookConfigForOrg
  orgsListWebhookDeliveries: OrgsListWebhookDeliveries
  orgsGetWebhookDelivery: OrgsGetWebhookDelivery
  orgsRedeliverWebhookDelivery: OrgsRedeliverWebhookDelivery
  orgsPingWebhook: OrgsPingWebhook
  appsGetOrgInstallation: AppsGetOrgInstallation
  orgsListAppInstallations: OrgsListAppInstallations
  interactionsGetRestrictionsForOrg: InteractionsGetRestrictionsForOrg
  interactionsSetRestrictionsForOrg: InteractionsSetRestrictionsForOrg
  interactionsRemoveRestrictionsForOrg: InteractionsRemoveRestrictionsForOrg
  orgsListPendingInvitations: OrgsListPendingInvitations
  orgsCreateInvitation: OrgsCreateInvitation
  orgsCancelInvitation: OrgsCancelInvitation
  orgsListInvitationTeams: OrgsListInvitationTeams
  issuesListForOrg: IssuesListForOrg
  orgsListMembers: OrgsListMembers
  orgsCheckMembershipForUser: OrgsCheckMembershipForUser
  orgsRemoveMember: OrgsRemoveMember
  codespacesGetCodespacesForUserInOrg: CodespacesGetCodespacesForUserInOrg
  codespacesDeleteFromOrganization: CodespacesDeleteFromOrganization
  codespacesStopInOrganization: CodespacesStopInOrganization
  copilotGetCopilotSeatAssignmentDetailsForUser: CopilotGetCopilotSeatAssignmentDetailsForUser
  orgsGetMembershipForUser: OrgsGetMembershipForUser
  orgsSetMembershipForUser: OrgsSetMembershipForUser
  orgsRemoveMembershipForUser: OrgsRemoveMembershipForUser
  migrationsListForOrg: MigrationsListForOrg
  migrationsStartForOrg: MigrationsStartForOrg
  migrationsGetStatusForOrg: MigrationsGetStatusForOrg
  migrationsDownloadArchiveForOrg: MigrationsDownloadArchiveForOrg
  migrationsDeleteArchiveForOrg: MigrationsDeleteArchiveForOrg
  migrationsUnlockRepoForOrg: MigrationsUnlockRepoForOrg
  migrationsListReposForOrg: MigrationsListReposForOrg
  orgsListOutsideCollaborators: OrgsListOutsideCollaborators
  orgsConvertMemberToOutsideCollaborator: OrgsConvertMemberToOutsideCollaborator
  orgsRemoveOutsideCollaborator: OrgsRemoveOutsideCollaborator
  packagesListPackagesForOrganization: PackagesListPackagesForOrganization
  packagesGetPackageForOrganization: PackagesGetPackageForOrganization
  packagesDeletePackageForOrg: PackagesDeletePackageForOrg
  packagesRestorePackageForOrg: PackagesRestorePackageForOrg
  packagesGetAllPackageVersionsForPackageOwnedByOrg: PackagesGetAllPackageVersionsForPackageOwnedByOrg
  packagesGetPackageVersionForOrganization: PackagesGetPackageVersionForOrganization
  packagesDeletePackageVersionForOrg: PackagesDeletePackageVersionForOrg
  packagesRestorePackageVersionForOrg: PackagesRestorePackageVersionForOrg
  orgsListPatGrantRequests: OrgsListPatGrantRequests
  orgsReviewPatGrantRequestsInBulk: OrgsReviewPatGrantRequestsInBulk
  orgsReviewPatGrantRequest: OrgsReviewPatGrantRequest
  orgsListPatGrantRequestRepositories: OrgsListPatGrantRequestRepositories
  orgsListPatGrants: OrgsListPatGrants
  orgsUpdatePatAccesses: OrgsUpdatePatAccesses
  orgsUpdatePatAccess: OrgsUpdatePatAccess
  orgsListPatGrantRepositories: OrgsListPatGrantRepositories
  projectsListForOrg: ProjectsListForOrg
  projectsCreateForOrg: ProjectsCreateForOrg
  orgsListPublicMembers: OrgsListPublicMembers
  orgsCheckPublicMembershipForUser: OrgsCheckPublicMembershipForUser
  orgsSetPublicMembershipForAuthenticatedUser: OrgsSetPublicMembershipForAuthenticatedUser
  orgsRemovePublicMembershipForAuthenticatedUser: OrgsRemovePublicMembershipForAuthenticatedUser
  reposListForOrg: ReposListForOrg
  reposCreateInOrg: ReposCreateInOrg
  reposGetOrgRulesets: ReposGetOrgRulesets
  reposCreateOrgRuleset: ReposCreateOrgRuleset
  reposGetOrgRuleset: ReposGetOrgRuleset
  reposUpdateOrgRuleset: ReposUpdateOrgRuleset
  reposDeleteOrgRuleset: ReposDeleteOrgRuleset
  secretScanningListAlertsForOrg: SecretScanningListAlertsForOrg
  securityAdvisoriesListOrgRepositoryAdvisories: SecurityAdvisoriesListOrgRepositoryAdvisories
  orgsListSecurityManagerTeams: OrgsListSecurityManagerTeams
  orgsAddSecurityManagerTeam: OrgsAddSecurityManagerTeam
  orgsRemoveSecurityManagerTeam: OrgsRemoveSecurityManagerTeam
  billingGetGithubActionsBillingOrg: BillingGetGithubActionsBillingOrg
  billingGetGithubPackagesBillingOrg: BillingGetGithubPackagesBillingOrg
  billingGetSharedStorageBillingOrg: BillingGetSharedStorageBillingOrg
  teamsList: TeamsList
  teamsCreate: TeamsCreate
  teamsGetByName: TeamsGetByName
  teamsUpdateInOrg: TeamsUpdateInOrg
  teamsDeleteInOrg: TeamsDeleteInOrg
  teamsListDiscussionsInOrg: TeamsListDiscussionsInOrg
  teamsCreateDiscussionInOrg: TeamsCreateDiscussionInOrg
  teamsGetDiscussionInOrg: TeamsGetDiscussionInOrg
  teamsUpdateDiscussionInOrg: TeamsUpdateDiscussionInOrg
  teamsDeleteDiscussionInOrg: TeamsDeleteDiscussionInOrg
  teamsListDiscussionCommentsInOrg: TeamsListDiscussionCommentsInOrg
  teamsCreateDiscussionCommentInOrg: TeamsCreateDiscussionCommentInOrg
  teamsGetDiscussionCommentInOrg: TeamsGetDiscussionCommentInOrg
  teamsUpdateDiscussionCommentInOrg: TeamsUpdateDiscussionCommentInOrg
  teamsDeleteDiscussionCommentInOrg: TeamsDeleteDiscussionCommentInOrg
  reactionsListForTeamDiscussionCommentInOrg: ReactionsListForTeamDiscussionCommentInOrg
  reactionsCreateForTeamDiscussionCommentInOrg: ReactionsCreateForTeamDiscussionCommentInOrg
  reactionsDeleteForTeamDiscussionComment: ReactionsDeleteForTeamDiscussionComment
  reactionsListForTeamDiscussionInOrg: ReactionsListForTeamDiscussionInOrg
  reactionsCreateForTeamDiscussionInOrg: ReactionsCreateForTeamDiscussionInOrg
  reactionsDeleteForTeamDiscussion: ReactionsDeleteForTeamDiscussion
  teamsListPendingInvitationsInOrg: TeamsListPendingInvitationsInOrg
  teamsListMembersInOrg: TeamsListMembersInOrg
  teamsGetMembershipForUserInOrg: TeamsGetMembershipForUserInOrg
  teamsAddOrUpdateMembershipForUserInOrg: TeamsAddOrUpdateMembershipForUserInOrg
  teamsRemoveMembershipForUserInOrg: TeamsRemoveMembershipForUserInOrg
  teamsListProjectsInOrg: TeamsListProjectsInOrg
  teamsCheckPermissionsForProjectInOrg: TeamsCheckPermissionsForProjectInOrg
  teamsAddOrUpdateProjectPermissionsInOrg: TeamsAddOrUpdateProjectPermissionsInOrg
  teamsRemoveProjectInOrg: TeamsRemoveProjectInOrg
  teamsListReposInOrg: TeamsListReposInOrg
  teamsCheckPermissionsForRepoInOrg: TeamsCheckPermissionsForRepoInOrg
  teamsAddOrUpdateRepoPermissionsInOrg: TeamsAddOrUpdateRepoPermissionsInOrg
  teamsRemoveRepoInOrg: TeamsRemoveRepoInOrg
  teamsListChildInOrg: TeamsListChildInOrg
  orgsEnableOrDisableSecurityProductOnAllOrgRepos: OrgsEnableOrDisableSecurityProductOnAllOrgRepos
  projectsGetCard: ProjectsGetCard
  projectsUpdateCard: ProjectsUpdateCard
  projectsDeleteCard: ProjectsDeleteCard
  projectsMoveCard: ProjectsMoveCard
  projectsGetColumn: ProjectsGetColumn
  projectsUpdateColumn: ProjectsUpdateColumn
  projectsDeleteColumn: ProjectsDeleteColumn
  projectsListCards: ProjectsListCards
  projectsCreateCard: ProjectsCreateCard
  projectsMoveColumn: ProjectsMoveColumn
  projectsGet: ProjectsGet
  projectsUpdate: ProjectsUpdate
  projectsDelete: ProjectsDelete
  projectsListCollaborators: ProjectsListCollaborators
  projectsAddCollaborator: ProjectsAddCollaborator
  projectsRemoveCollaborator: ProjectsRemoveCollaborator
  projectsGetPermissionForUser: ProjectsGetPermissionForUser
  projectsListColumns: ProjectsListColumns
  projectsCreateColumn: ProjectsCreateColumn
  rateLimitGet: RateLimitGet
  reposGet: ReposGet
  reposUpdate: ReposUpdate
  reposDelete: ReposDelete
  actionsListArtifactsForRepo: ActionsListArtifactsForRepo
  actionsGetArtifact: ActionsGetArtifact
  actionsDeleteArtifact: ActionsDeleteArtifact
  actionsDownloadArtifact: ActionsDownloadArtifact
  actionsGetActionsCacheUsage: ActionsGetActionsCacheUsage
  actionsGetActionsCacheList: ActionsGetActionsCacheList
  actionsDeleteActionsCacheByKey: ActionsDeleteActionsCacheByKey
  actionsDeleteActionsCacheById: ActionsDeleteActionsCacheById
  actionsGetJobForWorkflowRun: ActionsGetJobForWorkflowRun
  actionsDownloadJobLogsForWorkflowRun: ActionsDownloadJobLogsForWorkflowRun
  actionsReRunJobForWorkflowRun: ActionsReRunJobForWorkflowRun
  actionsGetCustomOidcSubClaimForRepo: ActionsGetCustomOidcSubClaimForRepo
  actionsSetCustomOidcSubClaimForRepo: ActionsSetCustomOidcSubClaimForRepo
  actionsListRepoOrganizationSecrets: ActionsListRepoOrganizationSecrets
  actionsListRepoOrganizationVariables: ActionsListRepoOrganizationVariables
  actionsGetGithubActionsPermissionsRepository: ActionsGetGithubActionsPermissionsRepository
  actionsSetGithubActionsPermissionsRepository: ActionsSetGithubActionsPermissionsRepository
  actionsGetWorkflowAccessToRepository: ActionsGetWorkflowAccessToRepository
  actionsSetWorkflowAccessToRepository: ActionsSetWorkflowAccessToRepository
  actionsGetAllowedActionsRepository: ActionsGetAllowedActionsRepository
  actionsSetAllowedActionsRepository: ActionsSetAllowedActionsRepository
  actionsGetGithubActionsDefaultWorkflowPermissionsRepository: ActionsGetGithubActionsDefaultWorkflowPermissionsRepository
  actionsSetGithubActionsDefaultWorkflowPermissionsRepository: ActionsSetGithubActionsDefaultWorkflowPermissionsRepository
  actionsListSelfHostedRunnersForRepo: ActionsListSelfHostedRunnersForRepo
  actionsListRunnerApplicationsForRepo: ActionsListRunnerApplicationsForRepo
  actionsGenerateRunnerJitconfigForRepo: ActionsGenerateRunnerJitconfigForRepo
  actionsCreateRegistrationTokenForRepo: ActionsCreateRegistrationTokenForRepo
  actionsCreateRemoveTokenForRepo: ActionsCreateRemoveTokenForRepo
  actionsGetSelfHostedRunnerForRepo: ActionsGetSelfHostedRunnerForRepo
  actionsDeleteSelfHostedRunnerFromRepo: ActionsDeleteSelfHostedRunnerFromRepo
  actionsListLabelsForSelfHostedRunnerForRepo: ActionsListLabelsForSelfHostedRunnerForRepo
  actionsAddCustomLabelsToSelfHostedRunnerForRepo: ActionsAddCustomLabelsToSelfHostedRunnerForRepo
  actionsSetCustomLabelsForSelfHostedRunnerForRepo: ActionsSetCustomLabelsForSelfHostedRunnerForRepo
  actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo: ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo
  actionsRemoveCustomLabelFromSelfHostedRunnerForRepo: ActionsRemoveCustomLabelFromSelfHostedRunnerForRepo
  actionsListWorkflowRunsForRepo: ActionsListWorkflowRunsForRepo
  actionsGetWorkflowRun: ActionsGetWorkflowRun
  actionsDeleteWorkflowRun: ActionsDeleteWorkflowRun
  actionsGetReviewsForRun: ActionsGetReviewsForRun
  actionsApproveWorkflowRun: ActionsApproveWorkflowRun
  actionsListWorkflowRunArtifacts: ActionsListWorkflowRunArtifacts
  actionsGetWorkflowRunAttempt: ActionsGetWorkflowRunAttempt
  actionsListJobsForWorkflowRunAttempt: ActionsListJobsForWorkflowRunAttempt
  actionsDownloadWorkflowRunAttemptLogs: ActionsDownloadWorkflowRunAttemptLogs
  actionsCancelWorkflowRun: ActionsCancelWorkflowRun
  actionsReviewCustomGatesForRun: ActionsReviewCustomGatesForRun
  actionsListJobsForWorkflowRun: ActionsListJobsForWorkflowRun
  actionsDownloadWorkflowRunLogs: ActionsDownloadWorkflowRunLogs
  actionsDeleteWorkflowRunLogs: ActionsDeleteWorkflowRunLogs
  actionsGetPendingDeploymentsForRun: ActionsGetPendingDeploymentsForRun
  actionsReviewPendingDeploymentsForRun: ActionsReviewPendingDeploymentsForRun
  actionsReRunWorkflow: ActionsReRunWorkflow
  actionsReRunWorkflowFailedJobs: ActionsReRunWorkflowFailedJobs
  actionsGetWorkflowRunUsage: ActionsGetWorkflowRunUsage
  actionsListRepoSecrets: ActionsListRepoSecrets
  actionsGetRepoPublicKey: ActionsGetRepoPublicKey
  actionsGetRepoSecret: ActionsGetRepoSecret
  actionsCreateOrUpdateRepoSecret: ActionsCreateOrUpdateRepoSecret
  actionsDeleteRepoSecret: ActionsDeleteRepoSecret
  actionsListRepoVariables: ActionsListRepoVariables
  actionsCreateRepoVariable: ActionsCreateRepoVariable
  actionsGetRepoVariable: ActionsGetRepoVariable
  actionsUpdateRepoVariable: ActionsUpdateRepoVariable
  actionsDeleteRepoVariable: ActionsDeleteRepoVariable
  actionsListRepoWorkflows: ActionsListRepoWorkflows
  actionsGetWorkflow: ActionsGetWorkflow
  actionsDisableWorkflow: ActionsDisableWorkflow
  actionsCreateWorkflowDispatch: ActionsCreateWorkflowDispatch
  actionsEnableWorkflow: ActionsEnableWorkflow
  actionsListWorkflowRuns: ActionsListWorkflowRuns
  actionsGetWorkflowUsage: ActionsGetWorkflowUsage
  reposListActivities: ReposListActivities
  issuesListAssignees: IssuesListAssignees
  issuesCheckUserCanBeAssigned: IssuesCheckUserCanBeAssigned
  reposListAutolinks: ReposListAutolinks
  reposCreateAutolink: ReposCreateAutolink
  reposGetAutolink: ReposGetAutolink
  reposDeleteAutolink: ReposDeleteAutolink
  reposCheckAutomatedSecurityFixes: ReposCheckAutomatedSecurityFixes
  reposEnableAutomatedSecurityFixes: ReposEnableAutomatedSecurityFixes
  reposDisableAutomatedSecurityFixes: ReposDisableAutomatedSecurityFixes
  reposListBranches: ReposListBranches
  reposGetBranch: ReposGetBranch
  reposGetBranchProtection: ReposGetBranchProtection
  reposUpdateBranchProtection: ReposUpdateBranchProtection
  reposDeleteBranchProtection: ReposDeleteBranchProtection
  reposGetAdminBranchProtection: ReposGetAdminBranchProtection
  reposSetAdminBranchProtection: ReposSetAdminBranchProtection
  reposDeleteAdminBranchProtection: ReposDeleteAdminBranchProtection
  reposGetPullRequestReviewProtection: ReposGetPullRequestReviewProtection
  reposUpdatePullRequestReviewProtection: ReposUpdatePullRequestReviewProtection
  reposDeletePullRequestReviewProtection: ReposDeletePullRequestReviewProtection
  reposGetCommitSignatureProtection: ReposGetCommitSignatureProtection
  reposCreateCommitSignatureProtection: ReposCreateCommitSignatureProtection
  reposDeleteCommitSignatureProtection: ReposDeleteCommitSignatureProtection
  reposGetStatusChecksProtection: ReposGetStatusChecksProtection
  reposUpdateStatusCheckProtection: ReposUpdateStatusCheckProtection
  reposRemoveStatusCheckProtection: ReposRemoveStatusCheckProtection
  reposGetAllStatusCheckContexts: ReposGetAllStatusCheckContexts
  reposAddStatusCheckContexts: ReposAddStatusCheckContexts
  reposSetStatusCheckContexts: ReposSetStatusCheckContexts
  reposRemoveStatusCheckContexts: ReposRemoveStatusCheckContexts
  reposGetAccessRestrictions: ReposGetAccessRestrictions
  reposDeleteAccessRestrictions: ReposDeleteAccessRestrictions
  reposGetAppsWithAccessToProtectedBranch: ReposGetAppsWithAccessToProtectedBranch
  reposAddAppAccessRestrictions: ReposAddAppAccessRestrictions
  reposSetAppAccessRestrictions: ReposSetAppAccessRestrictions
  reposRemoveAppAccessRestrictions: ReposRemoveAppAccessRestrictions
  reposGetTeamsWithAccessToProtectedBranch: ReposGetTeamsWithAccessToProtectedBranch
  reposAddTeamAccessRestrictions: ReposAddTeamAccessRestrictions
  reposSetTeamAccessRestrictions: ReposSetTeamAccessRestrictions
  reposRemoveTeamAccessRestrictions: ReposRemoveTeamAccessRestrictions
  reposGetUsersWithAccessToProtectedBranch: ReposGetUsersWithAccessToProtectedBranch
  reposAddUserAccessRestrictions: ReposAddUserAccessRestrictions
  reposSetUserAccessRestrictions: ReposSetUserAccessRestrictions
  reposRemoveUserAccessRestrictions: ReposRemoveUserAccessRestrictions
  reposRenameBranch: ReposRenameBranch
  checksCreate: ChecksCreate
  checksGet: ChecksGet
  checksUpdate: ChecksUpdate
  checksListAnnotations: ChecksListAnnotations
  checksRerequestRun: ChecksRerequestRun
  checksCreateSuite: ChecksCreateSuite
  checksSetSuitesPreferences: ChecksSetSuitesPreferences
  checksGetSuite: ChecksGetSuite
  checksListForSuite: ChecksListForSuite
  checksRerequestSuite: ChecksRerequestSuite
  codeScanningListAlertsForRepo: CodeScanningListAlertsForRepo
  codeScanningGetAlert: CodeScanningGetAlert
  codeScanningUpdateAlert: CodeScanningUpdateAlert
  codeScanningListAlertInstances: CodeScanningListAlertInstances
  codeScanningListRecentAnalyses: CodeScanningListRecentAnalyses
  codeScanningGetAnalysis: CodeScanningGetAnalysis
  codeScanningDeleteAnalysis: CodeScanningDeleteAnalysis
  codeScanningListCodeqlDatabases: CodeScanningListCodeqlDatabases
  codeScanningGetCodeqlDatabase: CodeScanningGetCodeqlDatabase
  codeScanningGetDefaultSetup: CodeScanningGetDefaultSetup
  codeScanningUpdateDefaultSetup: CodeScanningUpdateDefaultSetup
  codeScanningUploadSarif: CodeScanningUploadSarif
  codeScanningGetSarif: CodeScanningGetSarif
  reposCodeownersErrors: ReposCodeownersErrors
  codespacesListInRepositoryForAuthenticatedUser: CodespacesListInRepositoryForAuthenticatedUser
  codespacesCreateWithRepoForAuthenticatedUser: CodespacesCreateWithRepoForAuthenticatedUser
  codespacesListDevcontainersInRepositoryForAuthenticatedUser: CodespacesListDevcontainersInRepositoryForAuthenticatedUser
  codespacesRepoMachinesForAuthenticatedUser: CodespacesRepoMachinesForAuthenticatedUser
  codespacesPreFlightWithRepoForAuthenticatedUser: CodespacesPreFlightWithRepoForAuthenticatedUser
  codespacesListRepoSecrets: CodespacesListRepoSecrets
  codespacesGetRepoPublicKey: CodespacesGetRepoPublicKey
  codespacesGetRepoSecret: CodespacesGetRepoSecret
  codespacesCreateOrUpdateRepoSecret: CodespacesCreateOrUpdateRepoSecret
  codespacesDeleteRepoSecret: CodespacesDeleteRepoSecret
  reposListCollaborators: ReposListCollaborators
  reposCheckCollaborator: ReposCheckCollaborator
  reposAddCollaborator: ReposAddCollaborator
  reposRemoveCollaborator: ReposRemoveCollaborator
  reposGetCollaboratorPermissionLevel: ReposGetCollaboratorPermissionLevel
  reposListCommitCommentsForRepo: ReposListCommitCommentsForRepo
  reposGetCommitComment: ReposGetCommitComment
  reposUpdateCommitComment: ReposUpdateCommitComment
  reposDeleteCommitComment: ReposDeleteCommitComment
  reactionsListForCommitComment: ReactionsListForCommitComment
  reactionsCreateForCommitComment: ReactionsCreateForCommitComment
  reactionsDeleteForCommitComment: ReactionsDeleteForCommitComment
  reposListCommits: ReposListCommits
  reposListBranchesForHeadCommit: ReposListBranchesForHeadCommit
  reposListCommentsForCommit: ReposListCommentsForCommit
  reposCreateCommitComment: ReposCreateCommitComment
  reposListPullRequestsAssociatedWithCommit: ReposListPullRequestsAssociatedWithCommit
  reposGetCommit: ReposGetCommit
  checksListForRef: ChecksListForRef
  checksListSuitesForRef: ChecksListSuitesForRef
  reposGetCombinedStatusForRef: ReposGetCombinedStatusForRef
  reposListCommitStatusesForRef: ReposListCommitStatusesForRef
  reposGetCommunityProfileMetrics: ReposGetCommunityProfileMetrics
  reposCompareCommits: ReposCompareCommits
  reposGetContent: ReposGetContent
  reposCreateOrUpdateFileContents: ReposCreateOrUpdateFileContents
  reposDeleteFile: ReposDeleteFile
  reposListContributors: ReposListContributors
  dependabotListAlertsForRepo: DependabotListAlertsForRepo
  dependabotGetAlert: DependabotGetAlert
  dependabotUpdateAlert: DependabotUpdateAlert
  dependabotListRepoSecrets: DependabotListRepoSecrets
  dependabotGetRepoPublicKey: DependabotGetRepoPublicKey
  dependabotGetRepoSecret: DependabotGetRepoSecret
  dependabotCreateOrUpdateRepoSecret: DependabotCreateOrUpdateRepoSecret
  dependabotDeleteRepoSecret: DependabotDeleteRepoSecret
  dependencyGraphDiffRange: DependencyGraphDiffRange
  dependencyGraphExportSbom: DependencyGraphExportSbom
  dependencyGraphCreateRepositorySnapshot: DependencyGraphCreateRepositorySnapshot
  reposListDeployments: ReposListDeployments
  reposCreateDeployment: ReposCreateDeployment
  reposGetDeployment: ReposGetDeployment
  reposDeleteDeployment: ReposDeleteDeployment
  reposListDeploymentStatuses: ReposListDeploymentStatuses
  reposCreateDeploymentStatus: ReposCreateDeploymentStatus
  reposGetDeploymentStatus: ReposGetDeploymentStatus
  reposCreateDispatchEvent: ReposCreateDispatchEvent
  reposGetAllEnvironments: ReposGetAllEnvironments
  reposGetEnvironment: ReposGetEnvironment
  reposCreateOrUpdateEnvironment: ReposCreateOrUpdateEnvironment
  reposDeleteAnEnvironment: ReposDeleteAnEnvironment
  reposListDeploymentBranchPolicies: ReposListDeploymentBranchPolicies
  reposCreateDeploymentBranchPolicy: ReposCreateDeploymentBranchPolicy
  reposGetDeploymentBranchPolicy: ReposGetDeploymentBranchPolicy
  reposUpdateDeploymentBranchPolicy: ReposUpdateDeploymentBranchPolicy
  reposDeleteDeploymentBranchPolicy: ReposDeleteDeploymentBranchPolicy
  reposGetAllDeploymentProtectionRules: ReposGetAllDeploymentProtectionRules
  reposCreateDeploymentProtectionRule: ReposCreateDeploymentProtectionRule
  reposListCustomDeploymentRuleIntegrations: ReposListCustomDeploymentRuleIntegrations
  reposGetCustomDeploymentProtectionRule: ReposGetCustomDeploymentProtectionRule
  reposDisableDeploymentProtectionRule: ReposDisableDeploymentProtectionRule
  activityListRepoEvents: ActivityListRepoEvents
  reposListForks: ReposListForks
  reposCreateFork: ReposCreateFork
  gitCreateBlob: GitCreateBlob
  gitGetBlob: GitGetBlob
  gitCreateCommit: GitCreateCommit
  gitGetCommit: GitGetCommit
  gitListMatchingRefs: GitListMatchingRefs
  gitGetRef: GitGetRef
  gitCreateRef: GitCreateRef
  gitUpdateRef: GitUpdateRef
  gitDeleteRef: GitDeleteRef
  gitCreateTag: GitCreateTag
  gitGetTag: GitGetTag
  gitCreateTree: GitCreateTree
  gitGetTree: GitGetTree
  reposListWebhooks: ReposListWebhooks
  reposCreateWebhook: ReposCreateWebhook
  reposGetWebhook: ReposGetWebhook
  reposUpdateWebhook: ReposUpdateWebhook
  reposDeleteWebhook: ReposDeleteWebhook
  reposGetWebhookConfigForRepo: ReposGetWebhookConfigForRepo
  reposUpdateWebhookConfigForRepo: ReposUpdateWebhookConfigForRepo
  reposListWebhookDeliveries: ReposListWebhookDeliveries
  reposGetWebhookDelivery: ReposGetWebhookDelivery
  reposRedeliverWebhookDelivery: ReposRedeliverWebhookDelivery
  reposPingWebhook: ReposPingWebhook
  reposTestPushWebhook: ReposTestPushWebhook
  migrationsGetImportStatus: MigrationsGetImportStatus
  migrationsStartImport: MigrationsStartImport
  migrationsUpdateImport: MigrationsUpdateImport
  migrationsCancelImport: MigrationsCancelImport
  migrationsGetCommitAuthors: MigrationsGetCommitAuthors
  migrationsMapCommitAuthor: MigrationsMapCommitAuthor
  migrationsGetLargeFiles: MigrationsGetLargeFiles
  migrationsSetLfsPreference: MigrationsSetLfsPreference
  appsGetRepoInstallation: AppsGetRepoInstallation
  interactionsGetRestrictionsForRepo: InteractionsGetRestrictionsForRepo
  interactionsSetRestrictionsForRepo: InteractionsSetRestrictionsForRepo
  interactionsRemoveRestrictionsForRepo: InteractionsRemoveRestrictionsForRepo
  reposListInvitations: ReposListInvitations
  reposUpdateInvitation: ReposUpdateInvitation
  reposDeleteInvitation: ReposDeleteInvitation
  issuesListForRepo: IssuesListForRepo
  issuesCreate: IssuesCreate
  issuesListCommentsForRepo: IssuesListCommentsForRepo
  issuesGetComment: IssuesGetComment
  issuesUpdateComment: IssuesUpdateComment
  issuesDeleteComment: IssuesDeleteComment
  reactionsListForIssueComment: ReactionsListForIssueComment
  reactionsCreateForIssueComment: ReactionsCreateForIssueComment
  reactionsDeleteForIssueComment: ReactionsDeleteForIssueComment
  issuesListEventsForRepo: IssuesListEventsForRepo
  issuesGetEvent: IssuesGetEvent
  issuesGet: IssuesGet
  issuesUpdate: IssuesUpdate
  issuesAddAssignees: IssuesAddAssignees
  issuesRemoveAssignees: IssuesRemoveAssignees
  issuesCheckUserCanBeAssignedToIssue: IssuesCheckUserCanBeAssignedToIssue
  issuesListComments: IssuesListComments
  issuesCreateComment: IssuesCreateComment
  issuesListEvents: IssuesListEvents
  issuesListLabelsOnIssue: IssuesListLabelsOnIssue
  issuesAddLabels: IssuesAddLabels
  issuesSetLabels: IssuesSetLabels
  issuesRemoveAllLabels: IssuesRemoveAllLabels
  issuesRemoveLabel: IssuesRemoveLabel
  issuesLock: IssuesLock
  issuesUnlock: IssuesUnlock
  reactionsListForIssue: ReactionsListForIssue
  reactionsCreateForIssue: ReactionsCreateForIssue
  reactionsDeleteForIssue: ReactionsDeleteForIssue
  issuesListEventsForTimeline: IssuesListEventsForTimeline
  reposListDeployKeys: ReposListDeployKeys
  reposCreateDeployKey: ReposCreateDeployKey
  reposGetDeployKey: ReposGetDeployKey
  reposDeleteDeployKey: ReposDeleteDeployKey
  issuesListLabelsForRepo: IssuesListLabelsForRepo
  issuesCreateLabel: IssuesCreateLabel
  issuesGetLabel: IssuesGetLabel
  issuesUpdateLabel: IssuesUpdateLabel
  issuesDeleteLabel: IssuesDeleteLabel
  reposListLanguages: ReposListLanguages
  licensesGetForRepo: LicensesGetForRepo
  reposMergeUpstream: ReposMergeUpstream
  reposMerge: ReposMerge
  issuesListMilestones: IssuesListMilestones
  issuesCreateMilestone: IssuesCreateMilestone
  issuesGetMilestone: IssuesGetMilestone
  issuesUpdateMilestone: IssuesUpdateMilestone
  issuesDeleteMilestone: IssuesDeleteMilestone
  issuesListLabelsForMilestone: IssuesListLabelsForMilestone
  activityListRepoNotificationsForAuthenticatedUser: ActivityListRepoNotificationsForAuthenticatedUser
  activityMarkRepoNotificationsAsRead: ActivityMarkRepoNotificationsAsRead
  reposGetPages: ReposGetPages
  reposCreatePagesSite: ReposCreatePagesSite
  reposUpdateInformationAboutPagesSite: ReposUpdateInformationAboutPagesSite
  reposDeletePagesSite: ReposDeletePagesSite
  reposListPagesBuilds: ReposListPagesBuilds
  reposRequestPagesBuild: ReposRequestPagesBuild
  reposGetLatestPagesBuild: ReposGetLatestPagesBuild
  reposGetPagesBuild: ReposGetPagesBuild
  reposCreatePagesDeployment: ReposCreatePagesDeployment
  reposGetPagesHealthCheck: ReposGetPagesHealthCheck
  reposEnablePrivateVulnerabilityReporting: ReposEnablePrivateVulnerabilityReporting
  reposDisablePrivateVulnerabilityReporting: ReposDisablePrivateVulnerabilityReporting
  projectsListForRepo: ProjectsListForRepo
  projectsCreateForRepo: ProjectsCreateForRepo
  pullsList: PullsList
  pullsCreate: PullsCreate
  pullsListReviewCommentsForRepo: PullsListReviewCommentsForRepo
  pullsGetReviewComment: PullsGetReviewComment
  pullsUpdateReviewComment: PullsUpdateReviewComment
  pullsDeleteReviewComment: PullsDeleteReviewComment
  reactionsListForPullRequestReviewComment: ReactionsListForPullRequestReviewComment
  reactionsCreateForPullRequestReviewComment: ReactionsCreateForPullRequestReviewComment
  reactionsDeleteForPullRequestComment: ReactionsDeleteForPullRequestComment
  pullsGet: PullsGet
  pullsUpdate: PullsUpdate
  codespacesCreateWithPrForAuthenticatedUser: CodespacesCreateWithPrForAuthenticatedUser
  pullsListReviewComments: PullsListReviewComments
  pullsCreateReviewComment: PullsCreateReviewComment
  pullsCreateReplyForReviewComment: PullsCreateReplyForReviewComment
  pullsListCommits: PullsListCommits
  pullsListFiles: PullsListFiles
  pullsCheckIfMerged: PullsCheckIfMerged
  pullsMerge: PullsMerge
  pullsListRequestedReviewers: PullsListRequestedReviewers
  pullsRequestReviewers: PullsRequestReviewers
  pullsRemoveRequestedReviewers: PullsRemoveRequestedReviewers
  pullsListReviews: PullsListReviews
  pullsCreateReview: PullsCreateReview
  pullsGetReview: PullsGetReview
  pullsUpdateReview: PullsUpdateReview
  pullsDeletePendingReview: PullsDeletePendingReview
  pullsListCommentsForReview: PullsListCommentsForReview
  pullsDismissReview: PullsDismissReview
  pullsSubmitReview: PullsSubmitReview
  pullsUpdateBranch: PullsUpdateBranch
  reposGetReadme: ReposGetReadme
  reposGetReadmeInDirectory: ReposGetReadmeInDirectory
  reposListReleases: ReposListReleases
  reposCreateRelease: ReposCreateRelease
  reposGetReleaseAsset: ReposGetReleaseAsset
  reposUpdateReleaseAsset: ReposUpdateReleaseAsset
  reposDeleteReleaseAsset: ReposDeleteReleaseAsset
  reposGenerateReleaseNotes: ReposGenerateReleaseNotes
  reposGetLatestRelease: ReposGetLatestRelease
  reposGetReleaseByTag: ReposGetReleaseByTag
  reposGetRelease: ReposGetRelease
  reposUpdateRelease: ReposUpdateRelease
  reposDeleteRelease: ReposDeleteRelease
  reposListReleaseAssets: ReposListReleaseAssets
  reposUploadReleaseAsset: ReposUploadReleaseAsset
  reactionsListForRelease: ReactionsListForRelease
  reactionsCreateForRelease: ReactionsCreateForRelease
  reactionsDeleteForRelease: ReactionsDeleteForRelease
  reposGetBranchRules: ReposGetBranchRules
  reposGetRepoRulesets: ReposGetRepoRulesets
  reposCreateRepoRuleset: ReposCreateRepoRuleset
  reposGetRepoRuleset: ReposGetRepoRuleset
  reposUpdateRepoRuleset: ReposUpdateRepoRuleset
  reposDeleteRepoRuleset: ReposDeleteRepoRuleset
  secretScanningListAlertsForRepo: SecretScanningListAlertsForRepo
  secretScanningGetAlert: SecretScanningGetAlert
  secretScanningUpdateAlert: SecretScanningUpdateAlert
  secretScanningListLocationsForAlert: SecretScanningListLocationsForAlert
  securityAdvisoriesListRepositoryAdvisories: SecurityAdvisoriesListRepositoryAdvisories
  securityAdvisoriesCreateRepositoryAdvisory: SecurityAdvisoriesCreateRepositoryAdvisory
  securityAdvisoriesCreatePrivateVulnerabilityReport: SecurityAdvisoriesCreatePrivateVulnerabilityReport
  securityAdvisoriesGetRepositoryAdvisory: SecurityAdvisoriesGetRepositoryAdvisory
  securityAdvisoriesUpdateRepositoryAdvisory: SecurityAdvisoriesUpdateRepositoryAdvisory
  securityAdvisoriesCreateRepositoryAdvisoryCveRequest: SecurityAdvisoriesCreateRepositoryAdvisoryCveRequest
  activityListStargazersForRepo: ActivityListStargazersForRepo
  reposGetCodeFrequencyStats: ReposGetCodeFrequencyStats
  reposGetCommitActivityStats: ReposGetCommitActivityStats
  reposGetContributorsStats: ReposGetContributorsStats
  reposGetParticipationStats: ReposGetParticipationStats
  reposGetPunchCardStats: ReposGetPunchCardStats
  reposCreateCommitStatus: ReposCreateCommitStatus
  activityListWatchersForRepo: ActivityListWatchersForRepo
  activityGetRepoSubscription: ActivityGetRepoSubscription
  activitySetRepoSubscription: ActivitySetRepoSubscription
  activityDeleteRepoSubscription: ActivityDeleteRepoSubscription
  reposListTags: ReposListTags
  reposListTagProtection: ReposListTagProtection
  reposCreateTagProtection: ReposCreateTagProtection
  reposDeleteTagProtection: ReposDeleteTagProtection
  reposDownloadTarballArchive: ReposDownloadTarballArchive
  reposListTeams: ReposListTeams
  reposGetAllTopics: ReposGetAllTopics
  reposReplaceAllTopics: ReposReplaceAllTopics
  reposGetClones: ReposGetClones
  reposGetTopPaths: ReposGetTopPaths
  reposGetTopReferrers: ReposGetTopReferrers
  reposGetViews: ReposGetViews
  reposTransfer: ReposTransfer
  reposCheckVulnerabilityAlerts: ReposCheckVulnerabilityAlerts
  reposEnableVulnerabilityAlerts: ReposEnableVulnerabilityAlerts
  reposDisableVulnerabilityAlerts: ReposDisableVulnerabilityAlerts
  reposDownloadZipballArchive: ReposDownloadZipballArchive
  reposCreateUsingTemplate: ReposCreateUsingTemplate
  reposListPublic: ReposListPublic
  actionsListEnvironmentSecrets: ActionsListEnvironmentSecrets
  actionsGetEnvironmentPublicKey: ActionsGetEnvironmentPublicKey
  actionsGetEnvironmentSecret: ActionsGetEnvironmentSecret
  actionsCreateOrUpdateEnvironmentSecret: ActionsCreateOrUpdateEnvironmentSecret
  actionsDeleteEnvironmentSecret: ActionsDeleteEnvironmentSecret
  actionsListEnvironmentVariables: ActionsListEnvironmentVariables
  actionsCreateEnvironmentVariable: ActionsCreateEnvironmentVariable
  actionsGetEnvironmentVariable: ActionsGetEnvironmentVariable
  actionsUpdateEnvironmentVariable: ActionsUpdateEnvironmentVariable
  actionsDeleteEnvironmentVariable: ActionsDeleteEnvironmentVariable
  searchCode: SearchCode
  searchCommits: SearchCommits
  searchIssuesAndPullRequests: SearchIssuesAndPullRequests
  searchLabels: SearchLabels
  searchRepos: SearchRepos
  searchTopics: SearchTopics
  searchUsers: SearchUsers
  teamsGetLegacy: TeamsGetLegacy
  teamsUpdateLegacy: TeamsUpdateLegacy
  teamsDeleteLegacy: TeamsDeleteLegacy
  teamsListDiscussionsLegacy: TeamsListDiscussionsLegacy
  teamsCreateDiscussionLegacy: TeamsCreateDiscussionLegacy
  teamsGetDiscussionLegacy: TeamsGetDiscussionLegacy
  teamsUpdateDiscussionLegacy: TeamsUpdateDiscussionLegacy
  teamsDeleteDiscussionLegacy: TeamsDeleteDiscussionLegacy
  teamsListDiscussionCommentsLegacy: TeamsListDiscussionCommentsLegacy
  teamsCreateDiscussionCommentLegacy: TeamsCreateDiscussionCommentLegacy
  teamsGetDiscussionCommentLegacy: TeamsGetDiscussionCommentLegacy
  teamsUpdateDiscussionCommentLegacy: TeamsUpdateDiscussionCommentLegacy
  teamsDeleteDiscussionCommentLegacy: TeamsDeleteDiscussionCommentLegacy
  reactionsListForTeamDiscussionCommentLegacy: ReactionsListForTeamDiscussionCommentLegacy
  reactionsCreateForTeamDiscussionCommentLegacy: ReactionsCreateForTeamDiscussionCommentLegacy
  reactionsListForTeamDiscussionLegacy: ReactionsListForTeamDiscussionLegacy
  reactionsCreateForTeamDiscussionLegacy: ReactionsCreateForTeamDiscussionLegacy
  teamsListPendingInvitationsLegacy: TeamsListPendingInvitationsLegacy
  teamsListMembersLegacy: TeamsListMembersLegacy
  teamsGetMemberLegacy: TeamsGetMemberLegacy
  teamsAddMemberLegacy: TeamsAddMemberLegacy
  teamsRemoveMemberLegacy: TeamsRemoveMemberLegacy
  teamsGetMembershipForUserLegacy: TeamsGetMembershipForUserLegacy
  teamsAddOrUpdateMembershipForUserLegacy: TeamsAddOrUpdateMembershipForUserLegacy
  teamsRemoveMembershipForUserLegacy: TeamsRemoveMembershipForUserLegacy
  teamsListProjectsLegacy: TeamsListProjectsLegacy
  teamsCheckPermissionsForProjectLegacy: TeamsCheckPermissionsForProjectLegacy
  teamsAddOrUpdateProjectPermissionsLegacy: TeamsAddOrUpdateProjectPermissionsLegacy
  teamsRemoveProjectLegacy: TeamsRemoveProjectLegacy
  teamsListReposLegacy: TeamsListReposLegacy
  teamsCheckPermissionsForRepoLegacy: TeamsCheckPermissionsForRepoLegacy
  teamsAddOrUpdateRepoPermissionsLegacy: TeamsAddOrUpdateRepoPermissionsLegacy
  teamsRemoveRepoLegacy: TeamsRemoveRepoLegacy
  teamsListChildLegacy: TeamsListChildLegacy
  usersGetAuthenticated: UsersGetAuthenticated
  usersUpdateAuthenticated: UsersUpdateAuthenticated
  usersListBlockedByAuthenticatedUser: UsersListBlockedByAuthenticatedUser
  usersCheckBlocked: UsersCheckBlocked
  usersBlock: UsersBlock
  usersUnblock: UsersUnblock
  codespacesListForAuthenticatedUser: CodespacesListForAuthenticatedUser
  codespacesCreateForAuthenticatedUser: CodespacesCreateForAuthenticatedUser
  codespacesListSecretsForAuthenticatedUser: CodespacesListSecretsForAuthenticatedUser
  codespacesGetPublicKeyForAuthenticatedUser: CodespacesGetPublicKeyForAuthenticatedUser
  codespacesGetSecretForAuthenticatedUser: CodespacesGetSecretForAuthenticatedUser
  codespacesCreateOrUpdateSecretForAuthenticatedUser: CodespacesCreateOrUpdateSecretForAuthenticatedUser
  codespacesDeleteSecretForAuthenticatedUser: CodespacesDeleteSecretForAuthenticatedUser
  codespacesListRepositoriesForSecretForAuthenticatedUser: CodespacesListRepositoriesForSecretForAuthenticatedUser
  codespacesSetRepositoriesForSecretForAuthenticatedUser: CodespacesSetRepositoriesForSecretForAuthenticatedUser
  codespacesAddRepositoryForSecretForAuthenticatedUser: CodespacesAddRepositoryForSecretForAuthenticatedUser
  codespacesRemoveRepositoryForSecretForAuthenticatedUser: CodespacesRemoveRepositoryForSecretForAuthenticatedUser
  codespacesGetForAuthenticatedUser: CodespacesGetForAuthenticatedUser
  codespacesUpdateForAuthenticatedUser: CodespacesUpdateForAuthenticatedUser
  codespacesDeleteForAuthenticatedUser: CodespacesDeleteForAuthenticatedUser
  codespacesExportForAuthenticatedUser: CodespacesExportForAuthenticatedUser
  codespacesGetExportDetailsForAuthenticatedUser: CodespacesGetExportDetailsForAuthenticatedUser
  codespacesCodespaceMachinesForAuthenticatedUser: CodespacesCodespaceMachinesForAuthenticatedUser
  codespacesPublishForAuthenticatedUser: CodespacesPublishForAuthenticatedUser
  codespacesStartForAuthenticatedUser: CodespacesStartForAuthenticatedUser
  codespacesStopForAuthenticatedUser: CodespacesStopForAuthenticatedUser
  packagesListDockerMigrationConflictingPackagesForAuthenticatedUser: PackagesListDockerMigrationConflictingPackagesForAuthenticatedUser
  usersSetPrimaryEmailVisibilityForAuthenticatedUser: UsersSetPrimaryEmailVisibilityForAuthenticatedUser
  usersListEmailsForAuthenticatedUser: UsersListEmailsForAuthenticatedUser
  usersAddEmailForAuthenticatedUser: UsersAddEmailForAuthenticatedUser
  usersDeleteEmailForAuthenticatedUser: UsersDeleteEmailForAuthenticatedUser
  usersListFollowersForAuthenticatedUser: UsersListFollowersForAuthenticatedUser
  usersListFollowedByAuthenticatedUser: UsersListFollowedByAuthenticatedUser
  usersCheckPersonIsFollowedByAuthenticated: UsersCheckPersonIsFollowedByAuthenticated
  usersFollow: UsersFollow
  usersUnfollow: UsersUnfollow
  usersListGpgKeysForAuthenticatedUser: UsersListGpgKeysForAuthenticatedUser
  usersCreateGpgKeyForAuthenticatedUser: UsersCreateGpgKeyForAuthenticatedUser
  usersGetGpgKeyForAuthenticatedUser: UsersGetGpgKeyForAuthenticatedUser
  usersDeleteGpgKeyForAuthenticatedUser: UsersDeleteGpgKeyForAuthenticatedUser
  appsListInstallationsForAuthenticatedUser: AppsListInstallationsForAuthenticatedUser
  appsListInstallationReposForAuthenticatedUser: AppsListInstallationReposForAuthenticatedUser
  appsAddRepoToInstallationForAuthenticatedUser: AppsAddRepoToInstallationForAuthenticatedUser
  appsRemoveRepoFromInstallationForAuthenticatedUser: AppsRemoveRepoFromInstallationForAuthenticatedUser
  interactionsGetRestrictionsForAuthenticatedUser: InteractionsGetRestrictionsForAuthenticatedUser
  interactionsSetRestrictionsForAuthenticatedUser: InteractionsSetRestrictionsForAuthenticatedUser
  interactionsRemoveRestrictionsForAuthenticatedUser: InteractionsRemoveRestrictionsForAuthenticatedUser
  issuesListForAuthenticatedUser: IssuesListForAuthenticatedUser
  usersListPublicSshKeysForAuthenticatedUser: UsersListPublicSshKeysForAuthenticatedUser
  usersCreatePublicSshKeyForAuthenticatedUser: UsersCreatePublicSshKeyForAuthenticatedUser
  usersGetPublicSshKeyForAuthenticatedUser: UsersGetPublicSshKeyForAuthenticatedUser
  usersDeletePublicSshKeyForAuthenticatedUser: UsersDeletePublicSshKeyForAuthenticatedUser
  appsListSubscriptionsForAuthenticatedUser: AppsListSubscriptionsForAuthenticatedUser
  appsListSubscriptionsForAuthenticatedUserStubbed: AppsListSubscriptionsForAuthenticatedUserStubbed
  orgsListMembershipsForAuthenticatedUser: OrgsListMembershipsForAuthenticatedUser
  orgsGetMembershipForAuthenticatedUser: OrgsGetMembershipForAuthenticatedUser
  orgsUpdateMembershipForAuthenticatedUser: OrgsUpdateMembershipForAuthenticatedUser
  migrationsListForAuthenticatedUser: MigrationsListForAuthenticatedUser
  migrationsStartForAuthenticatedUser: MigrationsStartForAuthenticatedUser
  migrationsGetStatusForAuthenticatedUser: MigrationsGetStatusForAuthenticatedUser
  migrationsGetArchiveForAuthenticatedUser: MigrationsGetArchiveForAuthenticatedUser
  migrationsDeleteArchiveForAuthenticatedUser: MigrationsDeleteArchiveForAuthenticatedUser
  migrationsUnlockRepoForAuthenticatedUser: MigrationsUnlockRepoForAuthenticatedUser
  migrationsListReposForAuthenticatedUser: MigrationsListReposForAuthenticatedUser
  orgsListForAuthenticatedUser: OrgsListForAuthenticatedUser
  packagesListPackagesForAuthenticatedUser: PackagesListPackagesForAuthenticatedUser
  packagesGetPackageForAuthenticatedUser: PackagesGetPackageForAuthenticatedUser
  packagesDeletePackageForAuthenticatedUser: PackagesDeletePackageForAuthenticatedUser
  packagesRestorePackageForAuthenticatedUser: PackagesRestorePackageForAuthenticatedUser
  packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser: PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser
  packagesGetPackageVersionForAuthenticatedUser: PackagesGetPackageVersionForAuthenticatedUser
  packagesDeletePackageVersionForAuthenticatedUser: PackagesDeletePackageVersionForAuthenticatedUser
  packagesRestorePackageVersionForAuthenticatedUser: PackagesRestorePackageVersionForAuthenticatedUser
  projectsCreateForAuthenticatedUser: ProjectsCreateForAuthenticatedUser
  usersListPublicEmailsForAuthenticatedUser: UsersListPublicEmailsForAuthenticatedUser
  reposListForAuthenticatedUser: ReposListForAuthenticatedUser
  reposCreateForAuthenticatedUser: ReposCreateForAuthenticatedUser
  reposListInvitationsForAuthenticatedUser: ReposListInvitationsForAuthenticatedUser
  reposAcceptInvitationForAuthenticatedUser: ReposAcceptInvitationForAuthenticatedUser
  reposDeclineInvitationForAuthenticatedUser: ReposDeclineInvitationForAuthenticatedUser
  usersListSocialAccountsForAuthenticatedUser: UsersListSocialAccountsForAuthenticatedUser
  usersAddSocialAccountForAuthenticatedUser: UsersAddSocialAccountForAuthenticatedUser
  usersDeleteSocialAccountForAuthenticatedUser: UsersDeleteSocialAccountForAuthenticatedUser
  usersListSshSigningKeysForAuthenticatedUser: UsersListSshSigningKeysForAuthenticatedUser
  usersCreateSshSigningKeyForAuthenticatedUser: UsersCreateSshSigningKeyForAuthenticatedUser
  usersGetSshSigningKeyForAuthenticatedUser: UsersGetSshSigningKeyForAuthenticatedUser
  usersDeleteSshSigningKeyForAuthenticatedUser: UsersDeleteSshSigningKeyForAuthenticatedUser
  activityListReposStarredByAuthenticatedUser: ActivityListReposStarredByAuthenticatedUser
  activityCheckRepoIsStarredByAuthenticatedUser: ActivityCheckRepoIsStarredByAuthenticatedUser
  activityStarRepoForAuthenticatedUser: ActivityStarRepoForAuthenticatedUser
  activityUnstarRepoForAuthenticatedUser: ActivityUnstarRepoForAuthenticatedUser
  activityListWatchedReposForAuthenticatedUser: ActivityListWatchedReposForAuthenticatedUser
  teamsListForAuthenticatedUser: TeamsListForAuthenticatedUser
  usersList: UsersList
  usersGetByUsername: UsersGetByUsername
  packagesListDockerMigrationConflictingPackagesForUser: PackagesListDockerMigrationConflictingPackagesForUser
  activityListEventsForAuthenticatedUser: ActivityListEventsForAuthenticatedUser
  activityListOrgEventsForAuthenticatedUser: ActivityListOrgEventsForAuthenticatedUser
  activityListPublicEventsForUser: ActivityListPublicEventsForUser
  usersListFollowersForUser: UsersListFollowersForUser
  usersListFollowingForUser: UsersListFollowingForUser
  usersCheckFollowingForUser: UsersCheckFollowingForUser
  gistsListForUser: GistsListForUser
  usersListGpgKeysForUser: UsersListGpgKeysForUser
  usersGetContextForUser: UsersGetContextForUser
  appsGetUserInstallation: AppsGetUserInstallation
  usersListPublicKeysForUser: UsersListPublicKeysForUser
  orgsListForUser: OrgsListForUser
  packagesListPackagesForUser: PackagesListPackagesForUser
  packagesGetPackageForUser: PackagesGetPackageForUser
  packagesDeletePackageForUser: PackagesDeletePackageForUser
  packagesRestorePackageForUser: PackagesRestorePackageForUser
  packagesGetAllPackageVersionsForPackageOwnedByUser: PackagesGetAllPackageVersionsForPackageOwnedByUser
  packagesGetPackageVersionForUser: PackagesGetPackageVersionForUser
  packagesDeletePackageVersionForUser: PackagesDeletePackageVersionForUser
  packagesRestorePackageVersionForUser: PackagesRestorePackageVersionForUser
  projectsListForUser: ProjectsListForUser
  activityListReceivedEventsForUser: ActivityListReceivedEventsForUser
  activityListReceivedPublicEventsForUser: ActivityListReceivedPublicEventsForUser
  reposListForUser: ReposListForUser
  billingGetGithubActionsBillingUser: BillingGetGithubActionsBillingUser
  billingGetGithubPackagesBillingUser: BillingGetGithubPackagesBillingUser
  billingGetSharedStorageBillingUser: BillingGetSharedStorageBillingUser
  usersListSocialAccountsForUser: UsersListSocialAccountsForUser
  usersListSshSigningKeysForUser: UsersListSshSigningKeysForUser
  activityListReposStarredByUser: ActivityListReposStarredByUser
  activityListReposWatchedByUser: ActivityListReposWatchedByUser
  metaGetAllVersions: MetaGetAllVersions
  metaGetZen: MetaGetZen
}

export function createRouter(implementation: Implementation): KoaRouter {
  const router = new KoaRouter()

  const metaRootResponseValidator = responseValidationFactory(
    [["200", s_root]],
    undefined,
  )

  router.get("metaRoot", "/", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_root>(200)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .metaRoot(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = metaRootResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const securityAdvisoriesListGlobalAdvisoriesQuerySchema = z.object({
    ghsa_id: z.string().optional(),
    type: z.enum(["reviewed", "malware", "unreviewed"]).optional(),
    cve_id: z.string().optional(),
    ecosystem: z
      .enum([
        "actions",
        "composer",
        "erlang",
        "go",
        "maven",
        "npm",
        "nuget",
        "other",
        "pip",
        "pub",
        "rubygems",
        "rust",
      ])
      .optional(),
    severity: z
      .enum(["unknown", "low", "medium", "high", "critical"])
      .optional(),
    cwes: z.union([z.string(), z.array(z.string())]).optional(),
    is_withdrawn: z.coerce.boolean().optional(),
    affects: z.union([z.string(), z.array(z.string())]).optional(),
    published: z.string().optional(),
    updated: z.string().optional(),
    modified: z.string().optional(),
    before: z.string().optional(),
    after: z.string().optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    per_page: z.coerce.number().optional(),
    sort: z.enum(["updated", "published"]).optional(),
  })

  const securityAdvisoriesListGlobalAdvisoriesResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_global_advisory)],
        ["422", s_validation_error_simple],
        ["429", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "securityAdvisoriesListGlobalAdvisories",
    "/advisories",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          securityAdvisoriesListGlobalAdvisoriesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_global_advisory[]>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        with429() {
          return new KoaRuntimeResponse<t_basic_error>(429)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .securityAdvisoriesListGlobalAdvisories(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = securityAdvisoriesListGlobalAdvisoriesResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const securityAdvisoriesGetGlobalAdvisoryParamSchema = z.object({
    ghsa_id: z.string(),
  })

  const securityAdvisoriesGetGlobalAdvisoryResponseValidator =
    responseValidationFactory(
      [
        ["200", s_global_advisory],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "securityAdvisoriesGetGlobalAdvisory",
    "/advisories/:ghsa_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          securityAdvisoriesGetGlobalAdvisoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_global_advisory>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .securityAdvisoriesGetGlobalAdvisory(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = securityAdvisoriesGetGlobalAdvisoryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const appsGetAuthenticatedResponseValidator = responseValidationFactory(
    [["200", s_integration]],
    undefined,
  )

  router.get("appsGetAuthenticated", "/app", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_integration>(200)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .appsGetAuthenticated(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = appsGetAuthenticatedResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const appsCreateFromManifestParamSchema = z.object({ code: z.string() })

  const appsCreateFromManifestResponseValidator = responseValidationFactory(
    [
      [
        "201",
        s_integration.merge(
          z.object({
            client_id: z.string(),
            client_secret: z.string(),
            webhook_secret: z.string().nullable(),
            pem: z.string(),
          }),
        ),
      ],
      ["404", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

  router.post(
    "appsCreateFromManifest",
    "/app-manifests/:code/conversions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsCreateFromManifestParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<
            t_integration &
              (
                | {
                    client_id: string
                    client_secret: string
                    pem: string
                    webhook_secret: string | null
                  }
                | {
                    [key: string]: unknown
                  }
              )
          >(201)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsCreateFromManifest(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsCreateFromManifestResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsGetWebhookConfigForAppResponseValidator = responseValidationFactory(
    [["200", s_webhook_config]],
    undefined,
  )

  router.get(
    "appsGetWebhookConfigForApp",
    "/app/hook/config",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_webhook_config>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsGetWebhookConfigForApp(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsGetWebhookConfigForAppResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsUpdateWebhookConfigForAppBodySchema = z.object({
    url: s_webhook_config_url.optional(),
    content_type: s_webhook_config_content_type.optional(),
    secret: s_webhook_config_secret.optional(),
    insecure_ssl: s_webhook_config_insecure_ssl.optional(),
  })

  const appsUpdateWebhookConfigForAppResponseValidator =
    responseValidationFactory([["200", s_webhook_config]], undefined)

  router.patch(
    "appsUpdateWebhookConfigForApp",
    "/app/hook/config",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          appsUpdateWebhookConfigForAppBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_webhook_config>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsUpdateWebhookConfigForApp(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsUpdateWebhookConfigForAppResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsListWebhookDeliveriesQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    cursor: z.string().optional(),
    redelivery: z.coerce.boolean().optional(),
  })

  const appsListWebhookDeliveriesResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_hook_delivery_item)],
      ["400", s_scim_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get(
    "appsListWebhookDeliveries",
    "/app/hook/deliveries",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          appsListWebhookDeliveriesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_hook_delivery_item[]>(200)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsListWebhookDeliveries(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsListWebhookDeliveriesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsGetWebhookDeliveryParamSchema = z.object({
    delivery_id: z.coerce.number(),
  })

  const appsGetWebhookDeliveryResponseValidator = responseValidationFactory(
    [
      ["200", s_hook_delivery],
      ["400", s_scim_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get(
    "appsGetWebhookDelivery",
    "/app/hook/deliveries/:delivery_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsGetWebhookDeliveryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_hook_delivery>(200)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsGetWebhookDelivery(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsGetWebhookDeliveryResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsRedeliverWebhookDeliveryParamSchema = z.object({
    delivery_id: z.coerce.number(),
  })

  const appsRedeliverWebhookDeliveryResponseValidator =
    responseValidationFactory(
      [
        ["202", z.object({})],
        ["400", s_scim_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.post(
    "appsRedeliverWebhookDelivery",
    "/app/hook/deliveries/:delivery_id/attempts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsRedeliverWebhookDeliveryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with202() {
          return new KoaRuntimeResponse<EmptyObject>(202)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsRedeliverWebhookDelivery(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsRedeliverWebhookDeliveryResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsListInstallationRequestsForAuthenticatedAppQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const appsListInstallationRequestsForAuthenticatedAppResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_integration_installation_request)],
        ["304", z.void()],
        ["401", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "appsListInstallationRequestsForAuthenticatedApp",
    "/app/installation-requests",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          appsListInstallationRequestsForAuthenticatedAppQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_integration_installation_request[]>(
            200,
          )
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsListInstallationRequestsForAuthenticatedApp(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        appsListInstallationRequestsForAuthenticatedAppResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const appsListInstallationsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
    since: z.string().datetime({ offset: true }).optional(),
    outdated: z.string().optional(),
  })

  const appsListInstallationsResponseValidator = responseValidationFactory(
    [["200", z.array(s_installation)]],
    undefined,
  )

  router.get(
    "appsListInstallations",
    "/app/installations",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          appsListInstallationsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_installation[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsListInstallations(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsListInstallationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsGetInstallationParamSchema = z.object({
    installation_id: z.coerce.number(),
  })

  const appsGetInstallationResponseValidator = responseValidationFactory(
    [
      ["200", s_installation],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "appsGetInstallation",
    "/app/installations/:installation_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsGetInstallationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_installation>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsGetInstallation(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsGetInstallationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsDeleteInstallationParamSchema = z.object({
    installation_id: z.coerce.number(),
  })

  const appsDeleteInstallationResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.delete(
    "appsDeleteInstallation",
    "/app/installations/:installation_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsDeleteInstallationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsDeleteInstallation(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsDeleteInstallationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsCreateInstallationAccessTokenParamSchema = z.object({
    installation_id: z.coerce.number(),
  })

  const appsCreateInstallationAccessTokenBodySchema = z
    .object({
      repositories: z.array(z.string()).optional(),
      repository_ids: z.array(z.coerce.number()).optional(),
      permissions: s_app_permissions.optional(),
    })
    .optional()

  const appsCreateInstallationAccessTokenResponseValidator =
    responseValidationFactory(
      [
        ["201", s_installation_token],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.post(
    "appsCreateInstallationAccessToken",
    "/app/installations/:installation_id/access_tokens",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsCreateInstallationAccessTokenParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          appsCreateInstallationAccessTokenBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_installation_token>(201)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsCreateInstallationAccessToken(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsCreateInstallationAccessTokenResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const appsSuspendInstallationParamSchema = z.object({
    installation_id: z.coerce.number(),
  })

  const appsSuspendInstallationResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.put(
    "appsSuspendInstallation",
    "/app/installations/:installation_id/suspended",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsSuspendInstallationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsSuspendInstallation(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsSuspendInstallationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsUnsuspendInstallationParamSchema = z.object({
    installation_id: z.coerce.number(),
  })

  const appsUnsuspendInstallationResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.delete(
    "appsUnsuspendInstallation",
    "/app/installations/:installation_id/suspended",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsUnsuspendInstallationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsUnsuspendInstallation(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsUnsuspendInstallationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsDeleteAuthorizationParamSchema = z.object({ client_id: z.string() })

  const appsDeleteAuthorizationBodySchema = z.object({
    access_token: z.string(),
  })

  const appsDeleteAuthorizationResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.delete(
    "appsDeleteAuthorization",
    "/applications/:client_id/grant",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsDeleteAuthorizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          appsDeleteAuthorizationBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsDeleteAuthorization(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsDeleteAuthorizationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsCheckTokenParamSchema = z.object({ client_id: z.string() })

  const appsCheckTokenBodySchema = z.object({ access_token: z.string() })

  const appsCheckTokenResponseValidator = responseValidationFactory(
    [
      ["200", s_authorization],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "appsCheckToken",
    "/applications/:client_id/token",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsCheckTokenParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          appsCheckTokenBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_authorization>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsCheckToken(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsCheckTokenResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsResetTokenParamSchema = z.object({ client_id: z.string() })

  const appsResetTokenBodySchema = z.object({ access_token: z.string() })

  const appsResetTokenResponseValidator = responseValidationFactory(
    [
      ["200", s_authorization],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.patch(
    "appsResetToken",
    "/applications/:client_id/token",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsResetTokenParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          appsResetTokenBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_authorization>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsResetToken(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsResetTokenResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsDeleteTokenParamSchema = z.object({ client_id: z.string() })

  const appsDeleteTokenBodySchema = z.object({ access_token: z.string() })

  const appsDeleteTokenResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.delete(
    "appsDeleteToken",
    "/applications/:client_id/token",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsDeleteTokenParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          appsDeleteTokenBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsDeleteToken(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsDeleteTokenResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsScopeTokenParamSchema = z.object({ client_id: z.string() })

  const appsScopeTokenBodySchema = z.object({
    access_token: z.string(),
    target: z.string().optional(),
    target_id: z.coerce.number().optional(),
    repositories: z.array(z.string()).optional(),
    repository_ids: z.array(z.coerce.number()).optional(),
    permissions: s_app_permissions.optional(),
  })

  const appsScopeTokenResponseValidator = responseValidationFactory(
    [
      ["200", s_authorization],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "appsScopeToken",
    "/applications/:client_id/token/scoped",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsScopeTokenParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          appsScopeTokenBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_authorization>(200)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsScopeToken(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsScopeTokenResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsGetBySlugParamSchema = z.object({ app_slug: z.string() })

  const appsGetBySlugResponseValidator = responseValidationFactory(
    [
      ["200", s_integration],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get("appsGetBySlug", "/apps/:app_slug", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        appsGetBySlugParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_integration>(200)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .appsGetBySlug(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = appsGetBySlugResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const classroomGetAnAssignmentParamSchema = z.object({
    assignment_id: z.coerce.number(),
  })

  const classroomGetAnAssignmentResponseValidator = responseValidationFactory(
    [
      ["200", s_classroom_assignment],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "classroomGetAnAssignment",
    "/assignments/:assignment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          classroomGetAnAssignmentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_classroom_assignment>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .classroomGetAnAssignment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = classroomGetAnAssignmentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const classroomListAcceptedAssigmentsForAnAssignmentParamSchema = z.object({
    assignment_id: z.coerce.number(),
  })

  const classroomListAcceptedAssigmentsForAnAssignmentQuerySchema = z.object({
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
  })

  const classroomListAcceptedAssigmentsForAnAssignmentResponseValidator =
    responseValidationFactory(
      [["200", z.array(s_classroom_accepted_assignment)]],
      undefined,
    )

  router.get(
    "classroomListAcceptedAssigmentsForAnAssignment",
    "/assignments/:assignment_id/accepted_assignments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          classroomListAcceptedAssigmentsForAnAssignmentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          classroomListAcceptedAssigmentsForAnAssignmentQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_classroom_accepted_assignment[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .classroomListAcceptedAssigmentsForAnAssignment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        classroomListAcceptedAssigmentsForAnAssignmentResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const classroomGetAssignmentGradesParamSchema = z.object({
    assignment_id: z.coerce.number(),
  })

  const classroomGetAssignmentGradesResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_classroom_assignment_grade)],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "classroomGetAssignmentGrades",
    "/assignments/:assignment_id/grades",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          classroomGetAssignmentGradesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_classroom_assignment_grade[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .classroomGetAssignmentGrades(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = classroomGetAssignmentGradesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const classroomListClassroomsQuerySchema = z.object({
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
  })

  const classroomListClassroomsResponseValidator = responseValidationFactory(
    [["200", z.array(s_simple_classroom)]],
    undefined,
  )

  router.get("classroomListClassrooms", "/classrooms", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        classroomListClassroomsQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_simple_classroom[]>(200)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .classroomListClassrooms(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = classroomListClassroomsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const classroomGetAClassroomParamSchema = z.object({
    classroom_id: z.coerce.number(),
  })

  const classroomGetAClassroomResponseValidator = responseValidationFactory(
    [
      ["200", s_classroom],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "classroomGetAClassroom",
    "/classrooms/:classroom_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          classroomGetAClassroomParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_classroom>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .classroomGetAClassroom(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = classroomGetAClassroomResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const classroomListAssignmentsForAClassroomParamSchema = z.object({
    classroom_id: z.coerce.number(),
  })

  const classroomListAssignmentsForAClassroomQuerySchema = z.object({
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
  })

  const classroomListAssignmentsForAClassroomResponseValidator =
    responseValidationFactory(
      [["200", z.array(s_simple_classroom_assignment)]],
      undefined,
    )

  router.get(
    "classroomListAssignmentsForAClassroom",
    "/classrooms/:classroom_id/assignments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          classroomListAssignmentsForAClassroomParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          classroomListAssignmentsForAClassroomQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_simple_classroom_assignment[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .classroomListAssignmentsForAClassroom(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = classroomListAssignmentsForAClassroomResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codesOfConductGetAllCodesOfConductResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_code_of_conduct)],
        ["304", z.void()],
      ],
      undefined,
    )

  router.get(
    "codesOfConductGetAllCodesOfConduct",
    "/codes_of_conduct",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_code_of_conduct[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codesOfConductGetAllCodesOfConduct(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codesOfConductGetAllCodesOfConductResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codesOfConductGetConductCodeParamSchema = z.object({ key: z.string() })

  const codesOfConductGetConductCodeResponseValidator =
    responseValidationFactory(
      [
        ["200", s_code_of_conduct],
        ["304", z.void()],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "codesOfConductGetConductCode",
    "/codes_of_conduct/:key",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codesOfConductGetConductCodeParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_code_of_conduct>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codesOfConductGetConductCode(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codesOfConductGetConductCodeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const emojisGetResponseValidator = responseValidationFactory(
    [
      ["200", z.object({})],
      ["304", z.void()],
    ],
    undefined,
  )

  router.get("emojisGet", "/emojis", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<{
          [key: string]: string
        }>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .emojisGet(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = emojisGetResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const dependabotListAlertsForEnterpriseParamSchema = z.object({
    enterprise: z.string(),
  })

  const dependabotListAlertsForEnterpriseQuerySchema = z.object({
    state: z.string().optional(),
    severity: z.string().optional(),
    ecosystem: z.string().optional(),
    package: z.string().optional(),
    scope: z.enum(["development", "runtime"]).optional(),
    sort: z.enum(["created", "updated"]).optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    before: z.string().optional(),
    after: z.string().optional(),
    first: z.coerce.number().optional(),
    last: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
  })

  const dependabotListAlertsForEnterpriseResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_dependabot_alert_with_repository)],
        ["304", z.void()],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", s_validation_error_simple],
      ],
      undefined,
    )

  router.get(
    "dependabotListAlertsForEnterprise",
    "/enterprises/:enterprise/dependabot/alerts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotListAlertsForEnterpriseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          dependabotListAlertsForEnterpriseQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_dependabot_alert_with_repository[]>(
            200,
          )
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .dependabotListAlertsForEnterprise(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotListAlertsForEnterpriseResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const secretScanningListAlertsForEnterpriseParamSchema = z.object({
    enterprise: z.string(),
  })

  const secretScanningListAlertsForEnterpriseQuerySchema = z.object({
    state: z.enum(["open", "resolved"]).optional(),
    secret_type: z.string().optional(),
    resolution: z.string().optional(),
    sort: z.enum(["created", "updated"]).optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    per_page: z.coerce.number().optional(),
    before: z.string().optional(),
    after: z.string().optional(),
  })

  const secretScanningListAlertsForEnterpriseResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_organization_secret_scanning_alert)],
        ["404", s_basic_error],
        [
          "503",
          z.object({
            code: z.string().optional(),
            message: z.string().optional(),
            documentation_url: z.string().optional(),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "secretScanningListAlertsForEnterprise",
    "/enterprises/:enterprise/secret-scanning/alerts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          secretScanningListAlertsForEnterpriseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          secretScanningListAlertsForEnterpriseQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_organization_secret_scanning_alert[]>(
            200,
          )
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .secretScanningListAlertsForEnterprise(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = secretScanningListAlertsForEnterpriseResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const activityListPublicEventsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const activityListPublicEventsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_event)],
      ["304", z.void()],
      ["403", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

  router.get("activityListPublicEvents", "/events", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        activityListPublicEventsQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_event[]>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with503() {
        return new KoaRuntimeResponse<{
          code?: string
          documentation_url?: string
          message?: string
        }>(503)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .activityListPublicEvents(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = activityListPublicEventsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const activityGetFeedsResponseValidator = responseValidationFactory(
    [["200", s_feed]],
    undefined,
  )

  router.get("activityGetFeeds", "/feeds", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_feed>(200)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .activityGetFeeds(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = activityGetFeedsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gistsListQuerySchema = z.object({
    since: z.string().datetime({ offset: true }).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const gistsListResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_base_gist)],
      ["304", z.void()],
      ["403", s_basic_error],
    ],
    undefined,
  )

  router.get("gistsList", "/gists", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        gistsListQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_base_gist[]>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .gistsList(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = gistsListResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gistsCreateBodySchema = z.object({
    description: z.string().optional(),
    files: z.object({}),
    public: z.union([z.coerce.boolean(), z.enum(["true", "false"])]).optional(),
  })

  const gistsCreateResponseValidator = responseValidationFactory(
    [
      ["201", s_gist_simple],
      ["304", z.void()],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post("gistsCreate", "/gists", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(
        gistsCreateBodySchema,
        ctx.request.body,
        RequestInputType.RequestBody,
      ),
    }

    const responder = {
      with201() {
        return new KoaRuntimeResponse<t_gist_simple>(201)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error>(422)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .gistsCreate(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = gistsCreateResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gistsListPublicQuerySchema = z.object({
    since: z.string().datetime({ offset: true }).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const gistsListPublicResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_base_gist)],
      ["304", z.void()],
      ["403", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get("gistsListPublic", "/gists/public", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        gistsListPublicQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_base_gist[]>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error>(422)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .gistsListPublic(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = gistsListPublicResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gistsListStarredQuerySchema = z.object({
    since: z.string().datetime({ offset: true }).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const gistsListStarredResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_base_gist)],
      ["304", z.void()],
      ["401", s_basic_error],
      ["403", s_basic_error],
    ],
    undefined,
  )

  router.get("gistsListStarred", "/gists/starred", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        gistsListStarredQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_base_gist[]>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with401() {
        return new KoaRuntimeResponse<t_basic_error>(401)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .gistsListStarred(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = gistsListStarredResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gistsGetParamSchema = z.object({ gist_id: z.string() })

  const gistsGetResponseValidator = responseValidationFactory(
    [
      ["200", s_gist_simple],
      ["304", z.void()],
      [
        "403",
        z.object({
          block: z
            .object({
              reason: z.string().optional(),
              created_at: z.string().optional(),
              html_url: z.string().nullable().optional(),
            })
            .optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get("gistsGet", "/gists/:gist_id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        gistsGetParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_gist_simple>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with403() {
        return new KoaRuntimeResponse<{
          block?: {
            created_at?: string
            html_url?: string | null
            reason?: string
          }
          documentation_url?: string
          message?: string
        }>(403)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .gistsGet(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = gistsGetResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gistsUpdateParamSchema = z.object({ gist_id: z.string() })

  const gistsUpdateBodySchema = z
    .object({
      description: z.string().optional(),
      files: z.object({}).optional(),
    })
    .nullable()

  const gistsUpdateResponseValidator = responseValidationFactory(
    [
      ["200", s_gist_simple],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.patch("gistsUpdate", "/gists/:gist_id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        gistsUpdateParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        gistsUpdateBodySchema,
        ctx.request.body,
        RequestInputType.RequestBody,
      ),
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_gist_simple>(200)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error>(422)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .gistsUpdate(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = gistsUpdateResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gistsDeleteParamSchema = z.object({ gist_id: z.string() })

  const gistsDeleteResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["304", z.void()],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.delete("gistsDelete", "/gists/:gist_id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        gistsDeleteParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
    }

    const responder = {
      with204() {
        return new KoaRuntimeResponse<void>(204)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .gistsDelete(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = gistsDeleteResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gistsListCommentsParamSchema = z.object({ gist_id: z.string() })

  const gistsListCommentsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const gistsListCommentsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_gist_comment)],
      ["304", z.void()],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "gistsListComments",
    "/gists/:gist_id/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gistsListCommentsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          gistsListCommentsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_gist_comment[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .gistsListComments(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gistsListCommentsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gistsCreateCommentParamSchema = z.object({ gist_id: z.string() })

  const gistsCreateCommentBodySchema = z.object({ body: z.string() })

  const gistsCreateCommentResponseValidator = responseValidationFactory(
    [
      ["201", s_gist_comment],
      ["304", z.void()],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.post(
    "gistsCreateComment",
    "/gists/:gist_id/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gistsCreateCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          gistsCreateCommentBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_gist_comment>(201)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .gistsCreateComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gistsCreateCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gistsGetCommentParamSchema = z.object({
    gist_id: z.string(),
    comment_id: z.coerce.number(),
  })

  const gistsGetCommentResponseValidator = responseValidationFactory(
    [
      ["200", s_gist_comment],
      ["304", z.void()],
      [
        "403",
        z.object({
          block: z
            .object({
              reason: z.string().optional(),
              created_at: z.string().optional(),
              html_url: z.string().nullable().optional(),
            })
            .optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "gistsGetComment",
    "/gists/:gist_id/comments/:comment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gistsGetCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_gist_comment>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with403() {
          return new KoaRuntimeResponse<{
            block?: {
              created_at?: string
              html_url?: string | null
              reason?: string
            }
            documentation_url?: string
            message?: string
          }>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .gistsGetComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gistsGetCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gistsUpdateCommentParamSchema = z.object({
    gist_id: z.string(),
    comment_id: z.coerce.number(),
  })

  const gistsUpdateCommentBodySchema = z.object({ body: z.string() })

  const gistsUpdateCommentResponseValidator = responseValidationFactory(
    [
      ["200", s_gist_comment],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.patch(
    "gistsUpdateComment",
    "/gists/:gist_id/comments/:comment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gistsUpdateCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          gistsUpdateCommentBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_gist_comment>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .gistsUpdateComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gistsUpdateCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gistsDeleteCommentParamSchema = z.object({
    gist_id: z.string(),
    comment_id: z.coerce.number(),
  })

  const gistsDeleteCommentResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["304", z.void()],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.delete(
    "gistsDeleteComment",
    "/gists/:gist_id/comments/:comment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gistsDeleteCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .gistsDeleteComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gistsDeleteCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gistsListCommitsParamSchema = z.object({ gist_id: z.string() })

  const gistsListCommitsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const gistsListCommitsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_gist_commit)],
      ["304", z.void()],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "gistsListCommits",
    "/gists/:gist_id/commits",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gistsListCommitsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          gistsListCommitsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_gist_commit[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .gistsListCommits(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gistsListCommitsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gistsListForksParamSchema = z.object({ gist_id: z.string() })

  const gistsListForksQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const gistsListForksResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_gist_simple)],
      ["304", z.void()],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get("gistsListForks", "/gists/:gist_id/forks", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        gistsListForksParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: parseRequestInput(
        gistsListForksQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_gist_simple[]>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .gistsListForks(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = gistsListForksResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gistsForkParamSchema = z.object({ gist_id: z.string() })

  const gistsForkResponseValidator = responseValidationFactory(
    [
      ["201", s_base_gist],
      ["304", z.void()],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post("gistsFork", "/gists/:gist_id/forks", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        gistsForkParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
    }

    const responder = {
      with201() {
        return new KoaRuntimeResponse<t_base_gist>(201)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error>(422)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .gistsFork(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = gistsForkResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gistsCheckIsStarredParamSchema = z.object({ gist_id: z.string() })

  const gistsCheckIsStarredResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["304", z.void()],
      ["403", s_basic_error],
      ["404", z.object({})],
    ],
    undefined,
  )

  router.get(
    "gistsCheckIsStarred",
    "/gists/:gist_id/star",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gistsCheckIsStarredParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<EmptyObject>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .gistsCheckIsStarred(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gistsCheckIsStarredResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gistsStarParamSchema = z.object({ gist_id: z.string() })

  const gistsStarResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["304", z.void()],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.put("gistsStar", "/gists/:gist_id/star", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        gistsStarParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
    }

    const responder = {
      with204() {
        return new KoaRuntimeResponse<void>(204)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .gistsStar(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = gistsStarResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gistsUnstarParamSchema = z.object({ gist_id: z.string() })

  const gistsUnstarResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["304", z.void()],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.delete("gistsUnstar", "/gists/:gist_id/star", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        gistsUnstarParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
    }

    const responder = {
      with204() {
        return new KoaRuntimeResponse<void>(204)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .gistsUnstar(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = gistsUnstarResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gistsGetRevisionParamSchema = z.object({
    gist_id: z.string(),
    sha: z.string(),
  })

  const gistsGetRevisionResponseValidator = responseValidationFactory(
    [
      ["200", s_gist_simple],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get("gistsGetRevision", "/gists/:gist_id/:sha", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        gistsGetRevisionParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_gist_simple>(200)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error>(422)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .gistsGetRevision(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = gistsGetRevisionResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const gitignoreGetAllTemplatesResponseValidator = responseValidationFactory(
    [
      ["200", z.array(z.string())],
      ["304", z.void()],
    ],
    undefined,
  )

  router.get(
    "gitignoreGetAllTemplates",
    "/gitignore/templates",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<string[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .gitignoreGetAllTemplates(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitignoreGetAllTemplatesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitignoreGetTemplateParamSchema = z.object({ name: z.string() })

  const gitignoreGetTemplateResponseValidator = responseValidationFactory(
    [
      ["200", s_gitignore_template],
      ["304", z.void()],
    ],
    undefined,
  )

  router.get(
    "gitignoreGetTemplate",
    "/gitignore/templates/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitignoreGetTemplateParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_gitignore_template>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .gitignoreGetTemplate(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitignoreGetTemplateResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsListReposAccessibleToInstallationQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const appsListReposAccessibleToInstallationResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            repositories: z.array(s_repository),
            repository_selection: z.string().optional(),
          }),
        ],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "appsListReposAccessibleToInstallation",
    "/installation/repositories",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          appsListReposAccessibleToInstallationQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            repositories: t_repository[]
            repository_selection?: string
            total_count: number
          }>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsListReposAccessibleToInstallation(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsListReposAccessibleToInstallationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const appsRevokeInstallationAccessTokenResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "appsRevokeInstallationAccessToken",
    "/installation/token",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsRevokeInstallationAccessToken(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsRevokeInstallationAccessTokenResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const issuesListQuerySchema = z.object({
    filter: z
      .enum(["assigned", "created", "mentioned", "subscribed", "repos", "all"])
      .optional(),
    state: z.enum(["open", "closed", "all"]).optional(),
    labels: z.string().optional(),
    sort: z.enum(["created", "updated", "comments"]).optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    since: z.string().datetime({ offset: true }).optional(),
    collab: z.coerce.boolean().optional(),
    orgs: z.coerce.boolean().optional(),
    owned: z.coerce.boolean().optional(),
    pulls: z.coerce.boolean().optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const issuesListResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_issue)],
      ["304", z.void()],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get("issuesList", "/issues", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        issuesListQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_issue[]>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error>(422)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .issuesList(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = issuesListResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const licensesGetAllCommonlyUsedQuerySchema = z.object({
    featured: z.coerce.boolean().optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const licensesGetAllCommonlyUsedResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_license_simple)],
      ["304", z.void()],
    ],
    undefined,
  )

  router.get("licensesGetAllCommonlyUsed", "/licenses", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        licensesGetAllCommonlyUsedQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_license_simple[]>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .licensesGetAllCommonlyUsed(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = licensesGetAllCommonlyUsedResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const licensesGetParamSchema = z.object({ license: z.string() })

  const licensesGetResponseValidator = responseValidationFactory(
    [
      ["200", s_license],
      ["304", z.void()],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get("licensesGet", "/licenses/:license", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        licensesGetParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_license>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .licensesGet(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = licensesGetResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const markdownRenderBodySchema = z.object({
    text: z.string(),
    mode: z.enum(["markdown", "gfm"]).optional(),
    context: z.string().optional(),
  })

  const markdownRenderResponseValidator = responseValidationFactory(
    [
      ["200", z.string()],
      ["304", z.void()],
    ],
    undefined,
  )

  router.post("markdownRender", "/markdown", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(
        markdownRenderBodySchema,
        ctx.request.body,
        RequestInputType.RequestBody,
      ),
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<string>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .markdownRender(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = markdownRenderResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const markdownRenderRawBodySchema = z.string().optional()

  const markdownRenderRawResponseValidator = responseValidationFactory(
    [
      ["200", z.string()],
      ["304", z.void()],
    ],
    undefined,
  )

  router.post("markdownRenderRaw", "/markdown/raw", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(
        markdownRenderRawBodySchema,
        ctx.request.body,
        RequestInputType.RequestBody,
      ),
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<string>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .markdownRenderRaw(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = markdownRenderRawResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const appsGetSubscriptionPlanForAccountParamSchema = z.object({
    account_id: z.coerce.number(),
  })

  const appsGetSubscriptionPlanForAccountResponseValidator =
    responseValidationFactory(
      [
        ["200", s_marketplace_purchase],
        ["401", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "appsGetSubscriptionPlanForAccount",
    "/marketplace_listing/accounts/:account_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsGetSubscriptionPlanForAccountParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_marketplace_purchase>(200)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsGetSubscriptionPlanForAccount(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsGetSubscriptionPlanForAccountResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const appsListPlansQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const appsListPlansResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_marketplace_listing_plan)],
      ["401", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "appsListPlans",
    "/marketplace_listing/plans",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          appsListPlansQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_marketplace_listing_plan[]>(200)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsListPlans(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsListPlansResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsListAccountsForPlanParamSchema = z.object({
    plan_id: z.coerce.number(),
  })

  const appsListAccountsForPlanQuerySchema = z.object({
    sort: z.enum(["created", "updated"]).optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const appsListAccountsForPlanResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_marketplace_purchase)],
      ["401", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get(
    "appsListAccountsForPlan",
    "/marketplace_listing/plans/:plan_id/accounts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsListAccountsForPlanParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          appsListAccountsForPlanQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_marketplace_purchase[]>(200)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsListAccountsForPlan(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsListAccountsForPlanResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsGetSubscriptionPlanForAccountStubbedParamSchema = z.object({
    account_id: z.coerce.number(),
  })

  const appsGetSubscriptionPlanForAccountStubbedResponseValidator =
    responseValidationFactory(
      [
        ["200", s_marketplace_purchase],
        ["401", s_basic_error],
        ["404", z.void()],
      ],
      undefined,
    )

  router.get(
    "appsGetSubscriptionPlanForAccountStubbed",
    "/marketplace_listing/stubbed/accounts/:account_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsGetSubscriptionPlanForAccountStubbedParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_marketplace_purchase>(200)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsGetSubscriptionPlanForAccountStubbed(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsGetSubscriptionPlanForAccountStubbedResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const appsListPlansStubbedQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const appsListPlansStubbedResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_marketplace_listing_plan)],
      ["401", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "appsListPlansStubbed",
    "/marketplace_listing/stubbed/plans",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          appsListPlansStubbedQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_marketplace_listing_plan[]>(200)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsListPlansStubbed(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsListPlansStubbedResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsListAccountsForPlanStubbedParamSchema = z.object({
    plan_id: z.coerce.number(),
  })

  const appsListAccountsForPlanStubbedQuerySchema = z.object({
    sort: z.enum(["created", "updated"]).optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const appsListAccountsForPlanStubbedResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_marketplace_purchase)],
        ["401", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "appsListAccountsForPlanStubbed",
    "/marketplace_listing/stubbed/plans/:plan_id/accounts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsListAccountsForPlanStubbedParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          appsListAccountsForPlanStubbedQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_marketplace_purchase[]>(200)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsListAccountsForPlanStubbed(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsListAccountsForPlanStubbedResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const metaGetResponseValidator = responseValidationFactory(
    [
      ["200", s_api_overview],
      ["304", z.void()],
    ],
    undefined,
  )

  router.get("metaGet", "/meta", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_api_overview>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .metaGet(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = metaGetResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const activityListPublicEventsForRepoNetworkParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const activityListPublicEventsForRepoNetworkQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const activityListPublicEventsForRepoNetworkResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_event)],
        ["301", s_basic_error],
        ["304", z.void()],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "activityListPublicEventsForRepoNetwork",
    "/networks/:owner/:repo/events",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListPublicEventsForRepoNetworkParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListPublicEventsForRepoNetworkQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_event[]>(200)
        },
        with301() {
          return new KoaRuntimeResponse<t_basic_error>(301)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityListPublicEventsForRepoNetwork(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListPublicEventsForRepoNetworkResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const activityListNotificationsForAuthenticatedUserQuerySchema = z.object({
    all: z.coerce.boolean().optional(),
    participating: z.coerce.boolean().optional(),
    since: z.string().datetime({ offset: true }).optional(),
    before: z.string().datetime({ offset: true }).optional(),
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
  })

  const activityListNotificationsForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_thread)],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.get(
    "activityListNotificationsForAuthenticatedUser",
    "/notifications",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          activityListNotificationsForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_thread[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityListNotificationsForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListNotificationsForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const activityMarkNotificationsAsReadBodySchema = z
    .object({
      last_read_at: z.string().datetime({ offset: true }).optional(),
      read: z.coerce.boolean().optional(),
    })
    .optional()

  const activityMarkNotificationsAsReadResponseValidator =
    responseValidationFactory(
      [
        ["202", z.object({ message: z.string().optional() })],
        ["205", z.void()],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
      ],
      undefined,
    )

  router.put(
    "activityMarkNotificationsAsRead",
    "/notifications",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          activityMarkNotificationsAsReadBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with202() {
          return new KoaRuntimeResponse<{
            message?: string
          }>(202)
        },
        with205() {
          return new KoaRuntimeResponse<void>(205)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityMarkNotificationsAsRead(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityMarkNotificationsAsReadResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityGetThreadParamSchema = z.object({
    thread_id: z.coerce.number(),
  })

  const activityGetThreadResponseValidator = responseValidationFactory(
    [
      ["200", s_thread],
      ["304", z.void()],
      ["401", s_basic_error],
      ["403", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "activityGetThread",
    "/notifications/threads/:thread_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityGetThreadParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_thread>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityGetThread(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityGetThreadResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityMarkThreadAsReadParamSchema = z.object({
    thread_id: z.coerce.number(),
  })

  const activityMarkThreadAsReadResponseValidator = responseValidationFactory(
    [
      ["205", z.void()],
      ["304", z.void()],
      ["403", s_basic_error],
    ],
    undefined,
  )

  router.patch(
    "activityMarkThreadAsRead",
    "/notifications/threads/:thread_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityMarkThreadAsReadParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with205() {
          return new KoaRuntimeResponse<void>(205)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityMarkThreadAsRead(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityMarkThreadAsReadResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityGetThreadSubscriptionForAuthenticatedUserParamSchema = z.object(
    { thread_id: z.coerce.number() },
  )

  const activityGetThreadSubscriptionForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", s_thread_subscription],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "activityGetThreadSubscriptionForAuthenticatedUser",
    "/notifications/threads/:thread_id/subscription",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityGetThreadSubscriptionForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_thread_subscription>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityGetThreadSubscriptionForAuthenticatedUser(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        activityGetThreadSubscriptionForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const activitySetThreadSubscriptionParamSchema = z.object({
    thread_id: z.coerce.number(),
  })

  const activitySetThreadSubscriptionBodySchema = z
    .object({ ignored: z.coerce.boolean().optional() })
    .optional()

  const activitySetThreadSubscriptionResponseValidator =
    responseValidationFactory(
      [
        ["200", s_thread_subscription],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
      ],
      undefined,
    )

  router.put(
    "activitySetThreadSubscription",
    "/notifications/threads/:thread_id/subscription",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activitySetThreadSubscriptionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          activitySetThreadSubscriptionBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_thread_subscription>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activitySetThreadSubscription(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activitySetThreadSubscriptionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityDeleteThreadSubscriptionParamSchema = z.object({
    thread_id: z.coerce.number(),
  })

  const activityDeleteThreadSubscriptionResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "activityDeleteThreadSubscription",
    "/notifications/threads/:thread_id/subscription",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityDeleteThreadSubscriptionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityDeleteThreadSubscription(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityDeleteThreadSubscriptionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const metaGetOctocatQuerySchema = z.object({ s: z.string().optional() })

  const metaGetOctocatResponseValidator = responseValidationFactory(
    [["200", z.string()]],
    undefined,
  )

  router.get("metaGetOctocat", "/octocat", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        metaGetOctocatQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<string>(200)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .metaGetOctocat(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = metaGetOctocatResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const orgsListQuerySchema = z.object({
    since: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
  })

  const orgsListResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_organization_simple)],
      ["304", z.void()],
    ],
    undefined,
  )

  router.get("orgsList", "/organizations", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        orgsListQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_organization_simple[]>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .orgsList(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = orgsListResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const orgsGetParamSchema = z.object({ org: z.string() })

  const orgsGetResponseValidator = responseValidationFactory(
    [
      ["200", s_organization_full],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get("orgsGet", "/orgs/:org", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        orgsGetParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_organization_full>(200)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .orgsGet(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = orgsGetResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const orgsUpdateParamSchema = z.object({ org: z.string() })

  const orgsUpdateBodySchema = z
    .object({
      billing_email: z.string().optional(),
      company: z.string().optional(),
      email: z.string().optional(),
      twitter_username: z.string().optional(),
      location: z.string().optional(),
      name: z.string().optional(),
      description: z.string().optional(),
      has_organization_projects: z.coerce.boolean().optional(),
      has_repository_projects: z.coerce.boolean().optional(),
      default_repository_permission: z
        .enum(["read", "write", "admin", "none"])
        .optional(),
      members_can_create_repositories: z.coerce.boolean().optional(),
      members_can_create_internal_repositories: z.coerce.boolean().optional(),
      members_can_create_private_repositories: z.coerce.boolean().optional(),
      members_can_create_public_repositories: z.coerce.boolean().optional(),
      members_allowed_repository_creation_type: z
        .enum(["all", "private", "none"])
        .optional(),
      members_can_create_pages: z.coerce.boolean().optional(),
      members_can_create_public_pages: z.coerce.boolean().optional(),
      members_can_create_private_pages: z.coerce.boolean().optional(),
      members_can_fork_private_repositories: z.coerce.boolean().optional(),
      web_commit_signoff_required: z.coerce.boolean().optional(),
      blog: z.string().optional(),
      advanced_security_enabled_for_new_repositories: z.coerce
        .boolean()
        .optional(),
      dependabot_alerts_enabled_for_new_repositories: z.coerce
        .boolean()
        .optional(),
      dependabot_security_updates_enabled_for_new_repositories: z.coerce
        .boolean()
        .optional(),
      dependency_graph_enabled_for_new_repositories: z.coerce
        .boolean()
        .optional(),
      secret_scanning_enabled_for_new_repositories: z.coerce
        .boolean()
        .optional(),
      secret_scanning_push_protection_enabled_for_new_repositories: z.coerce
        .boolean()
        .optional(),
      secret_scanning_push_protection_custom_link_enabled: z.coerce
        .boolean()
        .optional(),
      secret_scanning_push_protection_custom_link: z.string().optional(),
    })
    .optional()

  const orgsUpdateResponseValidator = responseValidationFactory(
    [
      ["200", s_organization_full],
      ["409", s_basic_error],
      ["422", z.union([s_validation_error, s_validation_error_simple])],
    ],
    undefined,
  )

  router.patch("orgsUpdate", "/orgs/:org", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        orgsUpdateParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        orgsUpdateBodySchema,
        ctx.request.body,
        RequestInputType.RequestBody,
      ),
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_organization_full>(200)
      },
      with409() {
        return new KoaRuntimeResponse<t_basic_error>(409)
      },
      with422() {
        return new KoaRuntimeResponse<
          t_validation_error | t_validation_error_simple
        >(422)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .orgsUpdate(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = orgsUpdateResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const orgsDeleteParamSchema = z.object({ org: z.string() })

  const orgsDeleteResponseValidator = responseValidationFactory(
    [
      ["202", z.object({})],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.delete("orgsDelete", "/orgs/:org", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        orgsDeleteParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
    }

    const responder = {
      with202() {
        return new KoaRuntimeResponse<EmptyObject>(202)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .orgsDelete(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = orgsDeleteResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const actionsGetActionsCacheUsageForOrgParamSchema = z.object({
    org: z.string(),
  })

  const actionsGetActionsCacheUsageForOrgResponseValidator =
    responseValidationFactory(
      [["200", s_actions_cache_usage_org_enterprise]],
      undefined,
    )

  router.get(
    "actionsGetActionsCacheUsageForOrg",
    "/orgs/:org/actions/cache/usage",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetActionsCacheUsageForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_actions_cache_usage_org_enterprise>(
            200,
          )
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetActionsCacheUsageForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetActionsCacheUsageForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsGetActionsCacheUsageByRepoForOrgParamSchema = z.object({
    org: z.string(),
  })

  const actionsGetActionsCacheUsageByRepoForOrgQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const actionsGetActionsCacheUsageByRepoForOrgResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            repository_cache_usages: z.array(
              s_actions_cache_usage_by_repository,
            ),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "actionsGetActionsCacheUsageByRepoForOrg",
    "/orgs/:org/actions/cache/usage-by-repository",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetActionsCacheUsageByRepoForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsGetActionsCacheUsageByRepoForOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            repository_cache_usages: t_actions_cache_usage_by_repository[]
            total_count: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetActionsCacheUsageByRepoForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetActionsCacheUsageByRepoForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const oidcGetOidcCustomSubTemplateForOrgParamSchema = z.object({
    org: z.string(),
  })

  const oidcGetOidcCustomSubTemplateForOrgResponseValidator =
    responseValidationFactory([["200", s_oidc_custom_sub]], undefined)

  router.get(
    "oidcGetOidcCustomSubTemplateForOrg",
    "/orgs/:org/actions/oidc/customization/sub",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          oidcGetOidcCustomSubTemplateForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_oidc_custom_sub>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .oidcGetOidcCustomSubTemplateForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = oidcGetOidcCustomSubTemplateForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const oidcUpdateOidcCustomSubTemplateForOrgParamSchema = z.object({
    org: z.string(),
  })

  const oidcUpdateOidcCustomSubTemplateForOrgBodySchema = s_oidc_custom_sub

  const oidcUpdateOidcCustomSubTemplateForOrgResponseValidator =
    responseValidationFactory(
      [
        ["201", s_empty_object],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.put(
    "oidcUpdateOidcCustomSubTemplateForOrg",
    "/orgs/:org/actions/oidc/customization/sub",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          oidcUpdateOidcCustomSubTemplateForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          oidcUpdateOidcCustomSubTemplateForOrgBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_empty_object>(201)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .oidcUpdateOidcCustomSubTemplateForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = oidcUpdateOidcCustomSubTemplateForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsGetGithubActionsPermissionsOrganizationParamSchema = z.object({
    org: z.string(),
  })

  const actionsGetGithubActionsPermissionsOrganizationResponseValidator =
    responseValidationFactory(
      [["200", s_actions_organization_permissions]],
      undefined,
    )

  router.get(
    "actionsGetGithubActionsPermissionsOrganization",
    "/orgs/:org/actions/permissions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetGithubActionsPermissionsOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_actions_organization_permissions>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetGithubActionsPermissionsOrganization(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsGetGithubActionsPermissionsOrganizationResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsSetGithubActionsPermissionsOrganizationParamSchema = z.object({
    org: z.string(),
  })

  const actionsSetGithubActionsPermissionsOrganizationBodySchema = z.object({
    enabled_repositories: s_enabled_repositories,
    allowed_actions: s_allowed_actions.optional(),
  })

  const actionsSetGithubActionsPermissionsOrganizationResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.put(
    "actionsSetGithubActionsPermissionsOrganization",
    "/orgs/:org/actions/permissions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetGithubActionsPermissionsOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetGithubActionsPermissionsOrganizationBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsSetGithubActionsPermissionsOrganization(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsSetGithubActionsPermissionsOrganizationResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsListSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema =
    z.object({ org: z.string() })

  const actionsListSelectedRepositoriesEnabledGithubActionsOrganizationQuerySchema =
    z.object({
      per_page: z.coerce.number().optional(),
      page: z.coerce.number().optional(),
    })

  const actionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            repositories: z.array(s_repository),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "actionsListSelectedRepositoriesEnabledGithubActionsOrganization",
    "/orgs/:org/actions/permissions/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListSelectedRepositoriesEnabledGithubActionsOrganizationQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            repositories: t_repository[]
            total_count: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsListSelectedRepositoriesEnabledGithubActionsOrganization(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema =
    z.object({ org: z.string() })

  const actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationBodySchema =
    z.object({ selected_repository_ids: z.array(z.coerce.number()) })

  const actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.put(
    "actionsSetSelectedRepositoriesEnabledGithubActionsOrganization",
    "/orgs/:org/actions/permissions/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsSetSelectedRepositoriesEnabledGithubActionsOrganization(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsEnableSelectedRepositoryGithubActionsOrganizationParamSchema =
    z.object({ org: z.string(), repository_id: z.coerce.number() })

  const actionsEnableSelectedRepositoryGithubActionsOrganizationResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.put(
    "actionsEnableSelectedRepositoryGithubActionsOrganization",
    "/orgs/:org/actions/permissions/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsEnableSelectedRepositoryGithubActionsOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsEnableSelectedRepositoryGithubActionsOrganization(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsEnableSelectedRepositoryGithubActionsOrganizationResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsDisableSelectedRepositoryGithubActionsOrganizationParamSchema =
    z.object({ org: z.string(), repository_id: z.coerce.number() })

  const actionsDisableSelectedRepositoryGithubActionsOrganizationResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "actionsDisableSelectedRepositoryGithubActionsOrganization",
    "/orgs/:org/actions/permissions/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDisableSelectedRepositoryGithubActionsOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsDisableSelectedRepositoryGithubActionsOrganization(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsDisableSelectedRepositoryGithubActionsOrganizationResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsGetAllowedActionsOrganizationParamSchema = z.object({
    org: z.string(),
  })

  const actionsGetAllowedActionsOrganizationResponseValidator =
    responseValidationFactory([["200", s_selected_actions]], undefined)

  router.get(
    "actionsGetAllowedActionsOrganization",
    "/orgs/:org/actions/permissions/selected-actions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetAllowedActionsOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_selected_actions>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetAllowedActionsOrganization(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetAllowedActionsOrganizationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsSetAllowedActionsOrganizationParamSchema = z.object({
    org: z.string(),
  })

  const actionsSetAllowedActionsOrganizationBodySchema =
    s_selected_actions.optional()

  const actionsSetAllowedActionsOrganizationResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.put(
    "actionsSetAllowedActionsOrganization",
    "/orgs/:org/actions/permissions/selected-actions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetAllowedActionsOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetAllowedActionsOrganizationBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsSetAllowedActionsOrganization(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsSetAllowedActionsOrganizationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema =
    z.object({ org: z.string() })

  const actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationResponseValidator =
    responseValidationFactory(
      [["200", s_actions_get_default_workflow_permissions]],
      undefined,
    )

  router.get(
    "actionsGetGithubActionsDefaultWorkflowPermissionsOrganization",
    "/orgs/:org/actions/permissions/workflow",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_actions_get_default_workflow_permissions>(
            200,
          )
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetGithubActionsDefaultWorkflowPermissionsOrganization(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema =
    z.object({ org: z.string() })

  const actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationBodySchema =
    s_actions_set_default_workflow_permissions.optional()

  const actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.put(
    "actionsSetGithubActionsDefaultWorkflowPermissionsOrganization",
    "/orgs/:org/actions/permissions/workflow",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsSetGithubActionsDefaultWorkflowPermissionsOrganization(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsListSelfHostedRunnersForOrgParamSchema = z.object({
    org: z.string(),
  })

  const actionsListSelfHostedRunnersForOrgQuerySchema = z.object({
    name: z.string().optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const actionsListSelfHostedRunnersForOrgResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            runners: z.array(s_runner),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "actionsListSelfHostedRunnersForOrg",
    "/orgs/:org/actions/runners",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListSelfHostedRunnersForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListSelfHostedRunnersForOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            runners: t_runner[]
            total_count: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsListSelfHostedRunnersForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListSelfHostedRunnersForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsListRunnerApplicationsForOrgParamSchema = z.object({
    org: z.string(),
  })

  const actionsListRunnerApplicationsForOrgResponseValidator =
    responseValidationFactory(
      [["200", z.array(s_runner_application)]],
      undefined,
    )

  router.get(
    "actionsListRunnerApplicationsForOrg",
    "/orgs/:org/actions/runners/downloads",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListRunnerApplicationsForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_runner_application[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsListRunnerApplicationsForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListRunnerApplicationsForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsGenerateRunnerJitconfigForOrgParamSchema = z.object({
    org: z.string(),
  })

  const actionsGenerateRunnerJitconfigForOrgBodySchema = z.object({
    name: z.string(),
    runner_group_id: z.coerce.number(),
    labels: z.array(z.string()),
    work_folder: z.string().optional(),
  })

  const actionsGenerateRunnerJitconfigForOrgResponseValidator =
    responseValidationFactory(
      [
        ["201", z.object({ runner: s_runner, encoded_jit_config: z.string() })],
        ["404", s_basic_error],
        ["422", s_validation_error_simple],
      ],
      undefined,
    )

  router.post(
    "actionsGenerateRunnerJitconfigForOrg",
    "/orgs/:org/actions/runners/generate-jitconfig",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGenerateRunnerJitconfigForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsGenerateRunnerJitconfigForOrgBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<{
            encoded_jit_config: string
            runner: t_runner
          }>(201)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGenerateRunnerJitconfigForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGenerateRunnerJitconfigForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsCreateRegistrationTokenForOrgParamSchema = z.object({
    org: z.string(),
  })

  const actionsCreateRegistrationTokenForOrgResponseValidator =
    responseValidationFactory([["201", s_authentication_token]], undefined)

  router.post(
    "actionsCreateRegistrationTokenForOrg",
    "/orgs/:org/actions/runners/registration-token",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCreateRegistrationTokenForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_authentication_token>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsCreateRegistrationTokenForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCreateRegistrationTokenForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsCreateRemoveTokenForOrgParamSchema = z.object({
    org: z.string(),
  })

  const actionsCreateRemoveTokenForOrgResponseValidator =
    responseValidationFactory([["201", s_authentication_token]], undefined)

  router.post(
    "actionsCreateRemoveTokenForOrg",
    "/orgs/:org/actions/runners/remove-token",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCreateRemoveTokenForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_authentication_token>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsCreateRemoveTokenForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCreateRemoveTokenForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetSelfHostedRunnerForOrgParamSchema = z.object({
    org: z.string(),
    runner_id: z.coerce.number(),
  })

  const actionsGetSelfHostedRunnerForOrgResponseValidator =
    responseValidationFactory([["200", s_runner]], undefined)

  router.get(
    "actionsGetSelfHostedRunnerForOrg",
    "/orgs/:org/actions/runners/:runner_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetSelfHostedRunnerForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_runner>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetSelfHostedRunnerForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetSelfHostedRunnerForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteSelfHostedRunnerFromOrgParamSchema = z.object({
    org: z.string(),
    runner_id: z.coerce.number(),
  })

  const actionsDeleteSelfHostedRunnerFromOrgResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "actionsDeleteSelfHostedRunnerFromOrg",
    "/orgs/:org/actions/runners/:runner_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteSelfHostedRunnerFromOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsDeleteSelfHostedRunnerFromOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteSelfHostedRunnerFromOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsListLabelsForSelfHostedRunnerForOrgParamSchema = z.object({
    org: z.string(),
    runner_id: z.coerce.number(),
  })

  const actionsListLabelsForSelfHostedRunnerForOrgResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            labels: z.array(s_runner_label),
          }),
        ],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "actionsListLabelsForSelfHostedRunnerForOrg",
    "/orgs/:org/actions/runners/:runner_id/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListLabelsForSelfHostedRunnerForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            labels: t_runner_label[]
            total_count: number
          }>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsListLabelsForSelfHostedRunnerForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListLabelsForSelfHostedRunnerForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsAddCustomLabelsToSelfHostedRunnerForOrgParamSchema = z.object({
    org: z.string(),
    runner_id: z.coerce.number(),
  })

  const actionsAddCustomLabelsToSelfHostedRunnerForOrgBodySchema = z.object({
    labels: z.array(z.string()),
  })

  const actionsAddCustomLabelsToSelfHostedRunnerForOrgResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            labels: z.array(s_runner_label),
          }),
        ],
        ["404", s_basic_error],
        ["422", s_validation_error_simple],
      ],
      undefined,
    )

  router.post(
    "actionsAddCustomLabelsToSelfHostedRunnerForOrg",
    "/orgs/:org/actions/runners/:runner_id/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsAddCustomLabelsToSelfHostedRunnerForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsAddCustomLabelsToSelfHostedRunnerForOrgBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            labels: t_runner_label[]
            total_count: number
          }>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsAddCustomLabelsToSelfHostedRunnerForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsAddCustomLabelsToSelfHostedRunnerForOrgResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsSetCustomLabelsForSelfHostedRunnerForOrgParamSchema = z.object({
    org: z.string(),
    runner_id: z.coerce.number(),
  })

  const actionsSetCustomLabelsForSelfHostedRunnerForOrgBodySchema = z.object({
    labels: z.array(z.string()),
  })

  const actionsSetCustomLabelsForSelfHostedRunnerForOrgResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            labels: z.array(s_runner_label),
          }),
        ],
        ["404", s_basic_error],
        ["422", s_validation_error_simple],
      ],
      undefined,
    )

  router.put(
    "actionsSetCustomLabelsForSelfHostedRunnerForOrg",
    "/orgs/:org/actions/runners/:runner_id/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetCustomLabelsForSelfHostedRunnerForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetCustomLabelsForSelfHostedRunnerForOrgBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            labels: t_runner_label[]
            total_count: number
          }>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsSetCustomLabelsForSelfHostedRunnerForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsSetCustomLabelsForSelfHostedRunnerForOrgResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgParamSchema =
    z.object({ org: z.string(), runner_id: z.coerce.number() })

  const actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            labels: z.array(s_runner_label),
          }),
        ],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg",
    "/orgs/:org/actions/runners/:runner_id/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            labels: t_runner_label[]
            total_count: number
          }>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsRemoveCustomLabelFromSelfHostedRunnerForOrgParamSchema =
    z.object({
      org: z.string(),
      runner_id: z.coerce.number(),
      name: z.string(),
    })

  const actionsRemoveCustomLabelFromSelfHostedRunnerForOrgResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            labels: z.array(s_runner_label),
          }),
        ],
        ["404", s_basic_error],
        ["422", s_validation_error_simple],
      ],
      undefined,
    )

  router.delete(
    "actionsRemoveCustomLabelFromSelfHostedRunnerForOrg",
    "/orgs/:org/actions/runners/:runner_id/labels/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsRemoveCustomLabelFromSelfHostedRunnerForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            labels: t_runner_label[]
            total_count: number
          }>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsRemoveCustomLabelFromSelfHostedRunnerForOrg(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsRemoveCustomLabelFromSelfHostedRunnerForOrgResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsListOrgSecretsParamSchema = z.object({ org: z.string() })

  const actionsListOrgSecretsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const actionsListOrgSecretsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          secrets: z.array(s_organization_actions_secret),
        }),
      ],
    ],
    undefined,
  )

  router.get(
    "actionsListOrgSecrets",
    "/orgs/:org/actions/secrets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListOrgSecretsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListOrgSecretsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            secrets: t_organization_actions_secret[]
            total_count: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsListOrgSecrets(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListOrgSecretsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetOrgPublicKeyParamSchema = z.object({ org: z.string() })

  const actionsGetOrgPublicKeyResponseValidator = responseValidationFactory(
    [["200", s_actions_public_key]],
    undefined,
  )

  router.get(
    "actionsGetOrgPublicKey",
    "/orgs/:org/actions/secrets/public-key",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetOrgPublicKeyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_actions_public_key>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetOrgPublicKey(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetOrgPublicKeyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const actionsGetOrgSecretResponseValidator = responseValidationFactory(
    [["200", s_organization_actions_secret]],
    undefined,
  )

  router.get(
    "actionsGetOrgSecret",
    "/orgs/:org/actions/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_organization_actions_secret>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetOrgSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetOrgSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsCreateOrUpdateOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const actionsCreateOrUpdateOrgSecretBodySchema = z.object({
    encrypted_value: z.string().optional(),
    key_id: z.string().optional(),
    visibility: z.enum(["all", "private", "selected"]),
    selected_repository_ids: z.array(z.coerce.number()).optional(),
  })

  const actionsCreateOrUpdateOrgSecretResponseValidator =
    responseValidationFactory(
      [
        ["201", s_empty_object],
        ["204", z.void()],
      ],
      undefined,
    )

  router.put(
    "actionsCreateOrUpdateOrgSecret",
    "/orgs/:org/actions/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCreateOrUpdateOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsCreateOrUpdateOrgSecretBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_empty_object>(201)
        },
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsCreateOrUpdateOrgSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCreateOrUpdateOrgSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const actionsDeleteOrgSecretResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.delete(
    "actionsDeleteOrgSecret",
    "/orgs/:org/actions/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsDeleteOrgSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteOrgSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsListSelectedReposForOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const actionsListSelectedReposForOrgSecretQuerySchema = z.object({
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
  })

  const actionsListSelectedReposForOrgSecretResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            repositories: z.array(s_minimal_repository),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "actionsListSelectedReposForOrgSecret",
    "/orgs/:org/actions/secrets/:secret_name/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListSelectedReposForOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListSelectedReposForOrgSecretQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            repositories: t_minimal_repository[]
            total_count: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsListSelectedReposForOrgSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListSelectedReposForOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsSetSelectedReposForOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const actionsSetSelectedReposForOrgSecretBodySchema = z.object({
    selected_repository_ids: z.array(z.coerce.number()),
  })

  const actionsSetSelectedReposForOrgSecretResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.put(
    "actionsSetSelectedReposForOrgSecret",
    "/orgs/:org/actions/secrets/:secret_name/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetSelectedReposForOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetSelectedReposForOrgSecretBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsSetSelectedReposForOrgSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsSetSelectedReposForOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsAddSelectedRepoToOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
    repository_id: z.coerce.number(),
  })

  const actionsAddSelectedRepoToOrgSecretResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["409", z.void()],
      ],
      undefined,
    )

  router.put(
    "actionsAddSelectedRepoToOrgSecret",
    "/orgs/:org/actions/secrets/:secret_name/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsAddSelectedRepoToOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with409() {
          return new KoaRuntimeResponse<void>(409)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsAddSelectedRepoToOrgSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsAddSelectedRepoToOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsRemoveSelectedRepoFromOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
    repository_id: z.coerce.number(),
  })

  const actionsRemoveSelectedRepoFromOrgSecretResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["409", z.void()],
      ],
      undefined,
    )

  router.delete(
    "actionsRemoveSelectedRepoFromOrgSecret",
    "/orgs/:org/actions/secrets/:secret_name/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsRemoveSelectedRepoFromOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with409() {
          return new KoaRuntimeResponse<void>(409)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsRemoveSelectedRepoFromOrgSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsRemoveSelectedRepoFromOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsListOrgVariablesParamSchema = z.object({ org: z.string() })

  const actionsListOrgVariablesQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const actionsListOrgVariablesResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          variables: z.array(s_organization_actions_variable),
        }),
      ],
    ],
    undefined,
  )

  router.get(
    "actionsListOrgVariables",
    "/orgs/:org/actions/variables",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListOrgVariablesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListOrgVariablesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            total_count: number
            variables: t_organization_actions_variable[]
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsListOrgVariables(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListOrgVariablesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsCreateOrgVariableParamSchema = z.object({ org: z.string() })

  const actionsCreateOrgVariableBodySchema = z.object({
    name: z.string(),
    value: z.string(),
    visibility: z.enum(["all", "private", "selected"]),
    selected_repository_ids: z.array(z.coerce.number()).optional(),
  })

  const actionsCreateOrgVariableResponseValidator = responseValidationFactory(
    [["201", s_empty_object]],
    undefined,
  )

  router.post(
    "actionsCreateOrgVariable",
    "/orgs/:org/actions/variables",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCreateOrgVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsCreateOrgVariableBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_empty_object>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsCreateOrgVariable(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCreateOrgVariableResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetOrgVariableParamSchema = z.object({
    org: z.string(),
    name: z.string(),
  })

  const actionsGetOrgVariableResponseValidator = responseValidationFactory(
    [["200", s_organization_actions_variable]],
    undefined,
  )

  router.get(
    "actionsGetOrgVariable",
    "/orgs/:org/actions/variables/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetOrgVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_organization_actions_variable>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetOrgVariable(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetOrgVariableResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsUpdateOrgVariableParamSchema = z.object({
    org: z.string(),
    name: z.string(),
  })

  const actionsUpdateOrgVariableBodySchema = z.object({
    name: z.string().optional(),
    value: z.string().optional(),
    visibility: z.enum(["all", "private", "selected"]).optional(),
    selected_repository_ids: z.array(z.coerce.number()).optional(),
  })

  const actionsUpdateOrgVariableResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.patch(
    "actionsUpdateOrgVariable",
    "/orgs/:org/actions/variables/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsUpdateOrgVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsUpdateOrgVariableBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsUpdateOrgVariable(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsUpdateOrgVariableResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteOrgVariableParamSchema = z.object({
    org: z.string(),
    name: z.string(),
  })

  const actionsDeleteOrgVariableResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.delete(
    "actionsDeleteOrgVariable",
    "/orgs/:org/actions/variables/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteOrgVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsDeleteOrgVariable(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteOrgVariableResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsListSelectedReposForOrgVariableParamSchema = z.object({
    org: z.string(),
    name: z.string(),
  })

  const actionsListSelectedReposForOrgVariableQuerySchema = z.object({
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
  })

  const actionsListSelectedReposForOrgVariableResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            repositories: z.array(s_minimal_repository),
          }),
        ],
        ["409", z.void()],
      ],
      undefined,
    )

  router.get(
    "actionsListSelectedReposForOrgVariable",
    "/orgs/:org/actions/variables/:name/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListSelectedReposForOrgVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListSelectedReposForOrgVariableQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            repositories: t_minimal_repository[]
            total_count: number
          }>(200)
        },
        with409() {
          return new KoaRuntimeResponse<void>(409)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsListSelectedReposForOrgVariable(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListSelectedReposForOrgVariableResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsSetSelectedReposForOrgVariableParamSchema = z.object({
    org: z.string(),
    name: z.string(),
  })

  const actionsSetSelectedReposForOrgVariableBodySchema = z.object({
    selected_repository_ids: z.array(z.coerce.number()),
  })

  const actionsSetSelectedReposForOrgVariableResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["409", z.void()],
      ],
      undefined,
    )

  router.put(
    "actionsSetSelectedReposForOrgVariable",
    "/orgs/:org/actions/variables/:name/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetSelectedReposForOrgVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetSelectedReposForOrgVariableBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with409() {
          return new KoaRuntimeResponse<void>(409)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsSetSelectedReposForOrgVariable(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsSetSelectedReposForOrgVariableResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsAddSelectedRepoToOrgVariableParamSchema = z.object({
    org: z.string(),
    name: z.string(),
    repository_id: z.coerce.number(),
  })

  const actionsAddSelectedRepoToOrgVariableResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["409", z.void()],
      ],
      undefined,
    )

  router.put(
    "actionsAddSelectedRepoToOrgVariable",
    "/orgs/:org/actions/variables/:name/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsAddSelectedRepoToOrgVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with409() {
          return new KoaRuntimeResponse<void>(409)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsAddSelectedRepoToOrgVariable(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsAddSelectedRepoToOrgVariableResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsRemoveSelectedRepoFromOrgVariableParamSchema = z.object({
    org: z.string(),
    name: z.string(),
    repository_id: z.coerce.number(),
  })

  const actionsRemoveSelectedRepoFromOrgVariableResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["409", z.void()],
      ],
      undefined,
    )

  router.delete(
    "actionsRemoveSelectedRepoFromOrgVariable",
    "/orgs/:org/actions/variables/:name/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsRemoveSelectedRepoFromOrgVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with409() {
          return new KoaRuntimeResponse<void>(409)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsRemoveSelectedRepoFromOrgVariable(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsRemoveSelectedRepoFromOrgVariableResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsListBlockedUsersParamSchema = z.object({ org: z.string() })

  const orgsListBlockedUsersQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const orgsListBlockedUsersResponseValidator = responseValidationFactory(
    [["200", z.array(s_simple_user)]],
    undefined,
  )

  router.get("orgsListBlockedUsers", "/orgs/:org/blocks", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        orgsListBlockedUsersParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: parseRequestInput(
        orgsListBlockedUsersQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_simple_user[]>(200)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .orgsListBlockedUsers(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = orgsListBlockedUsersResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const orgsCheckBlockedUserParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  const orgsCheckBlockedUserResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "orgsCheckBlockedUser",
    "/orgs/:org/blocks/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsCheckBlockedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsCheckBlockedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsCheckBlockedUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsBlockUserParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  const orgsBlockUserResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.put(
    "orgsBlockUser",
    "/orgs/:org/blocks/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsBlockUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsBlockUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsBlockUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsUnblockUserParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  const orgsUnblockUserResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.delete(
    "orgsUnblockUser",
    "/orgs/:org/blocks/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsUnblockUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsUnblockUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsUnblockUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningListAlertsForOrgParamSchema = z.object({ org: z.string() })

  const codeScanningListAlertsForOrgQuerySchema = z.object({
    tool_name: s_code_scanning_analysis_tool_name.optional(),
    tool_guid: s_code_scanning_analysis_tool_guid.optional(),
    before: z.string().optional(),
    after: z.string().optional(),
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    state: s_code_scanning_alert_state_query.optional(),
    sort: z.enum(["created", "updated"]).optional(),
    severity: s_code_scanning_alert_severity.optional(),
  })

  const codeScanningListAlertsForOrgResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_code_scanning_organization_alert_items)],
        ["404", s_basic_error],
        [
          "503",
          z.object({
            code: z.string().optional(),
            message: z.string().optional(),
            documentation_url: z.string().optional(),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "codeScanningListAlertsForOrg",
    "/orgs/:org/code-scanning/alerts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningListAlertsForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codeScanningListAlertsForOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<
            t_code_scanning_organization_alert_items[]
          >(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codeScanningListAlertsForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningListAlertsForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesListInOrganizationParamSchema = z.object({ org: z.string() })

  const codespacesListInOrganizationQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const codespacesListInOrganizationResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            codespaces: z.array(s_codespace),
          }),
        ],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "codespacesListInOrganization",
    "/orgs/:org/codespaces",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesListInOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codespacesListInOrganizationQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            codespaces: t_codespace[]
            total_count: number
          }>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesListInOrganization(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesListInOrganizationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesSetCodespacesAccessParamSchema = z.object({ org: z.string() })

  const codespacesSetCodespacesAccessBodySchema = z.object({
    visibility: z.enum([
      "disabled",
      "selected_members",
      "all_members",
      "all_members_and_outside_collaborators",
    ]),
    selected_usernames: z.array(z.string()).optional(),
  })

  const codespacesSetCodespacesAccessResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["304", z.void()],
        ["400", z.void()],
        ["404", s_basic_error],
        ["422", s_validation_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.put(
    "codespacesSetCodespacesAccess",
    "/orgs/:org/codespaces/access",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesSetCodespacesAccessParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codespacesSetCodespacesAccessBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with400() {
          return new KoaRuntimeResponse<void>(400)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesSetCodespacesAccess(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesSetCodespacesAccessResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesSetCodespacesAccessUsersParamSchema = z.object({
    org: z.string(),
  })

  const codespacesSetCodespacesAccessUsersBodySchema = z.object({
    selected_usernames: z.array(z.string()),
  })

  const codespacesSetCodespacesAccessUsersResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["304", z.void()],
        ["400", z.void()],
        ["404", s_basic_error],
        ["422", s_validation_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.post(
    "codespacesSetCodespacesAccessUsers",
    "/orgs/:org/codespaces/access/selected_users",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesSetCodespacesAccessUsersParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codespacesSetCodespacesAccessUsersBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with400() {
          return new KoaRuntimeResponse<void>(400)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesSetCodespacesAccessUsers(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesSetCodespacesAccessUsersResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesDeleteCodespacesAccessUsersParamSchema = z.object({
    org: z.string(),
  })

  const codespacesDeleteCodespacesAccessUsersBodySchema = z.object({
    selected_usernames: z.array(z.string()),
  })

  const codespacesDeleteCodespacesAccessUsersResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["304", z.void()],
        ["400", z.void()],
        ["404", s_basic_error],
        ["422", s_validation_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "codespacesDeleteCodespacesAccessUsers",
    "/orgs/:org/codespaces/access/selected_users",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesDeleteCodespacesAccessUsersParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codespacesDeleteCodespacesAccessUsersBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with400() {
          return new KoaRuntimeResponse<void>(400)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesDeleteCodespacesAccessUsers(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesDeleteCodespacesAccessUsersResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesListOrgSecretsParamSchema = z.object({ org: z.string() })

  const codespacesListOrgSecretsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const codespacesListOrgSecretsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          secrets: z.array(s_codespaces_org_secret),
        }),
      ],
    ],
    undefined,
  )

  router.get(
    "codespacesListOrgSecrets",
    "/orgs/:org/codespaces/secrets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesListOrgSecretsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codespacesListOrgSecretsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            secrets: t_codespaces_org_secret[]
            total_count: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesListOrgSecrets(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesListOrgSecretsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesGetOrgPublicKeyParamSchema = z.object({ org: z.string() })

  const codespacesGetOrgPublicKeyResponseValidator = responseValidationFactory(
    [["200", s_codespaces_public_key]],
    undefined,
  )

  router.get(
    "codespacesGetOrgPublicKey",
    "/orgs/:org/codespaces/secrets/public-key",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesGetOrgPublicKeyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_codespaces_public_key>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesGetOrgPublicKey(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesGetOrgPublicKeyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesGetOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const codespacesGetOrgSecretResponseValidator = responseValidationFactory(
    [["200", s_codespaces_org_secret]],
    undefined,
  )

  router.get(
    "codespacesGetOrgSecret",
    "/orgs/:org/codespaces/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesGetOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_codespaces_org_secret>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesGetOrgSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesGetOrgSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesCreateOrUpdateOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const codespacesCreateOrUpdateOrgSecretBodySchema = z.object({
    encrypted_value: z.string().optional(),
    key_id: z.string().optional(),
    visibility: z.enum(["all", "private", "selected"]),
    selected_repository_ids: z.array(z.coerce.number()).optional(),
  })

  const codespacesCreateOrUpdateOrgSecretResponseValidator =
    responseValidationFactory(
      [
        ["201", s_empty_object],
        ["204", z.void()],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.put(
    "codespacesCreateOrUpdateOrgSecret",
    "/orgs/:org/codespaces/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesCreateOrUpdateOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codespacesCreateOrUpdateOrgSecretBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_empty_object>(201)
        },
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesCreateOrUpdateOrgSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesCreateOrUpdateOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesDeleteOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const codespacesDeleteOrgSecretResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.delete(
    "codespacesDeleteOrgSecret",
    "/orgs/:org/codespaces/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesDeleteOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesDeleteOrgSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesDeleteOrgSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesListSelectedReposForOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const codespacesListSelectedReposForOrgSecretQuerySchema = z.object({
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
  })

  const codespacesListSelectedReposForOrgSecretResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            repositories: z.array(s_minimal_repository),
          }),
        ],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "codespacesListSelectedReposForOrgSecret",
    "/orgs/:org/codespaces/secrets/:secret_name/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesListSelectedReposForOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codespacesListSelectedReposForOrgSecretQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            repositories: t_minimal_repository[]
            total_count: number
          }>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesListSelectedReposForOrgSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesListSelectedReposForOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesSetSelectedReposForOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const codespacesSetSelectedReposForOrgSecretBodySchema = z.object({
    selected_repository_ids: z.array(z.coerce.number()),
  })

  const codespacesSetSelectedReposForOrgSecretResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["404", s_basic_error],
        ["409", z.void()],
      ],
      undefined,
    )

  router.put(
    "codespacesSetSelectedReposForOrgSecret",
    "/orgs/:org/codespaces/secrets/:secret_name/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesSetSelectedReposForOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codespacesSetSelectedReposForOrgSecretBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with409() {
          return new KoaRuntimeResponse<void>(409)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesSetSelectedReposForOrgSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesSetSelectedReposForOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesAddSelectedRepoToOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
    repository_id: z.coerce.number(),
  })

  const codespacesAddSelectedRepoToOrgSecretResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["404", s_basic_error],
        ["409", z.void()],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.put(
    "codespacesAddSelectedRepoToOrgSecret",
    "/orgs/:org/codespaces/secrets/:secret_name/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesAddSelectedRepoToOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with409() {
          return new KoaRuntimeResponse<void>(409)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesAddSelectedRepoToOrgSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesAddSelectedRepoToOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesRemoveSelectedRepoFromOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
    repository_id: z.coerce.number(),
  })

  const codespacesRemoveSelectedRepoFromOrgSecretResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["404", s_basic_error],
        ["409", z.void()],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.delete(
    "codespacesRemoveSelectedRepoFromOrgSecret",
    "/orgs/:org/codespaces/secrets/:secret_name/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesRemoveSelectedRepoFromOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with409() {
          return new KoaRuntimeResponse<void>(409)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesRemoveSelectedRepoFromOrgSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesRemoveSelectedRepoFromOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const copilotGetCopilotOrganizationDetailsParamSchema = z.object({
    org: z.string(),
  })

  const copilotGetCopilotOrganizationDetailsResponseValidator =
    responseValidationFactory(
      [
        ["200", s_copilot_organization_details],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "copilotGetCopilotOrganizationDetails",
    "/orgs/:org/copilot/billing",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          copilotGetCopilotOrganizationDetailsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_copilot_organization_details>(200)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .copilotGetCopilotOrganizationDetails(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = copilotGetCopilotOrganizationDetailsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const copilotListCopilotSeatsParamSchema = z.object({ org: z.string() })

  const copilotListCopilotSeatsQuerySchema = z.object({
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
  })

  const copilotListCopilotSeatsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_seats: z.coerce.number().optional(),
          seats: z.array(s_copilot_seat_details).optional(),
        }),
      ],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "copilotListCopilotSeats",
    "/orgs/:org/copilot/billing/seats",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          copilotListCopilotSeatsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          copilotListCopilotSeatsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            seats?: t_copilot_seat_details[]
            total_seats?: number
          }>(200)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .copilotListCopilotSeats(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = copilotListCopilotSeatsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const copilotAddCopilotForBusinessSeatsForTeamsParamSchema = z.object({
    org: z.string(),
  })

  const copilotAddCopilotForBusinessSeatsForTeamsBodySchema = z.object({
    selected_teams: z.array(z.string()),
  })

  const copilotAddCopilotForBusinessSeatsForTeamsResponseValidator =
    responseValidationFactory(
      [
        ["201", z.object({ seats_created: z.coerce.number() })],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", z.void()],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.post(
    "copilotAddCopilotForBusinessSeatsForTeams",
    "/orgs/:org/copilot/billing/selected_teams",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          copilotAddCopilotForBusinessSeatsForTeamsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          copilotAddCopilotForBusinessSeatsForTeamsBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<{
            seats_created: number
          }>(201)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<void>(422)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .copilotAddCopilotForBusinessSeatsForTeams(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = copilotAddCopilotForBusinessSeatsForTeamsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const copilotCancelCopilotSeatAssignmentForTeamsParamSchema = z.object({
    org: z.string(),
  })

  const copilotCancelCopilotSeatAssignmentForTeamsBodySchema = z.object({
    selected_teams: z.array(z.string()),
  })

  const copilotCancelCopilotSeatAssignmentForTeamsResponseValidator =
    responseValidationFactory(
      [
        ["200", z.object({ seats_cancelled: z.coerce.number() })],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", z.void()],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "copilotCancelCopilotSeatAssignmentForTeams",
    "/orgs/:org/copilot/billing/selected_teams",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          copilotCancelCopilotSeatAssignmentForTeamsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          copilotCancelCopilotSeatAssignmentForTeamsBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            seats_cancelled: number
          }>(200)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<void>(422)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .copilotCancelCopilotSeatAssignmentForTeams(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = copilotCancelCopilotSeatAssignmentForTeamsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const copilotAddCopilotForBusinessSeatsForUsersParamSchema = z.object({
    org: z.string(),
  })

  const copilotAddCopilotForBusinessSeatsForUsersBodySchema = z.object({
    selected_usernames: z.array(z.string()),
  })

  const copilotAddCopilotForBusinessSeatsForUsersResponseValidator =
    responseValidationFactory(
      [
        ["201", z.object({ seats_created: z.coerce.number() })],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", z.void()],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.post(
    "copilotAddCopilotForBusinessSeatsForUsers",
    "/orgs/:org/copilot/billing/selected_users",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          copilotAddCopilotForBusinessSeatsForUsersParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          copilotAddCopilotForBusinessSeatsForUsersBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<{
            seats_created: number
          }>(201)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<void>(422)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .copilotAddCopilotForBusinessSeatsForUsers(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = copilotAddCopilotForBusinessSeatsForUsersResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const copilotCancelCopilotSeatAssignmentForUsersParamSchema = z.object({
    org: z.string(),
  })

  const copilotCancelCopilotSeatAssignmentForUsersBodySchema = z.object({
    selected_usernames: z.array(z.string()),
  })

  const copilotCancelCopilotSeatAssignmentForUsersResponseValidator =
    responseValidationFactory(
      [
        ["200", z.object({ seats_cancelled: z.coerce.number() })],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", z.void()],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "copilotCancelCopilotSeatAssignmentForUsers",
    "/orgs/:org/copilot/billing/selected_users",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          copilotCancelCopilotSeatAssignmentForUsersParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          copilotCancelCopilotSeatAssignmentForUsersBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            seats_cancelled: number
          }>(200)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<void>(422)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .copilotCancelCopilotSeatAssignmentForUsers(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = copilotCancelCopilotSeatAssignmentForUsersResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const dependabotListAlertsForOrgParamSchema = z.object({ org: z.string() })

  const dependabotListAlertsForOrgQuerySchema = z.object({
    state: z.string().optional(),
    severity: z.string().optional(),
    ecosystem: z.string().optional(),
    package: z.string().optional(),
    scope: z.enum(["development", "runtime"]).optional(),
    sort: z.enum(["created", "updated"]).optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    before: z.string().optional(),
    after: z.string().optional(),
    first: z.coerce.number().optional(),
    last: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
  })

  const dependabotListAlertsForOrgResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_dependabot_alert_with_repository)],
      ["304", z.void()],
      ["400", s_scim_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

  router.get(
    "dependabotListAlertsForOrg",
    "/orgs/:org/dependabot/alerts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotListAlertsForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          dependabotListAlertsForOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_dependabot_alert_with_repository[]>(
            200,
          )
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .dependabotListAlertsForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotListAlertsForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependabotListOrgSecretsParamSchema = z.object({ org: z.string() })

  const dependabotListOrgSecretsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const dependabotListOrgSecretsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          secrets: z.array(s_organization_dependabot_secret),
        }),
      ],
    ],
    undefined,
  )

  router.get(
    "dependabotListOrgSecrets",
    "/orgs/:org/dependabot/secrets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotListOrgSecretsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          dependabotListOrgSecretsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            secrets: t_organization_dependabot_secret[]
            total_count: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .dependabotListOrgSecrets(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotListOrgSecretsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependabotGetOrgPublicKeyParamSchema = z.object({ org: z.string() })

  const dependabotGetOrgPublicKeyResponseValidator = responseValidationFactory(
    [["200", s_dependabot_public_key]],
    undefined,
  )

  router.get(
    "dependabotGetOrgPublicKey",
    "/orgs/:org/dependabot/secrets/public-key",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotGetOrgPublicKeyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_dependabot_public_key>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .dependabotGetOrgPublicKey(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotGetOrgPublicKeyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependabotGetOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const dependabotGetOrgSecretResponseValidator = responseValidationFactory(
    [["200", s_organization_dependabot_secret]],
    undefined,
  )

  router.get(
    "dependabotGetOrgSecret",
    "/orgs/:org/dependabot/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotGetOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_organization_dependabot_secret>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .dependabotGetOrgSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotGetOrgSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependabotCreateOrUpdateOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const dependabotCreateOrUpdateOrgSecretBodySchema = z.object({
    encrypted_value: z.string().optional(),
    key_id: z.string().optional(),
    visibility: z.enum(["all", "private", "selected"]),
    selected_repository_ids: z.array(z.string()).optional(),
  })

  const dependabotCreateOrUpdateOrgSecretResponseValidator =
    responseValidationFactory(
      [
        ["201", s_empty_object],
        ["204", z.void()],
      ],
      undefined,
    )

  router.put(
    "dependabotCreateOrUpdateOrgSecret",
    "/orgs/:org/dependabot/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotCreateOrUpdateOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          dependabotCreateOrUpdateOrgSecretBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_empty_object>(201)
        },
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .dependabotCreateOrUpdateOrgSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotCreateOrUpdateOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const dependabotDeleteOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const dependabotDeleteOrgSecretResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.delete(
    "dependabotDeleteOrgSecret",
    "/orgs/:org/dependabot/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotDeleteOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .dependabotDeleteOrgSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotDeleteOrgSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependabotListSelectedReposForOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const dependabotListSelectedReposForOrgSecretQuerySchema = z.object({
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
  })

  const dependabotListSelectedReposForOrgSecretResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            repositories: z.array(s_minimal_repository),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "dependabotListSelectedReposForOrgSecret",
    "/orgs/:org/dependabot/secrets/:secret_name/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotListSelectedReposForOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          dependabotListSelectedReposForOrgSecretQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            repositories: t_minimal_repository[]
            total_count: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .dependabotListSelectedReposForOrgSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotListSelectedReposForOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const dependabotSetSelectedReposForOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
  })

  const dependabotSetSelectedReposForOrgSecretBodySchema = z.object({
    selected_repository_ids: z.array(z.coerce.number()),
  })

  const dependabotSetSelectedReposForOrgSecretResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.put(
    "dependabotSetSelectedReposForOrgSecret",
    "/orgs/:org/dependabot/secrets/:secret_name/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotSetSelectedReposForOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          dependabotSetSelectedReposForOrgSecretBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .dependabotSetSelectedReposForOrgSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotSetSelectedReposForOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const dependabotAddSelectedRepoToOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
    repository_id: z.coerce.number(),
  })

  const dependabotAddSelectedRepoToOrgSecretResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["409", z.void()],
      ],
      undefined,
    )

  router.put(
    "dependabotAddSelectedRepoToOrgSecret",
    "/orgs/:org/dependabot/secrets/:secret_name/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotAddSelectedRepoToOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with409() {
          return new KoaRuntimeResponse<void>(409)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .dependabotAddSelectedRepoToOrgSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotAddSelectedRepoToOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const dependabotRemoveSelectedRepoFromOrgSecretParamSchema = z.object({
    org: z.string(),
    secret_name: z.string(),
    repository_id: z.coerce.number(),
  })

  const dependabotRemoveSelectedRepoFromOrgSecretResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["409", z.void()],
      ],
      undefined,
    )

  router.delete(
    "dependabotRemoveSelectedRepoFromOrgSecret",
    "/orgs/:org/dependabot/secrets/:secret_name/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotRemoveSelectedRepoFromOrgSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with409() {
          return new KoaRuntimeResponse<void>(409)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .dependabotRemoveSelectedRepoFromOrgSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotRemoveSelectedRepoFromOrgSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const packagesListDockerMigrationConflictingPackagesForOrganizationParamSchema =
    z.object({ org: z.string() })

  const packagesListDockerMigrationConflictingPackagesForOrganizationResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_package)],
        ["401", s_basic_error],
        ["403", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "packagesListDockerMigrationConflictingPackagesForOrganization",
    "/orgs/:org/docker/conflicts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesListDockerMigrationConflictingPackagesForOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_package[]>(200)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesListDockerMigrationConflictingPackagesForOrganization(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        packagesListDockerMigrationConflictingPackagesForOrganizationResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const activityListPublicOrgEventsParamSchema = z.object({ org: z.string() })

  const activityListPublicOrgEventsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const activityListPublicOrgEventsResponseValidator =
    responseValidationFactory([["200", z.array(s_event)]], undefined)

  router.get(
    "activityListPublicOrgEvents",
    "/orgs/:org/events",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListPublicOrgEventsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListPublicOrgEventsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_event[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityListPublicOrgEvents(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListPublicOrgEventsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListFailedInvitationsParamSchema = z.object({ org: z.string() })

  const orgsListFailedInvitationsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const orgsListFailedInvitationsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_organization_invitation)],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "orgsListFailedInvitations",
    "/orgs/:org/failed_invitations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListFailedInvitationsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListFailedInvitationsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_organization_invitation[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsListFailedInvitations(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListFailedInvitationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListWebhooksParamSchema = z.object({ org: z.string() })

  const orgsListWebhooksQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const orgsListWebhooksResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_org_hook)],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get("orgsListWebhooks", "/orgs/:org/hooks", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        orgsListWebhooksParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: parseRequestInput(
        orgsListWebhooksQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_org_hook[]>(200)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .orgsListWebhooks(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = orgsListWebhooksResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const orgsCreateWebhookParamSchema = z.object({ org: z.string() })

  const orgsCreateWebhookBodySchema = z.object({
    name: z.string(),
    config: z.object({
      url: s_webhook_config_url,
      content_type: s_webhook_config_content_type.optional(),
      secret: s_webhook_config_secret.optional(),
      insecure_ssl: s_webhook_config_insecure_ssl.optional(),
      username: z.string().optional(),
      password: z.string().optional(),
    }),
    events: z.array(z.string()).optional(),
    active: z.coerce.boolean().optional(),
  })

  const orgsCreateWebhookResponseValidator = responseValidationFactory(
    [
      ["201", s_org_hook],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post("orgsCreateWebhook", "/orgs/:org/hooks", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        orgsCreateWebhookParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        orgsCreateWebhookBodySchema,
        ctx.request.body,
        RequestInputType.RequestBody,
      ),
    }

    const responder = {
      with201() {
        return new KoaRuntimeResponse<t_org_hook>(201)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error>(422)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .orgsCreateWebhook(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = orgsCreateWebhookResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const orgsGetWebhookParamSchema = z.object({
    org: z.string(),
    hook_id: z.coerce.number(),
  })

  const orgsGetWebhookResponseValidator = responseValidationFactory(
    [
      ["200", s_org_hook],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "orgsGetWebhook",
    "/orgs/:org/hooks/:hook_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsGetWebhookParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_org_hook>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsGetWebhook(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsGetWebhookResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsUpdateWebhookParamSchema = z.object({
    org: z.string(),
    hook_id: z.coerce.number(),
  })

  const orgsUpdateWebhookBodySchema = z
    .object({
      config: z
        .object({
          url: s_webhook_config_url,
          content_type: s_webhook_config_content_type.optional(),
          secret: s_webhook_config_secret.optional(),
          insecure_ssl: s_webhook_config_insecure_ssl.optional(),
        })
        .optional(),
      events: z.array(z.string()).optional(),
      active: z.coerce.boolean().optional(),
      name: z.string().optional(),
    })
    .optional()

  const orgsUpdateWebhookResponseValidator = responseValidationFactory(
    [
      ["200", s_org_hook],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.patch(
    "orgsUpdateWebhook",
    "/orgs/:org/hooks/:hook_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsUpdateWebhookParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsUpdateWebhookBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_org_hook>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsUpdateWebhook(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsUpdateWebhookResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsDeleteWebhookParamSchema = z.object({
    org: z.string(),
    hook_id: z.coerce.number(),
  })

  const orgsDeleteWebhookResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.delete(
    "orgsDeleteWebhook",
    "/orgs/:org/hooks/:hook_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsDeleteWebhookParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsDeleteWebhook(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsDeleteWebhookResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsGetWebhookConfigForOrgParamSchema = z.object({
    org: z.string(),
    hook_id: z.coerce.number(),
  })

  const orgsGetWebhookConfigForOrgResponseValidator = responseValidationFactory(
    [["200", s_webhook_config]],
    undefined,
  )

  router.get(
    "orgsGetWebhookConfigForOrg",
    "/orgs/:org/hooks/:hook_id/config",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsGetWebhookConfigForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_webhook_config>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsGetWebhookConfigForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsGetWebhookConfigForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsUpdateWebhookConfigForOrgParamSchema = z.object({
    org: z.string(),
    hook_id: z.coerce.number(),
  })

  const orgsUpdateWebhookConfigForOrgBodySchema = z
    .object({
      url: s_webhook_config_url.optional(),
      content_type: s_webhook_config_content_type.optional(),
      secret: s_webhook_config_secret.optional(),
      insecure_ssl: s_webhook_config_insecure_ssl.optional(),
    })
    .optional()

  const orgsUpdateWebhookConfigForOrgResponseValidator =
    responseValidationFactory([["200", s_webhook_config]], undefined)

  router.patch(
    "orgsUpdateWebhookConfigForOrg",
    "/orgs/:org/hooks/:hook_id/config",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsUpdateWebhookConfigForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsUpdateWebhookConfigForOrgBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_webhook_config>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsUpdateWebhookConfigForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsUpdateWebhookConfigForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListWebhookDeliveriesParamSchema = z.object({
    org: z.string(),
    hook_id: z.coerce.number(),
  })

  const orgsListWebhookDeliveriesQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    cursor: z.string().optional(),
    redelivery: z.coerce.boolean().optional(),
  })

  const orgsListWebhookDeliveriesResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_hook_delivery_item)],
      ["400", s_scim_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get(
    "orgsListWebhookDeliveries",
    "/orgs/:org/hooks/:hook_id/deliveries",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListWebhookDeliveriesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListWebhookDeliveriesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_hook_delivery_item[]>(200)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsListWebhookDeliveries(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListWebhookDeliveriesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsGetWebhookDeliveryParamSchema = z.object({
    org: z.string(),
    hook_id: z.coerce.number(),
    delivery_id: z.coerce.number(),
  })

  const orgsGetWebhookDeliveryResponseValidator = responseValidationFactory(
    [
      ["200", s_hook_delivery],
      ["400", s_scim_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get(
    "orgsGetWebhookDelivery",
    "/orgs/:org/hooks/:hook_id/deliveries/:delivery_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsGetWebhookDeliveryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_hook_delivery>(200)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsGetWebhookDelivery(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsGetWebhookDeliveryResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsRedeliverWebhookDeliveryParamSchema = z.object({
    org: z.string(),
    hook_id: z.coerce.number(),
    delivery_id: z.coerce.number(),
  })

  const orgsRedeliverWebhookDeliveryResponseValidator =
    responseValidationFactory(
      [
        ["202", z.object({})],
        ["400", s_scim_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.post(
    "orgsRedeliverWebhookDelivery",
    "/orgs/:org/hooks/:hook_id/deliveries/:delivery_id/attempts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsRedeliverWebhookDeliveryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with202() {
          return new KoaRuntimeResponse<EmptyObject>(202)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsRedeliverWebhookDelivery(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsRedeliverWebhookDeliveryResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsPingWebhookParamSchema = z.object({
    org: z.string(),
    hook_id: z.coerce.number(),
  })

  const orgsPingWebhookResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.post(
    "orgsPingWebhook",
    "/orgs/:org/hooks/:hook_id/pings",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsPingWebhookParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsPingWebhook(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsPingWebhookResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsGetOrgInstallationParamSchema = z.object({ org: z.string() })

  const appsGetOrgInstallationResponseValidator = responseValidationFactory(
    [["200", s_installation]],
    undefined,
  )

  router.get(
    "appsGetOrgInstallation",
    "/orgs/:org/installation",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsGetOrgInstallationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_installation>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsGetOrgInstallation(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsGetOrgInstallationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListAppInstallationsParamSchema = z.object({ org: z.string() })

  const orgsListAppInstallationsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const orgsListAppInstallationsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          installations: z.array(s_installation),
        }),
      ],
    ],
    undefined,
  )

  router.get(
    "orgsListAppInstallations",
    "/orgs/:org/installations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListAppInstallationsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListAppInstallationsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            installations: t_installation[]
            total_count: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsListAppInstallations(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListAppInstallationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const interactionsGetRestrictionsForOrgParamSchema = z.object({
    org: z.string(),
  })

  const interactionsGetRestrictionsForOrgResponseValidator =
    responseValidationFactory(
      [["200", z.union([s_interaction_limit_response, z.object({})])]],
      undefined,
    )

  router.get(
    "interactionsGetRestrictionsForOrg",
    "/orgs/:org/interaction-limits",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          interactionsGetRestrictionsForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<
            t_interaction_limit_response | EmptyObject
          >(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .interactionsGetRestrictionsForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = interactionsGetRestrictionsForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const interactionsSetRestrictionsForOrgParamSchema = z.object({
    org: z.string(),
  })

  const interactionsSetRestrictionsForOrgBodySchema = s_interaction_limit

  const interactionsSetRestrictionsForOrgResponseValidator =
    responseValidationFactory(
      [
        ["200", s_interaction_limit_response],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.put(
    "interactionsSetRestrictionsForOrg",
    "/orgs/:org/interaction-limits",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          interactionsSetRestrictionsForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          interactionsSetRestrictionsForOrgBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_interaction_limit_response>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .interactionsSetRestrictionsForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = interactionsSetRestrictionsForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const interactionsRemoveRestrictionsForOrgParamSchema = z.object({
    org: z.string(),
  })

  const interactionsRemoveRestrictionsForOrgResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "interactionsRemoveRestrictionsForOrg",
    "/orgs/:org/interaction-limits",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          interactionsRemoveRestrictionsForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .interactionsRemoveRestrictionsForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = interactionsRemoveRestrictionsForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsListPendingInvitationsParamSchema = z.object({ org: z.string() })

  const orgsListPendingInvitationsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
    role: z
      .enum([
        "all",
        "admin",
        "direct_member",
        "billing_manager",
        "hiring_manager",
      ])
      .optional(),
    invitation_source: z.enum(["all", "member", "scim"]).optional(),
  })

  const orgsListPendingInvitationsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_organization_invitation)],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "orgsListPendingInvitations",
    "/orgs/:org/invitations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListPendingInvitationsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListPendingInvitationsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_organization_invitation[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsListPendingInvitations(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListPendingInvitationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsCreateInvitationParamSchema = z.object({ org: z.string() })

  const orgsCreateInvitationBodySchema = z
    .object({
      invitee_id: z.coerce.number().optional(),
      email: z.string().optional(),
      role: z.enum(["admin", "direct_member", "billing_manager"]).optional(),
      team_ids: z.array(z.coerce.number()).optional(),
    })
    .optional()

  const orgsCreateInvitationResponseValidator = responseValidationFactory(
    [
      ["201", s_organization_invitation],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "orgsCreateInvitation",
    "/orgs/:org/invitations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsCreateInvitationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsCreateInvitationBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_organization_invitation>(201)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsCreateInvitation(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsCreateInvitationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsCancelInvitationParamSchema = z.object({
    org: z.string(),
    invitation_id: z.coerce.number(),
  })

  const orgsCancelInvitationResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.delete(
    "orgsCancelInvitation",
    "/orgs/:org/invitations/:invitation_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsCancelInvitationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsCancelInvitation(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsCancelInvitationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListInvitationTeamsParamSchema = z.object({
    org: z.string(),
    invitation_id: z.coerce.number(),
  })

  const orgsListInvitationTeamsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const orgsListInvitationTeamsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_team)],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "orgsListInvitationTeams",
    "/orgs/:org/invitations/:invitation_id/teams",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListInvitationTeamsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListInvitationTeamsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsListInvitationTeams(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListInvitationTeamsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesListForOrgParamSchema = z.object({ org: z.string() })

  const issuesListForOrgQuerySchema = z.object({
    filter: z
      .enum(["assigned", "created", "mentioned", "subscribed", "repos", "all"])
      .optional(),
    state: z.enum(["open", "closed", "all"]).optional(),
    labels: z.string().optional(),
    sort: z.enum(["created", "updated", "comments"]).optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    since: z.string().datetime({ offset: true }).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const issuesListForOrgResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_issue)],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get("issuesListForOrg", "/orgs/:org/issues", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        issuesListForOrgParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: parseRequestInput(
        issuesListForOrgQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_issue[]>(200)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .issuesListForOrg(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = issuesListForOrgResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const orgsListMembersParamSchema = z.object({ org: z.string() })

  const orgsListMembersQuerySchema = z.object({
    filter: z.enum(["2fa_disabled", "all"]).optional(),
    role: z.enum(["all", "admin", "member"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const orgsListMembersResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_simple_user)],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get("orgsListMembers", "/orgs/:org/members", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        orgsListMembersParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: parseRequestInput(
        orgsListMembersQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_simple_user[]>(200)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error>(422)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .orgsListMembers(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = orgsListMembersResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const orgsCheckMembershipForUserParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  const orgsCheckMembershipForUserResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["302", z.void()],
      ["404", z.void()],
    ],
    undefined,
  )

  router.get(
    "orgsCheckMembershipForUser",
    "/orgs/:org/members/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsCheckMembershipForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with302() {
          return new KoaRuntimeResponse<void>(302)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsCheckMembershipForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsCheckMembershipForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsRemoveMemberParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  const orgsRemoveMemberResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["403", s_basic_error],
    ],
    undefined,
  )

  router.delete(
    "orgsRemoveMember",
    "/orgs/:org/members/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsRemoveMemberParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsRemoveMember(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsRemoveMemberResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesGetCodespacesForUserInOrgParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  const codespacesGetCodespacesForUserInOrgQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const codespacesGetCodespacesForUserInOrgResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            codespaces: z.array(s_codespace),
          }),
        ],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "codespacesGetCodespacesForUserInOrg",
    "/orgs/:org/members/:username/codespaces",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesGetCodespacesForUserInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codespacesGetCodespacesForUserInOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            codespaces: t_codespace[]
            total_count: number
          }>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesGetCodespacesForUserInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesGetCodespacesForUserInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesDeleteFromOrganizationParamSchema = z.object({
    org: z.string(),
    username: z.string(),
    codespace_name: z.string(),
  })

  const codespacesDeleteFromOrganizationResponseValidator =
    responseValidationFactory(
      [
        ["202", z.object({})],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "codespacesDeleteFromOrganization",
    "/orgs/:org/members/:username/codespaces/:codespace_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesDeleteFromOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with202() {
          return new KoaRuntimeResponse<EmptyObject>(202)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesDeleteFromOrganization(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesDeleteFromOrganizationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesStopInOrganizationParamSchema = z.object({
    org: z.string(),
    username: z.string(),
    codespace_name: z.string(),
  })

  const codespacesStopInOrganizationResponseValidator =
    responseValidationFactory(
      [
        ["200", s_codespace],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.post(
    "codespacesStopInOrganization",
    "/orgs/:org/members/:username/codespaces/:codespace_name/stop",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesStopInOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_codespace>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesStopInOrganization(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesStopInOrganizationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const copilotGetCopilotSeatAssignmentDetailsForUserParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  const copilotGetCopilotSeatAssignmentDetailsForUserResponseValidator =
    responseValidationFactory(
      [
        ["200", s_copilot_seat_details],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", z.void()],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "copilotGetCopilotSeatAssignmentDetailsForUser",
    "/orgs/:org/members/:username/copilot",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          copilotGetCopilotSeatAssignmentDetailsForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_copilot_seat_details>(200)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<void>(422)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .copilotGetCopilotSeatAssignmentDetailsForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = copilotGetCopilotSeatAssignmentDetailsForUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsGetMembershipForUserParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  const orgsGetMembershipForUserResponseValidator = responseValidationFactory(
    [
      ["200", s_org_membership],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "orgsGetMembershipForUser",
    "/orgs/:org/memberships/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsGetMembershipForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_org_membership>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsGetMembershipForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsGetMembershipForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsSetMembershipForUserParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  const orgsSetMembershipForUserBodySchema = z
    .object({ role: z.enum(["admin", "member"]).optional() })
    .optional()

  const orgsSetMembershipForUserResponseValidator = responseValidationFactory(
    [
      ["200", s_org_membership],
      ["403", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.put(
    "orgsSetMembershipForUser",
    "/orgs/:org/memberships/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsSetMembershipForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsSetMembershipForUserBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_org_membership>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsSetMembershipForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsSetMembershipForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsRemoveMembershipForUserParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  const orgsRemoveMembershipForUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "orgsRemoveMembershipForUser",
    "/orgs/:org/memberships/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsRemoveMembershipForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsRemoveMembershipForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsRemoveMembershipForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsListForOrgParamSchema = z.object({ org: z.string() })

  const migrationsListForOrgQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
    exclude: z.array(z.enum(["repositories"])).optional(),
  })

  const migrationsListForOrgResponseValidator = responseValidationFactory(
    [["200", z.array(s_migration)]],
    undefined,
  )

  router.get(
    "migrationsListForOrg",
    "/orgs/:org/migrations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsListForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          migrationsListForOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_migration[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .migrationsListForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsListForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsStartForOrgParamSchema = z.object({ org: z.string() })

  const migrationsStartForOrgBodySchema = z.object({
    repositories: z.array(z.string()),
    lock_repositories: z.coerce.boolean().optional(),
    exclude_metadata: z.coerce.boolean().optional(),
    exclude_git_data: z.coerce.boolean().optional(),
    exclude_attachments: z.coerce.boolean().optional(),
    exclude_releases: z.coerce.boolean().optional(),
    exclude_owner_projects: z.coerce.boolean().optional(),
    org_metadata_only: z.coerce.boolean().optional(),
    exclude: z.array(z.enum(["repositories"])).optional(),
  })

  const migrationsStartForOrgResponseValidator = responseValidationFactory(
    [
      ["201", s_migration],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "migrationsStartForOrg",
    "/orgs/:org/migrations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsStartForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          migrationsStartForOrgBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_migration>(201)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .migrationsStartForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsStartForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsGetStatusForOrgParamSchema = z.object({
    org: z.string(),
    migration_id: z.coerce.number(),
  })

  const migrationsGetStatusForOrgQuerySchema = z.object({
    exclude: z.array(z.enum(["repositories"])).optional(),
  })

  const migrationsGetStatusForOrgResponseValidator = responseValidationFactory(
    [
      ["200", s_migration],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "migrationsGetStatusForOrg",
    "/orgs/:org/migrations/:migration_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsGetStatusForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          migrationsGetStatusForOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_migration>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .migrationsGetStatusForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsGetStatusForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsDownloadArchiveForOrgParamSchema = z.object({
    org: z.string(),
    migration_id: z.coerce.number(),
  })

  const migrationsDownloadArchiveForOrgResponseValidator =
    responseValidationFactory(
      [
        ["302", z.void()],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "migrationsDownloadArchiveForOrg",
    "/orgs/:org/migrations/:migration_id/archive",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsDownloadArchiveForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with302() {
          return new KoaRuntimeResponse<void>(302)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .migrationsDownloadArchiveForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsDownloadArchiveForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsDeleteArchiveForOrgParamSchema = z.object({
    org: z.string(),
    migration_id: z.coerce.number(),
  })

  const migrationsDeleteArchiveForOrgResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "migrationsDeleteArchiveForOrg",
    "/orgs/:org/migrations/:migration_id/archive",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsDeleteArchiveForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .migrationsDeleteArchiveForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsDeleteArchiveForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsUnlockRepoForOrgParamSchema = z.object({
    org: z.string(),
    migration_id: z.coerce.number(),
    repo_name: z.string(),
  })

  const migrationsUnlockRepoForOrgResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.delete(
    "migrationsUnlockRepoForOrg",
    "/orgs/:org/migrations/:migration_id/repos/:repo_name/lock",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsUnlockRepoForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .migrationsUnlockRepoForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsUnlockRepoForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsListReposForOrgParamSchema = z.object({
    org: z.string(),
    migration_id: z.coerce.number(),
  })

  const migrationsListReposForOrgQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const migrationsListReposForOrgResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_minimal_repository)],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "migrationsListReposForOrg",
    "/orgs/:org/migrations/:migration_id/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsListReposForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          migrationsListReposForOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_minimal_repository[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .migrationsListReposForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsListReposForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListOutsideCollaboratorsParamSchema = z.object({ org: z.string() })

  const orgsListOutsideCollaboratorsQuerySchema = z.object({
    filter: z.enum(["2fa_disabled", "all"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const orgsListOutsideCollaboratorsResponseValidator =
    responseValidationFactory([["200", z.array(s_simple_user)]], undefined)

  router.get(
    "orgsListOutsideCollaborators",
    "/orgs/:org/outside_collaborators",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListOutsideCollaboratorsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListOutsideCollaboratorsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_simple_user[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsListOutsideCollaborators(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListOutsideCollaboratorsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsConvertMemberToOutsideCollaboratorParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  const orgsConvertMemberToOutsideCollaboratorBodySchema = z
    .object({ async: z.coerce.boolean().optional() })
    .optional()

  const orgsConvertMemberToOutsideCollaboratorResponseValidator =
    responseValidationFactory(
      [
        ["202", z.object({})],
        ["204", z.void()],
        ["403", z.void()],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.put(
    "orgsConvertMemberToOutsideCollaborator",
    "/orgs/:org/outside_collaborators/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsConvertMemberToOutsideCollaboratorParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsConvertMemberToOutsideCollaboratorBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with202() {
          return new KoaRuntimeResponse<EmptyObject>(202)
        },
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with403() {
          return new KoaRuntimeResponse<void>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsConvertMemberToOutsideCollaborator(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsConvertMemberToOutsideCollaboratorResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsRemoveOutsideCollaboratorParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  const orgsRemoveOutsideCollaboratorResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        [
          "422",
          z.object({
            message: z.string().optional(),
            documentation_url: z.string().optional(),
          }),
        ],
      ],
      undefined,
    )

  router.delete(
    "orgsRemoveOutsideCollaborator",
    "/orgs/:org/outside_collaborators/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsRemoveOutsideCollaboratorParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with422() {
          return new KoaRuntimeResponse<{
            documentation_url?: string
            message?: string
          }>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsRemoveOutsideCollaborator(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsRemoveOutsideCollaboratorResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const packagesListPackagesForOrganizationParamSchema = z.object({
    org: z.string(),
  })

  const packagesListPackagesForOrganizationQuerySchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    visibility: z.enum(["public", "private", "internal"]).optional(),
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
  })

  const packagesListPackagesForOrganizationResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_package)],
        ["400", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "packagesListPackagesForOrganization",
    "/orgs/:org/packages",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesListPackagesForOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          packagesListPackagesForOrganizationQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_package[]>(200)
        },
        with400() {
          return new KoaRuntimeResponse<void>(400)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesListPackagesForOrganization(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesListPackagesForOrganizationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const packagesGetPackageForOrganizationParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    org: z.string(),
  })

  const packagesGetPackageForOrganizationResponseValidator =
    responseValidationFactory([["200", s_package]], undefined)

  router.get(
    "packagesGetPackageForOrganization",
    "/orgs/:org/packages/:package_type/:package_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesGetPackageForOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_package>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesGetPackageForOrganization(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesGetPackageForOrganizationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const packagesDeletePackageForOrgParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    org: z.string(),
  })

  const packagesDeletePackageForOrgResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "packagesDeletePackageForOrg",
    "/orgs/:org/packages/:package_type/:package_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesDeletePackageForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesDeletePackageForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesDeletePackageForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const packagesRestorePackageForOrgParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    org: z.string(),
  })

  const packagesRestorePackageForOrgQuerySchema = z.object({
    token: z.string().optional(),
  })

  const packagesRestorePackageForOrgResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.post(
    "packagesRestorePackageForOrg",
    "/orgs/:org/packages/:package_type/:package_name/restore",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesRestorePackageForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          packagesRestorePackageForOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesRestorePackageForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesRestorePackageForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const packagesGetAllPackageVersionsForPackageOwnedByOrgParamSchema = z.object(
    {
      package_type: z.enum([
        "npm",
        "maven",
        "rubygems",
        "docker",
        "nuget",
        "container",
      ]),
      package_name: z.string(),
      org: z.string(),
    },
  )

  const packagesGetAllPackageVersionsForPackageOwnedByOrgQuerySchema = z.object(
    {
      page: z.coerce.number().optional(),
      per_page: z.coerce.number().optional(),
      state: z.enum(["active", "deleted"]).optional(),
    },
  )

  const packagesGetAllPackageVersionsForPackageOwnedByOrgResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_package_version)],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "packagesGetAllPackageVersionsForPackageOwnedByOrg",
    "/orgs/:org/packages/:package_type/:package_name/versions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesGetAllPackageVersionsForPackageOwnedByOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          packagesGetAllPackageVersionsForPackageOwnedByOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_package_version[]>(200)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesGetAllPackageVersionsForPackageOwnedByOrg(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        packagesGetAllPackageVersionsForPackageOwnedByOrgResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const packagesGetPackageVersionForOrganizationParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    org: z.string(),
    package_version_id: z.coerce.number(),
  })

  const packagesGetPackageVersionForOrganizationResponseValidator =
    responseValidationFactory([["200", s_package_version]], undefined)

  router.get(
    "packagesGetPackageVersionForOrganization",
    "/orgs/:org/packages/:package_type/:package_name/versions/:package_version_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesGetPackageVersionForOrganizationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_package_version>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesGetPackageVersionForOrganization(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesGetPackageVersionForOrganizationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const packagesDeletePackageVersionForOrgParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    org: z.string(),
    package_version_id: z.coerce.number(),
  })

  const packagesDeletePackageVersionForOrgResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "packagesDeletePackageVersionForOrg",
    "/orgs/:org/packages/:package_type/:package_name/versions/:package_version_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesDeletePackageVersionForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesDeletePackageVersionForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesDeletePackageVersionForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const packagesRestorePackageVersionForOrgParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    org: z.string(),
    package_version_id: z.coerce.number(),
  })

  const packagesRestorePackageVersionForOrgResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.post(
    "packagesRestorePackageVersionForOrg",
    "/orgs/:org/packages/:package_type/:package_name/versions/:package_version_id/restore",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesRestorePackageVersionForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesRestorePackageVersionForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesRestorePackageVersionForOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsListPatGrantRequestsParamSchema = z.object({ org: z.string() })

  const orgsListPatGrantRequestsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
    sort: z.enum(["created_at"]).optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    owner: z.array(z.string()).optional(),
    repository: z.string().optional(),
    permission: z.string().optional(),
    last_used_before: z.string().datetime({ offset: true }).optional(),
    last_used_after: z.string().datetime({ offset: true }).optional(),
  })

  const orgsListPatGrantRequestsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_organization_programmatic_access_grant_request)],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "orgsListPatGrantRequests",
    "/orgs/:org/personal-access-token-requests",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListPatGrantRequestsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListPatGrantRequestsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<
            t_organization_programmatic_access_grant_request[]
          >(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsListPatGrantRequests(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListPatGrantRequestsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsReviewPatGrantRequestsInBulkParamSchema = z.object({
    org: z.string(),
  })

  const orgsReviewPatGrantRequestsInBulkBodySchema = z.object({
    pat_request_ids: z.array(z.coerce.number()).optional(),
    action: z.enum(["approve", "deny"]),
    reason: z.string().nullable().optional(),
  })

  const orgsReviewPatGrantRequestsInBulkResponseValidator =
    responseValidationFactory(
      [
        ["202", z.object({})],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", s_validation_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.post(
    "orgsReviewPatGrantRequestsInBulk",
    "/orgs/:org/personal-access-token-requests",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsReviewPatGrantRequestsInBulkParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsReviewPatGrantRequestsInBulkBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with202() {
          return new KoaRuntimeResponse<EmptyObject>(202)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsReviewPatGrantRequestsInBulk(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsReviewPatGrantRequestsInBulkResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsReviewPatGrantRequestParamSchema = z.object({
    org: z.string(),
    pat_request_id: z.coerce.number(),
  })

  const orgsReviewPatGrantRequestBodySchema = z.object({
    action: z.enum(["approve", "deny"]),
    reason: z.string().nullable().optional(),
  })

  const orgsReviewPatGrantRequestResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

  router.post(
    "orgsReviewPatGrantRequest",
    "/orgs/:org/personal-access-token-requests/:pat_request_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsReviewPatGrantRequestParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsReviewPatGrantRequestBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsReviewPatGrantRequest(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsReviewPatGrantRequestResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListPatGrantRequestRepositoriesParamSchema = z.object({
    org: z.string(),
    pat_request_id: z.coerce.number(),
  })

  const orgsListPatGrantRequestRepositoriesQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const orgsListPatGrantRequestRepositoriesResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_minimal_repository)],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "orgsListPatGrantRequestRepositories",
    "/orgs/:org/personal-access-token-requests/:pat_request_id/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListPatGrantRequestRepositoriesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListPatGrantRequestRepositoriesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_minimal_repository[]>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsListPatGrantRequestRepositories(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListPatGrantRequestRepositoriesResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsListPatGrantsParamSchema = z.object({ org: z.string() })

  const orgsListPatGrantsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
    sort: z.enum(["created_at"]).optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    owner: z.array(z.string()).optional(),
    repository: z.string().optional(),
    permission: z.string().optional(),
    last_used_before: z.string().datetime({ offset: true }).optional(),
    last_used_after: z.string().datetime({ offset: true }).optional(),
  })

  const orgsListPatGrantsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_organization_programmatic_access_grant)],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "orgsListPatGrants",
    "/orgs/:org/personal-access-tokens",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListPatGrantsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListPatGrantsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<
            t_organization_programmatic_access_grant[]
          >(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsListPatGrants(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListPatGrantsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsUpdatePatAccessesParamSchema = z.object({ org: z.string() })

  const orgsUpdatePatAccessesBodySchema = z.object({
    action: z.enum(["revoke"]),
    pat_ids: z.array(z.coerce.number()),
  })

  const orgsUpdatePatAccessesResponseValidator = responseValidationFactory(
    [
      ["202", z.object({})],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

  router.post(
    "orgsUpdatePatAccesses",
    "/orgs/:org/personal-access-tokens",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsUpdatePatAccessesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsUpdatePatAccessesBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with202() {
          return new KoaRuntimeResponse<EmptyObject>(202)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsUpdatePatAccesses(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsUpdatePatAccessesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsUpdatePatAccessParamSchema = z.object({
    org: z.string(),
    pat_id: z.coerce.number(),
  })

  const orgsUpdatePatAccessBodySchema = z.object({ action: z.enum(["revoke"]) })

  const orgsUpdatePatAccessResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

  router.post(
    "orgsUpdatePatAccess",
    "/orgs/:org/personal-access-tokens/:pat_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsUpdatePatAccessParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsUpdatePatAccessBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsUpdatePatAccess(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsUpdatePatAccessResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListPatGrantRepositoriesParamSchema = z.object({
    org: z.string(),
    pat_id: z.coerce.number(),
  })

  const orgsListPatGrantRepositoriesQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const orgsListPatGrantRepositoriesResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_minimal_repository)],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "orgsListPatGrantRepositories",
    "/orgs/:org/personal-access-tokens/:pat_id/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListPatGrantRepositoriesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListPatGrantRepositoriesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_minimal_repository[]>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsListPatGrantRepositories(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListPatGrantRepositoriesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsListForOrgParamSchema = z.object({ org: z.string() })

  const projectsListForOrgQuerySchema = z.object({
    state: z.enum(["open", "closed", "all"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const projectsListForOrgResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_project)],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

  router.get("projectsListForOrg", "/orgs/:org/projects", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        projectsListForOrgParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: parseRequestInput(
        projectsListForOrgQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_project[]>(200)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error_simple>(422)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .projectsListForOrg(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = projectsListForOrgResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const projectsCreateForOrgParamSchema = z.object({ org: z.string() })

  const projectsCreateForOrgBodySchema = z.object({
    name: z.string(),
    body: z.string().optional(),
  })

  const projectsCreateForOrgResponseValidator = responseValidationFactory(
    [
      ["201", s_project],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["410", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

  router.post(
    "projectsCreateForOrg",
    "/orgs/:org/projects",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsCreateForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          projectsCreateForOrgBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_project>(201)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with410() {
          return new KoaRuntimeResponse<t_basic_error>(410)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .projectsCreateForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsCreateForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListPublicMembersParamSchema = z.object({ org: z.string() })

  const orgsListPublicMembersQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const orgsListPublicMembersResponseValidator = responseValidationFactory(
    [["200", z.array(s_simple_user)]],
    undefined,
  )

  router.get(
    "orgsListPublicMembers",
    "/orgs/:org/public_members",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListPublicMembersParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          orgsListPublicMembersQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_simple_user[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsListPublicMembers(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListPublicMembersResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsCheckPublicMembershipForUserParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  const orgsCheckPublicMembershipForUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["404", z.void()],
      ],
      undefined,
    )

  router.get(
    "orgsCheckPublicMembershipForUser",
    "/orgs/:org/public_members/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsCheckPublicMembershipForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsCheckPublicMembershipForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsCheckPublicMembershipForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsSetPublicMembershipForAuthenticatedUserParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  const orgsSetPublicMembershipForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["403", s_basic_error],
      ],
      undefined,
    )

  router.put(
    "orgsSetPublicMembershipForAuthenticatedUser",
    "/orgs/:org/public_members/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsSetPublicMembershipForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsSetPublicMembershipForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsSetPublicMembershipForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsRemovePublicMembershipForAuthenticatedUserParamSchema = z.object({
    org: z.string(),
    username: z.string(),
  })

  const orgsRemovePublicMembershipForAuthenticatedUserResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "orgsRemovePublicMembershipForAuthenticatedUser",
    "/orgs/:org/public_members/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsRemovePublicMembershipForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsRemovePublicMembershipForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        orgsRemovePublicMembershipForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const reposListForOrgParamSchema = z.object({ org: z.string() })

  const reposListForOrgQuerySchema = z.object({
    type: z
      .enum(["all", "public", "private", "forks", "sources", "member"])
      .optional(),
    sort: z.enum(["created", "updated", "pushed", "full_name"]).optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposListForOrgResponseValidator = responseValidationFactory(
    [["200", z.array(s_minimal_repository)]],
    undefined,
  )

  router.get("reposListForOrg", "/orgs/:org/repos", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        reposListForOrgParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: parseRequestInput(
        reposListForOrgQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_minimal_repository[]>(200)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .reposListForOrg(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = reposListForOrgResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const reposCreateInOrgParamSchema = z.object({ org: z.string() })

  const reposCreateInOrgBodySchema = z.object({
    name: z.string(),
    description: z.string().optional(),
    homepage: z.string().optional(),
    private: z.coerce.boolean().optional(),
    visibility: z.enum(["public", "private"]).optional(),
    has_issues: z.coerce.boolean().optional(),
    has_projects: z.coerce.boolean().optional(),
    has_wiki: z.coerce.boolean().optional(),
    has_downloads: z.coerce.boolean().optional(),
    is_template: z.coerce.boolean().optional(),
    team_id: z.coerce.number().optional(),
    auto_init: z.coerce.boolean().optional(),
    gitignore_template: z.string().optional(),
    license_template: z.string().optional(),
    allow_squash_merge: z.coerce.boolean().optional(),
    allow_merge_commit: z.coerce.boolean().optional(),
    allow_rebase_merge: z.coerce.boolean().optional(),
    allow_auto_merge: z.coerce.boolean().optional(),
    delete_branch_on_merge: z.coerce.boolean().optional(),
    use_squash_pr_title_as_default: z.coerce.boolean().optional(),
    squash_merge_commit_title: z
      .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
      .optional(),
    squash_merge_commit_message: z
      .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
      .optional(),
    merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
    merge_commit_message: z.enum(["PR_BODY", "PR_TITLE", "BLANK"]).optional(),
  })

  const reposCreateInOrgResponseValidator = responseValidationFactory(
    [
      ["201", s_repository],
      ["403", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post("reposCreateInOrg", "/orgs/:org/repos", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        reposCreateInOrgParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        reposCreateInOrgBodySchema,
        ctx.request.body,
        RequestInputType.RequestBody,
      ),
    }

    const responder = {
      with201() {
        return new KoaRuntimeResponse<t_repository>(201)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error>(422)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .reposCreateInOrg(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = reposCreateInOrgResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const reposGetOrgRulesetsParamSchema = z.object({ org: z.string() })

  const reposGetOrgRulesetsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposGetOrgRulesetsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_repository_ruleset)],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposGetOrgRulesets",
    "/orgs/:org/rulesets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetOrgRulesetsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetOrgRulesetsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_repository_ruleset[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetOrgRulesets(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetOrgRulesetsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateOrgRulesetParamSchema = z.object({ org: z.string() })

  const reposCreateOrgRulesetBodySchema = z.object({
    name: z.string(),
    target: z.enum(["branch", "tag"]).optional(),
    enforcement: s_repository_rule_enforcement,
    bypass_actors: z.array(s_repository_ruleset_bypass_actor).optional(),
    conditions: s_org_ruleset_conditions.optional(),
    rules: z.array(s_repository_rule).optional(),
  })

  const reposCreateOrgRulesetResponseValidator = responseValidationFactory(
    [
      ["201", s_repository_ruleset],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

  router.post(
    "reposCreateOrgRuleset",
    "/orgs/:org/rulesets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateOrgRulesetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateOrgRulesetBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_repository_ruleset>(201)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCreateOrgRuleset(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateOrgRulesetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetOrgRulesetParamSchema = z.object({
    org: z.string(),
    ruleset_id: z.coerce.number(),
  })

  const reposGetOrgRulesetResponseValidator = responseValidationFactory(
    [
      ["200", s_repository_ruleset],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposGetOrgRuleset",
    "/orgs/:org/rulesets/:ruleset_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetOrgRulesetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_repository_ruleset>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetOrgRuleset(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetOrgRulesetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUpdateOrgRulesetParamSchema = z.object({
    org: z.string(),
    ruleset_id: z.coerce.number(),
  })

  const reposUpdateOrgRulesetBodySchema = z
    .object({
      name: z.string().optional(),
      target: z.enum(["branch", "tag"]).optional(),
      enforcement: s_repository_rule_enforcement.optional(),
      bypass_actors: z.array(s_repository_ruleset_bypass_actor).optional(),
      conditions: s_org_ruleset_conditions.optional(),
      rules: z.array(s_repository_rule).optional(),
    })
    .optional()

  const reposUpdateOrgRulesetResponseValidator = responseValidationFactory(
    [
      ["200", s_repository_ruleset],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

  router.put(
    "reposUpdateOrgRuleset",
    "/orgs/:org/rulesets/:ruleset_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdateOrgRulesetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdateOrgRulesetBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_repository_ruleset>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposUpdateOrgRuleset(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdateOrgRulesetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteOrgRulesetParamSchema = z.object({
    org: z.string(),
    ruleset_id: z.coerce.number(),
  })

  const reposDeleteOrgRulesetResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

  router.delete(
    "reposDeleteOrgRuleset",
    "/orgs/:org/rulesets/:ruleset_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteOrgRulesetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDeleteOrgRuleset(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteOrgRulesetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const secretScanningListAlertsForOrgParamSchema = z.object({
    org: z.string(),
  })

  const secretScanningListAlertsForOrgQuerySchema = z.object({
    state: z.enum(["open", "resolved"]).optional(),
    secret_type: z.string().optional(),
    resolution: z.string().optional(),
    sort: z.enum(["created", "updated"]).optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
    before: z.string().optional(),
    after: z.string().optional(),
  })

  const secretScanningListAlertsForOrgResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_organization_secret_scanning_alert)],
        ["404", s_basic_error],
        [
          "503",
          z.object({
            code: z.string().optional(),
            message: z.string().optional(),
            documentation_url: z.string().optional(),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "secretScanningListAlertsForOrg",
    "/orgs/:org/secret-scanning/alerts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          secretScanningListAlertsForOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          secretScanningListAlertsForOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_organization_secret_scanning_alert[]>(
            200,
          )
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .secretScanningListAlertsForOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = secretScanningListAlertsForOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const securityAdvisoriesListOrgRepositoryAdvisoriesParamSchema = z.object({
    org: z.string(),
  })

  const securityAdvisoriesListOrgRepositoryAdvisoriesQuerySchema = z.object({
    direction: z.enum(["asc", "desc"]).optional(),
    sort: z.enum(["created", "updated", "published"]).optional(),
    before: z.string().optional(),
    after: z.string().optional(),
    per_page: z.coerce.number().optional(),
    state: z.enum(["triage", "draft", "published", "closed"]).optional(),
  })

  const securityAdvisoriesListOrgRepositoryAdvisoriesResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_repository_advisory)],
        ["400", s_scim_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "securityAdvisoriesListOrgRepositoryAdvisories",
    "/orgs/:org/security-advisories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          securityAdvisoriesListOrgRepositoryAdvisoriesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          securityAdvisoriesListOrgRepositoryAdvisoriesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_repository_advisory[]>(200)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .securityAdvisoriesListOrgRepositoryAdvisories(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = securityAdvisoriesListOrgRepositoryAdvisoriesResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsListSecurityManagerTeamsParamSchema = z.object({ org: z.string() })

  const orgsListSecurityManagerTeamsResponseValidator =
    responseValidationFactory([["200", z.array(s_team_simple)]], undefined)

  router.get(
    "orgsListSecurityManagerTeams",
    "/orgs/:org/security-managers",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsListSecurityManagerTeamsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_simple[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsListSecurityManagerTeams(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListSecurityManagerTeamsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsAddSecurityManagerTeamParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  const orgsAddSecurityManagerTeamResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["409", z.void()],
    ],
    undefined,
  )

  router.put(
    "orgsAddSecurityManagerTeam",
    "/orgs/:org/security-managers/teams/:team_slug",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsAddSecurityManagerTeamParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with409() {
          return new KoaRuntimeResponse<void>(409)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsAddSecurityManagerTeam(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsAddSecurityManagerTeamResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsRemoveSecurityManagerTeamParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  const orgsRemoveSecurityManagerTeamResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "orgsRemoveSecurityManagerTeam",
    "/orgs/:org/security-managers/teams/:team_slug",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsRemoveSecurityManagerTeamParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsRemoveSecurityManagerTeam(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsRemoveSecurityManagerTeamResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const billingGetGithubActionsBillingOrgParamSchema = z.object({
    org: z.string(),
  })

  const billingGetGithubActionsBillingOrgResponseValidator =
    responseValidationFactory([["200", s_actions_billing_usage]], undefined)

  router.get(
    "billingGetGithubActionsBillingOrg",
    "/orgs/:org/settings/billing/actions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          billingGetGithubActionsBillingOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_actions_billing_usage>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .billingGetGithubActionsBillingOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = billingGetGithubActionsBillingOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const billingGetGithubPackagesBillingOrgParamSchema = z.object({
    org: z.string(),
  })

  const billingGetGithubPackagesBillingOrgResponseValidator =
    responseValidationFactory([["200", s_packages_billing_usage]], undefined)

  router.get(
    "billingGetGithubPackagesBillingOrg",
    "/orgs/:org/settings/billing/packages",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          billingGetGithubPackagesBillingOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_packages_billing_usage>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .billingGetGithubPackagesBillingOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = billingGetGithubPackagesBillingOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const billingGetSharedStorageBillingOrgParamSchema = z.object({
    org: z.string(),
  })

  const billingGetSharedStorageBillingOrgResponseValidator =
    responseValidationFactory([["200", s_combined_billing_usage]], undefined)

  router.get(
    "billingGetSharedStorageBillingOrg",
    "/orgs/:org/settings/billing/shared-storage",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          billingGetSharedStorageBillingOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_combined_billing_usage>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .billingGetSharedStorageBillingOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = billingGetSharedStorageBillingOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsListParamSchema = z.object({ org: z.string() })

  const teamsListQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const teamsListResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_team)],
      ["403", s_basic_error],
    ],
    undefined,
  )

  router.get("teamsList", "/orgs/:org/teams", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        teamsListParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: parseRequestInput(
        teamsListQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_team[]>(200)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .teamsList(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = teamsListResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const teamsCreateParamSchema = z.object({ org: z.string() })

  const teamsCreateBodySchema = z.object({
    name: z.string(),
    description: z.string().optional(),
    maintainers: z.array(z.string()).optional(),
    repo_names: z.array(z.string()).optional(),
    privacy: z.enum(["secret", "closed"]).optional(),
    notification_setting: z
      .enum(["notifications_enabled", "notifications_disabled"])
      .optional(),
    permission: z.enum(["pull", "push"]).optional(),
    parent_team_id: z.coerce.number().optional(),
  })

  const teamsCreateResponseValidator = responseValidationFactory(
    [
      ["201", s_team_full],
      ["403", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post("teamsCreate", "/orgs/:org/teams", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        teamsCreateParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        teamsCreateBodySchema,
        ctx.request.body,
        RequestInputType.RequestBody,
      ),
    }

    const responder = {
      with201() {
        return new KoaRuntimeResponse<t_team_full>(201)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error>(422)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .teamsCreate(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = teamsCreateResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const teamsGetByNameParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  const teamsGetByNameResponseValidator = responseValidationFactory(
    [
      ["200", s_team_full],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "teamsGetByName",
    "/orgs/:org/teams/:team_slug",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsGetByNameParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_full>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsGetByName(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsGetByNameResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsUpdateInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  const teamsUpdateInOrgBodySchema = z
    .object({
      name: z.string().optional(),
      description: z.string().optional(),
      privacy: z.enum(["secret", "closed"]).optional(),
      notification_setting: z
        .enum(["notifications_enabled", "notifications_disabled"])
        .optional(),
      permission: z.enum(["pull", "push", "admin"]).optional(),
      parent_team_id: z.coerce.number().nullable().optional(),
    })
    .optional()

  const teamsUpdateInOrgResponseValidator = responseValidationFactory(
    [
      ["200", s_team_full],
      ["201", s_team_full],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.patch(
    "teamsUpdateInOrg",
    "/orgs/:org/teams/:team_slug",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsUpdateInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsUpdateInOrgBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_full>(200)
        },
        with201() {
          return new KoaRuntimeResponse<t_team_full>(201)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsUpdateInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsUpdateInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsDeleteInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  const teamsDeleteInOrgResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.delete(
    "teamsDeleteInOrg",
    "/orgs/:org/teams/:team_slug",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsDeleteInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsDeleteInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsDeleteInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsListDiscussionsInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  const teamsListDiscussionsInOrgQuerySchema = z.object({
    direction: z.enum(["asc", "desc"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
    pinned: z.string().optional(),
  })

  const teamsListDiscussionsInOrgResponseValidator = responseValidationFactory(
    [["200", z.array(s_team_discussion)]],
    undefined,
  )

  router.get(
    "teamsListDiscussionsInOrg",
    "/orgs/:org/teams/:team_slug/discussions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListDiscussionsInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListDiscussionsInOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_discussion[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsListDiscussionsInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListDiscussionsInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsCreateDiscussionInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  const teamsCreateDiscussionInOrgBodySchema = z.object({
    title: z.string(),
    body: z.string(),
    private: z.coerce.boolean().optional(),
  })

  const teamsCreateDiscussionInOrgResponseValidator = responseValidationFactory(
    [["201", s_team_discussion]],
    undefined,
  )

  router.post(
    "teamsCreateDiscussionInOrg",
    "/orgs/:org/teams/:team_slug/discussions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsCreateDiscussionInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsCreateDiscussionInOrgBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_team_discussion>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsCreateDiscussionInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsCreateDiscussionInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsGetDiscussionInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
  })

  const teamsGetDiscussionInOrgResponseValidator = responseValidationFactory(
    [["200", s_team_discussion]],
    undefined,
  )

  router.get(
    "teamsGetDiscussionInOrg",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsGetDiscussionInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_discussion>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsGetDiscussionInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsGetDiscussionInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsUpdateDiscussionInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
  })

  const teamsUpdateDiscussionInOrgBodySchema = z
    .object({ title: z.string().optional(), body: z.string().optional() })
    .optional()

  const teamsUpdateDiscussionInOrgResponseValidator = responseValidationFactory(
    [["200", s_team_discussion]],
    undefined,
  )

  router.patch(
    "teamsUpdateDiscussionInOrg",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsUpdateDiscussionInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsUpdateDiscussionInOrgBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_discussion>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsUpdateDiscussionInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsUpdateDiscussionInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsDeleteDiscussionInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
  })

  const teamsDeleteDiscussionInOrgResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.delete(
    "teamsDeleteDiscussionInOrg",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsDeleteDiscussionInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsDeleteDiscussionInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsDeleteDiscussionInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsListDiscussionCommentsInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
  })

  const teamsListDiscussionCommentsInOrgQuerySchema = z.object({
    direction: z.enum(["asc", "desc"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const teamsListDiscussionCommentsInOrgResponseValidator =
    responseValidationFactory(
      [["200", z.array(s_team_discussion_comment)]],
      undefined,
    )

  router.get(
    "teamsListDiscussionCommentsInOrg",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListDiscussionCommentsInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListDiscussionCommentsInOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_discussion_comment[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsListDiscussionCommentsInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListDiscussionCommentsInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsCreateDiscussionCommentInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
  })

  const teamsCreateDiscussionCommentInOrgBodySchema = z.object({
    body: z.string(),
  })

  const teamsCreateDiscussionCommentInOrgResponseValidator =
    responseValidationFactory([["201", s_team_discussion_comment]], undefined)

  router.post(
    "teamsCreateDiscussionCommentInOrg",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsCreateDiscussionCommentInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsCreateDiscussionCommentInOrgBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_team_discussion_comment>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsCreateDiscussionCommentInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsCreateDiscussionCommentInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsGetDiscussionCommentInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
    comment_number: z.coerce.number(),
  })

  const teamsGetDiscussionCommentInOrgResponseValidator =
    responseValidationFactory([["200", s_team_discussion_comment]], undefined)

  router.get(
    "teamsGetDiscussionCommentInOrg",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsGetDiscussionCommentInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_discussion_comment>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsGetDiscussionCommentInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsGetDiscussionCommentInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsUpdateDiscussionCommentInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
    comment_number: z.coerce.number(),
  })

  const teamsUpdateDiscussionCommentInOrgBodySchema = z.object({
    body: z.string(),
  })

  const teamsUpdateDiscussionCommentInOrgResponseValidator =
    responseValidationFactory([["200", s_team_discussion_comment]], undefined)

  router.patch(
    "teamsUpdateDiscussionCommentInOrg",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsUpdateDiscussionCommentInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsUpdateDiscussionCommentInOrgBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_discussion_comment>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsUpdateDiscussionCommentInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsUpdateDiscussionCommentInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsDeleteDiscussionCommentInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
    comment_number: z.coerce.number(),
  })

  const teamsDeleteDiscussionCommentInOrgResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "teamsDeleteDiscussionCommentInOrg",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsDeleteDiscussionCommentInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsDeleteDiscussionCommentInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsDeleteDiscussionCommentInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reactionsListForTeamDiscussionCommentInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
    comment_number: z.coerce.number(),
  })

  const reactionsListForTeamDiscussionCommentInOrgQuerySchema = z.object({
    content: z
      .enum([
        "+1",
        "-1",
        "laugh",
        "confused",
        "heart",
        "hooray",
        "rocket",
        "eyes",
      ])
      .optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reactionsListForTeamDiscussionCommentInOrgResponseValidator =
    responseValidationFactory([["200", z.array(s_reaction)]], undefined)

  router.get(
    "reactionsListForTeamDiscussionCommentInOrg",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsListForTeamDiscussionCommentInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reactionsListForTeamDiscussionCommentInOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_reaction[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsListForTeamDiscussionCommentInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsListForTeamDiscussionCommentInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reactionsCreateForTeamDiscussionCommentInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
    comment_number: z.coerce.number(),
  })

  const reactionsCreateForTeamDiscussionCommentInOrgBodySchema = z.object({
    content: z.enum([
      "+1",
      "-1",
      "laugh",
      "confused",
      "heart",
      "hooray",
      "rocket",
      "eyes",
    ]),
  })

  const reactionsCreateForTeamDiscussionCommentInOrgResponseValidator =
    responseValidationFactory(
      [
        ["200", s_reaction],
        ["201", s_reaction],
      ],
      undefined,
    )

  router.post(
    "reactionsCreateForTeamDiscussionCommentInOrg",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsCreateForTeamDiscussionCommentInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reactionsCreateForTeamDiscussionCommentInOrgBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_reaction>(200)
        },
        with201() {
          return new KoaRuntimeResponse<t_reaction>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsCreateForTeamDiscussionCommentInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsCreateForTeamDiscussionCommentInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reactionsDeleteForTeamDiscussionCommentParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
    comment_number: z.coerce.number(),
    reaction_id: z.coerce.number(),
  })

  const reactionsDeleteForTeamDiscussionCommentResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "reactionsDeleteForTeamDiscussionComment",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsDeleteForTeamDiscussionCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsDeleteForTeamDiscussionComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsDeleteForTeamDiscussionCommentResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reactionsListForTeamDiscussionInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
  })

  const reactionsListForTeamDiscussionInOrgQuerySchema = z.object({
    content: z
      .enum([
        "+1",
        "-1",
        "laugh",
        "confused",
        "heart",
        "hooray",
        "rocket",
        "eyes",
      ])
      .optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reactionsListForTeamDiscussionInOrgResponseValidator =
    responseValidationFactory([["200", z.array(s_reaction)]], undefined)

  router.get(
    "reactionsListForTeamDiscussionInOrg",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsListForTeamDiscussionInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reactionsListForTeamDiscussionInOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_reaction[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsListForTeamDiscussionInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsListForTeamDiscussionInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reactionsCreateForTeamDiscussionInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
  })

  const reactionsCreateForTeamDiscussionInOrgBodySchema = z.object({
    content: z.enum([
      "+1",
      "-1",
      "laugh",
      "confused",
      "heart",
      "hooray",
      "rocket",
      "eyes",
    ]),
  })

  const reactionsCreateForTeamDiscussionInOrgResponseValidator =
    responseValidationFactory(
      [
        ["200", s_reaction],
        ["201", s_reaction],
      ],
      undefined,
    )

  router.post(
    "reactionsCreateForTeamDiscussionInOrg",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsCreateForTeamDiscussionInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reactionsCreateForTeamDiscussionInOrgBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_reaction>(200)
        },
        with201() {
          return new KoaRuntimeResponse<t_reaction>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsCreateForTeamDiscussionInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsCreateForTeamDiscussionInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reactionsDeleteForTeamDiscussionParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    discussion_number: z.coerce.number(),
    reaction_id: z.coerce.number(),
  })

  const reactionsDeleteForTeamDiscussionResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "reactionsDeleteForTeamDiscussion",
    "/orgs/:org/teams/:team_slug/discussions/:discussion_number/reactions/:reaction_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsDeleteForTeamDiscussionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsDeleteForTeamDiscussion(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsDeleteForTeamDiscussionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsListPendingInvitationsInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  const teamsListPendingInvitationsInOrgQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const teamsListPendingInvitationsInOrgResponseValidator =
    responseValidationFactory(
      [["200", z.array(s_organization_invitation)]],
      undefined,
    )

  router.get(
    "teamsListPendingInvitationsInOrg",
    "/orgs/:org/teams/:team_slug/invitations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListPendingInvitationsInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListPendingInvitationsInOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_organization_invitation[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsListPendingInvitationsInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListPendingInvitationsInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsListMembersInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  const teamsListMembersInOrgQuerySchema = z.object({
    role: z.enum(["member", "maintainer", "all"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const teamsListMembersInOrgResponseValidator = responseValidationFactory(
    [["200", z.array(s_simple_user)]],
    undefined,
  )

  router.get(
    "teamsListMembersInOrg",
    "/orgs/:org/teams/:team_slug/members",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListMembersInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListMembersInOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_simple_user[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsListMembersInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListMembersInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsGetMembershipForUserInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    username: z.string(),
  })

  const teamsGetMembershipForUserInOrgResponseValidator =
    responseValidationFactory(
      [
        ["200", s_team_membership],
        ["404", z.void()],
      ],
      undefined,
    )

  router.get(
    "teamsGetMembershipForUserInOrg",
    "/orgs/:org/teams/:team_slug/memberships/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsGetMembershipForUserInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_membership>(200)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsGetMembershipForUserInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsGetMembershipForUserInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsAddOrUpdateMembershipForUserInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    username: z.string(),
  })

  const teamsAddOrUpdateMembershipForUserInOrgBodySchema = z
    .object({ role: z.enum(["member", "maintainer"]).optional() })
    .optional()

  const teamsAddOrUpdateMembershipForUserInOrgResponseValidator =
    responseValidationFactory(
      [
        ["200", s_team_membership],
        ["403", z.void()],
        ["422", z.void()],
      ],
      undefined,
    )

  router.put(
    "teamsAddOrUpdateMembershipForUserInOrg",
    "/orgs/:org/teams/:team_slug/memberships/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsAddOrUpdateMembershipForUserInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsAddOrUpdateMembershipForUserInOrgBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_membership>(200)
        },
        with403() {
          return new KoaRuntimeResponse<void>(403)
        },
        with422() {
          return new KoaRuntimeResponse<void>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsAddOrUpdateMembershipForUserInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsAddOrUpdateMembershipForUserInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsRemoveMembershipForUserInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    username: z.string(),
  })

  const teamsRemoveMembershipForUserInOrgResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["403", z.void()],
      ],
      undefined,
    )

  router.delete(
    "teamsRemoveMembershipForUserInOrg",
    "/orgs/:org/teams/:team_slug/memberships/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsRemoveMembershipForUserInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with403() {
          return new KoaRuntimeResponse<void>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsRemoveMembershipForUserInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsRemoveMembershipForUserInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsListProjectsInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  const teamsListProjectsInOrgQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const teamsListProjectsInOrgResponseValidator = responseValidationFactory(
    [["200", z.array(s_team_project)]],
    undefined,
  )

  router.get(
    "teamsListProjectsInOrg",
    "/orgs/:org/teams/:team_slug/projects",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListProjectsInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListProjectsInOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_project[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsListProjectsInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListProjectsInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsCheckPermissionsForProjectInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    project_id: z.coerce.number(),
  })

  const teamsCheckPermissionsForProjectInOrgResponseValidator =
    responseValidationFactory(
      [
        ["200", s_team_project],
        ["404", z.void()],
      ],
      undefined,
    )

  router.get(
    "teamsCheckPermissionsForProjectInOrg",
    "/orgs/:org/teams/:team_slug/projects/:project_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsCheckPermissionsForProjectInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_project>(200)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsCheckPermissionsForProjectInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsCheckPermissionsForProjectInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsAddOrUpdateProjectPermissionsInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    project_id: z.coerce.number(),
  })

  const teamsAddOrUpdateProjectPermissionsInOrgBodySchema = z
    .object({ permission: z.enum(["read", "write", "admin"]).optional() })
    .nullable()
    .optional()

  const teamsAddOrUpdateProjectPermissionsInOrgResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        [
          "403",
          z.object({
            message: z.string().optional(),
            documentation_url: z.string().optional(),
          }),
        ],
      ],
      undefined,
    )

  router.put(
    "teamsAddOrUpdateProjectPermissionsInOrg",
    "/orgs/:org/teams/:team_slug/projects/:project_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsAddOrUpdateProjectPermissionsInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsAddOrUpdateProjectPermissionsInOrgBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with403() {
          return new KoaRuntimeResponse<{
            documentation_url?: string
            message?: string
          }>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsAddOrUpdateProjectPermissionsInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsAddOrUpdateProjectPermissionsInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsRemoveProjectInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    project_id: z.coerce.number(),
  })

  const teamsRemoveProjectInOrgResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.delete(
    "teamsRemoveProjectInOrg",
    "/orgs/:org/teams/:team_slug/projects/:project_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsRemoveProjectInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsRemoveProjectInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsRemoveProjectInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsListReposInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  const teamsListReposInOrgQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const teamsListReposInOrgResponseValidator = responseValidationFactory(
    [["200", z.array(s_minimal_repository)]],
    undefined,
  )

  router.get(
    "teamsListReposInOrg",
    "/orgs/:org/teams/:team_slug/repos",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListReposInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListReposInOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_minimal_repository[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsListReposInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListReposInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsCheckPermissionsForRepoInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    owner: z.string(),
    repo: z.string(),
  })

  const teamsCheckPermissionsForRepoInOrgResponseValidator =
    responseValidationFactory(
      [
        ["200", s_team_repository],
        ["204", z.void()],
        ["404", z.void()],
      ],
      undefined,
    )

  router.get(
    "teamsCheckPermissionsForRepoInOrg",
    "/orgs/:org/teams/:team_slug/repos/:owner/:repo",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsCheckPermissionsForRepoInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_repository>(200)
        },
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsCheckPermissionsForRepoInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsCheckPermissionsForRepoInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsAddOrUpdateRepoPermissionsInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    owner: z.string(),
    repo: z.string(),
  })

  const teamsAddOrUpdateRepoPermissionsInOrgBodySchema = z
    .object({ permission: z.string().optional() })
    .optional()

  const teamsAddOrUpdateRepoPermissionsInOrgResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.put(
    "teamsAddOrUpdateRepoPermissionsInOrg",
    "/orgs/:org/teams/:team_slug/repos/:owner/:repo",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsAddOrUpdateRepoPermissionsInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsAddOrUpdateRepoPermissionsInOrgBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsAddOrUpdateRepoPermissionsInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsAddOrUpdateRepoPermissionsInOrgResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsRemoveRepoInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
    owner: z.string(),
    repo: z.string(),
  })

  const teamsRemoveRepoInOrgResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.delete(
    "teamsRemoveRepoInOrg",
    "/orgs/:org/teams/:team_slug/repos/:owner/:repo",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsRemoveRepoInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsRemoveRepoInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsRemoveRepoInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsListChildInOrgParamSchema = z.object({
    org: z.string(),
    team_slug: z.string(),
  })

  const teamsListChildInOrgQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const teamsListChildInOrgResponseValidator = responseValidationFactory(
    [["200", z.array(s_team)]],
    undefined,
  )

  router.get(
    "teamsListChildInOrg",
    "/orgs/:org/teams/:team_slug/teams",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListChildInOrgParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListChildInOrgQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsListChildInOrg(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListChildInOrgResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsEnableOrDisableSecurityProductOnAllOrgReposParamSchema = z.object({
    org: z.string(),
    security_product: z.enum([
      "dependency_graph",
      "dependabot_alerts",
      "dependabot_security_updates",
      "advanced_security",
      "code_scanning_default_setup",
      "secret_scanning",
      "secret_scanning_push_protection",
    ]),
    enablement: z.enum(["enable_all", "disable_all"]),
  })

  const orgsEnableOrDisableSecurityProductOnAllOrgReposBodySchema = z
    .object({ query_suite: z.enum(["default", "extended"]).optional() })
    .optional()

  const orgsEnableOrDisableSecurityProductOnAllOrgReposResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["422", z.void()],
      ],
      undefined,
    )

  router.post(
    "orgsEnableOrDisableSecurityProductOnAllOrgRepos",
    "/orgs/:org/:security_product/:enablement",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsEnableOrDisableSecurityProductOnAllOrgReposParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsEnableOrDisableSecurityProductOnAllOrgReposBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with422() {
          return new KoaRuntimeResponse<void>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsEnableOrDisableSecurityProductOnAllOrgRepos(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        orgsEnableOrDisableSecurityProductOnAllOrgReposResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const projectsGetCardParamSchema = z.object({ card_id: z.coerce.number() })

  const projectsGetCardResponseValidator = responseValidationFactory(
    [
      ["200", s_project_card],
      ["304", z.void()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "projectsGetCard",
    "/projects/columns/cards/:card_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsGetCardParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_project_card>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .projectsGetCard(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsGetCardResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsUpdateCardParamSchema = z.object({ card_id: z.coerce.number() })

  const projectsUpdateCardBodySchema = z
    .object({
      note: z.string().nullable().optional(),
      archived: z.coerce.boolean().optional(),
    })
    .optional()

  const projectsUpdateCardResponseValidator = responseValidationFactory(
    [
      ["200", s_project_card],
      ["304", z.void()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

  router.patch(
    "projectsUpdateCard",
    "/projects/columns/cards/:card_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsUpdateCardParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          projectsUpdateCardBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_project_card>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .projectsUpdateCard(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsUpdateCardResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsDeleteCardParamSchema = z.object({ card_id: z.coerce.number() })

  const projectsDeleteCardResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["304", z.void()],
      ["401", s_basic_error],
      [
        "403",
        z.object({
          message: z.string().optional(),
          documentation_url: z.string().optional(),
          errors: z.array(z.string()).optional(),
        }),
      ],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.delete(
    "projectsDeleteCard",
    "/projects/columns/cards/:card_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsDeleteCardParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<{
            documentation_url?: string
            errors?: string[]
            message?: string
          }>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .projectsDeleteCard(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsDeleteCardResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsMoveCardParamSchema = z.object({ card_id: z.coerce.number() })

  const projectsMoveCardBodySchema = z.object({
    position: z.string(),
    column_id: z.coerce.number().optional(),
  })

  const projectsMoveCardResponseValidator = responseValidationFactory(
    [
      ["201", z.object({})],
      ["304", z.void()],
      ["401", s_basic_error],
      [
        "403",
        z.object({
          message: z.string().optional(),
          documentation_url: z.string().optional(),
          errors: z
            .array(
              z.object({
                code: z.string().optional(),
                message: z.string().optional(),
                resource: z.string().optional(),
                field: z.string().optional(),
              }),
            )
            .optional(),
        }),
      ],
      ["422", s_validation_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
          errors: z
            .array(
              z.object({
                code: z.string().optional(),
                message: z.string().optional(),
              }),
            )
            .optional(),
        }),
      ],
    ],
    undefined,
  )

  router.post(
    "projectsMoveCard",
    "/projects/columns/cards/:card_id/moves",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsMoveCardParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          projectsMoveCardBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<EmptyObject>(201)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<{
            documentation_url?: string
            errors?: {
              code?: string
              field?: string
              message?: string
              resource?: string
            }[]
            message?: string
          }>(403)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            errors?: {
              code?: string
              message?: string
            }[]
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .projectsMoveCard(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsMoveCardResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsGetColumnParamSchema = z.object({
    column_id: z.coerce.number(),
  })

  const projectsGetColumnResponseValidator = responseValidationFactory(
    [
      ["200", s_project_column],
      ["304", z.void()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "projectsGetColumn",
    "/projects/columns/:column_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsGetColumnParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_project_column>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .projectsGetColumn(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsGetColumnResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsUpdateColumnParamSchema = z.object({
    column_id: z.coerce.number(),
  })

  const projectsUpdateColumnBodySchema = z.object({ name: z.string() })

  const projectsUpdateColumnResponseValidator = responseValidationFactory(
    [
      ["200", s_project_column],
      ["304", z.void()],
      ["401", s_basic_error],
      ["403", s_basic_error],
    ],
    undefined,
  )

  router.patch(
    "projectsUpdateColumn",
    "/projects/columns/:column_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsUpdateColumnParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          projectsUpdateColumnBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_project_column>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .projectsUpdateColumn(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsUpdateColumnResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsDeleteColumnParamSchema = z.object({
    column_id: z.coerce.number(),
  })

  const projectsDeleteColumnResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["304", z.void()],
      ["401", s_basic_error],
      ["403", s_basic_error],
    ],
    undefined,
  )

  router.delete(
    "projectsDeleteColumn",
    "/projects/columns/:column_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsDeleteColumnParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .projectsDeleteColumn(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsDeleteColumnResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsListCardsParamSchema = z.object({
    column_id: z.coerce.number(),
  })

  const projectsListCardsQuerySchema = z.object({
    archived_state: z.enum(["all", "archived", "not_archived"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const projectsListCardsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_project_card)],
      ["304", z.void()],
      ["401", s_basic_error],
      ["403", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "projectsListCards",
    "/projects/columns/:column_id/cards",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsListCardsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          projectsListCardsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_project_card[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .projectsListCards(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsListCardsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsCreateCardParamSchema = z.object({
    column_id: z.coerce.number(),
  })

  const projectsCreateCardBodySchema = z.union([
    z.object({ note: z.string().nullable() }),
    z.object({ content_id: z.coerce.number(), content_type: z.string() }),
  ])

  const projectsCreateCardResponseValidator = responseValidationFactory(
    [
      ["201", s_project_card],
      ["304", z.void()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["422", z.union([s_validation_error, s_validation_error_simple])],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
          errors: z
            .array(
              z.object({
                code: z.string().optional(),
                message: z.string().optional(),
              }),
            )
            .optional(),
        }),
      ],
    ],
    undefined,
  )

  router.post(
    "projectsCreateCard",
    "/projects/columns/:column_id/cards",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsCreateCardParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          projectsCreateCardBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_project_card>(201)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with422() {
          return new KoaRuntimeResponse<
            t_validation_error | t_validation_error_simple
          >(422)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            errors?: {
              code?: string
              message?: string
            }[]
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .projectsCreateCard(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsCreateCardResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsMoveColumnParamSchema = z.object({
    column_id: z.coerce.number(),
  })

  const projectsMoveColumnBodySchema = z.object({ position: z.string() })

  const projectsMoveColumnResponseValidator = responseValidationFactory(
    [
      ["201", z.object({})],
      ["304", z.void()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

  router.post(
    "projectsMoveColumn",
    "/projects/columns/:column_id/moves",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsMoveColumnParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          projectsMoveColumnBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<EmptyObject>(201)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .projectsMoveColumn(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsMoveColumnResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsGetParamSchema = z.object({ project_id: z.coerce.number() })

  const projectsGetResponseValidator = responseValidationFactory(
    [
      ["200", s_project],
      ["304", z.void()],
      ["401", s_basic_error],
      ["403", s_basic_error],
    ],
    undefined,
  )

  router.get("projectsGet", "/projects/:project_id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        projectsGetParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_project>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with401() {
        return new KoaRuntimeResponse<t_basic_error>(401)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .projectsGet(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = projectsGetResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const projectsUpdateParamSchema = z.object({ project_id: z.coerce.number() })

  const projectsUpdateBodySchema = z
    .object({
      name: z.string().optional(),
      body: z.string().nullable().optional(),
      state: z.string().optional(),
      organization_permission: z
        .enum(["read", "write", "admin", "none"])
        .optional(),
      private: z.coerce.boolean().optional(),
    })
    .optional()

  const projectsUpdateResponseValidator = responseValidationFactory(
    [
      ["200", s_project],
      ["304", z.void()],
      ["401", s_basic_error],
      [
        "403",
        z.object({
          message: z.string().optional(),
          documentation_url: z.string().optional(),
          errors: z.array(z.string()).optional(),
        }),
      ],
      ["404", z.void()],
      ["410", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

  router.patch("projectsUpdate", "/projects/:project_id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        projectsUpdateParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        projectsUpdateBodySchema,
        ctx.request.body,
        RequestInputType.RequestBody,
      ),
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_project>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with401() {
        return new KoaRuntimeResponse<t_basic_error>(401)
      },
      with403() {
        return new KoaRuntimeResponse<{
          documentation_url?: string
          errors?: string[]
          message?: string
        }>(403)
      },
      with404() {
        return new KoaRuntimeResponse<void>(404)
      },
      with410() {
        return new KoaRuntimeResponse<t_basic_error>(410)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error_simple>(422)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .projectsUpdate(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = projectsUpdateResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const projectsDeleteParamSchema = z.object({ project_id: z.coerce.number() })

  const projectsDeleteResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["304", z.void()],
      ["401", s_basic_error],
      [
        "403",
        z.object({
          message: z.string().optional(),
          documentation_url: z.string().optional(),
          errors: z.array(z.string()).optional(),
        }),
      ],
      ["404", s_basic_error],
      ["410", s_basic_error],
    ],
    undefined,
  )

  router.delete(
    "projectsDelete",
    "/projects/:project_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsDeleteParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<{
            documentation_url?: string
            errors?: string[]
            message?: string
          }>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with410() {
          return new KoaRuntimeResponse<t_basic_error>(410)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .projectsDelete(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsDeleteResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsListCollaboratorsParamSchema = z.object({
    project_id: z.coerce.number(),
  })

  const projectsListCollaboratorsQuerySchema = z.object({
    affiliation: z.enum(["outside", "direct", "all"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const projectsListCollaboratorsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_simple_user)],
      ["304", z.void()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get(
    "projectsListCollaborators",
    "/projects/:project_id/collaborators",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsListCollaboratorsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          projectsListCollaboratorsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_simple_user[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .projectsListCollaborators(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsListCollaboratorsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsAddCollaboratorParamSchema = z.object({
    project_id: z.coerce.number(),
    username: z.string(),
  })

  const projectsAddCollaboratorBodySchema = z
    .object({ permission: z.enum(["read", "write", "admin"]).optional() })
    .nullable()
    .optional()

  const projectsAddCollaboratorResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["304", z.void()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.put(
    "projectsAddCollaborator",
    "/projects/:project_id/collaborators/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsAddCollaboratorParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          projectsAddCollaboratorBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .projectsAddCollaborator(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsAddCollaboratorResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsRemoveCollaboratorParamSchema = z.object({
    project_id: z.coerce.number(),
    username: z.string(),
  })

  const projectsRemoveCollaboratorResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["304", z.void()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.delete(
    "projectsRemoveCollaborator",
    "/projects/:project_id/collaborators/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsRemoveCollaboratorParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .projectsRemoveCollaborator(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsRemoveCollaboratorResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsGetPermissionForUserParamSchema = z.object({
    project_id: z.coerce.number(),
    username: z.string(),
  })

  const projectsGetPermissionForUserResponseValidator =
    responseValidationFactory(
      [
        ["200", s_project_collaborator_permission],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.get(
    "projectsGetPermissionForUser",
    "/projects/:project_id/collaborators/:username/permission",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsGetPermissionForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_project_collaborator_permission>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .projectsGetPermissionForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsGetPermissionForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsListColumnsParamSchema = z.object({
    project_id: z.coerce.number(),
  })

  const projectsListColumnsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const projectsListColumnsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_project_column)],
      ["304", z.void()],
      ["401", s_basic_error],
      ["403", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "projectsListColumns",
    "/projects/:project_id/columns",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsListColumnsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          projectsListColumnsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_project_column[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .projectsListColumns(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsListColumnsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsCreateColumnParamSchema = z.object({
    project_id: z.coerce.number(),
  })

  const projectsCreateColumnBodySchema = z.object({ name: z.string() })

  const projectsCreateColumnResponseValidator = responseValidationFactory(
    [
      ["201", s_project_column],
      ["304", z.void()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

  router.post(
    "projectsCreateColumn",
    "/projects/:project_id/columns",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsCreateColumnParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          projectsCreateColumnBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_project_column>(201)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .projectsCreateColumn(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsCreateColumnResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const rateLimitGetResponseValidator = responseValidationFactory(
    [
      ["200", s_rate_limit_overview],
      ["304", z.void()],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get("rateLimitGet", "/rate_limit", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_rate_limit_overview>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .rateLimitGet(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = rateLimitGetResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const reposGetParamSchema = z.object({ owner: z.string(), repo: z.string() })

  const reposGetResponseValidator = responseValidationFactory(
    [
      ["200", s_full_repository],
      ["301", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get("reposGet", "/repos/:owner/:repo", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        reposGetParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_full_repository>(200)
      },
      with301() {
        return new KoaRuntimeResponse<t_basic_error>(301)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .reposGet(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = reposGetResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const reposUpdateParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposUpdateBodySchema = z
    .object({
      name: z.string().optional(),
      description: z.string().optional(),
      homepage: z.string().optional(),
      private: z.coerce.boolean().optional(),
      visibility: z.enum(["public", "private"]).optional(),
      security_and_analysis: z
        .object({
          advanced_security: z
            .object({ status: z.string().optional() })
            .optional(),
          secret_scanning: z
            .object({ status: z.string().optional() })
            .optional(),
          secret_scanning_push_protection: z
            .object({ status: z.string().optional() })
            .optional(),
        })
        .nullable()
        .optional(),
      has_issues: z.coerce.boolean().optional(),
      has_projects: z.coerce.boolean().optional(),
      has_wiki: z.coerce.boolean().optional(),
      is_template: z.coerce.boolean().optional(),
      default_branch: z.string().optional(),
      allow_squash_merge: z.coerce.boolean().optional(),
      allow_merge_commit: z.coerce.boolean().optional(),
      allow_rebase_merge: z.coerce.boolean().optional(),
      allow_auto_merge: z.coerce.boolean().optional(),
      delete_branch_on_merge: z.coerce.boolean().optional(),
      allow_update_branch: z.coerce.boolean().optional(),
      use_squash_pr_title_as_default: z.coerce.boolean().optional(),
      squash_merge_commit_title: z
        .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
        .optional(),
      squash_merge_commit_message: z
        .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
        .optional(),
      merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
      merge_commit_message: z.enum(["PR_BODY", "PR_TITLE", "BLANK"]).optional(),
      archived: z.coerce.boolean().optional(),
      allow_forking: z.coerce.boolean().optional(),
      web_commit_signoff_required: z.coerce.boolean().optional(),
    })
    .optional()

  const reposUpdateResponseValidator = responseValidationFactory(
    [
      ["200", s_full_repository],
      ["307", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.patch("reposUpdate", "/repos/:owner/:repo", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        reposUpdateParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        reposUpdateBodySchema,
        ctx.request.body,
        RequestInputType.RequestBody,
      ),
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_full_repository>(200)
      },
      with307() {
        return new KoaRuntimeResponse<t_basic_error>(307)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error>(422)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .reposUpdate(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = reposUpdateResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const reposDeleteParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposDeleteResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["307", s_basic_error],
      [
        "403",
        z.object({
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.delete("reposDelete", "/repos/:owner/:repo", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        reposDeleteParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
    }

    const responder = {
      with204() {
        return new KoaRuntimeResponse<void>(204)
      },
      with307() {
        return new KoaRuntimeResponse<t_basic_error>(307)
      },
      with403() {
        return new KoaRuntimeResponse<{
          documentation_url?: string
          message?: string
        }>(403)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .reposDelete(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = reposDeleteResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const actionsListArtifactsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsListArtifactsForRepoQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
    name: z.string().optional(),
  })

  const actionsListArtifactsForRepoResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            artifacts: z.array(s_artifact),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "actionsListArtifactsForRepo",
    "/repos/:owner/:repo/actions/artifacts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListArtifactsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListArtifactsForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            artifacts: t_artifact[]
            total_count: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsListArtifactsForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListArtifactsForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetArtifactParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    artifact_id: z.coerce.number(),
  })

  const actionsGetArtifactResponseValidator = responseValidationFactory(
    [["200", s_artifact]],
    undefined,
  )

  router.get(
    "actionsGetArtifact",
    "/repos/:owner/:repo/actions/artifacts/:artifact_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetArtifactParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_artifact>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetArtifact(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetArtifactResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteArtifactParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    artifact_id: z.coerce.number(),
  })

  const actionsDeleteArtifactResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.delete(
    "actionsDeleteArtifact",
    "/repos/:owner/:repo/actions/artifacts/:artifact_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteArtifactParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsDeleteArtifact(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteArtifactResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDownloadArtifactParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    artifact_id: z.coerce.number(),
    archive_format: z.string(),
  })

  const actionsDownloadArtifactResponseValidator = responseValidationFactory(
    [
      ["302", z.void()],
      ["410", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "actionsDownloadArtifact",
    "/repos/:owner/:repo/actions/artifacts/:artifact_id/:archive_format",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDownloadArtifactParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with302() {
          return new KoaRuntimeResponse<void>(302)
        },
        with410() {
          return new KoaRuntimeResponse<t_basic_error>(410)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsDownloadArtifact(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDownloadArtifactResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetActionsCacheUsageParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsGetActionsCacheUsageResponseValidator =
    responseValidationFactory(
      [["200", s_actions_cache_usage_by_repository]],
      undefined,
    )

  router.get(
    "actionsGetActionsCacheUsage",
    "/repos/:owner/:repo/actions/cache/usage",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetActionsCacheUsageParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_actions_cache_usage_by_repository>(
            200,
          )
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetActionsCacheUsage(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetActionsCacheUsageResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetActionsCacheListParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsGetActionsCacheListQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
    ref: z.string().optional(),
    key: z.string().optional(),
    sort: z
      .enum(["created_at", "last_accessed_at", "size_in_bytes"])
      .optional(),
    direction: z.enum(["asc", "desc"]).optional(),
  })

  const actionsGetActionsCacheListResponseValidator = responseValidationFactory(
    [["200", s_actions_cache_list]],
    undefined,
  )

  router.get(
    "actionsGetActionsCacheList",
    "/repos/:owner/:repo/actions/caches",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetActionsCacheListParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsGetActionsCacheListQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_actions_cache_list>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetActionsCacheList(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetActionsCacheListResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteActionsCacheByKeyParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsDeleteActionsCacheByKeyQuerySchema = z.object({
    key: z.string(),
    ref: z.string().optional(),
  })

  const actionsDeleteActionsCacheByKeyResponseValidator =
    responseValidationFactory([["200", s_actions_cache_list]], undefined)

  router.delete(
    "actionsDeleteActionsCacheByKey",
    "/repos/:owner/:repo/actions/caches",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteActionsCacheByKeyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsDeleteActionsCacheByKeyQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_actions_cache_list>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsDeleteActionsCacheByKey(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteActionsCacheByKeyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteActionsCacheByIdParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    cache_id: z.coerce.number(),
  })

  const actionsDeleteActionsCacheByIdResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "actionsDeleteActionsCacheById",
    "/repos/:owner/:repo/actions/caches/:cache_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteActionsCacheByIdParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsDeleteActionsCacheById(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteActionsCacheByIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetJobForWorkflowRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    job_id: z.coerce.number(),
  })

  const actionsGetJobForWorkflowRunResponseValidator =
    responseValidationFactory([["200", s_job]], undefined)

  router.get(
    "actionsGetJobForWorkflowRun",
    "/repos/:owner/:repo/actions/jobs/:job_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetJobForWorkflowRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_job>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetJobForWorkflowRun(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetJobForWorkflowRunResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDownloadJobLogsForWorkflowRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    job_id: z.coerce.number(),
  })

  const actionsDownloadJobLogsForWorkflowRunResponseValidator =
    responseValidationFactory([["302", z.void()]], undefined)

  router.get(
    "actionsDownloadJobLogsForWorkflowRun",
    "/repos/:owner/:repo/actions/jobs/:job_id/logs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDownloadJobLogsForWorkflowRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with302() {
          return new KoaRuntimeResponse<void>(302)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsDownloadJobLogsForWorkflowRun(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDownloadJobLogsForWorkflowRunResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsReRunJobForWorkflowRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    job_id: z.coerce.number(),
  })

  const actionsReRunJobForWorkflowRunBodySchema = z
    .object({ enable_debug_logging: z.coerce.boolean().optional() })
    .nullable()
    .optional()

  const actionsReRunJobForWorkflowRunResponseValidator =
    responseValidationFactory(
      [
        ["201", s_empty_object],
        ["403", s_basic_error],
      ],
      undefined,
    )

  router.post(
    "actionsReRunJobForWorkflowRun",
    "/repos/:owner/:repo/actions/jobs/:job_id/rerun",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsReRunJobForWorkflowRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsReRunJobForWorkflowRunBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_empty_object>(201)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsReRunJobForWorkflowRun(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsReRunJobForWorkflowRunResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetCustomOidcSubClaimForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsGetCustomOidcSubClaimForRepoResponseValidator =
    responseValidationFactory(
      [
        ["200", s_oidc_custom_sub_repo],
        ["400", s_scim_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "actionsGetCustomOidcSubClaimForRepo",
    "/repos/:owner/:repo/actions/oidc/customization/sub",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetCustomOidcSubClaimForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_oidc_custom_sub_repo>(200)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetCustomOidcSubClaimForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetCustomOidcSubClaimForRepoResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsSetCustomOidcSubClaimForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsSetCustomOidcSubClaimForRepoBodySchema = z.object({
    use_default: z.coerce.boolean(),
    include_claim_keys: z.array(z.string()).optional(),
  })

  const actionsSetCustomOidcSubClaimForRepoResponseValidator =
    responseValidationFactory(
      [
        ["201", s_empty_object],
        ["400", s_scim_error],
        ["404", s_basic_error],
        ["422", s_validation_error_simple],
      ],
      undefined,
    )

  router.put(
    "actionsSetCustomOidcSubClaimForRepo",
    "/repos/:owner/:repo/actions/oidc/customization/sub",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetCustomOidcSubClaimForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetCustomOidcSubClaimForRepoBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_empty_object>(201)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsSetCustomOidcSubClaimForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsSetCustomOidcSubClaimForRepoResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsListRepoOrganizationSecretsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsListRepoOrganizationSecretsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const actionsListRepoOrganizationSecretsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            secrets: z.array(s_actions_secret),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "actionsListRepoOrganizationSecrets",
    "/repos/:owner/:repo/actions/organization-secrets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListRepoOrganizationSecretsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListRepoOrganizationSecretsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            secrets: t_actions_secret[]
            total_count: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsListRepoOrganizationSecrets(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListRepoOrganizationSecretsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsListRepoOrganizationVariablesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsListRepoOrganizationVariablesQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const actionsListRepoOrganizationVariablesResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            variables: z.array(s_actions_variable),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "actionsListRepoOrganizationVariables",
    "/repos/:owner/:repo/actions/organization-variables",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListRepoOrganizationVariablesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListRepoOrganizationVariablesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            total_count: number
            variables: t_actions_variable[]
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsListRepoOrganizationVariables(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListRepoOrganizationVariablesResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsGetGithubActionsPermissionsRepositoryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsGetGithubActionsPermissionsRepositoryResponseValidator =
    responseValidationFactory(
      [["200", s_actions_repository_permissions]],
      undefined,
    )

  router.get(
    "actionsGetGithubActionsPermissionsRepository",
    "/repos/:owner/:repo/actions/permissions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetGithubActionsPermissionsRepositoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_actions_repository_permissions>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetGithubActionsPermissionsRepository(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetGithubActionsPermissionsRepositoryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsSetGithubActionsPermissionsRepositoryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsSetGithubActionsPermissionsRepositoryBodySchema = z.object({
    enabled: s_actions_enabled,
    allowed_actions: s_allowed_actions.optional(),
  })

  const actionsSetGithubActionsPermissionsRepositoryResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.put(
    "actionsSetGithubActionsPermissionsRepository",
    "/repos/:owner/:repo/actions/permissions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetGithubActionsPermissionsRepositoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetGithubActionsPermissionsRepositoryBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsSetGithubActionsPermissionsRepository(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsSetGithubActionsPermissionsRepositoryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsGetWorkflowAccessToRepositoryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsGetWorkflowAccessToRepositoryResponseValidator =
    responseValidationFactory(
      [["200", s_actions_workflow_access_to_repository]],
      undefined,
    )

  router.get(
    "actionsGetWorkflowAccessToRepository",
    "/repos/:owner/:repo/actions/permissions/access",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetWorkflowAccessToRepositoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_actions_workflow_access_to_repository>(
            200,
          )
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetWorkflowAccessToRepository(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetWorkflowAccessToRepositoryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsSetWorkflowAccessToRepositoryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsSetWorkflowAccessToRepositoryBodySchema =
    s_actions_workflow_access_to_repository

  const actionsSetWorkflowAccessToRepositoryResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.put(
    "actionsSetWorkflowAccessToRepository",
    "/repos/:owner/:repo/actions/permissions/access",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetWorkflowAccessToRepositoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetWorkflowAccessToRepositoryBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsSetWorkflowAccessToRepository(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsSetWorkflowAccessToRepositoryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsGetAllowedActionsRepositoryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsGetAllowedActionsRepositoryResponseValidator =
    responseValidationFactory([["200", s_selected_actions]], undefined)

  router.get(
    "actionsGetAllowedActionsRepository",
    "/repos/:owner/:repo/actions/permissions/selected-actions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetAllowedActionsRepositoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_selected_actions>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetAllowedActionsRepository(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetAllowedActionsRepositoryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsSetAllowedActionsRepositoryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsSetAllowedActionsRepositoryBodySchema =
    s_selected_actions.optional()

  const actionsSetAllowedActionsRepositoryResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.put(
    "actionsSetAllowedActionsRepository",
    "/repos/:owner/:repo/actions/permissions/selected-actions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetAllowedActionsRepositoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetAllowedActionsRepositoryBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsSetAllowedActionsRepository(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsSetAllowedActionsRepositoryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema =
    z.object({ owner: z.string(), repo: z.string() })

  const actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryResponseValidator =
    responseValidationFactory(
      [["200", s_actions_get_default_workflow_permissions]],
      undefined,
    )

  router.get(
    "actionsGetGithubActionsDefaultWorkflowPermissionsRepository",
    "/repos/:owner/:repo/actions/permissions/workflow",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_actions_get_default_workflow_permissions>(
            200,
          )
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetGithubActionsDefaultWorkflowPermissionsRepository(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema =
    z.object({ owner: z.string(), repo: z.string() })

  const actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryBodySchema =
    s_actions_set_default_workflow_permissions

  const actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["409", z.void()],
      ],
      undefined,
    )

  router.put(
    "actionsSetGithubActionsDefaultWorkflowPermissionsRepository",
    "/repos/:owner/:repo/actions/permissions/workflow",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with409() {
          return new KoaRuntimeResponse<void>(409)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsSetGithubActionsDefaultWorkflowPermissionsRepository(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsListSelfHostedRunnersForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsListSelfHostedRunnersForRepoQuerySchema = z.object({
    name: z.string().optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const actionsListSelfHostedRunnersForRepoResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            runners: z.array(s_runner),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "actionsListSelfHostedRunnersForRepo",
    "/repos/:owner/:repo/actions/runners",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListSelfHostedRunnersForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListSelfHostedRunnersForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            runners: t_runner[]
            total_count: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsListSelfHostedRunnersForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListSelfHostedRunnersForRepoResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsListRunnerApplicationsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsListRunnerApplicationsForRepoResponseValidator =
    responseValidationFactory(
      [["200", z.array(s_runner_application)]],
      undefined,
    )

  router.get(
    "actionsListRunnerApplicationsForRepo",
    "/repos/:owner/:repo/actions/runners/downloads",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListRunnerApplicationsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_runner_application[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsListRunnerApplicationsForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListRunnerApplicationsForRepoResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsGenerateRunnerJitconfigForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsGenerateRunnerJitconfigForRepoBodySchema = z.object({
    name: z.string(),
    runner_group_id: z.coerce.number(),
    labels: z.array(z.string()),
    work_folder: z.string().optional(),
  })

  const actionsGenerateRunnerJitconfigForRepoResponseValidator =
    responseValidationFactory(
      [
        ["201", z.object({ runner: s_runner, encoded_jit_config: z.string() })],
        ["404", s_basic_error],
        ["422", s_validation_error_simple],
      ],
      undefined,
    )

  router.post(
    "actionsGenerateRunnerJitconfigForRepo",
    "/repos/:owner/:repo/actions/runners/generate-jitconfig",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGenerateRunnerJitconfigForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsGenerateRunnerJitconfigForRepoBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<{
            encoded_jit_config: string
            runner: t_runner
          }>(201)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGenerateRunnerJitconfigForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGenerateRunnerJitconfigForRepoResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsCreateRegistrationTokenForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsCreateRegistrationTokenForRepoResponseValidator =
    responseValidationFactory([["201", s_authentication_token]], undefined)

  router.post(
    "actionsCreateRegistrationTokenForRepo",
    "/repos/:owner/:repo/actions/runners/registration-token",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCreateRegistrationTokenForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_authentication_token>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsCreateRegistrationTokenForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCreateRegistrationTokenForRepoResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsCreateRemoveTokenForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsCreateRemoveTokenForRepoResponseValidator =
    responseValidationFactory([["201", s_authentication_token]], undefined)

  router.post(
    "actionsCreateRemoveTokenForRepo",
    "/repos/:owner/:repo/actions/runners/remove-token",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCreateRemoveTokenForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_authentication_token>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsCreateRemoveTokenForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCreateRemoveTokenForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetSelfHostedRunnerForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    runner_id: z.coerce.number(),
  })

  const actionsGetSelfHostedRunnerForRepoResponseValidator =
    responseValidationFactory([["200", s_runner]], undefined)

  router.get(
    "actionsGetSelfHostedRunnerForRepo",
    "/repos/:owner/:repo/actions/runners/:runner_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetSelfHostedRunnerForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_runner>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetSelfHostedRunnerForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetSelfHostedRunnerForRepoResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteSelfHostedRunnerFromRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    runner_id: z.coerce.number(),
  })

  const actionsDeleteSelfHostedRunnerFromRepoResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "actionsDeleteSelfHostedRunnerFromRepo",
    "/repos/:owner/:repo/actions/runners/:runner_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteSelfHostedRunnerFromRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsDeleteSelfHostedRunnerFromRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteSelfHostedRunnerFromRepoResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsListLabelsForSelfHostedRunnerForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    runner_id: z.coerce.number(),
  })

  const actionsListLabelsForSelfHostedRunnerForRepoResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            labels: z.array(s_runner_label),
          }),
        ],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "actionsListLabelsForSelfHostedRunnerForRepo",
    "/repos/:owner/:repo/actions/runners/:runner_id/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListLabelsForSelfHostedRunnerForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            labels: t_runner_label[]
            total_count: number
          }>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsListLabelsForSelfHostedRunnerForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListLabelsForSelfHostedRunnerForRepoResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsAddCustomLabelsToSelfHostedRunnerForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    runner_id: z.coerce.number(),
  })

  const actionsAddCustomLabelsToSelfHostedRunnerForRepoBodySchema = z.object({
    labels: z.array(z.string()),
  })

  const actionsAddCustomLabelsToSelfHostedRunnerForRepoResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            labels: z.array(s_runner_label),
          }),
        ],
        ["404", s_basic_error],
        ["422", s_validation_error_simple],
      ],
      undefined,
    )

  router.post(
    "actionsAddCustomLabelsToSelfHostedRunnerForRepo",
    "/repos/:owner/:repo/actions/runners/:runner_id/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsAddCustomLabelsToSelfHostedRunnerForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsAddCustomLabelsToSelfHostedRunnerForRepoBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            labels: t_runner_label[]
            total_count: number
          }>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsAddCustomLabelsToSelfHostedRunnerForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsAddCustomLabelsToSelfHostedRunnerForRepoResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsSetCustomLabelsForSelfHostedRunnerForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    runner_id: z.coerce.number(),
  })

  const actionsSetCustomLabelsForSelfHostedRunnerForRepoBodySchema = z.object({
    labels: z.array(z.string()),
  })

  const actionsSetCustomLabelsForSelfHostedRunnerForRepoResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            labels: z.array(s_runner_label),
          }),
        ],
        ["404", s_basic_error],
        ["422", s_validation_error_simple],
      ],
      undefined,
    )

  router.put(
    "actionsSetCustomLabelsForSelfHostedRunnerForRepo",
    "/repos/:owner/:repo/actions/runners/:runner_id/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsSetCustomLabelsForSelfHostedRunnerForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsSetCustomLabelsForSelfHostedRunnerForRepoBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            labels: t_runner_label[]
            total_count: number
          }>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsSetCustomLabelsForSelfHostedRunnerForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsSetCustomLabelsForSelfHostedRunnerForRepoResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoParamSchema =
    z.object({
      owner: z.string(),
      repo: z.string(),
      runner_id: z.coerce.number(),
    })

  const actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            labels: z.array(s_runner_label),
          }),
        ],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo",
    "/repos/:owner/:repo/actions/runners/:runner_id/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            labels: t_runner_label[]
            total_count: number
          }>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsRemoveCustomLabelFromSelfHostedRunnerForRepoParamSchema =
    z.object({
      owner: z.string(),
      repo: z.string(),
      runner_id: z.coerce.number(),
      name: z.string(),
    })

  const actionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            labels: z.array(s_runner_label),
          }),
        ],
        ["404", s_basic_error],
        ["422", s_validation_error_simple],
      ],
      undefined,
    )

  router.delete(
    "actionsRemoveCustomLabelFromSelfHostedRunnerForRepo",
    "/repos/:owner/:repo/actions/runners/:runner_id/labels/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsRemoveCustomLabelFromSelfHostedRunnerForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            labels: t_runner_label[]
            total_count: number
          }>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsRemoveCustomLabelFromSelfHostedRunnerForRepo(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        actionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const actionsListWorkflowRunsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsListWorkflowRunsForRepoQuerySchema = z.object({
    actor: z.string().optional(),
    branch: z.string().optional(),
    event: z.string().optional(),
    status: z
      .enum([
        "completed",
        "action_required",
        "cancelled",
        "failure",
        "neutral",
        "skipped",
        "stale",
        "success",
        "timed_out",
        "in_progress",
        "queued",
        "requested",
        "waiting",
        "pending",
      ])
      .optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
    created: z.string().datetime({ offset: true }).optional(),
    exclude_pull_requests: z.coerce.boolean().optional(),
    check_suite_id: z.coerce.number().optional(),
    head_sha: z.string().optional(),
  })

  const actionsListWorkflowRunsForRepoResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            workflow_runs: z.array(s_workflow_run),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "actionsListWorkflowRunsForRepo",
    "/repos/:owner/:repo/actions/runs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListWorkflowRunsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListWorkflowRunsForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            total_count: number
            workflow_runs: t_workflow_run[]
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsListWorkflowRunsForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListWorkflowRunsForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetWorkflowRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  const actionsGetWorkflowRunQuerySchema = z.object({
    exclude_pull_requests: z.coerce.boolean().optional(),
  })

  const actionsGetWorkflowRunResponseValidator = responseValidationFactory(
    [["200", s_workflow_run]],
    undefined,
  )

  router.get(
    "actionsGetWorkflowRun",
    "/repos/:owner/:repo/actions/runs/:run_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetWorkflowRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsGetWorkflowRunQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_workflow_run>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetWorkflowRun(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetWorkflowRunResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteWorkflowRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  const actionsDeleteWorkflowRunResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.delete(
    "actionsDeleteWorkflowRun",
    "/repos/:owner/:repo/actions/runs/:run_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteWorkflowRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsDeleteWorkflowRun(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteWorkflowRunResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetReviewsForRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  const actionsGetReviewsForRunResponseValidator = responseValidationFactory(
    [["200", z.array(s_environment_approvals)]],
    undefined,
  )

  router.get(
    "actionsGetReviewsForRun",
    "/repos/:owner/:repo/actions/runs/:run_id/approvals",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetReviewsForRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_environment_approvals[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetReviewsForRun(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetReviewsForRunResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsApproveWorkflowRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  const actionsApproveWorkflowRunResponseValidator = responseValidationFactory(
    [
      ["201", s_empty_object],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.post(
    "actionsApproveWorkflowRun",
    "/repos/:owner/:repo/actions/runs/:run_id/approve",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsApproveWorkflowRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_empty_object>(201)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsApproveWorkflowRun(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsApproveWorkflowRunResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsListWorkflowRunArtifactsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  const actionsListWorkflowRunArtifactsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
    name: z.string().optional(),
  })

  const actionsListWorkflowRunArtifactsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            artifacts: z.array(s_artifact),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "actionsListWorkflowRunArtifacts",
    "/repos/:owner/:repo/actions/runs/:run_id/artifacts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListWorkflowRunArtifactsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListWorkflowRunArtifactsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            artifacts: t_artifact[]
            total_count: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsListWorkflowRunArtifacts(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListWorkflowRunArtifactsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetWorkflowRunAttemptParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
    attempt_number: z.coerce.number(),
  })

  const actionsGetWorkflowRunAttemptQuerySchema = z.object({
    exclude_pull_requests: z.coerce.boolean().optional(),
  })

  const actionsGetWorkflowRunAttemptResponseValidator =
    responseValidationFactory([["200", s_workflow_run]], undefined)

  router.get(
    "actionsGetWorkflowRunAttempt",
    "/repos/:owner/:repo/actions/runs/:run_id/attempts/:attempt_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetWorkflowRunAttemptParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsGetWorkflowRunAttemptQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_workflow_run>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetWorkflowRunAttempt(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetWorkflowRunAttemptResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsListJobsForWorkflowRunAttemptParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
    attempt_number: z.coerce.number(),
  })

  const actionsListJobsForWorkflowRunAttemptQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const actionsListJobsForWorkflowRunAttemptResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({ total_count: z.coerce.number(), jobs: z.array(s_job) }),
        ],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "actionsListJobsForWorkflowRunAttempt",
    "/repos/:owner/:repo/actions/runs/:run_id/attempts/:attempt_number/jobs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListJobsForWorkflowRunAttemptParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListJobsForWorkflowRunAttemptQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            jobs: t_job[]
            total_count: number
          }>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsListJobsForWorkflowRunAttempt(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListJobsForWorkflowRunAttemptResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsDownloadWorkflowRunAttemptLogsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
    attempt_number: z.coerce.number(),
  })

  const actionsDownloadWorkflowRunAttemptLogsResponseValidator =
    responseValidationFactory([["302", z.void()]], undefined)

  router.get(
    "actionsDownloadWorkflowRunAttemptLogs",
    "/repos/:owner/:repo/actions/runs/:run_id/attempts/:attempt_number/logs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDownloadWorkflowRunAttemptLogsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with302() {
          return new KoaRuntimeResponse<void>(302)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsDownloadWorkflowRunAttemptLogs(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDownloadWorkflowRunAttemptLogsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsCancelWorkflowRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  const actionsCancelWorkflowRunResponseValidator = responseValidationFactory(
    [
      ["202", s_empty_object],
      ["409", s_basic_error],
    ],
    undefined,
  )

  router.post(
    "actionsCancelWorkflowRun",
    "/repos/:owner/:repo/actions/runs/:run_id/cancel",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCancelWorkflowRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with202() {
          return new KoaRuntimeResponse<t_empty_object>(202)
        },
        with409() {
          return new KoaRuntimeResponse<t_basic_error>(409)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsCancelWorkflowRun(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCancelWorkflowRunResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsReviewCustomGatesForRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  const actionsReviewCustomGatesForRunBodySchema = z.union([
    s_review_custom_gates_comment_required,
    s_review_custom_gates_state_required,
  ])

  const actionsReviewCustomGatesForRunResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.post(
    "actionsReviewCustomGatesForRun",
    "/repos/:owner/:repo/actions/runs/:run_id/deployment_protection_rule",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsReviewCustomGatesForRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsReviewCustomGatesForRunBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsReviewCustomGatesForRun(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsReviewCustomGatesForRunResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsListJobsForWorkflowRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  const actionsListJobsForWorkflowRunQuerySchema = z.object({
    filter: z.enum(["latest", "all"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const actionsListJobsForWorkflowRunResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({ total_count: z.coerce.number(), jobs: z.array(s_job) }),
        ],
      ],
      undefined,
    )

  router.get(
    "actionsListJobsForWorkflowRun",
    "/repos/:owner/:repo/actions/runs/:run_id/jobs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListJobsForWorkflowRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListJobsForWorkflowRunQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            jobs: t_job[]
            total_count: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsListJobsForWorkflowRun(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListJobsForWorkflowRunResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDownloadWorkflowRunLogsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  const actionsDownloadWorkflowRunLogsResponseValidator =
    responseValidationFactory([["302", z.void()]], undefined)

  router.get(
    "actionsDownloadWorkflowRunLogs",
    "/repos/:owner/:repo/actions/runs/:run_id/logs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDownloadWorkflowRunLogsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with302() {
          return new KoaRuntimeResponse<void>(302)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsDownloadWorkflowRunLogs(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDownloadWorkflowRunLogsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteWorkflowRunLogsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  const actionsDeleteWorkflowRunLogsResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["403", s_basic_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "actionsDeleteWorkflowRunLogs",
    "/repos/:owner/:repo/actions/runs/:run_id/logs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteWorkflowRunLogsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsDeleteWorkflowRunLogs(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteWorkflowRunLogsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetPendingDeploymentsForRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  const actionsGetPendingDeploymentsForRunResponseValidator =
    responseValidationFactory(
      [["200", z.array(s_pending_deployment)]],
      undefined,
    )

  router.get(
    "actionsGetPendingDeploymentsForRun",
    "/repos/:owner/:repo/actions/runs/:run_id/pending_deployments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetPendingDeploymentsForRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_pending_deployment[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetPendingDeploymentsForRun(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetPendingDeploymentsForRunResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsReviewPendingDeploymentsForRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  const actionsReviewPendingDeploymentsForRunBodySchema = z.object({
    environment_ids: z.array(z.coerce.number()),
    state: z.enum(["approved", "rejected"]),
    comment: z.string(),
  })

  const actionsReviewPendingDeploymentsForRunResponseValidator =
    responseValidationFactory([["200", z.array(s_deployment)]], undefined)

  router.post(
    "actionsReviewPendingDeploymentsForRun",
    "/repos/:owner/:repo/actions/runs/:run_id/pending_deployments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsReviewPendingDeploymentsForRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsReviewPendingDeploymentsForRunBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_deployment[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsReviewPendingDeploymentsForRun(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsReviewPendingDeploymentsForRunResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsReRunWorkflowParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  const actionsReRunWorkflowBodySchema = z
    .object({ enable_debug_logging: z.coerce.boolean().optional() })
    .nullable()
    .optional()

  const actionsReRunWorkflowResponseValidator = responseValidationFactory(
    [["201", s_empty_object]],
    undefined,
  )

  router.post(
    "actionsReRunWorkflow",
    "/repos/:owner/:repo/actions/runs/:run_id/rerun",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsReRunWorkflowParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsReRunWorkflowBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_empty_object>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsReRunWorkflow(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsReRunWorkflowResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsReRunWorkflowFailedJobsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  const actionsReRunWorkflowFailedJobsBodySchema = z
    .object({ enable_debug_logging: z.coerce.boolean().optional() })
    .nullable()
    .optional()

  const actionsReRunWorkflowFailedJobsResponseValidator =
    responseValidationFactory([["201", s_empty_object]], undefined)

  router.post(
    "actionsReRunWorkflowFailedJobs",
    "/repos/:owner/:repo/actions/runs/:run_id/rerun-failed-jobs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsReRunWorkflowFailedJobsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsReRunWorkflowFailedJobsBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_empty_object>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsReRunWorkflowFailedJobs(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsReRunWorkflowFailedJobsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetWorkflowRunUsageParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    run_id: z.coerce.number(),
  })

  const actionsGetWorkflowRunUsageResponseValidator = responseValidationFactory(
    [["200", s_workflow_run_usage]],
    undefined,
  )

  router.get(
    "actionsGetWorkflowRunUsage",
    "/repos/:owner/:repo/actions/runs/:run_id/timing",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetWorkflowRunUsageParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_workflow_run_usage>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetWorkflowRunUsage(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetWorkflowRunUsageResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsListRepoSecretsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsListRepoSecretsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const actionsListRepoSecretsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          secrets: z.array(s_actions_secret),
        }),
      ],
    ],
    undefined,
  )

  router.get(
    "actionsListRepoSecrets",
    "/repos/:owner/:repo/actions/secrets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListRepoSecretsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListRepoSecretsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            secrets: t_actions_secret[]
            total_count: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsListRepoSecrets(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListRepoSecretsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetRepoPublicKeyParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsGetRepoPublicKeyResponseValidator = responseValidationFactory(
    [["200", s_actions_public_key]],
    undefined,
  )

  router.get(
    "actionsGetRepoPublicKey",
    "/repos/:owner/:repo/actions/secrets/public-key",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetRepoPublicKeyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_actions_public_key>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetRepoPublicKey(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetRepoPublicKeyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetRepoSecretParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  })

  const actionsGetRepoSecretResponseValidator = responseValidationFactory(
    [["200", s_actions_secret]],
    undefined,
  )

  router.get(
    "actionsGetRepoSecret",
    "/repos/:owner/:repo/actions/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetRepoSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_actions_secret>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetRepoSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetRepoSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsCreateOrUpdateRepoSecretParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  })

  const actionsCreateOrUpdateRepoSecretBodySchema = z.object({
    encrypted_value: z.string().optional(),
    key_id: z.string().optional(),
  })

  const actionsCreateOrUpdateRepoSecretResponseValidator =
    responseValidationFactory(
      [
        ["201", s_empty_object],
        ["204", z.void()],
      ],
      undefined,
    )

  router.put(
    "actionsCreateOrUpdateRepoSecret",
    "/repos/:owner/:repo/actions/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCreateOrUpdateRepoSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsCreateOrUpdateRepoSecretBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_empty_object>(201)
        },
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsCreateOrUpdateRepoSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCreateOrUpdateRepoSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteRepoSecretParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  })

  const actionsDeleteRepoSecretResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.delete(
    "actionsDeleteRepoSecret",
    "/repos/:owner/:repo/actions/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteRepoSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsDeleteRepoSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteRepoSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsListRepoVariablesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsListRepoVariablesQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const actionsListRepoVariablesResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          variables: z.array(s_actions_variable),
        }),
      ],
    ],
    undefined,
  )

  router.get(
    "actionsListRepoVariables",
    "/repos/:owner/:repo/actions/variables",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListRepoVariablesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListRepoVariablesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            total_count: number
            variables: t_actions_variable[]
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsListRepoVariables(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListRepoVariablesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsCreateRepoVariableParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsCreateRepoVariableBodySchema = z.object({
    name: z.string(),
    value: z.string(),
  })

  const actionsCreateRepoVariableResponseValidator = responseValidationFactory(
    [["201", s_empty_object]],
    undefined,
  )

  router.post(
    "actionsCreateRepoVariable",
    "/repos/:owner/:repo/actions/variables",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCreateRepoVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsCreateRepoVariableBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_empty_object>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsCreateRepoVariable(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCreateRepoVariableResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetRepoVariableParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    name: z.string(),
  })

  const actionsGetRepoVariableResponseValidator = responseValidationFactory(
    [["200", s_actions_variable]],
    undefined,
  )

  router.get(
    "actionsGetRepoVariable",
    "/repos/:owner/:repo/actions/variables/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetRepoVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_actions_variable>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetRepoVariable(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetRepoVariableResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsUpdateRepoVariableParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    name: z.string(),
  })

  const actionsUpdateRepoVariableBodySchema = z.object({
    name: z.string().optional(),
    value: z.string().optional(),
  })

  const actionsUpdateRepoVariableResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.patch(
    "actionsUpdateRepoVariable",
    "/repos/:owner/:repo/actions/variables/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsUpdateRepoVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsUpdateRepoVariableBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsUpdateRepoVariable(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsUpdateRepoVariableResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteRepoVariableParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    name: z.string(),
  })

  const actionsDeleteRepoVariableResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.delete(
    "actionsDeleteRepoVariable",
    "/repos/:owner/:repo/actions/variables/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteRepoVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsDeleteRepoVariable(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteRepoVariableResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsListRepoWorkflowsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const actionsListRepoWorkflowsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const actionsListRepoWorkflowsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          workflows: z.array(s_workflow),
        }),
      ],
    ],
    undefined,
  )

  router.get(
    "actionsListRepoWorkflows",
    "/repos/:owner/:repo/actions/workflows",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListRepoWorkflowsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListRepoWorkflowsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            total_count: number
            workflows: t_workflow[]
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsListRepoWorkflows(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListRepoWorkflowsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetWorkflowParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    workflow_id: z.union([z.coerce.number(), z.string()]),
  })

  const actionsGetWorkflowResponseValidator = responseValidationFactory(
    [["200", s_workflow]],
    undefined,
  )

  router.get(
    "actionsGetWorkflow",
    "/repos/:owner/:repo/actions/workflows/:workflow_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetWorkflowParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_workflow>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetWorkflow(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetWorkflowResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDisableWorkflowParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    workflow_id: z.union([z.coerce.number(), z.string()]),
  })

  const actionsDisableWorkflowResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.put(
    "actionsDisableWorkflow",
    "/repos/:owner/:repo/actions/workflows/:workflow_id/disable",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDisableWorkflowParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsDisableWorkflow(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDisableWorkflowResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsCreateWorkflowDispatchParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    workflow_id: z.union([z.coerce.number(), z.string()]),
  })

  const actionsCreateWorkflowDispatchBodySchema = z.object({
    ref: z.string(),
    inputs: z.object({}).optional(),
  })

  const actionsCreateWorkflowDispatchResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.post(
    "actionsCreateWorkflowDispatch",
    "/repos/:owner/:repo/actions/workflows/:workflow_id/dispatches",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCreateWorkflowDispatchParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsCreateWorkflowDispatchBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsCreateWorkflowDispatch(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCreateWorkflowDispatchResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsEnableWorkflowParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    workflow_id: z.union([z.coerce.number(), z.string()]),
  })

  const actionsEnableWorkflowResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.put(
    "actionsEnableWorkflow",
    "/repos/:owner/:repo/actions/workflows/:workflow_id/enable",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsEnableWorkflowParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsEnableWorkflow(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsEnableWorkflowResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsListWorkflowRunsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    workflow_id: z.union([z.coerce.number(), z.string()]),
  })

  const actionsListWorkflowRunsQuerySchema = z.object({
    actor: z.string().optional(),
    branch: z.string().optional(),
    event: z.string().optional(),
    status: z
      .enum([
        "completed",
        "action_required",
        "cancelled",
        "failure",
        "neutral",
        "skipped",
        "stale",
        "success",
        "timed_out",
        "in_progress",
        "queued",
        "requested",
        "waiting",
        "pending",
      ])
      .optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
    created: z.string().datetime({ offset: true }).optional(),
    exclude_pull_requests: z.coerce.boolean().optional(),
    check_suite_id: z.coerce.number().optional(),
    head_sha: z.string().optional(),
  })

  const actionsListWorkflowRunsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          workflow_runs: z.array(s_workflow_run),
        }),
      ],
    ],
    undefined,
  )

  router.get(
    "actionsListWorkflowRuns",
    "/repos/:owner/:repo/actions/workflows/:workflow_id/runs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListWorkflowRunsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListWorkflowRunsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            total_count: number
            workflow_runs: t_workflow_run[]
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsListWorkflowRuns(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListWorkflowRunsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetWorkflowUsageParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    workflow_id: z.union([z.coerce.number(), z.string()]),
  })

  const actionsGetWorkflowUsageResponseValidator = responseValidationFactory(
    [["200", s_workflow_usage]],
    undefined,
  )

  router.get(
    "actionsGetWorkflowUsage",
    "/repos/:owner/:repo/actions/workflows/:workflow_id/timing",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetWorkflowUsageParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_workflow_usage>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetWorkflowUsage(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetWorkflowUsageResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListActivitiesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListActivitiesQuerySchema = z.object({
    direction: z.enum(["asc", "desc"]).optional(),
    per_page: z.coerce.number().optional(),
    before: z.string().optional(),
    after: z.string().optional(),
    ref: z.string().optional(),
    actor: z.string().optional(),
    time_period: z.enum(["day", "week", "month", "quarter", "year"]).optional(),
    activity_type: z
      .enum([
        "push",
        "force_push",
        "branch_creation",
        "branch_deletion",
        "pr_merge",
        "merge_queue_merge",
      ])
      .optional(),
  })

  const reposListActivitiesResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_activity)],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

  router.get(
    "reposListActivities",
    "/repos/:owner/:repo/activity",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListActivitiesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListActivitiesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_activity[]>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListActivities(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListActivitiesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesListAssigneesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const issuesListAssigneesQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const issuesListAssigneesResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_simple_user)],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "issuesListAssignees",
    "/repos/:owner/:repo/assignees",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesListAssigneesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          issuesListAssigneesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_simple_user[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesListAssignees(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListAssigneesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesCheckUserCanBeAssignedParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    assignee: z.string(),
  })

  const issuesCheckUserCanBeAssignedResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "issuesCheckUserCanBeAssigned",
    "/repos/:owner/:repo/assignees/:assignee",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesCheckUserCanBeAssignedParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesCheckUserCanBeAssigned(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesCheckUserCanBeAssignedResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListAutolinksParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListAutolinksQuerySchema = z.object({
    page: z.coerce.number().optional(),
  })

  const reposListAutolinksResponseValidator = responseValidationFactory(
    [["200", z.array(s_autolink)]],
    undefined,
  )

  router.get(
    "reposListAutolinks",
    "/repos/:owner/:repo/autolinks",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListAutolinksParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListAutolinksQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_autolink[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListAutolinks(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListAutolinksResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateAutolinkParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCreateAutolinkBodySchema = z.object({
    key_prefix: z.string(),
    url_template: z.string(),
    is_alphanumeric: z.coerce.boolean().optional(),
  })

  const reposCreateAutolinkResponseValidator = responseValidationFactory(
    [
      ["201", s_autolink],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "reposCreateAutolink",
    "/repos/:owner/:repo/autolinks",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateAutolinkParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateAutolinkBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_autolink>(201)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCreateAutolink(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateAutolinkResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetAutolinkParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    autolink_id: z.coerce.number(),
  })

  const reposGetAutolinkResponseValidator = responseValidationFactory(
    [
      ["200", s_autolink],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposGetAutolink",
    "/repos/:owner/:repo/autolinks/:autolink_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetAutolinkParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_autolink>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetAutolink(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetAutolinkResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteAutolinkParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    autolink_id: z.coerce.number(),
  })

  const reposDeleteAutolinkResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.delete(
    "reposDeleteAutolink",
    "/repos/:owner/:repo/autolinks/:autolink_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteAutolinkParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDeleteAutolink(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteAutolinkResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCheckAutomatedSecurityFixesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCheckAutomatedSecurityFixesResponseValidator =
    responseValidationFactory(
      [
        ["200", s_check_automated_security_fixes],
        ["404", z.void()],
      ],
      undefined,
    )

  router.get(
    "reposCheckAutomatedSecurityFixes",
    "/repos/:owner/:repo/automated-security-fixes",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCheckAutomatedSecurityFixesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_check_automated_security_fixes>(200)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCheckAutomatedSecurityFixes(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCheckAutomatedSecurityFixesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposEnableAutomatedSecurityFixesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposEnableAutomatedSecurityFixesResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.put(
    "reposEnableAutomatedSecurityFixes",
    "/repos/:owner/:repo/automated-security-fixes",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposEnableAutomatedSecurityFixesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposEnableAutomatedSecurityFixes(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposEnableAutomatedSecurityFixesResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposDisableAutomatedSecurityFixesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposDisableAutomatedSecurityFixesResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "reposDisableAutomatedSecurityFixes",
    "/repos/:owner/:repo/automated-security-fixes",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDisableAutomatedSecurityFixesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDisableAutomatedSecurityFixes(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDisableAutomatedSecurityFixesResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposListBranchesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListBranchesQuerySchema = z.object({
    protected: z.coerce.boolean().optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposListBranchesResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_short_branch)],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposListBranches",
    "/repos/:owner/:repo/branches",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListBranchesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListBranchesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_short_branch[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListBranches(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListBranchesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetBranchParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposGetBranchResponseValidator = responseValidationFactory(
    [
      ["200", s_branch_with_protection],
      ["301", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposGetBranch",
    "/repos/:owner/:repo/branches/:branch",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetBranchParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_branch_with_protection>(200)
        },
        with301() {
          return new KoaRuntimeResponse<t_basic_error>(301)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetBranch(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetBranchResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetBranchProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposGetBranchProtectionResponseValidator = responseValidationFactory(
    [
      ["200", s_branch_protection],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposGetBranchProtection",
    "/repos/:owner/:repo/branches/:branch/protection",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetBranchProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_branch_protection>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetBranchProtection(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetBranchProtectionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUpdateBranchProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposUpdateBranchProtectionBodySchema = z.object({
    required_status_checks: z
      .object({
        strict: z.coerce.boolean(),
        contexts: z.array(z.string()),
        checks: z
          .array(
            z.object({
              context: z.string(),
              app_id: z.coerce.number().optional(),
            }),
          )
          .optional(),
      })
      .nullable(),
    enforce_admins: z.coerce.boolean().nullable(),
    required_pull_request_reviews: z
      .object({
        dismissal_restrictions: z
          .object({
            users: z.array(z.string()).optional(),
            teams: z.array(z.string()).optional(),
            apps: z.array(z.string()).optional(),
          })
          .optional(),
        dismiss_stale_reviews: z.coerce.boolean().optional(),
        require_code_owner_reviews: z.coerce.boolean().optional(),
        required_approving_review_count: z.coerce.number().optional(),
        require_last_push_approval: z.coerce.boolean().optional(),
        bypass_pull_request_allowances: z
          .object({
            users: z.array(z.string()).optional(),
            teams: z.array(z.string()).optional(),
            apps: z.array(z.string()).optional(),
          })
          .optional(),
      })
      .nullable(),
    restrictions: z
      .object({
        users: z.array(z.string()),
        teams: z.array(z.string()),
        apps: z.array(z.string()).optional(),
      })
      .nullable(),
    required_linear_history: z.coerce.boolean().optional(),
    allow_force_pushes: z.coerce.boolean().nullable().optional(),
    allow_deletions: z.coerce.boolean().optional(),
    block_creations: z.coerce.boolean().optional(),
    required_conversation_resolution: z.coerce.boolean().optional(),
    lock_branch: z.coerce.boolean().optional(),
    allow_fork_syncing: z.coerce.boolean().optional(),
  })

  const reposUpdateBranchProtectionResponseValidator =
    responseValidationFactory(
      [
        ["200", s_protected_branch],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", s_validation_error_simple],
      ],
      undefined,
    )

  router.put(
    "reposUpdateBranchProtection",
    "/repos/:owner/:repo/branches/:branch/protection",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdateBranchProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdateBranchProtectionBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_protected_branch>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposUpdateBranchProtection(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdateBranchProtectionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteBranchProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposDeleteBranchProtectionResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["403", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "reposDeleteBranchProtection",
    "/repos/:owner/:repo/branches/:branch/protection",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteBranchProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDeleteBranchProtection(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteBranchProtectionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetAdminBranchProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposGetAdminBranchProtectionResponseValidator =
    responseValidationFactory(
      [["200", s_protected_branch_admin_enforced]],
      undefined,
    )

  router.get(
    "reposGetAdminBranchProtection",
    "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetAdminBranchProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_protected_branch_admin_enforced>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetAdminBranchProtection(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetAdminBranchProtectionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposSetAdminBranchProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposSetAdminBranchProtectionResponseValidator =
    responseValidationFactory(
      [["200", s_protected_branch_admin_enforced]],
      undefined,
    )

  router.post(
    "reposSetAdminBranchProtection",
    "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposSetAdminBranchProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_protected_branch_admin_enforced>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposSetAdminBranchProtection(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposSetAdminBranchProtectionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteAdminBranchProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposDeleteAdminBranchProtectionResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "reposDeleteAdminBranchProtection",
    "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteAdminBranchProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDeleteAdminBranchProtection(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteAdminBranchProtectionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetPullRequestReviewProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposGetPullRequestReviewProtectionResponseValidator =
    responseValidationFactory(
      [["200", s_protected_branch_pull_request_review]],
      undefined,
    )

  router.get(
    "reposGetPullRequestReviewProtection",
    "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetPullRequestReviewProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_protected_branch_pull_request_review>(
            200,
          )
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetPullRequestReviewProtection(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetPullRequestReviewProtectionResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposUpdatePullRequestReviewProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposUpdatePullRequestReviewProtectionBodySchema = z
    .object({
      dismissal_restrictions: z
        .object({
          users: z.array(z.string()).optional(),
          teams: z.array(z.string()).optional(),
          apps: z.array(z.string()).optional(),
        })
        .optional(),
      dismiss_stale_reviews: z.coerce.boolean().optional(),
      require_code_owner_reviews: z.coerce.boolean().optional(),
      required_approving_review_count: z.coerce.number().optional(),
      require_last_push_approval: z.coerce.boolean().optional(),
      bypass_pull_request_allowances: z
        .object({
          users: z.array(z.string()).optional(),
          teams: z.array(z.string()).optional(),
          apps: z.array(z.string()).optional(),
        })
        .optional(),
    })
    .optional()

  const reposUpdatePullRequestReviewProtectionResponseValidator =
    responseValidationFactory(
      [
        ["200", s_protected_branch_pull_request_review],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.patch(
    "reposUpdatePullRequestReviewProtection",
    "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdatePullRequestReviewProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdatePullRequestReviewProtectionBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_protected_branch_pull_request_review>(
            200,
          )
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposUpdatePullRequestReviewProtection(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdatePullRequestReviewProtectionResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposDeletePullRequestReviewProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposDeletePullRequestReviewProtectionResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "reposDeletePullRequestReviewProtection",
    "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeletePullRequestReviewProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDeletePullRequestReviewProtection(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeletePullRequestReviewProtectionResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposGetCommitSignatureProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposGetCommitSignatureProtectionResponseValidator =
    responseValidationFactory(
      [
        ["200", s_protected_branch_admin_enforced],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "reposGetCommitSignatureProtection",
    "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetCommitSignatureProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_protected_branch_admin_enforced>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetCommitSignatureProtection(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetCommitSignatureProtectionResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposCreateCommitSignatureProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposCreateCommitSignatureProtectionResponseValidator =
    responseValidationFactory(
      [
        ["200", s_protected_branch_admin_enforced],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.post(
    "reposCreateCommitSignatureProtection",
    "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateCommitSignatureProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_protected_branch_admin_enforced>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCreateCommitSignatureProtection(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateCommitSignatureProtectionResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposDeleteCommitSignatureProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposDeleteCommitSignatureProtectionResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "reposDeleteCommitSignatureProtection",
    "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteCommitSignatureProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDeleteCommitSignatureProtection(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteCommitSignatureProtectionResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposGetStatusChecksProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposGetStatusChecksProtectionResponseValidator =
    responseValidationFactory(
      [
        ["200", s_status_check_policy],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "reposGetStatusChecksProtection",
    "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetStatusChecksProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_status_check_policy>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetStatusChecksProtection(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetStatusChecksProtectionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUpdateStatusCheckProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposUpdateStatusCheckProtectionBodySchema = z
    .object({
      strict: z.coerce.boolean().optional(),
      contexts: z.array(z.string()).optional(),
      checks: z
        .array(
          z.object({
            context: z.string(),
            app_id: z.coerce.number().optional(),
          }),
        )
        .optional(),
    })
    .optional()

  const reposUpdateStatusCheckProtectionResponseValidator =
    responseValidationFactory(
      [
        ["200", s_status_check_policy],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.patch(
    "reposUpdateStatusCheckProtection",
    "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdateStatusCheckProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdateStatusCheckProtectionBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_status_check_policy>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposUpdateStatusCheckProtection(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdateStatusCheckProtectionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposRemoveStatusCheckProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposRemoveStatusCheckProtectionResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "reposRemoveStatusCheckProtection",
    "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposRemoveStatusCheckProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposRemoveStatusCheckProtection(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposRemoveStatusCheckProtectionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetAllStatusCheckContextsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposGetAllStatusCheckContextsResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(z.string())],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "reposGetAllStatusCheckContexts",
    "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetAllStatusCheckContextsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<string[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetAllStatusCheckContexts(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetAllStatusCheckContextsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposAddStatusCheckContextsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposAddStatusCheckContextsBodySchema = z
    .union([z.object({ contexts: z.array(z.string()) }), z.array(z.string())])
    .optional()

  const reposAddStatusCheckContextsResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(z.string())],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.post(
    "reposAddStatusCheckContexts",
    "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposAddStatusCheckContextsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposAddStatusCheckContextsBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<string[]>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposAddStatusCheckContexts(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposAddStatusCheckContextsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposSetStatusCheckContextsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposSetStatusCheckContextsBodySchema = z
    .union([z.object({ contexts: z.array(z.string()) }), z.array(z.string())])
    .optional()

  const reposSetStatusCheckContextsResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(z.string())],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.put(
    "reposSetStatusCheckContexts",
    "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposSetStatusCheckContextsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposSetStatusCheckContextsBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<string[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposSetStatusCheckContexts(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposSetStatusCheckContextsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposRemoveStatusCheckContextsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposRemoveStatusCheckContextsBodySchema = z.union([
    z.object({ contexts: z.array(z.string()) }),
    z.array(z.string()),
  ])

  const reposRemoveStatusCheckContextsResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(z.string())],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.delete(
    "reposRemoveStatusCheckContexts",
    "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposRemoveStatusCheckContextsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposRemoveStatusCheckContextsBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<string[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposRemoveStatusCheckContexts(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposRemoveStatusCheckContextsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetAccessRestrictionsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposGetAccessRestrictionsResponseValidator = responseValidationFactory(
    [
      ["200", s_branch_restriction_policy],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposGetAccessRestrictions",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetAccessRestrictionsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_branch_restriction_policy>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetAccessRestrictions(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetAccessRestrictionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteAccessRestrictionsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposDeleteAccessRestrictionsResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "reposDeleteAccessRestrictions",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteAccessRestrictionsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDeleteAccessRestrictions(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteAccessRestrictionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetAppsWithAccessToProtectedBranchParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposGetAppsWithAccessToProtectedBranchResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_integration)],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "reposGetAppsWithAccessToProtectedBranch",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetAppsWithAccessToProtectedBranchParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_integration[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetAppsWithAccessToProtectedBranch(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetAppsWithAccessToProtectedBranchResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposAddAppAccessRestrictionsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposAddAppAccessRestrictionsBodySchema = z
    .union([z.object({ apps: z.array(z.string()) }), z.array(z.string())])
    .optional()

  const reposAddAppAccessRestrictionsResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_integration)],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.post(
    "reposAddAppAccessRestrictions",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposAddAppAccessRestrictionsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposAddAppAccessRestrictionsBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_integration[]>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposAddAppAccessRestrictions(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposAddAppAccessRestrictionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposSetAppAccessRestrictionsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposSetAppAccessRestrictionsBodySchema = z
    .union([z.object({ apps: z.array(z.string()) }), z.array(z.string())])
    .optional()

  const reposSetAppAccessRestrictionsResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_integration)],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.put(
    "reposSetAppAccessRestrictions",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposSetAppAccessRestrictionsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposSetAppAccessRestrictionsBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_integration[]>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposSetAppAccessRestrictions(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposSetAppAccessRestrictionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposRemoveAppAccessRestrictionsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposRemoveAppAccessRestrictionsBodySchema = z.union([
    z.object({ apps: z.array(z.string()) }),
    z.array(z.string()),
  ])

  const reposRemoveAppAccessRestrictionsResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_integration)],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.delete(
    "reposRemoveAppAccessRestrictions",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposRemoveAppAccessRestrictionsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposRemoveAppAccessRestrictionsBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_integration[]>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposRemoveAppAccessRestrictions(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposRemoveAppAccessRestrictionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetTeamsWithAccessToProtectedBranchParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposGetTeamsWithAccessToProtectedBranchResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_team)],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "reposGetTeamsWithAccessToProtectedBranch",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetTeamsWithAccessToProtectedBranchParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetTeamsWithAccessToProtectedBranch(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetTeamsWithAccessToProtectedBranchResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposAddTeamAccessRestrictionsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposAddTeamAccessRestrictionsBodySchema = z
    .union([z.object({ teams: z.array(z.string()) }), z.array(z.string())])
    .optional()

  const reposAddTeamAccessRestrictionsResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_team)],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.post(
    "reposAddTeamAccessRestrictions",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposAddTeamAccessRestrictionsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposAddTeamAccessRestrictionsBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team[]>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposAddTeamAccessRestrictions(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposAddTeamAccessRestrictionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposSetTeamAccessRestrictionsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposSetTeamAccessRestrictionsBodySchema = z
    .union([z.object({ teams: z.array(z.string()) }), z.array(z.string())])
    .optional()

  const reposSetTeamAccessRestrictionsResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_team)],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.put(
    "reposSetTeamAccessRestrictions",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposSetTeamAccessRestrictionsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposSetTeamAccessRestrictionsBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team[]>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposSetTeamAccessRestrictions(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposSetTeamAccessRestrictionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposRemoveTeamAccessRestrictionsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposRemoveTeamAccessRestrictionsBodySchema = z.union([
    z.object({ teams: z.array(z.string()) }),
    z.array(z.string()),
  ])

  const reposRemoveTeamAccessRestrictionsResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_team)],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.delete(
    "reposRemoveTeamAccessRestrictions",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposRemoveTeamAccessRestrictionsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposRemoveTeamAccessRestrictionsBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team[]>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposRemoveTeamAccessRestrictions(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposRemoveTeamAccessRestrictionsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposGetUsersWithAccessToProtectedBranchParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposGetUsersWithAccessToProtectedBranchResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_simple_user)],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "reposGetUsersWithAccessToProtectedBranch",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetUsersWithAccessToProtectedBranchParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_simple_user[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetUsersWithAccessToProtectedBranch(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetUsersWithAccessToProtectedBranchResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposAddUserAccessRestrictionsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposAddUserAccessRestrictionsBodySchema = z
    .union([z.object({ users: z.array(z.string()) }), z.array(z.string())])
    .optional()

  const reposAddUserAccessRestrictionsResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_simple_user)],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.post(
    "reposAddUserAccessRestrictions",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposAddUserAccessRestrictionsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposAddUserAccessRestrictionsBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_simple_user[]>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposAddUserAccessRestrictions(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposAddUserAccessRestrictionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposSetUserAccessRestrictionsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposSetUserAccessRestrictionsBodySchema = z
    .union([z.object({ users: z.array(z.string()) }), z.array(z.string())])
    .optional()

  const reposSetUserAccessRestrictionsResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_simple_user)],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.put(
    "reposSetUserAccessRestrictions",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposSetUserAccessRestrictionsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposSetUserAccessRestrictionsBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_simple_user[]>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposSetUserAccessRestrictions(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposSetUserAccessRestrictionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposRemoveUserAccessRestrictionsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposRemoveUserAccessRestrictionsBodySchema = z.union([
    z.object({ users: z.array(z.string()) }),
    z.array(z.string()),
  ])

  const reposRemoveUserAccessRestrictionsResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_simple_user)],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.delete(
    "reposRemoveUserAccessRestrictions",
    "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposRemoveUserAccessRestrictionsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposRemoveUserAccessRestrictionsBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_simple_user[]>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposRemoveUserAccessRestrictions(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposRemoveUserAccessRestrictionsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposRenameBranchParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposRenameBranchBodySchema = z.object({ new_name: z.string() })

  const reposRenameBranchResponseValidator = responseValidationFactory(
    [
      ["201", s_branch_with_protection],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "reposRenameBranch",
    "/repos/:owner/:repo/branches/:branch/rename",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposRenameBranchParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposRenameBranchBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_branch_with_protection>(201)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposRenameBranch(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposRenameBranchResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const checksCreateParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const checksCreateBodySchema = z.union([
    z.object({ status: z.object({}) }),
    z.object({ status: z.object({}).optional() }),
  ])

  const checksCreateResponseValidator = responseValidationFactory(
    [["201", s_check_run]],
    undefined,
  )

  router.post(
    "checksCreate",
    "/repos/:owner/:repo/check-runs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          checksCreateParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          checksCreateBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_check_run>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .checksCreate(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = checksCreateResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const checksGetParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    check_run_id: z.coerce.number(),
  })

  const checksGetResponseValidator = responseValidationFactory(
    [["200", s_check_run]],
    undefined,
  )

  router.get(
    "checksGet",
    "/repos/:owner/:repo/check-runs/:check_run_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          checksGetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_check_run>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .checksGet(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = checksGetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const checksUpdateParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    check_run_id: z.coerce.number(),
  })

  const checksUpdateBodySchema = z.object({
    name: z.string().optional(),
    details_url: z.string().optional(),
    external_id: z.string().optional(),
    started_at: z.string().datetime({ offset: true }).optional(),
    status: z.enum(["queued", "in_progress", "completed"]).optional(),
    conclusion: z
      .enum([
        "action_required",
        "cancelled",
        "failure",
        "neutral",
        "success",
        "skipped",
        "stale",
        "timed_out",
      ])
      .optional(),
    completed_at: z.string().datetime({ offset: true }).optional(),
    output: z
      .object({
        title: z.string().optional(),
        summary: z.string(),
        text: z.string().optional(),
        annotations: z
          .array(
            z.object({
              path: z.string(),
              start_line: z.coerce.number(),
              end_line: z.coerce.number(),
              start_column: z.coerce.number().optional(),
              end_column: z.coerce.number().optional(),
              annotation_level: z.enum(["notice", "warning", "failure"]),
              message: z.string(),
              title: z.string().optional(),
              raw_details: z.string().optional(),
            }),
          )
          .optional(),
        images: z
          .array(
            z.object({
              alt: z.string(),
              image_url: z.string(),
              caption: z.string().optional(),
            }),
          )
          .optional(),
      })
      .optional(),
    actions: z
      .array(
        z.object({
          label: z.string(),
          description: z.string(),
          identifier: z.string(),
        }),
      )
      .optional(),
  })

  const checksUpdateResponseValidator = responseValidationFactory(
    [["200", s_check_run]],
    undefined,
  )

  router.patch(
    "checksUpdate",
    "/repos/:owner/:repo/check-runs/:check_run_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          checksUpdateParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          checksUpdateBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_check_run>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .checksUpdate(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = checksUpdateResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const checksListAnnotationsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    check_run_id: z.coerce.number(),
  })

  const checksListAnnotationsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const checksListAnnotationsResponseValidator = responseValidationFactory(
    [["200", z.array(s_check_annotation)]],
    undefined,
  )

  router.get(
    "checksListAnnotations",
    "/repos/:owner/:repo/check-runs/:check_run_id/annotations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          checksListAnnotationsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          checksListAnnotationsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_check_annotation[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .checksListAnnotations(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = checksListAnnotationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const checksRerequestRunParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    check_run_id: z.coerce.number(),
  })

  const checksRerequestRunResponseValidator = responseValidationFactory(
    [
      ["201", s_empty_object],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_basic_error],
    ],
    undefined,
  )

  router.post(
    "checksRerequestRun",
    "/repos/:owner/:repo/check-runs/:check_run_id/rerequest",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          checksRerequestRunParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_empty_object>(201)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_basic_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .checksRerequestRun(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = checksRerequestRunResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const checksCreateSuiteParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const checksCreateSuiteBodySchema = z.object({ head_sha: z.string() })

  const checksCreateSuiteResponseValidator = responseValidationFactory(
    [
      ["200", s_check_suite],
      ["201", s_check_suite],
    ],
    undefined,
  )

  router.post(
    "checksCreateSuite",
    "/repos/:owner/:repo/check-suites",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          checksCreateSuiteParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          checksCreateSuiteBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_check_suite>(200)
        },
        with201() {
          return new KoaRuntimeResponse<t_check_suite>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .checksCreateSuite(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = checksCreateSuiteResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const checksSetSuitesPreferencesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const checksSetSuitesPreferencesBodySchema = z.object({
    auto_trigger_checks: z
      .array(
        z.object({ app_id: z.coerce.number(), setting: z.coerce.boolean() }),
      )
      .optional(),
  })

  const checksSetSuitesPreferencesResponseValidator = responseValidationFactory(
    [["200", s_check_suite_preference]],
    undefined,
  )

  router.patch(
    "checksSetSuitesPreferences",
    "/repos/:owner/:repo/check-suites/preferences",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          checksSetSuitesPreferencesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          checksSetSuitesPreferencesBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_check_suite_preference>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .checksSetSuitesPreferences(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = checksSetSuitesPreferencesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const checksGetSuiteParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    check_suite_id: z.coerce.number(),
  })

  const checksGetSuiteResponseValidator = responseValidationFactory(
    [["200", s_check_suite]],
    undefined,
  )

  router.get(
    "checksGetSuite",
    "/repos/:owner/:repo/check-suites/:check_suite_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          checksGetSuiteParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_check_suite>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .checksGetSuite(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = checksGetSuiteResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const checksListForSuiteParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    check_suite_id: z.coerce.number(),
  })

  const checksListForSuiteQuerySchema = z.object({
    check_name: z.string().optional(),
    status: z.enum(["queued", "in_progress", "completed"]).optional(),
    filter: z.enum(["latest", "all"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const checksListForSuiteResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          check_runs: z.array(s_check_run),
        }),
      ],
    ],
    undefined,
  )

  router.get(
    "checksListForSuite",
    "/repos/:owner/:repo/check-suites/:check_suite_id/check-runs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          checksListForSuiteParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          checksListForSuiteQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            check_runs: t_check_run[]
            total_count: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .checksListForSuite(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = checksListForSuiteResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const checksRerequestSuiteParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    check_suite_id: z.coerce.number(),
  })

  const checksRerequestSuiteResponseValidator = responseValidationFactory(
    [["201", s_empty_object]],
    undefined,
  )

  router.post(
    "checksRerequestSuite",
    "/repos/:owner/:repo/check-suites/:check_suite_id/rerequest",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          checksRerequestSuiteParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_empty_object>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .checksRerequestSuite(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = checksRerequestSuiteResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningListAlertsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const codeScanningListAlertsForRepoQuerySchema = z.object({
    tool_name: s_code_scanning_analysis_tool_name.optional(),
    tool_guid: s_code_scanning_analysis_tool_guid.optional(),
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
    ref: s_code_scanning_ref.optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    sort: z.enum(["created", "updated"]).optional(),
    state: s_code_scanning_alert_state_query.optional(),
    severity: s_code_scanning_alert_severity.optional(),
  })

  const codeScanningListAlertsForRepoResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_code_scanning_alert_items)],
        ["304", z.void()],
        ["403", s_basic_error],
        ["404", s_basic_error],
        [
          "503",
          z.object({
            code: z.string().optional(),
            message: z.string().optional(),
            documentation_url: z.string().optional(),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "codeScanningListAlertsForRepo",
    "/repos/:owner/:repo/code-scanning/alerts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningListAlertsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codeScanningListAlertsForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_code_scanning_alert_items[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codeScanningListAlertsForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningListAlertsForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningGetAlertParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    alert_number: s_alert_number,
  })

  const codeScanningGetAlertResponseValidator = responseValidationFactory(
    [
      ["200", s_code_scanning_alert],
      ["304", z.void()],
      ["403", s_basic_error],
      ["404", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

  router.get(
    "codeScanningGetAlert",
    "/repos/:owner/:repo/code-scanning/alerts/:alert_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningGetAlertParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_code_scanning_alert>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codeScanningGetAlert(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningGetAlertResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningUpdateAlertParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    alert_number: s_alert_number,
  })

  const codeScanningUpdateAlertBodySchema = z.object({
    state: s_code_scanning_alert_set_state,
    dismissed_reason: s_code_scanning_alert_dismissed_reason.optional(),
    dismissed_comment: s_code_scanning_alert_dismissed_comment.optional(),
  })

  const codeScanningUpdateAlertResponseValidator = responseValidationFactory(
    [
      ["200", s_code_scanning_alert],
      ["403", s_basic_error],
      ["404", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

  router.patch(
    "codeScanningUpdateAlert",
    "/repos/:owner/:repo/code-scanning/alerts/:alert_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningUpdateAlertParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codeScanningUpdateAlertBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_code_scanning_alert>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codeScanningUpdateAlert(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningUpdateAlertResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningListAlertInstancesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    alert_number: s_alert_number,
  })

  const codeScanningListAlertInstancesQuerySchema = z.object({
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
    ref: s_code_scanning_ref.optional(),
  })

  const codeScanningListAlertInstancesResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_code_scanning_alert_instance)],
        ["403", s_basic_error],
        ["404", s_basic_error],
        [
          "503",
          z.object({
            code: z.string().optional(),
            message: z.string().optional(),
            documentation_url: z.string().optional(),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "codeScanningListAlertInstances",
    "/repos/:owner/:repo/code-scanning/alerts/:alert_number/instances",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningListAlertInstancesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codeScanningListAlertInstancesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_code_scanning_alert_instance[]>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codeScanningListAlertInstances(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningListAlertInstancesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningListRecentAnalysesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const codeScanningListRecentAnalysesQuerySchema = z.object({
    tool_name: s_code_scanning_analysis_tool_name.optional(),
    tool_guid: s_code_scanning_analysis_tool_guid.optional(),
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
    ref: s_code_scanning_ref.optional(),
    sarif_id: s_code_scanning_analysis_sarif_id.optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    sort: z.enum(["created"]).optional(),
  })

  const codeScanningListRecentAnalysesResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_code_scanning_analysis)],
        ["403", s_basic_error],
        ["404", s_basic_error],
        [
          "503",
          z.object({
            code: z.string().optional(),
            message: z.string().optional(),
            documentation_url: z.string().optional(),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "codeScanningListRecentAnalyses",
    "/repos/:owner/:repo/code-scanning/analyses",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningListRecentAnalysesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codeScanningListRecentAnalysesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_code_scanning_analysis[]>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codeScanningListRecentAnalyses(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningListRecentAnalysesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningGetAnalysisParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    analysis_id: z.coerce.number(),
  })

  const codeScanningGetAnalysisResponseValidator = responseValidationFactory(
    [
      ["200", z.object({})],
      ["403", s_basic_error],
      ["404", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

  router.get(
    "codeScanningGetAnalysis",
    "/repos/:owner/:repo/code-scanning/analyses/:analysis_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningGetAnalysisParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            [key: string]: unknown
          }>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codeScanningGetAnalysis(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningGetAnalysisResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningDeleteAnalysisParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    analysis_id: z.coerce.number(),
  })

  const codeScanningDeleteAnalysisQuerySchema = z.object({
    confirm_delete: z.string().nullable().optional(),
  })

  const codeScanningDeleteAnalysisResponseValidator = responseValidationFactory(
    [
      ["200", s_code_scanning_analysis_deletion],
      ["400", s_scim_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

  router.delete(
    "codeScanningDeleteAnalysis",
    "/repos/:owner/:repo/code-scanning/analyses/:analysis_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningDeleteAnalysisParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codeScanningDeleteAnalysisQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_code_scanning_analysis_deletion>(200)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codeScanningDeleteAnalysis(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningDeleteAnalysisResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningListCodeqlDatabasesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const codeScanningListCodeqlDatabasesResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_code_scanning_codeql_database)],
        ["403", s_basic_error],
        ["404", s_basic_error],
        [
          "503",
          z.object({
            code: z.string().optional(),
            message: z.string().optional(),
            documentation_url: z.string().optional(),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "codeScanningListCodeqlDatabases",
    "/repos/:owner/:repo/code-scanning/codeql/databases",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningListCodeqlDatabasesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_code_scanning_codeql_database[]>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codeScanningListCodeqlDatabases(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningListCodeqlDatabasesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningGetCodeqlDatabaseParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    language: z.string(),
  })

  const codeScanningGetCodeqlDatabaseResponseValidator =
    responseValidationFactory(
      [
        ["200", s_code_scanning_codeql_database],
        ["302", z.void()],
        ["403", s_basic_error],
        ["404", s_basic_error],
        [
          "503",
          z.object({
            code: z.string().optional(),
            message: z.string().optional(),
            documentation_url: z.string().optional(),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "codeScanningGetCodeqlDatabase",
    "/repos/:owner/:repo/code-scanning/codeql/databases/:language",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningGetCodeqlDatabaseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_code_scanning_codeql_database>(200)
        },
        with302() {
          return new KoaRuntimeResponse<void>(302)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codeScanningGetCodeqlDatabase(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningGetCodeqlDatabaseResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningGetDefaultSetupParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const codeScanningGetDefaultSetupResponseValidator =
    responseValidationFactory(
      [
        ["200", s_code_scanning_default_setup],
        ["403", s_basic_error],
        ["404", s_basic_error],
        [
          "503",
          z.object({
            code: z.string().optional(),
            message: z.string().optional(),
            documentation_url: z.string().optional(),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "codeScanningGetDefaultSetup",
    "/repos/:owner/:repo/code-scanning/default-setup",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningGetDefaultSetupParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_code_scanning_default_setup>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codeScanningGetDefaultSetup(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningGetDefaultSetupResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningUpdateDefaultSetupParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const codeScanningUpdateDefaultSetupBodySchema =
    s_code_scanning_default_setup_update

  const codeScanningUpdateDefaultSetupResponseValidator =
    responseValidationFactory(
      [
        ["200", s_empty_object],
        ["202", s_code_scanning_default_setup_update_response],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["409", s_basic_error],
        [
          "503",
          z.object({
            code: z.string().optional(),
            message: z.string().optional(),
            documentation_url: z.string().optional(),
          }),
        ],
      ],
      undefined,
    )

  router.patch(
    "codeScanningUpdateDefaultSetup",
    "/repos/:owner/:repo/code-scanning/default-setup",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningUpdateDefaultSetupParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codeScanningUpdateDefaultSetupBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_empty_object>(200)
        },
        with202() {
          return new KoaRuntimeResponse<t_code_scanning_default_setup_update_response>(
            202,
          )
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with409() {
          return new KoaRuntimeResponse<t_basic_error>(409)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codeScanningUpdateDefaultSetup(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningUpdateDefaultSetupResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningUploadSarifParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const codeScanningUploadSarifBodySchema = z.object({
    commit_sha: s_code_scanning_analysis_commit_sha,
    ref: s_code_scanning_ref,
    sarif: s_code_scanning_analysis_sarif_file,
    checkout_uri: z.string().optional(),
    started_at: z.string().datetime({ offset: true }).optional(),
    tool_name: z.string().optional(),
    validate: z.coerce.boolean().optional(),
  })

  const codeScanningUploadSarifResponseValidator = responseValidationFactory(
    [
      ["202", s_code_scanning_sarifs_receipt],
      ["400", z.void()],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["413", z.void()],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

  router.post(
    "codeScanningUploadSarif",
    "/repos/:owner/:repo/code-scanning/sarifs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningUploadSarifParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codeScanningUploadSarifBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with202() {
          return new KoaRuntimeResponse<t_code_scanning_sarifs_receipt>(202)
        },
        with400() {
          return new KoaRuntimeResponse<void>(400)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with413() {
          return new KoaRuntimeResponse<void>(413)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codeScanningUploadSarif(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningUploadSarifResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codeScanningGetSarifParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    sarif_id: z.string(),
  })

  const codeScanningGetSarifResponseValidator = responseValidationFactory(
    [
      ["200", s_code_scanning_sarifs_status],
      ["403", s_basic_error],
      ["404", z.void()],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

  router.get(
    "codeScanningGetSarif",
    "/repos/:owner/:repo/code-scanning/sarifs/:sarif_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codeScanningGetSarifParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_code_scanning_sarifs_status>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codeScanningGetSarif(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codeScanningGetSarifResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCodeownersErrorsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCodeownersErrorsQuerySchema = z.object({
    ref: z.string().optional(),
  })

  const reposCodeownersErrorsResponseValidator = responseValidationFactory(
    [
      ["200", s_codeowners_errors],
      ["404", z.void()],
    ],
    undefined,
  )

  router.get(
    "reposCodeownersErrors",
    "/repos/:owner/:repo/codeowners/errors",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCodeownersErrorsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposCodeownersErrorsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_codeowners_errors>(200)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCodeownersErrors(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCodeownersErrorsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesListInRepositoryForAuthenticatedUserParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const codespacesListInRepositoryForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const codespacesListInRepositoryForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            codespaces: z.array(s_codespace),
          }),
        ],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "codespacesListInRepositoryForAuthenticatedUser",
    "/repos/:owner/:repo/codespaces",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesListInRepositoryForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codespacesListInRepositoryForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            codespaces: t_codespace[]
            total_count: number
          }>(200)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesListInRepositoryForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        codespacesListInRepositoryForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const codespacesCreateWithRepoForAuthenticatedUserParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const codespacesCreateWithRepoForAuthenticatedUserBodySchema = z
    .object({
      ref: z.string().optional(),
      location: z.string().optional(),
      geo: z
        .enum(["EuropeWest", "SoutheastAsia", "UsEast", "UsWest"])
        .optional(),
      client_ip: z.string().optional(),
      machine: z.string().optional(),
      devcontainer_path: z.string().optional(),
      multi_repo_permissions_opt_out: z.coerce.boolean().optional(),
      working_directory: z.string().optional(),
      idle_timeout_minutes: z.coerce.number().optional(),
      display_name: z.string().optional(),
      retention_period_minutes: z.coerce.number().optional(),
    })
    .nullable()

  const codespacesCreateWithRepoForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["201", s_codespace],
        ["202", s_codespace],
        ["400", s_scim_error],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        [
          "503",
          z.object({
            code: z.string().optional(),
            message: z.string().optional(),
            documentation_url: z.string().optional(),
          }),
        ],
      ],
      undefined,
    )

  router.post(
    "codespacesCreateWithRepoForAuthenticatedUser",
    "/repos/:owner/:repo/codespaces",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesCreateWithRepoForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codespacesCreateWithRepoForAuthenticatedUserBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_codespace>(201)
        },
        with202() {
          return new KoaRuntimeResponse<t_codespace>(202)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesCreateWithRepoForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesCreateWithRepoForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesListDevcontainersInRepositoryForAuthenticatedUserParamSchema =
    z.object({ owner: z.string(), repo: z.string() })

  const codespacesListDevcontainersInRepositoryForAuthenticatedUserQuerySchema =
    z.object({
      per_page: z.coerce.number().optional(),
      page: z.coerce.number().optional(),
    })

  const codespacesListDevcontainersInRepositoryForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            devcontainers: z.array(
              z.object({
                path: z.string(),
                name: z.string().optional(),
                display_name: z.string().optional(),
              }),
            ),
          }),
        ],
        ["400", s_scim_error],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "codespacesListDevcontainersInRepositoryForAuthenticatedUser",
    "/repos/:owner/:repo/codespaces/devcontainers",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesListDevcontainersInRepositoryForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codespacesListDevcontainersInRepositoryForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            devcontainers: {
              display_name?: string
              name?: string
              path: string
            }[]
            total_count: number
          }>(200)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesListDevcontainersInRepositoryForAuthenticatedUser(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        codespacesListDevcontainersInRepositoryForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const codespacesRepoMachinesForAuthenticatedUserParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const codespacesRepoMachinesForAuthenticatedUserQuerySchema = z.object({
    location: z.string().optional(),
    client_ip: z.string().optional(),
    ref: z.string().optional(),
  })

  const codespacesRepoMachinesForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            machines: z.array(s_codespace_machine),
          }),
        ],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "codespacesRepoMachinesForAuthenticatedUser",
    "/repos/:owner/:repo/codespaces/machines",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesRepoMachinesForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codespacesRepoMachinesForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            machines: t_codespace_machine[]
            total_count: number
          }>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesRepoMachinesForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesRepoMachinesForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesPreFlightWithRepoForAuthenticatedUserParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const codespacesPreFlightWithRepoForAuthenticatedUserQuerySchema = z.object({
    ref: z.string().optional(),
    client_ip: z.string().optional(),
  })

  const codespacesPreFlightWithRepoForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            billable_owner: s_simple_user.optional(),
            defaults: z
              .object({
                location: z.string(),
                devcontainer_path: z.string().nullable(),
              })
              .optional(),
          }),
        ],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "codespacesPreFlightWithRepoForAuthenticatedUser",
    "/repos/:owner/:repo/codespaces/new",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesPreFlightWithRepoForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codespacesPreFlightWithRepoForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            billable_owner?: t_simple_user
            defaults?: {
              devcontainer_path: string | null
              location: string
            }
          }>(200)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesPreFlightWithRepoForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        codespacesPreFlightWithRepoForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const codespacesListRepoSecretsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const codespacesListRepoSecretsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const codespacesListRepoSecretsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          secrets: z.array(s_repo_codespaces_secret),
        }),
      ],
    ],
    undefined,
  )

  router.get(
    "codespacesListRepoSecrets",
    "/repos/:owner/:repo/codespaces/secrets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesListRepoSecretsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          codespacesListRepoSecretsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            secrets: t_repo_codespaces_secret[]
            total_count: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesListRepoSecrets(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesListRepoSecretsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesGetRepoPublicKeyParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const codespacesGetRepoPublicKeyResponseValidator = responseValidationFactory(
    [["200", s_codespaces_public_key]],
    undefined,
  )

  router.get(
    "codespacesGetRepoPublicKey",
    "/repos/:owner/:repo/codespaces/secrets/public-key",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesGetRepoPublicKeyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_codespaces_public_key>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesGetRepoPublicKey(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesGetRepoPublicKeyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesGetRepoSecretParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  })

  const codespacesGetRepoSecretResponseValidator = responseValidationFactory(
    [["200", s_repo_codespaces_secret]],
    undefined,
  )

  router.get(
    "codespacesGetRepoSecret",
    "/repos/:owner/:repo/codespaces/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesGetRepoSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_repo_codespaces_secret>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesGetRepoSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesGetRepoSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesCreateOrUpdateRepoSecretParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  })

  const codespacesCreateOrUpdateRepoSecretBodySchema = z.object({
    encrypted_value: z.string().optional(),
    key_id: z.string().optional(),
  })

  const codespacesCreateOrUpdateRepoSecretResponseValidator =
    responseValidationFactory(
      [
        ["201", s_empty_object],
        ["204", z.void()],
      ],
      undefined,
    )

  router.put(
    "codespacesCreateOrUpdateRepoSecret",
    "/repos/:owner/:repo/codespaces/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesCreateOrUpdateRepoSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codespacesCreateOrUpdateRepoSecretBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_empty_object>(201)
        },
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesCreateOrUpdateRepoSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesCreateOrUpdateRepoSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesDeleteRepoSecretParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  })

  const codespacesDeleteRepoSecretResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.delete(
    "codespacesDeleteRepoSecret",
    "/repos/:owner/:repo/codespaces/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesDeleteRepoSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesDeleteRepoSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesDeleteRepoSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListCollaboratorsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListCollaboratorsQuerySchema = z.object({
    affiliation: z.enum(["outside", "direct", "all"]).optional(),
    permission: z
      .enum(["pull", "triage", "push", "maintain", "admin"])
      .optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposListCollaboratorsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_collaborator)],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposListCollaborators",
    "/repos/:owner/:repo/collaborators",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListCollaboratorsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListCollaboratorsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_collaborator[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListCollaborators(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListCollaboratorsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCheckCollaboratorParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    username: z.string(),
  })

  const reposCheckCollaboratorResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", z.void()],
    ],
    undefined,
  )

  router.get(
    "reposCheckCollaborator",
    "/repos/:owner/:repo/collaborators/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCheckCollaboratorParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCheckCollaborator(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCheckCollaboratorResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposAddCollaboratorParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    username: z.string(),
  })

  const reposAddCollaboratorBodySchema = z
    .object({ permission: z.string().optional() })
    .optional()

  const reposAddCollaboratorResponseValidator = responseValidationFactory(
    [
      ["201", s_repository_invitation],
      ["204", z.void()],
      ["403", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.put(
    "reposAddCollaborator",
    "/repos/:owner/:repo/collaborators/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposAddCollaboratorParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposAddCollaboratorBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_repository_invitation>(201)
        },
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposAddCollaborator(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposAddCollaboratorResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposRemoveCollaboratorParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    username: z.string(),
  })

  const reposRemoveCollaboratorResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["403", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.delete(
    "reposRemoveCollaborator",
    "/repos/:owner/:repo/collaborators/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposRemoveCollaboratorParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposRemoveCollaborator(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposRemoveCollaboratorResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetCollaboratorPermissionLevelParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    username: z.string(),
  })

  const reposGetCollaboratorPermissionLevelResponseValidator =
    responseValidationFactory(
      [
        ["200", s_repository_collaborator_permission],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "reposGetCollaboratorPermissionLevel",
    "/repos/:owner/:repo/collaborators/:username/permission",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetCollaboratorPermissionLevelParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_repository_collaborator_permission>(
            200,
          )
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetCollaboratorPermissionLevel(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetCollaboratorPermissionLevelResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposListCommitCommentsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListCommitCommentsForRepoQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposListCommitCommentsForRepoResponseValidator =
    responseValidationFactory([["200", z.array(s_commit_comment)]], undefined)

  router.get(
    "reposListCommitCommentsForRepo",
    "/repos/:owner/:repo/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListCommitCommentsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListCommitCommentsForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_commit_comment[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListCommitCommentsForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListCommitCommentsForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetCommitCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  const reposGetCommitCommentResponseValidator = responseValidationFactory(
    [
      ["200", s_commit_comment],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposGetCommitComment",
    "/repos/:owner/:repo/comments/:comment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetCommitCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_commit_comment>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetCommitComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetCommitCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUpdateCommitCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  const reposUpdateCommitCommentBodySchema = z.object({ body: z.string() })

  const reposUpdateCommitCommentResponseValidator = responseValidationFactory(
    [
      ["200", s_commit_comment],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.patch(
    "reposUpdateCommitComment",
    "/repos/:owner/:repo/comments/:comment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdateCommitCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdateCommitCommentBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_commit_comment>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposUpdateCommitComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdateCommitCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteCommitCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  const reposDeleteCommitCommentResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.delete(
    "reposDeleteCommitComment",
    "/repos/:owner/:repo/comments/:comment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteCommitCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDeleteCommitComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteCommitCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsListForCommitCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  const reactionsListForCommitCommentQuerySchema = z.object({
    content: z
      .enum([
        "+1",
        "-1",
        "laugh",
        "confused",
        "heart",
        "hooray",
        "rocket",
        "eyes",
      ])
      .optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reactionsListForCommitCommentResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_reaction)],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "reactionsListForCommitComment",
    "/repos/:owner/:repo/comments/:comment_id/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsListForCommitCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reactionsListForCommitCommentQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_reaction[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsListForCommitComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsListForCommitCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsCreateForCommitCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  const reactionsCreateForCommitCommentBodySchema = z.object({
    content: z.enum([
      "+1",
      "-1",
      "laugh",
      "confused",
      "heart",
      "hooray",
      "rocket",
      "eyes",
    ]),
  })

  const reactionsCreateForCommitCommentResponseValidator =
    responseValidationFactory(
      [
        ["200", s_reaction],
        ["201", s_reaction],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.post(
    "reactionsCreateForCommitComment",
    "/repos/:owner/:repo/comments/:comment_id/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsCreateForCommitCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reactionsCreateForCommitCommentBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_reaction>(200)
        },
        with201() {
          return new KoaRuntimeResponse<t_reaction>(201)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsCreateForCommitComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsCreateForCommitCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsDeleteForCommitCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
    reaction_id: z.coerce.number(),
  })

  const reactionsDeleteForCommitCommentResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "reactionsDeleteForCommitComment",
    "/repos/:owner/:repo/comments/:comment_id/reactions/:reaction_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsDeleteForCommitCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsDeleteForCommitComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsDeleteForCommitCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListCommitsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListCommitsQuerySchema = z.object({
    sha: z.string().optional(),
    path: z.string().optional(),
    author: z.string().optional(),
    committer: z.string().optional(),
    since: z.string().datetime({ offset: true }).optional(),
    until: z.string().datetime({ offset: true }).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposListCommitsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_commit)],
      ["400", s_scim_error],
      ["404", s_basic_error],
      ["409", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposListCommits",
    "/repos/:owner/:repo/commits",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListCommitsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListCommitsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_commit[]>(200)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with409() {
          return new KoaRuntimeResponse<t_basic_error>(409)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListCommits(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListCommitsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListBranchesForHeadCommitParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    commit_sha: z.string(),
  })

  const reposListBranchesForHeadCommitResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_branch_short)],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.get(
    "reposListBranchesForHeadCommit",
    "/repos/:owner/:repo/commits/:commit_sha/branches-where-head",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListBranchesForHeadCommitParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_branch_short[]>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListBranchesForHeadCommit(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListBranchesForHeadCommitResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListCommentsForCommitParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    commit_sha: z.string(),
  })

  const reposListCommentsForCommitQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposListCommentsForCommitResponseValidator = responseValidationFactory(
    [["200", z.array(s_commit_comment)]],
    undefined,
  )

  router.get(
    "reposListCommentsForCommit",
    "/repos/:owner/:repo/commits/:commit_sha/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListCommentsForCommitParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListCommentsForCommitQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_commit_comment[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListCommentsForCommit(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListCommentsForCommitResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateCommitCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    commit_sha: z.string(),
  })

  const reposCreateCommitCommentBodySchema = z.object({
    body: z.string(),
    path: z.string().optional(),
    position: z.coerce.number().optional(),
    line: z.coerce.number().optional(),
  })

  const reposCreateCommitCommentResponseValidator = responseValidationFactory(
    [
      ["201", s_commit_comment],
      ["403", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "reposCreateCommitComment",
    "/repos/:owner/:repo/commits/:commit_sha/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateCommitCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateCommitCommentBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_commit_comment>(201)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCreateCommitComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateCommitCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListPullRequestsAssociatedWithCommitParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    commit_sha: z.string(),
  })

  const reposListPullRequestsAssociatedWithCommitQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposListPullRequestsAssociatedWithCommitResponseValidator =
    responseValidationFactory(
      [["200", z.array(s_pull_request_simple)]],
      undefined,
    )

  router.get(
    "reposListPullRequestsAssociatedWithCommit",
    "/repos/:owner/:repo/commits/:commit_sha/pulls",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListPullRequestsAssociatedWithCommitParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListPullRequestsAssociatedWithCommitQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_pull_request_simple[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListPullRequestsAssociatedWithCommit(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListPullRequestsAssociatedWithCommitResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposGetCommitParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  })

  const reposGetCommitQuerySchema = z.object({
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
  })

  const reposGetCommitResponseValidator = responseValidationFactory(
    [
      ["200", s_commit],
      ["404", s_basic_error],
      ["422", s_validation_error],
      ["500", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

  router.get(
    "reposGetCommit",
    "/repos/:owner/:repo/commits/:ref",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetCommitParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetCommitQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_commit>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetCommit(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetCommitResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const checksListForRefParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  })

  const checksListForRefQuerySchema = z.object({
    check_name: z.string().optional(),
    status: z.enum(["queued", "in_progress", "completed"]).optional(),
    filter: z.enum(["latest", "all"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
    app_id: z.coerce.number().optional(),
  })

  const checksListForRefResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          check_runs: z.array(s_check_run),
        }),
      ],
    ],
    undefined,
  )

  router.get(
    "checksListForRef",
    "/repos/:owner/:repo/commits/:ref/check-runs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          checksListForRefParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          checksListForRefQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            check_runs: t_check_run[]
            total_count: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .checksListForRef(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = checksListForRefResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const checksListSuitesForRefParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  })

  const checksListSuitesForRefQuerySchema = z.object({
    app_id: z.coerce.number().optional(),
    check_name: z.string().optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const checksListSuitesForRefResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          check_suites: z.array(s_check_suite),
        }),
      ],
    ],
    undefined,
  )

  router.get(
    "checksListSuitesForRef",
    "/repos/:owner/:repo/commits/:ref/check-suites",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          checksListSuitesForRefParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          checksListSuitesForRefQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            check_suites: t_check_suite[]
            total_count: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .checksListSuitesForRef(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = checksListSuitesForRefResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetCombinedStatusForRefParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  })

  const reposGetCombinedStatusForRefQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposGetCombinedStatusForRefResponseValidator =
    responseValidationFactory(
      [
        ["200", s_combined_commit_status],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "reposGetCombinedStatusForRef",
    "/repos/:owner/:repo/commits/:ref/status",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetCombinedStatusForRefParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetCombinedStatusForRefQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_combined_commit_status>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetCombinedStatusForRef(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetCombinedStatusForRefResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListCommitStatusesForRefParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  })

  const reposListCommitStatusesForRefQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposListCommitStatusesForRefResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_status)],
        ["301", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "reposListCommitStatusesForRef",
    "/repos/:owner/:repo/commits/:ref/statuses",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListCommitStatusesForRefParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListCommitStatusesForRefQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_status[]>(200)
        },
        with301() {
          return new KoaRuntimeResponse<t_basic_error>(301)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListCommitStatusesForRef(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListCommitStatusesForRefResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetCommunityProfileMetricsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetCommunityProfileMetricsResponseValidator =
    responseValidationFactory([["200", s_community_profile]], undefined)

  router.get(
    "reposGetCommunityProfileMetrics",
    "/repos/:owner/:repo/community/profile",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetCommunityProfileMetricsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_community_profile>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetCommunityProfileMetrics(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetCommunityProfileMetricsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCompareCommitsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    basehead: z.string(),
  })

  const reposCompareCommitsQuerySchema = z.object({
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
  })

  const reposCompareCommitsResponseValidator = responseValidationFactory(
    [
      ["200", s_commit_comparison],
      ["404", s_basic_error],
      ["500", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

  router.get(
    "reposCompareCommits",
    "/repos/:owner/:repo/compare/:basehead",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCompareCommitsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposCompareCommitsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_commit_comparison>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCompareCommits(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCompareCommitsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetContentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    path: z.string(),
  })

  const reposGetContentQuerySchema = z.object({ ref: z.string().optional() })

  const reposGetContentResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.union([
          s_content_directory,
          s_content_file,
          s_content_symlink,
          s_content_submodule,
        ]),
      ],
      ["302", z.void()],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposGetContent",
    "/repos/:owner/:repo/contents/:path",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetContentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetContentQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<
            | t_content_directory
            | t_content_file
            | t_content_symlink
            | t_content_submodule
          >(200)
        },
        with302() {
          return new KoaRuntimeResponse<void>(302)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetContent(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetContentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateOrUpdateFileContentsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    path: z.string(),
  })

  const reposCreateOrUpdateFileContentsBodySchema = z.object({
    message: z.string(),
    content: z.string(),
    sha: z.string().optional(),
    branch: z.string().optional(),
    committer: z
      .object({
        name: z.string(),
        email: z.string(),
        date: z.string().optional(),
      })
      .optional(),
    author: z
      .object({
        name: z.string(),
        email: z.string(),
        date: z.string().optional(),
      })
      .optional(),
  })

  const reposCreateOrUpdateFileContentsResponseValidator =
    responseValidationFactory(
      [
        ["200", s_file_commit],
        ["201", s_file_commit],
        ["404", s_basic_error],
        ["409", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.put(
    "reposCreateOrUpdateFileContents",
    "/repos/:owner/:repo/contents/:path",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateOrUpdateFileContentsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateOrUpdateFileContentsBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_file_commit>(200)
        },
        with201() {
          return new KoaRuntimeResponse<t_file_commit>(201)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with409() {
          return new KoaRuntimeResponse<t_basic_error>(409)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCreateOrUpdateFileContents(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateOrUpdateFileContentsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteFileParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    path: z.string(),
  })

  const reposDeleteFileBodySchema = z.object({
    message: z.string(),
    sha: z.string(),
    branch: z.string().optional(),
    committer: z
      .object({ name: z.string().optional(), email: z.string().optional() })
      .optional(),
    author: z
      .object({ name: z.string().optional(), email: z.string().optional() })
      .optional(),
  })

  const reposDeleteFileResponseValidator = responseValidationFactory(
    [
      ["200", s_file_commit],
      ["404", s_basic_error],
      ["409", s_basic_error],
      ["422", s_validation_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

  router.delete(
    "reposDeleteFile",
    "/repos/:owner/:repo/contents/:path",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteFileParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposDeleteFileBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_file_commit>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with409() {
          return new KoaRuntimeResponse<t_basic_error>(409)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDeleteFile(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteFileResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListContributorsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListContributorsQuerySchema = z.object({
    anon: z.string().optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposListContributorsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_contributor)],
      ["204", z.void()],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposListContributors",
    "/repos/:owner/:repo/contributors",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListContributorsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListContributorsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_contributor[]>(200)
        },
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListContributors(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListContributorsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependabotListAlertsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const dependabotListAlertsForRepoQuerySchema = z.object({
    state: z.string().optional(),
    severity: z.string().optional(),
    ecosystem: z.string().optional(),
    package: z.string().optional(),
    manifest: z.string().optional(),
    scope: z.enum(["development", "runtime"]).optional(),
    sort: z.enum(["created", "updated"]).optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
    before: z.string().optional(),
    after: z.string().optional(),
    first: z.coerce.number().optional(),
    last: z.coerce.number().optional(),
  })

  const dependabotListAlertsForRepoResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_dependabot_alert)],
        ["304", z.void()],
        ["400", s_scim_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", s_validation_error_simple],
      ],
      undefined,
    )

  router.get(
    "dependabotListAlertsForRepo",
    "/repos/:owner/:repo/dependabot/alerts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotListAlertsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          dependabotListAlertsForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_dependabot_alert[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .dependabotListAlertsForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotListAlertsForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependabotGetAlertParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    alert_number: s_alert_number,
  })

  const dependabotGetAlertResponseValidator = responseValidationFactory(
    [
      ["200", s_dependabot_alert],
      ["304", z.void()],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "dependabotGetAlert",
    "/repos/:owner/:repo/dependabot/alerts/:alert_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotGetAlertParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_dependabot_alert>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .dependabotGetAlert(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotGetAlertResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependabotUpdateAlertParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    alert_number: s_alert_number,
  })

  const dependabotUpdateAlertBodySchema = z.object({
    state: z.enum(["dismissed", "open"]),
    dismissed_reason: z
      .enum([
        "fix_started",
        "inaccurate",
        "no_bandwidth",
        "not_used",
        "tolerable_risk",
      ])
      .optional(),
    dismissed_comment: z.string().optional(),
  })

  const dependabotUpdateAlertResponseValidator = responseValidationFactory(
    [
      ["200", s_dependabot_alert],
      ["400", s_scim_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["409", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

  router.patch(
    "dependabotUpdateAlert",
    "/repos/:owner/:repo/dependabot/alerts/:alert_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotUpdateAlertParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          dependabotUpdateAlertBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_dependabot_alert>(200)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with409() {
          return new KoaRuntimeResponse<t_basic_error>(409)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .dependabotUpdateAlert(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotUpdateAlertResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependabotListRepoSecretsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const dependabotListRepoSecretsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const dependabotListRepoSecretsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          secrets: z.array(s_dependabot_secret),
        }),
      ],
    ],
    undefined,
  )

  router.get(
    "dependabotListRepoSecrets",
    "/repos/:owner/:repo/dependabot/secrets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotListRepoSecretsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          dependabotListRepoSecretsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            secrets: t_dependabot_secret[]
            total_count: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .dependabotListRepoSecrets(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotListRepoSecretsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependabotGetRepoPublicKeyParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const dependabotGetRepoPublicKeyResponseValidator = responseValidationFactory(
    [["200", s_dependabot_public_key]],
    undefined,
  )

  router.get(
    "dependabotGetRepoPublicKey",
    "/repos/:owner/:repo/dependabot/secrets/public-key",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotGetRepoPublicKeyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_dependabot_public_key>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .dependabotGetRepoPublicKey(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotGetRepoPublicKeyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependabotGetRepoSecretParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  })

  const dependabotGetRepoSecretResponseValidator = responseValidationFactory(
    [["200", s_dependabot_secret]],
    undefined,
  )

  router.get(
    "dependabotGetRepoSecret",
    "/repos/:owner/:repo/dependabot/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotGetRepoSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_dependabot_secret>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .dependabotGetRepoSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotGetRepoSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependabotCreateOrUpdateRepoSecretParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  })

  const dependabotCreateOrUpdateRepoSecretBodySchema = z.object({
    encrypted_value: z.string().optional(),
    key_id: z.string().optional(),
  })

  const dependabotCreateOrUpdateRepoSecretResponseValidator =
    responseValidationFactory(
      [
        ["201", s_empty_object],
        ["204", z.void()],
      ],
      undefined,
    )

  router.put(
    "dependabotCreateOrUpdateRepoSecret",
    "/repos/:owner/:repo/dependabot/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotCreateOrUpdateRepoSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          dependabotCreateOrUpdateRepoSecretBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_empty_object>(201)
        },
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .dependabotCreateOrUpdateRepoSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotCreateOrUpdateRepoSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const dependabotDeleteRepoSecretParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    secret_name: z.string(),
  })

  const dependabotDeleteRepoSecretResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.delete(
    "dependabotDeleteRepoSecret",
    "/repos/:owner/:repo/dependabot/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependabotDeleteRepoSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .dependabotDeleteRepoSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependabotDeleteRepoSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependencyGraphDiffRangeParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    basehead: z.string(),
  })

  const dependencyGraphDiffRangeQuerySchema = z.object({
    name: z.string().optional(),
  })

  const dependencyGraphDiffRangeResponseValidator = responseValidationFactory(
    [
      ["200", s_dependency_graph_diff],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "dependencyGraphDiffRange",
    "/repos/:owner/:repo/dependency-graph/compare/:basehead",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependencyGraphDiffRangeParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          dependencyGraphDiffRangeQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_dependency_graph_diff>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .dependencyGraphDiffRange(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependencyGraphDiffRangeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependencyGraphExportSbomParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const dependencyGraphExportSbomResponseValidator = responseValidationFactory(
    [
      ["200", s_dependency_graph_spdx_sbom],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "dependencyGraphExportSbom",
    "/repos/:owner/:repo/dependency-graph/sbom",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependencyGraphExportSbomParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_dependency_graph_spdx_sbom>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .dependencyGraphExportSbom(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependencyGraphExportSbomResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const dependencyGraphCreateRepositorySnapshotParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const dependencyGraphCreateRepositorySnapshotBodySchema = s_snapshot

  const dependencyGraphCreateRepositorySnapshotResponseValidator =
    responseValidationFactory(
      [
        [
          "201",
          z.object({
            id: z.coerce.number(),
            created_at: z.string(),
            result: z.string(),
            message: z.string(),
          }),
        ],
      ],
      undefined,
    )

  router.post(
    "dependencyGraphCreateRepositorySnapshot",
    "/repos/:owner/:repo/dependency-graph/snapshots",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          dependencyGraphCreateRepositorySnapshotParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          dependencyGraphCreateRepositorySnapshotBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<{
            created_at: string
            id: number
            message: string
            result: string
          }>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .dependencyGraphCreateRepositorySnapshot(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = dependencyGraphCreateRepositorySnapshotResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposListDeploymentsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListDeploymentsQuerySchema = z.object({
    sha: z.string().optional(),
    ref: z.string().optional(),
    task: z.string().optional(),
    environment: z.string().nullable().optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposListDeploymentsResponseValidator = responseValidationFactory(
    [["200", z.array(s_deployment)]],
    undefined,
  )

  router.get(
    "reposListDeployments",
    "/repos/:owner/:repo/deployments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListDeploymentsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListDeploymentsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_deployment[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListDeployments(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListDeploymentsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateDeploymentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCreateDeploymentBodySchema = z.object({
    ref: z.string(),
    task: z.string().optional(),
    auto_merge: z.coerce.boolean().optional(),
    required_contexts: z.array(z.string()).optional(),
    payload: z.union([z.object({}), z.string()]).optional(),
    environment: z.string().optional(),
    description: z.string().nullable().optional(),
    transient_environment: z.coerce.boolean().optional(),
    production_environment: z.coerce.boolean().optional(),
  })

  const reposCreateDeploymentResponseValidator = responseValidationFactory(
    [
      ["201", s_deployment],
      ["202", z.object({ message: z.string().optional() })],
      ["409", z.void()],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "reposCreateDeployment",
    "/repos/:owner/:repo/deployments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateDeploymentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateDeploymentBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_deployment>(201)
        },
        with202() {
          return new KoaRuntimeResponse<{
            message?: string
          }>(202)
        },
        with409() {
          return new KoaRuntimeResponse<void>(409)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCreateDeployment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateDeploymentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetDeploymentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    deployment_id: z.coerce.number(),
  })

  const reposGetDeploymentResponseValidator = responseValidationFactory(
    [
      ["200", s_deployment],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposGetDeployment",
    "/repos/:owner/:repo/deployments/:deployment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetDeploymentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_deployment>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetDeployment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetDeploymentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteDeploymentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    deployment_id: z.coerce.number(),
  })

  const reposDeleteDeploymentResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

  router.delete(
    "reposDeleteDeployment",
    "/repos/:owner/:repo/deployments/:deployment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteDeploymentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDeleteDeployment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteDeploymentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListDeploymentStatusesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    deployment_id: z.coerce.number(),
  })

  const reposListDeploymentStatusesQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposListDeploymentStatusesResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_deployment_status)],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "reposListDeploymentStatuses",
    "/repos/:owner/:repo/deployments/:deployment_id/statuses",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListDeploymentStatusesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListDeploymentStatusesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_deployment_status[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListDeploymentStatuses(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListDeploymentStatusesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateDeploymentStatusParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    deployment_id: z.coerce.number(),
  })

  const reposCreateDeploymentStatusBodySchema = z.object({
    state: z.enum([
      "error",
      "failure",
      "inactive",
      "in_progress",
      "queued",
      "pending",
      "success",
    ]),
    target_url: z.string().optional(),
    log_url: z.string().optional(),
    description: z.string().optional(),
    environment: z.string().optional(),
    environment_url: z.string().optional(),
    auto_inactive: z.coerce.boolean().optional(),
  })

  const reposCreateDeploymentStatusResponseValidator =
    responseValidationFactory(
      [
        ["201", s_deployment_status],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.post(
    "reposCreateDeploymentStatus",
    "/repos/:owner/:repo/deployments/:deployment_id/statuses",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateDeploymentStatusParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateDeploymentStatusBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_deployment_status>(201)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCreateDeploymentStatus(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateDeploymentStatusResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetDeploymentStatusParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    deployment_id: z.coerce.number(),
    status_id: z.coerce.number(),
  })

  const reposGetDeploymentStatusResponseValidator = responseValidationFactory(
    [
      ["200", s_deployment_status],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposGetDeploymentStatus",
    "/repos/:owner/:repo/deployments/:deployment_id/statuses/:status_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetDeploymentStatusParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_deployment_status>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetDeploymentStatus(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetDeploymentStatusResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateDispatchEventParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCreateDispatchEventBodySchema = z.object({
    event_type: z.string(),
    client_payload: z.object({}).optional(),
  })

  const reposCreateDispatchEventResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "reposCreateDispatchEvent",
    "/repos/:owner/:repo/dispatches",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateDispatchEventParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateDispatchEventBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCreateDispatchEvent(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateDispatchEventResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetAllEnvironmentsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetAllEnvironmentsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposGetAllEnvironmentsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number().optional(),
          environments: z.array(s_environment).optional(),
        }),
      ],
    ],
    undefined,
  )

  router.get(
    "reposGetAllEnvironments",
    "/repos/:owner/:repo/environments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetAllEnvironmentsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetAllEnvironmentsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            environments?: t_environment[]
            total_count?: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetAllEnvironments(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetAllEnvironmentsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetEnvironmentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
  })

  const reposGetEnvironmentResponseValidator = responseValidationFactory(
    [["200", s_environment]],
    undefined,
  )

  router.get(
    "reposGetEnvironment",
    "/repos/:owner/:repo/environments/:environment_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetEnvironmentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_environment>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetEnvironment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetEnvironmentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateOrUpdateEnvironmentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
  })

  const reposCreateOrUpdateEnvironmentBodySchema = z
    .object({
      wait_timer: s_wait_timer.optional(),
      reviewers: z
        .array(
          z.object({
            type: s_deployment_reviewer_type.optional(),
            id: z.coerce.number().optional(),
          }),
        )
        .nullable()
        .optional(),
      deployment_branch_policy: s_deployment_branch_policy_settings.optional(),
    })
    .nullable()
    .optional()

  const reposCreateOrUpdateEnvironmentResponseValidator =
    responseValidationFactory(
      [
        ["200", s_environment],
        ["422", s_basic_error],
      ],
      undefined,
    )

  router.put(
    "reposCreateOrUpdateEnvironment",
    "/repos/:owner/:repo/environments/:environment_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateOrUpdateEnvironmentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateOrUpdateEnvironmentBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_environment>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_basic_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCreateOrUpdateEnvironment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateOrUpdateEnvironmentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteAnEnvironmentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
  })

  const reposDeleteAnEnvironmentResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.delete(
    "reposDeleteAnEnvironment",
    "/repos/:owner/:repo/environments/:environment_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteAnEnvironmentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDeleteAnEnvironment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteAnEnvironmentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListDeploymentBranchPoliciesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
  })

  const reposListDeploymentBranchPoliciesQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposListDeploymentBranchPoliciesResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            branch_policies: z.array(s_deployment_branch_policy),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "reposListDeploymentBranchPolicies",
    "/repos/:owner/:repo/environments/:environment_name/deployment-branch-policies",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListDeploymentBranchPoliciesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListDeploymentBranchPoliciesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            branch_policies: t_deployment_branch_policy[]
            total_count: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListDeploymentBranchPolicies(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListDeploymentBranchPoliciesResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposCreateDeploymentBranchPolicyParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
  })

  const reposCreateDeploymentBranchPolicyBodySchema =
    s_deployment_branch_policy_name_pattern

  const reposCreateDeploymentBranchPolicyResponseValidator =
    responseValidationFactory(
      [
        ["200", s_deployment_branch_policy],
        ["303", z.void()],
        ["404", z.void()],
      ],
      undefined,
    )

  router.post(
    "reposCreateDeploymentBranchPolicy",
    "/repos/:owner/:repo/environments/:environment_name/deployment-branch-policies",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateDeploymentBranchPolicyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateDeploymentBranchPolicyBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_deployment_branch_policy>(200)
        },
        with303() {
          return new KoaRuntimeResponse<void>(303)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCreateDeploymentBranchPolicy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateDeploymentBranchPolicyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposGetDeploymentBranchPolicyParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
    branch_policy_id: z.coerce.number(),
  })

  const reposGetDeploymentBranchPolicyResponseValidator =
    responseValidationFactory([["200", s_deployment_branch_policy]], undefined)

  router.get(
    "reposGetDeploymentBranchPolicy",
    "/repos/:owner/:repo/environments/:environment_name/deployment-branch-policies/:branch_policy_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetDeploymentBranchPolicyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_deployment_branch_policy>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetDeploymentBranchPolicy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetDeploymentBranchPolicyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUpdateDeploymentBranchPolicyParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
    branch_policy_id: z.coerce.number(),
  })

  const reposUpdateDeploymentBranchPolicyBodySchema =
    s_deployment_branch_policy_name_pattern

  const reposUpdateDeploymentBranchPolicyResponseValidator =
    responseValidationFactory([["200", s_deployment_branch_policy]], undefined)

  router.put(
    "reposUpdateDeploymentBranchPolicy",
    "/repos/:owner/:repo/environments/:environment_name/deployment-branch-policies/:branch_policy_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdateDeploymentBranchPolicyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdateDeploymentBranchPolicyBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_deployment_branch_policy>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposUpdateDeploymentBranchPolicy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdateDeploymentBranchPolicyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposDeleteDeploymentBranchPolicyParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
    branch_policy_id: z.coerce.number(),
  })

  const reposDeleteDeploymentBranchPolicyResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "reposDeleteDeploymentBranchPolicy",
    "/repos/:owner/:repo/environments/:environment_name/deployment-branch-policies/:branch_policy_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteDeploymentBranchPolicyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDeleteDeploymentBranchPolicy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteDeploymentBranchPolicyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposGetAllDeploymentProtectionRulesParamSchema = z.object({
    environment_name: z.string(),
    repo: z.string(),
    owner: z.string(),
  })

  const reposGetAllDeploymentProtectionRulesResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number().optional(),
            custom_deployment_protection_rules: z
              .array(s_deployment_protection_rule)
              .optional(),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "reposGetAllDeploymentProtectionRules",
    "/repos/:owner/:repo/environments/:environment_name/deployment_protection_rules",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetAllDeploymentProtectionRulesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            custom_deployment_protection_rules?: t_deployment_protection_rule[]
            total_count?: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetAllDeploymentProtectionRules(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetAllDeploymentProtectionRulesResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposCreateDeploymentProtectionRuleParamSchema = z.object({
    environment_name: z.string(),
    repo: z.string(),
    owner: z.string(),
  })

  const reposCreateDeploymentProtectionRuleBodySchema = z.object({
    integration_id: z.coerce.number().optional(),
  })

  const reposCreateDeploymentProtectionRuleResponseValidator =
    responseValidationFactory(
      [["201", s_deployment_protection_rule]],
      undefined,
    )

  router.post(
    "reposCreateDeploymentProtectionRule",
    "/repos/:owner/:repo/environments/:environment_name/deployment_protection_rules",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateDeploymentProtectionRuleParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateDeploymentProtectionRuleBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_deployment_protection_rule>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCreateDeploymentProtectionRule(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateDeploymentProtectionRuleResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposListCustomDeploymentRuleIntegrationsParamSchema = z.object({
    environment_name: z.string(),
    repo: z.string(),
    owner: z.string(),
  })

  const reposListCustomDeploymentRuleIntegrationsQuerySchema = z.object({
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
  })

  const reposListCustomDeploymentRuleIntegrationsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number().optional(),
            available_custom_deployment_protection_rule_integrations: z
              .array(s_custom_deployment_rule_app)
              .optional(),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "reposListCustomDeploymentRuleIntegrations",
    "/repos/:owner/:repo/environments/:environment_name/deployment_protection_rules/apps",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListCustomDeploymentRuleIntegrationsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListCustomDeploymentRuleIntegrationsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            available_custom_deployment_protection_rule_integrations?: t_custom_deployment_rule_app[]
            total_count?: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListCustomDeploymentRuleIntegrations(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListCustomDeploymentRuleIntegrationsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposGetCustomDeploymentProtectionRuleParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    environment_name: z.string(),
    protection_rule_id: z.coerce.number(),
  })

  const reposGetCustomDeploymentProtectionRuleResponseValidator =
    responseValidationFactory(
      [["200", s_deployment_protection_rule]],
      undefined,
    )

  router.get(
    "reposGetCustomDeploymentProtectionRule",
    "/repos/:owner/:repo/environments/:environment_name/deployment_protection_rules/:protection_rule_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetCustomDeploymentProtectionRuleParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_deployment_protection_rule>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetCustomDeploymentProtectionRule(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetCustomDeploymentProtectionRuleResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposDisableDeploymentProtectionRuleParamSchema = z.object({
    environment_name: z.string(),
    repo: z.string(),
    owner: z.string(),
    protection_rule_id: z.coerce.number(),
  })

  const reposDisableDeploymentProtectionRuleResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "reposDisableDeploymentProtectionRule",
    "/repos/:owner/:repo/environments/:environment_name/deployment_protection_rules/:protection_rule_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDisableDeploymentProtectionRuleParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDisableDeploymentProtectionRule(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDisableDeploymentProtectionRuleResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const activityListRepoEventsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const activityListRepoEventsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const activityListRepoEventsResponseValidator = responseValidationFactory(
    [["200", z.array(s_event)]],
    undefined,
  )

  router.get(
    "activityListRepoEvents",
    "/repos/:owner/:repo/events",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListRepoEventsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListRepoEventsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_event[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityListRepoEvents(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListRepoEventsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListForksParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListForksQuerySchema = z.object({
    sort: z.enum(["newest", "oldest", "stargazers", "watchers"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposListForksResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_minimal_repository)],
      ["400", s_scim_error],
    ],
    undefined,
  )

  router.get(
    "reposListForks",
    "/repos/:owner/:repo/forks",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListForksParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListForksQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_minimal_repository[]>(200)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListForks(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListForksResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateForkParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCreateForkBodySchema = z
    .object({
      organization: z.string().optional(),
      name: z.string().optional(),
      default_branch_only: z.coerce.boolean().optional(),
    })
    .nullable()
    .optional()

  const reposCreateForkResponseValidator = responseValidationFactory(
    [
      ["202", s_full_repository],
      ["400", s_scim_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "reposCreateFork",
    "/repos/:owner/:repo/forks",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateForkParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateForkBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with202() {
          return new KoaRuntimeResponse<t_full_repository>(202)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCreateFork(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateForkResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitCreateBlobParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const gitCreateBlobBodySchema = z.object({
    content: z.string(),
    encoding: z.string().optional(),
  })

  const gitCreateBlobResponseValidator = responseValidationFactory(
    [
      ["201", s_short_blob],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["409", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "gitCreateBlob",
    "/repos/:owner/:repo/git/blobs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitCreateBlobParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          gitCreateBlobBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_short_blob>(201)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with409() {
          return new KoaRuntimeResponse<t_basic_error>(409)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .gitCreateBlob(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitCreateBlobResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitGetBlobParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    file_sha: z.string(),
  })

  const gitGetBlobResponseValidator = responseValidationFactory(
    [
      ["200", s_blob],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get(
    "gitGetBlob",
    "/repos/:owner/:repo/git/blobs/:file_sha",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitGetBlobParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_blob>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .gitGetBlob(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitGetBlobResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitCreateCommitParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const gitCreateCommitBodySchema = z.object({
    message: z.string(),
    tree: z.string(),
    parents: z.array(z.string()).optional(),
    author: z
      .object({
        name: z.string(),
        email: z.string(),
        date: z.string().datetime({ offset: true }).optional(),
      })
      .optional(),
    committer: z
      .object({
        name: z.string().optional(),
        email: z.string().optional(),
        date: z.string().datetime({ offset: true }).optional(),
      })
      .optional(),
    signature: z.string().optional(),
  })

  const gitCreateCommitResponseValidator = responseValidationFactory(
    [
      ["201", s_git_commit],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "gitCreateCommit",
    "/repos/:owner/:repo/git/commits",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitCreateCommitParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          gitCreateCommitBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_git_commit>(201)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .gitCreateCommit(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitCreateCommitResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitGetCommitParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    commit_sha: z.string(),
  })

  const gitGetCommitResponseValidator = responseValidationFactory(
    [
      ["200", s_git_commit],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "gitGetCommit",
    "/repos/:owner/:repo/git/commits/:commit_sha",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitGetCommitParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_git_commit>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .gitGetCommit(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitGetCommitResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitListMatchingRefsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  })

  const gitListMatchingRefsResponseValidator = responseValidationFactory(
    [["200", z.array(s_git_ref)]],
    undefined,
  )

  router.get(
    "gitListMatchingRefs",
    "/repos/:owner/:repo/git/matching-refs/:ref",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitListMatchingRefsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_git_ref[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .gitListMatchingRefs(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitListMatchingRefsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitGetRefParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  })

  const gitGetRefResponseValidator = responseValidationFactory(
    [
      ["200", s_git_ref],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "gitGetRef",
    "/repos/:owner/:repo/git/ref/:ref",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitGetRefParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_git_ref>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .gitGetRef(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitGetRefResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitCreateRefParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const gitCreateRefBodySchema = z.object({ ref: z.string(), sha: z.string() })

  const gitCreateRefResponseValidator = responseValidationFactory(
    [
      ["201", s_git_ref],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "gitCreateRef",
    "/repos/:owner/:repo/git/refs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitCreateRefParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          gitCreateRefBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_git_ref>(201)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .gitCreateRef(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitCreateRefResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitUpdateRefParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  })

  const gitUpdateRefBodySchema = z.object({
    sha: z.string(),
    force: z.coerce.boolean().optional(),
  })

  const gitUpdateRefResponseValidator = responseValidationFactory(
    [
      ["200", s_git_ref],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.patch(
    "gitUpdateRef",
    "/repos/:owner/:repo/git/refs/:ref",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitUpdateRefParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          gitUpdateRefBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_git_ref>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .gitUpdateRef(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitUpdateRefResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitDeleteRefParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  })

  const gitDeleteRefResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.delete(
    "gitDeleteRef",
    "/repos/:owner/:repo/git/refs/:ref",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitDeleteRefParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .gitDeleteRef(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitDeleteRefResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitCreateTagParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const gitCreateTagBodySchema = z.object({
    tag: z.string(),
    message: z.string(),
    object: z.string(),
    type: z.enum(["commit", "tree", "blob"]),
    tagger: z
      .object({
        name: z.string(),
        email: z.string(),
        date: z.string().datetime({ offset: true }).optional(),
      })
      .optional(),
  })

  const gitCreateTagResponseValidator = responseValidationFactory(
    [
      ["201", s_git_tag],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "gitCreateTag",
    "/repos/:owner/:repo/git/tags",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitCreateTagParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          gitCreateTagBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_git_tag>(201)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .gitCreateTag(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitCreateTagResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitGetTagParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    tag_sha: z.string(),
  })

  const gitGetTagResponseValidator = responseValidationFactory(
    [
      ["200", s_git_tag],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "gitGetTag",
    "/repos/:owner/:repo/git/tags/:tag_sha",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitGetTagParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_git_tag>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .gitGetTag(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitGetTagResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitCreateTreeParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const gitCreateTreeBodySchema = z.object({
    tree: z.array(
      z.object({
        path: z.string().optional(),
        mode: z
          .enum(["100644", "100755", "040000", "160000", "120000"])
          .optional(),
        type: z.enum(["blob", "tree", "commit"]).optional(),
        sha: z.string().nullable().optional(),
        content: z.string().optional(),
      }),
    ),
    base_tree: z.string().optional(),
  })

  const gitCreateTreeResponseValidator = responseValidationFactory(
    [
      ["201", s_git_tree],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "gitCreateTree",
    "/repos/:owner/:repo/git/trees",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitCreateTreeParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          gitCreateTreeBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_git_tree>(201)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .gitCreateTree(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitCreateTreeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gitGetTreeParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    tree_sha: z.string(),
  })

  const gitGetTreeQuerySchema = z.object({ recursive: z.string().optional() })

  const gitGetTreeResponseValidator = responseValidationFactory(
    [
      ["200", s_git_tree],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get(
    "gitGetTree",
    "/repos/:owner/:repo/git/trees/:tree_sha",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gitGetTreeParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          gitGetTreeQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_git_tree>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .gitGetTree(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gitGetTreeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListWebhooksParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListWebhooksQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposListWebhooksResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_hook)],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposListWebhooks",
    "/repos/:owner/:repo/hooks",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListWebhooksParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListWebhooksQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_hook[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListWebhooks(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListWebhooksResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateWebhookParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCreateWebhookBodySchema = z
    .object({
      name: z.string().optional(),
      config: z
        .object({
          url: s_webhook_config_url.optional(),
          content_type: s_webhook_config_content_type.optional(),
          secret: s_webhook_config_secret.optional(),
          insecure_ssl: s_webhook_config_insecure_ssl.optional(),
          token: z.string().optional(),
          digest: z.string().optional(),
        })
        .optional(),
      events: z.array(z.string()).optional(),
      active: z.coerce.boolean().optional(),
    })
    .nullable()
    .optional()

  const reposCreateWebhookResponseValidator = responseValidationFactory(
    [
      ["201", s_hook],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "reposCreateWebhook",
    "/repos/:owner/:repo/hooks",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateWebhookParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateWebhookBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_hook>(201)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCreateWebhook(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateWebhookResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetWebhookParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    hook_id: z.coerce.number(),
  })

  const reposGetWebhookResponseValidator = responseValidationFactory(
    [
      ["200", s_hook],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposGetWebhook",
    "/repos/:owner/:repo/hooks/:hook_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetWebhookParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_hook>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetWebhook(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetWebhookResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUpdateWebhookParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    hook_id: z.coerce.number(),
  })

  const reposUpdateWebhookBodySchema = z.object({
    config: z
      .object({
        url: s_webhook_config_url,
        content_type: s_webhook_config_content_type.optional(),
        secret: s_webhook_config_secret.optional(),
        insecure_ssl: s_webhook_config_insecure_ssl.optional(),
        address: z.string().optional(),
        room: z.string().optional(),
      })
      .optional(),
    events: z.array(z.string()).optional(),
    add_events: z.array(z.string()).optional(),
    remove_events: z.array(z.string()).optional(),
    active: z.coerce.boolean().optional(),
  })

  const reposUpdateWebhookResponseValidator = responseValidationFactory(
    [
      ["200", s_hook],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.patch(
    "reposUpdateWebhook",
    "/repos/:owner/:repo/hooks/:hook_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdateWebhookParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdateWebhookBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_hook>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposUpdateWebhook(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdateWebhookResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteWebhookParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    hook_id: z.coerce.number(),
  })

  const reposDeleteWebhookResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.delete(
    "reposDeleteWebhook",
    "/repos/:owner/:repo/hooks/:hook_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteWebhookParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDeleteWebhook(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteWebhookResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetWebhookConfigForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    hook_id: z.coerce.number(),
  })

  const reposGetWebhookConfigForRepoResponseValidator =
    responseValidationFactory([["200", s_webhook_config]], undefined)

  router.get(
    "reposGetWebhookConfigForRepo",
    "/repos/:owner/:repo/hooks/:hook_id/config",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetWebhookConfigForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_webhook_config>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetWebhookConfigForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetWebhookConfigForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUpdateWebhookConfigForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    hook_id: z.coerce.number(),
  })

  const reposUpdateWebhookConfigForRepoBodySchema = z
    .object({
      url: s_webhook_config_url.optional(),
      content_type: s_webhook_config_content_type.optional(),
      secret: s_webhook_config_secret.optional(),
      insecure_ssl: s_webhook_config_insecure_ssl.optional(),
    })
    .optional()

  const reposUpdateWebhookConfigForRepoResponseValidator =
    responseValidationFactory([["200", s_webhook_config]], undefined)

  router.patch(
    "reposUpdateWebhookConfigForRepo",
    "/repos/:owner/:repo/hooks/:hook_id/config",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdateWebhookConfigForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdateWebhookConfigForRepoBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_webhook_config>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposUpdateWebhookConfigForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdateWebhookConfigForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListWebhookDeliveriesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    hook_id: z.coerce.number(),
  })

  const reposListWebhookDeliveriesQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    cursor: z.string().optional(),
    redelivery: z.coerce.boolean().optional(),
  })

  const reposListWebhookDeliveriesResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_hook_delivery_item)],
      ["400", s_scim_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get(
    "reposListWebhookDeliveries",
    "/repos/:owner/:repo/hooks/:hook_id/deliveries",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListWebhookDeliveriesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListWebhookDeliveriesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_hook_delivery_item[]>(200)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListWebhookDeliveries(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListWebhookDeliveriesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetWebhookDeliveryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    hook_id: z.coerce.number(),
    delivery_id: z.coerce.number(),
  })

  const reposGetWebhookDeliveryResponseValidator = responseValidationFactory(
    [
      ["200", s_hook_delivery],
      ["400", s_scim_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get(
    "reposGetWebhookDelivery",
    "/repos/:owner/:repo/hooks/:hook_id/deliveries/:delivery_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetWebhookDeliveryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_hook_delivery>(200)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetWebhookDelivery(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetWebhookDeliveryResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposRedeliverWebhookDeliveryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    hook_id: z.coerce.number(),
    delivery_id: z.coerce.number(),
  })

  const reposRedeliverWebhookDeliveryResponseValidator =
    responseValidationFactory(
      [
        ["202", z.object({})],
        ["400", s_scim_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.post(
    "reposRedeliverWebhookDelivery",
    "/repos/:owner/:repo/hooks/:hook_id/deliveries/:delivery_id/attempts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposRedeliverWebhookDeliveryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with202() {
          return new KoaRuntimeResponse<EmptyObject>(202)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposRedeliverWebhookDelivery(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposRedeliverWebhookDeliveryResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposPingWebhookParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    hook_id: z.coerce.number(),
  })

  const reposPingWebhookResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.post(
    "reposPingWebhook",
    "/repos/:owner/:repo/hooks/:hook_id/pings",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposPingWebhookParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposPingWebhook(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposPingWebhookResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposTestPushWebhookParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    hook_id: z.coerce.number(),
  })

  const reposTestPushWebhookResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.post(
    "reposTestPushWebhook",
    "/repos/:owner/:repo/hooks/:hook_id/tests",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposTestPushWebhookParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposTestPushWebhook(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposTestPushWebhookResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsGetImportStatusParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const migrationsGetImportStatusResponseValidator = responseValidationFactory(
    [
      ["200", s_import],
      ["404", s_basic_error],
      ["503", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "migrationsGetImportStatus",
    "/repos/:owner/:repo/import",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsGetImportStatusParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_import>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with503() {
          return new KoaRuntimeResponse<t_basic_error>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .migrationsGetImportStatus(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsGetImportStatusResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsStartImportParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const migrationsStartImportBodySchema = z.object({
    vcs_url: z.string(),
    vcs: z.enum(["subversion", "git", "mercurial", "tfvc"]).optional(),
    vcs_username: z.string().optional(),
    vcs_password: z.string().optional(),
    tfvc_project: z.string().optional(),
  })

  const migrationsStartImportResponseValidator = responseValidationFactory(
    [
      ["201", s_import],
      ["404", s_basic_error],
      ["422", s_validation_error],
      ["503", s_basic_error],
    ],
    undefined,
  )

  router.put(
    "migrationsStartImport",
    "/repos/:owner/:repo/import",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsStartImportParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          migrationsStartImportBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_import>(201)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        with503() {
          return new KoaRuntimeResponse<t_basic_error>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .migrationsStartImport(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsStartImportResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsUpdateImportParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const migrationsUpdateImportBodySchema = z
    .object({
      vcs_username: z.string().optional(),
      vcs_password: z.string().optional(),
      vcs: z.enum(["subversion", "tfvc", "git", "mercurial"]).optional(),
      tfvc_project: z.string().optional(),
    })
    .nullable()
    .optional()

  const migrationsUpdateImportResponseValidator = responseValidationFactory(
    [
      ["200", s_import],
      ["503", s_basic_error],
    ],
    undefined,
  )

  router.patch(
    "migrationsUpdateImport",
    "/repos/:owner/:repo/import",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsUpdateImportParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          migrationsUpdateImportBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_import>(200)
        },
        with503() {
          return new KoaRuntimeResponse<t_basic_error>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .migrationsUpdateImport(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsUpdateImportResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsCancelImportParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const migrationsCancelImportResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["503", s_basic_error],
    ],
    undefined,
  )

  router.delete(
    "migrationsCancelImport",
    "/repos/:owner/:repo/import",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsCancelImportParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with503() {
          return new KoaRuntimeResponse<t_basic_error>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .migrationsCancelImport(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsCancelImportResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsGetCommitAuthorsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const migrationsGetCommitAuthorsQuerySchema = z.object({
    since: z.coerce.number().optional(),
  })

  const migrationsGetCommitAuthorsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_porter_author)],
      ["404", s_basic_error],
      ["503", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "migrationsGetCommitAuthors",
    "/repos/:owner/:repo/import/authors",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsGetCommitAuthorsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          migrationsGetCommitAuthorsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_porter_author[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with503() {
          return new KoaRuntimeResponse<t_basic_error>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .migrationsGetCommitAuthors(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsGetCommitAuthorsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsMapCommitAuthorParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    author_id: z.coerce.number(),
  })

  const migrationsMapCommitAuthorBodySchema = z
    .object({ email: z.string().optional(), name: z.string().optional() })
    .optional()

  const migrationsMapCommitAuthorResponseValidator = responseValidationFactory(
    [
      ["200", s_porter_author],
      ["404", s_basic_error],
      ["422", s_validation_error],
      ["503", s_basic_error],
    ],
    undefined,
  )

  router.patch(
    "migrationsMapCommitAuthor",
    "/repos/:owner/:repo/import/authors/:author_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsMapCommitAuthorParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          migrationsMapCommitAuthorBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_porter_author>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        with503() {
          return new KoaRuntimeResponse<t_basic_error>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .migrationsMapCommitAuthor(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsMapCommitAuthorResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsGetLargeFilesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const migrationsGetLargeFilesResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_porter_large_file)],
      ["503", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "migrationsGetLargeFiles",
    "/repos/:owner/:repo/import/large_files",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsGetLargeFilesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_porter_large_file[]>(200)
        },
        with503() {
          return new KoaRuntimeResponse<t_basic_error>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .migrationsGetLargeFiles(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsGetLargeFilesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const migrationsSetLfsPreferenceParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const migrationsSetLfsPreferenceBodySchema = z.object({
    use_lfs: z.enum(["opt_in", "opt_out"]),
  })

  const migrationsSetLfsPreferenceResponseValidator = responseValidationFactory(
    [
      ["200", s_import],
      ["422", s_validation_error],
      ["503", s_basic_error],
    ],
    undefined,
  )

  router.patch(
    "migrationsSetLfsPreference",
    "/repos/:owner/:repo/import/lfs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsSetLfsPreferenceParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          migrationsSetLfsPreferenceBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_import>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        with503() {
          return new KoaRuntimeResponse<t_basic_error>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .migrationsSetLfsPreference(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsSetLfsPreferenceResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsGetRepoInstallationParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const appsGetRepoInstallationResponseValidator = responseValidationFactory(
    [
      ["200", s_installation],
      ["301", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "appsGetRepoInstallation",
    "/repos/:owner/:repo/installation",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsGetRepoInstallationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_installation>(200)
        },
        with301() {
          return new KoaRuntimeResponse<t_basic_error>(301)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsGetRepoInstallation(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsGetRepoInstallationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const interactionsGetRestrictionsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const interactionsGetRestrictionsForRepoResponseValidator =
    responseValidationFactory(
      [["200", z.union([s_interaction_limit_response, z.object({})])]],
      undefined,
    )

  router.get(
    "interactionsGetRestrictionsForRepo",
    "/repos/:owner/:repo/interaction-limits",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          interactionsGetRestrictionsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<
            t_interaction_limit_response | EmptyObject
          >(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .interactionsGetRestrictionsForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = interactionsGetRestrictionsForRepoResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const interactionsSetRestrictionsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const interactionsSetRestrictionsForRepoBodySchema = s_interaction_limit

  const interactionsSetRestrictionsForRepoResponseValidator =
    responseValidationFactory(
      [
        ["200", s_interaction_limit_response],
        ["409", z.void()],
      ],
      undefined,
    )

  router.put(
    "interactionsSetRestrictionsForRepo",
    "/repos/:owner/:repo/interaction-limits",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          interactionsSetRestrictionsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          interactionsSetRestrictionsForRepoBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_interaction_limit_response>(200)
        },
        with409() {
          return new KoaRuntimeResponse<void>(409)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .interactionsSetRestrictionsForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = interactionsSetRestrictionsForRepoResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const interactionsRemoveRestrictionsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const interactionsRemoveRestrictionsForRepoResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["409", z.void()],
      ],
      undefined,
    )

  router.delete(
    "interactionsRemoveRestrictionsForRepo",
    "/repos/:owner/:repo/interaction-limits",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          interactionsRemoveRestrictionsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with409() {
          return new KoaRuntimeResponse<void>(409)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .interactionsRemoveRestrictionsForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = interactionsRemoveRestrictionsForRepoResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposListInvitationsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListInvitationsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposListInvitationsResponseValidator = responseValidationFactory(
    [["200", z.array(s_repository_invitation)]],
    undefined,
  )

  router.get(
    "reposListInvitations",
    "/repos/:owner/:repo/invitations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListInvitationsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListInvitationsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_repository_invitation[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListInvitations(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListInvitationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUpdateInvitationParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    invitation_id: z.coerce.number(),
  })

  const reposUpdateInvitationBodySchema = z
    .object({
      permissions: z
        .enum(["read", "write", "maintain", "triage", "admin"])
        .optional(),
    })
    .optional()

  const reposUpdateInvitationResponseValidator = responseValidationFactory(
    [["200", s_repository_invitation]],
    undefined,
  )

  router.patch(
    "reposUpdateInvitation",
    "/repos/:owner/:repo/invitations/:invitation_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdateInvitationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdateInvitationBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_repository_invitation>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposUpdateInvitation(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdateInvitationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteInvitationParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    invitation_id: z.coerce.number(),
  })

  const reposDeleteInvitationResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.delete(
    "reposDeleteInvitation",
    "/repos/:owner/:repo/invitations/:invitation_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteInvitationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDeleteInvitation(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteInvitationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesListForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const issuesListForRepoQuerySchema = z.object({
    milestone: z.string().optional(),
    state: z.enum(["open", "closed", "all"]).optional(),
    assignee: z.string().optional(),
    creator: z.string().optional(),
    mentioned: z.string().optional(),
    labels: z.string().optional(),
    sort: z.enum(["created", "updated", "comments"]).optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    since: z.string().datetime({ offset: true }).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const issuesListForRepoResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_issue)],
      ["301", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get(
    "issuesListForRepo",
    "/repos/:owner/:repo/issues",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesListForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          issuesListForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_issue[]>(200)
        },
        with301() {
          return new KoaRuntimeResponse<t_basic_error>(301)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesListForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesCreateParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const issuesCreateBodySchema = z.object({
    title: z.union([z.string(), z.coerce.number()]),
    body: z.string().optional(),
    assignee: z.string().nullable().optional(),
    milestone: z.union([z.string(), z.coerce.number()]).nullable().optional(),
    labels: z
      .array(
        z.union([
          z.string(),
          z.object({
            id: z.coerce.number().optional(),
            name: z.string().optional(),
            description: z.string().nullable().optional(),
            color: z.string().nullable().optional(),
          }),
        ]),
      )
      .optional(),
    assignees: z.array(z.string()).optional(),
  })

  const issuesCreateResponseValidator = responseValidationFactory(
    [
      ["201", s_issue],
      ["400", s_scim_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["410", s_basic_error],
      ["422", s_validation_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

  router.post(
    "issuesCreate",
    "/repos/:owner/:repo/issues",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesCreateParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesCreateBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_issue>(201)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with410() {
          return new KoaRuntimeResponse<t_basic_error>(410)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesCreate(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesCreateResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesListCommentsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const issuesListCommentsForRepoQuerySchema = z.object({
    sort: z.enum(["created", "updated"]).optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    since: z.string().datetime({ offset: true }).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const issuesListCommentsForRepoResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_issue_comment)],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get(
    "issuesListCommentsForRepo",
    "/repos/:owner/:repo/issues/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesListCommentsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          issuesListCommentsForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_issue_comment[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesListCommentsForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListCommentsForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesGetCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  const issuesGetCommentResponseValidator = responseValidationFactory(
    [
      ["200", s_issue_comment],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "issuesGetComment",
    "/repos/:owner/:repo/issues/comments/:comment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesGetCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_issue_comment>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesGetComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesGetCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesUpdateCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  const issuesUpdateCommentBodySchema = z.object({ body: z.string() })

  const issuesUpdateCommentResponseValidator = responseValidationFactory(
    [
      ["200", s_issue_comment],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.patch(
    "issuesUpdateComment",
    "/repos/:owner/:repo/issues/comments/:comment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesUpdateCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesUpdateCommentBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_issue_comment>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesUpdateComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesUpdateCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesDeleteCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  const issuesDeleteCommentResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.delete(
    "issuesDeleteComment",
    "/repos/:owner/:repo/issues/comments/:comment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesDeleteCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesDeleteComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesDeleteCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsListForIssueCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  const reactionsListForIssueCommentQuerySchema = z.object({
    content: z
      .enum([
        "+1",
        "-1",
        "laugh",
        "confused",
        "heart",
        "hooray",
        "rocket",
        "eyes",
      ])
      .optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reactionsListForIssueCommentResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_reaction)],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "reactionsListForIssueComment",
    "/repos/:owner/:repo/issues/comments/:comment_id/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsListForIssueCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reactionsListForIssueCommentQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_reaction[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsListForIssueComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsListForIssueCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsCreateForIssueCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  const reactionsCreateForIssueCommentBodySchema = z.object({
    content: z.enum([
      "+1",
      "-1",
      "laugh",
      "confused",
      "heart",
      "hooray",
      "rocket",
      "eyes",
    ]),
  })

  const reactionsCreateForIssueCommentResponseValidator =
    responseValidationFactory(
      [
        ["200", s_reaction],
        ["201", s_reaction],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.post(
    "reactionsCreateForIssueComment",
    "/repos/:owner/:repo/issues/comments/:comment_id/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsCreateForIssueCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reactionsCreateForIssueCommentBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_reaction>(200)
        },
        with201() {
          return new KoaRuntimeResponse<t_reaction>(201)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsCreateForIssueComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsCreateForIssueCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsDeleteForIssueCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
    reaction_id: z.coerce.number(),
  })

  const reactionsDeleteForIssueCommentResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "reactionsDeleteForIssueComment",
    "/repos/:owner/:repo/issues/comments/:comment_id/reactions/:reaction_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsDeleteForIssueCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsDeleteForIssueComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsDeleteForIssueCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesListEventsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const issuesListEventsForRepoQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const issuesListEventsForRepoResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_issue_event)],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get(
    "issuesListEventsForRepo",
    "/repos/:owner/:repo/issues/events",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesListEventsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          issuesListEventsForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_issue_event[]>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesListEventsForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListEventsForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesGetEventParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    event_id: z.coerce.number(),
  })

  const issuesGetEventResponseValidator = responseValidationFactory(
    [
      ["200", s_issue_event],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["410", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "issuesGetEvent",
    "/repos/:owner/:repo/issues/events/:event_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesGetEventParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_issue_event>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with410() {
          return new KoaRuntimeResponse<t_basic_error>(410)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesGetEvent(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesGetEventResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesGetParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesGetResponseValidator = responseValidationFactory(
    [
      ["200", s_issue],
      ["301", s_basic_error],
      ["304", z.void()],
      ["404", s_basic_error],
      ["410", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "issuesGet",
    "/repos/:owner/:repo/issues/:issue_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesGetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_issue>(200)
        },
        with301() {
          return new KoaRuntimeResponse<t_basic_error>(301)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with410() {
          return new KoaRuntimeResponse<t_basic_error>(410)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesGet(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesGetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesUpdateParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesUpdateBodySchema = z
    .object({
      title: z.union([z.string(), z.coerce.number()]).nullable().optional(),
      body: z.string().nullable().optional(),
      assignee: z.string().nullable().optional(),
      state: z.enum(["open", "closed"]).optional(),
      state_reason: z
        .enum(["completed", "not_planned", "reopened"])
        .nullable()
        .optional(),
      milestone: z.union([z.string(), z.coerce.number()]).nullable().optional(),
      labels: z
        .array(
          z.union([
            z.string(),
            z.object({
              id: z.coerce.number().optional(),
              name: z.string().optional(),
              description: z.string().nullable().optional(),
              color: z.string().nullable().optional(),
            }),
          ]),
        )
        .optional(),
      assignees: z.array(z.string()).optional(),
    })
    .optional()

  const issuesUpdateResponseValidator = responseValidationFactory(
    [
      ["200", s_issue],
      ["301", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["410", s_basic_error],
      ["422", s_validation_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

  router.patch(
    "issuesUpdate",
    "/repos/:owner/:repo/issues/:issue_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesUpdateParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesUpdateBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_issue>(200)
        },
        with301() {
          return new KoaRuntimeResponse<t_basic_error>(301)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with410() {
          return new KoaRuntimeResponse<t_basic_error>(410)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesUpdate(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesUpdateResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesAddAssigneesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesAddAssigneesBodySchema = z
    .object({ assignees: z.array(z.string()).optional() })
    .optional()

  const issuesAddAssigneesResponseValidator = responseValidationFactory(
    [["201", s_issue]],
    undefined,
  )

  router.post(
    "issuesAddAssignees",
    "/repos/:owner/:repo/issues/:issue_number/assignees",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesAddAssigneesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesAddAssigneesBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_issue>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesAddAssignees(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesAddAssigneesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesRemoveAssigneesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesRemoveAssigneesBodySchema = z.object({
    assignees: z.array(z.string()).optional(),
  })

  const issuesRemoveAssigneesResponseValidator = responseValidationFactory(
    [["200", s_issue]],
    undefined,
  )

  router.delete(
    "issuesRemoveAssignees",
    "/repos/:owner/:repo/issues/:issue_number/assignees",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesRemoveAssigneesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesRemoveAssigneesBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_issue>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesRemoveAssignees(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesRemoveAssigneesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesCheckUserCanBeAssignedToIssueParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
    assignee: z.string(),
  })

  const issuesCheckUserCanBeAssignedToIssueResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "issuesCheckUserCanBeAssignedToIssue",
    "/repos/:owner/:repo/issues/:issue_number/assignees/:assignee",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesCheckUserCanBeAssignedToIssueParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesCheckUserCanBeAssignedToIssue(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesCheckUserCanBeAssignedToIssueResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const issuesListCommentsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesListCommentsQuerySchema = z.object({
    since: z.string().datetime({ offset: true }).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const issuesListCommentsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_issue_comment)],
      ["404", s_basic_error],
      ["410", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "issuesListComments",
    "/repos/:owner/:repo/issues/:issue_number/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesListCommentsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          issuesListCommentsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_issue_comment[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with410() {
          return new KoaRuntimeResponse<t_basic_error>(410)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesListComments(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListCommentsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesCreateCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesCreateCommentBodySchema = z.object({ body: z.string() })

  const issuesCreateCommentResponseValidator = responseValidationFactory(
    [
      ["201", s_issue_comment],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["410", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "issuesCreateComment",
    "/repos/:owner/:repo/issues/:issue_number/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesCreateCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesCreateCommentBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_issue_comment>(201)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with410() {
          return new KoaRuntimeResponse<t_basic_error>(410)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesCreateComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesCreateCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesListEventsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesListEventsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const issuesListEventsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_issue_event_for_issue)],
      ["410", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "issuesListEvents",
    "/repos/:owner/:repo/issues/:issue_number/events",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesListEventsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          issuesListEventsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_issue_event_for_issue[]>(200)
        },
        with410() {
          return new KoaRuntimeResponse<t_basic_error>(410)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesListEvents(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListEventsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesListLabelsOnIssueParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesListLabelsOnIssueQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const issuesListLabelsOnIssueResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_label)],
      ["301", s_basic_error],
      ["404", s_basic_error],
      ["410", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "issuesListLabelsOnIssue",
    "/repos/:owner/:repo/issues/:issue_number/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesListLabelsOnIssueParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          issuesListLabelsOnIssueQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_label[]>(200)
        },
        with301() {
          return new KoaRuntimeResponse<t_basic_error>(301)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with410() {
          return new KoaRuntimeResponse<t_basic_error>(410)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesListLabelsOnIssue(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListLabelsOnIssueResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesAddLabelsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesAddLabelsBodySchema = z
    .union([
      z.object({ labels: z.array(z.string()).optional() }),
      z.array(z.string()),
      z.object({ labels: z.array(z.object({ name: z.string() })).optional() }),
      z.array(z.object({ name: z.string() })),
      z.string(),
    ])
    .optional()

  const issuesAddLabelsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_label)],
      ["301", s_basic_error],
      ["404", s_basic_error],
      ["410", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "issuesAddLabels",
    "/repos/:owner/:repo/issues/:issue_number/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesAddLabelsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesAddLabelsBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_label[]>(200)
        },
        with301() {
          return new KoaRuntimeResponse<t_basic_error>(301)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with410() {
          return new KoaRuntimeResponse<t_basic_error>(410)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesAddLabels(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesAddLabelsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesSetLabelsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesSetLabelsBodySchema = z
    .union([
      z.object({ labels: z.array(z.string()).optional() }),
      z.array(z.string()),
      z.object({ labels: z.array(z.object({ name: z.string() })).optional() }),
      z.array(z.object({ name: z.string() })),
      z.string(),
    ])
    .optional()

  const issuesSetLabelsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_label)],
      ["301", s_basic_error],
      ["404", s_basic_error],
      ["410", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.put(
    "issuesSetLabels",
    "/repos/:owner/:repo/issues/:issue_number/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesSetLabelsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesSetLabelsBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_label[]>(200)
        },
        with301() {
          return new KoaRuntimeResponse<t_basic_error>(301)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with410() {
          return new KoaRuntimeResponse<t_basic_error>(410)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesSetLabels(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesSetLabelsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesRemoveAllLabelsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesRemoveAllLabelsResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["301", s_basic_error],
      ["404", s_basic_error],
      ["410", s_basic_error],
    ],
    undefined,
  )

  router.delete(
    "issuesRemoveAllLabels",
    "/repos/:owner/:repo/issues/:issue_number/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesRemoveAllLabelsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with301() {
          return new KoaRuntimeResponse<t_basic_error>(301)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with410() {
          return new KoaRuntimeResponse<t_basic_error>(410)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesRemoveAllLabels(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesRemoveAllLabelsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesRemoveLabelParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
    name: z.string(),
  })

  const issuesRemoveLabelResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_label)],
      ["301", s_basic_error],
      ["404", s_basic_error],
      ["410", s_basic_error],
    ],
    undefined,
  )

  router.delete(
    "issuesRemoveLabel",
    "/repos/:owner/:repo/issues/:issue_number/labels/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesRemoveLabelParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_label[]>(200)
        },
        with301() {
          return new KoaRuntimeResponse<t_basic_error>(301)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with410() {
          return new KoaRuntimeResponse<t_basic_error>(410)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesRemoveLabel(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesRemoveLabelResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesLockParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesLockBodySchema = z
    .object({
      lock_reason: z
        .enum(["off-topic", "too heated", "resolved", "spam"])
        .optional(),
    })
    .nullable()
    .optional()

  const issuesLockResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["410", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.put(
    "issuesLock",
    "/repos/:owner/:repo/issues/:issue_number/lock",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesLockParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesLockBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with410() {
          return new KoaRuntimeResponse<t_basic_error>(410)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesLock(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesLockResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesUnlockParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesUnlockResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.delete(
    "issuesUnlock",
    "/repos/:owner/:repo/issues/:issue_number/lock",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesUnlockParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesUnlock(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesUnlockResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsListForIssueParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const reactionsListForIssueQuerySchema = z.object({
    content: z
      .enum([
        "+1",
        "-1",
        "laugh",
        "confused",
        "heart",
        "hooray",
        "rocket",
        "eyes",
      ])
      .optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reactionsListForIssueResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_reaction)],
      ["404", s_basic_error],
      ["410", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reactionsListForIssue",
    "/repos/:owner/:repo/issues/:issue_number/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsListForIssueParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reactionsListForIssueQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_reaction[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with410() {
          return new KoaRuntimeResponse<t_basic_error>(410)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsListForIssue(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsListForIssueResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsCreateForIssueParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const reactionsCreateForIssueBodySchema = z.object({
    content: z.enum([
      "+1",
      "-1",
      "laugh",
      "confused",
      "heart",
      "hooray",
      "rocket",
      "eyes",
    ]),
  })

  const reactionsCreateForIssueResponseValidator = responseValidationFactory(
    [
      ["200", s_reaction],
      ["201", s_reaction],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "reactionsCreateForIssue",
    "/repos/:owner/:repo/issues/:issue_number/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsCreateForIssueParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reactionsCreateForIssueBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_reaction>(200)
        },
        with201() {
          return new KoaRuntimeResponse<t_reaction>(201)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsCreateForIssue(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsCreateForIssueResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsDeleteForIssueParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
    reaction_id: z.coerce.number(),
  })

  const reactionsDeleteForIssueResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.delete(
    "reactionsDeleteForIssue",
    "/repos/:owner/:repo/issues/:issue_number/reactions/:reaction_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsDeleteForIssueParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsDeleteForIssue(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsDeleteForIssueResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesListEventsForTimelineParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    issue_number: z.coerce.number(),
  })

  const issuesListEventsForTimelineQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const issuesListEventsForTimelineResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_timeline_issue_events)],
        ["404", s_basic_error],
        ["410", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "issuesListEventsForTimeline",
    "/repos/:owner/:repo/issues/:issue_number/timeline",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesListEventsForTimelineParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          issuesListEventsForTimelineQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_timeline_issue_events[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with410() {
          return new KoaRuntimeResponse<t_basic_error>(410)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesListEventsForTimeline(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListEventsForTimelineResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListDeployKeysParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListDeployKeysQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposListDeployKeysResponseValidator = responseValidationFactory(
    [["200", z.array(s_deploy_key)]],
    undefined,
  )

  router.get(
    "reposListDeployKeys",
    "/repos/:owner/:repo/keys",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListDeployKeysParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListDeployKeysQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_deploy_key[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListDeployKeys(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListDeployKeysResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateDeployKeyParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCreateDeployKeyBodySchema = z.object({
    title: z.string().optional(),
    key: z.string(),
    read_only: z.coerce.boolean().optional(),
  })

  const reposCreateDeployKeyResponseValidator = responseValidationFactory(
    [
      ["201", s_deploy_key],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "reposCreateDeployKey",
    "/repos/:owner/:repo/keys",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateDeployKeyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateDeployKeyBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_deploy_key>(201)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCreateDeployKey(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateDeployKeyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetDeployKeyParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    key_id: z.coerce.number(),
  })

  const reposGetDeployKeyResponseValidator = responseValidationFactory(
    [
      ["200", s_deploy_key],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposGetDeployKey",
    "/repos/:owner/:repo/keys/:key_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetDeployKeyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_deploy_key>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetDeployKey(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetDeployKeyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteDeployKeyParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    key_id: z.coerce.number(),
  })

  const reposDeleteDeployKeyResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.delete(
    "reposDeleteDeployKey",
    "/repos/:owner/:repo/keys/:key_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteDeployKeyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDeleteDeployKey(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteDeployKeyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesListLabelsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const issuesListLabelsForRepoQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const issuesListLabelsForRepoResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_label)],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "issuesListLabelsForRepo",
    "/repos/:owner/:repo/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesListLabelsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          issuesListLabelsForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_label[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesListLabelsForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListLabelsForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesCreateLabelParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const issuesCreateLabelBodySchema = z.object({
    name: z.string(),
    color: z.string().optional(),
    description: z.string().optional(),
  })

  const issuesCreateLabelResponseValidator = responseValidationFactory(
    [
      ["201", s_label],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "issuesCreateLabel",
    "/repos/:owner/:repo/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesCreateLabelParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesCreateLabelBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_label>(201)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesCreateLabel(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesCreateLabelResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesGetLabelParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    name: z.string(),
  })

  const issuesGetLabelResponseValidator = responseValidationFactory(
    [
      ["200", s_label],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "issuesGetLabel",
    "/repos/:owner/:repo/labels/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesGetLabelParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_label>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesGetLabel(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesGetLabelResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesUpdateLabelParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    name: z.string(),
  })

  const issuesUpdateLabelBodySchema = z
    .object({
      new_name: z.string().optional(),
      color: z.string().optional(),
      description: z.string().optional(),
    })
    .optional()

  const issuesUpdateLabelResponseValidator = responseValidationFactory(
    [["200", s_label]],
    undefined,
  )

  router.patch(
    "issuesUpdateLabel",
    "/repos/:owner/:repo/labels/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesUpdateLabelParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesUpdateLabelBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_label>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesUpdateLabel(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesUpdateLabelResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesDeleteLabelParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    name: z.string(),
  })

  const issuesDeleteLabelResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.delete(
    "issuesDeleteLabel",
    "/repos/:owner/:repo/labels/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesDeleteLabelParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesDeleteLabel(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesDeleteLabelResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListLanguagesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListLanguagesResponseValidator = responseValidationFactory(
    [["200", s_language]],
    undefined,
  )

  router.get(
    "reposListLanguages",
    "/repos/:owner/:repo/languages",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListLanguagesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_language>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListLanguages(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListLanguagesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const licensesGetForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const licensesGetForRepoResponseValidator = responseValidationFactory(
    [["200", s_license_content]],
    undefined,
  )

  router.get(
    "licensesGetForRepo",
    "/repos/:owner/:repo/license",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          licensesGetForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_license_content>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .licensesGetForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = licensesGetForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposMergeUpstreamParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposMergeUpstreamBodySchema = z.object({ branch: z.string() })

  const reposMergeUpstreamResponseValidator = responseValidationFactory(
    [
      ["200", s_merged_upstream],
      ["409", z.void()],
      ["422", z.void()],
    ],
    undefined,
  )

  router.post(
    "reposMergeUpstream",
    "/repos/:owner/:repo/merge-upstream",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposMergeUpstreamParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposMergeUpstreamBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_merged_upstream>(200)
        },
        with409() {
          return new KoaRuntimeResponse<void>(409)
        },
        with422() {
          return new KoaRuntimeResponse<void>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposMergeUpstream(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposMergeUpstreamResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposMergeParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposMergeBodySchema = z.object({
    base: z.string(),
    head: z.string(),
    commit_message: z.string().optional(),
  })

  const reposMergeResponseValidator = responseValidationFactory(
    [
      ["201", s_commit],
      ["204", z.void()],
      ["403", s_basic_error],
      ["404", z.void()],
      ["409", z.void()],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post("reposMerge", "/repos/:owner/:repo/merges", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        reposMergeParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        reposMergeBodySchema,
        ctx.request.body,
        RequestInputType.RequestBody,
      ),
    }

    const responder = {
      with201() {
        return new KoaRuntimeResponse<t_commit>(201)
      },
      with204() {
        return new KoaRuntimeResponse<void>(204)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with404() {
        return new KoaRuntimeResponse<void>(404)
      },
      with409() {
        return new KoaRuntimeResponse<void>(409)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error>(422)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .reposMerge(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = reposMergeResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const issuesListMilestonesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const issuesListMilestonesQuerySchema = z.object({
    state: z.enum(["open", "closed", "all"]).optional(),
    sort: z.enum(["due_on", "completeness"]).optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const issuesListMilestonesResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_milestone)],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "issuesListMilestones",
    "/repos/:owner/:repo/milestones",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesListMilestonesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          issuesListMilestonesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_milestone[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesListMilestones(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListMilestonesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesCreateMilestoneParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const issuesCreateMilestoneBodySchema = z.object({
    title: z.string(),
    state: z.enum(["open", "closed"]).optional(),
    description: z.string().optional(),
    due_on: z.string().datetime({ offset: true }).optional(),
  })

  const issuesCreateMilestoneResponseValidator = responseValidationFactory(
    [
      ["201", s_milestone],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "issuesCreateMilestone",
    "/repos/:owner/:repo/milestones",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesCreateMilestoneParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesCreateMilestoneBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_milestone>(201)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesCreateMilestone(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesCreateMilestoneResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesGetMilestoneParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    milestone_number: z.coerce.number(),
  })

  const issuesGetMilestoneResponseValidator = responseValidationFactory(
    [
      ["200", s_milestone],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "issuesGetMilestone",
    "/repos/:owner/:repo/milestones/:milestone_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesGetMilestoneParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_milestone>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesGetMilestone(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesGetMilestoneResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesUpdateMilestoneParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    milestone_number: z.coerce.number(),
  })

  const issuesUpdateMilestoneBodySchema = z
    .object({
      title: z.string().optional(),
      state: z.enum(["open", "closed"]).optional(),
      description: z.string().optional(),
      due_on: z.string().datetime({ offset: true }).optional(),
    })
    .optional()

  const issuesUpdateMilestoneResponseValidator = responseValidationFactory(
    [["200", s_milestone]],
    undefined,
  )

  router.patch(
    "issuesUpdateMilestone",
    "/repos/:owner/:repo/milestones/:milestone_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesUpdateMilestoneParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          issuesUpdateMilestoneBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_milestone>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesUpdateMilestone(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesUpdateMilestoneResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesDeleteMilestoneParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    milestone_number: z.coerce.number(),
  })

  const issuesDeleteMilestoneResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.delete(
    "issuesDeleteMilestone",
    "/repos/:owner/:repo/milestones/:milestone_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesDeleteMilestoneParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesDeleteMilestone(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesDeleteMilestoneResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const issuesListLabelsForMilestoneParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    milestone_number: z.coerce.number(),
  })

  const issuesListLabelsForMilestoneQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const issuesListLabelsForMilestoneResponseValidator =
    responseValidationFactory([["200", z.array(s_label)]], undefined)

  router.get(
    "issuesListLabelsForMilestone",
    "/repos/:owner/:repo/milestones/:milestone_number/labels",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          issuesListLabelsForMilestoneParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          issuesListLabelsForMilestoneQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_label[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesListLabelsForMilestone(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListLabelsForMilestoneResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityListRepoNotificationsForAuthenticatedUserParamSchema = z.object(
    { owner: z.string(), repo: z.string() },
  )

  const activityListRepoNotificationsForAuthenticatedUserQuerySchema = z.object(
    {
      all: z.coerce.boolean().optional(),
      participating: z.coerce.boolean().optional(),
      since: z.string().datetime({ offset: true }).optional(),
      before: z.string().datetime({ offset: true }).optional(),
      per_page: z.coerce.number().optional(),
      page: z.coerce.number().optional(),
    },
  )

  const activityListRepoNotificationsForAuthenticatedUserResponseValidator =
    responseValidationFactory([["200", z.array(s_thread)]], undefined)

  router.get(
    "activityListRepoNotificationsForAuthenticatedUser",
    "/repos/:owner/:repo/notifications",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListRepoNotificationsForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListRepoNotificationsForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_thread[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityListRepoNotificationsForAuthenticatedUser(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        activityListRepoNotificationsForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const activityMarkRepoNotificationsAsReadParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const activityMarkRepoNotificationsAsReadBodySchema = z
    .object({ last_read_at: z.string().datetime({ offset: true }).optional() })
    .optional()

  const activityMarkRepoNotificationsAsReadResponseValidator =
    responseValidationFactory(
      [
        [
          "202",
          z.object({
            message: z.string().optional(),
            url: z.string().optional(),
          }),
        ],
        ["205", z.void()],
      ],
      undefined,
    )

  router.put(
    "activityMarkRepoNotificationsAsRead",
    "/repos/:owner/:repo/notifications",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityMarkRepoNotificationsAsReadParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          activityMarkRepoNotificationsAsReadBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with202() {
          return new KoaRuntimeResponse<{
            message?: string
            url?: string
          }>(202)
        },
        with205() {
          return new KoaRuntimeResponse<void>(205)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityMarkRepoNotificationsAsRead(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityMarkRepoNotificationsAsReadResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposGetPagesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetPagesResponseValidator = responseValidationFactory(
    [
      ["200", s_page],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposGetPages",
    "/repos/:owner/:repo/pages",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetPagesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_page>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetPages(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetPagesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreatePagesSiteParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCreatePagesSiteBodySchema = z
    .object({
      build_type: z.enum(["legacy", "workflow"]).optional(),
      source: z
        .object({ branch: z.string(), path: z.enum(["/", "/docs"]).optional() })
        .optional(),
    })
    .nullable()

  const reposCreatePagesSiteResponseValidator = responseValidationFactory(
    [
      ["201", s_page],
      ["409", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "reposCreatePagesSite",
    "/repos/:owner/:repo/pages",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreatePagesSiteParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreatePagesSiteBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_page>(201)
        },
        with409() {
          return new KoaRuntimeResponse<t_basic_error>(409)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCreatePagesSite(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreatePagesSiteResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUpdateInformationAboutPagesSiteParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposUpdateInformationAboutPagesSiteBodySchema = z.object({
    cname: z.string().nullable().optional(),
    https_enforced: z.coerce.boolean().optional(),
    build_type: z.enum(["legacy", "workflow"]).optional(),
    source: z
      .union([
        z.enum(["gh-pages", "master", "master /docs"]),
        z.object({ branch: z.string(), path: z.enum(["/", "/docs"]) }),
      ])
      .optional(),
  })

  const reposUpdateInformationAboutPagesSiteResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["400", s_scim_error],
        ["409", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.put(
    "reposUpdateInformationAboutPagesSite",
    "/repos/:owner/:repo/pages",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdateInformationAboutPagesSiteParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdateInformationAboutPagesSiteBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with409() {
          return new KoaRuntimeResponse<t_basic_error>(409)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposUpdateInformationAboutPagesSite(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdateInformationAboutPagesSiteResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposDeletePagesSiteParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposDeletePagesSiteResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", s_basic_error],
      ["409", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.delete(
    "reposDeletePagesSite",
    "/repos/:owner/:repo/pages",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeletePagesSiteParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with409() {
          return new KoaRuntimeResponse<t_basic_error>(409)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDeletePagesSite(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeletePagesSiteResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListPagesBuildsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListPagesBuildsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposListPagesBuildsResponseValidator = responseValidationFactory(
    [["200", z.array(s_page_build)]],
    undefined,
  )

  router.get(
    "reposListPagesBuilds",
    "/repos/:owner/:repo/pages/builds",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListPagesBuildsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListPagesBuildsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_page_build[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListPagesBuilds(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListPagesBuildsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposRequestPagesBuildParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposRequestPagesBuildResponseValidator = responseValidationFactory(
    [["201", s_page_build_status]],
    undefined,
  )

  router.post(
    "reposRequestPagesBuild",
    "/repos/:owner/:repo/pages/builds",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposRequestPagesBuildParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_page_build_status>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposRequestPagesBuild(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposRequestPagesBuildResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetLatestPagesBuildParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetLatestPagesBuildResponseValidator = responseValidationFactory(
    [["200", s_page_build]],
    undefined,
  )

  router.get(
    "reposGetLatestPagesBuild",
    "/repos/:owner/:repo/pages/builds/latest",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetLatestPagesBuildParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_page_build>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetLatestPagesBuild(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetLatestPagesBuildResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetPagesBuildParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    build_id: z.coerce.number(),
  })

  const reposGetPagesBuildResponseValidator = responseValidationFactory(
    [["200", s_page_build]],
    undefined,
  )

  router.get(
    "reposGetPagesBuild",
    "/repos/:owner/:repo/pages/builds/:build_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetPagesBuildParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_page_build>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetPagesBuild(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetPagesBuildResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreatePagesDeploymentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCreatePagesDeploymentBodySchema = z.object({
    artifact_url: z.string(),
    environment: z.string().optional(),
    pages_build_version: z.string(),
    oidc_token: z.string(),
  })

  const reposCreatePagesDeploymentResponseValidator = responseValidationFactory(
    [
      ["200", s_page_deployment],
      ["400", s_scim_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "reposCreatePagesDeployment",
    "/repos/:owner/:repo/pages/deployment",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreatePagesDeploymentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreatePagesDeploymentBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_page_deployment>(200)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCreatePagesDeployment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreatePagesDeploymentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetPagesHealthCheckParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetPagesHealthCheckResponseValidator = responseValidationFactory(
    [
      ["200", s_pages_health_check],
      ["202", s_empty_object],
      ["400", z.void()],
      ["404", s_basic_error],
      ["422", z.void()],
    ],
    undefined,
  )

  router.get(
    "reposGetPagesHealthCheck",
    "/repos/:owner/:repo/pages/health",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetPagesHealthCheckParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_pages_health_check>(200)
        },
        with202() {
          return new KoaRuntimeResponse<t_empty_object>(202)
        },
        with400() {
          return new KoaRuntimeResponse<void>(400)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<void>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetPagesHealthCheck(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetPagesHealthCheckResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposEnablePrivateVulnerabilityReportingParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposEnablePrivateVulnerabilityReportingResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["422", s_scim_error],
      ],
      undefined,
    )

  router.put(
    "reposEnablePrivateVulnerabilityReporting",
    "/repos/:owner/:repo/private-vulnerability-reporting",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposEnablePrivateVulnerabilityReportingParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with422() {
          return new KoaRuntimeResponse<t_scim_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposEnablePrivateVulnerabilityReporting(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposEnablePrivateVulnerabilityReportingResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposDisablePrivateVulnerabilityReportingParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposDisablePrivateVulnerabilityReportingResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["422", s_scim_error],
      ],
      undefined,
    )

  router.delete(
    "reposDisablePrivateVulnerabilityReporting",
    "/repos/:owner/:repo/private-vulnerability-reporting",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDisablePrivateVulnerabilityReportingParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with422() {
          return new KoaRuntimeResponse<t_scim_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDisablePrivateVulnerabilityReporting(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDisablePrivateVulnerabilityReportingResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const projectsListForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const projectsListForRepoQuerySchema = z.object({
    state: z.enum(["open", "closed", "all"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const projectsListForRepoResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_project)],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["410", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

  router.get(
    "projectsListForRepo",
    "/repos/:owner/:repo/projects",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsListForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          projectsListForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_project[]>(200)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with410() {
          return new KoaRuntimeResponse<t_basic_error>(410)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .projectsListForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsListForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const projectsCreateForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const projectsCreateForRepoBodySchema = z.object({
    name: z.string(),
    body: z.string().optional(),
  })

  const projectsCreateForRepoResponseValidator = responseValidationFactory(
    [
      ["201", s_project],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["410", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

  router.post(
    "projectsCreateForRepo",
    "/repos/:owner/:repo/projects",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsCreateForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          projectsCreateForRepoBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_project>(201)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with410() {
          return new KoaRuntimeResponse<t_basic_error>(410)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .projectsCreateForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsCreateForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsListParamSchema = z.object({ owner: z.string(), repo: z.string() })

  const pullsListQuerySchema = z.object({
    state: z.enum(["open", "closed", "all"]).optional(),
    head: z.string().optional(),
    base: z.string().optional(),
    sort: z
      .enum(["created", "updated", "popularity", "long-running"])
      .optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const pullsListResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_pull_request_simple)],
      ["304", z.void()],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get("pullsList", "/repos/:owner/:repo/pulls", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        pullsListParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: parseRequestInput(
        pullsListQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_pull_request_simple[]>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error>(422)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .pullsList(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = pullsListResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const pullsCreateParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const pullsCreateBodySchema = z.object({
    title: z.string().optional(),
    head: z.string(),
    head_repo: z.string().optional(),
    base: z.string(),
    body: z.string().optional(),
    maintainer_can_modify: z.coerce.boolean().optional(),
    draft: z.coerce.boolean().optional(),
    issue: z.coerce.number().optional(),
  })

  const pullsCreateResponseValidator = responseValidationFactory(
    [
      ["201", s_pull_request],
      ["403", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post("pullsCreate", "/repos/:owner/:repo/pulls", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        pullsCreateParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        pullsCreateBodySchema,
        ctx.request.body,
        RequestInputType.RequestBody,
      ),
    }

    const responder = {
      with201() {
        return new KoaRuntimeResponse<t_pull_request>(201)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error>(422)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .pullsCreate(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = pullsCreateResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const pullsListReviewCommentsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const pullsListReviewCommentsForRepoQuerySchema = z.object({
    sort: z.enum(["created", "updated", "created_at"]).optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    since: z.string().datetime({ offset: true }).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const pullsListReviewCommentsForRepoResponseValidator =
    responseValidationFactory(
      [["200", z.array(s_pull_request_review_comment)]],
      undefined,
    )

  router.get(
    "pullsListReviewCommentsForRepo",
    "/repos/:owner/:repo/pulls/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsListReviewCommentsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          pullsListReviewCommentsForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_pull_request_review_comment[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsListReviewCommentsForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsListReviewCommentsForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsGetReviewCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  const pullsGetReviewCommentResponseValidator = responseValidationFactory(
    [
      ["200", s_pull_request_review_comment],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "pullsGetReviewComment",
    "/repos/:owner/:repo/pulls/comments/:comment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsGetReviewCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_pull_request_review_comment>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsGetReviewComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsGetReviewCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsUpdateReviewCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  const pullsUpdateReviewCommentBodySchema = z.object({ body: z.string() })

  const pullsUpdateReviewCommentResponseValidator = responseValidationFactory(
    [["200", s_pull_request_review_comment]],
    undefined,
  )

  router.patch(
    "pullsUpdateReviewComment",
    "/repos/:owner/:repo/pulls/comments/:comment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsUpdateReviewCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          pullsUpdateReviewCommentBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_pull_request_review_comment>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsUpdateReviewComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsUpdateReviewCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsDeleteReviewCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  const pullsDeleteReviewCommentResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.delete(
    "pullsDeleteReviewComment",
    "/repos/:owner/:repo/pulls/comments/:comment_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsDeleteReviewCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsDeleteReviewComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsDeleteReviewCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsListForPullRequestReviewCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  const reactionsListForPullRequestReviewCommentQuerySchema = z.object({
    content: z
      .enum([
        "+1",
        "-1",
        "laugh",
        "confused",
        "heart",
        "hooray",
        "rocket",
        "eyes",
      ])
      .optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reactionsListForPullRequestReviewCommentResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_reaction)],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "reactionsListForPullRequestReviewComment",
    "/repos/:owner/:repo/pulls/comments/:comment_id/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsListForPullRequestReviewCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reactionsListForPullRequestReviewCommentQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_reaction[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsListForPullRequestReviewComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsListForPullRequestReviewCommentResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reactionsCreateForPullRequestReviewCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
  })

  const reactionsCreateForPullRequestReviewCommentBodySchema = z.object({
    content: z.enum([
      "+1",
      "-1",
      "laugh",
      "confused",
      "heart",
      "hooray",
      "rocket",
      "eyes",
    ]),
  })

  const reactionsCreateForPullRequestReviewCommentResponseValidator =
    responseValidationFactory(
      [
        ["200", s_reaction],
        ["201", s_reaction],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.post(
    "reactionsCreateForPullRequestReviewComment",
    "/repos/:owner/:repo/pulls/comments/:comment_id/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsCreateForPullRequestReviewCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reactionsCreateForPullRequestReviewCommentBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_reaction>(200)
        },
        with201() {
          return new KoaRuntimeResponse<t_reaction>(201)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsCreateForPullRequestReviewComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsCreateForPullRequestReviewCommentResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reactionsDeleteForPullRequestCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    comment_id: z.coerce.number(),
    reaction_id: z.coerce.number(),
  })

  const reactionsDeleteForPullRequestCommentResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "reactionsDeleteForPullRequestComment",
    "/repos/:owner/:repo/pulls/comments/:comment_id/reactions/:reaction_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsDeleteForPullRequestCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsDeleteForPullRequestComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsDeleteForPullRequestCommentResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const pullsGetParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsGetResponseValidator = responseValidationFactory(
    [
      ["200", s_pull_request],
      ["304", z.void()],
      ["404", s_basic_error],
      ["500", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

  router.get(
    "pullsGet",
    "/repos/:owner/:repo/pulls/:pull_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsGetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_pull_request>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsGet(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsGetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsUpdateParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsUpdateBodySchema = z
    .object({
      title: z.string().optional(),
      body: z.string().optional(),
      state: z.enum(["open", "closed"]).optional(),
      base: z.string().optional(),
      maintainer_can_modify: z.coerce.boolean().optional(),
    })
    .optional()

  const pullsUpdateResponseValidator = responseValidationFactory(
    [
      ["200", s_pull_request],
      ["403", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.patch(
    "pullsUpdate",
    "/repos/:owner/:repo/pulls/:pull_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsUpdateParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          pullsUpdateBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_pull_request>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsUpdate(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsUpdateResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const codespacesCreateWithPrForAuthenticatedUserParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const codespacesCreateWithPrForAuthenticatedUserBodySchema = z
    .object({
      location: z.string().optional(),
      geo: z
        .enum(["EuropeWest", "SoutheastAsia", "UsEast", "UsWest"])
        .optional(),
      client_ip: z.string().optional(),
      machine: z.string().optional(),
      devcontainer_path: z.string().optional(),
      multi_repo_permissions_opt_out: z.coerce.boolean().optional(),
      working_directory: z.string().optional(),
      idle_timeout_minutes: z.coerce.number().optional(),
      display_name: z.string().optional(),
      retention_period_minutes: z.coerce.number().optional(),
    })
    .nullable()

  const codespacesCreateWithPrForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["201", s_codespace],
        ["202", s_codespace],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        [
          "503",
          z.object({
            code: z.string().optional(),
            message: z.string().optional(),
            documentation_url: z.string().optional(),
          }),
        ],
      ],
      undefined,
    )

  router.post(
    "codespacesCreateWithPrForAuthenticatedUser",
    "/repos/:owner/:repo/pulls/:pull_number/codespaces",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesCreateWithPrForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codespacesCreateWithPrForAuthenticatedUserBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_codespace>(201)
        },
        with202() {
          return new KoaRuntimeResponse<t_codespace>(202)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesCreateWithPrForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesCreateWithPrForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const pullsListReviewCommentsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsListReviewCommentsQuerySchema = z.object({
    sort: z.enum(["created", "updated"]).optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    since: z.string().datetime({ offset: true }).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const pullsListReviewCommentsResponseValidator = responseValidationFactory(
    [["200", z.array(s_pull_request_review_comment)]],
    undefined,
  )

  router.get(
    "pullsListReviewComments",
    "/repos/:owner/:repo/pulls/:pull_number/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsListReviewCommentsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          pullsListReviewCommentsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_pull_request_review_comment[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsListReviewComments(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsListReviewCommentsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsCreateReviewCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsCreateReviewCommentBodySchema = z.object({
    body: z.string(),
    commit_id: z.string(),
    path: z.string(),
    position: z.coerce.number().optional(),
    side: z.enum(["LEFT", "RIGHT"]).optional(),
    line: z.coerce.number().optional(),
    start_line: z.coerce.number().optional(),
    start_side: z.enum(["LEFT", "RIGHT", "side"]).optional(),
    in_reply_to: z.coerce.number().optional(),
    subject_type: z.enum(["line", "file"]).optional(),
  })

  const pullsCreateReviewCommentResponseValidator = responseValidationFactory(
    [
      ["201", s_pull_request_review_comment],
      ["403", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "pullsCreateReviewComment",
    "/repos/:owner/:repo/pulls/:pull_number/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsCreateReviewCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          pullsCreateReviewCommentBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_pull_request_review_comment>(201)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsCreateReviewComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsCreateReviewCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsCreateReplyForReviewCommentParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
    comment_id: z.coerce.number(),
  })

  const pullsCreateReplyForReviewCommentBodySchema = z.object({
    body: z.string(),
  })

  const pullsCreateReplyForReviewCommentResponseValidator =
    responseValidationFactory(
      [
        ["201", s_pull_request_review_comment],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.post(
    "pullsCreateReplyForReviewComment",
    "/repos/:owner/:repo/pulls/:pull_number/comments/:comment_id/replies",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsCreateReplyForReviewCommentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          pullsCreateReplyForReviewCommentBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_pull_request_review_comment>(201)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsCreateReplyForReviewComment(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsCreateReplyForReviewCommentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsListCommitsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsListCommitsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const pullsListCommitsResponseValidator = responseValidationFactory(
    [["200", z.array(s_commit)]],
    undefined,
  )

  router.get(
    "pullsListCommits",
    "/repos/:owner/:repo/pulls/:pull_number/commits",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsListCommitsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          pullsListCommitsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_commit[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsListCommits(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsListCommitsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsListFilesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsListFilesQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const pullsListFilesResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_diff_entry)],
      ["422", s_validation_error],
      ["500", s_basic_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

  router.get(
    "pullsListFiles",
    "/repos/:owner/:repo/pulls/:pull_number/files",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsListFilesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          pullsListFilesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_diff_entry[]>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsListFiles(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsListFilesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsCheckIfMergedParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsCheckIfMergedResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", z.void()],
    ],
    undefined,
  )

  router.get(
    "pullsCheckIfMerged",
    "/repos/:owner/:repo/pulls/:pull_number/merge",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsCheckIfMergedParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsCheckIfMerged(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsCheckIfMergedResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsMergeParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsMergeBodySchema = z
    .object({
      commit_title: z.string().optional(),
      commit_message: z.string().optional(),
      sha: z.string().optional(),
      merge_method: z.enum(["merge", "squash", "rebase"]).optional(),
    })
    .nullable()
    .optional()

  const pullsMergeResponseValidator = responseValidationFactory(
    [
      ["200", s_pull_request_merge_result],
      ["403", s_basic_error],
      ["404", s_basic_error],
      [
        "405",
        z.object({
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
      [
        "409",
        z.object({
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.put(
    "pullsMerge",
    "/repos/:owner/:repo/pulls/:pull_number/merge",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsMergeParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          pullsMergeBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_pull_request_merge_result>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with405() {
          return new KoaRuntimeResponse<{
            documentation_url?: string
            message?: string
          }>(405)
        },
        with409() {
          return new KoaRuntimeResponse<{
            documentation_url?: string
            message?: string
          }>(409)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsMerge(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsMergeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsListRequestedReviewersParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsListRequestedReviewersResponseValidator =
    responseValidationFactory(
      [["200", s_pull_request_review_request]],
      undefined,
    )

  router.get(
    "pullsListRequestedReviewers",
    "/repos/:owner/:repo/pulls/:pull_number/requested_reviewers",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsListRequestedReviewersParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_pull_request_review_request>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsListRequestedReviewers(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsListRequestedReviewersResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsRequestReviewersParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsRequestReviewersBodySchema = z
    .object({
      reviewers: z.array(z.string()).optional(),
      team_reviewers: z.array(z.string()).optional(),
    })
    .optional()

  const pullsRequestReviewersResponseValidator = responseValidationFactory(
    [
      ["201", s_pull_request_simple],
      ["403", s_basic_error],
      ["422", z.void()],
    ],
    undefined,
  )

  router.post(
    "pullsRequestReviewers",
    "/repos/:owner/:repo/pulls/:pull_number/requested_reviewers",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsRequestReviewersParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          pullsRequestReviewersBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_pull_request_simple>(201)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with422() {
          return new KoaRuntimeResponse<void>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsRequestReviewers(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsRequestReviewersResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsRemoveRequestedReviewersParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsRemoveRequestedReviewersBodySchema = z.object({
    reviewers: z.array(z.string()),
    team_reviewers: z.array(z.string()).optional(),
  })

  const pullsRemoveRequestedReviewersResponseValidator =
    responseValidationFactory(
      [
        ["200", s_pull_request_simple],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.delete(
    "pullsRemoveRequestedReviewers",
    "/repos/:owner/:repo/pulls/:pull_number/requested_reviewers",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsRemoveRequestedReviewersParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          pullsRemoveRequestedReviewersBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_pull_request_simple>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsRemoveRequestedReviewers(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsRemoveRequestedReviewersResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsListReviewsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsListReviewsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const pullsListReviewsResponseValidator = responseValidationFactory(
    [["200", z.array(s_pull_request_review)]],
    undefined,
  )

  router.get(
    "pullsListReviews",
    "/repos/:owner/:repo/pulls/:pull_number/reviews",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsListReviewsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          pullsListReviewsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_pull_request_review[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsListReviews(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsListReviewsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsCreateReviewParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsCreateReviewBodySchema = z
    .object({
      commit_id: z.string().optional(),
      body: z.string().optional(),
      event: z.enum(["APPROVE", "REQUEST_CHANGES", "COMMENT"]).optional(),
      comments: z
        .array(
          z.object({
            path: z.string(),
            position: z.coerce.number().optional(),
            body: z.string(),
            line: z.coerce.number().optional(),
            side: z.string().optional(),
            start_line: z.coerce.number().optional(),
            start_side: z.string().optional(),
          }),
        )
        .optional(),
    })
    .optional()

  const pullsCreateReviewResponseValidator = responseValidationFactory(
    [
      ["200", s_pull_request_review],
      ["403", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

  router.post(
    "pullsCreateReview",
    "/repos/:owner/:repo/pulls/:pull_number/reviews",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsCreateReviewParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          pullsCreateReviewBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_pull_request_review>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsCreateReview(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsCreateReviewResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsGetReviewParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
    review_id: z.coerce.number(),
  })

  const pullsGetReviewResponseValidator = responseValidationFactory(
    [
      ["200", s_pull_request_review],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "pullsGetReview",
    "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsGetReviewParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_pull_request_review>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsGetReview(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsGetReviewResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsUpdateReviewParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
    review_id: z.coerce.number(),
  })

  const pullsUpdateReviewBodySchema = z.object({ body: z.string() })

  const pullsUpdateReviewResponseValidator = responseValidationFactory(
    [
      ["200", s_pull_request_review],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

  router.put(
    "pullsUpdateReview",
    "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsUpdateReviewParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          pullsUpdateReviewBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_pull_request_review>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsUpdateReview(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsUpdateReviewResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsDeletePendingReviewParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
    review_id: z.coerce.number(),
  })

  const pullsDeletePendingReviewResponseValidator = responseValidationFactory(
    [
      ["200", s_pull_request_review],
      ["404", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

  router.delete(
    "pullsDeletePendingReview",
    "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsDeletePendingReviewParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_pull_request_review>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsDeletePendingReview(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsDeletePendingReviewResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsListCommentsForReviewParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
    review_id: z.coerce.number(),
  })

  const pullsListCommentsForReviewQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const pullsListCommentsForReviewResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_review_comment)],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "pullsListCommentsForReview",
    "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsListCommentsForReviewParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          pullsListCommentsForReviewQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_review_comment[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsListCommentsForReview(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsListCommentsForReviewResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsDismissReviewParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
    review_id: z.coerce.number(),
  })

  const pullsDismissReviewBodySchema = z.object({
    message: z.string(),
    event: z.enum(["DISMISS"]).optional(),
  })

  const pullsDismissReviewResponseValidator = responseValidationFactory(
    [
      ["200", s_pull_request_review],
      ["404", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

  router.put(
    "pullsDismissReview",
    "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/dismissals",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsDismissReviewParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          pullsDismissReviewBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_pull_request_review>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsDismissReview(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsDismissReviewResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsSubmitReviewParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
    review_id: z.coerce.number(),
  })

  const pullsSubmitReviewBodySchema = z.object({
    body: z.string().optional(),
    event: z.enum(["APPROVE", "REQUEST_CHANGES", "COMMENT"]),
  })

  const pullsSubmitReviewResponseValidator = responseValidationFactory(
    [
      ["200", s_pull_request_review],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

  router.post(
    "pullsSubmitReview",
    "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/events",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsSubmitReviewParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          pullsSubmitReviewBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_pull_request_review>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsSubmitReview(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsSubmitReviewResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pullsUpdateBranchParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    pull_number: z.coerce.number(),
  })

  const pullsUpdateBranchBodySchema = z
    .object({ expected_head_sha: z.string().optional() })
    .nullable()
    .optional()

  const pullsUpdateBranchResponseValidator = responseValidationFactory(
    [
      [
        "202",
        z.object({
          message: z.string().optional(),
          url: z.string().optional(),
        }),
      ],
      ["403", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.put(
    "pullsUpdateBranch",
    "/repos/:owner/:repo/pulls/:pull_number/update-branch",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pullsUpdateBranchParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          pullsUpdateBranchBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with202() {
          return new KoaRuntimeResponse<{
            message?: string
            url?: string
          }>(202)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .pullsUpdateBranch(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pullsUpdateBranchResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetReadmeParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetReadmeQuerySchema = z.object({ ref: z.string().optional() })

  const reposGetReadmeResponseValidator = responseValidationFactory(
    [
      ["200", s_content_file],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get(
    "reposGetReadme",
    "/repos/:owner/:repo/readme",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetReadmeParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetReadmeQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_content_file>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetReadme(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetReadmeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetReadmeInDirectoryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    dir: z.string(),
  })

  const reposGetReadmeInDirectoryQuerySchema = z.object({
    ref: z.string().optional(),
  })

  const reposGetReadmeInDirectoryResponseValidator = responseValidationFactory(
    [
      ["200", s_content_file],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get(
    "reposGetReadmeInDirectory",
    "/repos/:owner/:repo/readme/:dir",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetReadmeInDirectoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetReadmeInDirectoryQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_content_file>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetReadmeInDirectory(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetReadmeInDirectoryResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListReleasesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListReleasesQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposListReleasesResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_release)],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposListReleases",
    "/repos/:owner/:repo/releases",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListReleasesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListReleasesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_release[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListReleases(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListReleasesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateReleaseParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCreateReleaseBodySchema = z.object({
    tag_name: z.string(),
    target_commitish: z.string().optional(),
    name: z.string().optional(),
    body: z.string().optional(),
    draft: z.coerce.boolean().optional(),
    prerelease: z.coerce.boolean().optional(),
    discussion_category_name: z.string().optional(),
    generate_release_notes: z.coerce.boolean().optional(),
    make_latest: z.enum(["true", "false", "legacy"]).optional(),
  })

  const reposCreateReleaseResponseValidator = responseValidationFactory(
    [
      ["201", s_release],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "reposCreateRelease",
    "/repos/:owner/:repo/releases",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateReleaseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateReleaseBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_release>(201)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCreateRelease(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateReleaseResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetReleaseAssetParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    asset_id: z.coerce.number(),
  })

  const reposGetReleaseAssetResponseValidator = responseValidationFactory(
    [
      ["200", s_release_asset],
      ["302", z.void()],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposGetReleaseAsset",
    "/repos/:owner/:repo/releases/assets/:asset_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetReleaseAssetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_release_asset>(200)
        },
        with302() {
          return new KoaRuntimeResponse<void>(302)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetReleaseAsset(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetReleaseAssetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUpdateReleaseAssetParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    asset_id: z.coerce.number(),
  })

  const reposUpdateReleaseAssetBodySchema = z
    .object({
      name: z.string().optional(),
      label: z.string().optional(),
      state: z.string().optional(),
    })
    .optional()

  const reposUpdateReleaseAssetResponseValidator = responseValidationFactory(
    [["200", s_release_asset]],
    undefined,
  )

  router.patch(
    "reposUpdateReleaseAsset",
    "/repos/:owner/:repo/releases/assets/:asset_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdateReleaseAssetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdateReleaseAssetBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_release_asset>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposUpdateReleaseAsset(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdateReleaseAssetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteReleaseAssetParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    asset_id: z.coerce.number(),
  })

  const reposDeleteReleaseAssetResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.delete(
    "reposDeleteReleaseAsset",
    "/repos/:owner/:repo/releases/assets/:asset_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteReleaseAssetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDeleteReleaseAsset(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteReleaseAssetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGenerateReleaseNotesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGenerateReleaseNotesBodySchema = z.object({
    tag_name: z.string(),
    target_commitish: z.string().optional(),
    previous_tag_name: z.string().optional(),
    configuration_file_path: z.string().optional(),
  })

  const reposGenerateReleaseNotesResponseValidator = responseValidationFactory(
    [
      ["200", s_release_notes_content],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.post(
    "reposGenerateReleaseNotes",
    "/repos/:owner/:repo/releases/generate-notes",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGenerateReleaseNotesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposGenerateReleaseNotesBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_release_notes_content>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGenerateReleaseNotes(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGenerateReleaseNotesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetLatestReleaseParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetLatestReleaseResponseValidator = responseValidationFactory(
    [["200", s_release]],
    undefined,
  )

  router.get(
    "reposGetLatestRelease",
    "/repos/:owner/:repo/releases/latest",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetLatestReleaseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_release>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetLatestRelease(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetLatestReleaseResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetReleaseByTagParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    tag: z.string(),
  })

  const reposGetReleaseByTagResponseValidator = responseValidationFactory(
    [
      ["200", s_release],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposGetReleaseByTag",
    "/repos/:owner/:repo/releases/tags/:tag",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetReleaseByTagParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_release>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetReleaseByTag(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetReleaseByTagResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetReleaseParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    release_id: z.coerce.number(),
  })

  const reposGetReleaseResponseValidator = responseValidationFactory(
    [
      ["200", s_release],
      ["401", z.void()],
    ],
    undefined,
  )

  router.get(
    "reposGetRelease",
    "/repos/:owner/:repo/releases/:release_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetReleaseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_release>(200)
        },
        with401() {
          return new KoaRuntimeResponse<void>(401)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetRelease(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetReleaseResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUpdateReleaseParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    release_id: z.coerce.number(),
  })

  const reposUpdateReleaseBodySchema = z
    .object({
      tag_name: z.string().optional(),
      target_commitish: z.string().optional(),
      name: z.string().optional(),
      body: z.string().optional(),
      draft: z.coerce.boolean().optional(),
      prerelease: z.coerce.boolean().optional(),
      make_latest: z.enum(["true", "false", "legacy"]).optional(),
      discussion_category_name: z.string().optional(),
    })
    .optional()

  const reposUpdateReleaseResponseValidator = responseValidationFactory(
    [
      ["200", s_release],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.patch(
    "reposUpdateRelease",
    "/repos/:owner/:repo/releases/:release_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdateReleaseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdateReleaseBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_release>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposUpdateRelease(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdateReleaseResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteReleaseParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    release_id: z.coerce.number(),
  })

  const reposDeleteReleaseResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.delete(
    "reposDeleteRelease",
    "/repos/:owner/:repo/releases/:release_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteReleaseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDeleteRelease(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteReleaseResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListReleaseAssetsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    release_id: z.coerce.number(),
  })

  const reposListReleaseAssetsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposListReleaseAssetsResponseValidator = responseValidationFactory(
    [["200", z.array(s_release_asset)]],
    undefined,
  )

  router.get(
    "reposListReleaseAssets",
    "/repos/:owner/:repo/releases/:release_id/assets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListReleaseAssetsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListReleaseAssetsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_release_asset[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListReleaseAssets(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListReleaseAssetsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUploadReleaseAssetParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    release_id: z.coerce.number(),
  })

  const reposUploadReleaseAssetQuerySchema = z.object({
    name: z.string(),
    label: z.string().optional(),
  })

  const reposUploadReleaseAssetBodySchema = z.string().optional()

  const reposUploadReleaseAssetResponseValidator = responseValidationFactory(
    [
      ["201", s_release_asset],
      ["422", z.void()],
    ],
    undefined,
  )

  router.post(
    "reposUploadReleaseAsset",
    "/repos/:owner/:repo/releases/:release_id/assets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUploadReleaseAssetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposUploadReleaseAssetQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: parseRequestInput(
          reposUploadReleaseAssetBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_release_asset>(201)
        },
        with422() {
          return new KoaRuntimeResponse<void>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposUploadReleaseAsset(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUploadReleaseAssetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsListForReleaseParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    release_id: z.coerce.number(),
  })

  const reactionsListForReleaseQuerySchema = z.object({
    content: z
      .enum(["+1", "laugh", "heart", "hooray", "rocket", "eyes"])
      .optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reactionsListForReleaseResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_reaction)],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reactionsListForRelease",
    "/repos/:owner/:repo/releases/:release_id/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsListForReleaseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reactionsListForReleaseQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_reaction[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsListForRelease(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsListForReleaseResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsCreateForReleaseParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    release_id: z.coerce.number(),
  })

  const reactionsCreateForReleaseBodySchema = z.object({
    content: z.enum(["+1", "laugh", "heart", "hooray", "rocket", "eyes"]),
  })

  const reactionsCreateForReleaseResponseValidator = responseValidationFactory(
    [
      ["200", s_reaction],
      ["201", s_reaction],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.post(
    "reactionsCreateForRelease",
    "/repos/:owner/:repo/releases/:release_id/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsCreateForReleaseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reactionsCreateForReleaseBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_reaction>(200)
        },
        with201() {
          return new KoaRuntimeResponse<t_reaction>(201)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsCreateForRelease(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsCreateForReleaseResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reactionsDeleteForReleaseParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    release_id: z.coerce.number(),
    reaction_id: z.coerce.number(),
  })

  const reactionsDeleteForReleaseResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.delete(
    "reactionsDeleteForRelease",
    "/repos/:owner/:repo/releases/:release_id/reactions/:reaction_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsDeleteForReleaseParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsDeleteForRelease(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsDeleteForReleaseResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetBranchRulesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  })

  const reposGetBranchRulesQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposGetBranchRulesResponseValidator = responseValidationFactory(
    [["200", z.array(s_repository_rule_detailed)]],
    undefined,
  )

  router.get(
    "reposGetBranchRules",
    "/repos/:owner/:repo/rules/branches/:branch",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetBranchRulesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetBranchRulesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_repository_rule_detailed[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetBranchRules(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetBranchRulesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetRepoRulesetsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetRepoRulesetsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
    includes_parents: z.coerce.boolean().optional(),
  })

  const reposGetRepoRulesetsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_repository_ruleset)],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposGetRepoRulesets",
    "/repos/:owner/:repo/rulesets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetRepoRulesetsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetRepoRulesetsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_repository_ruleset[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetRepoRulesets(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetRepoRulesetsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateRepoRulesetParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCreateRepoRulesetBodySchema = z.object({
    name: z.string(),
    target: z.enum(["branch", "tag"]).optional(),
    enforcement: s_repository_rule_enforcement,
    bypass_actors: z.array(s_repository_ruleset_bypass_actor).optional(),
    conditions: s_repository_ruleset_conditions.optional(),
    rules: z.array(s_repository_rule).optional(),
  })

  const reposCreateRepoRulesetResponseValidator = responseValidationFactory(
    [
      ["201", s_repository_ruleset],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

  router.post(
    "reposCreateRepoRuleset",
    "/repos/:owner/:repo/rulesets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateRepoRulesetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateRepoRulesetBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_repository_ruleset>(201)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCreateRepoRuleset(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateRepoRulesetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetRepoRulesetParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ruleset_id: z.coerce.number(),
  })

  const reposGetRepoRulesetQuerySchema = z.object({
    includes_parents: z.coerce.boolean().optional(),
  })

  const reposGetRepoRulesetResponseValidator = responseValidationFactory(
    [
      ["200", s_repository_ruleset],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposGetRepoRuleset",
    "/repos/:owner/:repo/rulesets/:ruleset_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetRepoRulesetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetRepoRulesetQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_repository_ruleset>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetRepoRuleset(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetRepoRulesetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposUpdateRepoRulesetParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ruleset_id: z.coerce.number(),
  })

  const reposUpdateRepoRulesetBodySchema = z
    .object({
      name: z.string().optional(),
      target: z.enum(["branch", "tag"]).optional(),
      enforcement: s_repository_rule_enforcement.optional(),
      bypass_actors: z.array(s_repository_ruleset_bypass_actor).optional(),
      conditions: s_repository_ruleset_conditions.optional(),
      rules: z.array(s_repository_rule).optional(),
    })
    .optional()

  const reposUpdateRepoRulesetResponseValidator = responseValidationFactory(
    [
      ["200", s_repository_ruleset],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

  router.put(
    "reposUpdateRepoRuleset",
    "/repos/:owner/:repo/rulesets/:ruleset_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposUpdateRepoRulesetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposUpdateRepoRulesetBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_repository_ruleset>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposUpdateRepoRuleset(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposUpdateRepoRulesetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteRepoRulesetParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ruleset_id: z.coerce.number(),
  })

  const reposDeleteRepoRulesetResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", s_basic_error],
      ["500", s_basic_error],
    ],
    undefined,
  )

  router.delete(
    "reposDeleteRepoRuleset",
    "/repos/:owner/:repo/rulesets/:ruleset_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteRepoRulesetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDeleteRepoRuleset(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteRepoRulesetResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const secretScanningListAlertsForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const secretScanningListAlertsForRepoQuerySchema = z.object({
    state: z.enum(["open", "resolved"]).optional(),
    secret_type: z.string().optional(),
    resolution: z.string().optional(),
    sort: z.enum(["created", "updated"]).optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
    before: z.string().optional(),
    after: z.string().optional(),
  })

  const secretScanningListAlertsForRepoResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_secret_scanning_alert)],
        ["404", z.void()],
        [
          "503",
          z.object({
            code: z.string().optional(),
            message: z.string().optional(),
            documentation_url: z.string().optional(),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "secretScanningListAlertsForRepo",
    "/repos/:owner/:repo/secret-scanning/alerts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          secretScanningListAlertsForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          secretScanningListAlertsForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_secret_scanning_alert[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .secretScanningListAlertsForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = secretScanningListAlertsForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const secretScanningGetAlertParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    alert_number: s_alert_number,
  })

  const secretScanningGetAlertResponseValidator = responseValidationFactory(
    [
      ["200", s_secret_scanning_alert],
      ["304", z.void()],
      ["404", z.void()],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

  router.get(
    "secretScanningGetAlert",
    "/repos/:owner/:repo/secret-scanning/alerts/:alert_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          secretScanningGetAlertParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_secret_scanning_alert>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .secretScanningGetAlert(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = secretScanningGetAlertResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const secretScanningUpdateAlertParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    alert_number: s_alert_number,
  })

  const secretScanningUpdateAlertBodySchema = z.object({
    state: s_secret_scanning_alert_state,
    resolution: s_secret_scanning_alert_resolution.optional(),
    resolution_comment: s_secret_scanning_alert_resolution_comment.optional(),
  })

  const secretScanningUpdateAlertResponseValidator = responseValidationFactory(
    [
      ["200", s_secret_scanning_alert],
      ["400", z.void()],
      ["404", z.void()],
      ["422", z.void()],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

  router.patch(
    "secretScanningUpdateAlert",
    "/repos/:owner/:repo/secret-scanning/alerts/:alert_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          secretScanningUpdateAlertParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          secretScanningUpdateAlertBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_secret_scanning_alert>(200)
        },
        with400() {
          return new KoaRuntimeResponse<void>(400)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        with422() {
          return new KoaRuntimeResponse<void>(422)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .secretScanningUpdateAlert(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = secretScanningUpdateAlertResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const secretScanningListLocationsForAlertParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    alert_number: s_alert_number,
  })

  const secretScanningListLocationsForAlertQuerySchema = z.object({
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
  })

  const secretScanningListLocationsForAlertResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_secret_scanning_location)],
        ["404", z.void()],
        [
          "503",
          z.object({
            code: z.string().optional(),
            message: z.string().optional(),
            documentation_url: z.string().optional(),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "secretScanningListLocationsForAlert",
    "/repos/:owner/:repo/secret-scanning/alerts/:alert_number/locations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          secretScanningListLocationsForAlertParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          secretScanningListLocationsForAlertQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_secret_scanning_location[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .secretScanningListLocationsForAlert(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = secretScanningListLocationsForAlertResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const securityAdvisoriesListRepositoryAdvisoriesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const securityAdvisoriesListRepositoryAdvisoriesQuerySchema = z.object({
    direction: z.enum(["asc", "desc"]).optional(),
    sort: z.enum(["created", "updated", "published"]).optional(),
    before: z.string().optional(),
    after: z.string().optional(),
    per_page: z.coerce.number().optional(),
    state: z.enum(["triage", "draft", "published", "closed"]).optional(),
  })

  const securityAdvisoriesListRepositoryAdvisoriesResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_repository_advisory)],
        ["400", s_scim_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "securityAdvisoriesListRepositoryAdvisories",
    "/repos/:owner/:repo/security-advisories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          securityAdvisoriesListRepositoryAdvisoriesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          securityAdvisoriesListRepositoryAdvisoriesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_repository_advisory[]>(200)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .securityAdvisoriesListRepositoryAdvisories(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = securityAdvisoriesListRepositoryAdvisoriesResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const securityAdvisoriesCreateRepositoryAdvisoryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const securityAdvisoriesCreateRepositoryAdvisoryBodySchema =
    s_repository_advisory_create

  const securityAdvisoriesCreateRepositoryAdvisoryResponseValidator =
    responseValidationFactory(
      [
        ["201", s_repository_advisory],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.post(
    "securityAdvisoriesCreateRepositoryAdvisory",
    "/repos/:owner/:repo/security-advisories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          securityAdvisoriesCreateRepositoryAdvisoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          securityAdvisoriesCreateRepositoryAdvisoryBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_repository_advisory>(201)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .securityAdvisoriesCreateRepositoryAdvisory(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = securityAdvisoriesCreateRepositoryAdvisoryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const securityAdvisoriesCreatePrivateVulnerabilityReportParamSchema =
    z.object({ owner: z.string(), repo: z.string() })

  const securityAdvisoriesCreatePrivateVulnerabilityReportBodySchema =
    s_private_vulnerability_report_create

  const securityAdvisoriesCreatePrivateVulnerabilityReportResponseValidator =
    responseValidationFactory(
      [
        ["201", s_repository_advisory],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.post(
    "securityAdvisoriesCreatePrivateVulnerabilityReport",
    "/repos/:owner/:repo/security-advisories/reports",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          securityAdvisoriesCreatePrivateVulnerabilityReportParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          securityAdvisoriesCreatePrivateVulnerabilityReportBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_repository_advisory>(201)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .securityAdvisoriesCreatePrivateVulnerabilityReport(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        securityAdvisoriesCreatePrivateVulnerabilityReportResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const securityAdvisoriesGetRepositoryAdvisoryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ghsa_id: z.string(),
  })

  const securityAdvisoriesGetRepositoryAdvisoryResponseValidator =
    responseValidationFactory(
      [
        ["200", s_repository_advisory],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "securityAdvisoriesGetRepositoryAdvisory",
    "/repos/:owner/:repo/security-advisories/:ghsa_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          securityAdvisoriesGetRepositoryAdvisoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_repository_advisory>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .securityAdvisoriesGetRepositoryAdvisory(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = securityAdvisoriesGetRepositoryAdvisoryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const securityAdvisoriesUpdateRepositoryAdvisoryParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ghsa_id: z.string(),
  })

  const securityAdvisoriesUpdateRepositoryAdvisoryBodySchema =
    s_repository_advisory_update

  const securityAdvisoriesUpdateRepositoryAdvisoryResponseValidator =
    responseValidationFactory(
      [
        ["200", s_repository_advisory],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.patch(
    "securityAdvisoriesUpdateRepositoryAdvisory",
    "/repos/:owner/:repo/security-advisories/:ghsa_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          securityAdvisoriesUpdateRepositoryAdvisoryParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          securityAdvisoriesUpdateRepositoryAdvisoryBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_repository_advisory>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .securityAdvisoriesUpdateRepositoryAdvisory(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = securityAdvisoriesUpdateRepositoryAdvisoryResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const securityAdvisoriesCreateRepositoryAdvisoryCveRequestParamSchema =
    z.object({ owner: z.string(), repo: z.string(), ghsa_id: z.string() })

  const securityAdvisoriesCreateRepositoryAdvisoryCveRequestResponseValidator =
    responseValidationFactory(
      [
        ["202", z.object({})],
        ["400", s_scim_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.post(
    "securityAdvisoriesCreateRepositoryAdvisoryCveRequest",
    "/repos/:owner/:repo/security-advisories/:ghsa_id/cve",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          securityAdvisoriesCreateRepositoryAdvisoryCveRequestParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with202() {
          return new KoaRuntimeResponse<EmptyObject>(202)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .securityAdvisoriesCreateRepositoryAdvisoryCveRequest(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        securityAdvisoriesCreateRepositoryAdvisoryCveRequestResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const activityListStargazersForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const activityListStargazersForRepoQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const activityListStargazersForRepoResponseValidator =
    responseValidationFactory(
      [
        ["200", z.union([z.array(s_simple_user), z.array(s_stargazer)])],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.get(
    "activityListStargazersForRepo",
    "/repos/:owner/:repo/stargazers",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListStargazersForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListStargazersForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_simple_user[] | t_stargazer[]>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityListStargazersForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListStargazersForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetCodeFrequencyStatsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetCodeFrequencyStatsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_code_frequency_stat)],
      ["202", z.object({})],
      ["204", z.void()],
    ],
    undefined,
  )

  router.get(
    "reposGetCodeFrequencyStats",
    "/repos/:owner/:repo/stats/code_frequency",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetCodeFrequencyStatsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_code_frequency_stat[]>(200)
        },
        with202() {
          return new KoaRuntimeResponse<EmptyObject>(202)
        },
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetCodeFrequencyStats(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetCodeFrequencyStatsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetCommitActivityStatsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetCommitActivityStatsResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_commit_activity)],
        ["202", z.object({})],
        ["204", z.void()],
      ],
      undefined,
    )

  router.get(
    "reposGetCommitActivityStats",
    "/repos/:owner/:repo/stats/commit_activity",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetCommitActivityStatsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_commit_activity[]>(200)
        },
        with202() {
          return new KoaRuntimeResponse<EmptyObject>(202)
        },
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetCommitActivityStats(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetCommitActivityStatsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetContributorsStatsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetContributorsStatsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_contributor_activity)],
      ["202", z.object({})],
      ["204", z.void()],
    ],
    undefined,
  )

  router.get(
    "reposGetContributorsStats",
    "/repos/:owner/:repo/stats/contributors",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetContributorsStatsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_contributor_activity[]>(200)
        },
        with202() {
          return new KoaRuntimeResponse<EmptyObject>(202)
        },
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetContributorsStats(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetContributorsStatsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetParticipationStatsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetParticipationStatsResponseValidator = responseValidationFactory(
    [
      ["200", s_participation_stats],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposGetParticipationStats",
    "/repos/:owner/:repo/stats/participation",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetParticipationStatsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_participation_stats>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetParticipationStats(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetParticipationStatsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetPunchCardStatsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetPunchCardStatsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_code_frequency_stat)],
      ["204", z.void()],
    ],
    undefined,
  )

  router.get(
    "reposGetPunchCardStats",
    "/repos/:owner/:repo/stats/punch_card",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetPunchCardStatsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_code_frequency_stat[]>(200)
        },
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetPunchCardStats(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetPunchCardStatsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateCommitStatusParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    sha: z.string(),
  })

  const reposCreateCommitStatusBodySchema = z.object({
    state: z.enum(["error", "failure", "pending", "success"]),
    target_url: z.string().nullable().optional(),
    description: z.string().nullable().optional(),
    context: z.string().optional(),
  })

  const reposCreateCommitStatusResponseValidator = responseValidationFactory(
    [["201", s_status]],
    undefined,
  )

  router.post(
    "reposCreateCommitStatus",
    "/repos/:owner/:repo/statuses/:sha",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateCommitStatusParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateCommitStatusBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_status>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCreateCommitStatus(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateCommitStatusResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityListWatchersForRepoParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const activityListWatchersForRepoQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const activityListWatchersForRepoResponseValidator =
    responseValidationFactory([["200", z.array(s_simple_user)]], undefined)

  router.get(
    "activityListWatchersForRepo",
    "/repos/:owner/:repo/subscribers",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListWatchersForRepoParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListWatchersForRepoQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_simple_user[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityListWatchersForRepo(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListWatchersForRepoResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityGetRepoSubscriptionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const activityGetRepoSubscriptionResponseValidator =
    responseValidationFactory(
      [
        ["200", s_repository_subscription],
        ["403", s_basic_error],
        ["404", z.void()],
      ],
      undefined,
    )

  router.get(
    "activityGetRepoSubscription",
    "/repos/:owner/:repo/subscription",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityGetRepoSubscriptionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_repository_subscription>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityGetRepoSubscription(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityGetRepoSubscriptionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activitySetRepoSubscriptionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const activitySetRepoSubscriptionBodySchema = z
    .object({
      subscribed: z.coerce.boolean().optional(),
      ignored: z.coerce.boolean().optional(),
    })
    .optional()

  const activitySetRepoSubscriptionResponseValidator =
    responseValidationFactory([["200", s_repository_subscription]], undefined)

  router.put(
    "activitySetRepoSubscription",
    "/repos/:owner/:repo/subscription",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activitySetRepoSubscriptionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          activitySetRepoSubscriptionBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_repository_subscription>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activitySetRepoSubscription(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activitySetRepoSubscriptionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityDeleteRepoSubscriptionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const activityDeleteRepoSubscriptionResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "activityDeleteRepoSubscription",
    "/repos/:owner/:repo/subscription",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityDeleteRepoSubscriptionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityDeleteRepoSubscription(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityDeleteRepoSubscriptionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListTagsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListTagsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposListTagsResponseValidator = responseValidationFactory(
    [["200", z.array(s_tag)]],
    undefined,
  )

  router.get("reposListTags", "/repos/:owner/:repo/tags", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        reposListTagsParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: parseRequestInput(
        reposListTagsQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_tag[]>(200)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .reposListTags(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = reposListTagsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const reposListTagProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListTagProtectionResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_tag_protection)],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposListTagProtection",
    "/repos/:owner/:repo/tags/protection",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListTagProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_tag_protection[]>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListTagProtection(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListTagProtectionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateTagProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCreateTagProtectionBodySchema = z.object({ pattern: z.string() })

  const reposCreateTagProtectionResponseValidator = responseValidationFactory(
    [
      ["201", s_tag_protection],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.post(
    "reposCreateTagProtection",
    "/repos/:owner/:repo/tags/protection",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateTagProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateTagProtectionBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_tag_protection>(201)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCreateTagProtection(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateTagProtectionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDeleteTagProtectionParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    tag_protection_id: z.coerce.number(),
  })

  const reposDeleteTagProtectionResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.delete(
    "reposDeleteTagProtection",
    "/repos/:owner/:repo/tags/protection/:tag_protection_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeleteTagProtectionParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDeleteTagProtection(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeleteTagProtectionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDownloadTarballArchiveParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  })

  const reposDownloadTarballArchiveResponseValidator =
    responseValidationFactory([["302", z.void()]], undefined)

  router.get(
    "reposDownloadTarballArchive",
    "/repos/:owner/:repo/tarball/:ref",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDownloadTarballArchiveParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with302() {
          return new KoaRuntimeResponse<void>(302)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDownloadTarballArchive(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDownloadTarballArchiveResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListTeamsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposListTeamsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposListTeamsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_team)],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposListTeams",
    "/repos/:owner/:repo/teams",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListTeamsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListTeamsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListTeams(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListTeamsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetAllTopicsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetAllTopicsQuerySchema = z.object({
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
  })

  const reposGetAllTopicsResponseValidator = responseValidationFactory(
    [
      ["200", s_topic],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposGetAllTopics",
    "/repos/:owner/:repo/topics",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetAllTopicsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetAllTopicsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_topic>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetAllTopics(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetAllTopicsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposReplaceAllTopicsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposReplaceAllTopicsBodySchema = z.object({
    names: z.array(z.string()),
  })

  const reposReplaceAllTopicsResponseValidator = responseValidationFactory(
    [
      ["200", s_topic],
      ["404", s_basic_error],
      ["422", s_validation_error_simple],
    ],
    undefined,
  )

  router.put(
    "reposReplaceAllTopics",
    "/repos/:owner/:repo/topics",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposReplaceAllTopicsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposReplaceAllTopicsBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_topic>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposReplaceAllTopics(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposReplaceAllTopicsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetClonesParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetClonesQuerySchema = z.object({
    per: z.enum(["day", "week"]).optional(),
  })

  const reposGetClonesResponseValidator = responseValidationFactory(
    [
      ["200", s_clone_traffic],
      ["403", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposGetClones",
    "/repos/:owner/:repo/traffic/clones",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetClonesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetClonesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_clone_traffic>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetClones(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetClonesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetTopPathsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetTopPathsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_content_traffic)],
      ["403", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposGetTopPaths",
    "/repos/:owner/:repo/traffic/popular/paths",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetTopPathsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_content_traffic[]>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetTopPaths(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetTopPathsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetTopReferrersParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetTopReferrersResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_referrer_traffic)],
      ["403", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposGetTopReferrers",
    "/repos/:owner/:repo/traffic/popular/referrers",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetTopReferrersParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_referrer_traffic[]>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetTopReferrers(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetTopReferrersResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposGetViewsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposGetViewsQuerySchema = z.object({
    per: z.enum(["day", "week"]).optional(),
  })

  const reposGetViewsResponseValidator = responseValidationFactory(
    [
      ["200", s_view_traffic],
      ["403", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "reposGetViews",
    "/repos/:owner/:repo/traffic/views",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposGetViewsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposGetViewsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_view_traffic>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposGetViews(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposGetViewsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposTransferParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposTransferBodySchema = z.object({
    new_owner: z.string(),
    new_name: z.string().optional(),
    team_ids: z.array(z.coerce.number()).optional(),
  })

  const reposTransferResponseValidator = responseValidationFactory(
    [["202", s_minimal_repository]],
    undefined,
  )

  router.post(
    "reposTransfer",
    "/repos/:owner/:repo/transfer",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposTransferParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposTransferBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with202() {
          return new KoaRuntimeResponse<t_minimal_repository>(202)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposTransfer(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposTransferResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCheckVulnerabilityAlertsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposCheckVulnerabilityAlertsResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["404", z.void()],
      ],
      undefined,
    )

  router.get(
    "reposCheckVulnerabilityAlerts",
    "/repos/:owner/:repo/vulnerability-alerts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCheckVulnerabilityAlertsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCheckVulnerabilityAlerts(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCheckVulnerabilityAlertsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposEnableVulnerabilityAlertsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposEnableVulnerabilityAlertsResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.put(
    "reposEnableVulnerabilityAlerts",
    "/repos/:owner/:repo/vulnerability-alerts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposEnableVulnerabilityAlertsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposEnableVulnerabilityAlerts(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposEnableVulnerabilityAlertsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDisableVulnerabilityAlertsParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const reposDisableVulnerabilityAlertsResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "reposDisableVulnerabilityAlerts",
    "/repos/:owner/:repo/vulnerability-alerts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDisableVulnerabilityAlertsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDisableVulnerabilityAlerts(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDisableVulnerabilityAlertsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposDownloadZipballArchiveParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  })

  const reposDownloadZipballArchiveResponseValidator =
    responseValidationFactory([["302", z.void()]], undefined)

  router.get(
    "reposDownloadZipballArchive",
    "/repos/:owner/:repo/zipball/:ref",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDownloadZipballArchiveParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with302() {
          return new KoaRuntimeResponse<void>(302)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDownloadZipballArchive(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDownloadZipballArchiveResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateUsingTemplateParamSchema = z.object({
    template_owner: z.string(),
    template_repo: z.string(),
  })

  const reposCreateUsingTemplateBodySchema = z.object({
    owner: z.string().optional(),
    name: z.string(),
    description: z.string().optional(),
    include_all_branches: z.coerce.boolean().optional(),
    private: z.coerce.boolean().optional(),
  })

  const reposCreateUsingTemplateResponseValidator = responseValidationFactory(
    [["201", s_repository]],
    undefined,
  )

  router.post(
    "reposCreateUsingTemplate",
    "/repos/:template_owner/:template_repo/generate",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposCreateUsingTemplateParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reposCreateUsingTemplateBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_repository>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCreateUsingTemplate(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateUsingTemplateResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListPublicQuerySchema = z.object({
    since: z.coerce.number().optional(),
  })

  const reposListPublicResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_minimal_repository)],
      ["304", z.void()],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get("reposListPublic", "/repositories", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        reposListPublicQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_minimal_repository[]>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error>(422)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .reposListPublic(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = reposListPublicResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const actionsListEnvironmentSecretsParamSchema = z.object({
    repository_id: z.coerce.number(),
    environment_name: z.string(),
  })

  const actionsListEnvironmentSecretsQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const actionsListEnvironmentSecretsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            secrets: z.array(s_actions_secret),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "actionsListEnvironmentSecrets",
    "/repositories/:repository_id/environments/:environment_name/secrets",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListEnvironmentSecretsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListEnvironmentSecretsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            secrets: t_actions_secret[]
            total_count: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsListEnvironmentSecrets(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListEnvironmentSecretsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetEnvironmentPublicKeyParamSchema = z.object({
    repository_id: z.coerce.number(),
    environment_name: z.string(),
  })

  const actionsGetEnvironmentPublicKeyResponseValidator =
    responseValidationFactory([["200", s_actions_public_key]], undefined)

  router.get(
    "actionsGetEnvironmentPublicKey",
    "/repositories/:repository_id/environments/:environment_name/secrets/public-key",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetEnvironmentPublicKeyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_actions_public_key>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetEnvironmentPublicKey(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetEnvironmentPublicKeyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetEnvironmentSecretParamSchema = z.object({
    repository_id: z.coerce.number(),
    environment_name: z.string(),
    secret_name: z.string(),
  })

  const actionsGetEnvironmentSecretResponseValidator =
    responseValidationFactory([["200", s_actions_secret]], undefined)

  router.get(
    "actionsGetEnvironmentSecret",
    "/repositories/:repository_id/environments/:environment_name/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetEnvironmentSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_actions_secret>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetEnvironmentSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetEnvironmentSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsCreateOrUpdateEnvironmentSecretParamSchema = z.object({
    repository_id: z.coerce.number(),
    environment_name: z.string(),
    secret_name: z.string(),
  })

  const actionsCreateOrUpdateEnvironmentSecretBodySchema = z.object({
    encrypted_value: z.string(),
    key_id: z.string(),
  })

  const actionsCreateOrUpdateEnvironmentSecretResponseValidator =
    responseValidationFactory(
      [
        ["201", s_empty_object],
        ["204", z.void()],
      ],
      undefined,
    )

  router.put(
    "actionsCreateOrUpdateEnvironmentSecret",
    "/repositories/:repository_id/environments/:environment_name/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCreateOrUpdateEnvironmentSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsCreateOrUpdateEnvironmentSecretBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_empty_object>(201)
        },
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsCreateOrUpdateEnvironmentSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCreateOrUpdateEnvironmentSecretResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteEnvironmentSecretParamSchema = z.object({
    repository_id: z.coerce.number(),
    environment_name: z.string(),
    secret_name: z.string(),
  })

  const actionsDeleteEnvironmentSecretResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "actionsDeleteEnvironmentSecret",
    "/repositories/:repository_id/environments/:environment_name/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteEnvironmentSecretParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsDeleteEnvironmentSecret(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteEnvironmentSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsListEnvironmentVariablesParamSchema = z.object({
    repository_id: z.coerce.number(),
    environment_name: z.string(),
  })

  const actionsListEnvironmentVariablesQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const actionsListEnvironmentVariablesResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            variables: z.array(s_actions_variable),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "actionsListEnvironmentVariables",
    "/repositories/:repository_id/environments/:environment_name/variables",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsListEnvironmentVariablesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          actionsListEnvironmentVariablesQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            total_count: number
            variables: t_actions_variable[]
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsListEnvironmentVariables(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsListEnvironmentVariablesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsCreateEnvironmentVariableParamSchema = z.object({
    repository_id: z.coerce.number(),
    environment_name: z.string(),
  })

  const actionsCreateEnvironmentVariableBodySchema = z.object({
    name: z.string(),
    value: z.string(),
  })

  const actionsCreateEnvironmentVariableResponseValidator =
    responseValidationFactory([["201", s_empty_object]], undefined)

  router.post(
    "actionsCreateEnvironmentVariable",
    "/repositories/:repository_id/environments/:environment_name/variables",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsCreateEnvironmentVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsCreateEnvironmentVariableBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_empty_object>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsCreateEnvironmentVariable(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsCreateEnvironmentVariableResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsGetEnvironmentVariableParamSchema = z.object({
    repository_id: z.coerce.number(),
    environment_name: z.string(),
    name: z.string(),
  })

  const actionsGetEnvironmentVariableResponseValidator =
    responseValidationFactory([["200", s_actions_variable]], undefined)

  router.get(
    "actionsGetEnvironmentVariable",
    "/repositories/:repository_id/environments/:environment_name/variables/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsGetEnvironmentVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_actions_variable>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsGetEnvironmentVariable(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsGetEnvironmentVariableResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsUpdateEnvironmentVariableParamSchema = z.object({
    repository_id: z.coerce.number(),
    name: z.string(),
    environment_name: z.string(),
  })

  const actionsUpdateEnvironmentVariableBodySchema = z.object({
    name: z.string().optional(),
    value: z.string().optional(),
  })

  const actionsUpdateEnvironmentVariableResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.patch(
    "actionsUpdateEnvironmentVariable",
    "/repositories/:repository_id/environments/:environment_name/variables/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsUpdateEnvironmentVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          actionsUpdateEnvironmentVariableBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsUpdateEnvironmentVariable(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsUpdateEnvironmentVariableResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const actionsDeleteEnvironmentVariableParamSchema = z.object({
    repository_id: z.coerce.number(),
    name: z.string(),
    environment_name: z.string(),
  })

  const actionsDeleteEnvironmentVariableResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "actionsDeleteEnvironmentVariable",
    "/repositories/:repository_id/environments/:environment_name/variables/:name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          actionsDeleteEnvironmentVariableParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .actionsDeleteEnvironmentVariable(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = actionsDeleteEnvironmentVariableResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const searchCodeQuerySchema = z.object({
    q: z.string(),
    sort: z.enum(["indexed"]).optional(),
    order: z.enum(["desc", "asc"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const searchCodeResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          incomplete_results: z.coerce.boolean(),
          items: z.array(s_code_search_result_item),
        }),
      ],
      ["304", z.void()],
      ["403", s_basic_error],
      ["422", s_validation_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

  router.get("searchCode", "/search/code", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        searchCodeQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<{
          incomplete_results: boolean
          items: t_code_search_result_item[]
          total_count: number
        }>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error>(422)
      },
      with503() {
        return new KoaRuntimeResponse<{
          code?: string
          documentation_url?: string
          message?: string
        }>(503)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .searchCode(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = searchCodeResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const searchCommitsQuerySchema = z.object({
    q: z.string(),
    sort: z.enum(["author-date", "committer-date"]).optional(),
    order: z.enum(["desc", "asc"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const searchCommitsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          incomplete_results: z.coerce.boolean(),
          items: z.array(s_commit_search_result_item),
        }),
      ],
      ["304", z.void()],
    ],
    undefined,
  )

  router.get("searchCommits", "/search/commits", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        searchCommitsQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<{
          incomplete_results: boolean
          items: t_commit_search_result_item[]
          total_count: number
        }>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .searchCommits(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = searchCommitsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const searchIssuesAndPullRequestsQuerySchema = z.object({
    q: z.string(),
    sort: z
      .enum([
        "comments",
        "reactions",
        "reactions-+1",
        "reactions--1",
        "reactions-smile",
        "reactions-thinking_face",
        "reactions-heart",
        "reactions-tada",
        "interactions",
        "created",
        "updated",
      ])
      .optional(),
    order: z.enum(["desc", "asc"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const searchIssuesAndPullRequestsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            incomplete_results: z.coerce.boolean(),
            items: z.array(s_issue_search_result_item),
          }),
        ],
        ["304", z.void()],
        ["403", s_basic_error],
        ["422", s_validation_error],
        [
          "503",
          z.object({
            code: z.string().optional(),
            message: z.string().optional(),
            documentation_url: z.string().optional(),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "searchIssuesAndPullRequests",
    "/search/issues",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          searchIssuesAndPullRequestsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            incomplete_results: boolean
            items: t_issue_search_result_item[]
            total_count: number
          }>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .searchIssuesAndPullRequests(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = searchIssuesAndPullRequestsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const searchLabelsQuerySchema = z.object({
    repository_id: z.coerce.number(),
    q: z.string(),
    sort: z.enum(["created", "updated"]).optional(),
    order: z.enum(["desc", "asc"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const searchLabelsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          incomplete_results: z.coerce.boolean(),
          items: z.array(s_label_search_result_item),
        }),
      ],
      ["304", z.void()],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get("searchLabels", "/search/labels", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        searchLabelsQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<{
          incomplete_results: boolean
          items: t_label_search_result_item[]
          total_count: number
        }>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error>(422)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .searchLabels(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = searchLabelsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const searchReposQuerySchema = z.object({
    q: z.string(),
    sort: z
      .enum(["stars", "forks", "help-wanted-issues", "updated"])
      .optional(),
    order: z.enum(["desc", "asc"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const searchReposResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          incomplete_results: z.coerce.boolean(),
          items: z.array(s_repo_search_result_item),
        }),
      ],
      ["304", z.void()],
      ["422", s_validation_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

  router.get("searchRepos", "/search/repositories", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        searchReposQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<{
          incomplete_results: boolean
          items: t_repo_search_result_item[]
          total_count: number
        }>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error>(422)
      },
      with503() {
        return new KoaRuntimeResponse<{
          code?: string
          documentation_url?: string
          message?: string
        }>(503)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .searchRepos(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = searchReposResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const searchTopicsQuerySchema = z.object({
    q: z.string(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const searchTopicsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          incomplete_results: z.coerce.boolean(),
          items: z.array(s_topic_search_result_item),
        }),
      ],
      ["304", z.void()],
    ],
    undefined,
  )

  router.get("searchTopics", "/search/topics", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        searchTopicsQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<{
          incomplete_results: boolean
          items: t_topic_search_result_item[]
          total_count: number
        }>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .searchTopics(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = searchTopicsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const searchUsersQuerySchema = z.object({
    q: z.string(),
    sort: z.enum(["followers", "repositories", "joined"]).optional(),
    order: z.enum(["desc", "asc"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const searchUsersResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          total_count: z.coerce.number(),
          incomplete_results: z.coerce.boolean(),
          items: z.array(s_user_search_result_item),
        }),
      ],
      ["304", z.void()],
      ["422", s_validation_error],
      [
        "503",
        z.object({
          code: z.string().optional(),
          message: z.string().optional(),
          documentation_url: z.string().optional(),
        }),
      ],
    ],
    undefined,
  )

  router.get("searchUsers", "/search/users", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        searchUsersQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<{
          incomplete_results: boolean
          items: t_user_search_result_item[]
          total_count: number
        }>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error>(422)
      },
      with503() {
        return new KoaRuntimeResponse<{
          code?: string
          documentation_url?: string
          message?: string
        }>(503)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .searchUsers(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = searchUsersResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const teamsGetLegacyParamSchema = z.object({ team_id: z.coerce.number() })

  const teamsGetLegacyResponseValidator = responseValidationFactory(
    [
      ["200", s_team_full],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get("teamsGetLegacy", "/teams/:team_id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        teamsGetLegacyParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_team_full>(200)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .teamsGetLegacy(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = teamsGetLegacyResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const teamsUpdateLegacyParamSchema = z.object({ team_id: z.coerce.number() })

  const teamsUpdateLegacyBodySchema = z.object({
    name: z.string(),
    description: z.string().optional(),
    privacy: z.enum(["secret", "closed"]).optional(),
    notification_setting: z
      .enum(["notifications_enabled", "notifications_disabled"])
      .optional(),
    permission: z.enum(["pull", "push", "admin"]).optional(),
    parent_team_id: z.coerce.number().nullable().optional(),
  })

  const teamsUpdateLegacyResponseValidator = responseValidationFactory(
    [
      ["200", s_team_full],
      ["201", s_team_full],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.patch("teamsUpdateLegacy", "/teams/:team_id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        teamsUpdateLegacyParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        teamsUpdateLegacyBodySchema,
        ctx.request.body,
        RequestInputType.RequestBody,
      ),
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_team_full>(200)
      },
      with201() {
        return new KoaRuntimeResponse<t_team_full>(201)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error>(422)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .teamsUpdateLegacy(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = teamsUpdateLegacyResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const teamsDeleteLegacyParamSchema = z.object({ team_id: z.coerce.number() })

  const teamsDeleteLegacyResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.delete("teamsDeleteLegacy", "/teams/:team_id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        teamsDeleteLegacyParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
    }

    const responder = {
      with204() {
        return new KoaRuntimeResponse<void>(204)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error>(422)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .teamsDeleteLegacy(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = teamsDeleteLegacyResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const teamsListDiscussionsLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
  })

  const teamsListDiscussionsLegacyQuerySchema = z.object({
    direction: z.enum(["asc", "desc"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const teamsListDiscussionsLegacyResponseValidator = responseValidationFactory(
    [["200", z.array(s_team_discussion)]],
    undefined,
  )

  router.get(
    "teamsListDiscussionsLegacy",
    "/teams/:team_id/discussions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListDiscussionsLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListDiscussionsLegacyQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_discussion[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsListDiscussionsLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListDiscussionsLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsCreateDiscussionLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
  })

  const teamsCreateDiscussionLegacyBodySchema = z.object({
    title: z.string(),
    body: z.string(),
    private: z.coerce.boolean().optional(),
  })

  const teamsCreateDiscussionLegacyResponseValidator =
    responseValidationFactory([["201", s_team_discussion]], undefined)

  router.post(
    "teamsCreateDiscussionLegacy",
    "/teams/:team_id/discussions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsCreateDiscussionLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsCreateDiscussionLegacyBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_team_discussion>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsCreateDiscussionLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsCreateDiscussionLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsGetDiscussionLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    discussion_number: z.coerce.number(),
  })

  const teamsGetDiscussionLegacyResponseValidator = responseValidationFactory(
    [["200", s_team_discussion]],
    undefined,
  )

  router.get(
    "teamsGetDiscussionLegacy",
    "/teams/:team_id/discussions/:discussion_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsGetDiscussionLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_discussion>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsGetDiscussionLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsGetDiscussionLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsUpdateDiscussionLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    discussion_number: z.coerce.number(),
  })

  const teamsUpdateDiscussionLegacyBodySchema = z
    .object({ title: z.string().optional(), body: z.string().optional() })
    .optional()

  const teamsUpdateDiscussionLegacyResponseValidator =
    responseValidationFactory([["200", s_team_discussion]], undefined)

  router.patch(
    "teamsUpdateDiscussionLegacy",
    "/teams/:team_id/discussions/:discussion_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsUpdateDiscussionLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsUpdateDiscussionLegacyBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_discussion>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsUpdateDiscussionLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsUpdateDiscussionLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsDeleteDiscussionLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    discussion_number: z.coerce.number(),
  })

  const teamsDeleteDiscussionLegacyResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "teamsDeleteDiscussionLegacy",
    "/teams/:team_id/discussions/:discussion_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsDeleteDiscussionLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsDeleteDiscussionLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsDeleteDiscussionLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsListDiscussionCommentsLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    discussion_number: z.coerce.number(),
  })

  const teamsListDiscussionCommentsLegacyQuerySchema = z.object({
    direction: z.enum(["asc", "desc"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const teamsListDiscussionCommentsLegacyResponseValidator =
    responseValidationFactory(
      [["200", z.array(s_team_discussion_comment)]],
      undefined,
    )

  router.get(
    "teamsListDiscussionCommentsLegacy",
    "/teams/:team_id/discussions/:discussion_number/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListDiscussionCommentsLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListDiscussionCommentsLegacyQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_discussion_comment[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsListDiscussionCommentsLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListDiscussionCommentsLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsCreateDiscussionCommentLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    discussion_number: z.coerce.number(),
  })

  const teamsCreateDiscussionCommentLegacyBodySchema = z.object({
    body: z.string(),
  })

  const teamsCreateDiscussionCommentLegacyResponseValidator =
    responseValidationFactory([["201", s_team_discussion_comment]], undefined)

  router.post(
    "teamsCreateDiscussionCommentLegacy",
    "/teams/:team_id/discussions/:discussion_number/comments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsCreateDiscussionCommentLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsCreateDiscussionCommentLegacyBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_team_discussion_comment>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsCreateDiscussionCommentLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsCreateDiscussionCommentLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsGetDiscussionCommentLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    discussion_number: z.coerce.number(),
    comment_number: z.coerce.number(),
  })

  const teamsGetDiscussionCommentLegacyResponseValidator =
    responseValidationFactory([["200", s_team_discussion_comment]], undefined)

  router.get(
    "teamsGetDiscussionCommentLegacy",
    "/teams/:team_id/discussions/:discussion_number/comments/:comment_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsGetDiscussionCommentLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_discussion_comment>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsGetDiscussionCommentLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsGetDiscussionCommentLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsUpdateDiscussionCommentLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    discussion_number: z.coerce.number(),
    comment_number: z.coerce.number(),
  })

  const teamsUpdateDiscussionCommentLegacyBodySchema = z.object({
    body: z.string(),
  })

  const teamsUpdateDiscussionCommentLegacyResponseValidator =
    responseValidationFactory([["200", s_team_discussion_comment]], undefined)

  router.patch(
    "teamsUpdateDiscussionCommentLegacy",
    "/teams/:team_id/discussions/:discussion_number/comments/:comment_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsUpdateDiscussionCommentLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsUpdateDiscussionCommentLegacyBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_discussion_comment>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsUpdateDiscussionCommentLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsUpdateDiscussionCommentLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsDeleteDiscussionCommentLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    discussion_number: z.coerce.number(),
    comment_number: z.coerce.number(),
  })

  const teamsDeleteDiscussionCommentLegacyResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "teamsDeleteDiscussionCommentLegacy",
    "/teams/:team_id/discussions/:discussion_number/comments/:comment_number",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsDeleteDiscussionCommentLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsDeleteDiscussionCommentLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsDeleteDiscussionCommentLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reactionsListForTeamDiscussionCommentLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    discussion_number: z.coerce.number(),
    comment_number: z.coerce.number(),
  })

  const reactionsListForTeamDiscussionCommentLegacyQuerySchema = z.object({
    content: z
      .enum([
        "+1",
        "-1",
        "laugh",
        "confused",
        "heart",
        "hooray",
        "rocket",
        "eyes",
      ])
      .optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reactionsListForTeamDiscussionCommentLegacyResponseValidator =
    responseValidationFactory([["200", z.array(s_reaction)]], undefined)

  router.get(
    "reactionsListForTeamDiscussionCommentLegacy",
    "/teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsListForTeamDiscussionCommentLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reactionsListForTeamDiscussionCommentLegacyQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_reaction[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsListForTeamDiscussionCommentLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsListForTeamDiscussionCommentLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reactionsCreateForTeamDiscussionCommentLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    discussion_number: z.coerce.number(),
    comment_number: z.coerce.number(),
  })

  const reactionsCreateForTeamDiscussionCommentLegacyBodySchema = z.object({
    content: z.enum([
      "+1",
      "-1",
      "laugh",
      "confused",
      "heart",
      "hooray",
      "rocket",
      "eyes",
    ]),
  })

  const reactionsCreateForTeamDiscussionCommentLegacyResponseValidator =
    responseValidationFactory([["201", s_reaction]], undefined)

  router.post(
    "reactionsCreateForTeamDiscussionCommentLegacy",
    "/teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsCreateForTeamDiscussionCommentLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reactionsCreateForTeamDiscussionCommentLegacyBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_reaction>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsCreateForTeamDiscussionCommentLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsCreateForTeamDiscussionCommentLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reactionsListForTeamDiscussionLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    discussion_number: z.coerce.number(),
  })

  const reactionsListForTeamDiscussionLegacyQuerySchema = z.object({
    content: z
      .enum([
        "+1",
        "-1",
        "laugh",
        "confused",
        "heart",
        "hooray",
        "rocket",
        "eyes",
      ])
      .optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reactionsListForTeamDiscussionLegacyResponseValidator =
    responseValidationFactory([["200", z.array(s_reaction)]], undefined)

  router.get(
    "reactionsListForTeamDiscussionLegacy",
    "/teams/:team_id/discussions/:discussion_number/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsListForTeamDiscussionLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reactionsListForTeamDiscussionLegacyQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_reaction[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsListForTeamDiscussionLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsListForTeamDiscussionLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reactionsCreateForTeamDiscussionLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    discussion_number: z.coerce.number(),
  })

  const reactionsCreateForTeamDiscussionLegacyBodySchema = z.object({
    content: z.enum([
      "+1",
      "-1",
      "laugh",
      "confused",
      "heart",
      "hooray",
      "rocket",
      "eyes",
    ]),
  })

  const reactionsCreateForTeamDiscussionLegacyResponseValidator =
    responseValidationFactory([["201", s_reaction]], undefined)

  router.post(
    "reactionsCreateForTeamDiscussionLegacy",
    "/teams/:team_id/discussions/:discussion_number/reactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reactionsCreateForTeamDiscussionLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          reactionsCreateForTeamDiscussionLegacyBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_reaction>(201)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reactionsCreateForTeamDiscussionLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reactionsCreateForTeamDiscussionLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsListPendingInvitationsLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
  })

  const teamsListPendingInvitationsLegacyQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const teamsListPendingInvitationsLegacyResponseValidator =
    responseValidationFactory(
      [["200", z.array(s_organization_invitation)]],
      undefined,
    )

  router.get(
    "teamsListPendingInvitationsLegacy",
    "/teams/:team_id/invitations",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListPendingInvitationsLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListPendingInvitationsLegacyQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_organization_invitation[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsListPendingInvitationsLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListPendingInvitationsLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsListMembersLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
  })

  const teamsListMembersLegacyQuerySchema = z.object({
    role: z.enum(["member", "maintainer", "all"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const teamsListMembersLegacyResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_simple_user)],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "teamsListMembersLegacy",
    "/teams/:team_id/members",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListMembersLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListMembersLegacyQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_simple_user[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsListMembersLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListMembersLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsGetMemberLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    username: z.string(),
  })

  const teamsGetMemberLegacyResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", z.void()],
    ],
    undefined,
  )

  router.get(
    "teamsGetMemberLegacy",
    "/teams/:team_id/members/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsGetMemberLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsGetMemberLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsGetMemberLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsAddMemberLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    username: z.string(),
  })

  const teamsAddMemberLegacyResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["403", s_basic_error],
      ["404", z.void()],
      ["422", z.void()],
    ],
    undefined,
  )

  router.put(
    "teamsAddMemberLegacy",
    "/teams/:team_id/members/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsAddMemberLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        with422() {
          return new KoaRuntimeResponse<void>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsAddMemberLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsAddMemberLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsRemoveMemberLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    username: z.string(),
  })

  const teamsRemoveMemberLegacyResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", z.void()],
    ],
    undefined,
  )

  router.delete(
    "teamsRemoveMemberLegacy",
    "/teams/:team_id/members/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsRemoveMemberLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsRemoveMemberLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsRemoveMemberLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsGetMembershipForUserLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    username: z.string(),
  })

  const teamsGetMembershipForUserLegacyResponseValidator =
    responseValidationFactory(
      [
        ["200", s_team_membership],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "teamsGetMembershipForUserLegacy",
    "/teams/:team_id/memberships/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsGetMembershipForUserLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_membership>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsGetMembershipForUserLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsGetMembershipForUserLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsAddOrUpdateMembershipForUserLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    username: z.string(),
  })

  const teamsAddOrUpdateMembershipForUserLegacyBodySchema = z
    .object({ role: z.enum(["member", "maintainer"]).optional() })
    .optional()

  const teamsAddOrUpdateMembershipForUserLegacyResponseValidator =
    responseValidationFactory(
      [
        ["200", s_team_membership],
        ["403", z.void()],
        ["404", s_basic_error],
        ["422", z.void()],
      ],
      undefined,
    )

  router.put(
    "teamsAddOrUpdateMembershipForUserLegacy",
    "/teams/:team_id/memberships/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsAddOrUpdateMembershipForUserLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsAddOrUpdateMembershipForUserLegacyBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_membership>(200)
        },
        with403() {
          return new KoaRuntimeResponse<void>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<void>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsAddOrUpdateMembershipForUserLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsAddOrUpdateMembershipForUserLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsRemoveMembershipForUserLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    username: z.string(),
  })

  const teamsRemoveMembershipForUserLegacyResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["403", z.void()],
      ],
      undefined,
    )

  router.delete(
    "teamsRemoveMembershipForUserLegacy",
    "/teams/:team_id/memberships/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsRemoveMembershipForUserLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with403() {
          return new KoaRuntimeResponse<void>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsRemoveMembershipForUserLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsRemoveMembershipForUserLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsListProjectsLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
  })

  const teamsListProjectsLegacyQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const teamsListProjectsLegacyResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_team_project)],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "teamsListProjectsLegacy",
    "/teams/:team_id/projects",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListProjectsLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListProjectsLegacyQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_project[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsListProjectsLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListProjectsLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsCheckPermissionsForProjectLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    project_id: z.coerce.number(),
  })

  const teamsCheckPermissionsForProjectLegacyResponseValidator =
    responseValidationFactory(
      [
        ["200", s_team_project],
        ["404", z.void()],
      ],
      undefined,
    )

  router.get(
    "teamsCheckPermissionsForProjectLegacy",
    "/teams/:team_id/projects/:project_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsCheckPermissionsForProjectLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_project>(200)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsCheckPermissionsForProjectLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsCheckPermissionsForProjectLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsAddOrUpdateProjectPermissionsLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    project_id: z.coerce.number(),
  })

  const teamsAddOrUpdateProjectPermissionsLegacyBodySchema = z
    .object({ permission: z.enum(["read", "write", "admin"]).optional() })
    .optional()

  const teamsAddOrUpdateProjectPermissionsLegacyResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        [
          "403",
          z.object({
            message: z.string().optional(),
            documentation_url: z.string().optional(),
          }),
        ],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.put(
    "teamsAddOrUpdateProjectPermissionsLegacy",
    "/teams/:team_id/projects/:project_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsAddOrUpdateProjectPermissionsLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsAddOrUpdateProjectPermissionsLegacyBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with403() {
          return new KoaRuntimeResponse<{
            documentation_url?: string
            message?: string
          }>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsAddOrUpdateProjectPermissionsLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsAddOrUpdateProjectPermissionsLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsRemoveProjectLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    project_id: z.coerce.number(),
  })

  const teamsRemoveProjectLegacyResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.delete(
    "teamsRemoveProjectLegacy",
    "/teams/:team_id/projects/:project_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsRemoveProjectLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsRemoveProjectLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsRemoveProjectLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsListReposLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
  })

  const teamsListReposLegacyQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const teamsListReposLegacyResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_minimal_repository)],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "teamsListReposLegacy",
    "/teams/:team_id/repos",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListReposLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListReposLegacyQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_minimal_repository[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsListReposLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListReposLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsCheckPermissionsForRepoLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    owner: z.string(),
    repo: z.string(),
  })

  const teamsCheckPermissionsForRepoLegacyResponseValidator =
    responseValidationFactory(
      [
        ["200", s_team_repository],
        ["204", z.void()],
        ["404", z.void()],
      ],
      undefined,
    )

  router.get(
    "teamsCheckPermissionsForRepoLegacy",
    "/teams/:team_id/repos/:owner/:repo",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsCheckPermissionsForRepoLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_repository>(200)
        },
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsCheckPermissionsForRepoLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsCheckPermissionsForRepoLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsAddOrUpdateRepoPermissionsLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    owner: z.string(),
    repo: z.string(),
  })

  const teamsAddOrUpdateRepoPermissionsLegacyBodySchema = z
    .object({ permission: z.enum(["pull", "push", "admin"]).optional() })
    .optional()

  const teamsAddOrUpdateRepoPermissionsLegacyResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["403", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.put(
    "teamsAddOrUpdateRepoPermissionsLegacy",
    "/teams/:team_id/repos/:owner/:repo",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsAddOrUpdateRepoPermissionsLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          teamsAddOrUpdateRepoPermissionsLegacyBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsAddOrUpdateRepoPermissionsLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsAddOrUpdateRepoPermissionsLegacyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsRemoveRepoLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
    owner: z.string(),
    repo: z.string(),
  })

  const teamsRemoveRepoLegacyResponseValidator = responseValidationFactory(
    [["204", z.void()]],
    undefined,
  )

  router.delete(
    "teamsRemoveRepoLegacy",
    "/teams/:team_id/repos/:owner/:repo",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsRemoveRepoLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsRemoveRepoLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsRemoveRepoLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const teamsListChildLegacyParamSchema = z.object({
    team_id: z.coerce.number(),
  })

  const teamsListChildLegacyQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const teamsListChildLegacyResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_team)],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get(
    "teamsListChildLegacy",
    "/teams/:team_id/teams",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          teamsListChildLegacyParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          teamsListChildLegacyQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team[]>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsListChildLegacy(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListChildLegacyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const usersGetAuthenticatedResponseValidator = responseValidationFactory(
    [
      ["200", z.union([s_private_user, s_public_user])],
      ["304", z.void()],
      ["401", s_basic_error],
      ["403", s_basic_error],
    ],
    undefined,
  )

  router.get("usersGetAuthenticated", "/user", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_private_user | t_public_user>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with401() {
        return new KoaRuntimeResponse<t_basic_error>(401)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .usersGetAuthenticated(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = usersGetAuthenticatedResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const usersUpdateAuthenticatedBodySchema = z
    .object({
      name: z.string().optional(),
      email: z.string().optional(),
      blog: z.string().optional(),
      twitter_username: z.string().nullable().optional(),
      company: z.string().optional(),
      location: z.string().optional(),
      hireable: z.coerce.boolean().optional(),
      bio: z.string().optional(),
    })
    .optional()

  const usersUpdateAuthenticatedResponseValidator = responseValidationFactory(
    [
      ["200", s_private_user],
      ["304", z.void()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.patch("usersUpdateAuthenticated", "/user", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(
        usersUpdateAuthenticatedBodySchema,
        ctx.request.body,
        RequestInputType.RequestBody,
      ),
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_private_user>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with401() {
        return new KoaRuntimeResponse<t_basic_error>(401)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error>(422)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .usersUpdateAuthenticated(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = usersUpdateAuthenticatedResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const usersListBlockedByAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const usersListBlockedByAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_simple_user)],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "usersListBlockedByAuthenticatedUser",
    "/user/blocks",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          usersListBlockedByAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_simple_user[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersListBlockedByAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListBlockedByAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersCheckBlockedParamSchema = z.object({ username: z.string() })

  const usersCheckBlockedResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["304", z.void()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get(
    "usersCheckBlocked",
    "/user/blocks/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersCheckBlockedParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersCheckBlocked(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersCheckBlockedResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const usersBlockParamSchema = z.object({ username: z.string() })

  const usersBlockResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["304", z.void()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.put("usersBlock", "/user/blocks/:username", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        usersBlockParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
    }

    const responder = {
      with204() {
        return new KoaRuntimeResponse<void>(204)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with401() {
        return new KoaRuntimeResponse<t_basic_error>(401)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      with422() {
        return new KoaRuntimeResponse<t_validation_error>(422)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .usersBlock(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = usersBlockResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const usersUnblockParamSchema = z.object({ username: z.string() })

  const usersUnblockResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["304", z.void()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.delete("usersUnblock", "/user/blocks/:username", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        usersUnblockParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
    }

    const responder = {
      with204() {
        return new KoaRuntimeResponse<void>(204)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with401() {
        return new KoaRuntimeResponse<t_basic_error>(401)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .usersUnblock(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = usersUnblockResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const codespacesListForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
    repository_id: z.coerce.number().optional(),
  })

  const codespacesListForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            codespaces: z.array(s_codespace),
          }),
        ],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "codespacesListForAuthenticatedUser",
    "/user/codespaces",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          codespacesListForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            codespaces: t_codespace[]
            total_count: number
          }>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesListForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesListForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesCreateForAuthenticatedUserBodySchema = z.union([
    z.object({
      repository_id: z.coerce.number(),
      ref: z.string().optional(),
      location: z.string().optional(),
      geo: z
        .enum(["EuropeWest", "SoutheastAsia", "UsEast", "UsWest"])
        .optional(),
      client_ip: z.string().optional(),
      machine: z.string().optional(),
      devcontainer_path: z.string().optional(),
      multi_repo_permissions_opt_out: z.coerce.boolean().optional(),
      working_directory: z.string().optional(),
      idle_timeout_minutes: z.coerce.number().optional(),
      display_name: z.string().optional(),
      retention_period_minutes: z.coerce.number().optional(),
    }),
    z.object({
      pull_request: z.object({
        pull_request_number: z.coerce.number(),
        repository_id: z.coerce.number(),
      }),
      location: z.string().optional(),
      geo: z
        .enum(["EuropeWest", "SoutheastAsia", "UsEast", "UsWest"])
        .optional(),
      machine: z.string().optional(),
      devcontainer_path: z.string().optional(),
      working_directory: z.string().optional(),
      idle_timeout_minutes: z.coerce.number().optional(),
    }),
  ])

  const codespacesCreateForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["201", s_codespace],
        ["202", s_codespace],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        [
          "503",
          z.object({
            code: z.string().optional(),
            message: z.string().optional(),
            documentation_url: z.string().optional(),
          }),
        ],
      ],
      undefined,
    )

  router.post(
    "codespacesCreateForAuthenticatedUser",
    "/user/codespaces",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          codespacesCreateForAuthenticatedUserBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_codespace>(201)
        },
        with202() {
          return new KoaRuntimeResponse<t_codespace>(202)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with503() {
          return new KoaRuntimeResponse<{
            code?: string
            documentation_url?: string
            message?: string
          }>(503)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesCreateForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesCreateForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesListSecretsForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const codespacesListSecretsForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            secrets: z.array(s_codespaces_secret),
          }),
        ],
      ],
      undefined,
    )

  router.get(
    "codespacesListSecretsForAuthenticatedUser",
    "/user/codespaces/secrets",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          codespacesListSecretsForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            secrets: t_codespaces_secret[]
            total_count: number
          }>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesListSecretsForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesListSecretsForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesGetPublicKeyForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [["200", s_codespaces_user_public_key]],
      undefined,
    )

  router.get(
    "codespacesGetPublicKeyForAuthenticatedUser",
    "/user/codespaces/secrets/public-key",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_codespaces_user_public_key>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesGetPublicKeyForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesGetPublicKeyForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesGetSecretForAuthenticatedUserParamSchema = z.object({
    secret_name: z.string(),
  })

  const codespacesGetSecretForAuthenticatedUserResponseValidator =
    responseValidationFactory([["200", s_codespaces_secret]], undefined)

  router.get(
    "codespacesGetSecretForAuthenticatedUser",
    "/user/codespaces/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesGetSecretForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_codespaces_secret>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesGetSecretForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesGetSecretForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesCreateOrUpdateSecretForAuthenticatedUserParamSchema =
    z.object({ secret_name: z.string() })

  const codespacesCreateOrUpdateSecretForAuthenticatedUserBodySchema = z.object(
    {
      encrypted_value: z.string().optional(),
      key_id: z.string(),
      selected_repository_ids: z
        .array(z.union([z.coerce.number(), z.string()]))
        .optional(),
    },
  )

  const codespacesCreateOrUpdateSecretForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["201", s_empty_object],
        ["204", z.void()],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.put(
    "codespacesCreateOrUpdateSecretForAuthenticatedUser",
    "/user/codespaces/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesCreateOrUpdateSecretForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codespacesCreateOrUpdateSecretForAuthenticatedUserBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_empty_object>(201)
        },
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesCreateOrUpdateSecretForAuthenticatedUser(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        codespacesCreateOrUpdateSecretForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const codespacesDeleteSecretForAuthenticatedUserParamSchema = z.object({
    secret_name: z.string(),
  })

  const codespacesDeleteSecretForAuthenticatedUserResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "codespacesDeleteSecretForAuthenticatedUser",
    "/user/codespaces/secrets/:secret_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesDeleteSecretForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesDeleteSecretForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesDeleteSecretForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesListRepositoriesForSecretForAuthenticatedUserParamSchema =
    z.object({ secret_name: z.string() })

  const codespacesListRepositoriesForSecretForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            repositories: z.array(s_minimal_repository),
          }),
        ],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "codespacesListRepositoriesForSecretForAuthenticatedUser",
    "/user/codespaces/secrets/:secret_name/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesListRepositoriesForSecretForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            repositories: t_minimal_repository[]
            total_count: number
          }>(200)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesListRepositoriesForSecretForAuthenticatedUser(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        codespacesListRepositoriesForSecretForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const codespacesSetRepositoriesForSecretForAuthenticatedUserParamSchema =
    z.object({ secret_name: z.string() })

  const codespacesSetRepositoriesForSecretForAuthenticatedUserBodySchema =
    z.object({ selected_repository_ids: z.array(z.coerce.number()) })

  const codespacesSetRepositoriesForSecretForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.put(
    "codespacesSetRepositoriesForSecretForAuthenticatedUser",
    "/user/codespaces/secrets/:secret_name/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesSetRepositoriesForSecretForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codespacesSetRepositoriesForSecretForAuthenticatedUserBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesSetRepositoriesForSecretForAuthenticatedUser(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        codespacesSetRepositoriesForSecretForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const codespacesAddRepositoryForSecretForAuthenticatedUserParamSchema =
    z.object({ secret_name: z.string(), repository_id: z.coerce.number() })

  const codespacesAddRepositoryForSecretForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.put(
    "codespacesAddRepositoryForSecretForAuthenticatedUser",
    "/user/codespaces/secrets/:secret_name/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesAddRepositoryForSecretForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesAddRepositoryForSecretForAuthenticatedUser(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        codespacesAddRepositoryForSecretForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const codespacesRemoveRepositoryForSecretForAuthenticatedUserParamSchema =
    z.object({ secret_name: z.string(), repository_id: z.coerce.number() })

  const codespacesRemoveRepositoryForSecretForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "codespacesRemoveRepositoryForSecretForAuthenticatedUser",
    "/user/codespaces/secrets/:secret_name/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesRemoveRepositoryForSecretForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesRemoveRepositoryForSecretForAuthenticatedUser(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        codespacesRemoveRepositoryForSecretForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const codespacesGetForAuthenticatedUserParamSchema = z.object({
    codespace_name: z.string(),
  })

  const codespacesGetForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", s_codespace],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "codespacesGetForAuthenticatedUser",
    "/user/codespaces/:codespace_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesGetForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_codespace>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesGetForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesGetForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesUpdateForAuthenticatedUserParamSchema = z.object({
    codespace_name: z.string(),
  })

  const codespacesUpdateForAuthenticatedUserBodySchema = z
    .object({
      machine: z.string().optional(),
      display_name: z.string().optional(),
      recent_folders: z.array(z.string()).optional(),
    })
    .optional()

  const codespacesUpdateForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", s_codespace],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.patch(
    "codespacesUpdateForAuthenticatedUser",
    "/user/codespaces/:codespace_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesUpdateForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codespacesUpdateForAuthenticatedUserBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_codespace>(200)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesUpdateForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesUpdateForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesDeleteForAuthenticatedUserParamSchema = z.object({
    codespace_name: z.string(),
  })

  const codespacesDeleteForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["202", z.object({})],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "codespacesDeleteForAuthenticatedUser",
    "/user/codespaces/:codespace_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesDeleteForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with202() {
          return new KoaRuntimeResponse<EmptyObject>(202)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesDeleteForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesDeleteForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesExportForAuthenticatedUserParamSchema = z.object({
    codespace_name: z.string(),
  })

  const codespacesExportForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["202", s_codespace_export_details],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", s_validation_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.post(
    "codespacesExportForAuthenticatedUser",
    "/user/codespaces/:codespace_name/exports",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesExportForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with202() {
          return new KoaRuntimeResponse<t_codespace_export_details>(202)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesExportForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesExportForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesGetExportDetailsForAuthenticatedUserParamSchema = z.object({
    codespace_name: z.string(),
    export_id: z.string(),
  })

  const codespacesGetExportDetailsForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", s_codespace_export_details],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "codespacesGetExportDetailsForAuthenticatedUser",
    "/user/codespaces/:codespace_name/exports/:export_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesGetExportDetailsForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_codespace_export_details>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesGetExportDetailsForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        codespacesGetExportDetailsForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const codespacesCodespaceMachinesForAuthenticatedUserParamSchema = z.object({
    codespace_name: z.string(),
  })

  const codespacesCodespaceMachinesForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            machines: z.array(s_codespace_machine),
          }),
        ],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "codespacesCodespaceMachinesForAuthenticatedUser",
    "/user/codespaces/:codespace_name/machines",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesCodespaceMachinesForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            machines: t_codespace_machine[]
            total_count: number
          }>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesCodespaceMachinesForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        codespacesCodespaceMachinesForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const codespacesPublishForAuthenticatedUserParamSchema = z.object({
    codespace_name: z.string(),
  })

  const codespacesPublishForAuthenticatedUserBodySchema = z.object({
    name: z.string().optional(),
    private: z.coerce.boolean().optional(),
  })

  const codespacesPublishForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["201", s_codespace_with_full_repository],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.post(
    "codespacesPublishForAuthenticatedUser",
    "/user/codespaces/:codespace_name/publish",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesPublishForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          codespacesPublishForAuthenticatedUserBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_codespace_with_full_repository>(201)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesPublishForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesPublishForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesStartForAuthenticatedUserParamSchema = z.object({
    codespace_name: z.string(),
  })

  const codespacesStartForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", s_codespace],
        ["304", z.void()],
        ["400", s_scim_error],
        ["401", s_basic_error],
        ["402", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["409", s_basic_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.post(
    "codespacesStartForAuthenticatedUser",
    "/user/codespaces/:codespace_name/start",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesStartForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_codespace>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with402() {
          return new KoaRuntimeResponse<t_basic_error>(402)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with409() {
          return new KoaRuntimeResponse<t_basic_error>(409)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesStartForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesStartForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const codespacesStopForAuthenticatedUserParamSchema = z.object({
    codespace_name: z.string(),
  })

  const codespacesStopForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", s_codespace],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["500", s_basic_error],
      ],
      undefined,
    )

  router.post(
    "codespacesStopForAuthenticatedUser",
    "/user/codespaces/:codespace_name/stop",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          codespacesStopForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_codespace>(200)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with500() {
          return new KoaRuntimeResponse<t_basic_error>(500)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .codespacesStopForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = codespacesStopForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const packagesListDockerMigrationConflictingPackagesForAuthenticatedUserResponseValidator =
    responseValidationFactory([["200", z.array(s_package)]], undefined)

  router.get(
    "packagesListDockerMigrationConflictingPackagesForAuthenticatedUser",
    "/user/docker/conflicts",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_package[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesListDockerMigrationConflictingPackagesForAuthenticatedUser(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        packagesListDockerMigrationConflictingPackagesForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const usersSetPrimaryEmailVisibilityForAuthenticatedUserBodySchema = z.object(
    { visibility: z.enum(["public", "private"]) },
  )

  const usersSetPrimaryEmailVisibilityForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_email)],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.patch(
    "usersSetPrimaryEmailVisibilityForAuthenticatedUser",
    "/user/email/visibility",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          usersSetPrimaryEmailVisibilityForAuthenticatedUserBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_email[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersSetPrimaryEmailVisibilityForAuthenticatedUser(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        usersSetPrimaryEmailVisibilityForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const usersListEmailsForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const usersListEmailsForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_email)],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "usersListEmailsForAuthenticatedUser",
    "/user/emails",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          usersListEmailsForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_email[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersListEmailsForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListEmailsForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersAddEmailForAuthenticatedUserBodySchema = z
    .union([
      z.object({ emails: z.array(z.string()) }),
      z.array(z.string()),
      z.string(),
    ])
    .optional()

  const usersAddEmailForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["201", z.array(s_email)],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.post(
    "usersAddEmailForAuthenticatedUser",
    "/user/emails",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          usersAddEmailForAuthenticatedUserBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_email[]>(201)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersAddEmailForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersAddEmailForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersDeleteEmailForAuthenticatedUserBodySchema = z.union([
    z.object({ emails: z.array(z.string()) }),
    z.array(z.string()),
    z.string(),
  ])

  const usersDeleteEmailForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.delete(
    "usersDeleteEmailForAuthenticatedUser",
    "/user/emails",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          usersDeleteEmailForAuthenticatedUserBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersDeleteEmailForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersDeleteEmailForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersListFollowersForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const usersListFollowersForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_simple_user)],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "usersListFollowersForAuthenticatedUser",
    "/user/followers",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          usersListFollowersForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_simple_user[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersListFollowersForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListFollowersForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersListFollowedByAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const usersListFollowedByAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_simple_user)],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "usersListFollowedByAuthenticatedUser",
    "/user/following",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          usersListFollowedByAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_simple_user[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersListFollowedByAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListFollowedByAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersCheckPersonIsFollowedByAuthenticatedParamSchema = z.object({
    username: z.string(),
  })

  const usersCheckPersonIsFollowedByAuthenticatedResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "usersCheckPersonIsFollowedByAuthenticated",
    "/user/following/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersCheckPersonIsFollowedByAuthenticatedParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersCheckPersonIsFollowedByAuthenticated(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersCheckPersonIsFollowedByAuthenticatedResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersFollowParamSchema = z.object({ username: z.string() })

  const usersFollowResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["304", z.void()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.put("usersFollow", "/user/following/:username", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        usersFollowParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
    }

    const responder = {
      with204() {
        return new KoaRuntimeResponse<void>(204)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      with401() {
        return new KoaRuntimeResponse<t_basic_error>(401)
      },
      with403() {
        return new KoaRuntimeResponse<t_basic_error>(403)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .usersFollow(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = usersFollowResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const usersUnfollowParamSchema = z.object({ username: z.string() })

  const usersUnfollowResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["304", z.void()],
      ["401", s_basic_error],
      ["403", s_basic_error],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.delete(
    "usersUnfollow",
    "/user/following/:username",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersUnfollowParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersUnfollow(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersUnfollowResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const usersListGpgKeysForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const usersListGpgKeysForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_gpg_key)],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "usersListGpgKeysForAuthenticatedUser",
    "/user/gpg_keys",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          usersListGpgKeysForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_gpg_key[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersListGpgKeysForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListGpgKeysForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersCreateGpgKeyForAuthenticatedUserBodySchema = z.object({
    name: z.string().optional(),
    armored_public_key: z.string(),
  })

  const usersCreateGpgKeyForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["201", s_gpg_key],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.post(
    "usersCreateGpgKeyForAuthenticatedUser",
    "/user/gpg_keys",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          usersCreateGpgKeyForAuthenticatedUserBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_gpg_key>(201)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersCreateGpgKeyForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersCreateGpgKeyForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersGetGpgKeyForAuthenticatedUserParamSchema = z.object({
    gpg_key_id: z.coerce.number(),
  })

  const usersGetGpgKeyForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", s_gpg_key],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "usersGetGpgKeyForAuthenticatedUser",
    "/user/gpg_keys/:gpg_key_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersGetGpgKeyForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_gpg_key>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersGetGpgKeyForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersGetGpgKeyForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersDeleteGpgKeyForAuthenticatedUserParamSchema = z.object({
    gpg_key_id: z.coerce.number(),
  })

  const usersDeleteGpgKeyForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.delete(
    "usersDeleteGpgKeyForAuthenticatedUser",
    "/user/gpg_keys/:gpg_key_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersDeleteGpgKeyForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersDeleteGpgKeyForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersDeleteGpgKeyForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const appsListInstallationsForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const appsListInstallationsForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            installations: z.array(s_installation),
          }),
        ],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "appsListInstallationsForAuthenticatedUser",
    "/user/installations",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          appsListInstallationsForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            installations: t_installation[]
            total_count: number
          }>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsListInstallationsForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsListInstallationsForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const appsListInstallationReposForAuthenticatedUserParamSchema = z.object({
    installation_id: z.coerce.number(),
  })

  const appsListInstallationReposForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const appsListInstallationReposForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            total_count: z.coerce.number(),
            repository_selection: z.string().optional(),
            repositories: z.array(s_repository),
          }),
        ],
        ["304", z.void()],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "appsListInstallationReposForAuthenticatedUser",
    "/user/installations/:installation_id/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsListInstallationReposForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          appsListInstallationReposForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<{
            repositories: t_repository[]
            repository_selection?: string
            total_count: number
          }>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsListInstallationReposForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsListInstallationReposForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const appsAddRepoToInstallationForAuthenticatedUserParamSchema = z.object({
    installation_id: z.coerce.number(),
    repository_id: z.coerce.number(),
  })

  const appsAddRepoToInstallationForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["304", z.void()],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.put(
    "appsAddRepoToInstallationForAuthenticatedUser",
    "/user/installations/:installation_id/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsAddRepoToInstallationForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsAddRepoToInstallationForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsAddRepoToInstallationForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const appsRemoveRepoFromInstallationForAuthenticatedUserParamSchema =
    z.object({
      installation_id: z.coerce.number(),
      repository_id: z.coerce.number(),
    })

  const appsRemoveRepoFromInstallationForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["304", z.void()],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", z.void()],
      ],
      undefined,
    )

  router.delete(
    "appsRemoveRepoFromInstallationForAuthenticatedUser",
    "/user/installations/:installation_id/repositories/:repository_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsRemoveRepoFromInstallationForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<void>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsRemoveRepoFromInstallationForAuthenticatedUser(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        appsRemoveRepoFromInstallationForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const interactionsGetRestrictionsForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.union([s_interaction_limit_response, z.object({})])],
        ["204", z.void()],
      ],
      undefined,
    )

  router.get(
    "interactionsGetRestrictionsForAuthenticatedUser",
    "/user/interaction-limits",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<
            t_interaction_limit_response | EmptyObject
          >(200)
        },
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .interactionsGetRestrictionsForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        interactionsGetRestrictionsForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const interactionsSetRestrictionsForAuthenticatedUserBodySchema =
    s_interaction_limit

  const interactionsSetRestrictionsForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", s_interaction_limit_response],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.put(
    "interactionsSetRestrictionsForAuthenticatedUser",
    "/user/interaction-limits",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          interactionsSetRestrictionsForAuthenticatedUserBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_interaction_limit_response>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .interactionsSetRestrictionsForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        interactionsSetRestrictionsForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const interactionsRemoveRestrictionsForAuthenticatedUserResponseValidator =
    responseValidationFactory([["204", z.void()]], undefined)

  router.delete(
    "interactionsRemoveRestrictionsForAuthenticatedUser",
    "/user/interaction-limits",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .interactionsRemoveRestrictionsForAuthenticatedUser(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        interactionsRemoveRestrictionsForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const issuesListForAuthenticatedUserQuerySchema = z.object({
    filter: z
      .enum(["assigned", "created", "mentioned", "subscribed", "repos", "all"])
      .optional(),
    state: z.enum(["open", "closed", "all"]).optional(),
    labels: z.string().optional(),
    sort: z.enum(["created", "updated", "comments"]).optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    since: z.string().datetime({ offset: true }).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const issuesListForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_issue)],
        ["304", z.void()],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "issuesListForAuthenticatedUser",
    "/user/issues",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          issuesListForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_issue[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .issuesListForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = issuesListForAuthenticatedUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const usersListPublicSshKeysForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const usersListPublicSshKeysForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_key)],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "usersListPublicSshKeysForAuthenticatedUser",
    "/user/keys",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          usersListPublicSshKeysForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_key[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersListPublicSshKeysForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListPublicSshKeysForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersCreatePublicSshKeyForAuthenticatedUserBodySchema = z.object({
    title: z.string().optional(),
    key: z.string(),
  })

  const usersCreatePublicSshKeyForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["201", s_key],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.post(
    "usersCreatePublicSshKeyForAuthenticatedUser",
    "/user/keys",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          usersCreatePublicSshKeyForAuthenticatedUserBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_key>(201)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersCreatePublicSshKeyForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersCreatePublicSshKeyForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersGetPublicSshKeyForAuthenticatedUserParamSchema = z.object({
    key_id: z.coerce.number(),
  })

  const usersGetPublicSshKeyForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", s_key],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "usersGetPublicSshKeyForAuthenticatedUser",
    "/user/keys/:key_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersGetPublicSshKeyForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_key>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersGetPublicSshKeyForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersGetPublicSshKeyForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersDeletePublicSshKeyForAuthenticatedUserParamSchema = z.object({
    key_id: z.coerce.number(),
  })

  const usersDeletePublicSshKeyForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "usersDeletePublicSshKeyForAuthenticatedUser",
    "/user/keys/:key_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersDeletePublicSshKeyForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersDeletePublicSshKeyForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersDeletePublicSshKeyForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const appsListSubscriptionsForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const appsListSubscriptionsForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_user_marketplace_purchase)],
        ["304", z.void()],
        ["401", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "appsListSubscriptionsForAuthenticatedUser",
    "/user/marketplace_purchases",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          appsListSubscriptionsForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_user_marketplace_purchase[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsListSubscriptionsForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsListSubscriptionsForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const appsListSubscriptionsForAuthenticatedUserStubbedQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const appsListSubscriptionsForAuthenticatedUserStubbedResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_user_marketplace_purchase)],
        ["304", z.void()],
        ["401", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "appsListSubscriptionsForAuthenticatedUserStubbed",
    "/user/marketplace_purchases/stubbed",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          appsListSubscriptionsForAuthenticatedUserStubbedQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_user_marketplace_purchase[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsListSubscriptionsForAuthenticatedUserStubbed(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        appsListSubscriptionsForAuthenticatedUserStubbedResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const orgsListMembershipsForAuthenticatedUserQuerySchema = z.object({
    state: z.enum(["active", "pending"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const orgsListMembershipsForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_org_membership)],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.get(
    "orgsListMembershipsForAuthenticatedUser",
    "/user/memberships/orgs",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          orgsListMembershipsForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_org_membership[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsListMembershipsForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListMembershipsForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsGetMembershipForAuthenticatedUserParamSchema = z.object({
    org: z.string(),
  })

  const orgsGetMembershipForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", s_org_membership],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "orgsGetMembershipForAuthenticatedUser",
    "/user/memberships/orgs/:org",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsGetMembershipForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_org_membership>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsGetMembershipForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsGetMembershipForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsUpdateMembershipForAuthenticatedUserParamSchema = z.object({
    org: z.string(),
  })

  const orgsUpdateMembershipForAuthenticatedUserBodySchema = z.object({
    state: z.enum(["active"]),
  })

  const orgsUpdateMembershipForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", s_org_membership],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.patch(
    "orgsUpdateMembershipForAuthenticatedUser",
    "/user/memberships/orgs/:org",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          orgsUpdateMembershipForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          orgsUpdateMembershipForAuthenticatedUserBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_org_membership>(200)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsUpdateMembershipForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsUpdateMembershipForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const migrationsListForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const migrationsListForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_migration)],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "migrationsListForAuthenticatedUser",
    "/user/migrations",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          migrationsListForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_migration[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .migrationsListForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsListForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const migrationsStartForAuthenticatedUserBodySchema = z.object({
    lock_repositories: z.coerce.boolean().optional(),
    exclude_metadata: z.coerce.boolean().optional(),
    exclude_git_data: z.coerce.boolean().optional(),
    exclude_attachments: z.coerce.boolean().optional(),
    exclude_releases: z.coerce.boolean().optional(),
    exclude_owner_projects: z.coerce.boolean().optional(),
    org_metadata_only: z.coerce.boolean().optional(),
    exclude: z.array(z.enum(["repositories"])).optional(),
    repositories: z.array(z.string()),
  })

  const migrationsStartForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["201", s_migration],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.post(
    "migrationsStartForAuthenticatedUser",
    "/user/migrations",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          migrationsStartForAuthenticatedUserBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_migration>(201)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .migrationsStartForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsStartForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const migrationsGetStatusForAuthenticatedUserParamSchema = z.object({
    migration_id: z.coerce.number(),
  })

  const migrationsGetStatusForAuthenticatedUserQuerySchema = z.object({
    exclude: z.array(z.string()).optional(),
  })

  const migrationsGetStatusForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", s_migration],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "migrationsGetStatusForAuthenticatedUser",
    "/user/migrations/:migration_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsGetStatusForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          migrationsGetStatusForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_migration>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .migrationsGetStatusForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsGetStatusForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const migrationsGetArchiveForAuthenticatedUserParamSchema = z.object({
    migration_id: z.coerce.number(),
  })

  const migrationsGetArchiveForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["302", z.void()],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "migrationsGetArchiveForAuthenticatedUser",
    "/user/migrations/:migration_id/archive",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsGetArchiveForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with302() {
          return new KoaRuntimeResponse<void>(302)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .migrationsGetArchiveForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsGetArchiveForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const migrationsDeleteArchiveForAuthenticatedUserParamSchema = z.object({
    migration_id: z.coerce.number(),
  })

  const migrationsDeleteArchiveForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "migrationsDeleteArchiveForAuthenticatedUser",
    "/user/migrations/:migration_id/archive",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsDeleteArchiveForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .migrationsDeleteArchiveForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsDeleteArchiveForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const migrationsUnlockRepoForAuthenticatedUserParamSchema = z.object({
    migration_id: z.coerce.number(),
    repo_name: z.string(),
  })

  const migrationsUnlockRepoForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "migrationsUnlockRepoForAuthenticatedUser",
    "/user/migrations/:migration_id/repos/:repo_name/lock",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsUnlockRepoForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .migrationsUnlockRepoForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsUnlockRepoForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const migrationsListReposForAuthenticatedUserParamSchema = z.object({
    migration_id: z.coerce.number(),
  })

  const migrationsListReposForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const migrationsListReposForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_minimal_repository)],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "migrationsListReposForAuthenticatedUser",
    "/user/migrations/:migration_id/repositories",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          migrationsListReposForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          migrationsListReposForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_minimal_repository[]>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .migrationsListReposForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = migrationsListReposForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const orgsListForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const orgsListForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_organization_simple)],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "orgsListForAuthenticatedUser",
    "/user/orgs",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          orgsListForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_organization_simple[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .orgsListForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = orgsListForAuthenticatedUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const packagesListPackagesForAuthenticatedUserQuerySchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    visibility: z.enum(["public", "private", "internal"]).optional(),
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
  })

  const packagesListPackagesForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_package)],
        ["400", z.void()],
      ],
      undefined,
    )

  router.get(
    "packagesListPackagesForAuthenticatedUser",
    "/user/packages",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          packagesListPackagesForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_package[]>(200)
        },
        with400() {
          return new KoaRuntimeResponse<void>(400)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesListPackagesForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesListPackagesForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const packagesGetPackageForAuthenticatedUserParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
  })

  const packagesGetPackageForAuthenticatedUserResponseValidator =
    responseValidationFactory([["200", s_package]], undefined)

  router.get(
    "packagesGetPackageForAuthenticatedUser",
    "/user/packages/:package_type/:package_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesGetPackageForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_package>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesGetPackageForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesGetPackageForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const packagesDeletePackageForAuthenticatedUserParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
  })

  const packagesDeletePackageForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "packagesDeletePackageForAuthenticatedUser",
    "/user/packages/:package_type/:package_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesDeletePackageForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesDeletePackageForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesDeletePackageForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const packagesRestorePackageForAuthenticatedUserParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
  })

  const packagesRestorePackageForAuthenticatedUserQuerySchema = z.object({
    token: z.string().optional(),
  })

  const packagesRestorePackageForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.post(
    "packagesRestorePackageForAuthenticatedUser",
    "/user/packages/:package_type/:package_name/restore",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesRestorePackageForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          packagesRestorePackageForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesRestorePackageForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesRestorePackageForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParamSchema =
    z.object({
      package_type: z.enum([
        "npm",
        "maven",
        "rubygems",
        "docker",
        "nuget",
        "container",
      ]),
      package_name: z.string(),
    })

  const packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQuerySchema =
    z.object({
      page: z.coerce.number().optional(),
      per_page: z.coerce.number().optional(),
      state: z.enum(["active", "deleted"]).optional(),
    })

  const packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_package_version)],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser",
    "/user/packages/:package_type/:package_name/versions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_package_version[]>(200)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const packagesGetPackageVersionForAuthenticatedUserParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    package_version_id: z.coerce.number(),
  })

  const packagesGetPackageVersionForAuthenticatedUserResponseValidator =
    responseValidationFactory([["200", s_package_version]], undefined)

  router.get(
    "packagesGetPackageVersionForAuthenticatedUser",
    "/user/packages/:package_type/:package_name/versions/:package_version_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesGetPackageVersionForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_package_version>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesGetPackageVersionForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesGetPackageVersionForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const packagesDeletePackageVersionForAuthenticatedUserParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    package_version_id: z.coerce.number(),
  })

  const packagesDeletePackageVersionForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "packagesDeletePackageVersionForAuthenticatedUser",
    "/user/packages/:package_type/:package_name/versions/:package_version_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesDeletePackageVersionForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesDeletePackageVersionForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        packagesDeletePackageVersionForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const packagesRestorePackageVersionForAuthenticatedUserParamSchema = z.object(
    {
      package_type: z.enum([
        "npm",
        "maven",
        "rubygems",
        "docker",
        "nuget",
        "container",
      ]),
      package_name: z.string(),
      package_version_id: z.coerce.number(),
    },
  )

  const packagesRestorePackageVersionForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.post(
    "packagesRestorePackageVersionForAuthenticatedUser",
    "/user/packages/:package_type/:package_name/versions/:package_version_id/restore",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesRestorePackageVersionForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesRestorePackageVersionForAuthenticatedUser(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        packagesRestorePackageVersionForAuthenticatedUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const projectsCreateForAuthenticatedUserBodySchema = z.object({
    name: z.string(),
    body: z.string().nullable().optional(),
  })

  const projectsCreateForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["201", s_project],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["422", s_validation_error_simple],
      ],
      undefined,
    )

  router.post(
    "projectsCreateForAuthenticatedUser",
    "/user/projects",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          projectsCreateForAuthenticatedUserBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_project>(201)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error_simple>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .projectsCreateForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsCreateForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersListPublicEmailsForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const usersListPublicEmailsForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_email)],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "usersListPublicEmailsForAuthenticatedUser",
    "/user/public_emails",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          usersListPublicEmailsForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_email[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersListPublicEmailsForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListPublicEmailsForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposListForAuthenticatedUserQuerySchema = z.object({
    visibility: z.enum(["all", "public", "private"]).optional(),
    affiliation: z.string().optional(),
    type: z.enum(["all", "owner", "public", "private", "member"]).optional(),
    sort: z.enum(["created", "updated", "pushed", "full_name"]).optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
    since: z.string().datetime({ offset: true }).optional(),
    before: z.string().datetime({ offset: true }).optional(),
  })

  const reposListForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_repository)],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.get(
    "reposListForAuthenticatedUser",
    "/user/repos",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          reposListForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_repository[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListForAuthenticatedUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposCreateForAuthenticatedUserBodySchema = z.object({
    name: z.string(),
    description: z.string().optional(),
    homepage: z.string().optional(),
    private: z.coerce.boolean().optional(),
    has_issues: z.coerce.boolean().optional(),
    has_projects: z.coerce.boolean().optional(),
    has_wiki: z.coerce.boolean().optional(),
    has_discussions: z.coerce.boolean().optional(),
    team_id: z.coerce.number().optional(),
    auto_init: z.coerce.boolean().optional(),
    gitignore_template: z.string().optional(),
    license_template: z.string().optional(),
    allow_squash_merge: z.coerce.boolean().optional(),
    allow_merge_commit: z.coerce.boolean().optional(),
    allow_rebase_merge: z.coerce.boolean().optional(),
    allow_auto_merge: z.coerce.boolean().optional(),
    delete_branch_on_merge: z.coerce.boolean().optional(),
    squash_merge_commit_title: z
      .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
      .optional(),
    squash_merge_commit_message: z
      .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
      .optional(),
    merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
    merge_commit_message: z.enum(["PR_BODY", "PR_TITLE", "BLANK"]).optional(),
    has_downloads: z.coerce.boolean().optional(),
    is_template: z.coerce.boolean().optional(),
  })

  const reposCreateForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["201", s_repository],
        ["304", z.void()],
        ["400", s_scim_error],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.post(
    "reposCreateForAuthenticatedUser",
    "/user/repos",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          reposCreateForAuthenticatedUserBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_repository>(201)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with400() {
          return new KoaRuntimeResponse<t_scim_error>(400)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposCreateForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposCreateForAuthenticatedUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const reposListInvitationsForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposListInvitationsForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_repository_invitation)],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "reposListInvitationsForAuthenticatedUser",
    "/user/repository_invitations",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          reposListInvitationsForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_repository_invitation[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListInvitationsForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListInvitationsForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposAcceptInvitationForAuthenticatedUserParamSchema = z.object({
    invitation_id: z.coerce.number(),
  })

  const reposAcceptInvitationForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["304", z.void()],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["409", s_basic_error],
      ],
      undefined,
    )

  router.patch(
    "reposAcceptInvitationForAuthenticatedUser",
    "/user/repository_invitations/:invitation_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposAcceptInvitationForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with409() {
          return new KoaRuntimeResponse<t_basic_error>(409)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposAcceptInvitationForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposAcceptInvitationForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposDeclineInvitationForAuthenticatedUserParamSchema = z.object({
    invitation_id: z.coerce.number(),
  })

  const reposDeclineInvitationForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["304", z.void()],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["409", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "reposDeclineInvitationForAuthenticatedUser",
    "/user/repository_invitations/:invitation_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposDeclineInvitationForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with409() {
          return new KoaRuntimeResponse<t_basic_error>(409)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposDeclineInvitationForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposDeclineInvitationForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersListSocialAccountsForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const usersListSocialAccountsForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_social_account)],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "usersListSocialAccountsForAuthenticatedUser",
    "/user/social_accounts",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          usersListSocialAccountsForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_social_account[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersListSocialAccountsForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListSocialAccountsForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersAddSocialAccountForAuthenticatedUserBodySchema = z.object({
    account_urls: z.array(z.string()),
  })

  const usersAddSocialAccountForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["201", z.array(s_social_account)],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.post(
    "usersAddSocialAccountForAuthenticatedUser",
    "/user/social_accounts",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          usersAddSocialAccountForAuthenticatedUserBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_social_account[]>(201)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersAddSocialAccountForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersAddSocialAccountForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersDeleteSocialAccountForAuthenticatedUserBodySchema = z.object({
    account_urls: z.array(z.string()),
  })

  const usersDeleteSocialAccountForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.delete(
    "usersDeleteSocialAccountForAuthenticatedUser",
    "/user/social_accounts",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          usersDeleteSocialAccountForAuthenticatedUserBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersDeleteSocialAccountForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersDeleteSocialAccountForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersListSshSigningKeysForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const usersListSshSigningKeysForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_ssh_signing_key)],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "usersListSshSigningKeysForAuthenticatedUser",
    "/user/ssh_signing_keys",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          usersListSshSigningKeysForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_ssh_signing_key[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersListSshSigningKeysForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListSshSigningKeysForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersCreateSshSigningKeyForAuthenticatedUserBodySchema = z.object({
    title: z.string().optional(),
    key: z.string(),
  })

  const usersCreateSshSigningKeyForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["201", s_ssh_signing_key],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
        ["422", s_validation_error],
      ],
      undefined,
    )

  router.post(
    "usersCreateSshSigningKeyForAuthenticatedUser",
    "/user/ssh_signing_keys",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          usersCreateSshSigningKeyForAuthenticatedUserBodySchema,
          ctx.request.body,
          RequestInputType.RequestBody,
        ),
      }

      const responder = {
        with201() {
          return new KoaRuntimeResponse<t_ssh_signing_key>(201)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersCreateSshSigningKeyForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersCreateSshSigningKeyForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersGetSshSigningKeyForAuthenticatedUserParamSchema = z.object({
    ssh_signing_key_id: z.coerce.number(),
  })

  const usersGetSshSigningKeyForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", s_ssh_signing_key],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "usersGetSshSigningKeyForAuthenticatedUser",
    "/user/ssh_signing_keys/:ssh_signing_key_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersGetSshSigningKeyForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_ssh_signing_key>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersGetSshSigningKeyForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersGetSshSigningKeyForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersDeleteSshSigningKeyForAuthenticatedUserParamSchema = z.object({
    ssh_signing_key_id: z.coerce.number(),
  })

  const usersDeleteSshSigningKeyForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "usersDeleteSshSigningKeyForAuthenticatedUser",
    "/user/ssh_signing_keys/:ssh_signing_key_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersDeleteSshSigningKeyForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersDeleteSshSigningKeyForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersDeleteSshSigningKeyForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const activityListReposStarredByAuthenticatedUserQuerySchema = z.object({
    sort: z.enum(["created", "updated"]).optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const activityListReposStarredByAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_starred_repository)],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "activityListReposStarredByAuthenticatedUser",
    "/user/starred",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          activityListReposStarredByAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_starred_repository[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityListReposStarredByAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListReposStarredByAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const activityCheckRepoIsStarredByAuthenticatedUserParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const activityCheckRepoIsStarredByAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "activityCheckRepoIsStarredByAuthenticatedUser",
    "/user/starred/:owner/:repo",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityCheckRepoIsStarredByAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityCheckRepoIsStarredByAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityCheckRepoIsStarredByAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const activityStarRepoForAuthenticatedUserParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const activityStarRepoForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.put(
    "activityStarRepoForAuthenticatedUser",
    "/user/starred/:owner/:repo",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityStarRepoForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityStarRepoForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityStarRepoForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const activityUnstarRepoForAuthenticatedUserParamSchema = z.object({
    owner: z.string(),
    repo: z.string(),
  })

  const activityUnstarRepoForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "activityUnstarRepoForAuthenticatedUser",
    "/user/starred/:owner/:repo",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityUnstarRepoForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityUnstarRepoForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityUnstarRepoForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const activityListWatchedReposForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const activityListWatchedReposForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_minimal_repository)],
        ["304", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "activityListWatchedReposForAuthenticatedUser",
    "/user/subscriptions",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          activityListWatchedReposForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_minimal_repository[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityListWatchedReposForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListWatchedReposForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const teamsListForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const teamsListForAuthenticatedUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_team_full)],
        ["304", z.void()],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "teamsListForAuthenticatedUser",
    "/user/teams",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          teamsListForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_team_full[]>(200)
        },
        with304() {
          return new KoaRuntimeResponse<void>(304)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .teamsListForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = teamsListForAuthenticatedUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const usersListQuerySchema = z.object({
    since: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
  })

  const usersListResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_simple_user)],
      ["304", z.void()],
    ],
    undefined,
  )

  router.get("usersList", "/users", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        usersListQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_simple_user[]>(200)
      },
      with304() {
        return new KoaRuntimeResponse<void>(304)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .usersList(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = usersListResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const usersGetByUsernameParamSchema = z.object({ username: z.string() })

  const usersGetByUsernameResponseValidator = responseValidationFactory(
    [
      ["200", z.union([s_private_user, s_public_user])],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get("usersGetByUsername", "/users/:username", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        usersGetByUsernameParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_private_user | t_public_user>(200)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .usersGetByUsername(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = usersGetByUsernameResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const packagesListDockerMigrationConflictingPackagesForUserParamSchema =
    z.object({ username: z.string() })

  const packagesListDockerMigrationConflictingPackagesForUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_package)],
        ["401", s_basic_error],
        ["403", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "packagesListDockerMigrationConflictingPackagesForUser",
    "/users/:username/docker/conflicts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesListDockerMigrationConflictingPackagesForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_package[]>(200)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesListDockerMigrationConflictingPackagesForUser(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        packagesListDockerMigrationConflictingPackagesForUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const activityListEventsForAuthenticatedUserParamSchema = z.object({
    username: z.string(),
  })

  const activityListEventsForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const activityListEventsForAuthenticatedUserResponseValidator =
    responseValidationFactory([["200", z.array(s_event)]], undefined)

  router.get(
    "activityListEventsForAuthenticatedUser",
    "/users/:username/events",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListEventsForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListEventsForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_event[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityListEventsForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListEventsForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const activityListOrgEventsForAuthenticatedUserParamSchema = z.object({
    username: z.string(),
    org: z.string(),
  })

  const activityListOrgEventsForAuthenticatedUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const activityListOrgEventsForAuthenticatedUserResponseValidator =
    responseValidationFactory([["200", z.array(s_event)]], undefined)

  router.get(
    "activityListOrgEventsForAuthenticatedUser",
    "/users/:username/events/orgs/:org",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListOrgEventsForAuthenticatedUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListOrgEventsForAuthenticatedUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_event[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityListOrgEventsForAuthenticatedUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListOrgEventsForAuthenticatedUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const activityListPublicEventsForUserParamSchema = z.object({
    username: z.string(),
  })

  const activityListPublicEventsForUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const activityListPublicEventsForUserResponseValidator =
    responseValidationFactory([["200", z.array(s_event)]], undefined)

  router.get(
    "activityListPublicEventsForUser",
    "/users/:username/events/public",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListPublicEventsForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListPublicEventsForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_event[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityListPublicEventsForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListPublicEventsForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const usersListFollowersForUserParamSchema = z.object({
    username: z.string(),
  })

  const usersListFollowersForUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const usersListFollowersForUserResponseValidator = responseValidationFactory(
    [["200", z.array(s_simple_user)]],
    undefined,
  )

  router.get(
    "usersListFollowersForUser",
    "/users/:username/followers",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersListFollowersForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          usersListFollowersForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_simple_user[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersListFollowersForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListFollowersForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const usersListFollowingForUserParamSchema = z.object({
    username: z.string(),
  })

  const usersListFollowingForUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const usersListFollowingForUserResponseValidator = responseValidationFactory(
    [["200", z.array(s_simple_user)]],
    undefined,
  )

  router.get(
    "usersListFollowingForUser",
    "/users/:username/following",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersListFollowingForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          usersListFollowingForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_simple_user[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersListFollowingForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListFollowingForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const usersCheckFollowingForUserParamSchema = z.object({
    username: z.string(),
    target_user: z.string(),
  })

  const usersCheckFollowingForUserResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["404", z.void()],
    ],
    undefined,
  )

  router.get(
    "usersCheckFollowingForUser",
    "/users/:username/following/:target_user",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersCheckFollowingForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with404() {
          return new KoaRuntimeResponse<void>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersCheckFollowingForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersCheckFollowingForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const gistsListForUserParamSchema = z.object({ username: z.string() })

  const gistsListForUserQuerySchema = z.object({
    since: z.string().datetime({ offset: true }).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const gistsListForUserResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_base_gist)],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get(
    "gistsListForUser",
    "/users/:username/gists",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          gistsListForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          gistsListForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_base_gist[]>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .gistsListForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = gistsListForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const usersListGpgKeysForUserParamSchema = z.object({ username: z.string() })

  const usersListGpgKeysForUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const usersListGpgKeysForUserResponseValidator = responseValidationFactory(
    [["200", z.array(s_gpg_key)]],
    undefined,
  )

  router.get(
    "usersListGpgKeysForUser",
    "/users/:username/gpg_keys",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersListGpgKeysForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          usersListGpgKeysForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_gpg_key[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersListGpgKeysForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListGpgKeysForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const usersGetContextForUserParamSchema = z.object({ username: z.string() })

  const usersGetContextForUserQuerySchema = z.object({
    subject_type: z
      .enum(["organization", "repository", "issue", "pull_request"])
      .optional(),
    subject_id: z.string().optional(),
  })

  const usersGetContextForUserResponseValidator = responseValidationFactory(
    [
      ["200", s_hovercard],
      ["404", s_basic_error],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get(
    "usersGetContextForUser",
    "/users/:username/hovercard",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersGetContextForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          usersGetContextForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_hovercard>(200)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersGetContextForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersGetContextForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const appsGetUserInstallationParamSchema = z.object({ username: z.string() })

  const appsGetUserInstallationResponseValidator = responseValidationFactory(
    [["200", s_installation]],
    undefined,
  )

  router.get(
    "appsGetUserInstallation",
    "/users/:username/installation",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          appsGetUserInstallationParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_installation>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .appsGetUserInstallation(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = appsGetUserInstallationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const usersListPublicKeysForUserParamSchema = z.object({
    username: z.string(),
  })

  const usersListPublicKeysForUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const usersListPublicKeysForUserResponseValidator = responseValidationFactory(
    [["200", z.array(s_key_simple)]],
    undefined,
  )

  router.get(
    "usersListPublicKeysForUser",
    "/users/:username/keys",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersListPublicKeysForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          usersListPublicKeysForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_key_simple[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersListPublicKeysForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListPublicKeysForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const orgsListForUserParamSchema = z.object({ username: z.string() })

  const orgsListForUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const orgsListForUserResponseValidator = responseValidationFactory(
    [["200", z.array(s_organization_simple)]],
    undefined,
  )

  router.get("orgsListForUser", "/users/:username/orgs", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        orgsListForUserParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: parseRequestInput(
        orgsListForUserQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_organization_simple[]>(200)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .orgsListForUser(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = orgsListForUserResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const packagesListPackagesForUserParamSchema = z.object({
    username: z.string(),
  })

  const packagesListPackagesForUserQuerySchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    visibility: z.enum(["public", "private", "internal"]).optional(),
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
  })

  const packagesListPackagesForUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_package)],
        ["400", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "packagesListPackagesForUser",
    "/users/:username/packages",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesListPackagesForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          packagesListPackagesForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_package[]>(200)
        },
        with400() {
          return new KoaRuntimeResponse<void>(400)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesListPackagesForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesListPackagesForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const packagesGetPackageForUserParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    username: z.string(),
  })

  const packagesGetPackageForUserResponseValidator = responseValidationFactory(
    [["200", s_package]],
    undefined,
  )

  router.get(
    "packagesGetPackageForUser",
    "/users/:username/packages/:package_type/:package_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesGetPackageForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_package>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesGetPackageForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesGetPackageForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const packagesDeletePackageForUserParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    username: z.string(),
  })

  const packagesDeletePackageForUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "packagesDeletePackageForUser",
    "/users/:username/packages/:package_type/:package_name",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesDeletePackageForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesDeletePackageForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesDeletePackageForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const packagesRestorePackageForUserParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    username: z.string(),
  })

  const packagesRestorePackageForUserQuerySchema = z.object({
    token: z.string().optional(),
  })

  const packagesRestorePackageForUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.post(
    "packagesRestorePackageForUser",
    "/users/:username/packages/:package_type/:package_name/restore",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesRestorePackageForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          packagesRestorePackageForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesRestorePackageForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesRestorePackageForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const packagesGetAllPackageVersionsForPackageOwnedByUserParamSchema =
    z.object({
      package_type: z.enum([
        "npm",
        "maven",
        "rubygems",
        "docker",
        "nuget",
        "container",
      ]),
      package_name: z.string(),
      username: z.string(),
    })

  const packagesGetAllPackageVersionsForPackageOwnedByUserResponseValidator =
    responseValidationFactory(
      [
        ["200", z.array(s_package_version)],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.get(
    "packagesGetAllPackageVersionsForPackageOwnedByUser",
    "/users/:username/packages/:package_type/:package_name/versions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesGetAllPackageVersionsForPackageOwnedByUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_package_version[]>(200)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesGetAllPackageVersionsForPackageOwnedByUser(
          input,
          responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        packagesGetAllPackageVersionsForPackageOwnedByUserResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const packagesGetPackageVersionForUserParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    package_version_id: z.coerce.number(),
    username: z.string(),
  })

  const packagesGetPackageVersionForUserResponseValidator =
    responseValidationFactory([["200", s_package_version]], undefined)

  router.get(
    "packagesGetPackageVersionForUser",
    "/users/:username/packages/:package_type/:package_name/versions/:package_version_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesGetPackageVersionForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_package_version>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesGetPackageVersionForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesGetPackageVersionForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const packagesDeletePackageVersionForUserParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    username: z.string(),
    package_version_id: z.coerce.number(),
  })

  const packagesDeletePackageVersionForUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.delete(
    "packagesDeletePackageVersionForUser",
    "/users/:username/packages/:package_type/:package_name/versions/:package_version_id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesDeletePackageVersionForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesDeletePackageVersionForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesDeletePackageVersionForUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const packagesRestorePackageVersionForUserParamSchema = z.object({
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    package_name: z.string(),
    username: z.string(),
    package_version_id: z.coerce.number(),
  })

  const packagesRestorePackageVersionForUserResponseValidator =
    responseValidationFactory(
      [
        ["204", z.void()],
        ["401", s_basic_error],
        ["403", s_basic_error],
        ["404", s_basic_error],
      ],
      undefined,
    )

  router.post(
    "packagesRestorePackageVersionForUser",
    "/users/:username/packages/:package_type/:package_name/versions/:package_version_id/restore",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          packagesRestorePackageVersionForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with204() {
          return new KoaRuntimeResponse<void>(204)
        },
        with401() {
          return new KoaRuntimeResponse<t_basic_error>(401)
        },
        with403() {
          return new KoaRuntimeResponse<t_basic_error>(403)
        },
        with404() {
          return new KoaRuntimeResponse<t_basic_error>(404)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .packagesRestorePackageVersionForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = packagesRestorePackageVersionForUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const projectsListForUserParamSchema = z.object({ username: z.string() })

  const projectsListForUserQuerySchema = z.object({
    state: z.enum(["open", "closed", "all"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const projectsListForUserResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_project)],
      ["422", s_validation_error],
    ],
    undefined,
  )

  router.get(
    "projectsListForUser",
    "/users/:username/projects",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          projectsListForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          projectsListForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_project[]>(200)
        },
        with422() {
          return new KoaRuntimeResponse<t_validation_error>(422)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .projectsListForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = projectsListForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityListReceivedEventsForUserParamSchema = z.object({
    username: z.string(),
  })

  const activityListReceivedEventsForUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const activityListReceivedEventsForUserResponseValidator =
    responseValidationFactory([["200", z.array(s_event)]], undefined)

  router.get(
    "activityListReceivedEventsForUser",
    "/users/:username/received_events",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListReceivedEventsForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListReceivedEventsForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_event[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityListReceivedEventsForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListReceivedEventsForUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const activityListReceivedPublicEventsForUserParamSchema = z.object({
    username: z.string(),
  })

  const activityListReceivedPublicEventsForUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const activityListReceivedPublicEventsForUserResponseValidator =
    responseValidationFactory([["200", z.array(s_event)]], undefined)

  router.get(
    "activityListReceivedPublicEventsForUser",
    "/users/:username/received_events/public",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListReceivedPublicEventsForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListReceivedPublicEventsForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_event[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityListReceivedPublicEventsForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListReceivedPublicEventsForUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const reposListForUserParamSchema = z.object({ username: z.string() })

  const reposListForUserQuerySchema = z.object({
    type: z.enum(["all", "owner", "member"]).optional(),
    sort: z.enum(["created", "updated", "pushed", "full_name"]).optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const reposListForUserResponseValidator = responseValidationFactory(
    [["200", z.array(s_minimal_repository)]],
    undefined,
  )

  router.get(
    "reposListForUser",
    "/users/:username/repos",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          reposListForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          reposListForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_minimal_repository[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .reposListForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = reposListForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const billingGetGithubActionsBillingUserParamSchema = z.object({
    username: z.string(),
  })

  const billingGetGithubActionsBillingUserResponseValidator =
    responseValidationFactory([["200", s_actions_billing_usage]], undefined)

  router.get(
    "billingGetGithubActionsBillingUser",
    "/users/:username/settings/billing/actions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          billingGetGithubActionsBillingUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_actions_billing_usage>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .billingGetGithubActionsBillingUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = billingGetGithubActionsBillingUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const billingGetGithubPackagesBillingUserParamSchema = z.object({
    username: z.string(),
  })

  const billingGetGithubPackagesBillingUserResponseValidator =
    responseValidationFactory([["200", s_packages_billing_usage]], undefined)

  router.get(
    "billingGetGithubPackagesBillingUser",
    "/users/:username/settings/billing/packages",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          billingGetGithubPackagesBillingUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_packages_billing_usage>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .billingGetGithubPackagesBillingUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = billingGetGithubPackagesBillingUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const billingGetSharedStorageBillingUserParamSchema = z.object({
    username: z.string(),
  })

  const billingGetSharedStorageBillingUserResponseValidator =
    responseValidationFactory([["200", s_combined_billing_usage]], undefined)

  router.get(
    "billingGetSharedStorageBillingUser",
    "/users/:username/settings/billing/shared-storage",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          billingGetSharedStorageBillingUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_combined_billing_usage>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .billingGetSharedStorageBillingUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = billingGetSharedStorageBillingUserResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const usersListSocialAccountsForUserParamSchema = z.object({
    username: z.string(),
  })

  const usersListSocialAccountsForUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const usersListSocialAccountsForUserResponseValidator =
    responseValidationFactory([["200", z.array(s_social_account)]], undefined)

  router.get(
    "usersListSocialAccountsForUser",
    "/users/:username/social_accounts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersListSocialAccountsForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          usersListSocialAccountsForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_social_account[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersListSocialAccountsForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListSocialAccountsForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const usersListSshSigningKeysForUserParamSchema = z.object({
    username: z.string(),
  })

  const usersListSshSigningKeysForUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const usersListSshSigningKeysForUserResponseValidator =
    responseValidationFactory([["200", z.array(s_ssh_signing_key)]], undefined)

  router.get(
    "usersListSshSigningKeysForUser",
    "/users/:username/ssh_signing_keys",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          usersListSshSigningKeysForUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          usersListSshSigningKeysForUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_ssh_signing_key[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .usersListSshSigningKeysForUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = usersListSshSigningKeysForUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityListReposStarredByUserParamSchema = z.object({
    username: z.string(),
  })

  const activityListReposStarredByUserQuerySchema = z.object({
    sort: z.enum(["created", "updated"]).optional(),
    direction: z.enum(["asc", "desc"]).optional(),
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const activityListReposStarredByUserResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.union([z.array(s_starred_repository), z.array(s_repository)]),
        ],
      ],
      undefined,
    )

  router.get(
    "activityListReposStarredByUser",
    "/users/:username/starred",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListReposStarredByUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListReposStarredByUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<
            t_starred_repository[] | t_repository[]
          >(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityListReposStarredByUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListReposStarredByUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const activityListReposWatchedByUserParamSchema = z.object({
    username: z.string(),
  })

  const activityListReposWatchedByUserQuerySchema = z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

  const activityListReposWatchedByUserResponseValidator =
    responseValidationFactory(
      [["200", z.array(s_minimal_repository)]],
      undefined,
    )

  router.get(
    "activityListReposWatchedByUser",
    "/users/:username/subscriptions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          activityListReposWatchedByUserParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          activityListReposWatchedByUserQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_minimal_repository[]>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .activityListReposWatchedByUser(input, responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = activityListReposWatchedByUserResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const metaGetAllVersionsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(z.string())],
      ["404", s_basic_error],
    ],
    undefined,
  )

  router.get("metaGetAllVersions", "/versions", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<string[]>(200)
      },
      with404() {
        return new KoaRuntimeResponse<t_basic_error>(404)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .metaGetAllVersions(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = metaGetAllVersionsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const metaGetZenResponseValidator = responseValidationFactory(
    [["200", z.string()]],
    undefined,
  )

  router.get("metaGetZen", "/zen", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<string>(200)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .metaGetZen(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = metaGetZenResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  return router
}

export async function bootstrap(config: ServerConfig) {
  // ApiClient
  return startServer(config)
}
