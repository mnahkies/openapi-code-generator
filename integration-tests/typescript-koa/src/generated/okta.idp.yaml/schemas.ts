/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import { z } from "zod"

export const PermissiveBoolean = z.preprocess((value) => {
  if (typeof value === "string" && (value === "true" || value === "false")) {
    return value === "true"
  } else if (typeof value === "number" && (value === 1 || value === 0)) {
    return value === 1
  }
  return value
}, z.boolean())

export const s_AppAuthenticatorEnrollment = z.object({
  authenticatorId: z.string().optional(),
  createdDate: z.string().datetime({ offset: true }).optional(),
  device: z
    .object({
      id: z.string().optional(),
      status: z.enum(["ACTIVE"]).optional(),
      createdDate: z.string().datetime({ offset: true }).optional(),
      lastUpdated: z.string().datetime({ offset: true }).optional(),
      clientInstanceId: z.string().optional(),
    })
    .optional(),
  id: z.string().optional(),
  lastUpdated: z.string().datetime({ offset: true }).optional(),
  links: z
    .object({
      self: z
        .object({
          href: z.string().min(1).optional(),
          hints: z
            .object({ allow: z.array(z.enum(["PATCH", "DELETE"])).optional() })
            .optional(),
        })
        .optional(),
    })
    .optional(),
  methods: z
    .object({
      push: z
        .object({
          id: z.string().optional(),
          createdDate: z.string().datetime({ offset: true }).optional(),
          lastUpdated: z.string().datetime({ offset: true }).optional(),
          links: z
            .object({
              pending: z
                .object({
                  href: z.string().min(1).optional(),
                  hints: z
                    .object({ allow: z.array(z.enum(["GET"])).optional() })
                    .optional(),
                })
                .optional(),
            })
            .optional(),
        })
        .optional(),
    })
    .optional(),
  user: z
    .object({ id: z.string().optional(), username: z.string().optional() })
    .optional(),
})

export const s_AppAuthenticatorMethodCapabilities = z.object({
  transactionTypes: z.array(z.enum(["LOGIN", "CIBA"])).optional(),
})

export const s_AuthenticatorKey = z.enum([
  "custom_app",
  "custom_otp",
  "duo",
  "external_idp",
  "google_otp",
  "okta_email",
  "okta_password",
  "okta_verify",
  "onprem_mfa",
  "phone_number",
  "rsa_token",
  "security_question",
  "symantec_vip",
  "webauthn",
  "yubikey_token",
])

export const s_Email = z.object({
  id: z.string().min(1),
  profile: z.object({ email: z.string().min(1) }),
  roles: z.array(z.enum(["PRIMARY", "SECONDARY"])),
  status: z.enum(["VERIFIED", "UNVERIFIED"]),
  _links: z
    .object({
      self: z
        .object({
          href: z.string().min(1).optional(),
          hints: z
            .object({
              allow: z.array(z.enum(["GET", "DELETE", "PUT"])).optional(),
            })
            .optional(),
        })
        .optional(),
      challenge: z
        .object({
          href: z.string().min(1).optional(),
          hints: z
            .object({
              allow: z
                .array(z.enum(["DELETE", "GET", "POST", "PUT"]))
                .optional(),
            })
            .optional(),
        })
        .optional(),
      verify: z
        .object({
          href: z.string().min(1).optional(),
          hints: z
            .object({
              allow: z
                .array(z.enum(["DELETE", "GET", "POST", "PUT"]))
                .optional(),
            })
            .optional(),
        })
        .optional(),
      poll: z
        .object({
          href: z.string().min(1).optional(),
          hints: z
            .object({
              allow: z
                .array(z.enum(["DELETE", "GET", "POST", "PUT"]))
                .optional(),
            })
            .optional(),
        })
        .optional(),
    })
    .optional(),
})

export const s_Error = z.object({
  errorCauses: z
    .array(z.object({ errorSummary: z.string().optional() }))
    .optional(),
  errorCode: z.string().optional(),
  errorId: z.string().optional(),
  errorLink: z.string().optional(),
  errorSummary: z.string().optional(),
})

export const s_HttpMethod = z.enum(["DELETE", "GET", "POST", "PUT"])

export const s_KeyEC = z.object({
  crv: z.enum(["P-256"]),
  kid: z.string(),
  kty: z.enum(["EC"]),
  "okta:kpr": z.enum(["HARDWARE", "SOFTWARE"]),
  x: z.string(),
  y: z.string(),
})

export const s_KeyRSA = z.object({
  e: z.string(),
  kid: z.string(),
  kty: z.enum(["RSA"]),
  n: z.string(),
  "okta:kpr": z.enum(["HARDWARE", "SOFTWARE"]),
})

export const s_OktaApplication = z.object({
  displayName: z.string().min(1).optional(),
  id: z.string().min(1).optional(),
  name: z.string().min(1).optional(),
})

export const s_Organization = z.object({
  helpLink: z.string().optional(),
  name: z.string().min(1).optional(),
  supportEmail: z.string().optional(),
  url: z.string().min(1).optional(),
  _links: z
    .object({
      self: z
        .object({
          href: z.string().min(1).optional(),
          hints: z
            .object({ allow: z.array(z.enum(["GET"])).optional() })
            .optional(),
        })
        .optional(),
    })
    .optional(),
})

export const s_PasswordResponse = z.object({
  created: z.string().optional(),
  id: z.string().min(1).optional(),
  lastUpdated: z.string().optional(),
  status: z.string().optional(),
  _links: z
    .object({
      self: z
        .object({
          href: z.string().min(1).optional(),
          hints: z
            .object({
              allow: z.array(z.enum(["DELETE", "GET", "PUT"])).optional(),
            })
            .optional(),
        })
        .optional(),
    })
    .optional(),
})

export const s_Phone = z.object({
  id: z.string().min(1),
  profile: z.object({ phoneNumber: z.string().min(1) }),
  status: z.enum(["VERIFIED", "UNVERIFIED"]),
  _links: z
    .object({
      self: z
        .object({
          href: z.string().min(1).optional(),
          hints: z
            .object({
              allow: z.array(z.enum(["GET", "DELETE", "PUT"])).optional(),
            })
            .optional(),
        })
        .optional(),
      challenge: z
        .object({
          href: z.string().min(1).optional(),
          hints: z
            .object({
              allow: z
                .array(z.enum(["DELETE", "GET", "POST", "PUT"]))
                .optional(),
            })
            .optional(),
        })
        .optional(),
      verify: z
        .object({
          href: z.string().min(1).optional(),
          hints: z
            .object({
              allow: z
                .array(z.enum(["DELETE", "GET", "POST", "PUT"]))
                .optional(),
            })
            .optional(),
        })
        .optional(),
    })
    .optional(),
})

export const s_Profile = z.object({
  createdAt: z.string().datetime({ offset: true }).optional(),
  modifiedAt: z.string().datetime({ offset: true }).optional(),
  profile: z.object({}).optional(),
  _links: z
    .object({
      self: z.object({ href: z.string().optional() }).optional(),
      describedBy: z.object({ href: z.string().optional() }).optional(),
    })
    .optional(),
})

export const s_PushNotificationChallenge = z.object({
  challenge: z.string().optional(),
  payloadVersion: z.enum(["IDXv1"]).optional(),
})

export const s_PushNotificationVerification = z.object({
  challengeResponse: z.string().optional(),
  method: z.enum(["push"]).optional(),
})

export const s_Schema = z.object({
  properties: z.object({}).optional(),
  _links: z
    .object({
      self: z.object({ href: z.string().optional() }).optional(),
      user: z.object({ href: z.string().optional() }).optional(),
    })
    .optional(),
})

export const s_UpdateAuthenticatorEnrollmentRequest = z.object({
  nickname: z.string().optional(),
})

export const s_HrefObject = z.object({
  hints: z.object({ allow: z.array(s_HttpMethod).optional() }).optional(),
  href: z.string(),
  name: z.string().optional(),
  type: z.string().optional(),
})

export const s_KeyObject = z.union([s_KeyEC, s_KeyRSA])

export const s_AppAuthenticatorEnrollmentRequest = z.object({
  authenticatorId: z.string(),
  device: z.object({
    secureHardwarePresent: PermissiveBoolean.optional(),
    clientInstanceKey: s_KeyObject,
    osVersion: z.string(),
    clientInstanceBundleId: z.string(),
    platform: z.enum(["ANDROID", "IOS"]),
    manufacturer: z.string().optional(),
    deviceAttestation: z.record(z.unknown()).optional(),
    clientInstanceVersion: z.string(),
    clientInstanceDeviceSdkVersion: z.string(),
    model: z.string().optional(),
    displayName: z.string(),
    udid: z.string().optional(),
  }),
  methods: z.object({
    push: z.object({
      apsEnvironment: z.enum(["PRODUCTION", "DEVELOPMENT"]).optional(),
      pushToken: z.string(),
      keys: z.object({
        proofOfPossession: s_KeyObject,
        userVerification: s_KeyObject.optional(),
        capabilities: s_AppAuthenticatorMethodCapabilities.optional(),
      }),
    }),
  }),
})

export const s_AuthenticatorEnrollment = z.object({
  canReset: PermissiveBoolean.optional(),
  canUnenroll: PermissiveBoolean.optional(),
  created: z.string().optional(),
  id: z.string().optional(),
  lastChallenged: z.string().optional(),
  name: z.string().optional(),
  nickname: z.string().optional(),
  profile: z.object({}).optional(),
  _links: z
    .object({
      self: s_HrefObject.optional(),
      authenticator: s_HrefObject.optional(),
      modify: s_HrefObject.optional(),
      unenroll: s_HrefObject.optional(),
    })
    .optional(),
})

export const s_UpdateAppAuthenticatorEnrollmentRequest = z.object({
  methods: z
    .object({
      push: z
        .object({
          pushToken: z.string().optional(),
          keys: z
            .object({ userVerification: s_KeyObject.optional() })
            .optional(),
          capabilities: s_AppAuthenticatorMethodCapabilities.optional(),
        })
        .optional(),
    })
    .optional(),
})

export const s_Authenticator = z.object({
  enrollable: PermissiveBoolean.optional(),
  id: z.string().optional(),
  key: s_AuthenticatorKey.optional(),
  name: z.string().optional(),
  _embedded: z
    .object({ enrollments: z.array(s_AuthenticatorEnrollment).optional() })
    .optional(),
  _links: z
    .object({
      self: s_HrefObject.optional(),
      enroll: s_HrefObject.optional(),
      enrollments: s_HrefObject.optional(),
    })
    .optional(),
})
