/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_AppAuthenticatorEnrollment,
  t_Authenticator,
  t_AuthenticatorEnrollment,
  t_CreateAppAuthenticatorEnrollmentBodySchema,
  t_CreateEmailBodySchema,
  t_CreatePasswordBodySchema,
  t_CreatePhoneBodySchema,
  t_DeleteAppAuthenticatorEnrollmentParamSchema,
  t_DeleteEmailParamSchema,
  t_DeletePhoneParamSchema,
  t_Email,
  t_Error,
  t_GetAuthenticatorParamSchema,
  t_GetAuthenticatorQuerySchema,
  t_GetEmailParamSchema,
  t_GetEnrollmentParamSchema,
  t_GetPhoneParamSchema,
  t_ListAppAuthenticatorPendingPushNotificationChallengesParamSchema,
  t_ListAuthenticatorsQuerySchema,
  t_ListEnrollmentsParamSchema,
  t_OktaApplication,
  t_Organization,
  t_PasswordResponse,
  t_Phone,
  t_PollChallengeForEmailMagicLinkParamSchema,
  t_Profile,
  t_PushNotificationChallenge,
  t_ReplacePasswordBodySchema,
  t_ReplaceProfileBodySchema,
  t_Schema,
  t_SendEmailChallengeBodySchema,
  t_SendEmailChallengeParamSchema,
  t_SendPhoneChallengeBodySchema,
  t_SendPhoneChallengeParamSchema,
  t_UpdateAppAuthenticatorEnrollmentBodySchema,
  t_UpdateAppAuthenticatorEnrollmentParamSchema,
  t_UpdateEnrollmentBodySchema,
  t_UpdateEnrollmentParamSchema,
  t_VerifyAppAuthenticatorPushNotificationChallengeBodySchema,
  t_VerifyAppAuthenticatorPushNotificationChallengeParamSchema,
  t_VerifyEmailOtpBodySchema,
  t_VerifyEmailOtpParamSchema,
  t_VerifyPhoneChallengeBodySchema,
  t_VerifyPhoneChallengeParamSchema,
} from "./models"
import {
  PermissiveBoolean,
  s_AppAuthenticatorEnrollment,
  s_AppAuthenticatorEnrollmentRequest,
  s_Authenticator,
  s_AuthenticatorEnrollment,
  s_Email,
  s_Error,
  s_OktaApplication,
  s_Organization,
  s_PasswordResponse,
  s_Phone,
  s_Profile,
  s_PushNotificationChallenge,
  s_PushNotificationVerification,
  s_Schema,
  s_UpdateAppAuthenticatorEnrollmentRequest,
  s_UpdateAuthenticatorEnrollmentRequest,
} from "./schemas"
import KoaRouter, { RouterContext } from "@koa/router"
import {
  KoaRuntimeError,
  RequestInputType,
} from "@nahkies/typescript-koa-runtime/errors"
import {
  KoaRuntimeResponder,
  KoaRuntimeResponse,
  Params,
  Response,
  ServerConfig,
  b,
  startServer,
} from "@nahkies/typescript-koa-runtime/server"
import { parseRequestInput } from "@nahkies/typescript-koa-runtime/zod"
import { z } from "zod"

const createAppAuthenticatorEnrollment = b((r) => ({
  with200: r.with200<t_AppAuthenticatorEnrollment>(
    s_AppAuthenticatorEnrollment,
  ),
  with400: r.with400<t_Error>(s_Error),
  with401: r.with401<t_Error>(s_Error),
  with403: r.with403<t_Error>(s_Error),
  with404: r.with404<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type CreateAppAuthenticatorEnrollmentResponder =
  (typeof createAppAuthenticatorEnrollment)["responder"] & KoaRuntimeResponder

export type CreateAppAuthenticatorEnrollment = (
  params: Params<
    void,
    void,
    t_CreateAppAuthenticatorEnrollmentBodySchema,
    void
  >,
  respond: CreateAppAuthenticatorEnrollmentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_AppAuthenticatorEnrollment>
  | Response<400, t_Error>
  | Response<401, t_Error>
  | Response<403, t_Error>
  | Response<404, t_Error>
>

const verifyAppAuthenticatorPushNotificationChallenge = b((r) => ({
  with200: r.with200<void>(z.undefined()),
  with204: r.with204<void>(z.undefined()),
  with400: r.with400<void>(z.undefined()),
  withStatus: r.withStatus,
}))

type VerifyAppAuthenticatorPushNotificationChallengeResponder =
  (typeof verifyAppAuthenticatorPushNotificationChallenge)["responder"] &
    KoaRuntimeResponder

export type VerifyAppAuthenticatorPushNotificationChallenge = (
  params: Params<
    t_VerifyAppAuthenticatorPushNotificationChallengeParamSchema,
    void,
    t_VerifyAppAuthenticatorPushNotificationChallengeBodySchema,
    void
  >,
  respond: VerifyAppAuthenticatorPushNotificationChallengeResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, void>
  | Response<204, void>
  | Response<400, void>
>

const updateAppAuthenticatorEnrollment = b((r) => ({
  with200: r.with200<t_AppAuthenticatorEnrollment>(
    s_AppAuthenticatorEnrollment,
  ),
  with401: r.with401<t_Error>(s_Error),
  with403: r.with403<t_Error>(s_Error),
  with404: r.with404<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type UpdateAppAuthenticatorEnrollmentResponder =
  (typeof updateAppAuthenticatorEnrollment)["responder"] & KoaRuntimeResponder

export type UpdateAppAuthenticatorEnrollment = (
  params: Params<
    t_UpdateAppAuthenticatorEnrollmentParamSchema,
    void,
    t_UpdateAppAuthenticatorEnrollmentBodySchema,
    void
  >,
  respond: UpdateAppAuthenticatorEnrollmentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_AppAuthenticatorEnrollment>
  | Response<401, t_Error>
  | Response<403, t_Error>
  | Response<404, t_Error>
>

const deleteAppAuthenticatorEnrollment = b((r) => ({
  with204: r.with204<void>(z.undefined()),
  with401: r.with401<t_Error>(s_Error),
  with403: r.with403<t_Error>(s_Error),
  with404: r.with404<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type DeleteAppAuthenticatorEnrollmentResponder =
  (typeof deleteAppAuthenticatorEnrollment)["responder"] & KoaRuntimeResponder

export type DeleteAppAuthenticatorEnrollment = (
  params: Params<
    t_DeleteAppAuthenticatorEnrollmentParamSchema,
    void,
    void,
    void
  >,
  respond: DeleteAppAuthenticatorEnrollmentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_Error>
  | Response<403, t_Error>
  | Response<404, t_Error>
>

const listAppAuthenticatorPendingPushNotificationChallenges = b((r) => ({
  with200: r.with200<t_PushNotificationChallenge[]>(
    z.array(s_PushNotificationChallenge),
  ),
  with401: r.with401<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type ListAppAuthenticatorPendingPushNotificationChallengesResponder =
  (typeof listAppAuthenticatorPendingPushNotificationChallenges)["responder"] &
    KoaRuntimeResponder

export type ListAppAuthenticatorPendingPushNotificationChallenges = (
  params: Params<
    t_ListAppAuthenticatorPendingPushNotificationChallengesParamSchema,
    void,
    void,
    void
  >,
  respond: ListAppAuthenticatorPendingPushNotificationChallengesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_PushNotificationChallenge[]>
  | Response<401, t_Error>
>

const listAuthenticators = b((r) => ({
  with200: r.with200<t_Authenticator[]>(z.array(s_Authenticator)),
  with403: r.with403<t_Error>(s_Error),
  with429: r.with429<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type ListAuthenticatorsResponder = (typeof listAuthenticators)["responder"] &
  KoaRuntimeResponder

export type ListAuthenticators = (
  params: Params<void, t_ListAuthenticatorsQuerySchema, void, void>,
  respond: ListAuthenticatorsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_Authenticator[]>
  | Response<403, t_Error>
  | Response<429, t_Error>
>

const getAuthenticator = b((r) => ({
  with200: r.with200<t_Authenticator>(s_Authenticator),
  with403: r.with403<t_Error>(s_Error),
  with404: r.with404<t_Error>(s_Error),
  with429: r.with429<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type GetAuthenticatorResponder = (typeof getAuthenticator)["responder"] &
  KoaRuntimeResponder

export type GetAuthenticator = (
  params: Params<
    t_GetAuthenticatorParamSchema,
    t_GetAuthenticatorQuerySchema,
    void,
    void
  >,
  respond: GetAuthenticatorResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_Authenticator>
  | Response<403, t_Error>
  | Response<404, t_Error>
  | Response<429, t_Error>
>

const listEnrollments = b((r) => ({
  with200: r.with200<t_AuthenticatorEnrollment[]>(
    z.array(s_AuthenticatorEnrollment),
  ),
  with403: r.with403<t_Error>(s_Error),
  with404: r.with404<t_Error>(s_Error),
  with429: r.with429<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type ListEnrollmentsResponder = (typeof listEnrollments)["responder"] &
  KoaRuntimeResponder

export type ListEnrollments = (
  params: Params<t_ListEnrollmentsParamSchema, void, void, void>,
  respond: ListEnrollmentsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_AuthenticatorEnrollment[]>
  | Response<403, t_Error>
  | Response<404, t_Error>
  | Response<429, t_Error>
>

const getEnrollment = b((r) => ({
  with200: r.with200<t_AuthenticatorEnrollment>(s_AuthenticatorEnrollment),
  with403: r.with403<t_Error>(s_Error),
  with404: r.with404<t_Error>(s_Error),
  with429: r.with429<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type GetEnrollmentResponder = (typeof getEnrollment)["responder"] &
  KoaRuntimeResponder

export type GetEnrollment = (
  params: Params<t_GetEnrollmentParamSchema, void, void, void>,
  respond: GetEnrollmentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_AuthenticatorEnrollment>
  | Response<403, t_Error>
  | Response<404, t_Error>
  | Response<429, t_Error>
>

const updateEnrollment = b((r) => ({
  with200: r.with200<t_AuthenticatorEnrollment>(s_AuthenticatorEnrollment),
  with401: r.with401<t_Error>(s_Error),
  with403: r.with403<t_Error>(s_Error),
  with404: r.with404<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type UpdateEnrollmentResponder = (typeof updateEnrollment)["responder"] &
  KoaRuntimeResponder

export type UpdateEnrollment = (
  params: Params<
    t_UpdateEnrollmentParamSchema,
    void,
    t_UpdateEnrollmentBodySchema,
    void
  >,
  respond: UpdateEnrollmentResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_AuthenticatorEnrollment>
  | Response<401, t_Error>
  | Response<403, t_Error>
  | Response<404, t_Error>
>

const listEmails = b((r) => ({
  with200: r.with200<t_Email[]>(z.array(s_Email)),
  with401: r.with401<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type ListEmailsResponder = (typeof listEmails)["responder"] &
  KoaRuntimeResponder

export type ListEmails = (
  params: Params<void, void, void, void>,
  respond: ListEmailsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_Email[]>
  | Response<401, t_Error>
>

const createEmail = b((r) => ({
  with201: r.with201<t_Email>(s_Email),
  with400: r.with400<t_Error>(s_Error),
  with401: r.with401<t_Error>(s_Error),
  with403: r.with403<t_Error>(s_Error),
  with409: r.with409<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type CreateEmailResponder = (typeof createEmail)["responder"] &
  KoaRuntimeResponder

export type CreateEmail = (
  params: Params<void, void, t_CreateEmailBodySchema, void>,
  respond: CreateEmailResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_Email>
  | Response<400, t_Error>
  | Response<401, t_Error>
  | Response<403, t_Error>
  | Response<409, t_Error>
>

const getEmail = b((r) => ({
  with200: r.with200<t_Email>(s_Email),
  with401: r.with401<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type GetEmailResponder = (typeof getEmail)["responder"] & KoaRuntimeResponder

export type GetEmail = (
  params: Params<t_GetEmailParamSchema, void, void, void>,
  respond: GetEmailResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_Email> | Response<401, t_Error>
>

const deleteEmail = b((r) => ({
  with204: r.with204<void>(z.undefined()),
  with400: r.with400<t_Error>(s_Error),
  with401: r.with401<t_Error>(s_Error),
  with404: r.with404<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type DeleteEmailResponder = (typeof deleteEmail)["responder"] &
  KoaRuntimeResponder

export type DeleteEmail = (
  params: Params<t_DeleteEmailParamSchema, void, void, void>,
  respond: DeleteEmailResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<400, t_Error>
  | Response<401, t_Error>
  | Response<404, t_Error>
>

const sendEmailChallenge = b((r) => ({
  with201: r.with201<{
    _links: {
      poll: {
        hints: {
          allow: "GET"[]
        }
        href: string
      }
      verify: {
        hints: {
          allow: "POST"[]
        }
        href: string
      }
    }
    expiresAt: string
    id: string
    profile: {
      email: string
    }
    status: "VERIFIED" | "UNVERIFIED"
  }>(
    z.object({
      id: z.string().min(1),
      status: z.enum(["VERIFIED", "UNVERIFIED"]),
      expiresAt: z.string().min(1),
      profile: z.object({ email: z.string().min(1) }),
      _links: z.object({
        verify: z.object({
          href: z.string().min(1),
          hints: z.object({ allow: z.array(z.enum(["POST"])) }),
        }),
        poll: z.object({
          href: z.string().min(1),
          hints: z.object({ allow: z.array(z.enum(["GET"])) }),
        }),
      }),
    }),
  ),
  with401: r.with401<t_Error>(s_Error),
  with403: r.with403<t_Error>(s_Error),
  with404: r.with404<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type SendEmailChallengeResponder = (typeof sendEmailChallenge)["responder"] &
  KoaRuntimeResponder

export type SendEmailChallenge = (
  params: Params<
    t_SendEmailChallengeParamSchema,
    void,
    t_SendEmailChallengeBodySchema,
    void
  >,
  respond: SendEmailChallengeResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      201,
      {
        _links: {
          poll: {
            hints: {
              allow: "GET"[]
            }
            href: string
          }
          verify: {
            hints: {
              allow: "POST"[]
            }
            href: string
          }
        }
        expiresAt: string
        id: string
        profile: {
          email: string
        }
        status: "VERIFIED" | "UNVERIFIED"
      }
    >
  | Response<401, t_Error>
  | Response<403, t_Error>
  | Response<404, t_Error>
>

const pollChallengeForEmailMagicLink = b((r) => ({
  with200: r.with200<{
    _links: {
      poll: {
        hints: {
          allow: ("DELETE" | "GET" | "POST" | "PUT")[]
        }
        href: string
      }
      verify: {
        hints: {
          allow: ("DELETE" | "GET" | "POST" | "PUT")[]
        }
        href: string
      }
    }
    expiresAt: string
    id: string
    profile: {
      email: string
    }
    status: "VERIFIED" | "UNVERIFIED"
  }>(
    z.object({
      id: z.string().min(1),
      status: z.enum(["VERIFIED", "UNVERIFIED"]),
      expiresAt: z.string().min(1),
      profile: z.object({ email: z.string().min(1) }),
      _links: z.object({
        verify: z.object({
          href: z.string().min(1),
          hints: z.object({
            allow: z.array(z.enum(["DELETE", "GET", "POST", "PUT"])),
          }),
        }),
        poll: z.object({
          href: z.string().min(1),
          hints: z.object({
            allow: z.array(z.enum(["DELETE", "GET", "POST", "PUT"])),
          }),
        }),
      }),
    }),
  ),
  with401: r.with401<t_Error>(s_Error),
  with404: r.with404<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type PollChallengeForEmailMagicLinkResponder =
  (typeof pollChallengeForEmailMagicLink)["responder"] & KoaRuntimeResponder

export type PollChallengeForEmailMagicLink = (
  params: Params<t_PollChallengeForEmailMagicLinkParamSchema, void, void, void>,
  respond: PollChallengeForEmailMagicLinkResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        _links: {
          poll: {
            hints: {
              allow: ("DELETE" | "GET" | "POST" | "PUT")[]
            }
            href: string
          }
          verify: {
            hints: {
              allow: ("DELETE" | "GET" | "POST" | "PUT")[]
            }
            href: string
          }
        }
        expiresAt: string
        id: string
        profile: {
          email: string
        }
        status: "VERIFIED" | "UNVERIFIED"
      }
    >
  | Response<401, t_Error>
  | Response<404, t_Error>
>

const verifyEmailOtp = b((r) => ({
  with200: r.with200<void>(z.undefined()),
  with401: r.with401<t_Error>(s_Error),
  with403: r.with403<t_Error>(s_Error),
  with404: r.with404<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type VerifyEmailOtpResponder = (typeof verifyEmailOtp)["responder"] &
  KoaRuntimeResponder

export type VerifyEmailOtp = (
  params: Params<
    t_VerifyEmailOtpParamSchema,
    void,
    t_VerifyEmailOtpBodySchema,
    void
  >,
  respond: VerifyEmailOtpResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, void>
  | Response<401, t_Error>
  | Response<403, t_Error>
  | Response<404, t_Error>
>

const listOktaApplications = b((r) => ({
  with200: r.with200<t_OktaApplication[]>(z.array(s_OktaApplication)),
  with400: r.with400<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type ListOktaApplicationsResponder =
  (typeof listOktaApplications)["responder"] & KoaRuntimeResponder

export type ListOktaApplications = (
  params: Params<void, void, void, void>,
  respond: ListOktaApplicationsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_OktaApplication[]>
  | Response<400, t_Error>
>

const getOrganization = b((r) => ({
  with200: r.with200<t_Organization>(s_Organization),
  with401: r.with401<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type GetOrganizationResponder = (typeof getOrganization)["responder"] &
  KoaRuntimeResponder

export type GetOrganization = (
  params: Params<void, void, void, void>,
  respond: GetOrganizationResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_Organization>
  | Response<401, t_Error>
>

const getPassword = b((r) => ({
  with200: r.with200<t_PasswordResponse>(s_PasswordResponse),
  with401: r.with401<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type GetPasswordResponder = (typeof getPassword)["responder"] &
  KoaRuntimeResponder

export type GetPassword = (
  params: Params<void, void, void, void>,
  respond: GetPasswordResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_PasswordResponse>
  | Response<401, t_Error>
>

const createPassword = b((r) => ({
  with201: r.with201<t_PasswordResponse>(s_PasswordResponse),
  with400: r.with400<t_Error>(s_Error),
  with401: r.with401<t_Error>(s_Error),
  with403: r.with403<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type CreatePasswordResponder = (typeof createPassword)["responder"] &
  KoaRuntimeResponder

export type CreatePassword = (
  params: Params<void, void, t_CreatePasswordBodySchema, void>,
  respond: CreatePasswordResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_PasswordResponse>
  | Response<400, t_Error>
  | Response<401, t_Error>
  | Response<403, t_Error>
>

const replacePassword = b((r) => ({
  with201: r.with201<t_PasswordResponse>(s_PasswordResponse),
  with400: r.with400<t_Error>(s_Error),
  with401: r.with401<t_Error>(s_Error),
  with403: r.with403<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type ReplacePasswordResponder = (typeof replacePassword)["responder"] &
  KoaRuntimeResponder

export type ReplacePassword = (
  params: Params<void, void, t_ReplacePasswordBodySchema, void>,
  respond: ReplacePasswordResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_PasswordResponse>
  | Response<400, t_Error>
  | Response<401, t_Error>
  | Response<403, t_Error>
>

const deletePassword = b((r) => ({
  with204: r.with204<void>(z.undefined()),
  with401: r.with401<t_Error>(s_Error),
  with404: r.with404<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type DeletePasswordResponder = (typeof deletePassword)["responder"] &
  KoaRuntimeResponder

export type DeletePassword = (
  params: Params<void, void, void, void>,
  respond: DeletePasswordResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_Error>
  | Response<404, t_Error>
>

const listPhones = b((r) => ({
  with200: r.with200<t_Phone[]>(z.array(s_Phone)),
  with401: r.with401<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type ListPhonesResponder = (typeof listPhones)["responder"] &
  KoaRuntimeResponder

export type ListPhones = (
  params: Params<void, void, void, void>,
  respond: ListPhonesResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_Phone[]>
  | Response<401, t_Error>
>

const createPhone = b((r) => ({
  with201: r.with201<t_Phone>(s_Phone),
  with400: r.with400<t_Error>(s_Error),
  with401: r.with401<t_Error>(s_Error),
  with403: r.with403<t_Error>(s_Error),
  with409: r.with409<t_Error>(s_Error),
  with500: r.with500<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type CreatePhoneResponder = (typeof createPhone)["responder"] &
  KoaRuntimeResponder

export type CreatePhone = (
  params: Params<void, void, t_CreatePhoneBodySchema, void>,
  respond: CreatePhoneResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, t_Phone>
  | Response<400, t_Error>
  | Response<401, t_Error>
  | Response<403, t_Error>
  | Response<409, t_Error>
  | Response<500, t_Error>
>

const getPhone = b((r) => ({
  with200: r.with200<t_Phone>(s_Phone),
  with401: r.with401<t_Error>(s_Error),
  with404: r.with404<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type GetPhoneResponder = (typeof getPhone)["responder"] & KoaRuntimeResponder

export type GetPhone = (
  params: Params<t_GetPhoneParamSchema, void, void, void>,
  respond: GetPhoneResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_Phone>
  | Response<401, t_Error>
  | Response<404, t_Error>
>

const deletePhone = b((r) => ({
  with204: r.with204<void>(z.undefined()),
  with401: r.with401<t_Error>(s_Error),
  with403: r.with403<t_Error>(s_Error),
  with404: r.with404<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type DeletePhoneResponder = (typeof deletePhone)["responder"] &
  KoaRuntimeResponder

export type DeletePhone = (
  params: Params<t_DeletePhoneParamSchema, void, void, void>,
  respond: DeletePhoneResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_Error>
  | Response<403, t_Error>
  | Response<404, t_Error>
>

const sendPhoneChallenge = b((r) => ({
  with200: r.with200<{
    _links?: {
      verify?: {
        hints: {
          allow: "GET"[]
        }
        href: string
      }
    }
  }>(
    z.object({
      _links: z
        .object({
          verify: z
            .object({
              href: z.string().min(1),
              hints: z.object({ allow: z.array(z.enum(["GET"])) }),
            })
            .optional(),
        })
        .optional(),
    }),
  ),
  with400: r.with400<t_Error>(s_Error),
  with401: r.with401<t_Error>(s_Error),
  with403: r.with403<t_Error>(s_Error),
  with404: r.with404<t_Error>(s_Error),
  with500: r.with500<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type SendPhoneChallengeResponder = (typeof sendPhoneChallenge)["responder"] &
  KoaRuntimeResponder

export type SendPhoneChallenge = (
  params: Params<
    t_SendPhoneChallengeParamSchema,
    void,
    t_SendPhoneChallengeBodySchema,
    void
  >,
  respond: SendPhoneChallengeResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        _links?: {
          verify?: {
            hints: {
              allow: "GET"[]
            }
            href: string
          }
        }
      }
    >
  | Response<400, t_Error>
  | Response<401, t_Error>
  | Response<403, t_Error>
  | Response<404, t_Error>
  | Response<500, t_Error>
>

const verifyPhoneChallenge = b((r) => ({
  with204: r.with204<void>(z.undefined()),
  with400: r.with400<t_Error>(s_Error),
  with401: r.with401<t_Error>(s_Error),
  with403: r.with403<t_Error>(s_Error),
  with404: r.with404<t_Error>(s_Error),
  with409: r.with409<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type VerifyPhoneChallengeResponder =
  (typeof verifyPhoneChallenge)["responder"] & KoaRuntimeResponder

export type VerifyPhoneChallenge = (
  params: Params<
    t_VerifyPhoneChallengeParamSchema,
    void,
    t_VerifyPhoneChallengeBodySchema,
    void
  >,
  respond: VerifyPhoneChallengeResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<400, t_Error>
  | Response<401, t_Error>
  | Response<403, t_Error>
  | Response<404, t_Error>
  | Response<409, t_Error>
>

const getProfile = b((r) => ({
  with200: r.with200<t_Profile>(s_Profile),
  with401: r.with401<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type GetProfileResponder = (typeof getProfile)["responder"] &
  KoaRuntimeResponder

export type GetProfile = (
  params: Params<void, void, void, void>,
  respond: GetProfileResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_Profile>
  | Response<401, t_Error>
>

const replaceProfile = b((r) => ({
  with200: r.with200<t_Profile>(s_Profile),
  with400: r.with400<t_Error>(s_Error),
  with401: r.with401<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type ReplaceProfileResponder = (typeof replaceProfile)["responder"] &
  KoaRuntimeResponder

export type ReplaceProfile = (
  params: Params<void, void, t_ReplaceProfileBodySchema, void>,
  respond: ReplaceProfileResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_Profile>
  | Response<400, t_Error>
  | Response<401, t_Error>
>

const getProfileSchema = b((r) => ({
  with200: r.with200<t_Schema>(s_Schema),
  with401: r.with401<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type GetProfileSchemaResponder = (typeof getProfileSchema)["responder"] &
  KoaRuntimeResponder

export type GetProfileSchema = (
  params: Params<void, void, void, void>,
  respond: GetProfileSchemaResponder,
  ctx: RouterContext,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, t_Schema> | Response<401, t_Error>
>

const deleteSessions = b((r) => ({
  with204: r.with204<void>(z.undefined()),
  with401: r.with401<t_Error>(s_Error),
  with404: r.with404<t_Error>(s_Error),
  withStatus: r.withStatus,
}))

type DeleteSessionsResponder = (typeof deleteSessions)["responder"] &
  KoaRuntimeResponder

export type DeleteSessions = (
  params: Params<void, void, void, void>,
  respond: DeleteSessionsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<401, t_Error>
  | Response<404, t_Error>
>

export type Implementation = {
  createAppAuthenticatorEnrollment: CreateAppAuthenticatorEnrollment
  verifyAppAuthenticatorPushNotificationChallenge: VerifyAppAuthenticatorPushNotificationChallenge
  updateAppAuthenticatorEnrollment: UpdateAppAuthenticatorEnrollment
  deleteAppAuthenticatorEnrollment: DeleteAppAuthenticatorEnrollment
  listAppAuthenticatorPendingPushNotificationChallenges: ListAppAuthenticatorPendingPushNotificationChallenges
  listAuthenticators: ListAuthenticators
  getAuthenticator: GetAuthenticator
  listEnrollments: ListEnrollments
  getEnrollment: GetEnrollment
  updateEnrollment: UpdateEnrollment
  listEmails: ListEmails
  createEmail: CreateEmail
  getEmail: GetEmail
  deleteEmail: DeleteEmail
  sendEmailChallenge: SendEmailChallenge
  pollChallengeForEmailMagicLink: PollChallengeForEmailMagicLink
  verifyEmailOtp: VerifyEmailOtp
  listOktaApplications: ListOktaApplications
  getOrganization: GetOrganization
  getPassword: GetPassword
  createPassword: CreatePassword
  replacePassword: ReplacePassword
  deletePassword: DeletePassword
  listPhones: ListPhones
  createPhone: CreatePhone
  getPhone: GetPhone
  deletePhone: DeletePhone
  sendPhoneChallenge: SendPhoneChallenge
  verifyPhoneChallenge: VerifyPhoneChallenge
  getProfile: GetProfile
  replaceProfile: ReplaceProfile
  getProfileSchema: GetProfileSchema
  deleteSessions: DeleteSessions
}

export function createRouter(implementation: Implementation): KoaRouter {
  const router = new KoaRouter()

  const createAppAuthenticatorEnrollmentBodySchema =
    s_AppAuthenticatorEnrollmentRequest

  router.post(
    "createAppAuthenticatorEnrollment",
    "/idp/myaccount/app-authenticators",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          createAppAuthenticatorEnrollmentBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .createAppAuthenticatorEnrollment(
          input,
          createAppAuthenticatorEnrollment.responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = createAppAuthenticatorEnrollment.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const verifyAppAuthenticatorPushNotificationChallengeParamSchema = z.object({
    challengeId: z.string(),
  })

  const verifyAppAuthenticatorPushNotificationChallengeBodySchema =
    s_PushNotificationVerification

  router.post(
    "verifyAppAuthenticatorPushNotificationChallenge",
    "/idp/myaccount/app-authenticators/challenge/:challengeId/verify",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          verifyAppAuthenticatorPushNotificationChallengeParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          verifyAppAuthenticatorPushNotificationChallengeBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .verifyAppAuthenticatorPushNotificationChallenge(
          input,
          verifyAppAuthenticatorPushNotificationChallenge.responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = verifyAppAuthenticatorPushNotificationChallenge.validator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const updateAppAuthenticatorEnrollmentParamSchema = z.object({
    enrollmentId: z.string(),
  })

  const updateAppAuthenticatorEnrollmentBodySchema =
    s_UpdateAppAuthenticatorEnrollmentRequest

  router.patch(
    "updateAppAuthenticatorEnrollment",
    "/idp/myaccount/app-authenticators/:enrollmentId",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          updateAppAuthenticatorEnrollmentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          updateAppAuthenticatorEnrollmentBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .updateAppAuthenticatorEnrollment(
          input,
          updateAppAuthenticatorEnrollment.responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = updateAppAuthenticatorEnrollment.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deleteAppAuthenticatorEnrollmentParamSchema = z.object({
    enrollmentId: z.string(),
  })

  router.delete(
    "deleteAppAuthenticatorEnrollment",
    "/idp/myaccount/app-authenticators/:enrollmentId",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteAppAuthenticatorEnrollmentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .deleteAppAuthenticatorEnrollment(
          input,
          deleteAppAuthenticatorEnrollment.responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = deleteAppAuthenticatorEnrollment.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const listAppAuthenticatorPendingPushNotificationChallengesParamSchema =
    z.object({ enrollmentId: z.string() })

  router.get(
    "listAppAuthenticatorPendingPushNotificationChallenges",
    "/idp/myaccount/app-authenticators/:enrollmentId/push/notifications",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          listAppAuthenticatorPendingPushNotificationChallengesParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .listAppAuthenticatorPendingPushNotificationChallenges(
          input,
          listAppAuthenticatorPendingPushNotificationChallenges.responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        listAppAuthenticatorPendingPushNotificationChallenges.validator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const listAuthenticatorsQuerySchema = z.object({
    expand: z.string().optional(),
  })

  router.get(
    "listAuthenticators",
    "/idp/myaccount/authenticators",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          listAuthenticatorsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .listAuthenticators(input, listAuthenticators.responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = listAuthenticators.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getAuthenticatorParamSchema = z.object({ authenticatorId: z.string() })

  const getAuthenticatorQuerySchema = z.object({
    expand: z.string().optional(),
  })

  router.get(
    "getAuthenticator",
    "/idp/myaccount/authenticators/:authenticatorId",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getAuthenticatorParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          getAuthenticatorQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .getAuthenticator(input, getAuthenticator.responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = getAuthenticator.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const listEnrollmentsParamSchema = z.object({ authenticatorId: z.string() })

  router.get(
    "listEnrollments",
    "/idp/myaccount/authenticators/:authenticatorId/enrollments",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          listEnrollmentsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .listEnrollments(input, listEnrollments.responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = listEnrollments.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getEnrollmentParamSchema = z.object({
    authenticatorId: z.string(),
    enrollmentId: z.string(),
  })

  router.get(
    "getEnrollment",
    "/idp/myaccount/authenticators/:authenticatorId/enrollments/:enrollmentId",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getEnrollmentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .getEnrollment(input, getEnrollment.responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = getEnrollment.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const updateEnrollmentParamSchema = z.object({
    authenticatorId: z.string(),
    enrollmentId: z.string(),
  })

  const updateEnrollmentBodySchema = s_UpdateAuthenticatorEnrollmentRequest

  router.patch(
    "updateEnrollment",
    "/idp/myaccount/authenticators/:authenticatorId/enrollments/:enrollmentId",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          updateEnrollmentParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          updateEnrollmentBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .updateEnrollment(input, updateEnrollment.responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = updateEnrollment.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  router.get("listEmails", "/idp/myaccount/emails", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .listEmails(input, listEmails.responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = listEmails.validator(status, body)
    ctx.status = status
    return next()
  })

  const createEmailBodySchema = z.object({
    profile: z.object({ email: z.string().email() }),
    sendEmail: PermissiveBoolean.optional().default(true),
    state: z.string().optional(),
    role: z.enum(["PRIMARY", "SECONDARY"]).optional(),
  })

  router.post("createEmail", "/idp/myaccount/emails", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(
        createEmailBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const response = await implementation
      .createEmail(input, createEmail.responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = createEmail.validator(status, body)
    ctx.status = status
    return next()
  })

  const getEmailParamSchema = z.object({ id: z.string() })

  router.get("getEmail", "/idp/myaccount/emails/:id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        getEmailParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .getEmail(input, getEmail.responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = getEmail.validator(status, body)
    ctx.status = status
    return next()
  })

  const deleteEmailParamSchema = z.object({ id: z.string() })

  router.delete(
    "deleteEmail",
    "/idp/myaccount/emails/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteEmailParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .deleteEmail(input, deleteEmail.responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = deleteEmail.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const sendEmailChallengeParamSchema = z.object({ id: z.string() })

  const sendEmailChallengeBodySchema = z.object({ state: z.string() })

  router.post(
    "sendEmailChallenge",
    "/idp/myaccount/emails/:id/challenge",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          sendEmailChallengeParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          sendEmailChallengeBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .sendEmailChallenge(input, sendEmailChallenge.responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = sendEmailChallenge.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const pollChallengeForEmailMagicLinkParamSchema = z.object({
    id: z.string(),
    challengeId: z.string(),
  })

  router.get(
    "pollChallengeForEmailMagicLink",
    "/idp/myaccount/emails/:id/challenge/:challengeId",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          pollChallengeForEmailMagicLinkParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .pollChallengeForEmailMagicLink(
          input,
          pollChallengeForEmailMagicLink.responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = pollChallengeForEmailMagicLink.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const verifyEmailOtpParamSchema = z.object({
    id: z.string(),
    challengeId: z.string(),
  })

  const verifyEmailOtpBodySchema = z.object({ verificationCode: z.string() })

  router.post(
    "verifyEmailOtp",
    "/idp/myaccount/emails/:id/challenge/:challengeId/verify",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          verifyEmailOtpParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          verifyEmailOtpBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .verifyEmailOtp(input, verifyEmailOtp.responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = verifyEmailOtp.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  router.get(
    "listOktaApplications",
    "/idp/myaccount/okta-applications",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .listOktaApplications(input, listOktaApplications.responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = listOktaApplications.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  router.get(
    "getOrganization",
    "/idp/myaccount/organization",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .getOrganization(input, getOrganization.responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = getOrganization.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  router.get("getPassword", "/idp/myaccount/password", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .getPassword(input, getPassword.responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = getPassword.validator(status, body)
    ctx.status = status
    return next()
  })

  const createPasswordBodySchema = z.object({
    profile: z.object({ password: z.string() }),
  })

  router.post(
    "createPassword",
    "/idp/myaccount/password",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          createPasswordBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .createPassword(input, createPassword.responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = createPassword.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const replacePasswordBodySchema = z.object({
    profile: z.object({ password: z.string() }),
  })

  router.put(
    "replacePassword",
    "/idp/myaccount/password",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          replacePasswordBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .replacePassword(input, replacePassword.responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = replacePassword.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  router.delete(
    "deletePassword",
    "/idp/myaccount/password",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .deletePassword(input, deletePassword.responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = deletePassword.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  router.get("listPhones", "/idp/myaccount/phones", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .listPhones(input, listPhones.responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = listPhones.validator(status, body)
    ctx.status = status
    return next()
  })

  const createPhoneBodySchema = z.object({
    profile: z.object({ phoneNumber: z.string().optional() }),
    sendCode: PermissiveBoolean.optional().default(true),
    method: z.enum(["SMS", "CALL"]).optional(),
  })

  router.post("createPhone", "/idp/myaccount/phones", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(
        createPhoneBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const response = await implementation
      .createPhone(input, createPhone.responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = createPhone.validator(status, body)
    ctx.status = status
    return next()
  })

  const getPhoneParamSchema = z.object({ id: z.string() })

  router.get("getPhone", "/idp/myaccount/phones/:id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        getPhoneParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .getPhone(input, getPhone.responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = getPhone.validator(status, body)
    ctx.status = status
    return next()
  })

  const deletePhoneParamSchema = z.object({ id: z.string() })

  router.delete(
    "deletePhone",
    "/idp/myaccount/phones/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deletePhoneParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .deletePhone(input, deletePhone.responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = deletePhone.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const sendPhoneChallengeParamSchema = z.object({ id: z.string() })

  const sendPhoneChallengeBodySchema = z.object({
    method: z.enum(["SMS", "CALL"]),
    retry: PermissiveBoolean.optional().default(false),
  })

  router.post(
    "sendPhoneChallenge",
    "/idp/myaccount/phones/:id/challenge",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          sendPhoneChallengeParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          sendPhoneChallengeBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .sendPhoneChallenge(input, sendPhoneChallenge.responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = sendPhoneChallenge.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const verifyPhoneChallengeParamSchema = z.object({ id: z.string() })

  const verifyPhoneChallengeBodySchema = z.object({
    verificationCode: z.string(),
  })

  router.post(
    "verifyPhoneChallenge",
    "/idp/myaccount/phones/:id/verify",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          verifyPhoneChallengeParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          verifyPhoneChallengeBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .verifyPhoneChallenge(input, verifyPhoneChallenge.responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = verifyPhoneChallenge.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  router.get("getProfile", "/idp/myaccount/profile", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .getProfile(input, getProfile.responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = getProfile.validator(status, body)
    ctx.status = status
    return next()
  })

  const replaceProfileBodySchema = z.object({
    profile: z.object({}).optional(),
  })

  router.put("replaceProfile", "/idp/myaccount/profile", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(
        replaceProfileBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const response = await implementation
      .replaceProfile(input, replaceProfile.responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = replaceProfile.validator(status, body)
    ctx.status = status
    return next()
  })

  router.get(
    "getProfileSchema",
    "/idp/myaccount/profile/schema",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .getProfileSchema(input, getProfileSchema.responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = getProfileSchema.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  router.delete(
    "deleteSessions",
    "/idp/myaccount/sessions",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .deleteSessions(input, deleteSessions.responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = deleteSessions.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  return router
}

export async function bootstrap(config: ServerConfig) {
  // MyAccount Management
  return startServer(config)
}
