/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_CreateTodoListItemBodySchema,
  t_CreateTodoListItemParamSchema,
  t_DeleteTodoListByIdParamSchema,
  t_Error,
  t_GetTodoListByIdParamSchema,
  t_GetTodoListItemsParamSchema,
  t_GetTodoListsQuerySchema,
  t_TodoList,
  t_UnknownObject,
  t_UpdateTodoListByIdBodySchema,
  t_UpdateTodoListByIdParamSchema,
  t_UploadAttachmentBodySchema,
} from "./models"
import {
  s_CreateUpdateTodoList,
  s_Error,
  s_Statuses,
  s_TodoList,
  s_UnknownObject,
} from "./schemas"
import KoaRouter, { RouterContext } from "@koa/router"
import {
  KoaRuntimeError,
  RequestInputType,
} from "@nahkies/typescript-koa-runtime/errors"
import {
  KoaRuntimeResponder,
  KoaRuntimeResponse,
  Params,
  Response,
  ServerConfig,
  StatusCode,
  StatusCode4xx,
  StatusCode5xx,
  r,
  startServer,
} from "@nahkies/typescript-koa-runtime/server"
import {
  parseRequestInput,
  responseValidationFactory,
} from "@nahkies/typescript-koa-runtime/zod"
import { z } from "zod"

const getTodoListsResponder = {
  with200: r.with200<t_TodoList[]>,
  withStatus: r.withStatus,
}

type GetTodoListsResponder = typeof getTodoListsResponder & KoaRuntimeResponder

const getTodoListsResponseValidator = responseValidationFactory(
  [["200", z.array(s_TodoList)]],
  undefined,
)

export type GetTodoLists = (
  params: Params<void, t_GetTodoListsQuerySchema, void, void>,
  respond: GetTodoListsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_TodoList[]>>

const getTodoListByIdResponder = {
  with200: r.with200<t_TodoList>,
  withStatusCode4xx: r.withStatusCode4xx<t_Error>,
  withDefault: r.withDefault<void>,
  withStatus: r.withStatus,
}

type GetTodoListByIdResponder = typeof getTodoListByIdResponder &
  KoaRuntimeResponder

const getTodoListByIdResponseValidator = responseValidationFactory(
  [
    ["200", s_TodoList],
    ["4XX", s_Error],
  ],
  z.undefined(),
)

export type GetTodoListById = (
  params: Params<t_GetTodoListByIdParamSchema, void, void, void>,
  respond: GetTodoListByIdResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_TodoList>
  | Response<StatusCode4xx, t_Error>
  | Response<StatusCode, void>
>

const updateTodoListByIdResponder = {
  with200: r.with200<t_TodoList>,
  withStatusCode4xx: r.withStatusCode4xx<t_Error>,
  withDefault: r.withDefault<void>,
  withStatus: r.withStatus,
}

type UpdateTodoListByIdResponder = typeof updateTodoListByIdResponder &
  KoaRuntimeResponder

const updateTodoListByIdResponseValidator = responseValidationFactory(
  [
    ["200", s_TodoList],
    ["4XX", s_Error],
  ],
  z.undefined(),
)

export type UpdateTodoListById = (
  params: Params<
    t_UpdateTodoListByIdParamSchema,
    void,
    t_UpdateTodoListByIdBodySchema,
    void
  >,
  respond: UpdateTodoListByIdResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_TodoList>
  | Response<StatusCode4xx, t_Error>
  | Response<StatusCode, void>
>

const deleteTodoListByIdResponder = {
  with204: r.with204<void>,
  withStatusCode4xx: r.withStatusCode4xx<t_Error>,
  withDefault: r.withDefault<void>,
  withStatus: r.withStatus,
}

type DeleteTodoListByIdResponder = typeof deleteTodoListByIdResponder &
  KoaRuntimeResponder

const deleteTodoListByIdResponseValidator = responseValidationFactory(
  [
    ["204", z.undefined()],
    ["4XX", s_Error],
  ],
  z.undefined(),
)

export type DeleteTodoListById = (
  params: Params<t_DeleteTodoListByIdParamSchema, void, void, void>,
  respond: DeleteTodoListByIdResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<StatusCode4xx, t_Error>
  | Response<StatusCode, void>
>

const getTodoListItemsResponder = {
  with200: r.with200<{
    completedAt?: string
    content: string
    createdAt: string
    id: string
  }>,
  withStatusCode5xx: r.withStatusCode5xx<{
    code: string
    message: string
  }>,
  withStatus: r.withStatus,
}

type GetTodoListItemsResponder = typeof getTodoListItemsResponder &
  KoaRuntimeResponder

const getTodoListItemsResponseValidator = responseValidationFactory(
  [
    [
      "200",
      z.object({
        id: z.string(),
        content: z.string(),
        createdAt: z.string().datetime({ offset: true }),
        completedAt: z.string().datetime({ offset: true }).optional(),
      }),
    ],
    ["5XX", z.object({ message: z.string(), code: z.string() })],
  ],
  undefined,
)

export type GetTodoListItems = (
  params: Params<t_GetTodoListItemsParamSchema, void, void, void>,
  respond: GetTodoListItemsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        completedAt?: string
        content: string
        createdAt: string
        id: string
      }
    >
  | Response<
      StatusCode5xx,
      {
        code: string
        message: string
      }
    >
>

const createTodoListItemResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type CreateTodoListItemResponder = typeof createTodoListItemResponder &
  KoaRuntimeResponder

const createTodoListItemResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type CreateTodoListItem = (
  params: Params<
    t_CreateTodoListItemParamSchema,
    void,
    t_CreateTodoListItemBodySchema,
    void
  >,
  respond: CreateTodoListItemResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

const listAttachmentsResponder = {
  with200: r.with200<t_UnknownObject[]>,
  withStatus: r.withStatus,
}

type ListAttachmentsResponder = typeof listAttachmentsResponder &
  KoaRuntimeResponder

const listAttachmentsResponseValidator = responseValidationFactory(
  [["200", z.array(s_UnknownObject)]],
  undefined,
)

export type ListAttachments = (
  params: Params<void, void, void, void>,
  respond: ListAttachmentsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_UnknownObject[]>>

const uploadAttachmentResponder = {
  with202: r.with202<void>,
  withStatus: r.withStatus,
}

type UploadAttachmentResponder = typeof uploadAttachmentResponder &
  KoaRuntimeResponder

const uploadAttachmentResponseValidator = responseValidationFactory(
  [["202", z.undefined()]],
  undefined,
)

export type UploadAttachment = (
  params: Params<void, void, t_UploadAttachmentBodySchema, void>,
  respond: UploadAttachmentResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<202, void>>

export type Implementation = {
  getTodoLists: GetTodoLists
  getTodoListById: GetTodoListById
  updateTodoListById: UpdateTodoListById
  deleteTodoListById: DeleteTodoListById
  getTodoListItems: GetTodoListItems
  createTodoListItem: CreateTodoListItem
  listAttachments: ListAttachments
  uploadAttachment: UploadAttachment
}

export function createRouter(implementation: Implementation): KoaRouter {
  const router = new KoaRouter()

  const getTodoListsQuerySchema = z.object({
    created: z.string().datetime({ offset: true }).optional(),
    statuses: z
      .preprocess(
        (it: unknown) => (Array.isArray(it) || it === undefined ? it : [it]),
        s_Statuses,
      )
      .optional(),
    tags: z
      .preprocess(
        (it: unknown) => (Array.isArray(it) || it === undefined ? it : [it]),
        z.array(z.string()),
      )
      .optional(),
  })

  router.get("getTodoLists", "/list", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        getTodoListsQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .getTodoLists(input, getTodoListsResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = getTodoListsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getTodoListByIdParamSchema = z.object({ listId: z.string() })

  router.get("getTodoListById", "/list/:listId", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        getTodoListByIdParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .getTodoListById(input, getTodoListByIdResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = getTodoListByIdResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const updateTodoListByIdParamSchema = z.object({ listId: z.string() })

  const updateTodoListByIdBodySchema = s_CreateUpdateTodoList

  router.put("updateTodoListById", "/list/:listId", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        updateTodoListByIdParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        updateTodoListByIdBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const response = await implementation
      .updateTodoListById(input, updateTodoListByIdResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = updateTodoListByIdResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const deleteTodoListByIdParamSchema = z.object({ listId: z.string() })

  router.delete("deleteTodoListById", "/list/:listId", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        deleteTodoListByIdParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .deleteTodoListById(input, deleteTodoListByIdResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = deleteTodoListByIdResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getTodoListItemsParamSchema = z.object({ listId: z.string() })

  router.get("getTodoListItems", "/list/:listId/items", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        getTodoListItemsParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .getTodoListItems(input, getTodoListItemsResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = getTodoListItemsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const createTodoListItemParamSchema = z.object({ listId: z.string() })

  const createTodoListItemBodySchema = z.object({
    id: z.string(),
    content: z.string(),
    completedAt: z.string().datetime({ offset: true }).optional(),
  })

  router.post(
    "createTodoListItem",
    "/list/:listId/items",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          createTodoListItemParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: undefined,
        body: parseRequestInput(
          createTodoListItemBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const response = await implementation
        .createTodoListItem(input, createTodoListItemResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = createTodoListItemResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  router.get("listAttachments", "/attachments", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .listAttachments(input, listAttachmentsResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = listAttachmentsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const uploadAttachmentBodySchema = z.object({ file: z.unknown().optional() })

  router.post("uploadAttachment", "/attachments", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(
        uploadAttachmentBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const response = await implementation
      .uploadAttachment(input, uploadAttachmentResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = uploadAttachmentResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  return router
}

export async function bootstrap(config: ServerConfig) {
  // Todo Lists Example API
  return startServer(config)
}
