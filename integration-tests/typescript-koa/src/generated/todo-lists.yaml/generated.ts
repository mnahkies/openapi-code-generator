/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_DeleteTodoListByIdParamSchema,
  t_Error,
  t_GetTodoListByIdParamSchema,
  t_GetTodoListsQuerySchema,
  t_TodoList,
  t_UpdateTodoListByIdBodySchema,
  t_UpdateTodoListByIdParamSchema,
} from "./models"
import { s_CreateUpdateTodoList, s_Error, s_TodoList } from "./schemas"
import KoaRouter from "@koa/router"
import {
  KoaRuntimeError,
  RequestInputType,
} from "@nahkies/typescript-koa-runtime/errors"
import {
  KoaRuntimeResponder,
  KoaRuntimeResponse,
  Response,
  ServerConfig,
  StatusCode,
  StatusCode2xx,
  StatusCode3xx,
  StatusCode4xx,
  StatusCode5xx,
  startServer,
} from "@nahkies/typescript-koa-runtime/server"
import {
  Params,
  parseRequestInput,
  responseValidationFactory,
} from "@nahkies/typescript-koa-runtime/zod"
import { Context } from "koa"
import koaBody from "koa-body"
import { z } from "zod"

//region safe-edit-region-header

//endregion safe-edit-region-header
export type GetTodoListsResponder = {
  with200(): KoaRuntimeResponse<t_TodoList[]>
} & KoaRuntimeResponder

export type GetTodoLists = (
  params: Params<void, t_GetTodoListsQuerySchema, void>,
  respond: GetTodoListsResponder,
  ctx: Context,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_TodoList[]>>

export type GetTodoListByIdResponder = {
  with200(): KoaRuntimeResponse<t_TodoList>
  withStatusCode4xx(status: StatusCode4xx): KoaRuntimeResponse<t_Error>
  withDefault(status: StatusCode): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type GetTodoListById = (
  params: Params<t_GetTodoListByIdParamSchema, void, void>,
  respond: GetTodoListByIdResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_TodoList>
  | Response<StatusCode4xx, t_Error>
  | Response<StatusCode, void>
>

export type UpdateTodoListByIdResponder = {
  with200(): KoaRuntimeResponse<t_TodoList>
  withStatusCode4xx(status: StatusCode4xx): KoaRuntimeResponse<t_Error>
  withDefault(status: StatusCode): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type UpdateTodoListById = (
  params: Params<
    t_UpdateTodoListByIdParamSchema,
    void,
    t_UpdateTodoListByIdBodySchema
  >,
  respond: UpdateTodoListByIdResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_TodoList>
  | Response<StatusCode4xx, t_Error>
  | Response<StatusCode, void>
>

export type DeleteTodoListByIdResponder = {
  with204(): KoaRuntimeResponse<void>
  withStatusCode4xx(status: StatusCode4xx): KoaRuntimeResponse<t_Error>
  withDefault(status: StatusCode): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type DeleteTodoListById = (
  params: Params<t_DeleteTodoListByIdParamSchema, void, void>,
  respond: DeleteTodoListByIdResponder,
  ctx: Context,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<StatusCode4xx, t_Error>
  | Response<StatusCode, void>
>

export type Implementation = {
  getTodoLists: GetTodoLists
  getTodoListById: GetTodoListById
  updateTodoListById: UpdateTodoListById
  deleteTodoListById: DeleteTodoListById
}

export function createRouter(implementation: Implementation): KoaRouter {
  const router = new KoaRouter()

  const getTodoListsQuerySchema = z.object({
    created: z.string().datetime({ offset: true }).optional(),
    status: z.enum(["incomplete", "complete"]).optional(),
  })

  const getTodoListsResponseValidator = responseValidationFactory(
    [["200", z.array(s_TodoList)]],
    undefined,
  )

  router.get("getTodoLists", "/list", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        getTodoListsQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_TodoList[]>(200)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .getTodoLists(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = getTodoListsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getTodoListByIdParamSchema = z.object({ listId: z.string() })

  const getTodoListByIdResponseValidator = responseValidationFactory(
    [
      ["200", s_TodoList],
      ["4XX", s_Error],
    ],
    z.void(),
  )

  router.get("getTodoListById", "/list/:listId", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        getTodoListByIdParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_TodoList>(200)
      },
      withStatusCode4xx(status: StatusCode4xx) {
        return new KoaRuntimeResponse<t_Error>(status)
      },
      withDefault(status: StatusCode) {
        return new KoaRuntimeResponse<void>(status)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .getTodoListById(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = getTodoListByIdResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const updateTodoListByIdParamSchema = z.object({ listId: z.string() })

  const updateTodoListByIdBodySchema = s_CreateUpdateTodoList

  const updateTodoListByIdResponseValidator = responseValidationFactory(
    [
      ["200", s_TodoList],
      ["4XX", s_Error],
    ],
    z.void(),
  )

  router.put("updateTodoListById", "/list/:listId", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        updateTodoListByIdParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: parseRequestInput(
        updateTodoListByIdBodySchema,
        ctx.request.body,
        RequestInputType.RequestBody,
      ),
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_TodoList>(200)
      },
      withStatusCode4xx(status: StatusCode4xx) {
        return new KoaRuntimeResponse<t_Error>(status)
      },
      withDefault(status: StatusCode) {
        return new KoaRuntimeResponse<void>(status)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .updateTodoListById(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = updateTodoListByIdResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const deleteTodoListByIdParamSchema = z.object({ listId: z.string() })

  const deleteTodoListByIdResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["4XX", s_Error],
    ],
    z.void(),
  )

  router.delete("deleteTodoListById", "/list/:listId", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        deleteTodoListByIdParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: undefined,
      body: undefined,
    }

    const responder = {
      with204() {
        return new KoaRuntimeResponse<void>(204)
      },
      withStatusCode4xx(status: StatusCode4xx) {
        return new KoaRuntimeResponse<t_Error>(status)
      },
      withDefault(status: StatusCode) {
        return new KoaRuntimeResponse<void>(status)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .deleteTodoListById(input, responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = deleteTodoListByIdResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  return router
}

export async function bootstrap(config: ServerConfig) {
  // ApiClient
  return startServer(config)
}
