/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_AcrValue,
  t_AmrValue,
  t_ApplicationType,
  t_AuthorizeCustomAsParamSchema,
  t_AuthorizeCustomAsQuerySchema,
  t_AuthorizeQuerySchema,
  t_BackchannelAuthorizeResponse,
  t_BcAuthorizeBodySchema,
  t_BcAuthorizeCustomAsBodySchema,
  t_BcAuthorizeCustomAsParamSchema,
  t_Claim,
  t_Client,
  t_CodeChallengeMethod,
  t_CreateClientBodySchema,
  t_DeleteClientParamSchema,
  t_DeviceAuthorizeBodySchema,
  t_DeviceAuthorizeCustomAsBodySchema,
  t_DeviceAuthorizeCustomAsParamSchema,
  t_DeviceAuthorizeResponse,
  t_EndpointAuthMethod,
  t_Error,
  t_GenerateNewClientSecretParamSchema,
  t_GetClientParamSchema,
  t_GetWellKnownOAuthConfigurationCustomAsParamSchema,
  t_GetWellKnownOAuthConfigurationCustomAsQuerySchema,
  t_GetWellKnownOpenIdConfigurationCustomAsParamSchema,
  t_GetWellKnownOpenIdConfigurationCustomAsQuerySchema,
  t_GetWellKnownOpenIdConfigurationQuerySchema,
  t_GrantType,
  t_IntrospectBodySchema,
  t_IntrospectCustomAsBodySchema,
  t_IntrospectCustomAsParamSchema,
  t_IntrospectionResponse,
  t_JsonWebKey,
  t_JsonWebKeyStatus,
  t_JsonWebKeyType,
  t_JsonWebKeyUse,
  t_ListClientsQuerySchema,
  t_LogoutCustomAsParamSchema,
  t_LogoutCustomAsQuerySchema,
  t_LogoutQuerySchema,
  t_OAuthError,
  t_OAuthKeys,
  t_OAuthMetadata,
  t_OauthKeysCustomAsParamSchema,
  t_OauthKeysQuerySchema,
  t_OidcMetadata,
  t_ParBodySchema,
  t_ParCustomAsBodySchema,
  t_ParCustomAsParamSchema,
  t_ParResponse,
  t_Prompt,
  t_ReplaceClientBodySchema,
  t_ReplaceClientParamSchema,
  t_ResponseMode,
  t_ResponseType,
  t_ResponseTypesSupported,
  t_RevokeBodySchema,
  t_RevokeCustomAsBodySchema,
  t_RevokeCustomAsParamSchema,
  t_Scope,
  t_SigningAlgorithm,
  t_SubjectType,
  t_TokenBodySchema,
  t_TokenCustomAsBodySchema,
  t_TokenCustomAsParamSchema,
  t_TokenDeliveryMode,
  t_TokenResponse,
  t_TokenResponseTokenType,
  t_TokenType,
  t_TokenTypeHintIntrospect,
  t_TokenTypeHintRevoke,
  t_UserInfo,
  t_UserinfoCustomAsParamSchema,
} from "./models"
import {
  s_AcrValue,
  s_AmrValue,
  s_BackchannelAuthorizeRequest,
  s_BackchannelAuthorizeResponse,
  s_Client,
  s_CodeChallengeMethod,
  s_DeviceAuthorizeRequest,
  s_DeviceAuthorizeResponse,
  s_Error,
  s_IntrospectionRequest,
  s_IntrospectionResponse,
  s_OAuthError,
  s_OAuthKeys,
  s_OAuthMetadata,
  s_OidcMetadata,
  s_ParRequest,
  s_ParResponse,
  s_Prompt,
  s_ResponseMode,
  s_ResponseTypesSupported,
  s_RevokeRequest,
  s_TokenRequest,
  s_TokenResponse,
  s_UserInfo,
} from "./schemas"
import KoaRouter from "@koa/router"
import {
  Response,
  ServerConfig,
  StatusCode,
  StatusCode2xx,
  StatusCode3xx,
  StatusCode4xx,
  StatusCode5xx,
  startServer,
} from "@nahkies/typescript-koa-runtime/server"
import {
  Params,
  parseRequestInput,
  responseValidationFactory,
} from "@nahkies/typescript-koa-runtime/zod"
import { Context } from "koa"
import koaBody from "koa-body"
import { z } from "zod"

//region safe-edit-region-header

//endregion safe-edit-region-header
export type GetWellKnownOpenIdConfiguration = (
  params: Params<void, t_GetWellKnownOpenIdConfigurationQuerySchema, void>,
  ctx: Context,
) => Promise<Response<200, t_OidcMetadata> | Response<400, t_Error>>

export type Authorize = (
  params: Params<void, t_AuthorizeQuerySchema, void>,
  ctx: Context,
) => Promise<Response<429, t_Error>>

export type BcAuthorize = (
  params: Params<void, void, t_BcAuthorizeBodySchema>,
  ctx: Context,
) => Promise<
  | Response<200, t_BackchannelAuthorizeResponse>
  | Response<400, t_OAuthError>
  | Response<401, t_OAuthError>
  | Response<429, t_Error>
>

export type ListClients = (
  params: Params<void, t_ListClientsQuerySchema, void>,
  ctx: Context,
) => Promise<
  Response<200, t_Client[]> | Response<403, t_Error> | Response<429, t_Error>
>

export type CreateClient = (
  params: Params<void, void, t_CreateClientBodySchema>,
  ctx: Context,
) => Promise<
  | Response<201, t_Client>
  | Response<400, t_Error>
  | Response<403, t_Error>
  | Response<429, t_Error>
>

export type GetClient = (
  params: Params<t_GetClientParamSchema, void, void>,
  ctx: Context,
) => Promise<
  | Response<200, t_Client>
  | Response<403, t_Error>
  | Response<404, t_Error>
  | Response<429, t_Error>
>

export type ReplaceClient = (
  params: Params<t_ReplaceClientParamSchema, void, t_ReplaceClientBodySchema>,
  ctx: Context,
) => Promise<
  | Response<200, t_Client>
  | Response<400, t_Error>
  | Response<403, t_Error>
  | Response<404, t_Error>
  | Response<429, t_Error>
>

export type DeleteClient = (
  params: Params<t_DeleteClientParamSchema, void, void>,
  ctx: Context,
) => Promise<
  | Response<204, void>
  | Response<403, t_Error>
  | Response<404, t_Error>
  | Response<429, t_Error>
>

export type GenerateNewClientSecret = (
  params: Params<t_GenerateNewClientSecretParamSchema, void, void>,
  ctx: Context,
) => Promise<
  | Response<200, t_Client>
  | Response<403, t_Error>
  | Response<404, t_Error>
  | Response<429, t_Error>
>

export type DeviceAuthorize = (
  params: Params<void, void, t_DeviceAuthorizeBodySchema>,
  ctx: Context,
) => Promise<
  | Response<200, t_DeviceAuthorizeResponse>
  | Response<400, t_OAuthError>
  | Response<401, t_OAuthError>
  | Response<429, t_Error>
>

export type Introspect = (
  params: Params<void, void, t_IntrospectBodySchema>,
  ctx: Context,
) => Promise<
  | Response<200, t_IntrospectionResponse>
  | Response<400, t_OAuthError>
  | Response<401, t_OAuthError>
  | Response<429, t_Error>
>

export type OauthKeys = (
  params: Params<void, t_OauthKeysQuerySchema, void>,
  ctx: Context,
) => Promise<Response<200, t_OAuthKeys> | Response<429, t_Error>>

export type Logout = (
  params: Params<void, t_LogoutQuerySchema, void>,
  ctx: Context,
) => Promise<Response<429, t_Error>>

export type Par = (
  params: Params<void, void, t_ParBodySchema>,
  ctx: Context,
) => Promise<
  | Response<200, t_ParResponse>
  | Response<400, t_OAuthError>
  | Response<401, t_OAuthError>
  | Response<403, t_OAuthError>
  | Response<429, t_Error>
>

export type Revoke = (
  params: Params<void, void, t_RevokeBodySchema>,
  ctx: Context,
) => Promise<
  | Response<200, void>
  | Response<400, t_OAuthError>
  | Response<401, t_OAuthError>
  | Response<429, t_Error>
>

export type Token = (
  params: Params<void, void, t_TokenBodySchema>,
  ctx: Context,
) => Promise<
  | Response<200, t_TokenResponse>
  | Response<400, t_OAuthError>
  | Response<401, t_OAuthError>
  | Response<429, t_Error>
>

export type Userinfo = (
  params: Params<void, void, void>,
  ctx: Context,
) => Promise<
  | Response<200, t_UserInfo>
  | Response<401, void>
  | Response<403, void>
  | Response<429, t_Error>
>

export type GetWellKnownOAuthConfigurationCustomAs = (
  params: Params<
    t_GetWellKnownOAuthConfigurationCustomAsParamSchema,
    t_GetWellKnownOAuthConfigurationCustomAsQuerySchema,
    void
  >,
  ctx: Context,
) => Promise<
  | Response<200, t_OAuthMetadata>
  | Response<400, t_Error>
  | Response<404, t_Error>
>

export type GetWellKnownOpenIdConfigurationCustomAs = (
  params: Params<
    t_GetWellKnownOpenIdConfigurationCustomAsParamSchema,
    t_GetWellKnownOpenIdConfigurationCustomAsQuerySchema,
    void
  >,
  ctx: Context,
) => Promise<
  | Response<200, t_OidcMetadata>
  | Response<400, t_Error>
  | Response<404, t_Error>
>

export type AuthorizeCustomAs = (
  params: Params<
    t_AuthorizeCustomAsParamSchema,
    t_AuthorizeCustomAsQuerySchema,
    void
  >,
  ctx: Context,
) => Promise<Response<429, t_Error>>

export type BcAuthorizeCustomAs = (
  params: Params<
    t_BcAuthorizeCustomAsParamSchema,
    void,
    t_BcAuthorizeCustomAsBodySchema
  >,
  ctx: Context,
) => Promise<
  | Response<200, t_BackchannelAuthorizeResponse>
  | Response<400, t_OAuthError>
  | Response<401, t_OAuthError>
  | Response<429, t_Error>
>

export type DeviceAuthorizeCustomAs = (
  params: Params<
    t_DeviceAuthorizeCustomAsParamSchema,
    void,
    t_DeviceAuthorizeCustomAsBodySchema
  >,
  ctx: Context,
) => Promise<
  | Response<200, t_DeviceAuthorizeResponse>
  | Response<400, t_OAuthError>
  | Response<401, t_OAuthError>
  | Response<429, t_Error>
>

export type IntrospectCustomAs = (
  params: Params<
    t_IntrospectCustomAsParamSchema,
    void,
    t_IntrospectCustomAsBodySchema
  >,
  ctx: Context,
) => Promise<
  | Response<200, t_IntrospectionResponse>
  | Response<400, t_OAuthError>
  | Response<401, t_OAuthError>
  | Response<429, t_Error>
>

export type OauthKeysCustomAs = (
  params: Params<t_OauthKeysCustomAsParamSchema, void, void>,
  ctx: Context,
) => Promise<Response<200, t_OAuthKeys> | Response<429, t_Error>>

export type LogoutCustomAs = (
  params: Params<
    t_LogoutCustomAsParamSchema,
    t_LogoutCustomAsQuerySchema,
    void
  >,
  ctx: Context,
) => Promise<Response<429, t_Error>>

export type ParCustomAs = (
  params: Params<t_ParCustomAsParamSchema, void, t_ParCustomAsBodySchema>,
  ctx: Context,
) => Promise<
  | Response<200, t_ParResponse>
  | Response<400, t_OAuthError>
  | Response<401, t_OAuthError>
  | Response<403, t_OAuthError>
  | Response<429, t_Error>
>

export type RevokeCustomAs = (
  params: Params<t_RevokeCustomAsParamSchema, void, t_RevokeCustomAsBodySchema>,
  ctx: Context,
) => Promise<
  | Response<200, void>
  | Response<400, t_OAuthError>
  | Response<401, t_OAuthError>
  | Response<429, t_Error>
>

export type TokenCustomAs = (
  params: Params<t_TokenCustomAsParamSchema, void, t_TokenCustomAsBodySchema>,
  ctx: Context,
) => Promise<
  | Response<200, t_TokenResponse>
  | Response<400, t_OAuthError>
  | Response<401, t_OAuthError>
  | Response<429, t_Error>
>

export type UserinfoCustomAs = (
  params: Params<t_UserinfoCustomAsParamSchema, void, void>,
  ctx: Context,
) => Promise<
  | Response<200, t_UserInfo>
  | Response<401, void>
  | Response<403, void>
  | Response<429, t_Error>
>

export type Implementation = {
  getWellKnownOpenIdConfiguration: GetWellKnownOpenIdConfiguration
  authorize: Authorize
  bcAuthorize: BcAuthorize
  listClients: ListClients
  createClient: CreateClient
  getClient: GetClient
  replaceClient: ReplaceClient
  deleteClient: DeleteClient
  generateNewClientSecret: GenerateNewClientSecret
  deviceAuthorize: DeviceAuthorize
  introspect: Introspect
  oauthKeys: OauthKeys
  logout: Logout
  par: Par
  revoke: Revoke
  token: Token
  userinfo: Userinfo
  getWellKnownOAuthConfigurationCustomAs: GetWellKnownOAuthConfigurationCustomAs
  getWellKnownOpenIdConfigurationCustomAs: GetWellKnownOpenIdConfigurationCustomAs
  authorizeCustomAs: AuthorizeCustomAs
  bcAuthorizeCustomAs: BcAuthorizeCustomAs
  deviceAuthorizeCustomAs: DeviceAuthorizeCustomAs
  introspectCustomAs: IntrospectCustomAs
  oauthKeysCustomAs: OauthKeysCustomAs
  logoutCustomAs: LogoutCustomAs
  parCustomAs: ParCustomAs
  revokeCustomAs: RevokeCustomAs
  tokenCustomAs: TokenCustomAs
  userinfoCustomAs: UserinfoCustomAs
}

export function createRouter(implementation: Implementation): KoaRouter {
  const router = new KoaRouter()

  const getWellKnownOpenIdConfigurationQuerySchema = z.object({
    client_id: z.string().optional(),
  })

  const getWellKnownOpenIdConfigurationResponseValidator =
    responseValidationFactory(
      [
        ["200", s_OidcMetadata],
        ["400", s_Error],
      ],
      undefined,
    )

  router.get(
    "getWellKnownOpenIdConfiguration",
    "/.well-known/openid-configuration",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          getWellKnownOpenIdConfigurationQuerySchema,
          ctx.query,
        ),
        body: undefined,
      }

      const { status, body } =
        await implementation.getWellKnownOpenIdConfiguration(input, ctx)

      ctx.body = getWellKnownOpenIdConfigurationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const authorizeQuerySchema = z.object({
    acr_values: s_AcrValue.optional(),
    client_id: z.string().optional(),
    code_challenge: z.string().optional(),
    code_challenge_method: s_CodeChallengeMethod.optional(),
    display: z.string().optional(),
    enroll_amr_values: s_AmrValue.optional(),
    idp_scope: z.string().optional(),
    idp: z.string().optional(),
    login_hint: z.string().optional(),
    max_age: z.coerce.number().optional(),
    nonce: z.string().optional(),
    prompt: s_Prompt.optional(),
    redirect_uri: z.string().optional(),
    response_type: s_ResponseTypesSupported.optional(),
    response_mode: s_ResponseMode.optional(),
    request_uri: z.string().optional(),
    request: z.string().optional(),
    scope: z.string().optional(),
    sessionToken: z.string().optional(),
    state: z.string().optional(),
  })

  const authorizeResponseValidator = responseValidationFactory(
    [["429", s_Error]],
    undefined,
  )

  router.get("authorize", "/oauth2/v1/authorize", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(authorizeQuerySchema, ctx.query),
      body: undefined,
    }

    const { status, body } = await implementation.authorize(input, ctx)

    ctx.body = authorizeResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const bcAuthorizeBodySchema = s_BackchannelAuthorizeRequest

  const bcAuthorizeResponseValidator = responseValidationFactory(
    [
      ["200", s_BackchannelAuthorizeResponse],
      ["400", s_OAuthError],
      ["401", s_OAuthError],
      ["429", s_Error],
    ],
    undefined,
  )

  router.post("bcAuthorize", "/oauth2/v1/bc/authorize", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(bcAuthorizeBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.bcAuthorize(input, ctx)

    ctx.body = bcAuthorizeResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const listClientsQuerySchema = z.object({
    after: z.string().optional(),
    limit: z.coerce.number().optional(),
    q: z.string().optional(),
  })

  const listClientsResponseValidator = responseValidationFactory(
    [
      ["200", z.array(s_Client)],
      ["403", s_Error],
      ["429", s_Error],
    ],
    undefined,
  )

  router.get("listClients", "/oauth2/v1/clients", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(listClientsQuerySchema, ctx.query),
      body: undefined,
    }

    const { status, body } = await implementation.listClients(input, ctx)

    ctx.body = listClientsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const createClientBodySchema = s_Client

  const createClientResponseValidator = responseValidationFactory(
    [
      ["201", s_Client],
      ["400", s_Error],
      ["403", s_Error],
      ["429", s_Error],
    ],
    undefined,
  )

  router.post("createClient", "/oauth2/v1/clients", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(createClientBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.createClient(input, ctx)

    ctx.body = createClientResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getClientParamSchema = z.object({ clientId: z.string() })

  const getClientResponseValidator = responseValidationFactory(
    [
      ["200", s_Client],
      ["403", s_Error],
      ["404", s_Error],
      ["429", s_Error],
    ],
    undefined,
  )

  router.get("getClient", "/oauth2/v1/clients/:clientId", async (ctx, next) => {
    const input = {
      params: parseRequestInput(getClientParamSchema, ctx.params),
      query: undefined,
      body: undefined,
    }

    const { status, body } = await implementation.getClient(input, ctx)

    ctx.body = getClientResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const replaceClientParamSchema = z.object({ clientId: z.string() })

  const replaceClientBodySchema = s_Client

  const replaceClientResponseValidator = responseValidationFactory(
    [
      ["200", s_Client],
      ["400", s_Error],
      ["403", s_Error],
      ["404", s_Error],
      ["429", s_Error],
    ],
    undefined,
  )

  router.put(
    "replaceClient",
    "/oauth2/v1/clients/:clientId",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(replaceClientParamSchema, ctx.params),
        query: undefined,
        body: parseRequestInput(replaceClientBodySchema, ctx.request.body),
      }

      const { status, body } = await implementation.replaceClient(input, ctx)

      ctx.body = replaceClientResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deleteClientParamSchema = z.object({ clientId: z.string() })

  const deleteClientResponseValidator = responseValidationFactory(
    [
      ["204", z.void()],
      ["403", s_Error],
      ["404", s_Error],
      ["429", s_Error],
    ],
    undefined,
  )

  router.delete(
    "deleteClient",
    "/oauth2/v1/clients/:clientId",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(deleteClientParamSchema, ctx.params),
        query: undefined,
        body: undefined,
      }

      const { status, body } = await implementation.deleteClient(input, ctx)

      ctx.body = deleteClientResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const generateNewClientSecretParamSchema = z.object({ clientId: z.string() })

  const generateNewClientSecretResponseValidator = responseValidationFactory(
    [
      ["200", s_Client],
      ["403", s_Error],
      ["404", s_Error],
      ["429", s_Error],
    ],
    undefined,
  )

  router.post(
    "generateNewClientSecret",
    "/oauth2/v1/clients/:clientId/lifecycle/newSecret",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          generateNewClientSecretParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: undefined,
      }

      const { status, body } = await implementation.generateNewClientSecret(
        input,
        ctx,
      )

      ctx.body = generateNewClientSecretResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deviceAuthorizeBodySchema = s_DeviceAuthorizeRequest

  const deviceAuthorizeResponseValidator = responseValidationFactory(
    [
      ["200", s_DeviceAuthorizeResponse],
      ["400", s_OAuthError],
      ["401", s_OAuthError],
      ["429", s_Error],
    ],
    undefined,
  )

  router.post(
    "deviceAuthorize",
    "/oauth2/v1/device/authorize",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(deviceAuthorizeBodySchema, ctx.request.body),
      }

      const { status, body } = await implementation.deviceAuthorize(input, ctx)

      ctx.body = deviceAuthorizeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const introspectBodySchema = s_IntrospectionRequest

  const introspectResponseValidator = responseValidationFactory(
    [
      ["200", s_IntrospectionResponse],
      ["400", s_OAuthError],
      ["401", s_OAuthError],
      ["429", s_Error],
    ],
    undefined,
  )

  router.post("introspect", "/oauth2/v1/introspect", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(introspectBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.introspect(input, ctx)

    ctx.body = introspectResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const oauthKeysQuerySchema = z.object({ client_id: z.string().optional() })

  const oauthKeysResponseValidator = responseValidationFactory(
    [
      ["200", s_OAuthKeys],
      ["429", s_Error],
    ],
    undefined,
  )

  router.get("oauthKeys", "/oauth2/v1/keys", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(oauthKeysQuerySchema, ctx.query),
      body: undefined,
    }

    const { status, body } = await implementation.oauthKeys(input, ctx)

    ctx.body = oauthKeysResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const logoutQuerySchema = z.object({
    id_token_hint: z.string(),
    post_logout_redirect_uri: z.string().optional(),
    state: z.string().optional(),
  })

  const logoutResponseValidator = responseValidationFactory(
    [["429", s_Error]],
    undefined,
  )

  router.get("logout", "/oauth2/v1/logout", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(logoutQuerySchema, ctx.query),
      body: undefined,
    }

    const { status, body } = await implementation.logout(input, ctx)

    ctx.body = logoutResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const parBodySchema = s_ParRequest

  const parResponseValidator = responseValidationFactory(
    [
      ["200", s_ParResponse],
      ["400", s_OAuthError],
      ["401", s_OAuthError],
      ["403", s_OAuthError],
      ["429", s_Error],
    ],
    undefined,
  )

  router.post("par", "/oauth2/v1/par", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(parBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.par(input, ctx)

    ctx.body = parResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const revokeBodySchema = s_RevokeRequest

  const revokeResponseValidator = responseValidationFactory(
    [
      ["200", z.void()],
      ["400", s_OAuthError],
      ["401", s_OAuthError],
      ["429", s_Error],
    ],
    undefined,
  )

  router.post("revoke", "/oauth2/v1/revoke", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(revokeBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.revoke(input, ctx)

    ctx.body = revokeResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const tokenBodySchema = s_TokenRequest

  const tokenResponseValidator = responseValidationFactory(
    [
      ["200", s_TokenResponse],
      ["400", s_OAuthError],
      ["401", s_OAuthError],
      ["429", s_Error],
    ],
    undefined,
  )

  router.post("token", "/oauth2/v1/token", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(tokenBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.token(input, ctx)

    ctx.body = tokenResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const userinfoResponseValidator = responseValidationFactory(
    [
      ["200", s_UserInfo],
      ["401", z.void()],
      ["403", z.void()],
      ["429", s_Error],
    ],
    undefined,
  )

  router.get("userinfo", "/oauth2/v1/userinfo", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
    }

    const { status, body } = await implementation.userinfo(input, ctx)

    ctx.body = userinfoResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getWellKnownOAuthConfigurationCustomAsParamSchema = z.object({
    authorizationServerId: z.string(),
  })

  const getWellKnownOAuthConfigurationCustomAsQuerySchema = z.object({
    client_id: z.string().optional(),
  })

  const getWellKnownOAuthConfigurationCustomAsResponseValidator =
    responseValidationFactory(
      [
        ["200", s_OAuthMetadata],
        ["400", s_Error],
        ["404", s_Error],
      ],
      undefined,
    )

  router.get(
    "getWellKnownOAuthConfigurationCustomAs",
    "/oauth2/:authorizationServerId/.well-known/oauth-authorization-server",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getWellKnownOAuthConfigurationCustomAsParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getWellKnownOAuthConfigurationCustomAsQuerySchema,
          ctx.query,
        ),
        body: undefined,
      }

      const { status, body } =
        await implementation.getWellKnownOAuthConfigurationCustomAs(input, ctx)

      ctx.body = getWellKnownOAuthConfigurationCustomAsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getWellKnownOpenIdConfigurationCustomAsParamSchema = z.object({
    authorizationServerId: z.string(),
  })

  const getWellKnownOpenIdConfigurationCustomAsQuerySchema = z.object({
    client_id: z.string().optional(),
  })

  const getWellKnownOpenIdConfigurationCustomAsResponseValidator =
    responseValidationFactory(
      [
        ["200", s_OidcMetadata],
        ["400", s_Error],
        ["404", s_Error],
      ],
      undefined,
    )

  router.get(
    "getWellKnownOpenIdConfigurationCustomAs",
    "/oauth2/:authorizationServerId/.well-known/openid-configuration",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getWellKnownOpenIdConfigurationCustomAsParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getWellKnownOpenIdConfigurationCustomAsQuerySchema,
          ctx.query,
        ),
        body: undefined,
      }

      const { status, body } =
        await implementation.getWellKnownOpenIdConfigurationCustomAs(input, ctx)

      ctx.body = getWellKnownOpenIdConfigurationCustomAsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const authorizeCustomAsParamSchema = z.object({
    authorizationServerId: z.string(),
  })

  const authorizeCustomAsQuerySchema = z.object({
    acr_values: s_AcrValue.optional(),
    client_id: z.string().optional(),
    code_challenge: z.string().optional(),
    code_challenge_method: s_CodeChallengeMethod.optional(),
    display: z.string().optional(),
    enroll_amr_values: s_AmrValue.optional(),
    idp_scope: z.string().optional(),
    idp: z.string().optional(),
    login_hint: z.string().optional(),
    max_age: z.coerce.number().optional(),
    nonce: z.string().optional(),
    prompt: s_Prompt.optional(),
    redirect_uri: z.string().optional(),
    response_type: s_ResponseTypesSupported.optional(),
    response_mode: s_ResponseMode.optional(),
    request_uri: z.string().optional(),
    request: z.string().optional(),
    scope: z.string().optional(),
    sessionToken: z.string().optional(),
    state: z.string().optional(),
  })

  const authorizeCustomAsResponseValidator = responseValidationFactory(
    [["429", s_Error]],
    undefined,
  )

  router.get(
    "authorizeCustomAs",
    "/oauth2/:authorizationServerId/v1/authorize",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(authorizeCustomAsParamSchema, ctx.params),
        query: parseRequestInput(authorizeCustomAsQuerySchema, ctx.query),
        body: undefined,
      }

      const { status, body } = await implementation.authorizeCustomAs(
        input,
        ctx,
      )

      ctx.body = authorizeCustomAsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const bcAuthorizeCustomAsParamSchema = z.object({
    authorizationServerId: z.string(),
  })

  const bcAuthorizeCustomAsBodySchema = s_BackchannelAuthorizeRequest

  const bcAuthorizeCustomAsResponseValidator = responseValidationFactory(
    [
      ["200", s_BackchannelAuthorizeResponse],
      ["400", s_OAuthError],
      ["401", s_OAuthError],
      ["429", s_Error],
    ],
    undefined,
  )

  router.post(
    "bcAuthorizeCustomAs",
    "/oauth2/:authorizationServerId/v1/bc/authorize",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(bcAuthorizeCustomAsParamSchema, ctx.params),
        query: undefined,
        body: parseRequestInput(
          bcAuthorizeCustomAsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.bcAuthorizeCustomAs(
        input,
        ctx,
      )

      ctx.body = bcAuthorizeCustomAsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deviceAuthorizeCustomAsParamSchema = z.object({
    authorizationServerId: z.string(),
  })

  const deviceAuthorizeCustomAsBodySchema = s_DeviceAuthorizeRequest

  const deviceAuthorizeCustomAsResponseValidator = responseValidationFactory(
    [
      ["200", s_DeviceAuthorizeResponse],
      ["400", s_OAuthError],
      ["401", s_OAuthError],
      ["429", s_Error],
    ],
    undefined,
  )

  router.post(
    "deviceAuthorizeCustomAs",
    "/oauth2/:authorizationServerId/v1/device/authorize",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deviceAuthorizeCustomAsParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deviceAuthorizeCustomAsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.deviceAuthorizeCustomAs(
        input,
        ctx,
      )

      ctx.body = deviceAuthorizeCustomAsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const introspectCustomAsParamSchema = z.object({
    authorizationServerId: z.string(),
  })

  const introspectCustomAsBodySchema = s_IntrospectionRequest

  const introspectCustomAsResponseValidator = responseValidationFactory(
    [
      ["200", s_IntrospectionResponse],
      ["400", s_OAuthError],
      ["401", s_OAuthError],
      ["429", s_Error],
    ],
    undefined,
  )

  router.post(
    "introspectCustomAs",
    "/oauth2/:authorizationServerId/v1/introspect",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(introspectCustomAsParamSchema, ctx.params),
        query: undefined,
        body: parseRequestInput(introspectCustomAsBodySchema, ctx.request.body),
      }

      const { status, body } = await implementation.introspectCustomAs(
        input,
        ctx,
      )

      ctx.body = introspectCustomAsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const oauthKeysCustomAsParamSchema = z.object({
    authorizationServerId: z.string(),
  })

  const oauthKeysCustomAsResponseValidator = responseValidationFactory(
    [
      ["200", s_OAuthKeys],
      ["429", s_Error],
    ],
    undefined,
  )

  router.get(
    "oauthKeysCustomAs",
    "/oauth2/:authorizationServerId/v1/keys",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(oauthKeysCustomAsParamSchema, ctx.params),
        query: undefined,
        body: undefined,
      }

      const { status, body } = await implementation.oauthKeysCustomAs(
        input,
        ctx,
      )

      ctx.body = oauthKeysCustomAsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const logoutCustomAsParamSchema = z.object({
    authorizationServerId: z.string(),
  })

  const logoutCustomAsQuerySchema = z.object({
    id_token_hint: z.string(),
    post_logout_redirect_uri: z.string().optional(),
    state: z.string().optional(),
  })

  const logoutCustomAsResponseValidator = responseValidationFactory(
    [["429", s_Error]],
    undefined,
  )

  router.get(
    "logoutCustomAs",
    "/oauth2/:authorizationServerId/v1/logout",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(logoutCustomAsParamSchema, ctx.params),
        query: parseRequestInput(logoutCustomAsQuerySchema, ctx.query),
        body: undefined,
      }

      const { status, body } = await implementation.logoutCustomAs(input, ctx)

      ctx.body = logoutCustomAsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const parCustomAsParamSchema = z.object({ authorizationServerId: z.string() })

  const parCustomAsBodySchema = s_ParRequest

  const parCustomAsResponseValidator = responseValidationFactory(
    [
      ["200", s_ParResponse],
      ["400", s_OAuthError],
      ["401", s_OAuthError],
      ["403", s_OAuthError],
      ["429", s_Error],
    ],
    undefined,
  )

  router.post(
    "parCustomAs",
    "/oauth2/:authorizationServerId/v1/par",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(parCustomAsParamSchema, ctx.params),
        query: undefined,
        body: parseRequestInput(parCustomAsBodySchema, ctx.request.body),
      }

      const { status, body } = await implementation.parCustomAs(input, ctx)

      ctx.body = parCustomAsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const revokeCustomAsParamSchema = z.object({
    authorizationServerId: z.string(),
  })

  const revokeCustomAsBodySchema = s_RevokeRequest

  const revokeCustomAsResponseValidator = responseValidationFactory(
    [
      ["200", z.void()],
      ["400", s_OAuthError],
      ["401", s_OAuthError],
      ["429", s_Error],
    ],
    undefined,
  )

  router.post(
    "revokeCustomAs",
    "/oauth2/:authorizationServerId/v1/revoke",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(revokeCustomAsParamSchema, ctx.params),
        query: undefined,
        body: parseRequestInput(revokeCustomAsBodySchema, ctx.request.body),
      }

      const { status, body } = await implementation.revokeCustomAs(input, ctx)

      ctx.body = revokeCustomAsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const tokenCustomAsParamSchema = z.object({
    authorizationServerId: z.string(),
  })

  const tokenCustomAsBodySchema = s_TokenRequest

  const tokenCustomAsResponseValidator = responseValidationFactory(
    [
      ["200", s_TokenResponse],
      ["400", s_OAuthError],
      ["401", s_OAuthError],
      ["429", s_Error],
    ],
    undefined,
  )

  router.post(
    "tokenCustomAs",
    "/oauth2/:authorizationServerId/v1/token",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(tokenCustomAsParamSchema, ctx.params),
        query: undefined,
        body: parseRequestInput(tokenCustomAsBodySchema, ctx.request.body),
      }

      const { status, body } = await implementation.tokenCustomAs(input, ctx)

      ctx.body = tokenCustomAsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const userinfoCustomAsParamSchema = z.object({
    authorizationServerId: z.string(),
  })

  const userinfoCustomAsResponseValidator = responseValidationFactory(
    [
      ["200", s_UserInfo],
      ["401", z.void()],
      ["403", z.void()],
      ["429", s_Error],
    ],
    undefined,
  )

  router.get(
    "userinfoCustomAs",
    "/oauth2/:authorizationServerId/v1/userinfo",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(userinfoCustomAsParamSchema, ctx.params),
        query: undefined,
        body: undefined,
      }

      const { status, body } = await implementation.userinfoCustomAs(input, ctx)

      ctx.body = userinfoCustomAsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  return router
}

export async function bootstrap(config: ServerConfig) {
  // ApiClient
  return startServer(config)
}
