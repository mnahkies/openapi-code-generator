/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_Azure_Core_Foundations_Error,
  t_Azure_Core_Foundations_ErrorResponse,
  t_Azure_Core_Foundations_OperationState,
  t_GetServiceStatusHeaderSchema,
  t_GetServiceStatusQuerySchema,
  t_Manufacturer,
  t_ManufacturersCreateOrReplaceManufacturerBodySchema,
  t_ManufacturersCreateOrReplaceManufacturerHeaderSchema,
  t_ManufacturersCreateOrReplaceManufacturerParamSchema,
  t_ManufacturersCreateOrReplaceManufacturerQuerySchema,
  t_ManufacturersDeleteManufacturerHeaderSchema,
  t_ManufacturersDeleteManufacturerParamSchema,
  t_ManufacturersDeleteManufacturerQuerySchema,
  t_ManufacturersGetManufacturerHeaderSchema,
  t_ManufacturersGetManufacturerOperationStatusParamSchema,
  t_ManufacturersGetManufacturerOperationStatusQuerySchema,
  t_ManufacturersGetManufacturerParamSchema,
  t_ManufacturersGetManufacturerQuerySchema,
  t_ManufacturersListManufacturersHeaderSchema,
  t_ManufacturersListManufacturersQuerySchema,
  t_PagedManufacturer,
  t_PagedWidget,
  t_PagedWidgetPart,
  t_Widget,
  t_WidgetAnalytics,
  t_WidgetPart,
  t_WidgetPartsCreateWidgetPartBodySchema,
  t_WidgetPartsCreateWidgetPartHeaderSchema,
  t_WidgetPartsCreateWidgetPartParamSchema,
  t_WidgetPartsCreateWidgetPartQuerySchema,
  t_WidgetPartsDeleteWidgetPartHeaderSchema,
  t_WidgetPartsDeleteWidgetPartParamSchema,
  t_WidgetPartsDeleteWidgetPartQuerySchema,
  t_WidgetPartsGetWidgetPartHeaderSchema,
  t_WidgetPartsGetWidgetPartOperationStatusParamSchema,
  t_WidgetPartsGetWidgetPartOperationStatusQuerySchema,
  t_WidgetPartsGetWidgetPartParamSchema,
  t_WidgetPartsGetWidgetPartQuerySchema,
  t_WidgetPartsListWidgetPartsHeaderSchema,
  t_WidgetPartsListWidgetPartsParamSchema,
  t_WidgetPartsListWidgetPartsQuerySchema,
  t_WidgetPartsReorderPartsBodySchema,
  t_WidgetPartsReorderPartsHeaderSchema,
  t_WidgetPartsReorderPartsParamSchema,
  t_WidgetPartsReorderPartsQuerySchema,
  t_WidgetRepairRequest,
  t_WidgetRepairState,
  t_WidgetsCreateOrUpdateWidgetBodySchema,
  t_WidgetsCreateOrUpdateWidgetHeaderSchema,
  t_WidgetsCreateOrUpdateWidgetParamSchema,
  t_WidgetsCreateOrUpdateWidgetQuerySchema,
  t_WidgetsDeleteWidgetHeaderSchema,
  t_WidgetsDeleteWidgetParamSchema,
  t_WidgetsDeleteWidgetQuerySchema,
  t_WidgetsGetAnalyticsHeaderSchema,
  t_WidgetsGetAnalyticsParamSchema,
  t_WidgetsGetAnalyticsQuerySchema,
  t_WidgetsGetRepairStatusParamSchema,
  t_WidgetsGetRepairStatusQuerySchema,
  t_WidgetsGetWidgetHeaderSchema,
  t_WidgetsGetWidgetOperationStatusWidgetsGetWidgetDeleteOperationStatusParamSchema,
  t_WidgetsGetWidgetOperationStatusWidgetsGetWidgetDeleteOperationStatusQuerySchema,
  t_WidgetsGetWidgetParamSchema,
  t_WidgetsGetWidgetQuerySchema,
  t_WidgetsListWidgetsHeaderSchema,
  t_WidgetsListWidgetsQuerySchema,
  t_WidgetsScheduleRepairsBodySchema,
  t_WidgetsScheduleRepairsHeaderSchema,
  t_WidgetsScheduleRepairsParamSchema,
  t_WidgetsScheduleRepairsQuerySchema,
  t_WidgetsUpdateAnalyticsBodySchema,
  t_WidgetsUpdateAnalyticsHeaderSchema,
  t_WidgetsUpdateAnalyticsParamSchema,
  t_WidgetsUpdateAnalyticsQuerySchema,
} from "./models"
import {
  s_Azure_Core_Foundations_Error,
  s_Azure_Core_Foundations_ErrorResponse,
  s_Azure_Core_Foundations_OperationState,
  s_Azure_Core_uuid,
  s_Manufacturer,
  s_PagedManufacturer,
  s_PagedWidget,
  s_PagedWidgetPart,
  s_Widget,
  s_WidgetAnalytics,
  s_WidgetAnalyticsCreateOrUpdate,
  s_WidgetCreateOrUpdate,
  s_WidgetPart,
  s_WidgetPartReorderRequest,
  s_WidgetRepairRequest,
  s_WidgetRepairState,
} from "./schemas"
import KoaRouter, { RouterContext } from "@koa/router"
import {
  KoaRuntimeError,
  RequestInputType,
} from "@nahkies/typescript-koa-runtime/errors"
import {
  KoaRuntimeResponder,
  KoaRuntimeResponse,
  Params,
  Response,
  ServerConfig,
  StatusCode,
  b,
  startServer,
} from "@nahkies/typescript-koa-runtime/server"
import { parseRequestInput } from "@nahkies/typescript-koa-runtime/zod"
import { z } from "zod"

const getServiceStatus = b((r) => ({
  with200: r.with200<{
    statusString: string
  }>(z.object({ statusString: z.string() })),
  withDefault: r.withDefault<t_Azure_Core_Foundations_ErrorResponse>(
    s_Azure_Core_Foundations_ErrorResponse,
  ),
  withStatus: r.withStatus,
}))

type GetServiceStatusResponder = (typeof getServiceStatus)["responder"] &
  KoaRuntimeResponder

export type GetServiceStatus = (
  params: Params<
    void,
    t_GetServiceStatusQuerySchema,
    void,
    t_GetServiceStatusHeaderSchema
  >,
  respond: GetServiceStatusResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        statusString: string
      }
    >
  | Response<StatusCode, t_Azure_Core_Foundations_ErrorResponse>
>

const widgetsGetWidgetOperationStatusWidgetsGetWidgetDeleteOperationStatus = b(
  (r) => ({
    with200: r.with200<
      | {
          error?: t_Azure_Core_Foundations_Error
          id: string
          result?: t_Widget
          status: t_Azure_Core_Foundations_OperationState
        }
      | {
          error?: t_Azure_Core_Foundations_Error
          id: string
          status: t_Azure_Core_Foundations_OperationState
        }
    >(
      z.union([
        z.object({
          id: z.string(),
          status: s_Azure_Core_Foundations_OperationState,
          error: z.lazy(() => s_Azure_Core_Foundations_Error.optional()),
          result: s_Widget.optional(),
        }),
        z.object({
          id: z.string(),
          status: s_Azure_Core_Foundations_OperationState,
          error: z.lazy(() => s_Azure_Core_Foundations_Error.optional()),
        }),
      ]),
    ),
    withDefault: r.withDefault<t_Azure_Core_Foundations_ErrorResponse>(
      s_Azure_Core_Foundations_ErrorResponse,
    ),
    withStatus: r.withStatus,
  }),
)

type WidgetsGetWidgetOperationStatusWidgetsGetWidgetDeleteOperationStatusResponder =
  (typeof widgetsGetWidgetOperationStatusWidgetsGetWidgetDeleteOperationStatus)["responder"] &
    KoaRuntimeResponder

export type WidgetsGetWidgetOperationStatusWidgetsGetWidgetDeleteOperationStatus =
  (
    params: Params<
      t_WidgetsGetWidgetOperationStatusWidgetsGetWidgetDeleteOperationStatusParamSchema,
      t_WidgetsGetWidgetOperationStatusWidgetsGetWidgetDeleteOperationStatusQuerySchema,
      void,
      void
    >,
    respond: WidgetsGetWidgetOperationStatusWidgetsGetWidgetDeleteOperationStatusResponder,
    ctx: RouterContext,
  ) => Promise<
    | KoaRuntimeResponse<unknown>
    | Response<
        200,
        | {
            error?: t_Azure_Core_Foundations_Error
            id: string
            result?: t_Widget
            status: t_Azure_Core_Foundations_OperationState
          }
        | {
            error?: t_Azure_Core_Foundations_Error
            id: string
            status: t_Azure_Core_Foundations_OperationState
          }
      >
    | Response<StatusCode, t_Azure_Core_Foundations_ErrorResponse>
  >

const widgetsCreateOrUpdateWidget = b((r) => ({
  with200: r.with200<t_Widget>(s_Widget),
  with201: r.with201<t_Widget>(s_Widget),
  withDefault: r.withDefault<t_Azure_Core_Foundations_ErrorResponse>(
    s_Azure_Core_Foundations_ErrorResponse,
  ),
  withStatus: r.withStatus,
}))

type WidgetsCreateOrUpdateWidgetResponder =
  (typeof widgetsCreateOrUpdateWidget)["responder"] & KoaRuntimeResponder

export type WidgetsCreateOrUpdateWidget = (
  params: Params<
    t_WidgetsCreateOrUpdateWidgetParamSchema,
    t_WidgetsCreateOrUpdateWidgetQuerySchema,
    t_WidgetsCreateOrUpdateWidgetBodySchema,
    t_WidgetsCreateOrUpdateWidgetHeaderSchema
  >,
  respond: WidgetsCreateOrUpdateWidgetResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_Widget>
  | Response<201, t_Widget>
  | Response<StatusCode, t_Azure_Core_Foundations_ErrorResponse>
>

const widgetsGetWidget = b((r) => ({
  with200: r.with200<t_Widget>(s_Widget),
  withDefault: r.withDefault<t_Azure_Core_Foundations_ErrorResponse>(
    s_Azure_Core_Foundations_ErrorResponse,
  ),
  withStatus: r.withStatus,
}))

type WidgetsGetWidgetResponder = (typeof widgetsGetWidget)["responder"] &
  KoaRuntimeResponder

export type WidgetsGetWidget = (
  params: Params<
    t_WidgetsGetWidgetParamSchema,
    t_WidgetsGetWidgetQuerySchema,
    void,
    t_WidgetsGetWidgetHeaderSchema
  >,
  respond: WidgetsGetWidgetResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_Widget>
  | Response<StatusCode, t_Azure_Core_Foundations_ErrorResponse>
>

const widgetsDeleteWidget = b((r) => ({
  with202: r.with202<{
    error?: t_Azure_Core_Foundations_Error
    id: string
    status: t_Azure_Core_Foundations_OperationState
  }>(
    z.object({
      id: z.string(),
      status: s_Azure_Core_Foundations_OperationState,
      error: z.lazy(() => s_Azure_Core_Foundations_Error.optional()),
    }),
  ),
  withDefault: r.withDefault<t_Azure_Core_Foundations_ErrorResponse>(
    s_Azure_Core_Foundations_ErrorResponse,
  ),
  withStatus: r.withStatus,
}))

type WidgetsDeleteWidgetResponder = (typeof widgetsDeleteWidget)["responder"] &
  KoaRuntimeResponder

export type WidgetsDeleteWidget = (
  params: Params<
    t_WidgetsDeleteWidgetParamSchema,
    t_WidgetsDeleteWidgetQuerySchema,
    void,
    t_WidgetsDeleteWidgetHeaderSchema
  >,
  respond: WidgetsDeleteWidgetResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      202,
      {
        error?: t_Azure_Core_Foundations_Error
        id: string
        status: t_Azure_Core_Foundations_OperationState
      }
    >
  | Response<StatusCode, t_Azure_Core_Foundations_ErrorResponse>
>

const widgetsListWidgets = b((r) => ({
  with200: r.with200<t_PagedWidget>(s_PagedWidget),
  withDefault: r.withDefault<t_Azure_Core_Foundations_ErrorResponse>(
    s_Azure_Core_Foundations_ErrorResponse,
  ),
  withStatus: r.withStatus,
}))

type WidgetsListWidgetsResponder = (typeof widgetsListWidgets)["responder"] &
  KoaRuntimeResponder

export type WidgetsListWidgets = (
  params: Params<
    void,
    t_WidgetsListWidgetsQuerySchema,
    void,
    t_WidgetsListWidgetsHeaderSchema
  >,
  respond: WidgetsListWidgetsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_PagedWidget>
  | Response<StatusCode, t_Azure_Core_Foundations_ErrorResponse>
>

const widgetsGetAnalytics = b((r) => ({
  with200: r.with200<t_WidgetAnalytics>(s_WidgetAnalytics),
  withDefault: r.withDefault<t_Azure_Core_Foundations_ErrorResponse>(
    s_Azure_Core_Foundations_ErrorResponse,
  ),
  withStatus: r.withStatus,
}))

type WidgetsGetAnalyticsResponder = (typeof widgetsGetAnalytics)["responder"] &
  KoaRuntimeResponder

export type WidgetsGetAnalytics = (
  params: Params<
    t_WidgetsGetAnalyticsParamSchema,
    t_WidgetsGetAnalyticsQuerySchema,
    void,
    t_WidgetsGetAnalyticsHeaderSchema
  >,
  respond: WidgetsGetAnalyticsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_WidgetAnalytics>
  | Response<StatusCode, t_Azure_Core_Foundations_ErrorResponse>
>

const widgetsUpdateAnalytics = b((r) => ({
  with200: r.with200<t_WidgetAnalytics>(s_WidgetAnalytics),
  with201: r.with201<t_WidgetAnalytics>(s_WidgetAnalytics),
  withDefault: r.withDefault<t_Azure_Core_Foundations_ErrorResponse>(
    s_Azure_Core_Foundations_ErrorResponse,
  ),
  withStatus: r.withStatus,
}))

type WidgetsUpdateAnalyticsResponder =
  (typeof widgetsUpdateAnalytics)["responder"] & KoaRuntimeResponder

export type WidgetsUpdateAnalytics = (
  params: Params<
    t_WidgetsUpdateAnalyticsParamSchema,
    t_WidgetsUpdateAnalyticsQuerySchema,
    t_WidgetsUpdateAnalyticsBodySchema,
    t_WidgetsUpdateAnalyticsHeaderSchema
  >,
  respond: WidgetsUpdateAnalyticsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_WidgetAnalytics>
  | Response<201, t_WidgetAnalytics>
  | Response<StatusCode, t_Azure_Core_Foundations_ErrorResponse>
>

const widgetsGetRepairStatus = b((r) => ({
  with200: r.with200<{
    error?: t_Azure_Core_Foundations_Error
    id: string
    result?: t_WidgetRepairRequest
    status: t_Azure_Core_Foundations_OperationState
  }>(
    z.object({
      id: z.string(),
      status: s_Azure_Core_Foundations_OperationState,
      error: z.lazy(() => s_Azure_Core_Foundations_Error.optional()),
      result: s_WidgetRepairRequest.optional(),
    }),
  ),
  withDefault: r.withDefault<t_Azure_Core_Foundations_ErrorResponse>(
    s_Azure_Core_Foundations_ErrorResponse,
  ),
  withStatus: r.withStatus,
}))

type WidgetsGetRepairStatusResponder =
  (typeof widgetsGetRepairStatus)["responder"] & KoaRuntimeResponder

export type WidgetsGetRepairStatus = (
  params: Params<
    t_WidgetsGetRepairStatusParamSchema,
    t_WidgetsGetRepairStatusQuerySchema,
    void,
    void
  >,
  respond: WidgetsGetRepairStatusResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        error?: t_Azure_Core_Foundations_Error
        id: string
        result?: t_WidgetRepairRequest
        status: t_Azure_Core_Foundations_OperationState
      }
    >
  | Response<StatusCode, t_Azure_Core_Foundations_ErrorResponse>
>

const widgetsScheduleRepairs = b((r) => ({
  with202: r.with202<{
    error?: t_Azure_Core_Foundations_Error
    id: string
    result?: {
      completedDateTime: string
      createdDateTime: string
      requestState: t_WidgetRepairState
      scheduledDateTime: string
      updatedDateTime: string
    }
    status: t_Azure_Core_Foundations_OperationState
  }>(
    z.object({
      id: z.string(),
      status: s_Azure_Core_Foundations_OperationState,
      error: z.lazy(() => s_Azure_Core_Foundations_Error.optional()),
      result: z
        .object({
          requestState: s_WidgetRepairState,
          scheduledDateTime: z.string().datetime({ offset: true }),
          createdDateTime: z.string().datetime({ offset: true }),
          updatedDateTime: z.string().datetime({ offset: true }),
          completedDateTime: z.string().datetime({ offset: true }),
        })
        .optional(),
    }),
  ),
  withDefault: r.withDefault<t_Azure_Core_Foundations_ErrorResponse>(
    s_Azure_Core_Foundations_ErrorResponse,
  ),
  withStatus: r.withStatus,
}))

type WidgetsScheduleRepairsResponder =
  (typeof widgetsScheduleRepairs)["responder"] & KoaRuntimeResponder

export type WidgetsScheduleRepairs = (
  params: Params<
    t_WidgetsScheduleRepairsParamSchema,
    t_WidgetsScheduleRepairsQuerySchema,
    t_WidgetsScheduleRepairsBodySchema,
    t_WidgetsScheduleRepairsHeaderSchema
  >,
  respond: WidgetsScheduleRepairsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      202,
      {
        error?: t_Azure_Core_Foundations_Error
        id: string
        result?: {
          completedDateTime: string
          createdDateTime: string
          requestState: t_WidgetRepairState
          scheduledDateTime: string
          updatedDateTime: string
        }
        status: t_Azure_Core_Foundations_OperationState
      }
    >
  | Response<StatusCode, t_Azure_Core_Foundations_ErrorResponse>
>

const widgetPartsGetWidgetPartOperationStatus = b((r) => ({
  with200: r.with200<{
    error?: t_Azure_Core_Foundations_Error
    id: string
    result?: t_WidgetPart
    status: t_Azure_Core_Foundations_OperationState
  }>(
    z.object({
      id: z.string(),
      status: s_Azure_Core_Foundations_OperationState,
      error: z.lazy(() => s_Azure_Core_Foundations_Error.optional()),
      result: s_WidgetPart.optional(),
    }),
  ),
  withDefault: r.withDefault<t_Azure_Core_Foundations_ErrorResponse>(
    s_Azure_Core_Foundations_ErrorResponse,
  ),
  withStatus: r.withStatus,
}))

type WidgetPartsGetWidgetPartOperationStatusResponder =
  (typeof widgetPartsGetWidgetPartOperationStatus)["responder"] &
    KoaRuntimeResponder

export type WidgetPartsGetWidgetPartOperationStatus = (
  params: Params<
    t_WidgetPartsGetWidgetPartOperationStatusParamSchema,
    t_WidgetPartsGetWidgetPartOperationStatusQuerySchema,
    void,
    void
  >,
  respond: WidgetPartsGetWidgetPartOperationStatusResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        error?: t_Azure_Core_Foundations_Error
        id: string
        result?: t_WidgetPart
        status: t_Azure_Core_Foundations_OperationState
      }
    >
  | Response<StatusCode, t_Azure_Core_Foundations_ErrorResponse>
>

const widgetPartsCreateWidgetPart = b((r) => ({
  with201: r.with201<void>(z.undefined()),
  withDefault: r.withDefault<t_Azure_Core_Foundations_ErrorResponse>(
    s_Azure_Core_Foundations_ErrorResponse,
  ),
  withStatus: r.withStatus,
}))

type WidgetPartsCreateWidgetPartResponder =
  (typeof widgetPartsCreateWidgetPart)["responder"] & KoaRuntimeResponder

export type WidgetPartsCreateWidgetPart = (
  params: Params<
    t_WidgetPartsCreateWidgetPartParamSchema,
    t_WidgetPartsCreateWidgetPartQuerySchema,
    t_WidgetPartsCreateWidgetPartBodySchema,
    t_WidgetPartsCreateWidgetPartHeaderSchema
  >,
  respond: WidgetPartsCreateWidgetPartResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<201, void>
  | Response<StatusCode, t_Azure_Core_Foundations_ErrorResponse>
>

const widgetPartsListWidgetParts = b((r) => ({
  with200: r.with200<t_PagedWidgetPart>(s_PagedWidgetPart),
  withDefault: r.withDefault<t_Azure_Core_Foundations_ErrorResponse>(
    s_Azure_Core_Foundations_ErrorResponse,
  ),
  withStatus: r.withStatus,
}))

type WidgetPartsListWidgetPartsResponder =
  (typeof widgetPartsListWidgetParts)["responder"] & KoaRuntimeResponder

export type WidgetPartsListWidgetParts = (
  params: Params<
    t_WidgetPartsListWidgetPartsParamSchema,
    t_WidgetPartsListWidgetPartsQuerySchema,
    void,
    t_WidgetPartsListWidgetPartsHeaderSchema
  >,
  respond: WidgetPartsListWidgetPartsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_PagedWidgetPart>
  | Response<StatusCode, t_Azure_Core_Foundations_ErrorResponse>
>

const widgetPartsGetWidgetPart = b((r) => ({
  with200: r.with200<t_WidgetPart>(s_WidgetPart),
  withDefault: r.withDefault<t_Azure_Core_Foundations_ErrorResponse>(
    s_Azure_Core_Foundations_ErrorResponse,
  ),
  withStatus: r.withStatus,
}))

type WidgetPartsGetWidgetPartResponder =
  (typeof widgetPartsGetWidgetPart)["responder"] & KoaRuntimeResponder

export type WidgetPartsGetWidgetPart = (
  params: Params<
    t_WidgetPartsGetWidgetPartParamSchema,
    t_WidgetPartsGetWidgetPartQuerySchema,
    void,
    t_WidgetPartsGetWidgetPartHeaderSchema
  >,
  respond: WidgetPartsGetWidgetPartResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_WidgetPart>
  | Response<StatusCode, t_Azure_Core_Foundations_ErrorResponse>
>

const widgetPartsDeleteWidgetPart = b((r) => ({
  with204: r.with204<void>(z.undefined()),
  withDefault: r.withDefault<t_Azure_Core_Foundations_ErrorResponse>(
    s_Azure_Core_Foundations_ErrorResponse,
  ),
  withStatus: r.withStatus,
}))

type WidgetPartsDeleteWidgetPartResponder =
  (typeof widgetPartsDeleteWidgetPart)["responder"] & KoaRuntimeResponder

export type WidgetPartsDeleteWidgetPart = (
  params: Params<
    t_WidgetPartsDeleteWidgetPartParamSchema,
    t_WidgetPartsDeleteWidgetPartQuerySchema,
    void,
    t_WidgetPartsDeleteWidgetPartHeaderSchema
  >,
  respond: WidgetPartsDeleteWidgetPartResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<204, void>
  | Response<StatusCode, t_Azure_Core_Foundations_ErrorResponse>
>

const widgetPartsReorderParts = b((r) => ({
  with202: r.with202<{
    error?: t_Azure_Core_Foundations_Error
    id: string
    status: t_Azure_Core_Foundations_OperationState
  }>(
    z.object({
      id: z.string(),
      status: s_Azure_Core_Foundations_OperationState,
      error: z.lazy(() => s_Azure_Core_Foundations_Error.optional()),
    }),
  ),
  withDefault: r.withDefault<t_Azure_Core_Foundations_ErrorResponse>(
    s_Azure_Core_Foundations_ErrorResponse,
  ),
  withStatus: r.withStatus,
}))

type WidgetPartsReorderPartsResponder =
  (typeof widgetPartsReorderParts)["responder"] & KoaRuntimeResponder

export type WidgetPartsReorderParts = (
  params: Params<
    t_WidgetPartsReorderPartsParamSchema,
    t_WidgetPartsReorderPartsQuerySchema,
    t_WidgetPartsReorderPartsBodySchema,
    t_WidgetPartsReorderPartsHeaderSchema
  >,
  respond: WidgetPartsReorderPartsResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      202,
      {
        error?: t_Azure_Core_Foundations_Error
        id: string
        status: t_Azure_Core_Foundations_OperationState
      }
    >
  | Response<StatusCode, t_Azure_Core_Foundations_ErrorResponse>
>

const manufacturersGetManufacturerOperationStatus = b((r) => ({
  with200: r.with200<{
    error?: t_Azure_Core_Foundations_Error
    id: string
    result?: t_Manufacturer
    status: t_Azure_Core_Foundations_OperationState
  }>(
    z.object({
      id: z.string(),
      status: s_Azure_Core_Foundations_OperationState,
      error: z.lazy(() => s_Azure_Core_Foundations_Error.optional()),
      result: s_Manufacturer.optional(),
    }),
  ),
  withDefault: r.withDefault<t_Azure_Core_Foundations_ErrorResponse>(
    s_Azure_Core_Foundations_ErrorResponse,
  ),
  withStatus: r.withStatus,
}))

type ManufacturersGetManufacturerOperationStatusResponder =
  (typeof manufacturersGetManufacturerOperationStatus)["responder"] &
    KoaRuntimeResponder

export type ManufacturersGetManufacturerOperationStatus = (
  params: Params<
    t_ManufacturersGetManufacturerOperationStatusParamSchema,
    t_ManufacturersGetManufacturerOperationStatusQuerySchema,
    void,
    void
  >,
  respond: ManufacturersGetManufacturerOperationStatusResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      200,
      {
        error?: t_Azure_Core_Foundations_Error
        id: string
        result?: t_Manufacturer
        status: t_Azure_Core_Foundations_OperationState
      }
    >
  | Response<StatusCode, t_Azure_Core_Foundations_ErrorResponse>
>

const manufacturersCreateOrReplaceManufacturer = b((r) => ({
  with200: r.with200<t_Manufacturer>(s_Manufacturer),
  with201: r.with201<t_Manufacturer>(s_Manufacturer),
  withDefault: r.withDefault<t_Azure_Core_Foundations_ErrorResponse>(
    s_Azure_Core_Foundations_ErrorResponse,
  ),
  withStatus: r.withStatus,
}))

type ManufacturersCreateOrReplaceManufacturerResponder =
  (typeof manufacturersCreateOrReplaceManufacturer)["responder"] &
    KoaRuntimeResponder

export type ManufacturersCreateOrReplaceManufacturer = (
  params: Params<
    t_ManufacturersCreateOrReplaceManufacturerParamSchema,
    t_ManufacturersCreateOrReplaceManufacturerQuerySchema,
    t_ManufacturersCreateOrReplaceManufacturerBodySchema,
    t_ManufacturersCreateOrReplaceManufacturerHeaderSchema
  >,
  respond: ManufacturersCreateOrReplaceManufacturerResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_Manufacturer>
  | Response<201, t_Manufacturer>
  | Response<StatusCode, t_Azure_Core_Foundations_ErrorResponse>
>

const manufacturersGetManufacturer = b((r) => ({
  with200: r.with200<t_Manufacturer>(s_Manufacturer),
  withDefault: r.withDefault<t_Azure_Core_Foundations_ErrorResponse>(
    s_Azure_Core_Foundations_ErrorResponse,
  ),
  withStatus: r.withStatus,
}))

type ManufacturersGetManufacturerResponder =
  (typeof manufacturersGetManufacturer)["responder"] & KoaRuntimeResponder

export type ManufacturersGetManufacturer = (
  params: Params<
    t_ManufacturersGetManufacturerParamSchema,
    t_ManufacturersGetManufacturerQuerySchema,
    void,
    t_ManufacturersGetManufacturerHeaderSchema
  >,
  respond: ManufacturersGetManufacturerResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_Manufacturer>
  | Response<StatusCode, t_Azure_Core_Foundations_ErrorResponse>
>

const manufacturersDeleteManufacturer = b((r) => ({
  with202: r.with202<{
    error?: t_Azure_Core_Foundations_Error
    id: string
    status: t_Azure_Core_Foundations_OperationState
  }>(
    z.object({
      id: z.string(),
      status: s_Azure_Core_Foundations_OperationState,
      error: z.lazy(() => s_Azure_Core_Foundations_Error.optional()),
    }),
  ),
  withDefault: r.withDefault<t_Azure_Core_Foundations_ErrorResponse>(
    s_Azure_Core_Foundations_ErrorResponse,
  ),
  withStatus: r.withStatus,
}))

type ManufacturersDeleteManufacturerResponder =
  (typeof manufacturersDeleteManufacturer)["responder"] & KoaRuntimeResponder

export type ManufacturersDeleteManufacturer = (
  params: Params<
    t_ManufacturersDeleteManufacturerParamSchema,
    t_ManufacturersDeleteManufacturerQuerySchema,
    void,
    t_ManufacturersDeleteManufacturerHeaderSchema
  >,
  respond: ManufacturersDeleteManufacturerResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<
      202,
      {
        error?: t_Azure_Core_Foundations_Error
        id: string
        status: t_Azure_Core_Foundations_OperationState
      }
    >
  | Response<StatusCode, t_Azure_Core_Foundations_ErrorResponse>
>

const manufacturersListManufacturers = b((r) => ({
  with200: r.with200<t_PagedManufacturer>(s_PagedManufacturer),
  withDefault: r.withDefault<t_Azure_Core_Foundations_ErrorResponse>(
    s_Azure_Core_Foundations_ErrorResponse,
  ),
  withStatus: r.withStatus,
}))

type ManufacturersListManufacturersResponder =
  (typeof manufacturersListManufacturers)["responder"] & KoaRuntimeResponder

export type ManufacturersListManufacturers = (
  params: Params<
    void,
    t_ManufacturersListManufacturersQuerySchema,
    void,
    t_ManufacturersListManufacturersHeaderSchema
  >,
  respond: ManufacturersListManufacturersResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_PagedManufacturer>
  | Response<StatusCode, t_Azure_Core_Foundations_ErrorResponse>
>

export type Implementation = {
  getServiceStatus: GetServiceStatus
  widgetsGetWidgetOperationStatusWidgetsGetWidgetDeleteOperationStatus: WidgetsGetWidgetOperationStatusWidgetsGetWidgetDeleteOperationStatus
  widgetsCreateOrUpdateWidget: WidgetsCreateOrUpdateWidget
  widgetsGetWidget: WidgetsGetWidget
  widgetsDeleteWidget: WidgetsDeleteWidget
  widgetsListWidgets: WidgetsListWidgets
  widgetsGetAnalytics: WidgetsGetAnalytics
  widgetsUpdateAnalytics: WidgetsUpdateAnalytics
  widgetsGetRepairStatus: WidgetsGetRepairStatus
  widgetsScheduleRepairs: WidgetsScheduleRepairs
  widgetPartsGetWidgetPartOperationStatus: WidgetPartsGetWidgetPartOperationStatus
  widgetPartsCreateWidgetPart: WidgetPartsCreateWidgetPart
  widgetPartsListWidgetParts: WidgetPartsListWidgetParts
  widgetPartsGetWidgetPart: WidgetPartsGetWidgetPart
  widgetPartsDeleteWidgetPart: WidgetPartsDeleteWidgetPart
  widgetPartsReorderParts: WidgetPartsReorderParts
  manufacturersGetManufacturerOperationStatus: ManufacturersGetManufacturerOperationStatus
  manufacturersCreateOrReplaceManufacturer: ManufacturersCreateOrReplaceManufacturer
  manufacturersGetManufacturer: ManufacturersGetManufacturer
  manufacturersDeleteManufacturer: ManufacturersDeleteManufacturer
  manufacturersListManufacturers: ManufacturersListManufacturers
}

export function createRouter(implementation: Implementation): KoaRouter {
  const router = new KoaRouter()

  const getServiceStatusQuerySchema = z.object({
    "api-version": z.string().min(1),
  })

  const getServiceStatusHeaderSchema = z.object({
    "x-ms-client-request-id": s_Azure_Core_uuid.optional(),
  })

  router.get("getServiceStatus", "/service-status", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        getServiceStatusQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: parseRequestInput(
        getServiceStatusHeaderSchema,
        Reflect.get(ctx.request, "headers"),
        RequestInputType.RequestHeader,
      ),
    }

    const response = await implementation
      .getServiceStatus(input, getServiceStatus.responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = getServiceStatus.validator(status, body)
    ctx.status = status
    return next()
  })

  const widgetsGetWidgetOperationStatusWidgetsGetWidgetDeleteOperationStatusParamSchema =
    z.object({ widgetName: z.string(), operationId: z.string() })

  const widgetsGetWidgetOperationStatusWidgetsGetWidgetDeleteOperationStatusQuerySchema =
    z.object({ "api-version": z.string().min(1) })

  router.get(
    "widgetsGetWidgetOperationStatusWidgetsGetWidgetDeleteOperationStatus",
    "/widgets/:widgetName/operations/:operationId",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          widgetsGetWidgetOperationStatusWidgetsGetWidgetDeleteOperationStatusParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          widgetsGetWidgetOperationStatusWidgetsGetWidgetDeleteOperationStatusQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .widgetsGetWidgetOperationStatusWidgetsGetWidgetDeleteOperationStatus(
          input,
          widgetsGetWidgetOperationStatusWidgetsGetWidgetDeleteOperationStatus.responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body =
        widgetsGetWidgetOperationStatusWidgetsGetWidgetDeleteOperationStatus.validator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const widgetsCreateOrUpdateWidgetParamSchema = z.object({
    widgetName: z.string(),
  })

  const widgetsCreateOrUpdateWidgetQuerySchema = z.object({
    "api-version": z.string().min(1),
  })

  const widgetsCreateOrUpdateWidgetHeaderSchema = z.object({
    "repeatability-request-id": z.string().optional(),
    "repeatability-first-sent": z.string().optional(),
    "if-match": z.string().optional(),
    "if-none-match": z.string().optional(),
    "if-unmodified-since": z.string().optional(),
    "if-modified-since": z.string().optional(),
    "x-ms-client-request-id": s_Azure_Core_uuid.optional(),
  })

  const widgetsCreateOrUpdateWidgetBodySchema = s_WidgetCreateOrUpdate

  router.patch(
    "widgetsCreateOrUpdateWidget",
    "/widgets/:widgetName",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          widgetsCreateOrUpdateWidgetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          widgetsCreateOrUpdateWidgetQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: parseRequestInput(
          widgetsCreateOrUpdateWidgetBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: parseRequestInput(
          widgetsCreateOrUpdateWidgetHeaderSchema,
          Reflect.get(ctx.request, "headers"),
          RequestInputType.RequestHeader,
        ),
      }

      const response = await implementation
        .widgetsCreateOrUpdateWidget(
          input,
          widgetsCreateOrUpdateWidget.responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = widgetsCreateOrUpdateWidget.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const widgetsGetWidgetParamSchema = z.object({ widgetName: z.string() })

  const widgetsGetWidgetQuerySchema = z.object({
    "api-version": z.string().min(1),
  })

  const widgetsGetWidgetHeaderSchema = z.object({
    "if-match": z.string().optional(),
    "if-none-match": z.string().optional(),
    "if-unmodified-since": z.string().optional(),
    "if-modified-since": z.string().optional(),
    "x-ms-client-request-id": s_Azure_Core_uuid.optional(),
  })

  router.get("widgetsGetWidget", "/widgets/:widgetName", async (ctx, next) => {
    const input = {
      params: parseRequestInput(
        widgetsGetWidgetParamSchema,
        ctx.params,
        RequestInputType.RouteParam,
      ),
      query: parseRequestInput(
        widgetsGetWidgetQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: parseRequestInput(
        widgetsGetWidgetHeaderSchema,
        Reflect.get(ctx.request, "headers"),
        RequestInputType.RequestHeader,
      ),
    }

    const response = await implementation
      .widgetsGetWidget(input, widgetsGetWidget.responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = widgetsGetWidget.validator(status, body)
    ctx.status = status
    return next()
  })

  const widgetsDeleteWidgetParamSchema = z.object({ widgetName: z.string() })

  const widgetsDeleteWidgetQuerySchema = z.object({
    "api-version": z.string().min(1),
  })

  const widgetsDeleteWidgetHeaderSchema = z.object({
    "repeatability-request-id": z.string().optional(),
    "repeatability-first-sent": z.string().optional(),
    "if-match": z.string().optional(),
    "if-none-match": z.string().optional(),
    "if-unmodified-since": z.string().optional(),
    "if-modified-since": z.string().optional(),
    "x-ms-client-request-id": s_Azure_Core_uuid.optional(),
  })

  router.delete(
    "widgetsDeleteWidget",
    "/widgets/:widgetName",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          widgetsDeleteWidgetParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          widgetsDeleteWidgetQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: parseRequestInput(
          widgetsDeleteWidgetHeaderSchema,
          Reflect.get(ctx.request, "headers"),
          RequestInputType.RequestHeader,
        ),
      }

      const response = await implementation
        .widgetsDeleteWidget(input, widgetsDeleteWidget.responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = widgetsDeleteWidget.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const widgetsListWidgetsQuerySchema = z.object({
    "api-version": z.string().min(1),
    top: z.coerce.number().optional(),
    skip: z.coerce.number().optional().default(0),
    maxpagesize: z.coerce.number().optional(),
    select: z
      .preprocess(
        (it: unknown) => (Array.isArray(it) || it === undefined ? it : [it]),
        z.array(z.string()),
      )
      .optional(),
  })

  const widgetsListWidgetsHeaderSchema = z.object({
    "x-ms-client-request-id": s_Azure_Core_uuid.optional(),
  })

  router.get("widgetsListWidgets", "/widgets", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(
        widgetsListWidgetsQuerySchema,
        ctx.query,
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: parseRequestInput(
        widgetsListWidgetsHeaderSchema,
        Reflect.get(ctx.request, "headers"),
        RequestInputType.RequestHeader,
      ),
    }

    const response = await implementation
      .widgetsListWidgets(input, widgetsListWidgets.responder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = widgetsListWidgets.validator(status, body)
    ctx.status = status
    return next()
  })

  const widgetsGetAnalyticsParamSchema = z.object({ widgetName: z.string() })

  const widgetsGetAnalyticsQuerySchema = z.object({
    "api-version": z.string().min(1),
  })

  const widgetsGetAnalyticsHeaderSchema = z.object({
    "if-match": z.string().optional(),
    "if-none-match": z.string().optional(),
    "if-unmodified-since": z.string().optional(),
    "if-modified-since": z.string().optional(),
    "x-ms-client-request-id": s_Azure_Core_uuid.optional(),
  })

  router.get(
    "widgetsGetAnalytics",
    "/widgets/:widgetName/analytics/current",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          widgetsGetAnalyticsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          widgetsGetAnalyticsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: parseRequestInput(
          widgetsGetAnalyticsHeaderSchema,
          Reflect.get(ctx.request, "headers"),
          RequestInputType.RequestHeader,
        ),
      }

      const response = await implementation
        .widgetsGetAnalytics(input, widgetsGetAnalytics.responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = widgetsGetAnalytics.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const widgetsUpdateAnalyticsParamSchema = z.object({ widgetName: z.string() })

  const widgetsUpdateAnalyticsQuerySchema = z.object({
    "api-version": z.string().min(1),
  })

  const widgetsUpdateAnalyticsHeaderSchema = z.object({
    "repeatability-request-id": z.string().optional(),
    "repeatability-first-sent": z.string().optional(),
    "if-match": z.string().optional(),
    "if-none-match": z.string().optional(),
    "if-unmodified-since": z.string().optional(),
    "if-modified-since": z.string().optional(),
    "x-ms-client-request-id": s_Azure_Core_uuid.optional(),
  })

  const widgetsUpdateAnalyticsBodySchema = s_WidgetAnalyticsCreateOrUpdate

  router.patch(
    "widgetsUpdateAnalytics",
    "/widgets/:widgetName/analytics/current",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          widgetsUpdateAnalyticsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          widgetsUpdateAnalyticsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: parseRequestInput(
          widgetsUpdateAnalyticsBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: parseRequestInput(
          widgetsUpdateAnalyticsHeaderSchema,
          Reflect.get(ctx.request, "headers"),
          RequestInputType.RequestHeader,
        ),
      }

      const response = await implementation
        .widgetsUpdateAnalytics(input, widgetsUpdateAnalytics.responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = widgetsUpdateAnalytics.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const widgetsGetRepairStatusParamSchema = z.object({
    widgetId: z.string(),
    operationId: z.string(),
  })

  const widgetsGetRepairStatusQuerySchema = z.object({
    "api-version": z.string().min(1),
  })

  router.get(
    "widgetsGetRepairStatus",
    "/widgets/:widgetId/repairs/:operationId",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          widgetsGetRepairStatusParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          widgetsGetRepairStatusQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .widgetsGetRepairStatus(input, widgetsGetRepairStatus.responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = widgetsGetRepairStatus.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const widgetsScheduleRepairsParamSchema = z.object({ widgetName: z.string() })

  const widgetsScheduleRepairsQuerySchema = z.object({
    "api-version": z.string().min(1),
  })

  const widgetsScheduleRepairsHeaderSchema = z.object({
    "repeatability-request-id": z.string().optional(),
    "repeatability-first-sent": z.string().optional(),
    "x-ms-client-request-id": s_Azure_Core_uuid.optional(),
  })

  const widgetsScheduleRepairsBodySchema = s_WidgetRepairRequest

  router.post(
    "widgetsScheduleRepairs",
    "/widgets/:widgetName:scheduleRepairs",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          widgetsScheduleRepairsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          widgetsScheduleRepairsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: parseRequestInput(
          widgetsScheduleRepairsBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: parseRequestInput(
          widgetsScheduleRepairsHeaderSchema,
          Reflect.get(ctx.request, "headers"),
          RequestInputType.RequestHeader,
        ),
      }

      const response = await implementation
        .widgetsScheduleRepairs(input, widgetsScheduleRepairs.responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = widgetsScheduleRepairs.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const widgetPartsGetWidgetPartOperationStatusParamSchema = z.object({
    widgetName: z.string(),
    widgetPartName: z.string(),
    operationId: z.string(),
  })

  const widgetPartsGetWidgetPartOperationStatusQuerySchema = z.object({
    "api-version": z.string().min(1),
  })

  router.get(
    "widgetPartsGetWidgetPartOperationStatus",
    "/widgets/:widgetName/parts/:widgetPartName/operations/:operationId",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          widgetPartsGetWidgetPartOperationStatusParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          widgetPartsGetWidgetPartOperationStatusQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .widgetPartsGetWidgetPartOperationStatus(
          input,
          widgetPartsGetWidgetPartOperationStatus.responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = widgetPartsGetWidgetPartOperationStatus.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const widgetPartsCreateWidgetPartParamSchema = z.object({
    widgetName: z.string(),
  })

  const widgetPartsCreateWidgetPartQuerySchema = z.object({
    "api-version": z.string().min(1),
  })

  const widgetPartsCreateWidgetPartHeaderSchema = z.object({
    "repeatability-request-id": z.string().optional(),
    "repeatability-first-sent": z.string().optional(),
    "if-match": z.string().optional(),
    "if-none-match": z.string().optional(),
    "if-unmodified-since": z.string().optional(),
    "if-modified-since": z.string().optional(),
    "x-ms-client-request-id": s_Azure_Core_uuid.optional(),
  })

  const widgetPartsCreateWidgetPartBodySchema = s_WidgetPart

  router.post(
    "widgetPartsCreateWidgetPart",
    "/widgets/:widgetName/parts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          widgetPartsCreateWidgetPartParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          widgetPartsCreateWidgetPartQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: parseRequestInput(
          widgetPartsCreateWidgetPartBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: parseRequestInput(
          widgetPartsCreateWidgetPartHeaderSchema,
          Reflect.get(ctx.request, "headers"),
          RequestInputType.RequestHeader,
        ),
      }

      const response = await implementation
        .widgetPartsCreateWidgetPart(
          input,
          widgetPartsCreateWidgetPart.responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = widgetPartsCreateWidgetPart.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const widgetPartsListWidgetPartsParamSchema = z.object({
    widgetName: z.string(),
  })

  const widgetPartsListWidgetPartsQuerySchema = z.object({
    "api-version": z.string().min(1),
  })

  const widgetPartsListWidgetPartsHeaderSchema = z.object({
    "x-ms-client-request-id": s_Azure_Core_uuid.optional(),
  })

  router.get(
    "widgetPartsListWidgetParts",
    "/widgets/:widgetName/parts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          widgetPartsListWidgetPartsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          widgetPartsListWidgetPartsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: parseRequestInput(
          widgetPartsListWidgetPartsHeaderSchema,
          Reflect.get(ctx.request, "headers"),
          RequestInputType.RequestHeader,
        ),
      }

      const response = await implementation
        .widgetPartsListWidgetParts(
          input,
          widgetPartsListWidgetParts.responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = widgetPartsListWidgetParts.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const widgetPartsGetWidgetPartParamSchema = z.object({
    widgetName: z.string(),
    widgetPartName: z.string(),
  })

  const widgetPartsGetWidgetPartQuerySchema = z.object({
    "api-version": z.string().min(1),
  })

  const widgetPartsGetWidgetPartHeaderSchema = z.object({
    "if-match": z.string().optional(),
    "if-none-match": z.string().optional(),
    "if-unmodified-since": z.string().optional(),
    "if-modified-since": z.string().optional(),
    "x-ms-client-request-id": s_Azure_Core_uuid.optional(),
  })

  router.get(
    "widgetPartsGetWidgetPart",
    "/widgets/:widgetName/parts/:widgetPartName",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          widgetPartsGetWidgetPartParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          widgetPartsGetWidgetPartQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: parseRequestInput(
          widgetPartsGetWidgetPartHeaderSchema,
          Reflect.get(ctx.request, "headers"),
          RequestInputType.RequestHeader,
        ),
      }

      const response = await implementation
        .widgetPartsGetWidgetPart(
          input,
          widgetPartsGetWidgetPart.responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = widgetPartsGetWidgetPart.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const widgetPartsDeleteWidgetPartParamSchema = z.object({
    widgetName: z.string(),
    widgetPartName: z.string(),
  })

  const widgetPartsDeleteWidgetPartQuerySchema = z.object({
    "api-version": z.string().min(1),
  })

  const widgetPartsDeleteWidgetPartHeaderSchema = z.object({
    "repeatability-request-id": z.string().optional(),
    "repeatability-first-sent": z.string().optional(),
    "if-match": z.string().optional(),
    "if-none-match": z.string().optional(),
    "if-unmodified-since": z.string().optional(),
    "if-modified-since": z.string().optional(),
    "x-ms-client-request-id": s_Azure_Core_uuid.optional(),
  })

  router.delete(
    "widgetPartsDeleteWidgetPart",
    "/widgets/:widgetName/parts/:widgetPartName",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          widgetPartsDeleteWidgetPartParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          widgetPartsDeleteWidgetPartQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: parseRequestInput(
          widgetPartsDeleteWidgetPartHeaderSchema,
          Reflect.get(ctx.request, "headers"),
          RequestInputType.RequestHeader,
        ),
      }

      const response = await implementation
        .widgetPartsDeleteWidgetPart(
          input,
          widgetPartsDeleteWidgetPart.responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = widgetPartsDeleteWidgetPart.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const widgetPartsReorderPartsParamSchema = z.object({
    widgetName: z.string(),
  })

  const widgetPartsReorderPartsQuerySchema = z.object({
    "api-version": z.string().min(1),
  })

  const widgetPartsReorderPartsHeaderSchema = z.object({
    "repeatability-request-id": z.string().optional(),
    "repeatability-first-sent": z.string().optional(),
    "x-ms-client-request-id": s_Azure_Core_uuid.optional(),
  })

  const widgetPartsReorderPartsBodySchema = s_WidgetPartReorderRequest

  router.post(
    "widgetPartsReorderParts",
    "/widgets/:widgetName/parts:reorderParts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          widgetPartsReorderPartsParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          widgetPartsReorderPartsQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: parseRequestInput(
          widgetPartsReorderPartsBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: parseRequestInput(
          widgetPartsReorderPartsHeaderSchema,
          Reflect.get(ctx.request, "headers"),
          RequestInputType.RequestHeader,
        ),
      }

      const response = await implementation
        .widgetPartsReorderParts(input, widgetPartsReorderParts.responder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = widgetPartsReorderParts.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const manufacturersGetManufacturerOperationStatusParamSchema = z.object({
    manufacturerId: z.string(),
    operationId: z.string(),
  })

  const manufacturersGetManufacturerOperationStatusQuerySchema = z.object({
    "api-version": z.string().min(1),
  })

  router.get(
    "manufacturersGetManufacturerOperationStatus",
    "/manufacturers/:manufacturerId/operations/:operationId",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          manufacturersGetManufacturerOperationStatusParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          manufacturersGetManufacturerOperationStatusQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .manufacturersGetManufacturerOperationStatus(
          input,
          manufacturersGetManufacturerOperationStatus.responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = manufacturersGetManufacturerOperationStatus.validator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const manufacturersCreateOrReplaceManufacturerParamSchema = z.object({
    manufacturerId: z.string(),
  })

  const manufacturersCreateOrReplaceManufacturerQuerySchema = z.object({
    "api-version": z.string().min(1),
  })

  const manufacturersCreateOrReplaceManufacturerHeaderSchema = z.object({
    "repeatability-request-id": z.string().optional(),
    "repeatability-first-sent": z.string().optional(),
    "if-match": z.string().optional(),
    "if-none-match": z.string().optional(),
    "if-unmodified-since": z.string().optional(),
    "if-modified-since": z.string().optional(),
    "x-ms-client-request-id": s_Azure_Core_uuid.optional(),
  })

  const manufacturersCreateOrReplaceManufacturerBodySchema = s_Manufacturer

  router.put(
    "manufacturersCreateOrReplaceManufacturer",
    "/manufacturers/:manufacturerId",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          manufacturersCreateOrReplaceManufacturerParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          manufacturersCreateOrReplaceManufacturerQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: parseRequestInput(
          manufacturersCreateOrReplaceManufacturerBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: parseRequestInput(
          manufacturersCreateOrReplaceManufacturerHeaderSchema,
          Reflect.get(ctx.request, "headers"),
          RequestInputType.RequestHeader,
        ),
      }

      const response = await implementation
        .manufacturersCreateOrReplaceManufacturer(
          input,
          manufacturersCreateOrReplaceManufacturer.responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = manufacturersCreateOrReplaceManufacturer.validator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const manufacturersGetManufacturerParamSchema = z.object({
    manufacturerId: z.string(),
  })

  const manufacturersGetManufacturerQuerySchema = z.object({
    "api-version": z.string().min(1),
  })

  const manufacturersGetManufacturerHeaderSchema = z.object({
    "if-match": z.string().optional(),
    "if-none-match": z.string().optional(),
    "if-unmodified-since": z.string().optional(),
    "if-modified-since": z.string().optional(),
    "x-ms-client-request-id": s_Azure_Core_uuid.optional(),
  })

  router.get(
    "manufacturersGetManufacturer",
    "/manufacturers/:manufacturerId",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          manufacturersGetManufacturerParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          manufacturersGetManufacturerQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: parseRequestInput(
          manufacturersGetManufacturerHeaderSchema,
          Reflect.get(ctx.request, "headers"),
          RequestInputType.RequestHeader,
        ),
      }

      const response = await implementation
        .manufacturersGetManufacturer(
          input,
          manufacturersGetManufacturer.responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = manufacturersGetManufacturer.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const manufacturersDeleteManufacturerParamSchema = z.object({
    manufacturerId: z.string(),
  })

  const manufacturersDeleteManufacturerQuerySchema = z.object({
    "api-version": z.string().min(1),
  })

  const manufacturersDeleteManufacturerHeaderSchema = z.object({
    "repeatability-request-id": z.string().optional(),
    "repeatability-first-sent": z.string().optional(),
    "if-match": z.string().optional(),
    "if-none-match": z.string().optional(),
    "if-unmodified-since": z.string().optional(),
    "if-modified-since": z.string().optional(),
    "x-ms-client-request-id": s_Azure_Core_uuid.optional(),
  })

  router.delete(
    "manufacturersDeleteManufacturer",
    "/manufacturers/:manufacturerId",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          manufacturersDeleteManufacturerParamSchema,
          ctx.params,
          RequestInputType.RouteParam,
        ),
        query: parseRequestInput(
          manufacturersDeleteManufacturerQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: parseRequestInput(
          manufacturersDeleteManufacturerHeaderSchema,
          Reflect.get(ctx.request, "headers"),
          RequestInputType.RequestHeader,
        ),
      }

      const response = await implementation
        .manufacturersDeleteManufacturer(
          input,
          manufacturersDeleteManufacturer.responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = manufacturersDeleteManufacturer.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  const manufacturersListManufacturersQuerySchema = z.object({
    "api-version": z.string().min(1),
  })

  const manufacturersListManufacturersHeaderSchema = z.object({
    "x-ms-client-request-id": s_Azure_Core_uuid.optional(),
  })

  router.get(
    "manufacturersListManufacturers",
    "/manufacturers",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          manufacturersListManufacturersQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: parseRequestInput(
          manufacturersListManufacturersHeaderSchema,
          Reflect.get(ctx.request, "headers"),
          RequestInputType.RequestHeader,
        ),
      }

      const response = await implementation
        .manufacturersListManufacturers(
          input,
          manufacturersListManufacturers.responder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = manufacturersListManufacturers.validator(status, body)
      ctx.status = status
      return next()
    },
  )

  return router
}

export async function bootstrap(config: ServerConfig) {
  // Contoso Widget Manager
  return startServer(config)
}
