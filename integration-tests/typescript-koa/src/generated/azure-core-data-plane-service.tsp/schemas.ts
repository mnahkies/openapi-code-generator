/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_Azure_Core_Foundations_Error,
  t_Azure_Core_Foundations_ErrorResponse,
  t_Azure_Core_Foundations_InnerError,
} from "./models"
import {z} from "zod/v4"

export const s_Azure_Core_Foundations_OperationState = z.union([
  z.enum(["NotStarted", "Running", "Succeeded", "Failed", "Canceled"]),
  z.string(),
])

export const s_Azure_Core_eTag = z.string()

export const s_Azure_Core_uuid = z.string()

export const s_WidgetAnalytics = z.object({
  id: z.enum(["current"]),
  useCount: z.coerce.number(),
  repairCount: z.coerce.number(),
})

export const s_WidgetAnalyticsCreateOrUpdate = z.object({
  useCount: z.coerce.number().optional(),
  repairCount: z.coerce.number().optional(),
})

export const s_WidgetColor = z.union([
  z.string(),
  z.enum(["Black", "White", "Red", "Green", "Blue"]),
])

export const s_WidgetPartReorderRequest = z.object({signedOffBy: z.string()})

export const s_WidgetRepairState = z.union([
  z.string(),
  z.enum(["Succeeded", "Failed", "Canceled", "SentToManufacturer"]),
])

export const s_Manufacturer = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string(),
  etag: s_Azure_Core_eTag,
})

export const s_Widget = z.object({
  name: z.string(),
  color: s_WidgetColor,
  manufacturerId: z.string(),
  etag: s_Azure_Core_eTag,
})

export const s_WidgetCreateOrUpdate = z.object({
  color: s_WidgetColor.optional(),
  manufacturerId: z.string().optional(),
})

export const s_WidgetPart = z.object({
  name: z.string(),
  partId: z.string(),
  manufacturerId: z.string(),
  etag: s_Azure_Core_eTag,
})

export const s_WidgetRepairRequest = z.object({
  requestState: s_WidgetRepairState,
  scheduledDateTime: z.iso.datetime({offset: true}),
  createdDateTime: z.iso.datetime({offset: true}),
  updatedDateTime: z.iso.datetime({offset: true}),
  completedDateTime: z.iso.datetime({offset: true}),
})

export const s_PagedManufacturer = z.object({
  value: z.array(s_Manufacturer),
  nextLink: z.string().optional(),
})

export const s_PagedWidget = z.object({
  value: z.array(s_Widget),
  nextLink: z.string().optional(),
})

export const s_PagedWidgetPart = z.object({
  value: z.array(s_WidgetPart),
  nextLink: z.string().optional(),
})

export const s_Azure_Core_Foundations_ErrorResponse: z.ZodType<t_Azure_Core_Foundations_ErrorResponse> =
  z.object({error: z.lazy(() => s_Azure_Core_Foundations_Error)})

export const s_Azure_Core_Foundations_Error: z.ZodType<t_Azure_Core_Foundations_Error> =
  z.object({
    code: z.string(),
    message: z.string(),
    target: z.string().optional(),
    details: z.array(z.lazy(() => s_Azure_Core_Foundations_Error)).optional(),
    innererror: z.lazy(() => s_Azure_Core_Foundations_InnerError.optional()),
  })

export const s_Azure_Core_Foundations_InnerError: z.ZodType<t_Azure_Core_Foundations_InnerError> =
  z.object({
    code: z.string().optional(),
    innererror: z.lazy(() => s_Azure_Core_Foundations_InnerError.optional()),
  })
