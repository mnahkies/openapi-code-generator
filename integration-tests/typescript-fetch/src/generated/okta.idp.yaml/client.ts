/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import type {
  EmptyObject,
  UnknownEnumStringValue,
  t_AppAuthenticatorEnrollment,
  t_AppAuthenticatorEnrollmentRequest,
  t_Authenticator,
  t_AuthenticatorEnrollment,
  t_Email,
  t_Error,
  t_OktaApplication,
  t_Organization,
  t_PasswordResponse,
  t_Phone,
  t_Profile,
  t_PushNotificationChallenge,
  t_PushNotificationVerification,
  t_Schema,
  t_UpdateAppAuthenticatorEnrollmentRequest,
  t_UpdateAuthenticatorEnrollmentRequest,
} from "./models"
import {
  AbstractFetchClient,
  type AbstractFetchClientConfig,
  type Res,
  type Server,
} from "@nahkies/typescript-fetch-runtime/main"

export class MyAccountManagementServers {
  static default(): Server<"MyAccountManagement"> {
    return MyAccountManagementServers.server().build()
  }

  static server(url: "https://{yourOktaDomain}" = "https://{yourOktaDomain}"): {
    build: (yourOktaDomain?: string) => Server<"MyAccountManagement">
  } {
    switch (url) {
      case "https://{yourOktaDomain}":
        return {
          build(
            yourOktaDomain = "subdomain.okta.com",
          ): Server<"MyAccountManagement"> {
            return "https://{yourOktaDomain}".replace(
              "{yourOktaDomain}",
              yourOktaDomain,
            ) as Server<"MyAccountManagement">
          },
        }

      default:
        throw new Error(`no matching server for url '${url}'`)
    }
  }
}

export interface MyAccountManagementConfig extends AbstractFetchClientConfig {
  basePath: Server<"MyAccountManagement"> | string
}

export class MyAccountManagement extends AbstractFetchClient {
  constructor(config: MyAccountManagementConfig) {
    super(config)
  }

  async createAppAuthenticatorEnrollment(
    p: {
      requestBody: t_AppAuthenticatorEnrollmentRequest
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<200, t_AppAuthenticatorEnrollment>
    | Res<400, t_Error>
    | Res<401, t_Error>
    | Res<403, t_Error>
    | Res<404, t_Error>
  > {
    const url = this.basePath + `/idp/myaccount/app-authenticators`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/json, okta-version=1.0.0",
      },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async verifyAppAuthenticatorPushNotificationChallenge(
    p: {
      challengeId: string
      requestBody: t_PushNotificationVerification
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, void> | Res<204, void> | Res<400, void>> {
    const url =
      this.basePath +
      `/idp/myaccount/app-authenticators/challenge/${p["challengeId"]}/verify`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/json;okta-version=1.0.0",
      },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async updateAppAuthenticatorEnrollment(
    p: {
      enrollmentId: string
      requestBody: t_UpdateAppAuthenticatorEnrollmentRequest
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<200, t_AppAuthenticatorEnrollment>
    | Res<401, t_Error>
    | Res<403, t_Error>
    | Res<404, t_Error>
  > {
    const url =
      this.basePath + `/idp/myaccount/app-authenticators/${p["enrollmentId"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/merge-patch+json;okta-version=1.0.0",
      },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._fetch(url, {method: "PATCH", body, ...opts, headers}, timeout)
  }

  async deleteAppAuthenticatorEnrollment(
    p: {
      enrollmentId: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<204, void> | Res<401, t_Error> | Res<403, t_Error> | Res<404, t_Error>
  > {
    const url =
      this.basePath + `/idp/myaccount/app-authenticators/${p["enrollmentId"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async listAppAuthenticatorPendingPushNotificationChallenges(
    p: {
      enrollmentId: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_PushNotificationChallenge[]> | Res<401, t_Error>> {
    const url =
      this.basePath +
      `/idp/myaccount/app-authenticators/${p["enrollmentId"]}/push/notifications`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "GET", ...opts, headers}, timeout)
  }

  async listAuthenticators(
    p: {
      expand?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_Authenticator[]> | Res<403, t_Error> | Res<429, t_Error>
  > {
    const url = this.basePath + `/idp/myaccount/authenticators`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getAuthenticator(
    p: {
      authenticatorId: string
      expand?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<200, t_Authenticator>
    | Res<403, t_Error>
    | Res<404, t_Error>
    | Res<429, t_Error>
  > {
    const url =
      this.basePath + `/idp/myaccount/authenticators/${p["authenticatorId"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async listEnrollments(
    p: {
      authenticatorId: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<200, t_AuthenticatorEnrollment[]>
    | Res<403, t_Error>
    | Res<404, t_Error>
    | Res<429, t_Error>
  > {
    const url =
      this.basePath +
      `/idp/myaccount/authenticators/${p["authenticatorId"]}/enrollments`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "GET", ...opts, headers}, timeout)
  }

  async getEnrollment(
    p: {
      authenticatorId: string
      enrollmentId: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<200, t_AuthenticatorEnrollment>
    | Res<403, t_Error>
    | Res<404, t_Error>
    | Res<429, t_Error>
  > {
    const url =
      this.basePath +
      `/idp/myaccount/authenticators/${p["authenticatorId"]}/enrollments/${p["enrollmentId"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "GET", ...opts, headers}, timeout)
  }

  async updateEnrollment(
    p: {
      authenticatorId: string
      enrollmentId: string
      requestBody: t_UpdateAuthenticatorEnrollmentRequest
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<200, t_AuthenticatorEnrollment>
    | Res<401, t_Error>
    | Res<403, t_Error>
    | Res<404, t_Error>
  > {
    const url =
      this.basePath +
      `/idp/myaccount/authenticators/${p["authenticatorId"]}/enrollments/${p["enrollmentId"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/merge-patch+json;okta-version=1.0.0",
      },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._fetch(url, {method: "PATCH", body, ...opts, headers}, timeout)
  }

  async listEmails(
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_Email[]> | Res<401, t_Error>> {
    const url = this.basePath + `/idp/myaccount/emails`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "GET", ...opts, headers}, timeout)
  }

  async createEmail(
    p: {
      requestBody: {
        profile: {
          email: string
        }
        role?: "PRIMARY" | "SECONDARY" | UnknownEnumStringValue
        sendEmail?: boolean
        state?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<201, t_Email>
    | Res<400, t_Error>
    | Res<401, t_Error>
    | Res<403, t_Error>
    | Res<409, t_Error>
  > {
    const url = this.basePath + `/idp/myaccount/emails`
    const headers = this._headers(
      {Accept: "application/json", "Content-Type": "application/json"},
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getEmail(
    p: {
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_Email> | Res<401, t_Error>> {
    const url = this.basePath + `/idp/myaccount/emails/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "GET", ...opts, headers}, timeout)
  }

  async deleteEmail(
    p: {
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<204, void> | Res<400, t_Error> | Res<401, t_Error> | Res<404, t_Error>
  > {
    const url = this.basePath + `/idp/myaccount/emails/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async sendEmailChallenge(
    p: {
      id: string
      requestBody: {
        state: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        201,
        {
          _links: {
            poll: {
              hints: {
                allow: ("GET" | UnknownEnumStringValue)[]
              }
              href: string
            }
            verify: {
              hints: {
                allow: ("POST" | UnknownEnumStringValue)[]
              }
              href: string
            }
          }
          expiresAt: string
          id: string
          profile: {
            email: string
          }
          status: "VERIFIED" | "UNVERIFIED" | UnknownEnumStringValue
        }
      >
    | Res<401, t_Error>
    | Res<403, t_Error>
    | Res<404, t_Error>
  > {
    const url = this.basePath + `/idp/myaccount/emails/${p["id"]}/challenge`
    const headers = this._headers(
      {Accept: "application/json", "Content-Type": "application/json"},
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async pollChallengeForEmailMagicLink(
    p: {
      id: string
      challengeId: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          _links: {
            poll: {
              hints: {
                allow: (
                  | "DELETE"
                  | "GET"
                  | "POST"
                  | "PUT"
                  | UnknownEnumStringValue
                )[]
              }
              href: string
            }
            verify: {
              hints: {
                allow: (
                  | "DELETE"
                  | "GET"
                  | "POST"
                  | "PUT"
                  | UnknownEnumStringValue
                )[]
              }
              href: string
            }
          }
          expiresAt: string
          id: string
          profile: {
            email: string
          }
          status: "VERIFIED" | "UNVERIFIED" | UnknownEnumStringValue
        }
      >
    | Res<401, t_Error>
    | Res<404, t_Error>
  > {
    const url =
      this.basePath +
      `/idp/myaccount/emails/${p["id"]}/challenge/${p["challengeId"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "GET", ...opts, headers}, timeout)
  }

  async verifyEmailOtp(
    p: {
      id: string
      challengeId: string
      requestBody: {
        verificationCode: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, void> | Res<401, t_Error> | Res<403, t_Error> | Res<404, t_Error>
  > {
    const url =
      this.basePath +
      `/idp/myaccount/emails/${p["id"]}/challenge/${p["challengeId"]}/verify`
    const headers = this._headers(
      {Accept: "application/json", "Content-Type": "application/json"},
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async listOktaApplications(
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_OktaApplication[]> | Res<400, t_Error>> {
    const url = this.basePath + `/idp/myaccount/okta-applications`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "GET", ...opts, headers}, timeout)
  }

  async getOrganization(
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_Organization> | Res<401, t_Error>> {
    const url = this.basePath + `/idp/myaccount/organization`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "GET", ...opts, headers}, timeout)
  }

  async getPassword(
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_PasswordResponse> | Res<401, t_Error>> {
    const url = this.basePath + `/idp/myaccount/password`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "GET", ...opts, headers}, timeout)
  }

  async createPassword(
    p: {
      requestBody: {
        profile: {
          password: string
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<201, t_PasswordResponse>
    | Res<400, t_Error>
    | Res<401, t_Error>
    | Res<403, t_Error>
  > {
    const url = this.basePath + `/idp/myaccount/password`
    const headers = this._headers(
      {Accept: "application/json", "Content-Type": "application/json"},
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async replacePassword(
    p: {
      requestBody: {
        profile: {
          password: string
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<201, t_PasswordResponse>
    | Res<400, t_Error>
    | Res<401, t_Error>
    | Res<403, t_Error>
  > {
    const url = this.basePath + `/idp/myaccount/password`
    const headers = this._headers(
      {Accept: "application/json", "Content-Type": "application/json"},
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._fetch(url, {method: "PUT", body, ...opts, headers}, timeout)
  }

  async deletePassword(
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<204, void> | Res<401, t_Error> | Res<404, t_Error>> {
    const url = this.basePath + `/idp/myaccount/password`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async listPhones(
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_Phone[]> | Res<401, t_Error>> {
    const url = this.basePath + `/idp/myaccount/phones`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "GET", ...opts, headers}, timeout)
  }

  async createPhone(
    p: {
      requestBody: {
        method?: "SMS" | "CALL" | UnknownEnumStringValue
        profile: {
          phoneNumber?: string
        }
        sendCode?: boolean
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<201, t_Phone>
    | Res<400, t_Error>
    | Res<401, t_Error>
    | Res<403, t_Error>
    | Res<409, t_Error>
    | Res<500, t_Error>
  > {
    const url = this.basePath + `/idp/myaccount/phones`
    const headers = this._headers(
      {Accept: "application/json", "Content-Type": "application/json"},
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getPhone(
    p: {
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_Phone> | Res<401, t_Error> | Res<404, t_Error>> {
    const url = this.basePath + `/idp/myaccount/phones/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "GET", ...opts, headers}, timeout)
  }

  async deletePhone(
    p: {
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<204, void> | Res<401, t_Error> | Res<403, t_Error> | Res<404, t_Error>
  > {
    const url = this.basePath + `/idp/myaccount/phones/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async sendPhoneChallenge(
    p: {
      id: string
      requestBody: {
        method: "SMS" | "CALL" | UnknownEnumStringValue
        retry?: boolean
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          _links?: {
            verify?: {
              hints: {
                allow: ("GET" | UnknownEnumStringValue)[]
              }
              href: string
            }
          }
        }
      >
    | Res<400, t_Error>
    | Res<401, t_Error>
    | Res<403, t_Error>
    | Res<404, t_Error>
    | Res<500, t_Error>
  > {
    const url = this.basePath + `/idp/myaccount/phones/${p["id"]}/challenge`
    const headers = this._headers(
      {Accept: "application/json", "Content-Type": "application/json"},
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async verifyPhoneChallenge(
    p: {
      id: string
      requestBody: {
        verificationCode: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<204, void>
    | Res<400, t_Error>
    | Res<401, t_Error>
    | Res<403, t_Error>
    | Res<404, t_Error>
    | Res<409, t_Error>
  > {
    const url = this.basePath + `/idp/myaccount/phones/${p["id"]}/verify`
    const headers = this._headers(
      {Accept: "application/json", "Content-Type": "application/json"},
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getProfile(
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_Profile> | Res<401, t_Error>> {
    const url = this.basePath + `/idp/myaccount/profile`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "GET", ...opts, headers}, timeout)
  }

  async replaceProfile(
    p: {
      requestBody: {
        profile?: EmptyObject
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_Profile> | Res<400, t_Error> | Res<401, t_Error>> {
    const url = this.basePath + `/idp/myaccount/profile`
    const headers = this._headers(
      {Accept: "application/json", "Content-Type": "application/json"},
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._fetch(url, {method: "PUT", body, ...opts, headers}, timeout)
  }

  async getProfileSchema(
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_Schema> | Res<401, t_Error>> {
    const url = this.basePath + `/idp/myaccount/profile/schema`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "GET", ...opts, headers}, timeout)
  }

  async deleteSessions(
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<204, void> | Res<401, t_Error> | Res<404, t_Error>> {
    const url = this.basePath + `/idp/myaccount/sessions`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }
}

export {MyAccountManagement as ApiClient}
export type {MyAccountManagementConfig as ApiClientConfig}
