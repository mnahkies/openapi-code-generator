/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_CreateUpdateTodoList,
  t_Error,
  t_Statuses,
  t_TodoList,
} from "./models"
import {
  AbstractFetchClient,
  AbstractFetchClientConfig,
  Res,
  StatusCode,
  StatusCode4xx,
  StatusCode5xx,
  TypedFetchResponse,
} from "@nahkies/typescript-fetch-runtime/main"

export interface TodoListsExampleApiConfig extends AbstractFetchClientConfig {}

export class TodoListsExampleApi extends AbstractFetchClient {
  constructor(config: TodoListsExampleApiConfig) {
    super(config)
  }

  async getTodoLists(
    p: {
      created?: string
      statuses?: t_Statuses
      tags?: string[]
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<TypedFetchResponse<Res<200, t_TodoList[]>>> {
    const url = this.basePath + `/list`
    const headers = this._headers({}, opts.headers)
    const query = this._query({
      created: p["created"],
      statuses: p["statuses"],
      tags: p["tags"],
    })

    return this._fetch(
      url + query,
      { method: "GET", ...opts, headers },
      timeout,
    )
  }

  async getTodoListById(
    p: {
      listId: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    TypedFetchResponse<
      Res<200, t_TodoList> | Res<StatusCode4xx, t_Error> | Res<StatusCode, void>
    >
  > {
    const url = this.basePath + `/list/${p["listId"]}`
    const headers = this._headers({}, opts.headers)

    return this._fetch(url, { method: "GET", ...opts, headers }, timeout)
  }

  async updateTodoListById(
    p: {
      listId: string
      requestBody: t_CreateUpdateTodoList
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    TypedFetchResponse<
      Res<200, t_TodoList> | Res<StatusCode4xx, t_Error> | Res<StatusCode, void>
    >
  > {
    const url = this.basePath + `/list/${p["listId"]}`
    const headers = this._headers(
      { "Content-Type": "application/json" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._fetch(url, { method: "PUT", body, ...opts, headers }, timeout)
  }

  async deleteTodoListById(
    p: {
      listId: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    TypedFetchResponse<
      Res<204, void> | Res<StatusCode4xx, t_Error> | Res<StatusCode, void>
    >
  > {
    const url = this.basePath + `/list/${p["listId"]}`
    const headers = this._headers({}, opts.headers)

    return this._fetch(url, { method: "DELETE", ...opts, headers }, timeout)
  }

  async getTodoListItems(
    p: {
      listId: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    TypedFetchResponse<
      | Res<
          200,
          {
            completedAt?: string
            content: string
            createdAt: string
            id: string
          }
        >
      | Res<
          StatusCode5xx,
          {
            code: string
            message: string
          }
        >
    >
  > {
    const url = this.basePath + `/list/${p["listId"]}/items`
    const headers = this._headers({}, opts.headers)

    return this._fetch(url, { method: "GET", ...opts, headers }, timeout)
  }

  async createTodoListItem(
    p: {
      listId: string
      requestBody: {
        completedAt?: string
        content: string
        id: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<TypedFetchResponse<Res<204, void>>> {
    const url = this.basePath + `/list/${p["listId"]}/items`
    const headers = this._headers(
      { "Content-Type": "application/json" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._fetch(url, { method: "POST", body, ...opts, headers }, timeout)
  }
}

export { TodoListsExampleApi as ApiClient }
export type { TodoListsExampleApiConfig as ApiClientConfig }
