/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import { t_CreateUpdateTodoList, t_Error, t_TodoList } from "./models"
import {
  AbstractFetchClient,
  AbstractFetchClientConfig,
  Res,
  StatusCode,
  StatusCode2xx,
  StatusCode3xx,
  StatusCode4xx,
  StatusCode5xx,
  TypedFetchResponse,
} from "@nahkies/typescript-fetch-runtime/main"

export interface ApiClientConfig extends AbstractFetchClientConfig {}

export class ApiClient extends AbstractFetchClient {
  constructor(config: ApiClientConfig) {
    super(config)
  }

  async getTodoLists(
    p: {
      created?: string
      status?: "incomplete" | "complete"
    } = {},
    timeout?: number,
    opts?: RequestInit,
  ): Promise<TypedFetchResponse<Res<200, t_TodoList[]>>> {
    const url = this.basePath + `/list`
    const query = this._query({ created: p["created"], status: p["status"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  async getTodoListById(
    p: {
      listId: string
    },
    timeout?: number,
    opts?: RequestInit,
  ): Promise<
    TypedFetchResponse<
      Res<200, t_TodoList> | Res<StatusCode4xx, t_Error> | Res<StatusCode, void>
    >
  > {
    const url = this.basePath + `/list/${p["listId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  async updateTodoListById(
    p: {
      listId: string
      requestBody: t_CreateUpdateTodoList
    },
    timeout?: number,
    opts?: RequestInit,
  ): Promise<
    TypedFetchResponse<
      Res<200, t_TodoList> | Res<StatusCode4xx, t_Error> | Res<StatusCode, void>
    >
  > {
    const url = this.basePath + `/list/${p["listId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout,
    )
  }

  async deleteTodoListById(
    p: {
      listId: string
    },
    timeout?: number,
    opts?: RequestInit,
  ): Promise<
    TypedFetchResponse<
      Res<204, void> | Res<StatusCode4xx, t_Error> | Res<StatusCode, void>
    >
  > {
    const url = this.basePath + `/list/${p["listId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }
}
