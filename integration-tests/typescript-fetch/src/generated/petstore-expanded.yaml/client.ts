/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import { t_Error, t_NewPet, t_Pet } from "./models"
import {
  AbstractFetchClient,
  AbstractFetchClientConfig,
  Res,
  Server,
  StatusCode,
  TypedFetchResponse,
} from "@nahkies/typescript-fetch-runtime/main"

export type SwaggerPetstoreServer = Server<"SwaggerPetstoreServer">

export class SwaggerPetstoreServers {
  static default(): SwaggerPetstoreServer {
    return "https://petstore.swagger.io/v2" as SwaggerPetstoreServer
  }

  static specific(url: "https://petstore.swagger.io/v2") {
    switch (url) {
      case "https://petstore.swagger.io/v2":
        return {
          with(): SwaggerPetstoreServer {
            return "https://petstore.swagger.io/v2" as SwaggerPetstoreServer
          },
        }
    }
  }

  static custom(url: string): SwaggerPetstoreServer {
    return url as SwaggerPetstoreServer
  }
}

export interface SwaggerPetstoreConfig extends AbstractFetchClientConfig {
  basePath: SwaggerPetstoreServer
}

export class SwaggerPetstore extends AbstractFetchClient {
  constructor(config: SwaggerPetstoreConfig) {
    super(config)
  }

  async findPets(
    p: {
      tags?: string[]
      limit?: number
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<TypedFetchResponse<Res<200, t_Pet[]> | Res<StatusCode, t_Error>>> {
    const url = this.basePath + `/pets`
    const headers = this._headers({}, opts.headers)
    const query = this._query({ tags: p["tags"], limit: p["limit"] })

    return this._fetch(
      url + query,
      { method: "GET", ...opts, headers },
      timeout,
    )
  }

  async addPet(
    p: {
      requestBody: t_NewPet
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<TypedFetchResponse<Res<200, t_Pet> | Res<StatusCode, t_Error>>> {
    const url = this.basePath + `/pets`
    const headers = this._headers(
      { "Content-Type": "application/json" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._fetch(url, { method: "POST", body, ...opts, headers }, timeout)
  }

  async findPetById(
    p: {
      id: number
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<TypedFetchResponse<Res<200, t_Pet> | Res<StatusCode, t_Error>>> {
    const url = this.basePath + `/pets/${p["id"]}`
    const headers = this._headers({}, opts.headers)

    return this._fetch(url, { method: "GET", ...opts, headers }, timeout)
  }

  async deletePet(
    p: {
      id: number
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<TypedFetchResponse<Res<204, void> | Res<StatusCode, t_Error>>> {
    const url = this.basePath + `/pets/${p["id"]}`
    const headers = this._headers({}, opts.headers)

    return this._fetch(url, { method: "DELETE", ...opts, headers }, timeout)
  }
}

export { SwaggerPetstore as ApiClient }
export type { SwaggerPetstoreConfig as ApiClientConfig }
