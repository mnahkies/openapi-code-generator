/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_Azure_Core_uuid,
  t_Azure_ResourceManager_CommonTypes_ErrorResponse,
  t_Employee,
  t_EmployeeListResult,
  t_EmployeeUpdate,
  t_MoveRequest,
  t_MoveResponse,
  t_OperationListResult,
} from "./models"
import {
  AbstractFetchClient,
  AbstractFetchClientConfig,
  Res,
  StatusCode,
  TypedFetchResponse,
} from "@nahkies/typescript-fetch-runtime/main"

export interface ApiClientConfig extends AbstractFetchClientConfig {
  basePath: "https://management.azure.com" | string
}

export class ApiClient extends AbstractFetchClient {
  constructor(config: ApiClientConfig) {
    super(config)
  }

  async operationsList(
    p: {
      apiVersion: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    TypedFetchResponse<
      | Res<200, t_OperationListResult>
      | Res<StatusCode, t_Azure_ResourceManager_CommonTypes_ErrorResponse>
    >
  > {
    const url =
      this.basePath + `/providers/Microsoft.ContosoProviderHub/operations`
    const headers = this._headers({}, opts.headers)
    const query = this._query({ "api-version": p["apiVersion"] })

    return this._fetch(
      url + query,
      { method: "GET", ...opts, headers },
      timeout,
    )
  }

  async employeesGet(
    p: {
      apiVersion: string
      subscriptionId: t_Azure_Core_uuid
      resourceGroupName: string
      employeeName: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    TypedFetchResponse<
      | Res<200, t_Employee>
      | Res<StatusCode, t_Azure_ResourceManager_CommonTypes_ErrorResponse>
    >
  > {
    const url =
      this.basePath +
      `/subscriptions/${p["subscriptionId"]}/resourceGroups/${p["resourceGroupName"]}/providers/Microsoft.ContosoProviderHub/employees/${p["employeeName"]}`
    const headers = this._headers({}, opts.headers)
    const query = this._query({ "api-version": p["apiVersion"] })

    return this._fetch(
      url + query,
      { method: "GET", ...opts, headers },
      timeout,
    )
  }

  async employeesCreateOrUpdate(
    p: {
      apiVersion: string
      subscriptionId: t_Azure_Core_uuid
      resourceGroupName: string
      employeeName: string
      requestBody: t_Employee
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    TypedFetchResponse<
      | Res<200, t_Employee>
      | Res<201, t_Employee>
      | Res<StatusCode, t_Azure_ResourceManager_CommonTypes_ErrorResponse>
    >
  > {
    const url =
      this.basePath +
      `/subscriptions/${p["subscriptionId"]}/resourceGroups/${p["resourceGroupName"]}/providers/Microsoft.ContosoProviderHub/employees/${p["employeeName"]}`
    const headers = this._headers(
      { "Content-Type": "application/json" },
      opts.headers,
    )
    const query = this._query({ "api-version": p["apiVersion"] })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url + query,
      { method: "PUT", body, ...opts, headers },
      timeout,
    )
  }

  async employeesUpdate(
    p: {
      apiVersion: string
      subscriptionId: t_Azure_Core_uuid
      resourceGroupName: string
      employeeName: string
      requestBody: t_EmployeeUpdate
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    TypedFetchResponse<
      | Res<200, t_Employee>
      | Res<StatusCode, t_Azure_ResourceManager_CommonTypes_ErrorResponse>
    >
  > {
    const url =
      this.basePath +
      `/subscriptions/${p["subscriptionId"]}/resourceGroups/${p["resourceGroupName"]}/providers/Microsoft.ContosoProviderHub/employees/${p["employeeName"]}`
    const headers = this._headers(
      { "Content-Type": "application/json" },
      opts.headers,
    )
    const query = this._query({ "api-version": p["apiVersion"] })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url + query,
      { method: "PATCH", body, ...opts, headers },
      timeout,
    )
  }

  async employeesDelete(
    p: {
      apiVersion: string
      subscriptionId: t_Azure_Core_uuid
      resourceGroupName: string
      employeeName: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    TypedFetchResponse<
      | Res<202, void>
      | Res<204, void>
      | Res<StatusCode, t_Azure_ResourceManager_CommonTypes_ErrorResponse>
    >
  > {
    const url =
      this.basePath +
      `/subscriptions/${p["subscriptionId"]}/resourceGroups/${p["resourceGroupName"]}/providers/Microsoft.ContosoProviderHub/employees/${p["employeeName"]}`
    const headers = this._headers({}, opts.headers)
    const query = this._query({ "api-version": p["apiVersion"] })

    return this._fetch(
      url + query,
      { method: "DELETE", ...opts, headers },
      timeout,
    )
  }

  async employeesListByResourceGroup(
    p: {
      apiVersion: string
      subscriptionId: t_Azure_Core_uuid
      resourceGroupName: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    TypedFetchResponse<
      | Res<200, t_EmployeeListResult>
      | Res<StatusCode, t_Azure_ResourceManager_CommonTypes_ErrorResponse>
    >
  > {
    const url =
      this.basePath +
      `/subscriptions/${p["subscriptionId"]}/resourceGroups/${p["resourceGroupName"]}/providers/Microsoft.ContosoProviderHub/employees`
    const headers = this._headers({}, opts.headers)
    const query = this._query({ "api-version": p["apiVersion"] })

    return this._fetch(
      url + query,
      { method: "GET", ...opts, headers },
      timeout,
    )
  }

  async employeesListBySubscription(
    p: {
      apiVersion: string
      subscriptionId: t_Azure_Core_uuid
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    TypedFetchResponse<
      | Res<200, t_EmployeeListResult>
      | Res<StatusCode, t_Azure_ResourceManager_CommonTypes_ErrorResponse>
    >
  > {
    const url =
      this.basePath +
      `/subscriptions/${p["subscriptionId"]}/providers/Microsoft.ContosoProviderHub/employees`
    const headers = this._headers({}, opts.headers)
    const query = this._query({ "api-version": p["apiVersion"] })

    return this._fetch(
      url + query,
      { method: "GET", ...opts, headers },
      timeout,
    )
  }

  async employeesMove(
    p: {
      apiVersion: string
      subscriptionId: t_Azure_Core_uuid
      resourceGroupName: string
      employeeName: string
      requestBody: t_MoveRequest
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    TypedFetchResponse<
      | Res<200, t_MoveResponse>
      | Res<StatusCode, t_Azure_ResourceManager_CommonTypes_ErrorResponse>
    >
  > {
    const url =
      this.basePath +
      `/subscriptions/${p["subscriptionId"]}/resourceGroups/${p["resourceGroupName"]}/providers/Microsoft.ContosoProviderHub/employees/${p["employeeName"]}/move`
    const headers = this._headers(
      { "Content-Type": "application/json" },
      opts.headers,
    )
    const query = this._query({ "api-version": p["apiVersion"] })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url + query,
      { method: "POST", body, ...opts, headers },
      timeout,
    )
  }
}
