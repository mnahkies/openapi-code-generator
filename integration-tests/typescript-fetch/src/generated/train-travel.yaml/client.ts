/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_Booking,
  t_BookingPayment,
  t_Links_Booking,
  t_Links_Pagination,
  t_Links_Self,
  t_Problem,
  t_Station,
  t_Trip,
  t_Wrapper_Collection,
} from "./models"
import {
  AbstractFetchClient,
  AbstractFetchClientConfig,
  Res,
  Server,
} from "@nahkies/typescript-fetch-runtime/main"

export class TrainTravelApiServers {
  static default(): Server<"TrainTravelApi"> {
    return TrainTravelApiServers.server().build()
  }

  static server(url?: "https://try.microcks.io/rest/Train+Travel+API/1.0.0"): {
    build: () => Server<"TrainTravelApi">
  }
  static server(url?: "https://api.example.com"): {
    build: () => Server<"TrainTravelApi">
  }
  static server(
    url: string = "https://try.microcks.io/rest/Train+Travel+API/1.0.0",
  ): unknown {
    switch (url) {
      case "https://try.microcks.io/rest/Train+Travel+API/1.0.0":
        return {
          build(): Server<"TrainTravelApi"> {
            return "https://try.microcks.io/rest/Train+Travel+API/1.0.0" as Server<"TrainTravelApi">
          },
        }

      case "https://api.example.com":
        return {
          build(): Server<"TrainTravelApi"> {
            return "https://api.example.com" as Server<"TrainTravelApi">
          },
        }

      default:
        throw new Error(`no matching server for url '${url}'`)
    }
  }
}

export interface TrainTravelApiConfig extends AbstractFetchClientConfig {
  basePath: Server<"TrainTravelApi"> | string
}

export class TrainTravelApi extends AbstractFetchClient {
  constructor(config: TrainTravelApiConfig) {
    super(config)
  }

  async getStations(
    p: {
      page?: number
      limit?: number
      coordinates?: string
      search?: string
      country?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        t_Wrapper_Collection & {
          data?: t_Station[]
        } & {
          links?: t_Links_Self & t_Links_Pagination
        }
      >
    | Res<400, t_Problem>
    | Res<401, t_Problem>
    | Res<403, t_Problem>
    | Res<429, t_Problem>
    | Res<500, t_Problem>
  > {
    const url = this.basePath + `/stations`
    const headers = this._headers({}, opts.headers)
    const query = this._query({
      page: p["page"],
      limit: p["limit"],
      coordinates: p["coordinates"],
      search: p["search"],
      country: p["country"],
    })

    return this._fetch(
      url + query,
      { method: "GET", ...opts, headers },
      timeout,
    )
  }

  async getTrips(
    p: {
      page?: number
      limit?: number
      origin: string
      destination: string
      date: string
      bicycles?: boolean
      dogs?: boolean
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        t_Wrapper_Collection & {
          data?: t_Trip[]
        } & {
          links?: t_Links_Self & t_Links_Pagination
        }
      >
    | Res<400, t_Problem>
    | Res<401, t_Problem>
    | Res<403, t_Problem>
    | Res<429, t_Problem>
    | Res<500, t_Problem>
  > {
    const url = this.basePath + `/trips`
    const headers = this._headers({}, opts.headers)
    const query = this._query({
      page: p["page"],
      limit: p["limit"],
      origin: p["origin"],
      destination: p["destination"],
      date: p["date"],
      bicycles: p["bicycles"],
      dogs: p["dogs"],
    })

    return this._fetch(
      url + query,
      { method: "GET", ...opts, headers },
      timeout,
    )
  }

  async getBookings(
    p: {
      page?: number
      limit?: number
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        t_Wrapper_Collection & {
          data?: t_Booking[]
        } & {
          links?: t_Links_Self & t_Links_Pagination
        }
      >
    | Res<400, t_Problem>
    | Res<401, t_Problem>
    | Res<403, t_Problem>
    | Res<429, t_Problem>
    | Res<500, t_Problem>
  > {
    const url = this.basePath + `/bookings`
    const headers = this._headers({}, opts.headers)
    const query = this._query({ page: p["page"], limit: p["limit"] })

    return this._fetch(
      url + query,
      { method: "GET", ...opts, headers },
      timeout,
    )
  }

  async createBooking(
    p: {
      requestBody: t_Booking
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        201,
        t_Booking & {
          links?: t_Links_Self
        }
      >
    | Res<400, t_Problem>
    | Res<401, t_Problem>
    | Res<404, t_Problem>
    | Res<409, t_Problem>
    | Res<429, t_Problem>
    | Res<500, t_Problem>
  > {
    const url = this.basePath + `/bookings`
    const headers = this._headers(
      { "Content-Type": "application/json" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._fetch(url, { method: "POST", body, ...opts, headers }, timeout)
  }

  async getBooking(
    p: {
      bookingId: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        t_Booking & {
          links?: t_Links_Self
        }
      >
    | Res<400, t_Problem>
    | Res<401, t_Problem>
    | Res<403, t_Problem>
    | Res<404, t_Problem>
    | Res<429, t_Problem>
    | Res<500, t_Problem>
  > {
    const url = this.basePath + `/bookings/${p["bookingId"]}`
    const headers = this._headers({}, opts.headers)

    return this._fetch(url, { method: "GET", ...opts, headers }, timeout)
  }

  async deleteBooking(
    p: {
      bookingId: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<204, void>
    | Res<400, t_Problem>
    | Res<401, t_Problem>
    | Res<403, t_Problem>
    | Res<404, t_Problem>
    | Res<429, t_Problem>
    | Res<500, t_Problem>
  > {
    const url = this.basePath + `/bookings/${p["bookingId"]}`
    const headers = this._headers({}, opts.headers)

    return this._fetch(url, { method: "DELETE", ...opts, headers }, timeout)
  }

  async createBookingPayment(
    p: {
      bookingId: string
      requestBody: t_BookingPayment
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        t_BookingPayment & {
          links?: t_Links_Booking
        }
      >
    | Res<400, t_Problem>
    | Res<401, t_Problem>
    | Res<403, t_Problem>
    | Res<429, t_Problem>
    | Res<500, t_Problem>
  > {
    const url = this.basePath + `/bookings/${p["bookingId"]}/payment`
    const headers = this._headers(
      { "Content-Type": "application/json" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._fetch(url, { method: "POST", body, ...opts, headers }, timeout)
  }
}

export { TrainTravelApi as ApiClient }
export type { TrainTravelApiConfig as ApiClientConfig }
