/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  EmptyObject,
  UnknownEnumStringValue,
  t_account,
  t_account_link,
  t_account_session,
  t_apple_pay_domain,
  t_application_fee,
  t_apps_secret,
  t_balance,
  t_balance_transaction,
  t_bank_account,
  t_billing_alert,
  t_billing_credit_balance_summary,
  t_billing_credit_balance_transaction,
  t_billing_credit_grant,
  t_billing_meter,
  t_billing_meter_event,
  t_billing_meter_event_adjustment,
  t_billing_meter_event_summary,
  t_billing_portal_configuration,
  t_billing_portal_session,
  t_capability,
  t_card,
  t_cash_balance,
  t_charge,
  t_checkout_session,
  t_climate_order,
  t_climate_product,
  t_climate_supplier,
  t_confirmation_token,
  t_country_spec,
  t_coupon,
  t_credit_note,
  t_credit_note_line_item,
  t_customer,
  t_customer_balance_transaction,
  t_customer_cash_balance_transaction,
  t_customer_session,
  t_deleted_account,
  t_deleted_apple_pay_domain,
  t_deleted_coupon,
  t_deleted_customer,
  t_deleted_discount,
  t_deleted_external_account,
  t_deleted_invoice,
  t_deleted_invoiceitem,
  t_deleted_payment_source,
  t_deleted_person,
  t_deleted_plan,
  t_deleted_product,
  t_deleted_product_feature,
  t_deleted_radar_value_list,
  t_deleted_radar_value_list_item,
  t_deleted_subscription_item,
  t_deleted_tax_id,
  t_deleted_terminal_configuration,
  t_deleted_terminal_location,
  t_deleted_terminal_reader,
  t_deleted_test_helpers_test_clock,
  t_deleted_webhook_endpoint,
  t_discount,
  t_dispute,
  t_entitlements_active_entitlement,
  t_entitlements_feature,
  t_ephemeral_key,
  t_error,
  t_event,
  t_exchange_rate,
  t_external_account,
  t_fee_refund,
  t_file,
  t_file_link,
  t_financial_connections_account,
  t_financial_connections_account_owner,
  t_financial_connections_session,
  t_financial_connections_transaction,
  t_forwarding_request,
  t_funding_instructions,
  t_identity_verification_report,
  t_identity_verification_session,
  t_invoice,
  t_invoice_payment,
  t_invoice_rendering_template,
  t_invoiceitem,
  t_issuing_authorization,
  t_issuing_card,
  t_issuing_cardholder,
  t_issuing_dispute,
  t_issuing_personalization_design,
  t_issuing_physical_bundle,
  t_issuing_settlement,
  t_issuing_token,
  t_issuing_transaction,
  t_item,
  t_line_item,
  t_login_link,
  t_mandate,
  t_payment_intent,
  t_payment_link,
  t_payment_method,
  t_payment_method_configuration,
  t_payment_method_domain,
  t_payment_source,
  t_payout,
  t_person,
  t_plan,
  t_price,
  t_product,
  t_product_feature,
  t_promotion_code,
  t_quote,
  t_radar_early_fraud_warning,
  t_radar_value_list,
  t_radar_value_list_item,
  t_refund,
  t_reporting_report_run,
  t_reporting_report_type,
  t_review,
  t_scheduled_query_run,
  t_setup_attempt,
  t_setup_intent,
  t_shipping_rate,
  t_sigma_sigma_api_query,
  t_source,
  t_source_mandate_notification,
  t_source_transaction,
  t_subscription,
  t_subscription_item,
  t_subscription_schedule,
  t_tax_calculation,
  t_tax_calculation_line_item,
  t_tax_code,
  t_tax_id,
  t_tax_rate,
  t_tax_registration,
  t_tax_settings,
  t_tax_transaction,
  t_tax_transaction_line_item,
  t_terminal_configuration,
  t_terminal_connection_token,
  t_terminal_location,
  t_terminal_reader,
  t_test_helpers_test_clock,
  t_token,
  t_topup,
  t_transfer,
  t_transfer_reversal,
  t_treasury_credit_reversal,
  t_treasury_debit_reversal,
  t_treasury_financial_account,
  t_treasury_financial_account_features,
  t_treasury_inbound_transfer,
  t_treasury_outbound_payment,
  t_treasury_outbound_transfer,
  t_treasury_received_credit,
  t_treasury_received_debit,
  t_treasury_transaction,
  t_treasury_transaction_entry,
  t_webhook_endpoint,
} from "./models"
import {
  AbstractFetchClient,
  AbstractFetchClientConfig,
  Res,
  Server,
  StatusCode,
} from "@nahkies/typescript-fetch-runtime/main"

export class StripeApiServersOperations {
  static postFiles(
    url: "https://files.stripe.com/" = "https://files.stripe.com/",
  ): {build: () => Server<"postFiles_StripeApi">} {
    switch (url) {
      case "https://files.stripe.com/":
        return {
          build(): Server<"postFiles_StripeApi"> {
            return "https://files.stripe.com/" as Server<"postFiles_StripeApi">
          },
        }

      default:
        throw new Error(`no matching server for url '${url}'`)
    }
  }

  static getQuotesQuotePdf(
    url: "https://files.stripe.com/" = "https://files.stripe.com/",
  ): {build: () => Server<"getQuotesQuotePdf_StripeApi">} {
    switch (url) {
      case "https://files.stripe.com/":
        return {
          build(): Server<"getQuotesQuotePdf_StripeApi"> {
            return "https://files.stripe.com/" as Server<"getQuotesQuotePdf_StripeApi">
          },
        }

      default:
        throw new Error(`no matching server for url '${url}'`)
    }
  }
}

export class StripeApiServers {
  static default(): Server<"StripeApi"> {
    return StripeApiServers.server().build()
  }

  static server(url: "https://api.stripe.com/" = "https://api.stripe.com/"): {
    build: () => Server<"StripeApi">
  } {
    switch (url) {
      case "https://api.stripe.com/":
        return {
          build(): Server<"StripeApi"> {
            return "https://api.stripe.com/" as Server<"StripeApi">
          },
        }

      default:
        throw new Error(`no matching server for url '${url}'`)
    }
  }

  static readonly operations = StripeApiServersOperations
}

export interface StripeApiConfig extends AbstractFetchClientConfig {
  basePath: Server<"StripeApi"> | string
}

export class StripeApi extends AbstractFetchClient {
  constructor(config: StripeApiConfig) {
    super(config)
  }

  async getAccount(
    p: {
      expand?: string[]
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_account> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/account`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postAccountLinks(
    p: {
      requestBody: {
        account: string
        collect?: "currently_due" | "eventually_due" | UnknownEnumStringValue
        collection_options?: {
          fields?: "currently_due" | "eventually_due" | UnknownEnumStringValue
          future_requirements?: "include" | "omit" | UnknownEnumStringValue
        }
        expand?: string[]
        refresh_url?: string
        return_url?: string
        type: "account_onboarding" | "account_update" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_account_link> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/account_links`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      collection_options: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postAccountSessions(
    p: {
      requestBody: {
        account: string
        components: {
          account_management?: {
            enabled: boolean
            features?: {
              disable_stripe_user_authentication?: boolean
              external_account_collection?: boolean
            }
          }
          account_onboarding?: {
            enabled: boolean
            features?: {
              disable_stripe_user_authentication?: boolean
              external_account_collection?: boolean
            }
          }
          balances?: {
            enabled: boolean
            features?: {
              disable_stripe_user_authentication?: boolean
              edit_payout_schedule?: boolean
              external_account_collection?: boolean
              instant_payouts?: boolean
              standard_payouts?: boolean
            }
          }
          disputes_list?: {
            enabled: boolean
            features?: {
              capture_payments?: boolean
              destination_on_behalf_of_charge_management?: boolean
              dispute_management?: boolean
              refund_management?: boolean
            }
          }
          documents?: {
            enabled: boolean
            features?: EmptyObject
          }
          financial_account?: {
            enabled: boolean
            features?: {
              disable_stripe_user_authentication?: boolean
              external_account_collection?: boolean
              send_money?: boolean
              transfer_balance?: boolean
            }
          }
          financial_account_transactions?: {
            enabled: boolean
            features?: {
              card_spend_dispute_management?: boolean
            }
          }
          issuing_card?: {
            enabled: boolean
            features?: {
              card_management?: boolean
              card_spend_dispute_management?: boolean
              cardholder_management?: boolean
              spend_control_management?: boolean
            }
          }
          issuing_cards_list?: {
            enabled: boolean
            features?: {
              card_management?: boolean
              card_spend_dispute_management?: boolean
              cardholder_management?: boolean
              disable_stripe_user_authentication?: boolean
              spend_control_management?: boolean
            }
          }
          notification_banner?: {
            enabled: boolean
            features?: {
              disable_stripe_user_authentication?: boolean
              external_account_collection?: boolean
            }
          }
          payment_details?: {
            enabled: boolean
            features?: {
              capture_payments?: boolean
              destination_on_behalf_of_charge_management?: boolean
              dispute_management?: boolean
              refund_management?: boolean
            }
          }
          payment_disputes?: {
            enabled: boolean
            features?: {
              destination_on_behalf_of_charge_management?: boolean
              dispute_management?: boolean
              refund_management?: boolean
            }
          }
          payments?: {
            enabled: boolean
            features?: {
              capture_payments?: boolean
              destination_on_behalf_of_charge_management?: boolean
              dispute_management?: boolean
              refund_management?: boolean
            }
          }
          payouts?: {
            enabled: boolean
            features?: {
              disable_stripe_user_authentication?: boolean
              edit_payout_schedule?: boolean
              external_account_collection?: boolean
              instant_payouts?: boolean
              standard_payouts?: boolean
            }
          }
          payouts_list?: {
            enabled: boolean
            features?: EmptyObject
          }
          tax_registrations?: {
            enabled: boolean
            features?: EmptyObject
          }
          tax_settings?: {
            enabled: boolean
            features?: EmptyObject
          }
        }
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_account_session> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/account_sessions`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      components: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getAccounts(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_account[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/accounts`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postAccounts(
    p: {
      requestBody?: {
        account_token?: string
        bank_account?:
          | {
              account_holder_name?: string
              account_holder_type?:
                | "company"
                | "individual"
                | UnknownEnumStringValue
              account_number: string
              account_type?:
                | "checking"
                | "futsu"
                | "savings"
                | "toza"
                | UnknownEnumStringValue
              country: string
              currency?: string
              documents?: {
                bank_account_ownership_verification?: {
                  files?: string[]
                }
              }
              object?: "bank_account" | UnknownEnumStringValue
              routing_number?: string
            }
          | string
        business_profile?: {
          annual_revenue?: {
            amount: number
            currency: string
            fiscal_year_end: string
          }
          estimated_worker_count?: number
          mcc?: string
          minority_owned_business_designation?: (
            | "lgbtqi_owned_business"
            | "minority_owned_business"
            | "none_of_these_apply"
            | "prefer_not_to_answer"
            | "women_owned_business"
            | UnknownEnumStringValue
          )[]
          monthly_estimated_revenue?: {
            amount: number
            currency: string
          }
          name?: string
          product_description?: string
          support_address?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
          }
          support_email?: string
          support_phone?: string
          support_url?: string | "" | UnknownEnumStringValue
          url?: string
        }
        business_type?:
          | "company"
          | "government_entity"
          | "individual"
          | "non_profit"
          | UnknownEnumStringValue
        capabilities?: {
          acss_debit_payments?: {
            requested?: boolean
          }
          affirm_payments?: {
            requested?: boolean
          }
          afterpay_clearpay_payments?: {
            requested?: boolean
          }
          alma_payments?: {
            requested?: boolean
          }
          amazon_pay_payments?: {
            requested?: boolean
          }
          au_becs_debit_payments?: {
            requested?: boolean
          }
          bacs_debit_payments?: {
            requested?: boolean
          }
          bancontact_payments?: {
            requested?: boolean
          }
          bank_transfer_payments?: {
            requested?: boolean
          }
          billie_payments?: {
            requested?: boolean
          }
          blik_payments?: {
            requested?: boolean
          }
          boleto_payments?: {
            requested?: boolean
          }
          card_issuing?: {
            requested?: boolean
          }
          card_payments?: {
            requested?: boolean
          }
          cartes_bancaires_payments?: {
            requested?: boolean
          }
          cashapp_payments?: {
            requested?: boolean
          }
          crypto_payments?: {
            requested?: boolean
          }
          eps_payments?: {
            requested?: boolean
          }
          fpx_payments?: {
            requested?: boolean
          }
          gb_bank_transfer_payments?: {
            requested?: boolean
          }
          giropay_payments?: {
            requested?: boolean
          }
          grabpay_payments?: {
            requested?: boolean
          }
          ideal_payments?: {
            requested?: boolean
          }
          india_international_payments?: {
            requested?: boolean
          }
          jcb_payments?: {
            requested?: boolean
          }
          jp_bank_transfer_payments?: {
            requested?: boolean
          }
          kakao_pay_payments?: {
            requested?: boolean
          }
          klarna_payments?: {
            requested?: boolean
          }
          konbini_payments?: {
            requested?: boolean
          }
          kr_card_payments?: {
            requested?: boolean
          }
          legacy_payments?: {
            requested?: boolean
          }
          link_payments?: {
            requested?: boolean
          }
          mobilepay_payments?: {
            requested?: boolean
          }
          multibanco_payments?: {
            requested?: boolean
          }
          mx_bank_transfer_payments?: {
            requested?: boolean
          }
          naver_pay_payments?: {
            requested?: boolean
          }
          nz_bank_account_becs_debit_payments?: {
            requested?: boolean
          }
          oxxo_payments?: {
            requested?: boolean
          }
          p24_payments?: {
            requested?: boolean
          }
          pay_by_bank_payments?: {
            requested?: boolean
          }
          payco_payments?: {
            requested?: boolean
          }
          paynow_payments?: {
            requested?: boolean
          }
          pix_payments?: {
            requested?: boolean
          }
          promptpay_payments?: {
            requested?: boolean
          }
          revolut_pay_payments?: {
            requested?: boolean
          }
          samsung_pay_payments?: {
            requested?: boolean
          }
          satispay_payments?: {
            requested?: boolean
          }
          sepa_bank_transfer_payments?: {
            requested?: boolean
          }
          sepa_debit_payments?: {
            requested?: boolean
          }
          sofort_payments?: {
            requested?: boolean
          }
          swish_payments?: {
            requested?: boolean
          }
          tax_reporting_us_1099_k?: {
            requested?: boolean
          }
          tax_reporting_us_1099_misc?: {
            requested?: boolean
          }
          transfers?: {
            requested?: boolean
          }
          treasury?: {
            requested?: boolean
          }
          twint_payments?: {
            requested?: boolean
          }
          us_bank_account_ach_payments?: {
            requested?: boolean
          }
          us_bank_transfer_payments?: {
            requested?: boolean
          }
          zip_payments?: {
            requested?: boolean
          }
        }
        company?: {
          address?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
          }
          address_kana?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
            town?: string
          }
          address_kanji?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
            town?: string
          }
          directors_provided?: boolean
          directorship_declaration?: {
            date?: number
            ip?: string
            user_agent?: string
          }
          executives_provided?: boolean
          export_license_id?: string
          export_purpose_code?: string
          name?: string
          name_kana?: string
          name_kanji?: string
          owners_provided?: boolean
          ownership_declaration?: {
            date?: number
            ip?: string
            user_agent?: string
          }
          ownership_exemption_reason?:
            | ""
            | "qualified_entity_exceeds_ownership_threshold"
            | "qualifies_as_financial_institution"
            | UnknownEnumStringValue
          phone?: string
          registration_date?:
            | {
                day: number
                month: number
                year: number
              }
            | ""
            | UnknownEnumStringValue
          registration_number?: string
          structure?:
            | ""
            | "free_zone_establishment"
            | "free_zone_llc"
            | "government_instrumentality"
            | "governmental_unit"
            | "incorporated_non_profit"
            | "incorporated_partnership"
            | "limited_liability_partnership"
            | "llc"
            | "multi_member_llc"
            | "private_company"
            | "private_corporation"
            | "private_partnership"
            | "public_company"
            | "public_corporation"
            | "public_partnership"
            | "registered_charity"
            | "single_member_llc"
            | "sole_establishment"
            | "sole_proprietorship"
            | "tax_exempt_government_instrumentality"
            | "unincorporated_association"
            | "unincorporated_non_profit"
            | "unincorporated_partnership"
            | UnknownEnumStringValue
          tax_id?: string
          tax_id_registrar?: string
          vat_id?: string
          verification?: {
            document?: {
              back?: string
              front?: string
            }
          }
        }
        controller?: {
          fees?: {
            payer?: "account" | "application" | UnknownEnumStringValue
          }
          losses?: {
            payments?: "application" | "stripe" | UnknownEnumStringValue
          }
          requirement_collection?:
            | "application"
            | "stripe"
            | UnknownEnumStringValue
          stripe_dashboard?: {
            type?: "express" | "full" | "none" | UnknownEnumStringValue
          }
        }
        country?: string
        default_currency?: string
        documents?: {
          bank_account_ownership_verification?: {
            files?: string[]
          }
          company_license?: {
            files?: string[]
          }
          company_memorandum_of_association?: {
            files?: string[]
          }
          company_ministerial_decree?: {
            files?: string[]
          }
          company_registration_verification?: {
            files?: string[]
          }
          company_tax_id_verification?: {
            files?: string[]
          }
          proof_of_address?: {
            files?: string[]
          }
          proof_of_registration?: {
            files?: string[]
          }
          proof_of_ultimate_beneficial_ownership?: {
            files?: string[]
          }
        }
        email?: string
        expand?: string[]
        external_account?: string
        groups?: {
          payments_pricing?: string | "" | UnknownEnumStringValue
        }
        individual?: {
          address?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
          }
          address_kana?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
            town?: string
          }
          address_kanji?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
            town?: string
          }
          dob?:
            | {
                day: number
                month: number
                year: number
              }
            | ""
            | UnknownEnumStringValue
          email?: string
          first_name?: string
          first_name_kana?: string
          first_name_kanji?: string
          full_name_aliases?: string[] | "" | UnknownEnumStringValue
          gender?: string
          id_number?: string
          id_number_secondary?: string
          last_name?: string
          last_name_kana?: string
          last_name_kanji?: string
          maiden_name?: string
          metadata?:
            | {
                [key: string]: string | undefined
              }
            | ""
            | UnknownEnumStringValue
          phone?: string
          political_exposure?: "existing" | "none" | UnknownEnumStringValue
          registered_address?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
          }
          relationship?: {
            director?: boolean
            executive?: boolean
            owner?: boolean
            percent_ownership?: number | "" | UnknownEnumStringValue
            title?: string
          }
          ssn_last_4?: string
          verification?: {
            additional_document?: {
              back?: string
              front?: string
            }
            document?: {
              back?: string
              front?: string
            }
          }
        }
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        settings?: {
          bacs_debit_payments?: {
            display_name?: string
          }
          branding?: {
            icon?: string
            logo?: string
            primary_color?: string
            secondary_color?: string
          }
          card_issuing?: {
            tos_acceptance?: {
              date?: number
              ip?: string
              user_agent?: string | "" | UnknownEnumStringValue
            }
          }
          card_payments?: {
            decline_on?: {
              avs_failure?: boolean
              cvc_failure?: boolean
            }
            statement_descriptor_prefix?: string
            statement_descriptor_prefix_kana?:
              | string
              | ""
              | UnknownEnumStringValue
            statement_descriptor_prefix_kanji?:
              | string
              | ""
              | UnknownEnumStringValue
          }
          invoices?: {
            hosted_payment_method_save?:
              | "always"
              | "never"
              | "offer"
              | UnknownEnumStringValue
          }
          payments?: {
            statement_descriptor?: string
            statement_descriptor_kana?: string
            statement_descriptor_kanji?: string
          }
          payouts?: {
            debit_negative_balances?: boolean
            schedule?: {
              delay_days?: "minimum" | UnknownEnumStringValue | number
              interval?:
                | "daily"
                | "manual"
                | "monthly"
                | "weekly"
                | UnknownEnumStringValue
              monthly_anchor?: number
              monthly_payout_days?: number[]
              weekly_anchor?:
                | "friday"
                | "monday"
                | "saturday"
                | "sunday"
                | "thursday"
                | "tuesday"
                | "wednesday"
                | UnknownEnumStringValue
              weekly_payout_days?: (
                | "friday"
                | "monday"
                | "saturday"
                | "sunday"
                | "thursday"
                | "tuesday"
                | "wednesday"
                | UnknownEnumStringValue
              )[]
            }
            statement_descriptor?: string
          }
          treasury?: {
            tos_acceptance?: {
              date?: number
              ip?: string
              user_agent?: string | "" | UnknownEnumStringValue
            }
          }
        }
        tos_acceptance?: {
          date?: number
          ip?: string
          service_agreement?: string
          user_agent?: string
        }
        type?: "custom" | "express" | "standard" | UnknownEnumStringValue
      }
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_account> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/accounts`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            bank_account: {explode: true, style: "deepObject"},
            business_profile: {explode: true, style: "deepObject"},
            capabilities: {explode: true, style: "deepObject"},
            company: {explode: true, style: "deepObject"},
            controller: {explode: true, style: "deepObject"},
            documents: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            groups: {explode: true, style: "deepObject"},
            individual: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            settings: {explode: true, style: "deepObject"},
            tos_acceptance: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteAccountsAccount(
    p: {
      account: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_deleted_account> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/accounts/${p["account"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async getAccountsAccount(
    p: {
      account: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_account> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/accounts/${p["account"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postAccountsAccount(
    p: {
      account: string
      requestBody?: {
        account_token?: string
        business_profile?: {
          annual_revenue?: {
            amount: number
            currency: string
            fiscal_year_end: string
          }
          estimated_worker_count?: number
          mcc?: string
          minority_owned_business_designation?: (
            | "lgbtqi_owned_business"
            | "minority_owned_business"
            | "none_of_these_apply"
            | "prefer_not_to_answer"
            | "women_owned_business"
            | UnknownEnumStringValue
          )[]
          monthly_estimated_revenue?: {
            amount: number
            currency: string
          }
          name?: string
          product_description?: string
          support_address?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
          }
          support_email?: string
          support_phone?: string
          support_url?: string | "" | UnknownEnumStringValue
          url?: string
        }
        business_type?:
          | "company"
          | "government_entity"
          | "individual"
          | "non_profit"
          | UnknownEnumStringValue
        capabilities?: {
          acss_debit_payments?: {
            requested?: boolean
          }
          affirm_payments?: {
            requested?: boolean
          }
          afterpay_clearpay_payments?: {
            requested?: boolean
          }
          alma_payments?: {
            requested?: boolean
          }
          amazon_pay_payments?: {
            requested?: boolean
          }
          au_becs_debit_payments?: {
            requested?: boolean
          }
          bacs_debit_payments?: {
            requested?: boolean
          }
          bancontact_payments?: {
            requested?: boolean
          }
          bank_transfer_payments?: {
            requested?: boolean
          }
          billie_payments?: {
            requested?: boolean
          }
          blik_payments?: {
            requested?: boolean
          }
          boleto_payments?: {
            requested?: boolean
          }
          card_issuing?: {
            requested?: boolean
          }
          card_payments?: {
            requested?: boolean
          }
          cartes_bancaires_payments?: {
            requested?: boolean
          }
          cashapp_payments?: {
            requested?: boolean
          }
          crypto_payments?: {
            requested?: boolean
          }
          eps_payments?: {
            requested?: boolean
          }
          fpx_payments?: {
            requested?: boolean
          }
          gb_bank_transfer_payments?: {
            requested?: boolean
          }
          giropay_payments?: {
            requested?: boolean
          }
          grabpay_payments?: {
            requested?: boolean
          }
          ideal_payments?: {
            requested?: boolean
          }
          india_international_payments?: {
            requested?: boolean
          }
          jcb_payments?: {
            requested?: boolean
          }
          jp_bank_transfer_payments?: {
            requested?: boolean
          }
          kakao_pay_payments?: {
            requested?: boolean
          }
          klarna_payments?: {
            requested?: boolean
          }
          konbini_payments?: {
            requested?: boolean
          }
          kr_card_payments?: {
            requested?: boolean
          }
          legacy_payments?: {
            requested?: boolean
          }
          link_payments?: {
            requested?: boolean
          }
          mobilepay_payments?: {
            requested?: boolean
          }
          multibanco_payments?: {
            requested?: boolean
          }
          mx_bank_transfer_payments?: {
            requested?: boolean
          }
          naver_pay_payments?: {
            requested?: boolean
          }
          nz_bank_account_becs_debit_payments?: {
            requested?: boolean
          }
          oxxo_payments?: {
            requested?: boolean
          }
          p24_payments?: {
            requested?: boolean
          }
          pay_by_bank_payments?: {
            requested?: boolean
          }
          payco_payments?: {
            requested?: boolean
          }
          paynow_payments?: {
            requested?: boolean
          }
          pix_payments?: {
            requested?: boolean
          }
          promptpay_payments?: {
            requested?: boolean
          }
          revolut_pay_payments?: {
            requested?: boolean
          }
          samsung_pay_payments?: {
            requested?: boolean
          }
          satispay_payments?: {
            requested?: boolean
          }
          sepa_bank_transfer_payments?: {
            requested?: boolean
          }
          sepa_debit_payments?: {
            requested?: boolean
          }
          sofort_payments?: {
            requested?: boolean
          }
          swish_payments?: {
            requested?: boolean
          }
          tax_reporting_us_1099_k?: {
            requested?: boolean
          }
          tax_reporting_us_1099_misc?: {
            requested?: boolean
          }
          transfers?: {
            requested?: boolean
          }
          treasury?: {
            requested?: boolean
          }
          twint_payments?: {
            requested?: boolean
          }
          us_bank_account_ach_payments?: {
            requested?: boolean
          }
          us_bank_transfer_payments?: {
            requested?: boolean
          }
          zip_payments?: {
            requested?: boolean
          }
        }
        company?: {
          address?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
          }
          address_kana?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
            town?: string
          }
          address_kanji?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
            town?: string
          }
          directors_provided?: boolean
          directorship_declaration?: {
            date?: number
            ip?: string
            user_agent?: string
          }
          executives_provided?: boolean
          export_license_id?: string
          export_purpose_code?: string
          name?: string
          name_kana?: string
          name_kanji?: string
          owners_provided?: boolean
          ownership_declaration?: {
            date?: number
            ip?: string
            user_agent?: string
          }
          ownership_exemption_reason?:
            | ""
            | "qualified_entity_exceeds_ownership_threshold"
            | "qualifies_as_financial_institution"
            | UnknownEnumStringValue
          phone?: string
          registration_date?:
            | {
                day: number
                month: number
                year: number
              }
            | ""
            | UnknownEnumStringValue
          registration_number?: string
          structure?:
            | ""
            | "free_zone_establishment"
            | "free_zone_llc"
            | "government_instrumentality"
            | "governmental_unit"
            | "incorporated_non_profit"
            | "incorporated_partnership"
            | "limited_liability_partnership"
            | "llc"
            | "multi_member_llc"
            | "private_company"
            | "private_corporation"
            | "private_partnership"
            | "public_company"
            | "public_corporation"
            | "public_partnership"
            | "registered_charity"
            | "single_member_llc"
            | "sole_establishment"
            | "sole_proprietorship"
            | "tax_exempt_government_instrumentality"
            | "unincorporated_association"
            | "unincorporated_non_profit"
            | "unincorporated_partnership"
            | UnknownEnumStringValue
          tax_id?: string
          tax_id_registrar?: string
          vat_id?: string
          verification?: {
            document?: {
              back?: string
              front?: string
            }
          }
        }
        default_currency?: string
        documents?: {
          bank_account_ownership_verification?: {
            files?: string[]
          }
          company_license?: {
            files?: string[]
          }
          company_memorandum_of_association?: {
            files?: string[]
          }
          company_ministerial_decree?: {
            files?: string[]
          }
          company_registration_verification?: {
            files?: string[]
          }
          company_tax_id_verification?: {
            files?: string[]
          }
          proof_of_address?: {
            files?: string[]
          }
          proof_of_registration?: {
            files?: string[]
          }
          proof_of_ultimate_beneficial_ownership?: {
            files?: string[]
          }
        }
        email?: string
        expand?: string[]
        external_account?: string
        groups?: {
          payments_pricing?: string | "" | UnknownEnumStringValue
        }
        individual?: {
          address?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
          }
          address_kana?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
            town?: string
          }
          address_kanji?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
            town?: string
          }
          dob?:
            | {
                day: number
                month: number
                year: number
              }
            | ""
            | UnknownEnumStringValue
          email?: string
          first_name?: string
          first_name_kana?: string
          first_name_kanji?: string
          full_name_aliases?: string[] | "" | UnknownEnumStringValue
          gender?: string
          id_number?: string
          id_number_secondary?: string
          last_name?: string
          last_name_kana?: string
          last_name_kanji?: string
          maiden_name?: string
          metadata?:
            | {
                [key: string]: string | undefined
              }
            | ""
            | UnknownEnumStringValue
          phone?: string
          political_exposure?: "existing" | "none" | UnknownEnumStringValue
          registered_address?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
          }
          relationship?: {
            director?: boolean
            executive?: boolean
            owner?: boolean
            percent_ownership?: number | "" | UnknownEnumStringValue
            title?: string
          }
          ssn_last_4?: string
          verification?: {
            additional_document?: {
              back?: string
              front?: string
            }
            document?: {
              back?: string
              front?: string
            }
          }
        }
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        settings?: {
          bacs_debit_payments?: {
            display_name?: string
          }
          branding?: {
            icon?: string
            logo?: string
            primary_color?: string
            secondary_color?: string
          }
          card_issuing?: {
            tos_acceptance?: {
              date?: number
              ip?: string
              user_agent?: string | "" | UnknownEnumStringValue
            }
          }
          card_payments?: {
            decline_on?: {
              avs_failure?: boolean
              cvc_failure?: boolean
            }
            statement_descriptor_prefix?: string
            statement_descriptor_prefix_kana?:
              | string
              | ""
              | UnknownEnumStringValue
            statement_descriptor_prefix_kanji?:
              | string
              | ""
              | UnknownEnumStringValue
          }
          invoices?: {
            default_account_tax_ids?: string[] | "" | UnknownEnumStringValue
            hosted_payment_method_save?:
              | "always"
              | "never"
              | "offer"
              | UnknownEnumStringValue
          }
          payments?: {
            statement_descriptor?: string
            statement_descriptor_kana?: string
            statement_descriptor_kanji?: string
          }
          payouts?: {
            debit_negative_balances?: boolean
            schedule?: {
              delay_days?: "minimum" | UnknownEnumStringValue | number
              interval?:
                | "daily"
                | "manual"
                | "monthly"
                | "weekly"
                | UnknownEnumStringValue
              monthly_anchor?: number
              monthly_payout_days?: number[]
              weekly_anchor?:
                | "friday"
                | "monday"
                | "saturday"
                | "sunday"
                | "thursday"
                | "tuesday"
                | "wednesday"
                | UnknownEnumStringValue
              weekly_payout_days?: (
                | "friday"
                | "monday"
                | "saturday"
                | "sunday"
                | "thursday"
                | "tuesday"
                | "wednesday"
                | UnknownEnumStringValue
              )[]
            }
            statement_descriptor?: string
          }
          treasury?: {
            tos_acceptance?: {
              date?: number
              ip?: string
              user_agent?: string | "" | UnknownEnumStringValue
            }
          }
        }
        tos_acceptance?: {
          date?: number
          ip?: string
          service_agreement?: string
          user_agent?: string
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_account> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/accounts/${p["account"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            business_profile: {explode: true, style: "deepObject"},
            capabilities: {explode: true, style: "deepObject"},
            company: {explode: true, style: "deepObject"},
            documents: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            groups: {explode: true, style: "deepObject"},
            individual: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            settings: {explode: true, style: "deepObject"},
            tos_acceptance: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postAccountsAccountBankAccounts(
    p: {
      account: string
      requestBody?: {
        bank_account?:
          | {
              account_holder_name?: string
              account_holder_type?:
                | "company"
                | "individual"
                | UnknownEnumStringValue
              account_number: string
              account_type?:
                | "checking"
                | "futsu"
                | "savings"
                | "toza"
                | UnknownEnumStringValue
              country: string
              currency?: string
              documents?: {
                bank_account_ownership_verification?: {
                  files?: string[]
                }
              }
              object?: "bank_account" | UnknownEnumStringValue
              routing_number?: string
            }
          | string
        default_for_currency?: boolean
        expand?: string[]
        external_account?: string
        metadata?: {
          [key: string]: string | undefined
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_external_account> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/accounts/${p["account"]}/bank_accounts`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            bank_account: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteAccountsAccountBankAccountsId(
    p: {
      account: string
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_deleted_external_account> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/accounts/${p["account"]}/bank_accounts/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async getAccountsAccountBankAccountsId(
    p: {
      account: string
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_external_account> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/accounts/${p["account"]}/bank_accounts/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postAccountsAccountBankAccountsId(
    p: {
      account: string
      id: string
      requestBody?: {
        account_holder_name?: string
        account_holder_type?:
          | ""
          | "company"
          | "individual"
          | UnknownEnumStringValue
        account_type?:
          | "checking"
          | "futsu"
          | "savings"
          | "toza"
          | UnknownEnumStringValue
        address_city?: string
        address_country?: string
        address_line1?: string
        address_line2?: string
        address_state?: string
        address_zip?: string
        default_for_currency?: boolean
        documents?: {
          bank_account_ownership_verification?: {
            files?: string[]
          }
        }
        exp_month?: string
        exp_year?: string
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        name?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_external_account> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/accounts/${p["account"]}/bank_accounts/${p["id"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            documents: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getAccountsAccountCapabilities(
    p: {
      account: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_capability[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/accounts/${p["account"]}/capabilities`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getAccountsAccountCapabilitiesCapability(
    p: {
      account: string
      capability: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_capability> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/accounts/${p["account"]}/capabilities/${p["capability"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postAccountsAccountCapabilitiesCapability(
    p: {
      account: string
      capability: string
      requestBody?: {
        expand?: string[]
        requested?: boolean
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_capability> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/accounts/${p["account"]}/capabilities/${p["capability"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getAccountsAccountExternalAccounts(
    p: {
      account: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      object?: "bank_account" | "card" | UnknownEnumStringValue
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: (t_bank_account | t_card)[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/accounts/${p["account"]}/external_accounts`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      object: p["object"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postAccountsAccountExternalAccounts(
    p: {
      account: string
      requestBody?: {
        bank_account?:
          | {
              account_holder_name?: string
              account_holder_type?:
                | "company"
                | "individual"
                | UnknownEnumStringValue
              account_number: string
              account_type?:
                | "checking"
                | "futsu"
                | "savings"
                | "toza"
                | UnknownEnumStringValue
              country: string
              currency?: string
              documents?: {
                bank_account_ownership_verification?: {
                  files?: string[]
                }
              }
              object?: "bank_account" | UnknownEnumStringValue
              routing_number?: string
            }
          | string
        default_for_currency?: boolean
        expand?: string[]
        external_account?: string
        metadata?: {
          [key: string]: string | undefined
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_external_account> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/accounts/${p["account"]}/external_accounts`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            bank_account: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteAccountsAccountExternalAccountsId(
    p: {
      account: string
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_deleted_external_account> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/accounts/${p["account"]}/external_accounts/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async getAccountsAccountExternalAccountsId(
    p: {
      account: string
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_external_account> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/accounts/${p["account"]}/external_accounts/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postAccountsAccountExternalAccountsId(
    p: {
      account: string
      id: string
      requestBody?: {
        account_holder_name?: string
        account_holder_type?:
          | ""
          | "company"
          | "individual"
          | UnknownEnumStringValue
        account_type?:
          | "checking"
          | "futsu"
          | "savings"
          | "toza"
          | UnknownEnumStringValue
        address_city?: string
        address_country?: string
        address_line1?: string
        address_line2?: string
        address_state?: string
        address_zip?: string
        default_for_currency?: boolean
        documents?: {
          bank_account_ownership_verification?: {
            files?: string[]
          }
        }
        exp_month?: string
        exp_year?: string
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        name?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_external_account> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/accounts/${p["account"]}/external_accounts/${p["id"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            documents: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postAccountsAccountLoginLinks(
    p: {
      account: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_login_link> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/accounts/${p["account"]}/login_links`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getAccountsAccountPeople(
    p: {
      account: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      relationship?: {
        authorizer?: boolean
        director?: boolean
        executive?: boolean
        legal_guardian?: boolean
        owner?: boolean
        representative?: boolean
      }
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_person[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/accounts/${p["account"]}/people`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      relationship: p["relationship"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postAccountsAccountPeople(
    p: {
      account: string
      requestBody?: {
        additional_tos_acceptances?: {
          account?: {
            date?: number
            ip?: string
            user_agent?: string | "" | UnknownEnumStringValue
          }
        }
        address?: {
          city?: string
          country?: string
          line1?: string
          line2?: string
          postal_code?: string
          state?: string
        }
        address_kana?: {
          city?: string
          country?: string
          line1?: string
          line2?: string
          postal_code?: string
          state?: string
          town?: string
        }
        address_kanji?: {
          city?: string
          country?: string
          line1?: string
          line2?: string
          postal_code?: string
          state?: string
          town?: string
        }
        dob?:
          | {
              day: number
              month: number
              year: number
            }
          | ""
          | UnknownEnumStringValue
        documents?: {
          company_authorization?: {
            files?: (string | "" | UnknownEnumStringValue)[]
          }
          passport?: {
            files?: (string | "" | UnknownEnumStringValue)[]
          }
          visa?: {
            files?: (string | "" | UnknownEnumStringValue)[]
          }
        }
        email?: string
        expand?: string[]
        first_name?: string
        first_name_kana?: string
        first_name_kanji?: string
        full_name_aliases?: string[] | "" | UnknownEnumStringValue
        gender?: string
        id_number?: string
        id_number_secondary?: string
        last_name?: string
        last_name_kana?: string
        last_name_kanji?: string
        maiden_name?: string
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        nationality?: string
        person_token?: string
        phone?: string
        political_exposure?: "existing" | "none" | UnknownEnumStringValue
        registered_address?: {
          city?: string
          country?: string
          line1?: string
          line2?: string
          postal_code?: string
          state?: string
        }
        relationship?: {
          authorizer?: boolean
          director?: boolean
          executive?: boolean
          legal_guardian?: boolean
          owner?: boolean
          percent_ownership?: number | "" | UnknownEnumStringValue
          representative?: boolean
          title?: string
        }
        ssn_last_4?: string
        us_cfpb_data?: {
          ethnicity_details?: {
            ethnicity?: (
              | "cuban"
              | "hispanic_or_latino"
              | "mexican"
              | "not_hispanic_or_latino"
              | "other_hispanic_or_latino"
              | "prefer_not_to_answer"
              | "puerto_rican"
              | UnknownEnumStringValue
            )[]
            ethnicity_other?: string
          }
          race_details?: {
            race?: (
              | "african_american"
              | "american_indian_or_alaska_native"
              | "asian"
              | "asian_indian"
              | "black_or_african_american"
              | "chinese"
              | "ethiopian"
              | "filipino"
              | "guamanian_or_chamorro"
              | "haitian"
              | "jamaican"
              | "japanese"
              | "korean"
              | "native_hawaiian"
              | "native_hawaiian_or_other_pacific_islander"
              | "nigerian"
              | "other_asian"
              | "other_black_or_african_american"
              | "other_pacific_islander"
              | "prefer_not_to_answer"
              | "samoan"
              | "somali"
              | "vietnamese"
              | "white"
              | UnknownEnumStringValue
            )[]
            race_other?: string
          }
          self_identified_gender?: string
        }
        verification?: {
          additional_document?: {
            back?: string
            front?: string
          }
          document?: {
            back?: string
            front?: string
          }
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_person> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/accounts/${p["account"]}/people`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            additional_tos_acceptances: {explode: true, style: "deepObject"},
            address: {explode: true, style: "deepObject"},
            address_kana: {explode: true, style: "deepObject"},
            address_kanji: {explode: true, style: "deepObject"},
            dob: {explode: true, style: "deepObject"},
            documents: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            full_name_aliases: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            registered_address: {explode: true, style: "deepObject"},
            relationship: {explode: true, style: "deepObject"},
            us_cfpb_data: {explode: true, style: "deepObject"},
            verification: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteAccountsAccountPeoplePerson(
    p: {
      account: string
      person: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_deleted_person> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/accounts/${p["account"]}/people/${p["person"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async getAccountsAccountPeoplePerson(
    p: {
      account: string
      expand?: string[]
      person: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_person> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/accounts/${p["account"]}/people/${p["person"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postAccountsAccountPeoplePerson(
    p: {
      account: string
      person: string
      requestBody?: {
        additional_tos_acceptances?: {
          account?: {
            date?: number
            ip?: string
            user_agent?: string | "" | UnknownEnumStringValue
          }
        }
        address?: {
          city?: string
          country?: string
          line1?: string
          line2?: string
          postal_code?: string
          state?: string
        }
        address_kana?: {
          city?: string
          country?: string
          line1?: string
          line2?: string
          postal_code?: string
          state?: string
          town?: string
        }
        address_kanji?: {
          city?: string
          country?: string
          line1?: string
          line2?: string
          postal_code?: string
          state?: string
          town?: string
        }
        dob?:
          | {
              day: number
              month: number
              year: number
            }
          | ""
          | UnknownEnumStringValue
        documents?: {
          company_authorization?: {
            files?: (string | "" | UnknownEnumStringValue)[]
          }
          passport?: {
            files?: (string | "" | UnknownEnumStringValue)[]
          }
          visa?: {
            files?: (string | "" | UnknownEnumStringValue)[]
          }
        }
        email?: string
        expand?: string[]
        first_name?: string
        first_name_kana?: string
        first_name_kanji?: string
        full_name_aliases?: string[] | "" | UnknownEnumStringValue
        gender?: string
        id_number?: string
        id_number_secondary?: string
        last_name?: string
        last_name_kana?: string
        last_name_kanji?: string
        maiden_name?: string
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        nationality?: string
        person_token?: string
        phone?: string
        political_exposure?: "existing" | "none" | UnknownEnumStringValue
        registered_address?: {
          city?: string
          country?: string
          line1?: string
          line2?: string
          postal_code?: string
          state?: string
        }
        relationship?: {
          authorizer?: boolean
          director?: boolean
          executive?: boolean
          legal_guardian?: boolean
          owner?: boolean
          percent_ownership?: number | "" | UnknownEnumStringValue
          representative?: boolean
          title?: string
        }
        ssn_last_4?: string
        us_cfpb_data?: {
          ethnicity_details?: {
            ethnicity?: (
              | "cuban"
              | "hispanic_or_latino"
              | "mexican"
              | "not_hispanic_or_latino"
              | "other_hispanic_or_latino"
              | "prefer_not_to_answer"
              | "puerto_rican"
              | UnknownEnumStringValue
            )[]
            ethnicity_other?: string
          }
          race_details?: {
            race?: (
              | "african_american"
              | "american_indian_or_alaska_native"
              | "asian"
              | "asian_indian"
              | "black_or_african_american"
              | "chinese"
              | "ethiopian"
              | "filipino"
              | "guamanian_or_chamorro"
              | "haitian"
              | "jamaican"
              | "japanese"
              | "korean"
              | "native_hawaiian"
              | "native_hawaiian_or_other_pacific_islander"
              | "nigerian"
              | "other_asian"
              | "other_black_or_african_american"
              | "other_pacific_islander"
              | "prefer_not_to_answer"
              | "samoan"
              | "somali"
              | "vietnamese"
              | "white"
              | UnknownEnumStringValue
            )[]
            race_other?: string
          }
          self_identified_gender?: string
        }
        verification?: {
          additional_document?: {
            back?: string
            front?: string
          }
          document?: {
            back?: string
            front?: string
          }
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_person> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/accounts/${p["account"]}/people/${p["person"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            additional_tos_acceptances: {explode: true, style: "deepObject"},
            address: {explode: true, style: "deepObject"},
            address_kana: {explode: true, style: "deepObject"},
            address_kanji: {explode: true, style: "deepObject"},
            dob: {explode: true, style: "deepObject"},
            documents: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            full_name_aliases: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            registered_address: {explode: true, style: "deepObject"},
            relationship: {explode: true, style: "deepObject"},
            us_cfpb_data: {explode: true, style: "deepObject"},
            verification: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getAccountsAccountPersons(
    p: {
      account: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      relationship?: {
        authorizer?: boolean
        director?: boolean
        executive?: boolean
        legal_guardian?: boolean
        owner?: boolean
        representative?: boolean
      }
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_person[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/accounts/${p["account"]}/persons`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      relationship: p["relationship"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postAccountsAccountPersons(
    p: {
      account: string
      requestBody?: {
        additional_tos_acceptances?: {
          account?: {
            date?: number
            ip?: string
            user_agent?: string | "" | UnknownEnumStringValue
          }
        }
        address?: {
          city?: string
          country?: string
          line1?: string
          line2?: string
          postal_code?: string
          state?: string
        }
        address_kana?: {
          city?: string
          country?: string
          line1?: string
          line2?: string
          postal_code?: string
          state?: string
          town?: string
        }
        address_kanji?: {
          city?: string
          country?: string
          line1?: string
          line2?: string
          postal_code?: string
          state?: string
          town?: string
        }
        dob?:
          | {
              day: number
              month: number
              year: number
            }
          | ""
          | UnknownEnumStringValue
        documents?: {
          company_authorization?: {
            files?: (string | "" | UnknownEnumStringValue)[]
          }
          passport?: {
            files?: (string | "" | UnknownEnumStringValue)[]
          }
          visa?: {
            files?: (string | "" | UnknownEnumStringValue)[]
          }
        }
        email?: string
        expand?: string[]
        first_name?: string
        first_name_kana?: string
        first_name_kanji?: string
        full_name_aliases?: string[] | "" | UnknownEnumStringValue
        gender?: string
        id_number?: string
        id_number_secondary?: string
        last_name?: string
        last_name_kana?: string
        last_name_kanji?: string
        maiden_name?: string
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        nationality?: string
        person_token?: string
        phone?: string
        political_exposure?: "existing" | "none" | UnknownEnumStringValue
        registered_address?: {
          city?: string
          country?: string
          line1?: string
          line2?: string
          postal_code?: string
          state?: string
        }
        relationship?: {
          authorizer?: boolean
          director?: boolean
          executive?: boolean
          legal_guardian?: boolean
          owner?: boolean
          percent_ownership?: number | "" | UnknownEnumStringValue
          representative?: boolean
          title?: string
        }
        ssn_last_4?: string
        us_cfpb_data?: {
          ethnicity_details?: {
            ethnicity?: (
              | "cuban"
              | "hispanic_or_latino"
              | "mexican"
              | "not_hispanic_or_latino"
              | "other_hispanic_or_latino"
              | "prefer_not_to_answer"
              | "puerto_rican"
              | UnknownEnumStringValue
            )[]
            ethnicity_other?: string
          }
          race_details?: {
            race?: (
              | "african_american"
              | "american_indian_or_alaska_native"
              | "asian"
              | "asian_indian"
              | "black_or_african_american"
              | "chinese"
              | "ethiopian"
              | "filipino"
              | "guamanian_or_chamorro"
              | "haitian"
              | "jamaican"
              | "japanese"
              | "korean"
              | "native_hawaiian"
              | "native_hawaiian_or_other_pacific_islander"
              | "nigerian"
              | "other_asian"
              | "other_black_or_african_american"
              | "other_pacific_islander"
              | "prefer_not_to_answer"
              | "samoan"
              | "somali"
              | "vietnamese"
              | "white"
              | UnknownEnumStringValue
            )[]
            race_other?: string
          }
          self_identified_gender?: string
        }
        verification?: {
          additional_document?: {
            back?: string
            front?: string
          }
          document?: {
            back?: string
            front?: string
          }
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_person> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/accounts/${p["account"]}/persons`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            additional_tos_acceptances: {explode: true, style: "deepObject"},
            address: {explode: true, style: "deepObject"},
            address_kana: {explode: true, style: "deepObject"},
            address_kanji: {explode: true, style: "deepObject"},
            dob: {explode: true, style: "deepObject"},
            documents: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            full_name_aliases: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            registered_address: {explode: true, style: "deepObject"},
            relationship: {explode: true, style: "deepObject"},
            us_cfpb_data: {explode: true, style: "deepObject"},
            verification: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteAccountsAccountPersonsPerson(
    p: {
      account: string
      person: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_deleted_person> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/accounts/${p["account"]}/persons/${p["person"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async getAccountsAccountPersonsPerson(
    p: {
      account: string
      expand?: string[]
      person: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_person> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/accounts/${p["account"]}/persons/${p["person"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postAccountsAccountPersonsPerson(
    p: {
      account: string
      person: string
      requestBody?: {
        additional_tos_acceptances?: {
          account?: {
            date?: number
            ip?: string
            user_agent?: string | "" | UnknownEnumStringValue
          }
        }
        address?: {
          city?: string
          country?: string
          line1?: string
          line2?: string
          postal_code?: string
          state?: string
        }
        address_kana?: {
          city?: string
          country?: string
          line1?: string
          line2?: string
          postal_code?: string
          state?: string
          town?: string
        }
        address_kanji?: {
          city?: string
          country?: string
          line1?: string
          line2?: string
          postal_code?: string
          state?: string
          town?: string
        }
        dob?:
          | {
              day: number
              month: number
              year: number
            }
          | ""
          | UnknownEnumStringValue
        documents?: {
          company_authorization?: {
            files?: (string | "" | UnknownEnumStringValue)[]
          }
          passport?: {
            files?: (string | "" | UnknownEnumStringValue)[]
          }
          visa?: {
            files?: (string | "" | UnknownEnumStringValue)[]
          }
        }
        email?: string
        expand?: string[]
        first_name?: string
        first_name_kana?: string
        first_name_kanji?: string
        full_name_aliases?: string[] | "" | UnknownEnumStringValue
        gender?: string
        id_number?: string
        id_number_secondary?: string
        last_name?: string
        last_name_kana?: string
        last_name_kanji?: string
        maiden_name?: string
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        nationality?: string
        person_token?: string
        phone?: string
        political_exposure?: "existing" | "none" | UnknownEnumStringValue
        registered_address?: {
          city?: string
          country?: string
          line1?: string
          line2?: string
          postal_code?: string
          state?: string
        }
        relationship?: {
          authorizer?: boolean
          director?: boolean
          executive?: boolean
          legal_guardian?: boolean
          owner?: boolean
          percent_ownership?: number | "" | UnknownEnumStringValue
          representative?: boolean
          title?: string
        }
        ssn_last_4?: string
        us_cfpb_data?: {
          ethnicity_details?: {
            ethnicity?: (
              | "cuban"
              | "hispanic_or_latino"
              | "mexican"
              | "not_hispanic_or_latino"
              | "other_hispanic_or_latino"
              | "prefer_not_to_answer"
              | "puerto_rican"
              | UnknownEnumStringValue
            )[]
            ethnicity_other?: string
          }
          race_details?: {
            race?: (
              | "african_american"
              | "american_indian_or_alaska_native"
              | "asian"
              | "asian_indian"
              | "black_or_african_american"
              | "chinese"
              | "ethiopian"
              | "filipino"
              | "guamanian_or_chamorro"
              | "haitian"
              | "jamaican"
              | "japanese"
              | "korean"
              | "native_hawaiian"
              | "native_hawaiian_or_other_pacific_islander"
              | "nigerian"
              | "other_asian"
              | "other_black_or_african_american"
              | "other_pacific_islander"
              | "prefer_not_to_answer"
              | "samoan"
              | "somali"
              | "vietnamese"
              | "white"
              | UnknownEnumStringValue
            )[]
            race_other?: string
          }
          self_identified_gender?: string
        }
        verification?: {
          additional_document?: {
            back?: string
            front?: string
          }
          document?: {
            back?: string
            front?: string
          }
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_person> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/accounts/${p["account"]}/persons/${p["person"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            additional_tos_acceptances: {explode: true, style: "deepObject"},
            address: {explode: true, style: "deepObject"},
            address_kana: {explode: true, style: "deepObject"},
            address_kanji: {explode: true, style: "deepObject"},
            dob: {explode: true, style: "deepObject"},
            documents: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            full_name_aliases: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            registered_address: {explode: true, style: "deepObject"},
            relationship: {explode: true, style: "deepObject"},
            us_cfpb_data: {explode: true, style: "deepObject"},
            verification: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postAccountsAccountReject(
    p: {
      account: string
      requestBody: {
        expand?: string[]
        reason: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_account> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/accounts/${p["account"]}/reject`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getApplePayDomains(
    p: {
      domainName?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_apple_pay_domain[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/apple_pay/domains`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      domain_name: p["domainName"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postApplePayDomains(
    p: {
      requestBody: {
        domain_name: string
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_apple_pay_domain> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/apple_pay/domains`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteApplePayDomainsDomain(
    p: {
      domain: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_deleted_apple_pay_domain> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/apple_pay/domains/${p["domain"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async getApplePayDomainsDomain(
    p: {
      domain: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_apple_pay_domain> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/apple_pay/domains/${p["domain"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getApplicationFees(
    p: {
      charge?: string
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_application_fee[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/application_fees`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      charge: p["charge"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getApplicationFeesFeeRefundsId(
    p: {
      expand?: string[]
      fee: string
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_fee_refund> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/application_fees/${p["fee"]}/refunds/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postApplicationFeesFeeRefundsId(
    p: {
      fee: string
      id: string
      requestBody?: {
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_fee_refund> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/application_fees/${p["fee"]}/refunds/${p["id"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getApplicationFeesId(
    p: {
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_application_fee> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/application_fees/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postApplicationFeesIdRefund(
    p: {
      id: string
      requestBody?: {
        amount?: number
        directive?: string
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_application_fee> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/application_fees/${p["id"]}/refund`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getApplicationFeesIdRefunds(
    p: {
      endingBefore?: string
      expand?: string[]
      id: string
      limit?: number
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_fee_refund[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/application_fees/${p["id"]}/refunds`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postApplicationFeesIdRefunds(
    p: {
      id: string
      requestBody?: {
        amount?: number
        expand?: string[]
        metadata?: {
          [key: string]: string | undefined
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_fee_refund> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/application_fees/${p["id"]}/refunds`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getAppsSecrets(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      scope: {
        type: "account" | "user" | UnknownEnumStringValue
        user?: string
      }
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_apps_secret[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/apps/secrets`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      scope: p["scope"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postAppsSecrets(
    p: {
      requestBody: {
        expand?: string[]
        expires_at?: number
        name: string
        payload: string
        scope: {
          type: "account" | "user" | UnknownEnumStringValue
          user?: string
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_apps_secret> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/apps/secrets`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      scope: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postAppsSecretsDelete(
    p: {
      requestBody: {
        expand?: string[]
        name: string
        scope: {
          type: "account" | "user" | UnknownEnumStringValue
          user?: string
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_apps_secret> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/apps/secrets/delete`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      scope: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getAppsSecretsFind(
    p: {
      expand?: string[]
      name: string
      scope: {
        type: "account" | "user" | UnknownEnumStringValue
        user?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_apps_secret> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/apps/secrets/find`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      expand: p["expand"],
      name: p["name"],
      scope: p["scope"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getBalance(
    p: {
      expand?: string[]
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_balance> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/balance`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getBalanceHistory(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      currency?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      payout?: string
      source?: string
      startingAfter?: string
      type?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_balance_transaction[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/balance/history`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      currency: p["currency"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      payout: p["payout"],
      source: p["source"],
      starting_after: p["startingAfter"],
      type: p["type"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getBalanceHistoryId(
    p: {
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_balance_transaction> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/balance/history/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getBalanceTransactions(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      currency?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      payout?: string
      source?: string
      startingAfter?: string
      type?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_balance_transaction[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/balance_transactions`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      currency: p["currency"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      payout: p["payout"],
      source: p["source"],
      starting_after: p["startingAfter"],
      type: p["type"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getBalanceTransactionsId(
    p: {
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_balance_transaction> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/balance_transactions/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getBillingAlerts(
    p: {
      alertType?: "usage_threshold" | UnknownEnumStringValue
      endingBefore?: string
      expand?: string[]
      limit?: number
      meter?: string
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_billing_alert[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/billing/alerts`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      alert_type: p["alertType"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      meter: p["meter"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postBillingAlerts(
    p: {
      requestBody: {
        alert_type: "usage_threshold" | UnknownEnumStringValue
        expand?: string[]
        title: string
        usage_threshold?: {
          filters?: {
            customer?: string
            type: "customer" | UnknownEnumStringValue
          }[]
          gte: number
          meter: string
          recurrence: "one_time" | UnknownEnumStringValue
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_billing_alert> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/billing/alerts`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      usage_threshold: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getBillingAlertsId(
    p: {
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_billing_alert> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/billing/alerts/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postBillingAlertsIdActivate(
    p: {
      id: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_billing_alert> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/billing/alerts/${p["id"]}/activate`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postBillingAlertsIdArchive(
    p: {
      id: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_billing_alert> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/billing/alerts/${p["id"]}/archive`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postBillingAlertsIdDeactivate(
    p: {
      id: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_billing_alert> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/billing/alerts/${p["id"]}/deactivate`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getBillingCreditBalanceSummary(
    p: {
      customer: string
      expand?: string[]
      filter: {
        applicability_scope?: {
          price_type?: "metered" | UnknownEnumStringValue
          prices?: {
            id: string
          }[]
        }
        credit_grant?: string
        type: "applicability_scope" | "credit_grant" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_billing_credit_balance_summary> | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/billing/credit_balance_summary`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      customer: p["customer"],
      expand: p["expand"],
      filter: p["filter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getBillingCreditBalanceTransactions(
    p: {
      creditGrant?: string
      customer: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_billing_credit_balance_transaction[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/billing/credit_balance_transactions`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      credit_grant: p["creditGrant"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getBillingCreditBalanceTransactionsId(
    p: {
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_billing_credit_balance_transaction> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/billing/credit_balance_transactions/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getBillingCreditGrants(
    p: {
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_billing_credit_grant[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/billing/credit_grants`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postBillingCreditGrants(
    p: {
      requestBody: {
        amount: {
          monetary?: {
            currency: string
            value: number
          }
          type: "monetary" | UnknownEnumStringValue
        }
        applicability_config: {
          scope: {
            price_type?: "metered" | UnknownEnumStringValue
            prices?: {
              id: string
            }[]
          }
        }
        category: "paid" | "promotional" | UnknownEnumStringValue
        customer: string
        effective_at?: number
        expand?: string[]
        expires_at?: number
        metadata?: {
          [key: string]: string | undefined
        }
        name?: string
        priority?: number
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_billing_credit_grant> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/billing/credit_grants`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      amount: {explode: true, style: "deepObject"},
      applicability_config: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getBillingCreditGrantsId(
    p: {
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_billing_credit_grant> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/billing/credit_grants/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postBillingCreditGrantsId(
    p: {
      id: string
      requestBody?: {
        expand?: string[]
        expires_at?: number | "" | UnknownEnumStringValue
        metadata?: {
          [key: string]: string | undefined
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_billing_credit_grant> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/billing/credit_grants/${p["id"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            expires_at: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postBillingCreditGrantsIdExpire(
    p: {
      id: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_billing_credit_grant> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/billing/credit_grants/${p["id"]}/expire`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postBillingCreditGrantsIdVoid(
    p: {
      id: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_billing_credit_grant> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/billing/credit_grants/${p["id"]}/void`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postBillingMeterEventAdjustments(
    p: {
      requestBody: {
        cancel?: {
          identifier?: string
        }
        event_name: string
        expand?: string[]
        type: "cancel" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_billing_meter_event_adjustment> | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/billing/meter_event_adjustments`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      cancel: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postBillingMeterEvents(
    p: {
      requestBody: {
        event_name: string
        expand?: string[]
        identifier?: string
        payload: {
          [key: string]: string | undefined
        }
        timestamp?: number
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_billing_meter_event> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/billing/meter_events`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      payload: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getBillingMeters(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?: "active" | "inactive" | UnknownEnumStringValue
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_billing_meter[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/billing/meters`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postBillingMeters(
    p: {
      requestBody: {
        customer_mapping?: {
          event_payload_key: string
          type: "by_id" | UnknownEnumStringValue
        }
        default_aggregation: {
          formula: "count" | "last" | "sum" | UnknownEnumStringValue
        }
        display_name: string
        event_name: string
        event_time_window?: "day" | "hour" | UnknownEnumStringValue
        expand?: string[]
        value_settings?: {
          event_payload_key: string
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_billing_meter> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/billing/meters`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      customer_mapping: {explode: true, style: "deepObject"},
      default_aggregation: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
      value_settings: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getBillingMetersId(
    p: {
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_billing_meter> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/billing/meters/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postBillingMetersId(
    p: {
      id: string
      requestBody?: {
        display_name?: string
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_billing_meter> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/billing/meters/${p["id"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postBillingMetersIdDeactivate(
    p: {
      id: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_billing_meter> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/billing/meters/${p["id"]}/deactivate`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getBillingMetersIdEventSummaries(
    p: {
      customer: string
      endTime: number
      endingBefore?: string
      expand?: string[]
      id: string
      limit?: number
      startTime: number
      startingAfter?: string
      valueGroupingWindow?: "day" | "hour" | UnknownEnumStringValue
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_billing_meter_event_summary[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/billing/meters/${p["id"]}/event_summaries`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      customer: p["customer"],
      end_time: p["endTime"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      start_time: p["startTime"],
      starting_after: p["startingAfter"],
      value_grouping_window: p["valueGroupingWindow"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postBillingMetersIdReactivate(
    p: {
      id: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_billing_meter> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/billing/meters/${p["id"]}/reactivate`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getBillingPortalConfigurations(
    p: {
      active?: boolean
      endingBefore?: string
      expand?: string[]
      isDefault?: boolean
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_billing_portal_configuration[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/billing_portal/configurations`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      active: p["active"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      is_default: p["isDefault"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postBillingPortalConfigurations(
    p: {
      requestBody: {
        business_profile?: {
          headline?: string | "" | UnknownEnumStringValue
          privacy_policy_url?: string
          terms_of_service_url?: string
        }
        default_return_url?: string | "" | UnknownEnumStringValue
        expand?: string[]
        features: {
          customer_update?: {
            allowed_updates?:
              | (
                  | "address"
                  | "email"
                  | "name"
                  | "phone"
                  | "shipping"
                  | "tax_id"
                  | UnknownEnumStringValue
                )[]
              | ""
              | UnknownEnumStringValue
            enabled: boolean
          }
          invoice_history?: {
            enabled: boolean
          }
          payment_method_update?: {
            enabled: boolean
          }
          subscription_cancel?: {
            cancellation_reason?: {
              enabled: boolean
              options:
                | (
                    | "customer_service"
                    | "low_quality"
                    | "missing_features"
                    | "other"
                    | "switched_service"
                    | "too_complex"
                    | "too_expensive"
                    | "unused"
                    | UnknownEnumStringValue
                  )[]
                | ""
                | UnknownEnumStringValue
            }
            enabled: boolean
            mode?: "at_period_end" | "immediately" | UnknownEnumStringValue
            proration_behavior?:
              | "always_invoice"
              | "create_prorations"
              | "none"
              | UnknownEnumStringValue
          }
          subscription_update?: {
            default_allowed_updates?:
              | (
                  | "price"
                  | "promotion_code"
                  | "quantity"
                  | UnknownEnumStringValue
                )[]
              | ""
              | UnknownEnumStringValue
            enabled: boolean
            products?:
              | {
                  prices: string[]
                  product: string
                }[]
              | ""
              | UnknownEnumStringValue
            proration_behavior?:
              | "always_invoice"
              | "create_prorations"
              | "none"
              | UnknownEnumStringValue
            schedule_at_period_end?: {
              conditions?: {
                type:
                  | "decreasing_item_amount"
                  | "shortening_interval"
                  | UnknownEnumStringValue
              }[]
            }
          }
        }
        login_page?: {
          enabled: boolean
        }
        metadata?: {
          [key: string]: string | undefined
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_billing_portal_configuration> | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/billing_portal/configurations`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      business_profile: {explode: true, style: "deepObject"},
      default_return_url: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
      features: {explode: true, style: "deepObject"},
      login_page: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getBillingPortalConfigurationsConfiguration(
    p: {
      configuration: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_billing_portal_configuration> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/billing_portal/configurations/${p["configuration"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postBillingPortalConfigurationsConfiguration(
    p: {
      configuration: string
      requestBody?: {
        active?: boolean
        business_profile?: {
          headline?: string | "" | UnknownEnumStringValue
          privacy_policy_url?: string | "" | UnknownEnumStringValue
          terms_of_service_url?: string | "" | UnknownEnumStringValue
        }
        default_return_url?: string | "" | UnknownEnumStringValue
        expand?: string[]
        features?: {
          customer_update?: {
            allowed_updates?:
              | (
                  | "address"
                  | "email"
                  | "name"
                  | "phone"
                  | "shipping"
                  | "tax_id"
                  | UnknownEnumStringValue
                )[]
              | ""
              | UnknownEnumStringValue
            enabled?: boolean
          }
          invoice_history?: {
            enabled: boolean
          }
          payment_method_update?: {
            enabled: boolean
          }
          subscription_cancel?: {
            cancellation_reason?: {
              enabled: boolean
              options?:
                | (
                    | "customer_service"
                    | "low_quality"
                    | "missing_features"
                    | "other"
                    | "switched_service"
                    | "too_complex"
                    | "too_expensive"
                    | "unused"
                    | UnknownEnumStringValue
                  )[]
                | ""
                | UnknownEnumStringValue
            }
            enabled?: boolean
            mode?: "at_period_end" | "immediately" | UnknownEnumStringValue
            proration_behavior?:
              | "always_invoice"
              | "create_prorations"
              | "none"
              | UnknownEnumStringValue
          }
          subscription_update?: {
            default_allowed_updates?:
              | (
                  | "price"
                  | "promotion_code"
                  | "quantity"
                  | UnknownEnumStringValue
                )[]
              | ""
              | UnknownEnumStringValue
            enabled?: boolean
            products?:
              | {
                  prices: string[]
                  product: string
                }[]
              | ""
              | UnknownEnumStringValue
            proration_behavior?:
              | "always_invoice"
              | "create_prorations"
              | "none"
              | UnknownEnumStringValue
            schedule_at_period_end?: {
              conditions?:
                | {
                    type:
                      | "decreasing_item_amount"
                      | "shortening_interval"
                      | UnknownEnumStringValue
                  }[]
                | ""
                | UnknownEnumStringValue
            }
          }
        }
        login_page?: {
          enabled: boolean
        }
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_billing_portal_configuration> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/billing_portal/configurations/${p["configuration"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            business_profile: {explode: true, style: "deepObject"},
            default_return_url: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            features: {explode: true, style: "deepObject"},
            login_page: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postBillingPortalSessions(
    p: {
      requestBody: {
        configuration?: string
        customer: string
        expand?: string[]
        flow_data?: {
          after_completion?: {
            hosted_confirmation?: {
              custom_message?: string
            }
            redirect?: {
              return_url: string
            }
            type:
              | "hosted_confirmation"
              | "portal_homepage"
              | "redirect"
              | UnknownEnumStringValue
          }
          subscription_cancel?: {
            retention?: {
              coupon_offer: {
                coupon: string
              }
              type: "coupon_offer" | UnknownEnumStringValue
            }
            subscription: string
          }
          subscription_update?: {
            subscription: string
          }
          subscription_update_confirm?: {
            discounts?: {
              coupon?: string
              promotion_code?: string
            }[]
            items: {
              id: string
              price?: string
              quantity?: number
            }[]
            subscription: string
          }
          type:
            | "payment_method_update"
            | "subscription_cancel"
            | "subscription_update"
            | "subscription_update_confirm"
            | UnknownEnumStringValue
        }
        locale?:
          | "auto"
          | "bg"
          | "cs"
          | "da"
          | "de"
          | "el"
          | "en"
          | "en-AU"
          | "en-CA"
          | "en-GB"
          | "en-IE"
          | "en-IN"
          | "en-NZ"
          | "en-SG"
          | "es"
          | "es-419"
          | "et"
          | "fi"
          | "fil"
          | "fr"
          | "fr-CA"
          | "hr"
          | "hu"
          | "id"
          | "it"
          | "ja"
          | "ko"
          | "lt"
          | "lv"
          | "ms"
          | "mt"
          | "nb"
          | "nl"
          | "pl"
          | "pt"
          | "pt-BR"
          | "ro"
          | "ru"
          | "sk"
          | "sl"
          | "sv"
          | "th"
          | "tr"
          | "vi"
          | "zh"
          | "zh-HK"
          | "zh-TW"
          | UnknownEnumStringValue
        on_behalf_of?: string
        return_url?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_billing_portal_session> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/billing_portal/sessions`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      flow_data: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getCharges(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      paymentIntent?: string
      startingAfter?: string
      transferGroup?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_charge[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/charges`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      payment_intent: p["paymentIntent"],
      starting_after: p["startingAfter"],
      transfer_group: p["transferGroup"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postCharges(
    p: {
      requestBody?: {
        amount?: number
        application_fee?: number
        application_fee_amount?: number
        capture?: boolean
        card?:
          | {
              address_city?: string
              address_country?: string
              address_line1?: string
              address_line2?: string
              address_state?: string
              address_zip?: string
              cvc?: string
              exp_month: number
              exp_year: number
              metadata?: {
                [key: string]: string | undefined
              }
              name?: string
              number: string
              object?: "card" | UnknownEnumStringValue
            }
          | string
        currency?: string
        customer?: string
        description?: string
        destination?:
          | {
              account: string
              amount?: number
            }
          | string
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        on_behalf_of?: string
        radar_options?: {
          session?: string
        }
        receipt_email?: string
        shipping?: {
          address: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
          }
          carrier?: string
          name: string
          phone?: string
          tracking_number?: string
        }
        source?: string
        statement_descriptor?: string
        statement_descriptor_suffix?: string
        transfer_data?: {
          amount?: number
          destination: string
        }
        transfer_group?: string
      }
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_charge> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/charges`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            card: {explode: true, style: "deepObject"},
            destination: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            radar_options: {explode: true, style: "deepObject"},
            shipping: {explode: true, style: "deepObject"},
            transfer_data: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getChargesSearch(
    p: {
      expand?: string[]
      limit?: number
      page?: string
      query: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_charge[]
          has_more: boolean
          next_page?: string | null
          object: "search_result" | UnknownEnumStringValue
          total_count?: number
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/charges/search`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      expand: p["expand"],
      limit: p["limit"],
      page: p["page"],
      query: p["query"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getChargesCharge(
    p: {
      charge: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_charge> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/charges/${p["charge"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postChargesCharge(
    p: {
      charge: string
      requestBody?: {
        customer?: string
        description?: string
        expand?: string[]
        fraud_details?: {
          user_report: "" | "fraudulent" | "safe" | UnknownEnumStringValue
        }
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        receipt_email?: string
        shipping?: {
          address: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
          }
          carrier?: string
          name: string
          phone?: string
          tracking_number?: string
        }
        transfer_group?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_charge> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/charges/${p["charge"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            fraud_details: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            shipping: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postChargesChargeCapture(
    p: {
      charge: string
      requestBody?: {
        amount?: number
        application_fee?: number
        application_fee_amount?: number
        expand?: string[]
        receipt_email?: string
        statement_descriptor?: string
        statement_descriptor_suffix?: string
        transfer_data?: {
          amount?: number
        }
        transfer_group?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_charge> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/charges/${p["charge"]}/capture`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            transfer_data: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getChargesChargeDispute(
    p: {
      charge: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_dispute> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/charges/${p["charge"]}/dispute`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postChargesChargeDispute(
    p: {
      charge: string
      requestBody?: {
        evidence?: {
          access_activity_log?: string
          billing_address?: string
          cancellation_policy?: string
          cancellation_policy_disclosure?: string
          cancellation_rebuttal?: string
          customer_communication?: string
          customer_email_address?: string
          customer_name?: string
          customer_purchase_ip?: string
          customer_signature?: string
          duplicate_charge_documentation?: string
          duplicate_charge_explanation?: string
          duplicate_charge_id?: string
          enhanced_evidence?:
            | {
                visa_compelling_evidence_3?: {
                  disputed_transaction?: {
                    customer_account_id?: string | "" | UnknownEnumStringValue
                    customer_device_fingerprint?:
                      | string
                      | ""
                      | UnknownEnumStringValue
                    customer_device_id?: string | "" | UnknownEnumStringValue
                    customer_email_address?:
                      | string
                      | ""
                      | UnknownEnumStringValue
                    customer_purchase_ip?: string | "" | UnknownEnumStringValue
                    merchandise_or_services?:
                      | "merchandise"
                      | "services"
                      | UnknownEnumStringValue
                    product_description?: string | "" | UnknownEnumStringValue
                    shipping_address?: {
                      city?: string | "" | UnknownEnumStringValue
                      country?: string | "" | UnknownEnumStringValue
                      line1?: string | "" | UnknownEnumStringValue
                      line2?: string | "" | UnknownEnumStringValue
                      postal_code?: string | "" | UnknownEnumStringValue
                      state?: string | "" | UnknownEnumStringValue
                    }
                  }
                  prior_undisputed_transactions?: {
                    charge: string
                    customer_account_id?: string | "" | UnknownEnumStringValue
                    customer_device_fingerprint?:
                      | string
                      | ""
                      | UnknownEnumStringValue
                    customer_device_id?: string | "" | UnknownEnumStringValue
                    customer_email_address?:
                      | string
                      | ""
                      | UnknownEnumStringValue
                    customer_purchase_ip?: string | "" | UnknownEnumStringValue
                    product_description?: string | "" | UnknownEnumStringValue
                    shipping_address?: {
                      city?: string | "" | UnknownEnumStringValue
                      country?: string | "" | UnknownEnumStringValue
                      line1?: string | "" | UnknownEnumStringValue
                      line2?: string | "" | UnknownEnumStringValue
                      postal_code?: string | "" | UnknownEnumStringValue
                      state?: string | "" | UnknownEnumStringValue
                    }
                  }[]
                }
                visa_compliance?: {
                  fee_acknowledged?: boolean
                }
              }
            | ""
            | UnknownEnumStringValue
          product_description?: string
          receipt?: string
          refund_policy?: string
          refund_policy_disclosure?: string
          refund_refusal_explanation?: string
          service_date?: string
          service_documentation?: string
          shipping_address?: string
          shipping_carrier?: string
          shipping_date?: string
          shipping_documentation?: string
          shipping_tracking_number?: string
          uncategorized_file?: string
          uncategorized_text?: string
        }
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        submit?: boolean
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_dispute> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/charges/${p["charge"]}/dispute`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            evidence: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postChargesChargeDisputeClose(
    p: {
      charge: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_dispute> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/charges/${p["charge"]}/dispute/close`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postChargesChargeRefund(
    p: {
      charge: string
      requestBody?: {
        amount?: number
        expand?: string[]
        instructions_email?: string
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        payment_intent?: string
        reason?:
          | "duplicate"
          | "fraudulent"
          | "requested_by_customer"
          | UnknownEnumStringValue
        refund_application_fee?: boolean
        reverse_transfer?: boolean
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_charge> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/charges/${p["charge"]}/refund`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getChargesChargeRefunds(
    p: {
      charge: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_refund[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/charges/${p["charge"]}/refunds`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postChargesChargeRefunds(
    p: {
      charge: string
      requestBody?: {
        amount?: number
        currency?: string
        customer?: string
        expand?: string[]
        instructions_email?: string
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        origin?: "customer_balance" | UnknownEnumStringValue
        payment_intent?: string
        reason?:
          | "duplicate"
          | "fraudulent"
          | "requested_by_customer"
          | UnknownEnumStringValue
        refund_application_fee?: boolean
        reverse_transfer?: boolean
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_refund> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/charges/${p["charge"]}/refunds`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getChargesChargeRefundsRefund(
    p: {
      charge: string
      expand?: string[]
      refund: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_refund> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/charges/${p["charge"]}/refunds/${p["refund"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postChargesChargeRefundsRefund(
    p: {
      charge: string
      refund: string
      requestBody?: {
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_refund> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/charges/${p["charge"]}/refunds/${p["refund"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getCheckoutSessions(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      customer?: string
      customerDetails?: {
        email: string
      }
      endingBefore?: string
      expand?: string[]
      limit?: number
      paymentIntent?: string
      paymentLink?: string
      startingAfter?: string
      status?: "complete" | "expired" | "open" | UnknownEnumStringValue
      subscription?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_checkout_session[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/checkout/sessions`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      customer: p["customer"],
      customer_details: p["customerDetails"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      payment_intent: p["paymentIntent"],
      payment_link: p["paymentLink"],
      starting_after: p["startingAfter"],
      status: p["status"],
      subscription: p["subscription"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postCheckoutSessions(
    p: {
      requestBody?: {
        adaptive_pricing?: {
          enabled?: boolean
        }
        after_expiration?: {
          recovery?: {
            allow_promotion_codes?: boolean
            enabled: boolean
          }
        }
        allow_promotion_codes?: boolean
        automatic_tax?: {
          enabled: boolean
          liability?: {
            account?: string
            type: "account" | "self" | UnknownEnumStringValue
          }
        }
        billing_address_collection?:
          | "auto"
          | "required"
          | UnknownEnumStringValue
        cancel_url?: string
        client_reference_id?: string
        consent_collection?: {
          payment_method_reuse_agreement?: {
            position: "auto" | "hidden" | UnknownEnumStringValue
          }
          promotions?: "auto" | "none" | UnknownEnumStringValue
          terms_of_service?: "none" | "required" | UnknownEnumStringValue
        }
        currency?: string
        custom_fields?: {
          dropdown?: {
            default_value?: string
            options: {
              label: string
              value: string
            }[]
          }
          key: string
          label: {
            custom: string
            type: "custom" | UnknownEnumStringValue
          }
          numeric?: {
            default_value?: string
            maximum_length?: number
            minimum_length?: number
          }
          optional?: boolean
          text?: {
            default_value?: string
            maximum_length?: number
            minimum_length?: number
          }
          type: "dropdown" | "numeric" | "text" | UnknownEnumStringValue
        }[]
        custom_text?: {
          after_submit?:
            | {
                message: string
              }
            | ""
            | UnknownEnumStringValue
          shipping_address?:
            | {
                message: string
              }
            | ""
            | UnknownEnumStringValue
          submit?:
            | {
                message: string
              }
            | ""
            | UnknownEnumStringValue
          terms_of_service_acceptance?:
            | {
                message: string
              }
            | ""
            | UnknownEnumStringValue
        }
        customer?: string
        customer_creation?: "always" | "if_required" | UnknownEnumStringValue
        customer_email?: string
        customer_update?: {
          address?: "auto" | "never" | UnknownEnumStringValue
          name?: "auto" | "never" | UnknownEnumStringValue
          shipping?: "auto" | "never" | UnknownEnumStringValue
        }
        discounts?: {
          coupon?: string
          promotion_code?: string
        }[]
        expand?: string[]
        expires_at?: number
        invoice_creation?: {
          enabled: boolean
          invoice_data?: {
            account_tax_ids?: string[] | "" | UnknownEnumStringValue
            custom_fields?:
              | {
                  name: string
                  value: string
                }[]
              | ""
              | UnknownEnumStringValue
            description?: string
            footer?: string
            issuer?: {
              account?: string
              type: "account" | "self" | UnknownEnumStringValue
            }
            metadata?: {
              [key: string]: string | undefined
            }
            rendering_options?:
              | {
                  amount_tax_display?:
                    | ""
                    | "exclude_tax"
                    | "include_inclusive_tax"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
          }
        }
        line_items?: {
          adjustable_quantity?: {
            enabled: boolean
            maximum?: number
            minimum?: number
          }
          dynamic_tax_rates?: string[]
          price?: string
          price_data?: {
            currency: string
            product?: string
            product_data?: {
              description?: string
              images?: string[]
              metadata?: {
                [key: string]: string | undefined
              }
              name: string
              tax_code?: string
            }
            recurring?: {
              interval:
                | "day"
                | "month"
                | "week"
                | "year"
                | UnknownEnumStringValue
              interval_count?: number
            }
            tax_behavior?:
              | "exclusive"
              | "inclusive"
              | "unspecified"
              | UnknownEnumStringValue
            unit_amount?: number
            unit_amount_decimal?: string
          }
          quantity?: number
          tax_rates?: string[]
        }[]
        locale?:
          | "auto"
          | "bg"
          | "cs"
          | "da"
          | "de"
          | "el"
          | "en"
          | "en-GB"
          | "es"
          | "es-419"
          | "et"
          | "fi"
          | "fil"
          | "fr"
          | "fr-CA"
          | "hr"
          | "hu"
          | "id"
          | "it"
          | "ja"
          | "ko"
          | "lt"
          | "lv"
          | "ms"
          | "mt"
          | "nb"
          | "nl"
          | "pl"
          | "pt"
          | "pt-BR"
          | "ro"
          | "ru"
          | "sk"
          | "sl"
          | "sv"
          | "th"
          | "tr"
          | "vi"
          | "zh"
          | "zh-HK"
          | "zh-TW"
          | UnknownEnumStringValue
        metadata?: {
          [key: string]: string | undefined
        }
        mode?: "payment" | "setup" | "subscription" | UnknownEnumStringValue
        optional_items?: {
          adjustable_quantity?: {
            enabled: boolean
            maximum?: number
            minimum?: number
          }
          price: string
          quantity: number
        }[]
        payment_intent_data?: {
          application_fee_amount?: number
          capture_method?:
            | "automatic"
            | "automatic_async"
            | "manual"
            | UnknownEnumStringValue
          description?: string
          metadata?: {
            [key: string]: string | undefined
          }
          on_behalf_of?: string
          receipt_email?: string
          setup_future_usage?:
            | "off_session"
            | "on_session"
            | UnknownEnumStringValue
          shipping?: {
            address: {
              city?: string
              country?: string
              line1: string
              line2?: string
              postal_code?: string
              state?: string
            }
            carrier?: string
            name: string
            phone?: string
            tracking_number?: string
          }
          statement_descriptor?: string
          statement_descriptor_suffix?: string
          transfer_data?: {
            amount?: number
            destination: string
          }
          transfer_group?: string
        }
        payment_method_collection?:
          | "always"
          | "if_required"
          | UnknownEnumStringValue
        payment_method_configuration?: string
        payment_method_data?: {
          allow_redisplay?:
            | "always"
            | "limited"
            | "unspecified"
            | UnknownEnumStringValue
        }
        payment_method_options?: {
          acss_debit?: {
            currency?: "cad" | "usd" | UnknownEnumStringValue
            mandate_options?: {
              custom_mandate_url?: string | "" | UnknownEnumStringValue
              default_for?: (
                | "invoice"
                | "subscription"
                | UnknownEnumStringValue
              )[]
              interval_description?: string
              payment_schedule?:
                | "combined"
                | "interval"
                | "sporadic"
                | UnknownEnumStringValue
              transaction_type?:
                | "business"
                | "personal"
                | UnknownEnumStringValue
            }
            setup_future_usage?:
              | "none"
              | "off_session"
              | "on_session"
              | UnknownEnumStringValue
            target_date?: string
            verification_method?:
              | "automatic"
              | "instant"
              | "microdeposits"
              | UnknownEnumStringValue
          }
          affirm?: {
            setup_future_usage?: "none" | UnknownEnumStringValue
          }
          afterpay_clearpay?: {
            setup_future_usage?: "none" | UnknownEnumStringValue
          }
          alipay?: {
            setup_future_usage?: "none" | UnknownEnumStringValue
          }
          amazon_pay?: {
            setup_future_usage?: "none" | "off_session" | UnknownEnumStringValue
          }
          au_becs_debit?: {
            setup_future_usage?: "none" | UnknownEnumStringValue
            target_date?: string
          }
          bacs_debit?: {
            mandate_options?: {
              reference_prefix?: string | "" | UnknownEnumStringValue
            }
            setup_future_usage?:
              | "none"
              | "off_session"
              | "on_session"
              | UnknownEnumStringValue
            target_date?: string
          }
          bancontact?: {
            setup_future_usage?: "none" | UnknownEnumStringValue
          }
          boleto?: {
            expires_after_days?: number
            setup_future_usage?:
              | "none"
              | "off_session"
              | "on_session"
              | UnknownEnumStringValue
          }
          card?: {
            installments?: {
              enabled?: boolean
            }
            request_extended_authorization?:
              | "if_available"
              | "never"
              | UnknownEnumStringValue
            request_incremental_authorization?:
              | "if_available"
              | "never"
              | UnknownEnumStringValue
            request_multicapture?:
              | "if_available"
              | "never"
              | UnknownEnumStringValue
            request_overcapture?:
              | "if_available"
              | "never"
              | UnknownEnumStringValue
            request_three_d_secure?:
              | "any"
              | "automatic"
              | "challenge"
              | UnknownEnumStringValue
            restrictions?: {
              brands_blocked?: (
                | "american_express"
                | "discover_global_network"
                | "mastercard"
                | "visa"
                | UnknownEnumStringValue
              )[]
            }
            setup_future_usage?:
              | "off_session"
              | "on_session"
              | UnknownEnumStringValue
            statement_descriptor_suffix_kana?: string
            statement_descriptor_suffix_kanji?: string
          }
          cashapp?: {
            setup_future_usage?:
              | "none"
              | "off_session"
              | "on_session"
              | UnknownEnumStringValue
          }
          customer_balance?: {
            bank_transfer?: {
              eu_bank_transfer?: {
                country: string
              }
              requested_address_types?: (
                | "aba"
                | "iban"
                | "sepa"
                | "sort_code"
                | "spei"
                | "swift"
                | "zengin"
                | UnknownEnumStringValue
              )[]
              type:
                | "eu_bank_transfer"
                | "gb_bank_transfer"
                | "jp_bank_transfer"
                | "mx_bank_transfer"
                | "us_bank_transfer"
                | UnknownEnumStringValue
            }
            funding_type?: "bank_transfer" | UnknownEnumStringValue
            setup_future_usage?: "none" | UnknownEnumStringValue
          }
          eps?: {
            setup_future_usage?: "none" | UnknownEnumStringValue
          }
          fpx?: {
            setup_future_usage?: "none" | UnknownEnumStringValue
          }
          giropay?: {
            setup_future_usage?: "none" | UnknownEnumStringValue
          }
          grabpay?: {
            setup_future_usage?: "none" | UnknownEnumStringValue
          }
          ideal?: {
            setup_future_usage?: "none" | UnknownEnumStringValue
          }
          kakao_pay?: {
            capture_method?: "manual" | UnknownEnumStringValue
            setup_future_usage?: "none" | "off_session" | UnknownEnumStringValue
          }
          klarna?: {
            setup_future_usage?: "none" | UnknownEnumStringValue
            subscriptions?:
              | {
                  interval:
                    | "day"
                    | "month"
                    | "week"
                    | "year"
                    | UnknownEnumStringValue
                  interval_count?: number
                  name?: string
                  next_billing: {
                    amount: number
                    date: string
                  }
                  reference: string
                }[]
              | ""
              | UnknownEnumStringValue
          }
          konbini?: {
            expires_after_days?: number
            setup_future_usage?: "none" | UnknownEnumStringValue
          }
          kr_card?: {
            capture_method?: "manual" | UnknownEnumStringValue
            setup_future_usage?: "none" | "off_session" | UnknownEnumStringValue
          }
          link?: {
            setup_future_usage?: "none" | "off_session" | UnknownEnumStringValue
          }
          mobilepay?: {
            setup_future_usage?: "none" | UnknownEnumStringValue
          }
          multibanco?: {
            setup_future_usage?: "none" | UnknownEnumStringValue
          }
          naver_pay?: {
            capture_method?: "manual" | UnknownEnumStringValue
            setup_future_usage?: "none" | "off_session" | UnknownEnumStringValue
          }
          oxxo?: {
            expires_after_days?: number
            setup_future_usage?: "none" | UnknownEnumStringValue
          }
          p24?: {
            setup_future_usage?: "none" | UnknownEnumStringValue
            tos_shown_and_accepted?: boolean
          }
          pay_by_bank?: EmptyObject
          payco?: {
            capture_method?: "manual" | UnknownEnumStringValue
          }
          paynow?: {
            setup_future_usage?: "none" | UnknownEnumStringValue
          }
          paypal?: {
            capture_method?: "" | "manual" | UnknownEnumStringValue
            preferred_locale?:
              | "cs-CZ"
              | "da-DK"
              | "de-AT"
              | "de-DE"
              | "de-LU"
              | "el-GR"
              | "en-GB"
              | "en-US"
              | "es-ES"
              | "fi-FI"
              | "fr-BE"
              | "fr-FR"
              | "fr-LU"
              | "hu-HU"
              | "it-IT"
              | "nl-BE"
              | "nl-NL"
              | "pl-PL"
              | "pt-PT"
              | "sk-SK"
              | "sv-SE"
              | UnknownEnumStringValue
            reference?: string
            risk_correlation_id?: string
            setup_future_usage?:
              | ""
              | "none"
              | "off_session"
              | UnknownEnumStringValue
          }
          pix?: {
            expires_after_seconds?: number
          }
          revolut_pay?: {
            setup_future_usage?: "none" | "off_session" | UnknownEnumStringValue
          }
          samsung_pay?: {
            capture_method?: "manual" | UnknownEnumStringValue
          }
          sepa_debit?: {
            mandate_options?: {
              reference_prefix?: string | "" | UnknownEnumStringValue
            }
            setup_future_usage?:
              | "none"
              | "off_session"
              | "on_session"
              | UnknownEnumStringValue
            target_date?: string
          }
          sofort?: {
            setup_future_usage?: "none" | UnknownEnumStringValue
          }
          swish?: {
            reference?: string
          }
          us_bank_account?: {
            financial_connections?: {
              permissions?: (
                | "balances"
                | "ownership"
                | "payment_method"
                | "transactions"
                | UnknownEnumStringValue
              )[]
              prefetch?: (
                | "balances"
                | "ownership"
                | "transactions"
                | UnknownEnumStringValue
              )[]
            }
            setup_future_usage?:
              | "none"
              | "off_session"
              | "on_session"
              | UnknownEnumStringValue
            target_date?: string
            verification_method?:
              | "automatic"
              | "instant"
              | UnknownEnumStringValue
          }
          wechat_pay?: {
            app_id?: string
            client: "android" | "ios" | "web" | UnknownEnumStringValue
            setup_future_usage?: "none" | UnknownEnumStringValue
          }
        }
        payment_method_types?: (
          | "acss_debit"
          | "affirm"
          | "afterpay_clearpay"
          | "alipay"
          | "alma"
          | "amazon_pay"
          | "au_becs_debit"
          | "bacs_debit"
          | "bancontact"
          | "billie"
          | "blik"
          | "boleto"
          | "card"
          | "cashapp"
          | "crypto"
          | "customer_balance"
          | "eps"
          | "fpx"
          | "giropay"
          | "grabpay"
          | "ideal"
          | "kakao_pay"
          | "klarna"
          | "konbini"
          | "kr_card"
          | "link"
          | "mobilepay"
          | "multibanco"
          | "naver_pay"
          | "oxxo"
          | "p24"
          | "pay_by_bank"
          | "payco"
          | "paynow"
          | "paypal"
          | "pix"
          | "promptpay"
          | "revolut_pay"
          | "samsung_pay"
          | "satispay"
          | "sepa_debit"
          | "sofort"
          | "swish"
          | "twint"
          | "us_bank_account"
          | "wechat_pay"
          | "zip"
          | UnknownEnumStringValue
        )[]
        permissions?: {
          update_shipping_details?:
            | "client_only"
            | "server_only"
            | UnknownEnumStringValue
        }
        phone_number_collection?: {
          enabled: boolean
        }
        redirect_on_completion?:
          | "always"
          | "if_required"
          | "never"
          | UnknownEnumStringValue
        return_url?: string
        saved_payment_method_options?: {
          allow_redisplay_filters?: (
            | "always"
            | "limited"
            | "unspecified"
            | UnknownEnumStringValue
          )[]
          payment_method_remove?:
            | "disabled"
            | "enabled"
            | UnknownEnumStringValue
          payment_method_save?: "disabled" | "enabled" | UnknownEnumStringValue
        }
        setup_intent_data?: {
          description?: string
          metadata?: {
            [key: string]: string | undefined
          }
          on_behalf_of?: string
        }
        shipping_address_collection?: {
          allowed_countries: (
            | "AC"
            | "AD"
            | "AE"
            | "AF"
            | "AG"
            | "AI"
            | "AL"
            | "AM"
            | "AO"
            | "AQ"
            | "AR"
            | "AT"
            | "AU"
            | "AW"
            | "AX"
            | "AZ"
            | "BA"
            | "BB"
            | "BD"
            | "BE"
            | "BF"
            | "BG"
            | "BH"
            | "BI"
            | "BJ"
            | "BL"
            | "BM"
            | "BN"
            | "BO"
            | "BQ"
            | "BR"
            | "BS"
            | "BT"
            | "BV"
            | "BW"
            | "BY"
            | "BZ"
            | "CA"
            | "CD"
            | "CF"
            | "CG"
            | "CH"
            | "CI"
            | "CK"
            | "CL"
            | "CM"
            | "CN"
            | "CO"
            | "CR"
            | "CV"
            | "CW"
            | "CY"
            | "CZ"
            | "DE"
            | "DJ"
            | "DK"
            | "DM"
            | "DO"
            | "DZ"
            | "EC"
            | "EE"
            | "EG"
            | "EH"
            | "ER"
            | "ES"
            | "ET"
            | "FI"
            | "FJ"
            | "FK"
            | "FO"
            | "FR"
            | "GA"
            | "GB"
            | "GD"
            | "GE"
            | "GF"
            | "GG"
            | "GH"
            | "GI"
            | "GL"
            | "GM"
            | "GN"
            | "GP"
            | "GQ"
            | "GR"
            | "GS"
            | "GT"
            | "GU"
            | "GW"
            | "GY"
            | "HK"
            | "HN"
            | "HR"
            | "HT"
            | "HU"
            | "ID"
            | "IE"
            | "IL"
            | "IM"
            | "IN"
            | "IO"
            | "IQ"
            | "IS"
            | "IT"
            | "JE"
            | "JM"
            | "JO"
            | "JP"
            | "KE"
            | "KG"
            | "KH"
            | "KI"
            | "KM"
            | "KN"
            | "KR"
            | "KW"
            | "KY"
            | "KZ"
            | "LA"
            | "LB"
            | "LC"
            | "LI"
            | "LK"
            | "LR"
            | "LS"
            | "LT"
            | "LU"
            | "LV"
            | "LY"
            | "MA"
            | "MC"
            | "MD"
            | "ME"
            | "MF"
            | "MG"
            | "MK"
            | "ML"
            | "MM"
            | "MN"
            | "MO"
            | "MQ"
            | "MR"
            | "MS"
            | "MT"
            | "MU"
            | "MV"
            | "MW"
            | "MX"
            | "MY"
            | "MZ"
            | "NA"
            | "NC"
            | "NE"
            | "NG"
            | "NI"
            | "NL"
            | "NO"
            | "NP"
            | "NR"
            | "NU"
            | "NZ"
            | "OM"
            | "PA"
            | "PE"
            | "PF"
            | "PG"
            | "PH"
            | "PK"
            | "PL"
            | "PM"
            | "PN"
            | "PR"
            | "PS"
            | "PT"
            | "PY"
            | "QA"
            | "RE"
            | "RO"
            | "RS"
            | "RU"
            | "RW"
            | "SA"
            | "SB"
            | "SC"
            | "SD"
            | "SE"
            | "SG"
            | "SH"
            | "SI"
            | "SJ"
            | "SK"
            | "SL"
            | "SM"
            | "SN"
            | "SO"
            | "SR"
            | "SS"
            | "ST"
            | "SV"
            | "SX"
            | "SZ"
            | "TA"
            | "TC"
            | "TD"
            | "TF"
            | "TG"
            | "TH"
            | "TJ"
            | "TK"
            | "TL"
            | "TM"
            | "TN"
            | "TO"
            | "TR"
            | "TT"
            | "TV"
            | "TW"
            | "TZ"
            | "UA"
            | "UG"
            | "US"
            | "UY"
            | "UZ"
            | "VA"
            | "VC"
            | "VE"
            | "VG"
            | "VN"
            | "VU"
            | "WF"
            | "WS"
            | "XK"
            | "YE"
            | "YT"
            | "ZA"
            | "ZM"
            | "ZW"
            | "ZZ"
            | UnknownEnumStringValue
          )[]
        }
        shipping_options?: {
          shipping_rate?: string
          shipping_rate_data?: {
            delivery_estimate?: {
              maximum?: {
                unit:
                  | "business_day"
                  | "day"
                  | "hour"
                  | "month"
                  | "week"
                  | UnknownEnumStringValue
                value: number
              }
              minimum?: {
                unit:
                  | "business_day"
                  | "day"
                  | "hour"
                  | "month"
                  | "week"
                  | UnknownEnumStringValue
                value: number
              }
            }
            display_name: string
            fixed_amount?: {
              amount: number
              currency: string
              currency_options?: {
                [key: string]:
                  | {
                      amount: number
                      tax_behavior?:
                        | "exclusive"
                        | "inclusive"
                        | "unspecified"
                        | UnknownEnumStringValue
                    }
                  | undefined
              }
            }
            metadata?: {
              [key: string]: string | undefined
            }
            tax_behavior?:
              | "exclusive"
              | "inclusive"
              | "unspecified"
              | UnknownEnumStringValue
            tax_code?: string
            type?: "fixed_amount" | UnknownEnumStringValue
          }
        }[]
        submit_type?:
          | "auto"
          | "book"
          | "donate"
          | "pay"
          | "subscribe"
          | UnknownEnumStringValue
        subscription_data?: {
          application_fee_percent?: number
          billing_cycle_anchor?: number
          billing_mode?: {
            type: "classic" | "flexible" | UnknownEnumStringValue
          }
          default_tax_rates?: string[]
          description?: string
          invoice_settings?: {
            issuer?: {
              account?: string
              type: "account" | "self" | UnknownEnumStringValue
            }
          }
          metadata?: {
            [key: string]: string | undefined
          }
          on_behalf_of?: string
          proration_behavior?:
            | "create_prorations"
            | "none"
            | UnknownEnumStringValue
          transfer_data?: {
            amount_percent?: number
            destination: string
          }
          trial_end?: number
          trial_period_days?: number
          trial_settings?: {
            end_behavior: {
              missing_payment_method:
                | "cancel"
                | "create_invoice"
                | "pause"
                | UnknownEnumStringValue
            }
          }
        }
        success_url?: string
        tax_id_collection?: {
          enabled: boolean
          required?: "if_supported" | "never" | UnknownEnumStringValue
        }
        ui_mode?: "custom" | "embedded" | "hosted" | UnknownEnumStringValue
        wallet_options?: {
          link?: {
            display?: "auto" | "never" | UnknownEnumStringValue
          }
        }
      }
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_checkout_session> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/checkout/sessions`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            adaptive_pricing: {explode: true, style: "deepObject"},
            after_expiration: {explode: true, style: "deepObject"},
            automatic_tax: {explode: true, style: "deepObject"},
            consent_collection: {explode: true, style: "deepObject"},
            custom_fields: {explode: true, style: "deepObject"},
            custom_text: {explode: true, style: "deepObject"},
            customer_update: {explode: true, style: "deepObject"},
            discounts: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            invoice_creation: {explode: true, style: "deepObject"},
            line_items: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            optional_items: {explode: true, style: "deepObject"},
            payment_intent_data: {explode: true, style: "deepObject"},
            payment_method_data: {explode: true, style: "deepObject"},
            payment_method_options: {explode: true, style: "deepObject"},
            payment_method_types: {explode: true, style: "deepObject"},
            permissions: {explode: true, style: "deepObject"},
            phone_number_collection: {explode: true, style: "deepObject"},
            saved_payment_method_options: {explode: true, style: "deepObject"},
            setup_intent_data: {explode: true, style: "deepObject"},
            shipping_address_collection: {explode: true, style: "deepObject"},
            shipping_options: {explode: true, style: "deepObject"},
            subscription_data: {explode: true, style: "deepObject"},
            tax_id_collection: {explode: true, style: "deepObject"},
            wallet_options: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getCheckoutSessionsSession(
    p: {
      expand?: string[]
      session: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_checkout_session> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/checkout/sessions/${p["session"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postCheckoutSessionsSession(
    p: {
      session: string
      requestBody?: {
        collected_information?: {
          shipping_details?: {
            address: {
              city?: string
              country: string
              line1: string
              line2?: string
              postal_code?: string
              state?: string
            }
            name: string
          }
        }
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        shipping_options?:
          | {
              shipping_rate?: string
              shipping_rate_data?: {
                delivery_estimate?: {
                  maximum?: {
                    unit:
                      | "business_day"
                      | "day"
                      | "hour"
                      | "month"
                      | "week"
                      | UnknownEnumStringValue
                    value: number
                  }
                  minimum?: {
                    unit:
                      | "business_day"
                      | "day"
                      | "hour"
                      | "month"
                      | "week"
                      | UnknownEnumStringValue
                    value: number
                  }
                }
                display_name: string
                fixed_amount?: {
                  amount: number
                  currency: string
                  currency_options?: {
                    [key: string]:
                      | {
                          amount: number
                          tax_behavior?:
                            | "exclusive"
                            | "inclusive"
                            | "unspecified"
                            | UnknownEnumStringValue
                        }
                      | undefined
                  }
                }
                metadata?: {
                  [key: string]: string | undefined
                }
                tax_behavior?:
                  | "exclusive"
                  | "inclusive"
                  | "unspecified"
                  | UnknownEnumStringValue
                tax_code?: string
                type?: "fixed_amount" | UnknownEnumStringValue
              }
            }[]
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_checkout_session> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/checkout/sessions/${p["session"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            collected_information: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            shipping_options: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postCheckoutSessionsSessionExpire(
    p: {
      session: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_checkout_session> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/checkout/sessions/${p["session"]}/expire`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getCheckoutSessionsSessionLineItems(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      session: string
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_item[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/checkout/sessions/${p["session"]}/line_items`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getClimateOrders(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_climate_order[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/climate/orders`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postClimateOrders(
    p: {
      requestBody: {
        amount?: number
        beneficiary?: {
          public_name: string
        }
        currency?: string
        expand?: string[]
        metadata?: {
          [key: string]: string | undefined
        }
        metric_tons?: string
        product: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_climate_order> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/climate/orders`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      beneficiary: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getClimateOrdersOrder(
    p: {
      expand?: string[]
      order: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_climate_order> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/climate/orders/${p["order"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postClimateOrdersOrder(
    p: {
      order: string
      requestBody?: {
        beneficiary?:
          | {
              public_name: string | "" | UnknownEnumStringValue
            }
          | ""
          | UnknownEnumStringValue
        expand?: string[]
        metadata?: {
          [key: string]: string | undefined
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_climate_order> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/climate/orders/${p["order"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            beneficiary: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postClimateOrdersOrderCancel(
    p: {
      order: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_climate_order> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/climate/orders/${p["order"]}/cancel`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getClimateProducts(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_climate_product[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/climate/products`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getClimateProductsProduct(
    p: {
      expand?: string[]
      product: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_climate_product> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/climate/products/${p["product"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getClimateSuppliers(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_climate_supplier[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/climate/suppliers`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getClimateSuppliersSupplier(
    p: {
      expand?: string[]
      supplier: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_climate_supplier> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/climate/suppliers/${p["supplier"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getConfirmationTokensConfirmationToken(
    p: {
      confirmationToken: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_confirmation_token> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/confirmation_tokens/${p["confirmationToken"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getCountrySpecs(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_country_spec[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/country_specs`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getCountrySpecsCountry(
    p: {
      country: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_country_spec> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/country_specs/${p["country"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getCoupons(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_coupon[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/coupons`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postCoupons(
    p: {
      requestBody?: {
        amount_off?: number
        applies_to?: {
          products?: string[]
        }
        currency?: string
        currency_options?: {
          [key: string]:
            | {
                amount_off: number
              }
            | undefined
        }
        duration?: "forever" | "once" | "repeating" | UnknownEnumStringValue
        duration_in_months?: number
        expand?: string[]
        id?: string
        max_redemptions?: number
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        name?: string
        percent_off?: number
        redeem_by?: number
      }
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_coupon> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/coupons`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            applies_to: {explode: true, style: "deepObject"},
            currency_options: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteCouponsCoupon(
    p: {
      coupon: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_deleted_coupon> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/coupons/${p["coupon"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async getCouponsCoupon(
    p: {
      coupon: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_coupon> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/coupons/${p["coupon"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postCouponsCoupon(
    p: {
      coupon: string
      requestBody?: {
        currency_options?: {
          [key: string]:
            | {
                amount_off: number
              }
            | undefined
        }
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        name?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_coupon> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/coupons/${p["coupon"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            currency_options: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getCreditNotes(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      invoice?: string
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_credit_note[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/credit_notes`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      invoice: p["invoice"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postCreditNotes(
    p: {
      requestBody: {
        amount?: number
        credit_amount?: number
        effective_at?: number
        email_type?: "credit_note" | "none" | UnknownEnumStringValue
        expand?: string[]
        invoice: string
        lines?: {
          amount?: number
          description?: string
          invoice_line_item?: string
          quantity?: number
          tax_amounts?:
            | {
                amount: number
                tax_rate: string
                taxable_amount: number
              }[]
            | ""
            | UnknownEnumStringValue
          tax_rates?: string[] | "" | UnknownEnumStringValue
          type:
            | "custom_line_item"
            | "invoice_line_item"
            | UnknownEnumStringValue
          unit_amount?: number
          unit_amount_decimal?: string
        }[]
        memo?: string
        metadata?: {
          [key: string]: string | undefined
        }
        out_of_band_amount?: number
        reason?:
          | "duplicate"
          | "fraudulent"
          | "order_change"
          | "product_unsatisfactory"
          | UnknownEnumStringValue
        refund_amount?: number
        refunds?: {
          amount_refunded?: number
          refund?: string
        }[]
        shipping_cost?: {
          shipping_rate?: string
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_credit_note> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/credit_notes`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      lines: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
      refunds: {explode: true, style: "deepObject"},
      shipping_cost: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getCreditNotesPreview(
    p: {
      amount?: number
      creditAmount?: number
      effectiveAt?: number
      emailType?: "credit_note" | "none" | UnknownEnumStringValue
      expand?: string[]
      invoice: string
      lines?: {
        amount?: number
        description?: string
        invoice_line_item?: string
        quantity?: number
        tax_amounts?:
          | {
              amount: number
              tax_rate: string
              taxable_amount: number
            }[]
          | ""
          | UnknownEnumStringValue
        tax_rates?: string[] | "" | UnknownEnumStringValue
        type: "custom_line_item" | "invoice_line_item" | UnknownEnumStringValue
        unit_amount?: number
        unit_amount_decimal?: string
      }[]
      memo?: string
      metadata?: {
        [key: string]: string | undefined
      }
      outOfBandAmount?: number
      reason?:
        | "duplicate"
        | "fraudulent"
        | "order_change"
        | "product_unsatisfactory"
        | UnknownEnumStringValue
      refundAmount?: number
      refunds?: {
        amount_refunded?: number
        refund?: string
      }[]
      shippingCost?: {
        shipping_rate?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_credit_note> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/credit_notes/preview`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      amount: p["amount"],
      credit_amount: p["creditAmount"],
      effective_at: p["effectiveAt"],
      email_type: p["emailType"],
      expand: p["expand"],
      invoice: p["invoice"],
      lines: p["lines"],
      memo: p["memo"],
      metadata: p["metadata"],
      out_of_band_amount: p["outOfBandAmount"],
      reason: p["reason"],
      refund_amount: p["refundAmount"],
      refunds: p["refunds"],
      shipping_cost: p["shippingCost"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getCreditNotesPreviewLines(
    p: {
      amount?: number
      creditAmount?: number
      effectiveAt?: number
      emailType?: "credit_note" | "none" | UnknownEnumStringValue
      endingBefore?: string
      expand?: string[]
      invoice: string
      limit?: number
      lines?: {
        amount?: number
        description?: string
        invoice_line_item?: string
        quantity?: number
        tax_amounts?:
          | {
              amount: number
              tax_rate: string
              taxable_amount: number
            }[]
          | ""
          | UnknownEnumStringValue
        tax_rates?: string[] | "" | UnknownEnumStringValue
        type: "custom_line_item" | "invoice_line_item" | UnknownEnumStringValue
        unit_amount?: number
        unit_amount_decimal?: string
      }[]
      memo?: string
      metadata?: {
        [key: string]: string | undefined
      }
      outOfBandAmount?: number
      reason?:
        | "duplicate"
        | "fraudulent"
        | "order_change"
        | "product_unsatisfactory"
        | UnknownEnumStringValue
      refundAmount?: number
      refunds?: {
        amount_refunded?: number
        refund?: string
      }[]
      shippingCost?: {
        shipping_rate?: string
      }
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_credit_note_line_item[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/credit_notes/preview/lines`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      amount: p["amount"],
      credit_amount: p["creditAmount"],
      effective_at: p["effectiveAt"],
      email_type: p["emailType"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      invoice: p["invoice"],
      limit: p["limit"],
      lines: p["lines"],
      memo: p["memo"],
      metadata: p["metadata"],
      out_of_band_amount: p["outOfBandAmount"],
      reason: p["reason"],
      refund_amount: p["refundAmount"],
      refunds: p["refunds"],
      shipping_cost: p["shippingCost"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getCreditNotesCreditNoteLines(
    p: {
      creditNote: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_credit_note_line_item[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/credit_notes/${p["creditNote"]}/lines`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getCreditNotesId(
    p: {
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_credit_note> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/credit_notes/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postCreditNotesId(
    p: {
      id: string
      requestBody?: {
        expand?: string[]
        memo?: string
        metadata?: {
          [key: string]: string | undefined
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_credit_note> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/credit_notes/${p["id"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postCreditNotesIdVoid(
    p: {
      id: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_credit_note> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/credit_notes/${p["id"]}/void`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postCustomerSessions(
    p: {
      requestBody: {
        components: {
          buy_button?: {
            enabled: boolean
          }
          payment_element?: {
            enabled: boolean
            features?: {
              payment_method_allow_redisplay_filters?: (
                | "always"
                | "limited"
                | "unspecified"
                | UnknownEnumStringValue
              )[]
              payment_method_redisplay?:
                | "disabled"
                | "enabled"
                | UnknownEnumStringValue
              payment_method_redisplay_limit?: number
              payment_method_remove?:
                | "disabled"
                | "enabled"
                | UnknownEnumStringValue
              payment_method_save?:
                | "disabled"
                | "enabled"
                | UnknownEnumStringValue
              payment_method_save_usage?:
                | "off_session"
                | "on_session"
                | UnknownEnumStringValue
            }
          }
          pricing_table?: {
            enabled: boolean
          }
        }
        customer: string
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_customer_session> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/customer_sessions`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      components: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getCustomers(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      email?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      testClock?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_customer[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/customers`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      email: p["email"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      test_clock: p["testClock"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postCustomers(
    p: {
      requestBody?: {
        address?:
          | {
              city?: string
              country?: string
              line1?: string
              line2?: string
              postal_code?: string
              state?: string
            }
          | ""
          | UnknownEnumStringValue
        balance?: number
        cash_balance?: {
          settings?: {
            reconciliation_mode?:
              | "automatic"
              | "manual"
              | "merchant_default"
              | UnknownEnumStringValue
          }
        }
        description?: string
        email?: string
        expand?: string[]
        invoice_prefix?: string
        invoice_settings?: {
          custom_fields?:
            | {
                name: string
                value: string
              }[]
            | ""
            | UnknownEnumStringValue
          default_payment_method?: string
          footer?: string
          rendering_options?:
            | {
                amount_tax_display?:
                  | ""
                  | "exclude_tax"
                  | "include_inclusive_tax"
                  | UnknownEnumStringValue
                template?: string
              }
            | ""
            | UnknownEnumStringValue
        }
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        name?: string
        next_invoice_sequence?: number
        payment_method?: string
        phone?: string
        preferred_locales?: string[]
        shipping?:
          | {
              address: {
                city?: string
                country?: string
                line1?: string
                line2?: string
                postal_code?: string
                state?: string
              }
              name: string
              phone?: string
            }
          | ""
          | UnknownEnumStringValue
        source?: string
        tax?: {
          ip_address?: string | "" | UnknownEnumStringValue
          validate_location?:
            | "deferred"
            | "immediately"
            | UnknownEnumStringValue
        }
        tax_exempt?: "" | "exempt" | "none" | "reverse" | UnknownEnumStringValue
        tax_id_data?: {
          type:
            | "ad_nrt"
            | "ae_trn"
            | "al_tin"
            | "am_tin"
            | "ao_tin"
            | "ar_cuit"
            | "au_abn"
            | "au_arn"
            | "aw_tin"
            | "az_tin"
            | "ba_tin"
            | "bb_tin"
            | "bd_bin"
            | "bf_ifu"
            | "bg_uic"
            | "bh_vat"
            | "bj_ifu"
            | "bo_tin"
            | "br_cnpj"
            | "br_cpf"
            | "bs_tin"
            | "by_tin"
            | "ca_bn"
            | "ca_gst_hst"
            | "ca_pst_bc"
            | "ca_pst_mb"
            | "ca_pst_sk"
            | "ca_qst"
            | "cd_nif"
            | "ch_uid"
            | "ch_vat"
            | "cl_tin"
            | "cm_niu"
            | "cn_tin"
            | "co_nit"
            | "cr_tin"
            | "cv_nif"
            | "de_stn"
            | "do_rcn"
            | "ec_ruc"
            | "eg_tin"
            | "es_cif"
            | "et_tin"
            | "eu_oss_vat"
            | "eu_vat"
            | "gb_vat"
            | "ge_vat"
            | "gn_nif"
            | "hk_br"
            | "hr_oib"
            | "hu_tin"
            | "id_npwp"
            | "il_vat"
            | "in_gst"
            | "is_vat"
            | "jp_cn"
            | "jp_rn"
            | "jp_trn"
            | "ke_pin"
            | "kg_tin"
            | "kh_tin"
            | "kr_brn"
            | "kz_bin"
            | "la_tin"
            | "li_uid"
            | "li_vat"
            | "ma_vat"
            | "md_vat"
            | "me_pib"
            | "mk_vat"
            | "mr_nif"
            | "mx_rfc"
            | "my_frp"
            | "my_itn"
            | "my_sst"
            | "ng_tin"
            | "no_vat"
            | "no_voec"
            | "np_pan"
            | "nz_gst"
            | "om_vat"
            | "pe_ruc"
            | "ph_tin"
            | "ro_tin"
            | "rs_pib"
            | "ru_inn"
            | "ru_kpp"
            | "sa_vat"
            | "sg_gst"
            | "sg_uen"
            | "si_tin"
            | "sn_ninea"
            | "sr_fin"
            | "sv_nit"
            | "th_vat"
            | "tj_tin"
            | "tr_tin"
            | "tw_vat"
            | "tz_vat"
            | "ua_vat"
            | "ug_tin"
            | "us_ein"
            | "uy_ruc"
            | "uz_tin"
            | "uz_vat"
            | "ve_rif"
            | "vn_tin"
            | "za_vat"
            | "zm_tin"
            | "zw_tin"
            | UnknownEnumStringValue
          value: string
        }[]
        test_clock?: string
      }
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_customer> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/customers`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            address: {explode: true, style: "deepObject"},
            cash_balance: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            invoice_settings: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            preferred_locales: {explode: true, style: "deepObject"},
            shipping: {explode: true, style: "deepObject"},
            tax: {explode: true, style: "deepObject"},
            tax_id_data: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getCustomersSearch(
    p: {
      expand?: string[]
      limit?: number
      page?: string
      query: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_customer[]
          has_more: boolean
          next_page?: string | null
          object: "search_result" | UnknownEnumStringValue
          total_count?: number
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/customers/search`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      expand: p["expand"],
      limit: p["limit"],
      page: p["page"],
      query: p["query"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async deleteCustomersCustomer(
    p: {
      customer: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_deleted_customer> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/customers/${p["customer"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async getCustomersCustomer(
    p: {
      customer: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_customer | t_deleted_customer> | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/customers/${p["customer"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postCustomersCustomer(
    p: {
      customer: string
      requestBody?: {
        address?:
          | {
              city?: string
              country?: string
              line1?: string
              line2?: string
              postal_code?: string
              state?: string
            }
          | ""
          | UnknownEnumStringValue
        balance?: number
        bank_account?:
          | {
              account_holder_name?: string
              account_holder_type?:
                | "company"
                | "individual"
                | UnknownEnumStringValue
              account_number: string
              country: string
              currency?: string
              object?: "bank_account" | UnknownEnumStringValue
              routing_number?: string
            }
          | string
        card?:
          | {
              address_city?: string
              address_country?: string
              address_line1?: string
              address_line2?: string
              address_state?: string
              address_zip?: string
              cvc?: string
              exp_month: number
              exp_year: number
              metadata?: {
                [key: string]: string | undefined
              }
              name?: string
              number: string
              object?: "card" | UnknownEnumStringValue
            }
          | string
        cash_balance?: {
          settings?: {
            reconciliation_mode?:
              | "automatic"
              | "manual"
              | "merchant_default"
              | UnknownEnumStringValue
          }
        }
        default_alipay_account?: string
        default_bank_account?: string
        default_card?: string
        default_source?: string
        description?: string
        email?: string
        expand?: string[]
        invoice_prefix?: string
        invoice_settings?: {
          custom_fields?:
            | {
                name: string
                value: string
              }[]
            | ""
            | UnknownEnumStringValue
          default_payment_method?: string
          footer?: string
          rendering_options?:
            | {
                amount_tax_display?:
                  | ""
                  | "exclude_tax"
                  | "include_inclusive_tax"
                  | UnknownEnumStringValue
                template?: string
              }
            | ""
            | UnknownEnumStringValue
        }
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        name?: string
        next_invoice_sequence?: number
        phone?: string
        preferred_locales?: string[]
        shipping?:
          | {
              address: {
                city?: string
                country?: string
                line1?: string
                line2?: string
                postal_code?: string
                state?: string
              }
              name: string
              phone?: string
            }
          | ""
          | UnknownEnumStringValue
        source?: string
        tax?: {
          ip_address?: string | "" | UnknownEnumStringValue
          validate_location?:
            | "auto"
            | "deferred"
            | "immediately"
            | UnknownEnumStringValue
        }
        tax_exempt?: "" | "exempt" | "none" | "reverse" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_customer> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/customers/${p["customer"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            address: {explode: true, style: "deepObject"},
            bank_account: {explode: true, style: "deepObject"},
            card: {explode: true, style: "deepObject"},
            cash_balance: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            invoice_settings: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            preferred_locales: {explode: true, style: "deepObject"},
            shipping: {explode: true, style: "deepObject"},
            tax: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getCustomersCustomerBalanceTransactions(
    p: {
      customer: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_customer_balance_transaction[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/customers/${p["customer"]}/balance_transactions`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postCustomersCustomerBalanceTransactions(
    p: {
      customer: string
      requestBody: {
        amount: number
        currency: string
        description?: string
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_customer_balance_transaction> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/customers/${p["customer"]}/balance_transactions`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getCustomersCustomerBalanceTransactionsTransaction(
    p: {
      customer: string
      expand?: string[]
      transaction: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_customer_balance_transaction> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/customers/${p["customer"]}/balance_transactions/${p["transaction"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postCustomersCustomerBalanceTransactionsTransaction(
    p: {
      customer: string
      transaction: string
      requestBody?: {
        description?: string
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_customer_balance_transaction> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/customers/${p["customer"]}/balance_transactions/${p["transaction"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getCustomersCustomerBankAccounts(
    p: {
      customer: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_bank_account[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/customers/${p["customer"]}/bank_accounts`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postCustomersCustomerBankAccounts(
    p: {
      customer: string
      requestBody?: {
        alipay_account?: string
        bank_account?:
          | {
              account_holder_name?: string
              account_holder_type?:
                | "company"
                | "individual"
                | UnknownEnumStringValue
              account_number: string
              country: string
              currency?: string
              object?: "bank_account" | UnknownEnumStringValue
              routing_number?: string
            }
          | string
        card?:
          | {
              address_city?: string
              address_country?: string
              address_line1?: string
              address_line2?: string
              address_state?: string
              address_zip?: string
              cvc?: string
              exp_month: number
              exp_year: number
              metadata?: {
                [key: string]: string | undefined
              }
              name?: string
              number: string
              object?: "card" | UnknownEnumStringValue
            }
          | string
        expand?: string[]
        metadata?: {
          [key: string]: string | undefined
        }
        source?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_source> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/customers/${p["customer"]}/bank_accounts`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            bank_account: {explode: true, style: "deepObject"},
            card: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteCustomersCustomerBankAccountsId(
    p: {
      customer: string
      id: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<200, t_payment_source | t_deleted_payment_source>
    | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/customers/${p["customer"]}/bank_accounts/${p["id"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "DELETE", body, ...opts, headers}, timeout)
  }

  async getCustomersCustomerBankAccountsId(
    p: {
      customer: string
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_bank_account> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/customers/${p["customer"]}/bank_accounts/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postCustomersCustomerBankAccountsId(
    p: {
      customer: string
      id: string
      requestBody?: {
        account_holder_name?: string
        account_holder_type?: "company" | "individual" | UnknownEnumStringValue
        address_city?: string
        address_country?: string
        address_line1?: string
        address_line2?: string
        address_state?: string
        address_zip?: string
        exp_month?: string
        exp_year?: string
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        name?: string
        owner?: {
          address?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
          }
          email?: string
          name?: string
          phone?: string
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_card | t_bank_account | t_source> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/customers/${p["customer"]}/bank_accounts/${p["id"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            owner: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postCustomersCustomerBankAccountsIdVerify(
    p: {
      customer: string
      id: string
      requestBody?: {
        amounts?: number[]
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_bank_account> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/customers/${p["customer"]}/bank_accounts/${p["id"]}/verify`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            amounts: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getCustomersCustomerCards(
    p: {
      customer: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_card[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/customers/${p["customer"]}/cards`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postCustomersCustomerCards(
    p: {
      customer: string
      requestBody?: {
        alipay_account?: string
        bank_account?:
          | {
              account_holder_name?: string
              account_holder_type?:
                | "company"
                | "individual"
                | UnknownEnumStringValue
              account_number: string
              country: string
              currency?: string
              object?: "bank_account" | UnknownEnumStringValue
              routing_number?: string
            }
          | string
        card?:
          | {
              address_city?: string
              address_country?: string
              address_line1?: string
              address_line2?: string
              address_state?: string
              address_zip?: string
              cvc?: string
              exp_month: number
              exp_year: number
              metadata?: {
                [key: string]: string | undefined
              }
              name?: string
              number: string
              object?: "card" | UnknownEnumStringValue
            }
          | string
        expand?: string[]
        metadata?: {
          [key: string]: string | undefined
        }
        source?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_source> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/customers/${p["customer"]}/cards`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            bank_account: {explode: true, style: "deepObject"},
            card: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteCustomersCustomerCardsId(
    p: {
      customer: string
      id: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<200, t_payment_source | t_deleted_payment_source>
    | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/customers/${p["customer"]}/cards/${p["id"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "DELETE", body, ...opts, headers}, timeout)
  }

  async getCustomersCustomerCardsId(
    p: {
      customer: string
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_card> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/customers/${p["customer"]}/cards/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postCustomersCustomerCardsId(
    p: {
      customer: string
      id: string
      requestBody?: {
        account_holder_name?: string
        account_holder_type?: "company" | "individual" | UnknownEnumStringValue
        address_city?: string
        address_country?: string
        address_line1?: string
        address_line2?: string
        address_state?: string
        address_zip?: string
        exp_month?: string
        exp_year?: string
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        name?: string
        owner?: {
          address?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
          }
          email?: string
          name?: string
          phone?: string
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_card | t_bank_account | t_source> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/customers/${p["customer"]}/cards/${p["id"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            owner: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getCustomersCustomerCashBalance(
    p: {
      customer: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_cash_balance> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/customers/${p["customer"]}/cash_balance`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postCustomersCustomerCashBalance(
    p: {
      customer: string
      requestBody?: {
        expand?: string[]
        settings?: {
          reconciliation_mode?:
            | "automatic"
            | "manual"
            | "merchant_default"
            | UnknownEnumStringValue
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_cash_balance> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/customers/${p["customer"]}/cash_balance`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            settings: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getCustomersCustomerCashBalanceTransactions(
    p: {
      customer: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_customer_cash_balance_transaction[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/customers/${p["customer"]}/cash_balance_transactions`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getCustomersCustomerCashBalanceTransactionsTransaction(
    p: {
      customer: string
      expand?: string[]
      transaction: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_customer_cash_balance_transaction> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/customers/${p["customer"]}/cash_balance_transactions/${p["transaction"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async deleteCustomersCustomerDiscount(
    p: {
      customer: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_deleted_discount> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/customers/${p["customer"]}/discount`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async getCustomersCustomerDiscount(
    p: {
      customer: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_discount> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/customers/${p["customer"]}/discount`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postCustomersCustomerFundingInstructions(
    p: {
      customer: string
      requestBody: {
        bank_transfer: {
          eu_bank_transfer?: {
            country: string
          }
          requested_address_types?: (
            | "iban"
            | "sort_code"
            | "spei"
            | "zengin"
            | UnknownEnumStringValue
          )[]
          type:
            | "eu_bank_transfer"
            | "gb_bank_transfer"
            | "jp_bank_transfer"
            | "mx_bank_transfer"
            | "us_bank_transfer"
            | UnknownEnumStringValue
        }
        currency: string
        expand?: string[]
        funding_type: "bank_transfer" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_funding_instructions> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/customers/${p["customer"]}/funding_instructions`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      bank_transfer: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getCustomersCustomerPaymentMethods(
    p: {
      allowRedisplay?:
        | "always"
        | "limited"
        | "unspecified"
        | UnknownEnumStringValue
      customer: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      type?:
        | "acss_debit"
        | "affirm"
        | "afterpay_clearpay"
        | "alipay"
        | "alma"
        | "amazon_pay"
        | "au_becs_debit"
        | "bacs_debit"
        | "bancontact"
        | "billie"
        | "blik"
        | "boleto"
        | "card"
        | "cashapp"
        | "crypto"
        | "customer_balance"
        | "eps"
        | "fpx"
        | "giropay"
        | "grabpay"
        | "ideal"
        | "kakao_pay"
        | "klarna"
        | "konbini"
        | "kr_card"
        | "link"
        | "mobilepay"
        | "multibanco"
        | "naver_pay"
        | "nz_bank_account"
        | "oxxo"
        | "p24"
        | "pay_by_bank"
        | "payco"
        | "paynow"
        | "paypal"
        | "pix"
        | "promptpay"
        | "revolut_pay"
        | "samsung_pay"
        | "satispay"
        | "sepa_debit"
        | "sofort"
        | "swish"
        | "twint"
        | "us_bank_account"
        | "wechat_pay"
        | "zip"
        | UnknownEnumStringValue
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_payment_method[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/customers/${p["customer"]}/payment_methods`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      allow_redisplay: p["allowRedisplay"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      type: p["type"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getCustomersCustomerPaymentMethodsPaymentMethod(
    p: {
      customer: string
      expand?: string[]
      paymentMethod: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_method> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/customers/${p["customer"]}/payment_methods/${p["paymentMethod"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getCustomersCustomerSources(
    p: {
      customer: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      object?: string
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: (t_bank_account | t_card | t_source)[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/customers/${p["customer"]}/sources`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      object: p["object"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postCustomersCustomerSources(
    p: {
      customer: string
      requestBody?: {
        alipay_account?: string
        bank_account?:
          | {
              account_holder_name?: string
              account_holder_type?:
                | "company"
                | "individual"
                | UnknownEnumStringValue
              account_number: string
              country: string
              currency?: string
              object?: "bank_account" | UnknownEnumStringValue
              routing_number?: string
            }
          | string
        card?:
          | {
              address_city?: string
              address_country?: string
              address_line1?: string
              address_line2?: string
              address_state?: string
              address_zip?: string
              cvc?: string
              exp_month: number
              exp_year: number
              metadata?: {
                [key: string]: string | undefined
              }
              name?: string
              number: string
              object?: "card" | UnknownEnumStringValue
            }
          | string
        expand?: string[]
        metadata?: {
          [key: string]: string | undefined
        }
        source?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_source> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/customers/${p["customer"]}/sources`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            bank_account: {explode: true, style: "deepObject"},
            card: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteCustomersCustomerSourcesId(
    p: {
      customer: string
      id: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<200, t_payment_source | t_deleted_payment_source>
    | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/customers/${p["customer"]}/sources/${p["id"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "DELETE", body, ...opts, headers}, timeout)
  }

  async getCustomersCustomerSourcesId(
    p: {
      customer: string
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_source> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/customers/${p["customer"]}/sources/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postCustomersCustomerSourcesId(
    p: {
      customer: string
      id: string
      requestBody?: {
        account_holder_name?: string
        account_holder_type?: "company" | "individual" | UnknownEnumStringValue
        address_city?: string
        address_country?: string
        address_line1?: string
        address_line2?: string
        address_state?: string
        address_zip?: string
        exp_month?: string
        exp_year?: string
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        name?: string
        owner?: {
          address?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
          }
          email?: string
          name?: string
          phone?: string
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_card | t_bank_account | t_source> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/customers/${p["customer"]}/sources/${p["id"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            owner: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postCustomersCustomerSourcesIdVerify(
    p: {
      customer: string
      id: string
      requestBody?: {
        amounts?: number[]
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_bank_account> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/customers/${p["customer"]}/sources/${p["id"]}/verify`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            amounts: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getCustomersCustomerSubscriptions(
    p: {
      customer: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_subscription[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/customers/${p["customer"]}/subscriptions`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postCustomersCustomerSubscriptions(
    p: {
      customer: string
      requestBody?: {
        add_invoice_items?: {
          discounts?: {
            coupon?: string
            discount?: string
            promotion_code?: string
          }[]
          price?: string
          price_data?: {
            currency: string
            product: string
            tax_behavior?:
              | "exclusive"
              | "inclusive"
              | "unspecified"
              | UnknownEnumStringValue
            unit_amount?: number
            unit_amount_decimal?: string
          }
          quantity?: number
          tax_rates?: string[] | "" | UnknownEnumStringValue
        }[]
        application_fee_percent?: number | "" | UnknownEnumStringValue
        automatic_tax?: {
          enabled: boolean
          liability?: {
            account?: string
            type: "account" | "self" | UnknownEnumStringValue
          }
        }
        backdate_start_date?: number
        billing_cycle_anchor?: number
        billing_thresholds?:
          | {
              amount_gte?: number
              reset_billing_cycle_anchor?: boolean
            }
          | ""
          | UnknownEnumStringValue
        cancel_at?: number
        cancel_at_period_end?: boolean
        collection_method?:
          | "charge_automatically"
          | "send_invoice"
          | UnknownEnumStringValue
        currency?: string
        days_until_due?: number
        default_payment_method?: string
        default_source?: string
        default_tax_rates?: string[] | "" | UnknownEnumStringValue
        discounts?:
          | {
              coupon?: string
              discount?: string
              promotion_code?: string
            }[]
          | ""
          | UnknownEnumStringValue
        expand?: string[]
        invoice_settings?: {
          account_tax_ids?: string[] | "" | UnknownEnumStringValue
          issuer?: {
            account?: string
            type: "account" | "self" | UnknownEnumStringValue
          }
        }
        items?: {
          billing_thresholds?:
            | {
                usage_gte: number
              }
            | ""
            | UnknownEnumStringValue
          discounts?:
            | {
                coupon?: string
                discount?: string
                promotion_code?: string
              }[]
            | ""
            | UnknownEnumStringValue
          metadata?: {
            [key: string]: string | undefined
          }
          price?: string
          price_data?: {
            currency: string
            product: string
            recurring: {
              interval:
                | "day"
                | "month"
                | "week"
                | "year"
                | UnknownEnumStringValue
              interval_count?: number
            }
            tax_behavior?:
              | "exclusive"
              | "inclusive"
              | "unspecified"
              | UnknownEnumStringValue
            unit_amount?: number
            unit_amount_decimal?: string
          }
          quantity?: number
          tax_rates?: string[] | "" | UnknownEnumStringValue
        }[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        off_session?: boolean
        payment_behavior?:
          | "allow_incomplete"
          | "default_incomplete"
          | "error_if_incomplete"
          | "pending_if_incomplete"
          | UnknownEnumStringValue
        payment_settings?: {
          payment_method_options?: {
            acss_debit?:
              | {
                  mandate_options?: {
                    transaction_type?:
                      | "business"
                      | "personal"
                      | UnknownEnumStringValue
                  }
                  verification_method?:
                    | "automatic"
                    | "instant"
                    | "microdeposits"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
            bancontact?:
              | {
                  preferred_language?:
                    | "de"
                    | "en"
                    | "fr"
                    | "nl"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
            card?:
              | {
                  mandate_options?: {
                    amount?: number
                    amount_type?: "fixed" | "maximum" | UnknownEnumStringValue
                    description?: string
                  }
                  network?:
                    | "amex"
                    | "cartes_bancaires"
                    | "diners"
                    | "discover"
                    | "eftpos_au"
                    | "girocard"
                    | "interac"
                    | "jcb"
                    | "link"
                    | "mastercard"
                    | "unionpay"
                    | "unknown"
                    | "visa"
                    | UnknownEnumStringValue
                  request_three_d_secure?:
                    | "any"
                    | "automatic"
                    | "challenge"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
            customer_balance?:
              | {
                  bank_transfer?: {
                    eu_bank_transfer?: {
                      country: string
                    }
                    type?: string
                  }
                  funding_type?: string
                }
              | ""
              | UnknownEnumStringValue
            konbini?: EmptyObject | "" | UnknownEnumStringValue
            sepa_debit?: EmptyObject | "" | UnknownEnumStringValue
            us_bank_account?:
              | {
                  financial_connections?: {
                    filters?: {
                      account_subcategories?: (
                        | "checking"
                        | "savings"
                        | UnknownEnumStringValue
                      )[]
                    }
                    permissions?: (
                      | "balances"
                      | "ownership"
                      | "payment_method"
                      | "transactions"
                      | UnknownEnumStringValue
                    )[]
                    prefetch?: (
                      | "balances"
                      | "ownership"
                      | "transactions"
                      | UnknownEnumStringValue
                    )[]
                  }
                  verification_method?:
                    | "automatic"
                    | "instant"
                    | "microdeposits"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
          }
          payment_method_types?:
            | (
                | "ach_credit_transfer"
                | "ach_debit"
                | "acss_debit"
                | "affirm"
                | "amazon_pay"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "boleto"
                | "card"
                | "cashapp"
                | "crypto"
                | "customer_balance"
                | "eps"
                | "fpx"
                | "giropay"
                | "grabpay"
                | "ideal"
                | "jp_credit_transfer"
                | "kakao_pay"
                | "klarna"
                | "konbini"
                | "kr_card"
                | "link"
                | "multibanco"
                | "naver_pay"
                | "nz_bank_account"
                | "p24"
                | "payco"
                | "paynow"
                | "paypal"
                | "promptpay"
                | "revolut_pay"
                | "sepa_credit_transfer"
                | "sepa_debit"
                | "sofort"
                | "swish"
                | "us_bank_account"
                | "wechat_pay"
                | UnknownEnumStringValue
              )[]
            | ""
            | UnknownEnumStringValue
          save_default_payment_method?:
            | "off"
            | "on_subscription"
            | UnknownEnumStringValue
        }
        pending_invoice_item_interval?:
          | {
              interval:
                | "day"
                | "month"
                | "week"
                | "year"
                | UnknownEnumStringValue
              interval_count?: number
            }
          | ""
          | UnknownEnumStringValue
        proration_behavior?:
          | "always_invoice"
          | "create_prorations"
          | "none"
          | UnknownEnumStringValue
        transfer_data?: {
          amount_percent?: number
          destination: string
        }
        trial_end?: "now" | UnknownEnumStringValue | number
        trial_from_plan?: boolean
        trial_period_days?: number
        trial_settings?: {
          end_behavior: {
            missing_payment_method:
              | "cancel"
              | "create_invoice"
              | "pause"
              | UnknownEnumStringValue
          }
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_subscription> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/customers/${p["customer"]}/subscriptions`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            add_invoice_items: {explode: true, style: "deepObject"},
            application_fee_percent: {explode: true, style: "deepObject"},
            automatic_tax: {explode: true, style: "deepObject"},
            billing_thresholds: {explode: true, style: "deepObject"},
            default_tax_rates: {explode: true, style: "deepObject"},
            discounts: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            invoice_settings: {explode: true, style: "deepObject"},
            items: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            payment_settings: {explode: true, style: "deepObject"},
            pending_invoice_item_interval: {explode: true, style: "deepObject"},
            transfer_data: {explode: true, style: "deepObject"},
            trial_end: {explode: true, style: "deepObject"},
            trial_settings: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteCustomersCustomerSubscriptionsSubscriptionExposedId(
    p: {
      customer: string
      subscriptionExposedId: string
      requestBody?: {
        expand?: string[]
        invoice_now?: boolean
        prorate?: boolean
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_subscription> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/customers/${p["customer"]}/subscriptions/${p["subscriptionExposedId"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "DELETE", body, ...opts, headers}, timeout)
  }

  async getCustomersCustomerSubscriptionsSubscriptionExposedId(
    p: {
      customer: string
      expand?: string[]
      subscriptionExposedId: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_subscription> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/customers/${p["customer"]}/subscriptions/${p["subscriptionExposedId"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postCustomersCustomerSubscriptionsSubscriptionExposedId(
    p: {
      customer: string
      subscriptionExposedId: string
      requestBody?: {
        add_invoice_items?: {
          discounts?: {
            coupon?: string
            discount?: string
            promotion_code?: string
          }[]
          price?: string
          price_data?: {
            currency: string
            product: string
            tax_behavior?:
              | "exclusive"
              | "inclusive"
              | "unspecified"
              | UnknownEnumStringValue
            unit_amount?: number
            unit_amount_decimal?: string
          }
          quantity?: number
          tax_rates?: string[] | "" | UnknownEnumStringValue
        }[]
        application_fee_percent?: number | "" | UnknownEnumStringValue
        automatic_tax?: {
          enabled: boolean
          liability?: {
            account?: string
            type: "account" | "self" | UnknownEnumStringValue
          }
        }
        billing_cycle_anchor?: "now" | "unchanged" | UnknownEnumStringValue
        billing_thresholds?:
          | {
              amount_gte?: number
              reset_billing_cycle_anchor?: boolean
            }
          | ""
          | UnknownEnumStringValue
        cancel_at?: number | "" | UnknownEnumStringValue
        cancel_at_period_end?: boolean
        cancellation_details?: {
          comment?: string | "" | UnknownEnumStringValue
          feedback?:
            | ""
            | "customer_service"
            | "low_quality"
            | "missing_features"
            | "other"
            | "switched_service"
            | "too_complex"
            | "too_expensive"
            | "unused"
            | UnknownEnumStringValue
        }
        collection_method?:
          | "charge_automatically"
          | "send_invoice"
          | UnknownEnumStringValue
        days_until_due?: number
        default_payment_method?: string
        default_source?: string | "" | UnknownEnumStringValue
        default_tax_rates?: string[] | "" | UnknownEnumStringValue
        discounts?:
          | {
              coupon?: string
              discount?: string
              promotion_code?: string
            }[]
          | ""
          | UnknownEnumStringValue
        expand?: string[]
        invoice_settings?: {
          account_tax_ids?: string[] | "" | UnknownEnumStringValue
          issuer?: {
            account?: string
            type: "account" | "self" | UnknownEnumStringValue
          }
        }
        items?: {
          billing_thresholds?:
            | {
                usage_gte: number
              }
            | ""
            | UnknownEnumStringValue
          clear_usage?: boolean
          deleted?: boolean
          discounts?:
            | {
                coupon?: string
                discount?: string
                promotion_code?: string
              }[]
            | ""
            | UnknownEnumStringValue
          id?: string
          metadata?:
            | {
                [key: string]: string | undefined
              }
            | ""
            | UnknownEnumStringValue
          price?: string
          price_data?: {
            currency: string
            product: string
            recurring: {
              interval:
                | "day"
                | "month"
                | "week"
                | "year"
                | UnknownEnumStringValue
              interval_count?: number
            }
            tax_behavior?:
              | "exclusive"
              | "inclusive"
              | "unspecified"
              | UnknownEnumStringValue
            unit_amount?: number
            unit_amount_decimal?: string
          }
          quantity?: number
          tax_rates?: string[] | "" | UnknownEnumStringValue
        }[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        off_session?: boolean
        pause_collection?:
          | {
              behavior:
                | "keep_as_draft"
                | "mark_uncollectible"
                | "void"
                | UnknownEnumStringValue
              resumes_at?: number
            }
          | ""
          | UnknownEnumStringValue
        payment_behavior?:
          | "allow_incomplete"
          | "default_incomplete"
          | "error_if_incomplete"
          | "pending_if_incomplete"
          | UnknownEnumStringValue
        payment_settings?: {
          payment_method_options?: {
            acss_debit?:
              | {
                  mandate_options?: {
                    transaction_type?:
                      | "business"
                      | "personal"
                      | UnknownEnumStringValue
                  }
                  verification_method?:
                    | "automatic"
                    | "instant"
                    | "microdeposits"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
            bancontact?:
              | {
                  preferred_language?:
                    | "de"
                    | "en"
                    | "fr"
                    | "nl"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
            card?:
              | {
                  mandate_options?: {
                    amount?: number
                    amount_type?: "fixed" | "maximum" | UnknownEnumStringValue
                    description?: string
                  }
                  network?:
                    | "amex"
                    | "cartes_bancaires"
                    | "diners"
                    | "discover"
                    | "eftpos_au"
                    | "girocard"
                    | "interac"
                    | "jcb"
                    | "link"
                    | "mastercard"
                    | "unionpay"
                    | "unknown"
                    | "visa"
                    | UnknownEnumStringValue
                  request_three_d_secure?:
                    | "any"
                    | "automatic"
                    | "challenge"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
            customer_balance?:
              | {
                  bank_transfer?: {
                    eu_bank_transfer?: {
                      country: string
                    }
                    type?: string
                  }
                  funding_type?: string
                }
              | ""
              | UnknownEnumStringValue
            konbini?: EmptyObject | "" | UnknownEnumStringValue
            sepa_debit?: EmptyObject | "" | UnknownEnumStringValue
            us_bank_account?:
              | {
                  financial_connections?: {
                    filters?: {
                      account_subcategories?: (
                        | "checking"
                        | "savings"
                        | UnknownEnumStringValue
                      )[]
                    }
                    permissions?: (
                      | "balances"
                      | "ownership"
                      | "payment_method"
                      | "transactions"
                      | UnknownEnumStringValue
                    )[]
                    prefetch?: (
                      | "balances"
                      | "ownership"
                      | "transactions"
                      | UnknownEnumStringValue
                    )[]
                  }
                  verification_method?:
                    | "automatic"
                    | "instant"
                    | "microdeposits"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
          }
          payment_method_types?:
            | (
                | "ach_credit_transfer"
                | "ach_debit"
                | "acss_debit"
                | "affirm"
                | "amazon_pay"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "boleto"
                | "card"
                | "cashapp"
                | "crypto"
                | "customer_balance"
                | "eps"
                | "fpx"
                | "giropay"
                | "grabpay"
                | "ideal"
                | "jp_credit_transfer"
                | "kakao_pay"
                | "klarna"
                | "konbini"
                | "kr_card"
                | "link"
                | "multibanco"
                | "naver_pay"
                | "nz_bank_account"
                | "p24"
                | "payco"
                | "paynow"
                | "paypal"
                | "promptpay"
                | "revolut_pay"
                | "sepa_credit_transfer"
                | "sepa_debit"
                | "sofort"
                | "swish"
                | "us_bank_account"
                | "wechat_pay"
                | UnknownEnumStringValue
              )[]
            | ""
            | UnknownEnumStringValue
          save_default_payment_method?:
            | "off"
            | "on_subscription"
            | UnknownEnumStringValue
        }
        pending_invoice_item_interval?:
          | {
              interval:
                | "day"
                | "month"
                | "week"
                | "year"
                | UnknownEnumStringValue
              interval_count?: number
            }
          | ""
          | UnknownEnumStringValue
        proration_behavior?:
          | "always_invoice"
          | "create_prorations"
          | "none"
          | UnknownEnumStringValue
        proration_date?: number
        transfer_data?:
          | {
              amount_percent?: number
              destination: string
            }
          | ""
          | UnknownEnumStringValue
        trial_end?: "now" | UnknownEnumStringValue | number
        trial_from_plan?: boolean
        trial_settings?: {
          end_behavior: {
            missing_payment_method:
              | "cancel"
              | "create_invoice"
              | "pause"
              | UnknownEnumStringValue
          }
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_subscription> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/customers/${p["customer"]}/subscriptions/${p["subscriptionExposedId"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            add_invoice_items: {explode: true, style: "deepObject"},
            application_fee_percent: {explode: true, style: "deepObject"},
            automatic_tax: {explode: true, style: "deepObject"},
            billing_thresholds: {explode: true, style: "deepObject"},
            cancel_at: {explode: true, style: "deepObject"},
            cancellation_details: {explode: true, style: "deepObject"},
            default_source: {explode: true, style: "deepObject"},
            default_tax_rates: {explode: true, style: "deepObject"},
            discounts: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            invoice_settings: {explode: true, style: "deepObject"},
            items: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            pause_collection: {explode: true, style: "deepObject"},
            payment_settings: {explode: true, style: "deepObject"},
            pending_invoice_item_interval: {explode: true, style: "deepObject"},
            transfer_data: {explode: true, style: "deepObject"},
            trial_end: {explode: true, style: "deepObject"},
            trial_settings: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount(
    p: {
      customer: string
      subscriptionExposedId: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_deleted_discount> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/customers/${p["customer"]}/subscriptions/${p["subscriptionExposedId"]}/discount`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount(
    p: {
      customer: string
      expand?: string[]
      subscriptionExposedId: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_discount> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/customers/${p["customer"]}/subscriptions/${p["subscriptionExposedId"]}/discount`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getCustomersCustomerTaxIds(
    p: {
      customer: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_tax_id[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/customers/${p["customer"]}/tax_ids`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postCustomersCustomerTaxIds(
    p: {
      customer: string
      requestBody: {
        expand?: string[]
        type:
          | "ad_nrt"
          | "ae_trn"
          | "al_tin"
          | "am_tin"
          | "ao_tin"
          | "ar_cuit"
          | "au_abn"
          | "au_arn"
          | "aw_tin"
          | "az_tin"
          | "ba_tin"
          | "bb_tin"
          | "bd_bin"
          | "bf_ifu"
          | "bg_uic"
          | "bh_vat"
          | "bj_ifu"
          | "bo_tin"
          | "br_cnpj"
          | "br_cpf"
          | "bs_tin"
          | "by_tin"
          | "ca_bn"
          | "ca_gst_hst"
          | "ca_pst_bc"
          | "ca_pst_mb"
          | "ca_pst_sk"
          | "ca_qst"
          | "cd_nif"
          | "ch_uid"
          | "ch_vat"
          | "cl_tin"
          | "cm_niu"
          | "cn_tin"
          | "co_nit"
          | "cr_tin"
          | "cv_nif"
          | "de_stn"
          | "do_rcn"
          | "ec_ruc"
          | "eg_tin"
          | "es_cif"
          | "et_tin"
          | "eu_oss_vat"
          | "eu_vat"
          | "gb_vat"
          | "ge_vat"
          | "gn_nif"
          | "hk_br"
          | "hr_oib"
          | "hu_tin"
          | "id_npwp"
          | "il_vat"
          | "in_gst"
          | "is_vat"
          | "jp_cn"
          | "jp_rn"
          | "jp_trn"
          | "ke_pin"
          | "kg_tin"
          | "kh_tin"
          | "kr_brn"
          | "kz_bin"
          | "la_tin"
          | "li_uid"
          | "li_vat"
          | "ma_vat"
          | "md_vat"
          | "me_pib"
          | "mk_vat"
          | "mr_nif"
          | "mx_rfc"
          | "my_frp"
          | "my_itn"
          | "my_sst"
          | "ng_tin"
          | "no_vat"
          | "no_voec"
          | "np_pan"
          | "nz_gst"
          | "om_vat"
          | "pe_ruc"
          | "ph_tin"
          | "ro_tin"
          | "rs_pib"
          | "ru_inn"
          | "ru_kpp"
          | "sa_vat"
          | "sg_gst"
          | "sg_uen"
          | "si_tin"
          | "sn_ninea"
          | "sr_fin"
          | "sv_nit"
          | "th_vat"
          | "tj_tin"
          | "tr_tin"
          | "tw_vat"
          | "tz_vat"
          | "ua_vat"
          | "ug_tin"
          | "us_ein"
          | "uy_ruc"
          | "uz_tin"
          | "uz_vat"
          | "ve_rif"
          | "vn_tin"
          | "za_vat"
          | "zm_tin"
          | "zw_tin"
          | UnknownEnumStringValue
        value: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_tax_id> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/customers/${p["customer"]}/tax_ids`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteCustomersCustomerTaxIdsId(
    p: {
      customer: string
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_deleted_tax_id> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/customers/${p["customer"]}/tax_ids/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async getCustomersCustomerTaxIdsId(
    p: {
      customer: string
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_tax_id> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/customers/${p["customer"]}/tax_ids/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getDisputes(
    p: {
      charge?: string
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      paymentIntent?: string
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_dispute[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/disputes`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      charge: p["charge"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      payment_intent: p["paymentIntent"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getDisputesDispute(
    p: {
      dispute: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_dispute> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/disputes/${p["dispute"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postDisputesDispute(
    p: {
      dispute: string
      requestBody?: {
        evidence?: {
          access_activity_log?: string
          billing_address?: string
          cancellation_policy?: string
          cancellation_policy_disclosure?: string
          cancellation_rebuttal?: string
          customer_communication?: string
          customer_email_address?: string
          customer_name?: string
          customer_purchase_ip?: string
          customer_signature?: string
          duplicate_charge_documentation?: string
          duplicate_charge_explanation?: string
          duplicate_charge_id?: string
          enhanced_evidence?:
            | {
                visa_compelling_evidence_3?: {
                  disputed_transaction?: {
                    customer_account_id?: string | "" | UnknownEnumStringValue
                    customer_device_fingerprint?:
                      | string
                      | ""
                      | UnknownEnumStringValue
                    customer_device_id?: string | "" | UnknownEnumStringValue
                    customer_email_address?:
                      | string
                      | ""
                      | UnknownEnumStringValue
                    customer_purchase_ip?: string | "" | UnknownEnumStringValue
                    merchandise_or_services?:
                      | "merchandise"
                      | "services"
                      | UnknownEnumStringValue
                    product_description?: string | "" | UnknownEnumStringValue
                    shipping_address?: {
                      city?: string | "" | UnknownEnumStringValue
                      country?: string | "" | UnknownEnumStringValue
                      line1?: string | "" | UnknownEnumStringValue
                      line2?: string | "" | UnknownEnumStringValue
                      postal_code?: string | "" | UnknownEnumStringValue
                      state?: string | "" | UnknownEnumStringValue
                    }
                  }
                  prior_undisputed_transactions?: {
                    charge: string
                    customer_account_id?: string | "" | UnknownEnumStringValue
                    customer_device_fingerprint?:
                      | string
                      | ""
                      | UnknownEnumStringValue
                    customer_device_id?: string | "" | UnknownEnumStringValue
                    customer_email_address?:
                      | string
                      | ""
                      | UnknownEnumStringValue
                    customer_purchase_ip?: string | "" | UnknownEnumStringValue
                    product_description?: string | "" | UnknownEnumStringValue
                    shipping_address?: {
                      city?: string | "" | UnknownEnumStringValue
                      country?: string | "" | UnknownEnumStringValue
                      line1?: string | "" | UnknownEnumStringValue
                      line2?: string | "" | UnknownEnumStringValue
                      postal_code?: string | "" | UnknownEnumStringValue
                      state?: string | "" | UnknownEnumStringValue
                    }
                  }[]
                }
                visa_compliance?: {
                  fee_acknowledged?: boolean
                }
              }
            | ""
            | UnknownEnumStringValue
          product_description?: string
          receipt?: string
          refund_policy?: string
          refund_policy_disclosure?: string
          refund_refusal_explanation?: string
          service_date?: string
          service_documentation?: string
          shipping_address?: string
          shipping_carrier?: string
          shipping_date?: string
          shipping_documentation?: string
          shipping_tracking_number?: string
          uncategorized_file?: string
          uncategorized_text?: string
        }
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        submit?: boolean
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_dispute> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/disputes/${p["dispute"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            evidence: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postDisputesDisputeClose(
    p: {
      dispute: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_dispute> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/disputes/${p["dispute"]}/close`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getEntitlementsActiveEntitlements(
    p: {
      customer: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_entitlements_active_entitlement[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/entitlements/active_entitlements`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getEntitlementsActiveEntitlementsId(
    p: {
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_entitlements_active_entitlement> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/entitlements/active_entitlements/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getEntitlementsFeatures(
    p: {
      archived?: boolean
      endingBefore?: string
      expand?: string[]
      limit?: number
      lookupKey?: string
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_entitlements_feature[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/entitlements/features`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      archived: p["archived"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      lookup_key: p["lookupKey"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postEntitlementsFeatures(
    p: {
      requestBody: {
        expand?: string[]
        lookup_key: string
        metadata?: {
          [key: string]: string | undefined
        }
        name: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_entitlements_feature> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/entitlements/features`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getEntitlementsFeaturesId(
    p: {
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_entitlements_feature> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/entitlements/features/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postEntitlementsFeaturesId(
    p: {
      id: string
      requestBody?: {
        active?: boolean
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        name?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_entitlements_feature> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/entitlements/features/${p["id"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postEphemeralKeys(
    p: {
      requestBody?: {
        customer?: string
        expand?: string[]
        issuing_card?: string
        nonce?: string
        verification_session?: string
      }
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_ephemeral_key> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/ephemeral_keys`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteEphemeralKeysKey(
    p: {
      key: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_ephemeral_key> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/ephemeral_keys/${p["key"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "DELETE", body, ...opts, headers}, timeout)
  }

  async getEvents(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      deliverySuccess?: boolean
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      type?: string
      types?: string[]
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_event[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/events`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      delivery_success: p["deliverySuccess"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      type: p["type"],
      types: p["types"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getEventsId(
    p: {
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_event> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/events/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getExchangeRates(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_exchange_rate[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/exchange_rates`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getExchangeRatesRateId(
    p: {
      expand?: string[]
      rateId: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_exchange_rate> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/exchange_rates/${p["rateId"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postExternalAccountsId(
    p: {
      id: string
      requestBody?: {
        account_holder_name?: string
        account_holder_type?:
          | ""
          | "company"
          | "individual"
          | UnknownEnumStringValue
        account_type?:
          | "checking"
          | "futsu"
          | "savings"
          | "toza"
          | UnknownEnumStringValue
        address_city?: string
        address_country?: string
        address_line1?: string
        address_line2?: string
        address_state?: string
        address_zip?: string
        default_for_currency?: boolean
        documents?: {
          bank_account_ownership_verification?: {
            files?: string[]
          }
        }
        exp_month?: string
        exp_year?: string
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        name?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_external_account> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/external_accounts/${p["id"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            documents: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getFileLinks(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      expired?: boolean
      file?: string
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_file_link[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/file_links`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      expired: p["expired"],
      file: p["file"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postFileLinks(
    p: {
      requestBody: {
        expand?: string[]
        expires_at?: number
        file: string
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_file_link> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/file_links`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getFileLinksLink(
    p: {
      expand?: string[]
      link: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_file_link> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/file_links/${p["link"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postFileLinksLink(
    p: {
      link: string
      requestBody?: {
        expand?: string[]
        expires_at?: "now" | UnknownEnumStringValue | number | ""
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_file_link> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/file_links/${p["link"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            expires_at: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getFiles(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      purpose?:
        | "account_requirement"
        | "additional_verification"
        | "business_icon"
        | "business_logo"
        | "customer_signature"
        | "dispute_evidence"
        | "document_provider_identity_document"
        | "finance_report_run"
        | "financial_account_statement"
        | "identity_document"
        | "identity_document_downloadable"
        | "issuing_regulatory_reporting"
        | "pci_document"
        | "selfie"
        | "sigma_scheduled_query"
        | "tax_document_user_upload"
        | "terminal_reader_splashscreen"
        | UnknownEnumStringValue
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_file[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/files`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      purpose: p["purpose"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postFiles(
    p: {
      requestBody: never
    },
    basePath:
      | Server<"postFiles_StripeApi">
      | string = StripeApiServers.operations.postFiles().build(),
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_file> | Res<StatusCode, t_error>> {
    const url = basePath + `/v1/files`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(
      url,
      {
        method: "POST",
        // todo: request bodies with content-type 'multipart/form-data' not yet supported,
        ...opts,
        headers,
      },
      timeout,
    )
  }

  async getFilesFile(
    p: {
      expand?: string[]
      file: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_file> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/files/${p["file"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getFinancialConnectionsAccounts(
    p: {
      accountHolder?: {
        account?: string
        customer?: string
      }
      endingBefore?: string
      expand?: string[]
      limit?: number
      session?: string
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_financial_connections_account[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/financial_connections/accounts`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      account_holder: p["accountHolder"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      session: p["session"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getFinancialConnectionsAccountsAccount(
    p: {
      account: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_financial_connections_account> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/financial_connections/accounts/${p["account"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postFinancialConnectionsAccountsAccountDisconnect(
    p: {
      account: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_financial_connections_account> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/financial_connections/accounts/${p["account"]}/disconnect`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getFinancialConnectionsAccountsAccountOwners(
    p: {
      account: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      ownership: string
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_financial_connections_account_owner[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/financial_connections/accounts/${p["account"]}/owners`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      ownership: p["ownership"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postFinancialConnectionsAccountsAccountRefresh(
    p: {
      account: string
      requestBody: {
        expand?: string[]
        features: (
          | "balance"
          | "ownership"
          | "transactions"
          | UnknownEnumStringValue
        )[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_financial_connections_account> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/financial_connections/accounts/${p["account"]}/refresh`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      features: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postFinancialConnectionsAccountsAccountSubscribe(
    p: {
      account: string
      requestBody: {
        expand?: string[]
        features: ("transactions" | UnknownEnumStringValue)[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_financial_connections_account> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/financial_connections/accounts/${p["account"]}/subscribe`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      features: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postFinancialConnectionsAccountsAccountUnsubscribe(
    p: {
      account: string
      requestBody: {
        expand?: string[]
        features: ("transactions" | UnknownEnumStringValue)[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_financial_connections_account> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/financial_connections/accounts/${p["account"]}/unsubscribe`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      features: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postFinancialConnectionsSessions(
    p: {
      requestBody: {
        account_holder: {
          account?: string
          customer?: string
          type: "account" | "customer" | UnknownEnumStringValue
        }
        expand?: string[]
        filters?: {
          account_subcategories?: (
            | "checking"
            | "credit_card"
            | "line_of_credit"
            | "mortgage"
            | "savings"
            | UnknownEnumStringValue
          )[]
          countries?: string[]
        }
        permissions: (
          | "balances"
          | "ownership"
          | "payment_method"
          | "transactions"
          | UnknownEnumStringValue
        )[]
        prefetch?: (
          | "balances"
          | "ownership"
          | "transactions"
          | UnknownEnumStringValue
        )[]
        return_url?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_financial_connections_session> | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/financial_connections/sessions`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      account_holder: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
      filters: {explode: true, style: "deepObject"},
      permissions: {explode: true, style: "deepObject"},
      prefetch: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getFinancialConnectionsSessionsSession(
    p: {
      expand?: string[]
      session: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_financial_connections_session> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/financial_connections/sessions/${p["session"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getFinancialConnectionsTransactions(
    p: {
      account: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      transactedAt?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      transactionRefresh?: {
        after: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_financial_connections_transaction[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/financial_connections/transactions`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      account: p["account"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      transacted_at: p["transactedAt"],
      transaction_refresh: p["transactionRefresh"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getFinancialConnectionsTransactionsTransaction(
    p: {
      expand?: string[]
      transaction: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_financial_connections_transaction> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/financial_connections/transactions/${p["transaction"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getForwardingRequests(
    p: {
      created?: {
        gt?: number
        gte?: number
        lt?: number
        lte?: number
      }
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_forwarding_request[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/forwarding/requests`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postForwardingRequests(
    p: {
      requestBody: {
        expand?: string[]
        metadata?: {
          [key: string]: string | undefined
        }
        payment_method: string
        replacements: (
          | "card_cvc"
          | "card_expiry"
          | "card_number"
          | "cardholder_name"
          | "request_signature"
          | UnknownEnumStringValue
        )[]
        request?: {
          body?: string
          headers?: {
            name: string
            value: string
          }[]
        }
        url: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_forwarding_request> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/forwarding/requests`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
      replacements: {explode: true, style: "deepObject"},
      request: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getForwardingRequestsId(
    p: {
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_forwarding_request> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/forwarding/requests/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getIdentityVerificationReports(
    p: {
      clientReferenceId?: string
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      type?: "document" | "id_number" | UnknownEnumStringValue
      verificationSession?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_identity_verification_report[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/identity/verification_reports`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      client_reference_id: p["clientReferenceId"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      type: p["type"],
      verification_session: p["verificationSession"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getIdentityVerificationReportsReport(
    p: {
      expand?: string[]
      report: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_identity_verification_report> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/identity/verification_reports/${p["report"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getIdentityVerificationSessions(
    p: {
      clientReferenceId?: string
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      relatedCustomer?: string
      startingAfter?: string
      status?:
        | "canceled"
        | "processing"
        | "requires_input"
        | "verified"
        | UnknownEnumStringValue
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_identity_verification_session[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/identity/verification_sessions`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      client_reference_id: p["clientReferenceId"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      related_customer: p["relatedCustomer"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postIdentityVerificationSessions(
    p: {
      requestBody?: {
        client_reference_id?: string
        expand?: string[]
        metadata?: {
          [key: string]: string | undefined
        }
        options?: {
          document?:
            | {
                allowed_types?: (
                  | "driving_license"
                  | "id_card"
                  | "passport"
                  | UnknownEnumStringValue
                )[]
                require_id_number?: boolean
                require_live_capture?: boolean
                require_matching_selfie?: boolean
              }
            | ""
            | UnknownEnumStringValue
        }
        provided_details?: {
          email?: string
          phone?: string
        }
        related_customer?: string
        related_person?: {
          account: string
          person: string
        }
        return_url?: string
        type?: "document" | "id_number" | UnknownEnumStringValue
        verification_flow?: string
      }
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_identity_verification_session> | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/identity/verification_sessions`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            options: {explode: true, style: "deepObject"},
            provided_details: {explode: true, style: "deepObject"},
            related_person: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getIdentityVerificationSessionsSession(
    p: {
      expand?: string[]
      session: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_identity_verification_session> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/identity/verification_sessions/${p["session"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postIdentityVerificationSessionsSession(
    p: {
      session: string
      requestBody?: {
        expand?: string[]
        metadata?: {
          [key: string]: string | undefined
        }
        options?: {
          document?:
            | {
                allowed_types?: (
                  | "driving_license"
                  | "id_card"
                  | "passport"
                  | UnknownEnumStringValue
                )[]
                require_id_number?: boolean
                require_live_capture?: boolean
                require_matching_selfie?: boolean
              }
            | ""
            | UnknownEnumStringValue
        }
        provided_details?: {
          email?: string
          phone?: string
        }
        type?: "document" | "id_number" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_identity_verification_session> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/identity/verification_sessions/${p["session"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            options: {explode: true, style: "deepObject"},
            provided_details: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postIdentityVerificationSessionsSessionCancel(
    p: {
      session: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_identity_verification_session> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/identity/verification_sessions/${p["session"]}/cancel`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postIdentityVerificationSessionsSessionRedact(
    p: {
      session: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_identity_verification_session> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/identity/verification_sessions/${p["session"]}/redact`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getInvoicePayments(
    p: {
      endingBefore?: string
      expand?: string[]
      invoice?: string
      limit?: number
      payment?: {
        payment_intent?: string
        type: "payment_intent" | UnknownEnumStringValue
      }
      startingAfter?: string
      status?: "canceled" | "open" | "paid" | UnknownEnumStringValue
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_invoice_payment[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/invoice_payments`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      invoice: p["invoice"],
      limit: p["limit"],
      payment: p["payment"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getInvoicePaymentsInvoicePayment(
    p: {
      expand?: string[]
      invoicePayment: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_invoice_payment> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/invoice_payments/${p["invoicePayment"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getInvoiceRenderingTemplates(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?: "active" | "archived" | UnknownEnumStringValue
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_invoice_rendering_template[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/invoice_rendering_templates`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getInvoiceRenderingTemplatesTemplate(
    p: {
      expand?: string[]
      template: string
      version?: number
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_invoice_rendering_template> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/invoice_rendering_templates/${p["template"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"], version: p["version"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postInvoiceRenderingTemplatesTemplateArchive(
    p: {
      template: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_invoice_rendering_template> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/invoice_rendering_templates/${p["template"]}/archive`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postInvoiceRenderingTemplatesTemplateUnarchive(
    p: {
      template: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_invoice_rendering_template> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/invoice_rendering_templates/${p["template"]}/unarchive`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getInvoiceitems(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      invoice?: string
      limit?: number
      pending?: boolean
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_invoiceitem[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/invoiceitems`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      invoice: p["invoice"],
      limit: p["limit"],
      pending: p["pending"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postInvoiceitems(
    p: {
      requestBody: {
        amount?: number
        currency?: string
        customer: string
        description?: string
        discountable?: boolean
        discounts?:
          | {
              coupon?: string
              discount?: string
              promotion_code?: string
            }[]
          | ""
          | UnknownEnumStringValue
        expand?: string[]
        invoice?: string
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        period?: {
          end: number
          start: number
        }
        price_data?: {
          currency: string
          product: string
          tax_behavior?:
            | "exclusive"
            | "inclusive"
            | "unspecified"
            | UnknownEnumStringValue
          unit_amount?: number
          unit_amount_decimal?: string
        }
        pricing?: {
          price?: string
        }
        quantity?: number
        subscription?: string
        tax_behavior?:
          | "exclusive"
          | "inclusive"
          | "unspecified"
          | UnknownEnumStringValue
        tax_code?: string | "" | UnknownEnumStringValue
        tax_rates?: string[]
        unit_amount_decimal?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_invoiceitem> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/invoiceitems`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      discounts: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
      period: {explode: true, style: "deepObject"},
      price_data: {explode: true, style: "deepObject"},
      pricing: {explode: true, style: "deepObject"},
      tax_code: {explode: true, style: "deepObject"},
      tax_rates: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteInvoiceitemsInvoiceitem(
    p: {
      invoiceitem: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_deleted_invoiceitem> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/invoiceitems/${p["invoiceitem"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async getInvoiceitemsInvoiceitem(
    p: {
      expand?: string[]
      invoiceitem: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_invoiceitem> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/invoiceitems/${p["invoiceitem"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postInvoiceitemsInvoiceitem(
    p: {
      invoiceitem: string
      requestBody?: {
        amount?: number
        description?: string
        discountable?: boolean
        discounts?:
          | {
              coupon?: string
              discount?: string
              promotion_code?: string
            }[]
          | ""
          | UnknownEnumStringValue
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        period?: {
          end: number
          start: number
        }
        price_data?: {
          currency: string
          product: string
          tax_behavior?:
            | "exclusive"
            | "inclusive"
            | "unspecified"
            | UnknownEnumStringValue
          unit_amount?: number
          unit_amount_decimal?: string
        }
        pricing?: {
          price?: string
        }
        quantity?: number
        tax_behavior?:
          | "exclusive"
          | "inclusive"
          | "unspecified"
          | UnknownEnumStringValue
        tax_code?: string | "" | UnknownEnumStringValue
        tax_rates?: string[] | "" | UnknownEnumStringValue
        unit_amount_decimal?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_invoiceitem> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/invoiceitems/${p["invoiceitem"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            discounts: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            period: {explode: true, style: "deepObject"},
            price_data: {explode: true, style: "deepObject"},
            pricing: {explode: true, style: "deepObject"},
            tax_code: {explode: true, style: "deepObject"},
            tax_rates: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getInvoices(
    p: {
      collectionMethod?:
        | "charge_automatically"
        | "send_invoice"
        | UnknownEnumStringValue
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      customer?: string
      dueDate?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?:
        | "draft"
        | "open"
        | "paid"
        | "uncollectible"
        | "void"
        | UnknownEnumStringValue
      subscription?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_invoice[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/invoices`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      collection_method: p["collectionMethod"],
      created: p["created"],
      customer: p["customer"],
      due_date: p["dueDate"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
      subscription: p["subscription"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postInvoices(
    p: {
      requestBody?: {
        account_tax_ids?: string[] | "" | UnknownEnumStringValue
        application_fee_amount?: number
        auto_advance?: boolean
        automatic_tax?: {
          enabled: boolean
          liability?: {
            account?: string
            type: "account" | "self" | UnknownEnumStringValue
          }
        }
        automatically_finalizes_at?: number
        collection_method?:
          | "charge_automatically"
          | "send_invoice"
          | UnknownEnumStringValue
        currency?: string
        custom_fields?:
          | {
              name: string
              value: string
            }[]
          | ""
          | UnknownEnumStringValue
        customer?: string
        days_until_due?: number
        default_payment_method?: string
        default_source?: string
        default_tax_rates?: string[]
        description?: string
        discounts?:
          | {
              coupon?: string
              discount?: string
              promotion_code?: string
            }[]
          | ""
          | UnknownEnumStringValue
        due_date?: number
        effective_at?: number
        expand?: string[]
        footer?: string
        from_invoice?: {
          action: "revision" | UnknownEnumStringValue
          invoice: string
        }
        issuer?: {
          account?: string
          type: "account" | "self" | UnknownEnumStringValue
        }
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        number?: string
        on_behalf_of?: string
        payment_settings?: {
          default_mandate?: string | "" | UnknownEnumStringValue
          payment_method_options?: {
            acss_debit?:
              | {
                  mandate_options?: {
                    transaction_type?:
                      | "business"
                      | "personal"
                      | UnknownEnumStringValue
                  }
                  verification_method?:
                    | "automatic"
                    | "instant"
                    | "microdeposits"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
            bancontact?:
              | {
                  preferred_language?:
                    | "de"
                    | "en"
                    | "fr"
                    | "nl"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
            card?:
              | {
                  installments?: {
                    enabled?: boolean
                    plan?:
                      | {
                          count?: number
                          interval?: "month" | UnknownEnumStringValue
                          type:
                            | "bonus"
                            | "fixed_count"
                            | "revolving"
                            | UnknownEnumStringValue
                        }
                      | ""
                      | UnknownEnumStringValue
                  }
                  request_three_d_secure?:
                    | "any"
                    | "automatic"
                    | "challenge"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
            customer_balance?:
              | {
                  bank_transfer?: {
                    eu_bank_transfer?: {
                      country: string
                    }
                    type?: string
                  }
                  funding_type?: string
                }
              | ""
              | UnknownEnumStringValue
            konbini?: EmptyObject | "" | UnknownEnumStringValue
            sepa_debit?: EmptyObject | "" | UnknownEnumStringValue
            us_bank_account?:
              | {
                  financial_connections?: {
                    filters?: {
                      account_subcategories?: (
                        | "checking"
                        | "savings"
                        | UnknownEnumStringValue
                      )[]
                    }
                    permissions?: (
                      | "balances"
                      | "ownership"
                      | "payment_method"
                      | "transactions"
                      | UnknownEnumStringValue
                    )[]
                    prefetch?: (
                      | "balances"
                      | "ownership"
                      | "transactions"
                      | UnknownEnumStringValue
                    )[]
                  }
                  verification_method?:
                    | "automatic"
                    | "instant"
                    | "microdeposits"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
          }
          payment_method_types?:
            | (
                | "ach_credit_transfer"
                | "ach_debit"
                | "acss_debit"
                | "affirm"
                | "amazon_pay"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "boleto"
                | "card"
                | "cashapp"
                | "crypto"
                | "customer_balance"
                | "eps"
                | "fpx"
                | "giropay"
                | "grabpay"
                | "ideal"
                | "jp_credit_transfer"
                | "kakao_pay"
                | "klarna"
                | "konbini"
                | "kr_card"
                | "link"
                | "multibanco"
                | "naver_pay"
                | "nz_bank_account"
                | "p24"
                | "payco"
                | "paynow"
                | "paypal"
                | "promptpay"
                | "revolut_pay"
                | "sepa_credit_transfer"
                | "sepa_debit"
                | "sofort"
                | "swish"
                | "us_bank_account"
                | "wechat_pay"
                | UnknownEnumStringValue
              )[]
            | ""
            | UnknownEnumStringValue
        }
        pending_invoice_items_behavior?:
          | "exclude"
          | "include"
          | UnknownEnumStringValue
        rendering?: {
          amount_tax_display?:
            | ""
            | "exclude_tax"
            | "include_inclusive_tax"
            | UnknownEnumStringValue
          pdf?: {
            page_size?: "a4" | "auto" | "letter" | UnknownEnumStringValue
          }
          template?: string
          template_version?: number | "" | UnknownEnumStringValue
        }
        shipping_cost?: {
          shipping_rate?: string
          shipping_rate_data?: {
            delivery_estimate?: {
              maximum?: {
                unit:
                  | "business_day"
                  | "day"
                  | "hour"
                  | "month"
                  | "week"
                  | UnknownEnumStringValue
                value: number
              }
              minimum?: {
                unit:
                  | "business_day"
                  | "day"
                  | "hour"
                  | "month"
                  | "week"
                  | UnknownEnumStringValue
                value: number
              }
            }
            display_name: string
            fixed_amount?: {
              amount: number
              currency: string
              currency_options?: {
                [key: string]:
                  | {
                      amount: number
                      tax_behavior?:
                        | "exclusive"
                        | "inclusive"
                        | "unspecified"
                        | UnknownEnumStringValue
                    }
                  | undefined
              }
            }
            metadata?: {
              [key: string]: string | undefined
            }
            tax_behavior?:
              | "exclusive"
              | "inclusive"
              | "unspecified"
              | UnknownEnumStringValue
            tax_code?: string
            type?: "fixed_amount" | UnknownEnumStringValue
          }
        }
        shipping_details?: {
          address: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
          }
          name: string
          phone?: string | "" | UnknownEnumStringValue
        }
        statement_descriptor?: string
        subscription?: string
        transfer_data?: {
          amount?: number
          destination: string
        }
      }
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_invoice> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/invoices`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            account_tax_ids: {explode: true, style: "deepObject"},
            automatic_tax: {explode: true, style: "deepObject"},
            custom_fields: {explode: true, style: "deepObject"},
            default_tax_rates: {explode: true, style: "deepObject"},
            discounts: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            from_invoice: {explode: true, style: "deepObject"},
            issuer: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            payment_settings: {explode: true, style: "deepObject"},
            rendering: {explode: true, style: "deepObject"},
            shipping_cost: {explode: true, style: "deepObject"},
            shipping_details: {explode: true, style: "deepObject"},
            transfer_data: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postInvoicesCreatePreview(
    p: {
      requestBody?: {
        automatic_tax?: {
          enabled: boolean
          liability?: {
            account?: string
            type: "account" | "self" | UnknownEnumStringValue
          }
        }
        currency?: string
        customer?: string
        customer_details?: {
          address?:
            | {
                city?: string
                country?: string
                line1?: string
                line2?: string
                postal_code?: string
                state?: string
              }
            | ""
            | UnknownEnumStringValue
          shipping?:
            | {
                address: {
                  city?: string
                  country?: string
                  line1?: string
                  line2?: string
                  postal_code?: string
                  state?: string
                }
                name: string
                phone?: string
              }
            | ""
            | UnknownEnumStringValue
          tax?: {
            ip_address?: string | "" | UnknownEnumStringValue
          }
          tax_exempt?:
            | ""
            | "exempt"
            | "none"
            | "reverse"
            | UnknownEnumStringValue
          tax_ids?: {
            type:
              | "ad_nrt"
              | "ae_trn"
              | "al_tin"
              | "am_tin"
              | "ao_tin"
              | "ar_cuit"
              | "au_abn"
              | "au_arn"
              | "aw_tin"
              | "az_tin"
              | "ba_tin"
              | "bb_tin"
              | "bd_bin"
              | "bf_ifu"
              | "bg_uic"
              | "bh_vat"
              | "bj_ifu"
              | "bo_tin"
              | "br_cnpj"
              | "br_cpf"
              | "bs_tin"
              | "by_tin"
              | "ca_bn"
              | "ca_gst_hst"
              | "ca_pst_bc"
              | "ca_pst_mb"
              | "ca_pst_sk"
              | "ca_qst"
              | "cd_nif"
              | "ch_uid"
              | "ch_vat"
              | "cl_tin"
              | "cm_niu"
              | "cn_tin"
              | "co_nit"
              | "cr_tin"
              | "cv_nif"
              | "de_stn"
              | "do_rcn"
              | "ec_ruc"
              | "eg_tin"
              | "es_cif"
              | "et_tin"
              | "eu_oss_vat"
              | "eu_vat"
              | "gb_vat"
              | "ge_vat"
              | "gn_nif"
              | "hk_br"
              | "hr_oib"
              | "hu_tin"
              | "id_npwp"
              | "il_vat"
              | "in_gst"
              | "is_vat"
              | "jp_cn"
              | "jp_rn"
              | "jp_trn"
              | "ke_pin"
              | "kg_tin"
              | "kh_tin"
              | "kr_brn"
              | "kz_bin"
              | "la_tin"
              | "li_uid"
              | "li_vat"
              | "ma_vat"
              | "md_vat"
              | "me_pib"
              | "mk_vat"
              | "mr_nif"
              | "mx_rfc"
              | "my_frp"
              | "my_itn"
              | "my_sst"
              | "ng_tin"
              | "no_vat"
              | "no_voec"
              | "np_pan"
              | "nz_gst"
              | "om_vat"
              | "pe_ruc"
              | "ph_tin"
              | "ro_tin"
              | "rs_pib"
              | "ru_inn"
              | "ru_kpp"
              | "sa_vat"
              | "sg_gst"
              | "sg_uen"
              | "si_tin"
              | "sn_ninea"
              | "sr_fin"
              | "sv_nit"
              | "th_vat"
              | "tj_tin"
              | "tr_tin"
              | "tw_vat"
              | "tz_vat"
              | "ua_vat"
              | "ug_tin"
              | "us_ein"
              | "uy_ruc"
              | "uz_tin"
              | "uz_vat"
              | "ve_rif"
              | "vn_tin"
              | "za_vat"
              | "zm_tin"
              | "zw_tin"
              | UnknownEnumStringValue
            value: string
          }[]
        }
        discounts?:
          | {
              coupon?: string
              discount?: string
              promotion_code?: string
            }[]
          | ""
          | UnknownEnumStringValue
        expand?: string[]
        invoice_items?: {
          amount?: number
          currency?: string
          description?: string
          discountable?: boolean
          discounts?:
            | {
                coupon?: string
                discount?: string
                promotion_code?: string
              }[]
            | ""
            | UnknownEnumStringValue
          invoiceitem?: string
          metadata?:
            | {
                [key: string]: string | undefined
              }
            | ""
            | UnknownEnumStringValue
          period?: {
            end: number
            start: number
          }
          price?: string
          price_data?: {
            currency: string
            product: string
            tax_behavior?:
              | "exclusive"
              | "inclusive"
              | "unspecified"
              | UnknownEnumStringValue
            unit_amount?: number
            unit_amount_decimal?: string
          }
          quantity?: number
          tax_behavior?:
            | "exclusive"
            | "inclusive"
            | "unspecified"
            | UnknownEnumStringValue
          tax_code?: string | "" | UnknownEnumStringValue
          tax_rates?: string[] | "" | UnknownEnumStringValue
          unit_amount?: number
          unit_amount_decimal?: string
        }[]
        issuer?: {
          account?: string
          type: "account" | "self" | UnknownEnumStringValue
        }
        on_behalf_of?: string | "" | UnknownEnumStringValue
        preview_mode?: "next" | "recurring" | UnknownEnumStringValue
        schedule?: string
        schedule_details?: {
          billing_mode?: {
            type: "classic" | "flexible" | UnknownEnumStringValue
          }
          end_behavior?: "cancel" | "release" | UnknownEnumStringValue
          phases?: {
            add_invoice_items?: {
              discounts?: {
                coupon?: string
                discount?: string
                promotion_code?: string
              }[]
              price?: string
              price_data?: {
                currency: string
                product: string
                tax_behavior?:
                  | "exclusive"
                  | "inclusive"
                  | "unspecified"
                  | UnknownEnumStringValue
                unit_amount?: number
                unit_amount_decimal?: string
              }
              quantity?: number
              tax_rates?: string[] | "" | UnknownEnumStringValue
            }[]
            application_fee_percent?: number
            automatic_tax?: {
              enabled: boolean
              liability?: {
                account?: string
                type: "account" | "self" | UnknownEnumStringValue
              }
            }
            billing_cycle_anchor?:
              | "automatic"
              | "phase_start"
              | UnknownEnumStringValue
            billing_thresholds?:
              | {
                  amount_gte?: number
                  reset_billing_cycle_anchor?: boolean
                }
              | ""
              | UnknownEnumStringValue
            collection_method?:
              | "charge_automatically"
              | "send_invoice"
              | UnknownEnumStringValue
            default_payment_method?: string
            default_tax_rates?: string[] | "" | UnknownEnumStringValue
            description?: string | "" | UnknownEnumStringValue
            discounts?:
              | {
                  coupon?: string
                  discount?: string
                  promotion_code?: string
                }[]
              | ""
              | UnknownEnumStringValue
            end_date?: number | "now" | UnknownEnumStringValue
            invoice_settings?: {
              account_tax_ids?: string[] | "" | UnknownEnumStringValue
              days_until_due?: number
              issuer?: {
                account?: string
                type: "account" | "self" | UnknownEnumStringValue
              }
            }
            items: {
              billing_thresholds?:
                | {
                    usage_gte: number
                  }
                | ""
                | UnknownEnumStringValue
              discounts?:
                | {
                    coupon?: string
                    discount?: string
                    promotion_code?: string
                  }[]
                | ""
                | UnknownEnumStringValue
              metadata?: {
                [key: string]: string | undefined
              }
              price?: string
              price_data?: {
                currency: string
                product: string
                recurring: {
                  interval:
                    | "day"
                    | "month"
                    | "week"
                    | "year"
                    | UnknownEnumStringValue
                  interval_count?: number
                }
                tax_behavior?:
                  | "exclusive"
                  | "inclusive"
                  | "unspecified"
                  | UnknownEnumStringValue
                unit_amount?: number
                unit_amount_decimal?: string
              }
              quantity?: number
              tax_rates?: string[] | "" | UnknownEnumStringValue
            }[]
            iterations?: number
            metadata?: {
              [key: string]: string | undefined
            }
            on_behalf_of?: string
            proration_behavior?:
              | "always_invoice"
              | "create_prorations"
              | "none"
              | UnknownEnumStringValue
            start_date?: number | "now" | UnknownEnumStringValue
            transfer_data?: {
              amount_percent?: number
              destination: string
            }
            trial?: boolean
            trial_end?: number | "now" | UnknownEnumStringValue
          }[]
          proration_behavior?:
            | "always_invoice"
            | "create_prorations"
            | "none"
            | UnknownEnumStringValue
        }
        subscription?: string
        subscription_details?: {
          billing_cycle_anchor?:
            | "now"
            | "unchanged"
            | UnknownEnumStringValue
            | number
          billing_mode?: {
            type: "classic" | "flexible" | UnknownEnumStringValue
          }
          cancel_at?: number | "" | UnknownEnumStringValue
          cancel_at_period_end?: boolean
          cancel_now?: boolean
          default_tax_rates?: string[] | "" | UnknownEnumStringValue
          items?: {
            billing_thresholds?:
              | {
                  usage_gte: number
                }
              | ""
              | UnknownEnumStringValue
            clear_usage?: boolean
            deleted?: boolean
            discounts?:
              | {
                  coupon?: string
                  discount?: string
                  promotion_code?: string
                }[]
              | ""
              | UnknownEnumStringValue
            id?: string
            metadata?:
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            price?: string
            price_data?: {
              currency: string
              product: string
              recurring: {
                interval:
                  | "day"
                  | "month"
                  | "week"
                  | "year"
                  | UnknownEnumStringValue
                interval_count?: number
              }
              tax_behavior?:
                | "exclusive"
                | "inclusive"
                | "unspecified"
                | UnknownEnumStringValue
              unit_amount?: number
              unit_amount_decimal?: string
            }
            quantity?: number
            tax_rates?: string[] | "" | UnknownEnumStringValue
          }[]
          proration_behavior?:
            | "always_invoice"
            | "create_prorations"
            | "none"
            | UnknownEnumStringValue
          proration_date?: number
          resume_at?: "now" | UnknownEnumStringValue
          start_date?: number
          trial_end?: "now" | UnknownEnumStringValue | number
        }
      }
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_invoice> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/invoices/create_preview`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            automatic_tax: {explode: true, style: "deepObject"},
            customer_details: {explode: true, style: "deepObject"},
            discounts: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            invoice_items: {explode: true, style: "deepObject"},
            issuer: {explode: true, style: "deepObject"},
            on_behalf_of: {explode: true, style: "deepObject"},
            schedule_details: {explode: true, style: "deepObject"},
            subscription_details: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getInvoicesSearch(
    p: {
      expand?: string[]
      limit?: number
      page?: string
      query: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_invoice[]
          has_more: boolean
          next_page?: string | null
          object: "search_result" | UnknownEnumStringValue
          total_count?: number
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/invoices/search`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      expand: p["expand"],
      limit: p["limit"],
      page: p["page"],
      query: p["query"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async deleteInvoicesInvoice(
    p: {
      invoice: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_deleted_invoice> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/invoices/${p["invoice"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async getInvoicesInvoice(
    p: {
      expand?: string[]
      invoice: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_invoice> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/invoices/${p["invoice"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postInvoicesInvoice(
    p: {
      invoice: string
      requestBody?: {
        account_tax_ids?: string[] | "" | UnknownEnumStringValue
        application_fee_amount?: number
        auto_advance?: boolean
        automatic_tax?: {
          enabled: boolean
          liability?: {
            account?: string
            type: "account" | "self" | UnknownEnumStringValue
          }
        }
        automatically_finalizes_at?: number
        collection_method?:
          | "charge_automatically"
          | "send_invoice"
          | UnknownEnumStringValue
        custom_fields?:
          | {
              name: string
              value: string
            }[]
          | ""
          | UnknownEnumStringValue
        days_until_due?: number
        default_payment_method?: string
        default_source?: string | "" | UnknownEnumStringValue
        default_tax_rates?: string[] | "" | UnknownEnumStringValue
        description?: string
        discounts?:
          | {
              coupon?: string
              discount?: string
              promotion_code?: string
            }[]
          | ""
          | UnknownEnumStringValue
        due_date?: number
        effective_at?: number | "" | UnknownEnumStringValue
        expand?: string[]
        footer?: string
        issuer?: {
          account?: string
          type: "account" | "self" | UnknownEnumStringValue
        }
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        number?: string | "" | UnknownEnumStringValue
        on_behalf_of?: string | "" | UnknownEnumStringValue
        payment_settings?: {
          default_mandate?: string | "" | UnknownEnumStringValue
          payment_method_options?: {
            acss_debit?:
              | {
                  mandate_options?: {
                    transaction_type?:
                      | "business"
                      | "personal"
                      | UnknownEnumStringValue
                  }
                  verification_method?:
                    | "automatic"
                    | "instant"
                    | "microdeposits"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
            bancontact?:
              | {
                  preferred_language?:
                    | "de"
                    | "en"
                    | "fr"
                    | "nl"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
            card?:
              | {
                  installments?: {
                    enabled?: boolean
                    plan?:
                      | {
                          count?: number
                          interval?: "month" | UnknownEnumStringValue
                          type:
                            | "bonus"
                            | "fixed_count"
                            | "revolving"
                            | UnknownEnumStringValue
                        }
                      | ""
                      | UnknownEnumStringValue
                  }
                  request_three_d_secure?:
                    | "any"
                    | "automatic"
                    | "challenge"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
            customer_balance?:
              | {
                  bank_transfer?: {
                    eu_bank_transfer?: {
                      country: string
                    }
                    type?: string
                  }
                  funding_type?: string
                }
              | ""
              | UnknownEnumStringValue
            konbini?: EmptyObject | "" | UnknownEnumStringValue
            sepa_debit?: EmptyObject | "" | UnknownEnumStringValue
            us_bank_account?:
              | {
                  financial_connections?: {
                    filters?: {
                      account_subcategories?: (
                        | "checking"
                        | "savings"
                        | UnknownEnumStringValue
                      )[]
                    }
                    permissions?: (
                      | "balances"
                      | "ownership"
                      | "payment_method"
                      | "transactions"
                      | UnknownEnumStringValue
                    )[]
                    prefetch?: (
                      | "balances"
                      | "ownership"
                      | "transactions"
                      | UnknownEnumStringValue
                    )[]
                  }
                  verification_method?:
                    | "automatic"
                    | "instant"
                    | "microdeposits"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
          }
          payment_method_types?:
            | (
                | "ach_credit_transfer"
                | "ach_debit"
                | "acss_debit"
                | "affirm"
                | "amazon_pay"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "boleto"
                | "card"
                | "cashapp"
                | "crypto"
                | "customer_balance"
                | "eps"
                | "fpx"
                | "giropay"
                | "grabpay"
                | "ideal"
                | "jp_credit_transfer"
                | "kakao_pay"
                | "klarna"
                | "konbini"
                | "kr_card"
                | "link"
                | "multibanco"
                | "naver_pay"
                | "nz_bank_account"
                | "p24"
                | "payco"
                | "paynow"
                | "paypal"
                | "promptpay"
                | "revolut_pay"
                | "sepa_credit_transfer"
                | "sepa_debit"
                | "sofort"
                | "swish"
                | "us_bank_account"
                | "wechat_pay"
                | UnknownEnumStringValue
              )[]
            | ""
            | UnknownEnumStringValue
        }
        rendering?: {
          amount_tax_display?:
            | ""
            | "exclude_tax"
            | "include_inclusive_tax"
            | UnknownEnumStringValue
          pdf?: {
            page_size?: "a4" | "auto" | "letter" | UnknownEnumStringValue
          }
          template?: string
          template_version?: number | "" | UnknownEnumStringValue
        }
        shipping_cost?:
          | {
              shipping_rate?: string
              shipping_rate_data?: {
                delivery_estimate?: {
                  maximum?: {
                    unit:
                      | "business_day"
                      | "day"
                      | "hour"
                      | "month"
                      | "week"
                      | UnknownEnumStringValue
                    value: number
                  }
                  minimum?: {
                    unit:
                      | "business_day"
                      | "day"
                      | "hour"
                      | "month"
                      | "week"
                      | UnknownEnumStringValue
                    value: number
                  }
                }
                display_name: string
                fixed_amount?: {
                  amount: number
                  currency: string
                  currency_options?: {
                    [key: string]:
                      | {
                          amount: number
                          tax_behavior?:
                            | "exclusive"
                            | "inclusive"
                            | "unspecified"
                            | UnknownEnumStringValue
                        }
                      | undefined
                  }
                }
                metadata?: {
                  [key: string]: string | undefined
                }
                tax_behavior?:
                  | "exclusive"
                  | "inclusive"
                  | "unspecified"
                  | UnknownEnumStringValue
                tax_code?: string
                type?: "fixed_amount" | UnknownEnumStringValue
              }
            }
          | ""
          | UnknownEnumStringValue
        shipping_details?:
          | {
              address: {
                city?: string
                country?: string
                line1?: string
                line2?: string
                postal_code?: string
                state?: string
              }
              name: string
              phone?: string | "" | UnknownEnumStringValue
            }
          | ""
          | UnknownEnumStringValue
        statement_descriptor?: string
        transfer_data?:
          | {
              amount?: number
              destination: string
            }
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_invoice> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/invoices/${p["invoice"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            account_tax_ids: {explode: true, style: "deepObject"},
            automatic_tax: {explode: true, style: "deepObject"},
            custom_fields: {explode: true, style: "deepObject"},
            default_source: {explode: true, style: "deepObject"},
            default_tax_rates: {explode: true, style: "deepObject"},
            discounts: {explode: true, style: "deepObject"},
            effective_at: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            issuer: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            number: {explode: true, style: "deepObject"},
            on_behalf_of: {explode: true, style: "deepObject"},
            payment_settings: {explode: true, style: "deepObject"},
            rendering: {explode: true, style: "deepObject"},
            shipping_cost: {explode: true, style: "deepObject"},
            shipping_details: {explode: true, style: "deepObject"},
            transfer_data: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postInvoicesInvoiceAddLines(
    p: {
      invoice: string
      requestBody: {
        expand?: string[]
        invoice_metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        lines: {
          amount?: number
          description?: string
          discountable?: boolean
          discounts?:
            | {
                coupon?: string
                discount?: string
                promotion_code?: string
              }[]
            | ""
            | UnknownEnumStringValue
          invoice_item?: string
          metadata?:
            | {
                [key: string]: string | undefined
              }
            | ""
            | UnknownEnumStringValue
          period?: {
            end: number
            start: number
          }
          price_data?: {
            currency: string
            product?: string
            product_data?: {
              description?: string
              images?: string[]
              metadata?: {
                [key: string]: string | undefined
              }
              name: string
              tax_code?: string
            }
            tax_behavior?:
              | "exclusive"
              | "inclusive"
              | "unspecified"
              | UnknownEnumStringValue
            unit_amount?: number
            unit_amount_decimal?: string
          }
          pricing?: {
            price?: string
          }
          quantity?: number
          tax_amounts?:
            | {
                amount: number
                tax_rate_data: {
                  country?: string
                  description?: string
                  display_name: string
                  inclusive: boolean
                  jurisdiction?: string
                  jurisdiction_level?:
                    | "city"
                    | "country"
                    | "county"
                    | "district"
                    | "multiple"
                    | "state"
                    | UnknownEnumStringValue
                  percentage: number
                  state?: string
                  tax_type?:
                    | "amusement_tax"
                    | "communications_tax"
                    | "gst"
                    | "hst"
                    | "igst"
                    | "jct"
                    | "lease_tax"
                    | "pst"
                    | "qst"
                    | "retail_delivery_fee"
                    | "rst"
                    | "sales_tax"
                    | "service_tax"
                    | "vat"
                    | UnknownEnumStringValue
                }
                taxability_reason?:
                  | "customer_exempt"
                  | "not_collecting"
                  | "not_subject_to_tax"
                  | "not_supported"
                  | "portion_product_exempt"
                  | "portion_reduced_rated"
                  | "portion_standard_rated"
                  | "product_exempt"
                  | "product_exempt_holiday"
                  | "proportionally_rated"
                  | "reduced_rated"
                  | "reverse_charge"
                  | "standard_rated"
                  | "taxable_basis_reduced"
                  | "zero_rated"
                  | UnknownEnumStringValue
                taxable_amount: number
              }[]
            | ""
            | UnknownEnumStringValue
          tax_rates?: string[] | "" | UnknownEnumStringValue
        }[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_invoice> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/invoices/${p["invoice"]}/add_lines`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      invoice_metadata: {explode: true, style: "deepObject"},
      lines: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postInvoicesInvoiceAttachPayment(
    p: {
      invoice: string
      requestBody?: {
        expand?: string[]
        payment_intent?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_invoice> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/invoices/${p["invoice"]}/attach_payment`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postInvoicesInvoiceFinalize(
    p: {
      invoice: string
      requestBody?: {
        auto_advance?: boolean
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_invoice> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/invoices/${p["invoice"]}/finalize`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getInvoicesInvoiceLines(
    p: {
      endingBefore?: string
      expand?: string[]
      invoice: string
      limit?: number
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_line_item[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/invoices/${p["invoice"]}/lines`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postInvoicesInvoiceLinesLineItemId(
    p: {
      invoice: string
      lineItemId: string
      requestBody?: {
        amount?: number
        description?: string
        discountable?: boolean
        discounts?:
          | {
              coupon?: string
              discount?: string
              promotion_code?: string
            }[]
          | ""
          | UnknownEnumStringValue
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        period?: {
          end: number
          start: number
        }
        price_data?: {
          currency: string
          product?: string
          product_data?: {
            description?: string
            images?: string[]
            metadata?: {
              [key: string]: string | undefined
            }
            name: string
            tax_code?: string
          }
          tax_behavior?:
            | "exclusive"
            | "inclusive"
            | "unspecified"
            | UnknownEnumStringValue
          unit_amount?: number
          unit_amount_decimal?: string
        }
        pricing?: {
          price?: string
        }
        quantity?: number
        tax_amounts?:
          | {
              amount: number
              tax_rate_data: {
                country?: string
                description?: string
                display_name: string
                inclusive: boolean
                jurisdiction?: string
                jurisdiction_level?:
                  | "city"
                  | "country"
                  | "county"
                  | "district"
                  | "multiple"
                  | "state"
                  | UnknownEnumStringValue
                percentage: number
                state?: string
                tax_type?:
                  | "amusement_tax"
                  | "communications_tax"
                  | "gst"
                  | "hst"
                  | "igst"
                  | "jct"
                  | "lease_tax"
                  | "pst"
                  | "qst"
                  | "retail_delivery_fee"
                  | "rst"
                  | "sales_tax"
                  | "service_tax"
                  | "vat"
                  | UnknownEnumStringValue
              }
              taxability_reason?:
                | "customer_exempt"
                | "not_collecting"
                | "not_subject_to_tax"
                | "not_supported"
                | "portion_product_exempt"
                | "portion_reduced_rated"
                | "portion_standard_rated"
                | "product_exempt"
                | "product_exempt_holiday"
                | "proportionally_rated"
                | "reduced_rated"
                | "reverse_charge"
                | "standard_rated"
                | "taxable_basis_reduced"
                | "zero_rated"
                | UnknownEnumStringValue
              taxable_amount: number
            }[]
          | ""
          | UnknownEnumStringValue
        tax_rates?: string[] | "" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_line_item> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/invoices/${p["invoice"]}/lines/${p["lineItemId"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            discounts: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            period: {explode: true, style: "deepObject"},
            price_data: {explode: true, style: "deepObject"},
            pricing: {explode: true, style: "deepObject"},
            tax_amounts: {explode: true, style: "deepObject"},
            tax_rates: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postInvoicesInvoiceMarkUncollectible(
    p: {
      invoice: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_invoice> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/invoices/${p["invoice"]}/mark_uncollectible`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postInvoicesInvoicePay(
    p: {
      invoice: string
      requestBody?: {
        expand?: string[]
        forgive?: boolean
        mandate?: string | "" | UnknownEnumStringValue
        off_session?: boolean
        paid_out_of_band?: boolean
        payment_method?: string
        source?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_invoice> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/invoices/${p["invoice"]}/pay`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            mandate: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postInvoicesInvoiceRemoveLines(
    p: {
      invoice: string
      requestBody: {
        expand?: string[]
        invoice_metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        lines: {
          behavior: "delete" | "unassign" | UnknownEnumStringValue
          id: string
        }[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_invoice> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/invoices/${p["invoice"]}/remove_lines`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      invoice_metadata: {explode: true, style: "deepObject"},
      lines: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postInvoicesInvoiceSend(
    p: {
      invoice: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_invoice> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/invoices/${p["invoice"]}/send`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postInvoicesInvoiceUpdateLines(
    p: {
      invoice: string
      requestBody: {
        expand?: string[]
        invoice_metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        lines: {
          amount?: number
          description?: string
          discountable?: boolean
          discounts?:
            | {
                coupon?: string
                discount?: string
                promotion_code?: string
              }[]
            | ""
            | UnknownEnumStringValue
          id: string
          metadata?:
            | {
                [key: string]: string | undefined
              }
            | ""
            | UnknownEnumStringValue
          period?: {
            end: number
            start: number
          }
          price_data?: {
            currency: string
            product?: string
            product_data?: {
              description?: string
              images?: string[]
              metadata?: {
                [key: string]: string | undefined
              }
              name: string
              tax_code?: string
            }
            tax_behavior?:
              | "exclusive"
              | "inclusive"
              | "unspecified"
              | UnknownEnumStringValue
            unit_amount?: number
            unit_amount_decimal?: string
          }
          pricing?: {
            price?: string
          }
          quantity?: number
          tax_amounts?:
            | {
                amount: number
                tax_rate_data: {
                  country?: string
                  description?: string
                  display_name: string
                  inclusive: boolean
                  jurisdiction?: string
                  jurisdiction_level?:
                    | "city"
                    | "country"
                    | "county"
                    | "district"
                    | "multiple"
                    | "state"
                    | UnknownEnumStringValue
                  percentage: number
                  state?: string
                  tax_type?:
                    | "amusement_tax"
                    | "communications_tax"
                    | "gst"
                    | "hst"
                    | "igst"
                    | "jct"
                    | "lease_tax"
                    | "pst"
                    | "qst"
                    | "retail_delivery_fee"
                    | "rst"
                    | "sales_tax"
                    | "service_tax"
                    | "vat"
                    | UnknownEnumStringValue
                }
                taxability_reason?:
                  | "customer_exempt"
                  | "not_collecting"
                  | "not_subject_to_tax"
                  | "not_supported"
                  | "portion_product_exempt"
                  | "portion_reduced_rated"
                  | "portion_standard_rated"
                  | "product_exempt"
                  | "product_exempt_holiday"
                  | "proportionally_rated"
                  | "reduced_rated"
                  | "reverse_charge"
                  | "standard_rated"
                  | "taxable_basis_reduced"
                  | "zero_rated"
                  | UnknownEnumStringValue
                taxable_amount: number
              }[]
            | ""
            | UnknownEnumStringValue
          tax_rates?: string[] | "" | UnknownEnumStringValue
        }[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_invoice> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/invoices/${p["invoice"]}/update_lines`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      invoice_metadata: {explode: true, style: "deepObject"},
      lines: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postInvoicesInvoiceVoid(
    p: {
      invoice: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_invoice> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/invoices/${p["invoice"]}/void`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getIssuingAuthorizations(
    p: {
      card?: string
      cardholder?: string
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?:
        | "closed"
        | "expired"
        | "pending"
        | "reversed"
        | UnknownEnumStringValue
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_issuing_authorization[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/issuing/authorizations`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      card: p["card"],
      cardholder: p["cardholder"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getIssuingAuthorizationsAuthorization(
    p: {
      authorization: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_authorization> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/issuing/authorizations/${p["authorization"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postIssuingAuthorizationsAuthorization(
    p: {
      authorization: string
      requestBody?: {
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_authorization> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/issuing/authorizations/${p["authorization"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postIssuingAuthorizationsAuthorizationApprove(
    p: {
      authorization: string
      requestBody?: {
        amount?: number
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_authorization> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/issuing/authorizations/${p["authorization"]}/approve`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postIssuingAuthorizationsAuthorizationDecline(
    p: {
      authorization: string
      requestBody?: {
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_authorization> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/issuing/authorizations/${p["authorization"]}/decline`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getIssuingCardholders(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      email?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      phoneNumber?: string
      startingAfter?: string
      status?: "active" | "blocked" | "inactive" | UnknownEnumStringValue
      type?: "company" | "individual" | UnknownEnumStringValue
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_issuing_cardholder[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/issuing/cardholders`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      email: p["email"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      phone_number: p["phoneNumber"],
      starting_after: p["startingAfter"],
      status: p["status"],
      type: p["type"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postIssuingCardholders(
    p: {
      requestBody: {
        billing: {
          address: {
            city: string
            country: string
            line1: string
            line2?: string
            postal_code: string
            state?: string
          }
        }
        company?: {
          tax_id?: string
        }
        email?: string
        expand?: string[]
        individual?: {
          card_issuing?: {
            user_terms_acceptance?: {
              date?: number
              ip?: string
              user_agent?: string | "" | UnknownEnumStringValue
            }
          }
          dob?: {
            day: number
            month: number
            year: number
          }
          first_name?: string
          last_name?: string
          verification?: {
            document?: {
              back?: string
              front?: string
            }
          }
        }
        metadata?: {
          [key: string]: string | undefined
        }
        name: string
        phone_number?: string
        preferred_locales?: (
          | "de"
          | "en"
          | "es"
          | "fr"
          | "it"
          | UnknownEnumStringValue
        )[]
        spending_controls?: {
          allowed_categories?: (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electric_vehicle_charging"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "emergency_services_gcas_visa_use_only"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_licensed_horse_dog_racing_us_region_only"
            | "government_licensed_online_casions_online_gambling_us_region_only"
            | "government_owned_lotteries_non_us_region"
            | "government_owned_lotteries_us_region_only"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "marketplaces"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
            | UnknownEnumStringValue
          )[]
          allowed_merchant_countries?: string[]
          blocked_categories?: (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electric_vehicle_charging"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "emergency_services_gcas_visa_use_only"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_licensed_horse_dog_racing_us_region_only"
            | "government_licensed_online_casions_online_gambling_us_region_only"
            | "government_owned_lotteries_non_us_region"
            | "government_owned_lotteries_us_region_only"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "marketplaces"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
            | UnknownEnumStringValue
          )[]
          blocked_merchant_countries?: string[]
          spending_limits?: {
            amount: number
            categories?: (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electric_vehicle_charging"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "emergency_services_gcas_visa_use_only"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_licensed_horse_dog_racing_us_region_only"
              | "government_licensed_online_casions_online_gambling_us_region_only"
              | "government_owned_lotteries_non_us_region"
              | "government_owned_lotteries_us_region_only"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "marketplaces"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
              | UnknownEnumStringValue
            )[]
            interval:
              | "all_time"
              | "daily"
              | "monthly"
              | "per_authorization"
              | "weekly"
              | "yearly"
              | UnknownEnumStringValue
          }[]
          spending_limits_currency?: string
        }
        status?: "active" | "inactive" | UnknownEnumStringValue
        type?: "company" | "individual" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_cardholder> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/issuing/cardholders`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      billing: {explode: true, style: "deepObject"},
      company: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
      individual: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
      preferred_locales: {explode: true, style: "deepObject"},
      spending_controls: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getIssuingCardholdersCardholder(
    p: {
      cardholder: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_cardholder> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/issuing/cardholders/${p["cardholder"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postIssuingCardholdersCardholder(
    p: {
      cardholder: string
      requestBody?: {
        billing?: {
          address: {
            city: string
            country: string
            line1: string
            line2?: string
            postal_code: string
            state?: string
          }
        }
        company?: {
          tax_id?: string
        }
        email?: string
        expand?: string[]
        individual?: {
          card_issuing?: {
            user_terms_acceptance?: {
              date?: number
              ip?: string
              user_agent?: string | "" | UnknownEnumStringValue
            }
          }
          dob?: {
            day: number
            month: number
            year: number
          }
          first_name?: string
          last_name?: string
          verification?: {
            document?: {
              back?: string
              front?: string
            }
          }
        }
        metadata?: {
          [key: string]: string | undefined
        }
        phone_number?: string
        preferred_locales?: (
          | "de"
          | "en"
          | "es"
          | "fr"
          | "it"
          | UnknownEnumStringValue
        )[]
        spending_controls?: {
          allowed_categories?: (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electric_vehicle_charging"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "emergency_services_gcas_visa_use_only"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_licensed_horse_dog_racing_us_region_only"
            | "government_licensed_online_casions_online_gambling_us_region_only"
            | "government_owned_lotteries_non_us_region"
            | "government_owned_lotteries_us_region_only"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "marketplaces"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
            | UnknownEnumStringValue
          )[]
          allowed_merchant_countries?: string[]
          blocked_categories?: (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electric_vehicle_charging"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "emergency_services_gcas_visa_use_only"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_licensed_horse_dog_racing_us_region_only"
            | "government_licensed_online_casions_online_gambling_us_region_only"
            | "government_owned_lotteries_non_us_region"
            | "government_owned_lotteries_us_region_only"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "marketplaces"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
            | UnknownEnumStringValue
          )[]
          blocked_merchant_countries?: string[]
          spending_limits?: {
            amount: number
            categories?: (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electric_vehicle_charging"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "emergency_services_gcas_visa_use_only"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_licensed_horse_dog_racing_us_region_only"
              | "government_licensed_online_casions_online_gambling_us_region_only"
              | "government_owned_lotteries_non_us_region"
              | "government_owned_lotteries_us_region_only"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "marketplaces"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
              | UnknownEnumStringValue
            )[]
            interval:
              | "all_time"
              | "daily"
              | "monthly"
              | "per_authorization"
              | "weekly"
              | "yearly"
              | UnknownEnumStringValue
          }[]
          spending_limits_currency?: string
        }
        status?: "active" | "inactive" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_cardholder> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/issuing/cardholders/${p["cardholder"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            billing: {explode: true, style: "deepObject"},
            company: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            individual: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            preferred_locales: {explode: true, style: "deepObject"},
            spending_controls: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getIssuingCards(
    p: {
      cardholder?: string
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expMonth?: number
      expYear?: number
      expand?: string[]
      last4?: string
      limit?: number
      personalizationDesign?: string
      startingAfter?: string
      status?: "active" | "canceled" | "inactive" | UnknownEnumStringValue
      type?: "physical" | "virtual" | UnknownEnumStringValue
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_issuing_card[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/issuing/cards`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      cardholder: p["cardholder"],
      created: p["created"],
      ending_before: p["endingBefore"],
      exp_month: p["expMonth"],
      exp_year: p["expYear"],
      expand: p["expand"],
      last4: p["last4"],
      limit: p["limit"],
      personalization_design: p["personalizationDesign"],
      starting_after: p["startingAfter"],
      status: p["status"],
      type: p["type"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postIssuingCards(
    p: {
      requestBody: {
        cardholder?: string
        currency: string
        expand?: string[]
        financial_account?: string
        metadata?: {
          [key: string]: string | undefined
        }
        personalization_design?: string
        pin?: {
          encrypted_number?: string
        }
        replacement_for?: string
        replacement_reason?:
          | "damaged"
          | "expired"
          | "lost"
          | "stolen"
          | UnknownEnumStringValue
        second_line?: string | "" | UnknownEnumStringValue
        shipping?: {
          address: {
            city: string
            country: string
            line1: string
            line2?: string
            postal_code: string
            state?: string
          }
          address_validation?: {
            mode:
              | "disabled"
              | "normalization_only"
              | "validation_and_normalization"
              | UnknownEnumStringValue
          }
          customs?: {
            eori_number?: string
          }
          name: string
          phone_number?: string
          require_signature?: boolean
          service?: "express" | "priority" | "standard" | UnknownEnumStringValue
          type?: "bulk" | "individual" | UnknownEnumStringValue
        }
        spending_controls?: {
          allowed_categories?: (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electric_vehicle_charging"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "emergency_services_gcas_visa_use_only"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_licensed_horse_dog_racing_us_region_only"
            | "government_licensed_online_casions_online_gambling_us_region_only"
            | "government_owned_lotteries_non_us_region"
            | "government_owned_lotteries_us_region_only"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "marketplaces"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
            | UnknownEnumStringValue
          )[]
          allowed_merchant_countries?: string[]
          blocked_categories?: (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electric_vehicle_charging"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "emergency_services_gcas_visa_use_only"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_licensed_horse_dog_racing_us_region_only"
            | "government_licensed_online_casions_online_gambling_us_region_only"
            | "government_owned_lotteries_non_us_region"
            | "government_owned_lotteries_us_region_only"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "marketplaces"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
            | UnknownEnumStringValue
          )[]
          blocked_merchant_countries?: string[]
          spending_limits?: {
            amount: number
            categories?: (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electric_vehicle_charging"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "emergency_services_gcas_visa_use_only"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_licensed_horse_dog_racing_us_region_only"
              | "government_licensed_online_casions_online_gambling_us_region_only"
              | "government_owned_lotteries_non_us_region"
              | "government_owned_lotteries_us_region_only"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "marketplaces"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
              | UnknownEnumStringValue
            )[]
            interval:
              | "all_time"
              | "daily"
              | "monthly"
              | "per_authorization"
              | "weekly"
              | "yearly"
              | UnknownEnumStringValue
          }[]
        }
        status?: "active" | "inactive" | UnknownEnumStringValue
        type: "physical" | "virtual" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_card> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/issuing/cards`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
      pin: {explode: true, style: "deepObject"},
      second_line: {explode: true, style: "deepObject"},
      shipping: {explode: true, style: "deepObject"},
      spending_controls: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getIssuingCardsCard(
    p: {
      card: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_card> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/issuing/cards/${p["card"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postIssuingCardsCard(
    p: {
      card: string
      requestBody?: {
        cancellation_reason?: "lost" | "stolen" | UnknownEnumStringValue
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        personalization_design?: string
        pin?: {
          encrypted_number?: string
        }
        shipping?: {
          address: {
            city: string
            country: string
            line1: string
            line2?: string
            postal_code: string
            state?: string
          }
          address_validation?: {
            mode:
              | "disabled"
              | "normalization_only"
              | "validation_and_normalization"
              | UnknownEnumStringValue
          }
          customs?: {
            eori_number?: string
          }
          name: string
          phone_number?: string
          require_signature?: boolean
          service?: "express" | "priority" | "standard" | UnknownEnumStringValue
          type?: "bulk" | "individual" | UnknownEnumStringValue
        }
        spending_controls?: {
          allowed_categories?: (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electric_vehicle_charging"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "emergency_services_gcas_visa_use_only"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_licensed_horse_dog_racing_us_region_only"
            | "government_licensed_online_casions_online_gambling_us_region_only"
            | "government_owned_lotteries_non_us_region"
            | "government_owned_lotteries_us_region_only"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "marketplaces"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
            | UnknownEnumStringValue
          )[]
          allowed_merchant_countries?: string[]
          blocked_categories?: (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electric_vehicle_charging"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "emergency_services_gcas_visa_use_only"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_licensed_horse_dog_racing_us_region_only"
            | "government_licensed_online_casions_online_gambling_us_region_only"
            | "government_owned_lotteries_non_us_region"
            | "government_owned_lotteries_us_region_only"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "marketplaces"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
            | UnknownEnumStringValue
          )[]
          blocked_merchant_countries?: string[]
          spending_limits?: {
            amount: number
            categories?: (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electric_vehicle_charging"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "emergency_services_gcas_visa_use_only"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_licensed_horse_dog_racing_us_region_only"
              | "government_licensed_online_casions_online_gambling_us_region_only"
              | "government_owned_lotteries_non_us_region"
              | "government_owned_lotteries_us_region_only"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "marketplaces"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
              | UnknownEnumStringValue
            )[]
            interval:
              | "all_time"
              | "daily"
              | "monthly"
              | "per_authorization"
              | "weekly"
              | "yearly"
              | UnknownEnumStringValue
          }[]
        }
        status?: "active" | "canceled" | "inactive" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_card> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/issuing/cards/${p["card"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            pin: {explode: true, style: "deepObject"},
            shipping: {explode: true, style: "deepObject"},
            spending_controls: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getIssuingDisputes(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?:
        | "expired"
        | "lost"
        | "submitted"
        | "unsubmitted"
        | "won"
        | UnknownEnumStringValue
      transaction?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_issuing_dispute[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/issuing/disputes`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
      transaction: p["transaction"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postIssuingDisputes(
    p: {
      requestBody?: {
        amount?: number
        evidence?: {
          canceled?:
            | {
                additional_documentation?: string | "" | UnknownEnumStringValue
                canceled_at?: number | "" | UnknownEnumStringValue
                cancellation_policy_provided?:
                  | boolean
                  | ""
                  | UnknownEnumStringValue
                cancellation_reason?: string | "" | UnknownEnumStringValue
                expected_at?: number | "" | UnknownEnumStringValue
                explanation?: string | "" | UnknownEnumStringValue
                product_description?: string | "" | UnknownEnumStringValue
                product_type?:
                  | ""
                  | "merchandise"
                  | "service"
                  | UnknownEnumStringValue
                return_status?:
                  | ""
                  | "merchant_rejected"
                  | "successful"
                  | UnknownEnumStringValue
                returned_at?: number | "" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          duplicate?:
            | {
                additional_documentation?: string | "" | UnknownEnumStringValue
                card_statement?: string | "" | UnknownEnumStringValue
                cash_receipt?: string | "" | UnknownEnumStringValue
                check_image?: string | "" | UnknownEnumStringValue
                explanation?: string | "" | UnknownEnumStringValue
                original_transaction?: string
              }
            | ""
            | UnknownEnumStringValue
          fraudulent?:
            | {
                additional_documentation?: string | "" | UnknownEnumStringValue
                explanation?: string | "" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          merchandise_not_as_described?:
            | {
                additional_documentation?: string | "" | UnknownEnumStringValue
                explanation?: string | "" | UnknownEnumStringValue
                received_at?: number | "" | UnknownEnumStringValue
                return_description?: string | "" | UnknownEnumStringValue
                return_status?:
                  | ""
                  | "merchant_rejected"
                  | "successful"
                  | UnknownEnumStringValue
                returned_at?: number | "" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          no_valid_authorization?:
            | {
                additional_documentation?: string | "" | UnknownEnumStringValue
                explanation?: string | "" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          not_received?:
            | {
                additional_documentation?: string | "" | UnknownEnumStringValue
                expected_at?: number | "" | UnknownEnumStringValue
                explanation?: string | "" | UnknownEnumStringValue
                product_description?: string | "" | UnknownEnumStringValue
                product_type?:
                  | ""
                  | "merchandise"
                  | "service"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          other?:
            | {
                additional_documentation?: string | "" | UnknownEnumStringValue
                explanation?: string | "" | UnknownEnumStringValue
                product_description?: string | "" | UnknownEnumStringValue
                product_type?:
                  | ""
                  | "merchandise"
                  | "service"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          reason?:
            | "canceled"
            | "duplicate"
            | "fraudulent"
            | "merchandise_not_as_described"
            | "no_valid_authorization"
            | "not_received"
            | "other"
            | "service_not_as_described"
            | UnknownEnumStringValue
          service_not_as_described?:
            | {
                additional_documentation?: string | "" | UnknownEnumStringValue
                canceled_at?: number | "" | UnknownEnumStringValue
                cancellation_reason?: string | "" | UnknownEnumStringValue
                explanation?: string | "" | UnknownEnumStringValue
                received_at?: number | "" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
        }
        expand?: string[]
        metadata?: {
          [key: string]: string | undefined
        }
        transaction?: string
        treasury?: {
          received_debit: string
        }
      }
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_dispute> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/issuing/disputes`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            evidence: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            treasury: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getIssuingDisputesDispute(
    p: {
      dispute: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_dispute> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/issuing/disputes/${p["dispute"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postIssuingDisputesDispute(
    p: {
      dispute: string
      requestBody?: {
        amount?: number
        evidence?: {
          canceled?:
            | {
                additional_documentation?: string | "" | UnknownEnumStringValue
                canceled_at?: number | "" | UnknownEnumStringValue
                cancellation_policy_provided?:
                  | boolean
                  | ""
                  | UnknownEnumStringValue
                cancellation_reason?: string | "" | UnknownEnumStringValue
                expected_at?: number | "" | UnknownEnumStringValue
                explanation?: string | "" | UnknownEnumStringValue
                product_description?: string | "" | UnknownEnumStringValue
                product_type?:
                  | ""
                  | "merchandise"
                  | "service"
                  | UnknownEnumStringValue
                return_status?:
                  | ""
                  | "merchant_rejected"
                  | "successful"
                  | UnknownEnumStringValue
                returned_at?: number | "" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          duplicate?:
            | {
                additional_documentation?: string | "" | UnknownEnumStringValue
                card_statement?: string | "" | UnknownEnumStringValue
                cash_receipt?: string | "" | UnknownEnumStringValue
                check_image?: string | "" | UnknownEnumStringValue
                explanation?: string | "" | UnknownEnumStringValue
                original_transaction?: string
              }
            | ""
            | UnknownEnumStringValue
          fraudulent?:
            | {
                additional_documentation?: string | "" | UnknownEnumStringValue
                explanation?: string | "" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          merchandise_not_as_described?:
            | {
                additional_documentation?: string | "" | UnknownEnumStringValue
                explanation?: string | "" | UnknownEnumStringValue
                received_at?: number | "" | UnknownEnumStringValue
                return_description?: string | "" | UnknownEnumStringValue
                return_status?:
                  | ""
                  | "merchant_rejected"
                  | "successful"
                  | UnknownEnumStringValue
                returned_at?: number | "" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          no_valid_authorization?:
            | {
                additional_documentation?: string | "" | UnknownEnumStringValue
                explanation?: string | "" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          not_received?:
            | {
                additional_documentation?: string | "" | UnknownEnumStringValue
                expected_at?: number | "" | UnknownEnumStringValue
                explanation?: string | "" | UnknownEnumStringValue
                product_description?: string | "" | UnknownEnumStringValue
                product_type?:
                  | ""
                  | "merchandise"
                  | "service"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          other?:
            | {
                additional_documentation?: string | "" | UnknownEnumStringValue
                explanation?: string | "" | UnknownEnumStringValue
                product_description?: string | "" | UnknownEnumStringValue
                product_type?:
                  | ""
                  | "merchandise"
                  | "service"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          reason?:
            | "canceled"
            | "duplicate"
            | "fraudulent"
            | "merchandise_not_as_described"
            | "no_valid_authorization"
            | "not_received"
            | "other"
            | "service_not_as_described"
            | UnknownEnumStringValue
          service_not_as_described?:
            | {
                additional_documentation?: string | "" | UnknownEnumStringValue
                canceled_at?: number | "" | UnknownEnumStringValue
                cancellation_reason?: string | "" | UnknownEnumStringValue
                explanation?: string | "" | UnknownEnumStringValue
                received_at?: number | "" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
        }
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_dispute> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/issuing/disputes/${p["dispute"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            evidence: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postIssuingDisputesDisputeSubmit(
    p: {
      dispute: string
      requestBody?: {
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_dispute> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/issuing/disputes/${p["dispute"]}/submit`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getIssuingPersonalizationDesigns(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      lookupKeys?: string[]
      preferences?: {
        is_default?: boolean
        is_platform_default?: boolean
      }
      startingAfter?: string
      status?:
        | "active"
        | "inactive"
        | "rejected"
        | "review"
        | UnknownEnumStringValue
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_issuing_personalization_design[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/issuing/personalization_designs`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      lookup_keys: p["lookupKeys"],
      preferences: p["preferences"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postIssuingPersonalizationDesigns(
    p: {
      requestBody: {
        card_logo?: string
        carrier_text?: {
          footer_body?: string | "" | UnknownEnumStringValue
          footer_title?: string | "" | UnknownEnumStringValue
          header_body?: string | "" | UnknownEnumStringValue
          header_title?: string | "" | UnknownEnumStringValue
        }
        expand?: string[]
        lookup_key?: string
        metadata?: {
          [key: string]: string | undefined
        }
        name?: string
        physical_bundle: string
        preferences?: {
          is_default: boolean
        }
        transfer_lookup_key?: boolean
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_issuing_personalization_design> | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/issuing/personalization_designs`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      carrier_text: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
      preferences: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getIssuingPersonalizationDesignsPersonalizationDesign(
    p: {
      expand?: string[]
      personalizationDesign: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_issuing_personalization_design> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/issuing/personalization_designs/${p["personalizationDesign"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postIssuingPersonalizationDesignsPersonalizationDesign(
    p: {
      personalizationDesign: string
      requestBody?: {
        card_logo?: string | "" | UnknownEnumStringValue
        carrier_text?:
          | {
              footer_body?: string | "" | UnknownEnumStringValue
              footer_title?: string | "" | UnknownEnumStringValue
              header_body?: string | "" | UnknownEnumStringValue
              header_title?: string | "" | UnknownEnumStringValue
            }
          | ""
          | UnknownEnumStringValue
        expand?: string[]
        lookup_key?: string | "" | UnknownEnumStringValue
        metadata?: {
          [key: string]: string | undefined
        }
        name?: string | "" | UnknownEnumStringValue
        physical_bundle?: string
        preferences?: {
          is_default: boolean
        }
        transfer_lookup_key?: boolean
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_issuing_personalization_design> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/issuing/personalization_designs/${p["personalizationDesign"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            card_logo: {explode: true, style: "deepObject"},
            carrier_text: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            lookup_key: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            name: {explode: true, style: "deepObject"},
            preferences: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getIssuingPhysicalBundles(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?: "active" | "inactive" | "review" | UnknownEnumStringValue
      type?: "custom" | "standard" | UnknownEnumStringValue
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_issuing_physical_bundle[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/issuing/physical_bundles`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
      type: p["type"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getIssuingPhysicalBundlesPhysicalBundle(
    p: {
      expand?: string[]
      physicalBundle: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_physical_bundle> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/issuing/physical_bundles/${p["physicalBundle"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getIssuingSettlementsSettlement(
    p: {
      expand?: string[]
      settlement: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_settlement> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/issuing/settlements/${p["settlement"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postIssuingSettlementsSettlement(
    p: {
      settlement: string
      requestBody?: {
        expand?: string[]
        metadata?: {
          [key: string]: string | undefined
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_settlement> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/issuing/settlements/${p["settlement"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getIssuingTokens(
    p: {
      card: string
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?:
        | "active"
        | "deleted"
        | "requested"
        | "suspended"
        | UnknownEnumStringValue
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_issuing_token[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/issuing/tokens`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      card: p["card"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getIssuingTokensToken(
    p: {
      expand?: string[]
      token: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_token> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/issuing/tokens/${p["token"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postIssuingTokensToken(
    p: {
      token: string
      requestBody: {
        expand?: string[]
        status: "active" | "deleted" | "suspended" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_token> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/issuing/tokens/${p["token"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getIssuingTransactions(
    p: {
      card?: string
      cardholder?: string
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      type?: "capture" | "refund" | UnknownEnumStringValue
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_issuing_transaction[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/issuing/transactions`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      card: p["card"],
      cardholder: p["cardholder"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      type: p["type"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getIssuingTransactionsTransaction(
    p: {
      expand?: string[]
      transaction: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_transaction> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/issuing/transactions/${p["transaction"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postIssuingTransactionsTransaction(
    p: {
      transaction: string
      requestBody?: {
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_transaction> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/issuing/transactions/${p["transaction"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postLinkAccountSessions(
    p: {
      requestBody: {
        account_holder: {
          account?: string
          customer?: string
          type: "account" | "customer" | UnknownEnumStringValue
        }
        expand?: string[]
        filters?: {
          account_subcategories?: (
            | "checking"
            | "credit_card"
            | "line_of_credit"
            | "mortgage"
            | "savings"
            | UnknownEnumStringValue
          )[]
          countries?: string[]
        }
        permissions: (
          | "balances"
          | "ownership"
          | "payment_method"
          | "transactions"
          | UnknownEnumStringValue
        )[]
        prefetch?: (
          | "balances"
          | "ownership"
          | "transactions"
          | UnknownEnumStringValue
        )[]
        return_url?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_financial_connections_session> | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/link_account_sessions`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      account_holder: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
      filters: {explode: true, style: "deepObject"},
      permissions: {explode: true, style: "deepObject"},
      prefetch: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getLinkAccountSessionsSession(
    p: {
      expand?: string[]
      session: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_financial_connections_session> | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/link_account_sessions/${p["session"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getLinkedAccounts(
    p: {
      accountHolder?: {
        account?: string
        customer?: string
      }
      endingBefore?: string
      expand?: string[]
      limit?: number
      session?: string
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_financial_connections_account[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/linked_accounts`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      account_holder: p["accountHolder"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      session: p["session"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getLinkedAccountsAccount(
    p: {
      account: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_financial_connections_account> | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/linked_accounts/${p["account"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postLinkedAccountsAccountDisconnect(
    p: {
      account: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_financial_connections_account> | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/linked_accounts/${p["account"]}/disconnect`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getLinkedAccountsAccountOwners(
    p: {
      account: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      ownership: string
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_financial_connections_account_owner[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/linked_accounts/${p["account"]}/owners`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      ownership: p["ownership"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postLinkedAccountsAccountRefresh(
    p: {
      account: string
      requestBody: {
        expand?: string[]
        features: (
          | "balance"
          | "ownership"
          | "transactions"
          | UnknownEnumStringValue
        )[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_financial_connections_account> | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/linked_accounts/${p["account"]}/refresh`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      features: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getMandatesMandate(
    p: {
      expand?: string[]
      mandate: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_mandate> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/mandates/${p["mandate"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getPaymentIntents(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_payment_intent[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/payment_intents`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postPaymentIntents(
    p: {
      requestBody: {
        amount: number
        application_fee_amount?: number
        automatic_payment_methods?: {
          allow_redirects?: "always" | "never" | UnknownEnumStringValue
          enabled: boolean
        }
        capture_method?:
          | "automatic"
          | "automatic_async"
          | "manual"
          | UnknownEnumStringValue
        confirm?: boolean
        confirmation_method?: "automatic" | "manual" | UnknownEnumStringValue
        confirmation_token?: string
        currency: string
        customer?: string
        description?: string
        error_on_requires_action?: boolean
        expand?: string[]
        mandate?: string
        mandate_data?:
          | {
              customer_acceptance: {
                accepted_at?: number
                offline?: EmptyObject
                online?: {
                  ip_address: string
                  user_agent: string
                }
                type: "offline" | "online" | UnknownEnumStringValue
              }
            }
          | ""
          | UnknownEnumStringValue
        metadata?: {
          [key: string]: string | undefined
        }
        off_session?: boolean | "one_off" | "recurring" | UnknownEnumStringValue
        on_behalf_of?: string
        payment_method?: string
        payment_method_configuration?: string
        payment_method_data?: {
          acss_debit?: {
            account_number: string
            institution_number: string
            transit_number: string
          }
          affirm?: EmptyObject
          afterpay_clearpay?: EmptyObject
          alipay?: EmptyObject
          allow_redisplay?:
            | "always"
            | "limited"
            | "unspecified"
            | UnknownEnumStringValue
          alma?: EmptyObject
          amazon_pay?: EmptyObject
          au_becs_debit?: {
            account_number: string
            bsb_number: string
          }
          bacs_debit?: {
            account_number?: string
            sort_code?: string
          }
          bancontact?: EmptyObject
          billie?: EmptyObject
          billing_details?: {
            address?:
              | {
                  city?: string
                  country?: string
                  line1?: string
                  line2?: string
                  postal_code?: string
                  state?: string
                }
              | ""
              | UnknownEnumStringValue
            email?: string | "" | UnknownEnumStringValue
            name?: string | "" | UnknownEnumStringValue
            phone?: string | "" | UnknownEnumStringValue
            tax_id?: string
          }
          blik?: EmptyObject
          boleto?: {
            tax_id: string
          }
          cashapp?: EmptyObject
          crypto?: EmptyObject
          customer_balance?: EmptyObject
          eps?: {
            bank?:
              | "arzte_und_apotheker_bank"
              | "austrian_anadi_bank_ag"
              | "bank_austria"
              | "bankhaus_carl_spangler"
              | "bankhaus_schelhammer_und_schattera_ag"
              | "bawag_psk_ag"
              | "bks_bank_ag"
              | "brull_kallmus_bank_ag"
              | "btv_vier_lander_bank"
              | "capital_bank_grawe_gruppe_ag"
              | "deutsche_bank_ag"
              | "dolomitenbank"
              | "easybank_ag"
              | "erste_bank_und_sparkassen"
              | "hypo_alpeadriabank_international_ag"
              | "hypo_bank_burgenland_aktiengesellschaft"
              | "hypo_noe_lb_fur_niederosterreich_u_wien"
              | "hypo_oberosterreich_salzburg_steiermark"
              | "hypo_tirol_bank_ag"
              | "hypo_vorarlberg_bank_ag"
              | "marchfelder_bank"
              | "oberbank_ag"
              | "raiffeisen_bankengruppe_osterreich"
              | "schoellerbank_ag"
              | "sparda_bank_wien"
              | "volksbank_gruppe"
              | "volkskreditbank_ag"
              | "vr_bank_braunau"
              | UnknownEnumStringValue
          }
          fpx?: {
            bank:
              | "affin_bank"
              | "agrobank"
              | "alliance_bank"
              | "ambank"
              | "bank_islam"
              | "bank_muamalat"
              | "bank_of_china"
              | "bank_rakyat"
              | "bsn"
              | "cimb"
              | "deutsche_bank"
              | "hong_leong_bank"
              | "hsbc"
              | "kfh"
              | "maybank2e"
              | "maybank2u"
              | "ocbc"
              | "pb_enterprise"
              | "public_bank"
              | "rhb"
              | "standard_chartered"
              | "uob"
              | UnknownEnumStringValue
          }
          giropay?: EmptyObject
          grabpay?: EmptyObject
          ideal?: {
            bank?:
              | "abn_amro"
              | "asn_bank"
              | "bunq"
              | "buut"
              | "handelsbanken"
              | "ing"
              | "knab"
              | "moneyou"
              | "n26"
              | "nn"
              | "rabobank"
              | "regiobank"
              | "revolut"
              | "sns_bank"
              | "triodos_bank"
              | "van_lanschot"
              | "yoursafe"
              | UnknownEnumStringValue
          }
          interac_present?: EmptyObject
          kakao_pay?: EmptyObject
          klarna?: {
            dob?: {
              day: number
              month: number
              year: number
            }
          }
          konbini?: EmptyObject
          kr_card?: EmptyObject
          link?: EmptyObject
          metadata?: {
            [key: string]: string | undefined
          }
          mobilepay?: EmptyObject
          multibanco?: EmptyObject
          naver_pay?: {
            funding?: "card" | "points" | UnknownEnumStringValue
          }
          nz_bank_account?: {
            account_holder_name?: string
            account_number: string
            bank_code: string
            branch_code: string
            reference?: string
            suffix: string
          }
          oxxo?: EmptyObject
          p24?: {
            bank?:
              | "alior_bank"
              | "bank_millennium"
              | "bank_nowy_bfg_sa"
              | "bank_pekao_sa"
              | "banki_spbdzielcze"
              | "blik"
              | "bnp_paribas"
              | "boz"
              | "citi_handlowy"
              | "credit_agricole"
              | "envelobank"
              | "etransfer_pocztowy24"
              | "getin_bank"
              | "ideabank"
              | "ing"
              | "inteligo"
              | "mbank_mtransfer"
              | "nest_przelew"
              | "noble_pay"
              | "pbac_z_ipko"
              | "plus_bank"
              | "santander_przelew24"
              | "tmobile_usbugi_bankowe"
              | "toyota_bank"
              | "velobank"
              | "volkswagen_bank"
              | UnknownEnumStringValue
          }
          pay_by_bank?: EmptyObject
          payco?: EmptyObject
          paynow?: EmptyObject
          paypal?: EmptyObject
          pix?: EmptyObject
          promptpay?: EmptyObject
          radar_options?: {
            session?: string
          }
          revolut_pay?: EmptyObject
          samsung_pay?: EmptyObject
          satispay?: EmptyObject
          sepa_debit?: {
            iban: string
          }
          sofort?: {
            country:
              | "AT"
              | "BE"
              | "DE"
              | "ES"
              | "IT"
              | "NL"
              | UnknownEnumStringValue
          }
          swish?: EmptyObject
          twint?: EmptyObject
          type:
            | "acss_debit"
            | "affirm"
            | "afterpay_clearpay"
            | "alipay"
            | "alma"
            | "amazon_pay"
            | "au_becs_debit"
            | "bacs_debit"
            | "bancontact"
            | "billie"
            | "blik"
            | "boleto"
            | "cashapp"
            | "crypto"
            | "customer_balance"
            | "eps"
            | "fpx"
            | "giropay"
            | "grabpay"
            | "ideal"
            | "kakao_pay"
            | "klarna"
            | "konbini"
            | "kr_card"
            | "link"
            | "mobilepay"
            | "multibanco"
            | "naver_pay"
            | "nz_bank_account"
            | "oxxo"
            | "p24"
            | "pay_by_bank"
            | "payco"
            | "paynow"
            | "paypal"
            | "pix"
            | "promptpay"
            | "revolut_pay"
            | "samsung_pay"
            | "satispay"
            | "sepa_debit"
            | "sofort"
            | "swish"
            | "twint"
            | "us_bank_account"
            | "wechat_pay"
            | "zip"
            | UnknownEnumStringValue
          us_bank_account?: {
            account_holder_type?:
              | "company"
              | "individual"
              | UnknownEnumStringValue
            account_number?: string
            account_type?: "checking" | "savings" | UnknownEnumStringValue
            financial_connections_account?: string
            routing_number?: string
          }
          wechat_pay?: EmptyObject
          zip?: EmptyObject
        }
        payment_method_options?: {
          acss_debit?:
            | {
                mandate_options?: {
                  custom_mandate_url?: string | "" | UnknownEnumStringValue
                  interval_description?: string
                  payment_schedule?:
                    | "combined"
                    | "interval"
                    | "sporadic"
                    | UnknownEnumStringValue
                  transaction_type?:
                    | "business"
                    | "personal"
                    | UnknownEnumStringValue
                }
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
                target_date?: string
                verification_method?:
                  | "automatic"
                  | "instant"
                  | "microdeposits"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          affirm?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                preferred_locale?: string
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          afterpay_clearpay?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                reference?: string
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          alipay?:
            | {
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          alma?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          amazon_pay?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          au_becs_debit?:
            | {
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
                target_date?: string
              }
            | ""
            | UnknownEnumStringValue
          bacs_debit?:
            | {
                mandate_options?: {
                  reference_prefix?: string | "" | UnknownEnumStringValue
                }
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
                target_date?: string
              }
            | ""
            | UnknownEnumStringValue
          bancontact?:
            | {
                preferred_language?:
                  | "de"
                  | "en"
                  | "fr"
                  | "nl"
                  | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          billie?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          blik?:
            | {
                code?: string
                setup_future_usage?: "" | "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          boleto?:
            | {
                expires_after_days?: number
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          card?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                cvc_token?: string
                installments?: {
                  enabled?: boolean
                  plan?:
                    | {
                        count?: number
                        interval?: "month" | UnknownEnumStringValue
                        type:
                          | "bonus"
                          | "fixed_count"
                          | "revolving"
                          | UnknownEnumStringValue
                      }
                    | ""
                    | UnknownEnumStringValue
                }
                mandate_options?: {
                  amount: number
                  amount_type: "fixed" | "maximum" | UnknownEnumStringValue
                  description?: string
                  end_date?: number
                  interval:
                    | "day"
                    | "month"
                    | "sporadic"
                    | "week"
                    | "year"
                    | UnknownEnumStringValue
                  interval_count?: number
                  reference: string
                  start_date: number
                  supported_types?: ("india" | UnknownEnumStringValue)[]
                }
                network?:
                  | "amex"
                  | "cartes_bancaires"
                  | "diners"
                  | "discover"
                  | "eftpos_au"
                  | "girocard"
                  | "interac"
                  | "jcb"
                  | "link"
                  | "mastercard"
                  | "unionpay"
                  | "unknown"
                  | "visa"
                  | UnknownEnumStringValue
                request_extended_authorization?:
                  | "if_available"
                  | "never"
                  | UnknownEnumStringValue
                request_incremental_authorization?:
                  | "if_available"
                  | "never"
                  | UnknownEnumStringValue
                request_multicapture?:
                  | "if_available"
                  | "never"
                  | UnknownEnumStringValue
                request_overcapture?:
                  | "if_available"
                  | "never"
                  | UnknownEnumStringValue
                request_three_d_secure?:
                  | "any"
                  | "automatic"
                  | "challenge"
                  | UnknownEnumStringValue
                require_cvc_recollection?: boolean
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
                statement_descriptor_suffix_kana?:
                  | string
                  | ""
                  | UnknownEnumStringValue
                statement_descriptor_suffix_kanji?:
                  | string
                  | ""
                  | UnknownEnumStringValue
                three_d_secure?: {
                  ares_trans_status?:
                    | "A"
                    | "C"
                    | "I"
                    | "N"
                    | "R"
                    | "U"
                    | "Y"
                    | UnknownEnumStringValue
                  cryptogram: string
                  electronic_commerce_indicator?:
                    | "01"
                    | "02"
                    | "05"
                    | "06"
                    | "07"
                    | UnknownEnumStringValue
                  exemption_indicator?:
                    | "low_risk"
                    | "none"
                    | UnknownEnumStringValue
                  network_options?: {
                    cartes_bancaires?: {
                      cb_avalgo:
                        | "0"
                        | "1"
                        | "2"
                        | "3"
                        | "4"
                        | "A"
                        | UnknownEnumStringValue
                      cb_exemption?: string
                      cb_score?: number
                    }
                  }
                  requestor_challenge_indicator?: string
                  transaction_id: string
                  version: "1.0.2" | "2.1.0" | "2.2.0" | UnknownEnumStringValue
                }
              }
            | ""
            | UnknownEnumStringValue
          card_present?:
            | {
                request_extended_authorization?: boolean
                request_incremental_authorization_support?: boolean
                routing?: {
                  requested_priority?:
                    | "domestic"
                    | "international"
                    | UnknownEnumStringValue
                }
              }
            | ""
            | UnknownEnumStringValue
          cashapp?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          crypto?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          customer_balance?:
            | {
                bank_transfer?: {
                  eu_bank_transfer?: {
                    country: string
                  }
                  requested_address_types?: (
                    | "aba"
                    | "iban"
                    | "sepa"
                    | "sort_code"
                    | "spei"
                    | "swift"
                    | "zengin"
                    | UnknownEnumStringValue
                  )[]
                  type:
                    | "eu_bank_transfer"
                    | "gb_bank_transfer"
                    | "jp_bank_transfer"
                    | "mx_bank_transfer"
                    | "us_bank_transfer"
                    | UnknownEnumStringValue
                }
                funding_type?: "bank_transfer" | UnknownEnumStringValue
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          eps?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          fpx?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          giropay?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          grabpay?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          ideal?:
            | {
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          interac_present?: EmptyObject | "" | UnknownEnumStringValue
          kakao_pay?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          klarna?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                on_demand?: {
                  average_amount?: number
                  maximum_amount?: number
                  minimum_amount?: number
                  purchase_interval?:
                    | "day"
                    | "month"
                    | "week"
                    | "year"
                    | UnknownEnumStringValue
                  purchase_interval_count?: number
                }
                preferred_locale?:
                  | "cs-CZ"
                  | "da-DK"
                  | "de-AT"
                  | "de-CH"
                  | "de-DE"
                  | "el-GR"
                  | "en-AT"
                  | "en-AU"
                  | "en-BE"
                  | "en-CA"
                  | "en-CH"
                  | "en-CZ"
                  | "en-DE"
                  | "en-DK"
                  | "en-ES"
                  | "en-FI"
                  | "en-FR"
                  | "en-GB"
                  | "en-GR"
                  | "en-IE"
                  | "en-IT"
                  | "en-NL"
                  | "en-NO"
                  | "en-NZ"
                  | "en-PL"
                  | "en-PT"
                  | "en-RO"
                  | "en-SE"
                  | "en-US"
                  | "es-ES"
                  | "es-US"
                  | "fi-FI"
                  | "fr-BE"
                  | "fr-CA"
                  | "fr-CH"
                  | "fr-FR"
                  | "it-CH"
                  | "it-IT"
                  | "nb-NO"
                  | "nl-BE"
                  | "nl-NL"
                  | "pl-PL"
                  | "pt-PT"
                  | "ro-RO"
                  | "sv-FI"
                  | "sv-SE"
                  | UnknownEnumStringValue
                setup_future_usage?:
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
                subscriptions?:
                  | {
                      interval:
                        | "day"
                        | "month"
                        | "week"
                        | "year"
                        | UnknownEnumStringValue
                      interval_count?: number
                      name?: string
                      next_billing?: {
                        amount: number
                        date: string
                      }
                      reference: string
                    }[]
                  | ""
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          konbini?:
            | {
                confirmation_number?: string | "" | UnknownEnumStringValue
                expires_after_days?: number | "" | UnknownEnumStringValue
                expires_at?: number | "" | UnknownEnumStringValue
                product_description?: string | "" | UnknownEnumStringValue
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          kr_card?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          link?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          mobilepay?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          multibanco?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          naver_pay?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          nz_bank_account?:
            | {
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
                target_date?: string
              }
            | ""
            | UnknownEnumStringValue
          oxxo?:
            | {
                expires_after_days?: number
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          p24?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
                tos_shown_and_accepted?: boolean
              }
            | ""
            | UnknownEnumStringValue
          pay_by_bank?: EmptyObject | "" | UnknownEnumStringValue
          payco?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          paynow?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          paypal?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                preferred_locale?:
                  | "cs-CZ"
                  | "da-DK"
                  | "de-AT"
                  | "de-DE"
                  | "de-LU"
                  | "el-GR"
                  | "en-GB"
                  | "en-US"
                  | "es-ES"
                  | "fi-FI"
                  | "fr-BE"
                  | "fr-FR"
                  | "fr-LU"
                  | "hu-HU"
                  | "it-IT"
                  | "nl-BE"
                  | "nl-NL"
                  | "pl-PL"
                  | "pt-PT"
                  | "sk-SK"
                  | "sv-SE"
                  | UnknownEnumStringValue
                reference?: string
                risk_correlation_id?: string
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          pix?:
            | {
                expires_after_seconds?: number
                expires_at?: number
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          promptpay?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          revolut_pay?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          samsung_pay?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          satispay?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          sepa_debit?:
            | {
                mandate_options?: {
                  reference_prefix?: string | "" | UnknownEnumStringValue
                }
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
                target_date?: string
              }
            | ""
            | UnknownEnumStringValue
          sofort?:
            | {
                preferred_language?:
                  | ""
                  | "de"
                  | "en"
                  | "es"
                  | "fr"
                  | "it"
                  | "nl"
                  | "pl"
                  | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          swish?:
            | {
                reference?: string | "" | UnknownEnumStringValue
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          twint?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          us_bank_account?:
            | {
                financial_connections?: {
                  filters?: {
                    account_subcategories?: (
                      | "checking"
                      | "savings"
                      | UnknownEnumStringValue
                    )[]
                  }
                  permissions?: (
                    | "balances"
                    | "ownership"
                    | "payment_method"
                    | "transactions"
                    | UnknownEnumStringValue
                  )[]
                  prefetch?: (
                    | "balances"
                    | "ownership"
                    | "transactions"
                    | UnknownEnumStringValue
                  )[]
                  return_url?: string
                }
                mandate_options?: {
                  collection_method?: "" | "paper" | UnknownEnumStringValue
                }
                networks?: {
                  requested?: (
                    | "ach"
                    | "us_domestic_wire"
                    | UnknownEnumStringValue
                  )[]
                }
                preferred_settlement_speed?:
                  | ""
                  | "fastest"
                  | "standard"
                  | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
                target_date?: string
                verification_method?:
                  | "automatic"
                  | "instant"
                  | "microdeposits"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          wechat_pay?:
            | {
                app_id?: string
                client?: "android" | "ios" | "web" | UnknownEnumStringValue
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          zip?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
        }
        payment_method_types?: string[]
        radar_options?: {
          session?: string
        }
        receipt_email?: string
        return_url?: string
        setup_future_usage?:
          | "off_session"
          | "on_session"
          | UnknownEnumStringValue
        shipping?: {
          address: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
          }
          carrier?: string
          name: string
          phone?: string
          tracking_number?: string
        }
        statement_descriptor?: string
        statement_descriptor_suffix?: string
        transfer_data?: {
          amount?: number
          destination: string
        }
        transfer_group?: string
        use_stripe_sdk?: boolean
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_intent> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/payment_intents`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      automatic_payment_methods: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
      mandate_data: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
      off_session: {explode: true, style: "deepObject"},
      payment_method_data: {explode: true, style: "deepObject"},
      payment_method_options: {explode: true, style: "deepObject"},
      payment_method_types: {explode: true, style: "deepObject"},
      radar_options: {explode: true, style: "deepObject"},
      shipping: {explode: true, style: "deepObject"},
      transfer_data: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getPaymentIntentsSearch(
    p: {
      expand?: string[]
      limit?: number
      page?: string
      query: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_payment_intent[]
          has_more: boolean
          next_page?: string | null
          object: "search_result" | UnknownEnumStringValue
          total_count?: number
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/payment_intents/search`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      expand: p["expand"],
      limit: p["limit"],
      page: p["page"],
      query: p["query"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getPaymentIntentsIntent(
    p: {
      clientSecret?: string
      expand?: string[]
      intent: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_intent> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/payment_intents/${p["intent"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      client_secret: p["clientSecret"],
      expand: p["expand"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postPaymentIntentsIntent(
    p: {
      intent: string
      requestBody?: {
        amount?: number
        application_fee_amount?: number | "" | UnknownEnumStringValue
        capture_method?:
          | "automatic"
          | "automatic_async"
          | "manual"
          | UnknownEnumStringValue
        currency?: string
        customer?: string
        description?: string
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        payment_method?: string
        payment_method_configuration?: string
        payment_method_data?: {
          acss_debit?: {
            account_number: string
            institution_number: string
            transit_number: string
          }
          affirm?: EmptyObject
          afterpay_clearpay?: EmptyObject
          alipay?: EmptyObject
          allow_redisplay?:
            | "always"
            | "limited"
            | "unspecified"
            | UnknownEnumStringValue
          alma?: EmptyObject
          amazon_pay?: EmptyObject
          au_becs_debit?: {
            account_number: string
            bsb_number: string
          }
          bacs_debit?: {
            account_number?: string
            sort_code?: string
          }
          bancontact?: EmptyObject
          billie?: EmptyObject
          billing_details?: {
            address?:
              | {
                  city?: string
                  country?: string
                  line1?: string
                  line2?: string
                  postal_code?: string
                  state?: string
                }
              | ""
              | UnknownEnumStringValue
            email?: string | "" | UnknownEnumStringValue
            name?: string | "" | UnknownEnumStringValue
            phone?: string | "" | UnknownEnumStringValue
            tax_id?: string
          }
          blik?: EmptyObject
          boleto?: {
            tax_id: string
          }
          cashapp?: EmptyObject
          crypto?: EmptyObject
          customer_balance?: EmptyObject
          eps?: {
            bank?:
              | "arzte_und_apotheker_bank"
              | "austrian_anadi_bank_ag"
              | "bank_austria"
              | "bankhaus_carl_spangler"
              | "bankhaus_schelhammer_und_schattera_ag"
              | "bawag_psk_ag"
              | "bks_bank_ag"
              | "brull_kallmus_bank_ag"
              | "btv_vier_lander_bank"
              | "capital_bank_grawe_gruppe_ag"
              | "deutsche_bank_ag"
              | "dolomitenbank"
              | "easybank_ag"
              | "erste_bank_und_sparkassen"
              | "hypo_alpeadriabank_international_ag"
              | "hypo_bank_burgenland_aktiengesellschaft"
              | "hypo_noe_lb_fur_niederosterreich_u_wien"
              | "hypo_oberosterreich_salzburg_steiermark"
              | "hypo_tirol_bank_ag"
              | "hypo_vorarlberg_bank_ag"
              | "marchfelder_bank"
              | "oberbank_ag"
              | "raiffeisen_bankengruppe_osterreich"
              | "schoellerbank_ag"
              | "sparda_bank_wien"
              | "volksbank_gruppe"
              | "volkskreditbank_ag"
              | "vr_bank_braunau"
              | UnknownEnumStringValue
          }
          fpx?: {
            bank:
              | "affin_bank"
              | "agrobank"
              | "alliance_bank"
              | "ambank"
              | "bank_islam"
              | "bank_muamalat"
              | "bank_of_china"
              | "bank_rakyat"
              | "bsn"
              | "cimb"
              | "deutsche_bank"
              | "hong_leong_bank"
              | "hsbc"
              | "kfh"
              | "maybank2e"
              | "maybank2u"
              | "ocbc"
              | "pb_enterprise"
              | "public_bank"
              | "rhb"
              | "standard_chartered"
              | "uob"
              | UnknownEnumStringValue
          }
          giropay?: EmptyObject
          grabpay?: EmptyObject
          ideal?: {
            bank?:
              | "abn_amro"
              | "asn_bank"
              | "bunq"
              | "buut"
              | "handelsbanken"
              | "ing"
              | "knab"
              | "moneyou"
              | "n26"
              | "nn"
              | "rabobank"
              | "regiobank"
              | "revolut"
              | "sns_bank"
              | "triodos_bank"
              | "van_lanschot"
              | "yoursafe"
              | UnknownEnumStringValue
          }
          interac_present?: EmptyObject
          kakao_pay?: EmptyObject
          klarna?: {
            dob?: {
              day: number
              month: number
              year: number
            }
          }
          konbini?: EmptyObject
          kr_card?: EmptyObject
          link?: EmptyObject
          metadata?: {
            [key: string]: string | undefined
          }
          mobilepay?: EmptyObject
          multibanco?: EmptyObject
          naver_pay?: {
            funding?: "card" | "points" | UnknownEnumStringValue
          }
          nz_bank_account?: {
            account_holder_name?: string
            account_number: string
            bank_code: string
            branch_code: string
            reference?: string
            suffix: string
          }
          oxxo?: EmptyObject
          p24?: {
            bank?:
              | "alior_bank"
              | "bank_millennium"
              | "bank_nowy_bfg_sa"
              | "bank_pekao_sa"
              | "banki_spbdzielcze"
              | "blik"
              | "bnp_paribas"
              | "boz"
              | "citi_handlowy"
              | "credit_agricole"
              | "envelobank"
              | "etransfer_pocztowy24"
              | "getin_bank"
              | "ideabank"
              | "ing"
              | "inteligo"
              | "mbank_mtransfer"
              | "nest_przelew"
              | "noble_pay"
              | "pbac_z_ipko"
              | "plus_bank"
              | "santander_przelew24"
              | "tmobile_usbugi_bankowe"
              | "toyota_bank"
              | "velobank"
              | "volkswagen_bank"
              | UnknownEnumStringValue
          }
          pay_by_bank?: EmptyObject
          payco?: EmptyObject
          paynow?: EmptyObject
          paypal?: EmptyObject
          pix?: EmptyObject
          promptpay?: EmptyObject
          radar_options?: {
            session?: string
          }
          revolut_pay?: EmptyObject
          samsung_pay?: EmptyObject
          satispay?: EmptyObject
          sepa_debit?: {
            iban: string
          }
          sofort?: {
            country:
              | "AT"
              | "BE"
              | "DE"
              | "ES"
              | "IT"
              | "NL"
              | UnknownEnumStringValue
          }
          swish?: EmptyObject
          twint?: EmptyObject
          type:
            | "acss_debit"
            | "affirm"
            | "afterpay_clearpay"
            | "alipay"
            | "alma"
            | "amazon_pay"
            | "au_becs_debit"
            | "bacs_debit"
            | "bancontact"
            | "billie"
            | "blik"
            | "boleto"
            | "cashapp"
            | "crypto"
            | "customer_balance"
            | "eps"
            | "fpx"
            | "giropay"
            | "grabpay"
            | "ideal"
            | "kakao_pay"
            | "klarna"
            | "konbini"
            | "kr_card"
            | "link"
            | "mobilepay"
            | "multibanco"
            | "naver_pay"
            | "nz_bank_account"
            | "oxxo"
            | "p24"
            | "pay_by_bank"
            | "payco"
            | "paynow"
            | "paypal"
            | "pix"
            | "promptpay"
            | "revolut_pay"
            | "samsung_pay"
            | "satispay"
            | "sepa_debit"
            | "sofort"
            | "swish"
            | "twint"
            | "us_bank_account"
            | "wechat_pay"
            | "zip"
            | UnknownEnumStringValue
          us_bank_account?: {
            account_holder_type?:
              | "company"
              | "individual"
              | UnknownEnumStringValue
            account_number?: string
            account_type?: "checking" | "savings" | UnknownEnumStringValue
            financial_connections_account?: string
            routing_number?: string
          }
          wechat_pay?: EmptyObject
          zip?: EmptyObject
        }
        payment_method_options?: {
          acss_debit?:
            | {
                mandate_options?: {
                  custom_mandate_url?: string | "" | UnknownEnumStringValue
                  interval_description?: string
                  payment_schedule?:
                    | "combined"
                    | "interval"
                    | "sporadic"
                    | UnknownEnumStringValue
                  transaction_type?:
                    | "business"
                    | "personal"
                    | UnknownEnumStringValue
                }
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
                target_date?: string
                verification_method?:
                  | "automatic"
                  | "instant"
                  | "microdeposits"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          affirm?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                preferred_locale?: string
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          afterpay_clearpay?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                reference?: string
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          alipay?:
            | {
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          alma?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          amazon_pay?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          au_becs_debit?:
            | {
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
                target_date?: string
              }
            | ""
            | UnknownEnumStringValue
          bacs_debit?:
            | {
                mandate_options?: {
                  reference_prefix?: string | "" | UnknownEnumStringValue
                }
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
                target_date?: string
              }
            | ""
            | UnknownEnumStringValue
          bancontact?:
            | {
                preferred_language?:
                  | "de"
                  | "en"
                  | "fr"
                  | "nl"
                  | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          billie?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          blik?:
            | {
                code?: string
                setup_future_usage?: "" | "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          boleto?:
            | {
                expires_after_days?: number
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          card?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                cvc_token?: string
                installments?: {
                  enabled?: boolean
                  plan?:
                    | {
                        count?: number
                        interval?: "month" | UnknownEnumStringValue
                        type:
                          | "bonus"
                          | "fixed_count"
                          | "revolving"
                          | UnknownEnumStringValue
                      }
                    | ""
                    | UnknownEnumStringValue
                }
                mandate_options?: {
                  amount: number
                  amount_type: "fixed" | "maximum" | UnknownEnumStringValue
                  description?: string
                  end_date?: number
                  interval:
                    | "day"
                    | "month"
                    | "sporadic"
                    | "week"
                    | "year"
                    | UnknownEnumStringValue
                  interval_count?: number
                  reference: string
                  start_date: number
                  supported_types?: ("india" | UnknownEnumStringValue)[]
                }
                network?:
                  | "amex"
                  | "cartes_bancaires"
                  | "diners"
                  | "discover"
                  | "eftpos_au"
                  | "girocard"
                  | "interac"
                  | "jcb"
                  | "link"
                  | "mastercard"
                  | "unionpay"
                  | "unknown"
                  | "visa"
                  | UnknownEnumStringValue
                request_extended_authorization?:
                  | "if_available"
                  | "never"
                  | UnknownEnumStringValue
                request_incremental_authorization?:
                  | "if_available"
                  | "never"
                  | UnknownEnumStringValue
                request_multicapture?:
                  | "if_available"
                  | "never"
                  | UnknownEnumStringValue
                request_overcapture?:
                  | "if_available"
                  | "never"
                  | UnknownEnumStringValue
                request_three_d_secure?:
                  | "any"
                  | "automatic"
                  | "challenge"
                  | UnknownEnumStringValue
                require_cvc_recollection?: boolean
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
                statement_descriptor_suffix_kana?:
                  | string
                  | ""
                  | UnknownEnumStringValue
                statement_descriptor_suffix_kanji?:
                  | string
                  | ""
                  | UnknownEnumStringValue
                three_d_secure?: {
                  ares_trans_status?:
                    | "A"
                    | "C"
                    | "I"
                    | "N"
                    | "R"
                    | "U"
                    | "Y"
                    | UnknownEnumStringValue
                  cryptogram: string
                  electronic_commerce_indicator?:
                    | "01"
                    | "02"
                    | "05"
                    | "06"
                    | "07"
                    | UnknownEnumStringValue
                  exemption_indicator?:
                    | "low_risk"
                    | "none"
                    | UnknownEnumStringValue
                  network_options?: {
                    cartes_bancaires?: {
                      cb_avalgo:
                        | "0"
                        | "1"
                        | "2"
                        | "3"
                        | "4"
                        | "A"
                        | UnknownEnumStringValue
                      cb_exemption?: string
                      cb_score?: number
                    }
                  }
                  requestor_challenge_indicator?: string
                  transaction_id: string
                  version: "1.0.2" | "2.1.0" | "2.2.0" | UnknownEnumStringValue
                }
              }
            | ""
            | UnknownEnumStringValue
          card_present?:
            | {
                request_extended_authorization?: boolean
                request_incremental_authorization_support?: boolean
                routing?: {
                  requested_priority?:
                    | "domestic"
                    | "international"
                    | UnknownEnumStringValue
                }
              }
            | ""
            | UnknownEnumStringValue
          cashapp?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          crypto?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          customer_balance?:
            | {
                bank_transfer?: {
                  eu_bank_transfer?: {
                    country: string
                  }
                  requested_address_types?: (
                    | "aba"
                    | "iban"
                    | "sepa"
                    | "sort_code"
                    | "spei"
                    | "swift"
                    | "zengin"
                    | UnknownEnumStringValue
                  )[]
                  type:
                    | "eu_bank_transfer"
                    | "gb_bank_transfer"
                    | "jp_bank_transfer"
                    | "mx_bank_transfer"
                    | "us_bank_transfer"
                    | UnknownEnumStringValue
                }
                funding_type?: "bank_transfer" | UnknownEnumStringValue
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          eps?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          fpx?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          giropay?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          grabpay?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          ideal?:
            | {
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          interac_present?: EmptyObject | "" | UnknownEnumStringValue
          kakao_pay?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          klarna?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                on_demand?: {
                  average_amount?: number
                  maximum_amount?: number
                  minimum_amount?: number
                  purchase_interval?:
                    | "day"
                    | "month"
                    | "week"
                    | "year"
                    | UnknownEnumStringValue
                  purchase_interval_count?: number
                }
                preferred_locale?:
                  | "cs-CZ"
                  | "da-DK"
                  | "de-AT"
                  | "de-CH"
                  | "de-DE"
                  | "el-GR"
                  | "en-AT"
                  | "en-AU"
                  | "en-BE"
                  | "en-CA"
                  | "en-CH"
                  | "en-CZ"
                  | "en-DE"
                  | "en-DK"
                  | "en-ES"
                  | "en-FI"
                  | "en-FR"
                  | "en-GB"
                  | "en-GR"
                  | "en-IE"
                  | "en-IT"
                  | "en-NL"
                  | "en-NO"
                  | "en-NZ"
                  | "en-PL"
                  | "en-PT"
                  | "en-RO"
                  | "en-SE"
                  | "en-US"
                  | "es-ES"
                  | "es-US"
                  | "fi-FI"
                  | "fr-BE"
                  | "fr-CA"
                  | "fr-CH"
                  | "fr-FR"
                  | "it-CH"
                  | "it-IT"
                  | "nb-NO"
                  | "nl-BE"
                  | "nl-NL"
                  | "pl-PL"
                  | "pt-PT"
                  | "ro-RO"
                  | "sv-FI"
                  | "sv-SE"
                  | UnknownEnumStringValue
                setup_future_usage?:
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
                subscriptions?:
                  | {
                      interval:
                        | "day"
                        | "month"
                        | "week"
                        | "year"
                        | UnknownEnumStringValue
                      interval_count?: number
                      name?: string
                      next_billing?: {
                        amount: number
                        date: string
                      }
                      reference: string
                    }[]
                  | ""
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          konbini?:
            | {
                confirmation_number?: string | "" | UnknownEnumStringValue
                expires_after_days?: number | "" | UnknownEnumStringValue
                expires_at?: number | "" | UnknownEnumStringValue
                product_description?: string | "" | UnknownEnumStringValue
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          kr_card?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          link?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          mobilepay?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          multibanco?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          naver_pay?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          nz_bank_account?:
            | {
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
                target_date?: string
              }
            | ""
            | UnknownEnumStringValue
          oxxo?:
            | {
                expires_after_days?: number
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          p24?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
                tos_shown_and_accepted?: boolean
              }
            | ""
            | UnknownEnumStringValue
          pay_by_bank?: EmptyObject | "" | UnknownEnumStringValue
          payco?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          paynow?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          paypal?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                preferred_locale?:
                  | "cs-CZ"
                  | "da-DK"
                  | "de-AT"
                  | "de-DE"
                  | "de-LU"
                  | "el-GR"
                  | "en-GB"
                  | "en-US"
                  | "es-ES"
                  | "fi-FI"
                  | "fr-BE"
                  | "fr-FR"
                  | "fr-LU"
                  | "hu-HU"
                  | "it-IT"
                  | "nl-BE"
                  | "nl-NL"
                  | "pl-PL"
                  | "pt-PT"
                  | "sk-SK"
                  | "sv-SE"
                  | UnknownEnumStringValue
                reference?: string
                risk_correlation_id?: string
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          pix?:
            | {
                expires_after_seconds?: number
                expires_at?: number
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          promptpay?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          revolut_pay?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          samsung_pay?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          satispay?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          sepa_debit?:
            | {
                mandate_options?: {
                  reference_prefix?: string | "" | UnknownEnumStringValue
                }
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
                target_date?: string
              }
            | ""
            | UnknownEnumStringValue
          sofort?:
            | {
                preferred_language?:
                  | ""
                  | "de"
                  | "en"
                  | "es"
                  | "fr"
                  | "it"
                  | "nl"
                  | "pl"
                  | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          swish?:
            | {
                reference?: string | "" | UnknownEnumStringValue
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          twint?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          us_bank_account?:
            | {
                financial_connections?: {
                  filters?: {
                    account_subcategories?: (
                      | "checking"
                      | "savings"
                      | UnknownEnumStringValue
                    )[]
                  }
                  permissions?: (
                    | "balances"
                    | "ownership"
                    | "payment_method"
                    | "transactions"
                    | UnknownEnumStringValue
                  )[]
                  prefetch?: (
                    | "balances"
                    | "ownership"
                    | "transactions"
                    | UnknownEnumStringValue
                  )[]
                  return_url?: string
                }
                mandate_options?: {
                  collection_method?: "" | "paper" | UnknownEnumStringValue
                }
                networks?: {
                  requested?: (
                    | "ach"
                    | "us_domestic_wire"
                    | UnknownEnumStringValue
                  )[]
                }
                preferred_settlement_speed?:
                  | ""
                  | "fastest"
                  | "standard"
                  | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
                target_date?: string
                verification_method?:
                  | "automatic"
                  | "instant"
                  | "microdeposits"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          wechat_pay?:
            | {
                app_id?: string
                client?: "android" | "ios" | "web" | UnknownEnumStringValue
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          zip?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
        }
        payment_method_types?: string[]
        receipt_email?: string | "" | UnknownEnumStringValue
        setup_future_usage?:
          | ""
          | "off_session"
          | "on_session"
          | UnknownEnumStringValue
        shipping?:
          | {
              address: {
                city?: string
                country?: string
                line1?: string
                line2?: string
                postal_code?: string
                state?: string
              }
              carrier?: string
              name: string
              phone?: string
              tracking_number?: string
            }
          | ""
          | UnknownEnumStringValue
        statement_descriptor?: string
        statement_descriptor_suffix?: string
        transfer_data?: {
          amount?: number
        }
        transfer_group?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_intent> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/payment_intents/${p["intent"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            application_fee_amount: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            payment_method_data: {explode: true, style: "deepObject"},
            payment_method_options: {explode: true, style: "deepObject"},
            payment_method_types: {explode: true, style: "deepObject"},
            receipt_email: {explode: true, style: "deepObject"},
            shipping: {explode: true, style: "deepObject"},
            transfer_data: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postPaymentIntentsIntentApplyCustomerBalance(
    p: {
      intent: string
      requestBody?: {
        amount?: number
        currency?: string
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_intent> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/payment_intents/${p["intent"]}/apply_customer_balance`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postPaymentIntentsIntentCancel(
    p: {
      intent: string
      requestBody?: {
        cancellation_reason?:
          | "abandoned"
          | "duplicate"
          | "fraudulent"
          | "requested_by_customer"
          | UnknownEnumStringValue
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_intent> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/payment_intents/${p["intent"]}/cancel`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postPaymentIntentsIntentCapture(
    p: {
      intent: string
      requestBody?: {
        amount_to_capture?: number
        application_fee_amount?: number
        expand?: string[]
        final_capture?: boolean
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        statement_descriptor?: string
        statement_descriptor_suffix?: string
        transfer_data?: {
          amount?: number
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_intent> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/payment_intents/${p["intent"]}/capture`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            transfer_data: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postPaymentIntentsIntentConfirm(
    p: {
      intent: string
      requestBody?: {
        capture_method?:
          | "automatic"
          | "automatic_async"
          | "manual"
          | UnknownEnumStringValue
        client_secret?: string
        confirmation_token?: string
        error_on_requires_action?: boolean
        expand?: string[]
        mandate?: string
        mandate_data?:
          | {
              customer_acceptance: {
                accepted_at?: number
                offline?: EmptyObject
                online?: {
                  ip_address: string
                  user_agent: string
                }
                type: "offline" | "online" | UnknownEnumStringValue
              }
            }
          | ""
          | UnknownEnumStringValue
          | {
              customer_acceptance: {
                online: {
                  ip_address?: string
                  user_agent?: string
                }
                type: "online" | UnknownEnumStringValue
              }
            }
        off_session?: boolean | "one_off" | "recurring" | UnknownEnumStringValue
        payment_method?: string
        payment_method_data?: {
          acss_debit?: {
            account_number: string
            institution_number: string
            transit_number: string
          }
          affirm?: EmptyObject
          afterpay_clearpay?: EmptyObject
          alipay?: EmptyObject
          allow_redisplay?:
            | "always"
            | "limited"
            | "unspecified"
            | UnknownEnumStringValue
          alma?: EmptyObject
          amazon_pay?: EmptyObject
          au_becs_debit?: {
            account_number: string
            bsb_number: string
          }
          bacs_debit?: {
            account_number?: string
            sort_code?: string
          }
          bancontact?: EmptyObject
          billie?: EmptyObject
          billing_details?: {
            address?:
              | {
                  city?: string
                  country?: string
                  line1?: string
                  line2?: string
                  postal_code?: string
                  state?: string
                }
              | ""
              | UnknownEnumStringValue
            email?: string | "" | UnknownEnumStringValue
            name?: string | "" | UnknownEnumStringValue
            phone?: string | "" | UnknownEnumStringValue
            tax_id?: string
          }
          blik?: EmptyObject
          boleto?: {
            tax_id: string
          }
          cashapp?: EmptyObject
          crypto?: EmptyObject
          customer_balance?: EmptyObject
          eps?: {
            bank?:
              | "arzte_und_apotheker_bank"
              | "austrian_anadi_bank_ag"
              | "bank_austria"
              | "bankhaus_carl_spangler"
              | "bankhaus_schelhammer_und_schattera_ag"
              | "bawag_psk_ag"
              | "bks_bank_ag"
              | "brull_kallmus_bank_ag"
              | "btv_vier_lander_bank"
              | "capital_bank_grawe_gruppe_ag"
              | "deutsche_bank_ag"
              | "dolomitenbank"
              | "easybank_ag"
              | "erste_bank_und_sparkassen"
              | "hypo_alpeadriabank_international_ag"
              | "hypo_bank_burgenland_aktiengesellschaft"
              | "hypo_noe_lb_fur_niederosterreich_u_wien"
              | "hypo_oberosterreich_salzburg_steiermark"
              | "hypo_tirol_bank_ag"
              | "hypo_vorarlberg_bank_ag"
              | "marchfelder_bank"
              | "oberbank_ag"
              | "raiffeisen_bankengruppe_osterreich"
              | "schoellerbank_ag"
              | "sparda_bank_wien"
              | "volksbank_gruppe"
              | "volkskreditbank_ag"
              | "vr_bank_braunau"
              | UnknownEnumStringValue
          }
          fpx?: {
            bank:
              | "affin_bank"
              | "agrobank"
              | "alliance_bank"
              | "ambank"
              | "bank_islam"
              | "bank_muamalat"
              | "bank_of_china"
              | "bank_rakyat"
              | "bsn"
              | "cimb"
              | "deutsche_bank"
              | "hong_leong_bank"
              | "hsbc"
              | "kfh"
              | "maybank2e"
              | "maybank2u"
              | "ocbc"
              | "pb_enterprise"
              | "public_bank"
              | "rhb"
              | "standard_chartered"
              | "uob"
              | UnknownEnumStringValue
          }
          giropay?: EmptyObject
          grabpay?: EmptyObject
          ideal?: {
            bank?:
              | "abn_amro"
              | "asn_bank"
              | "bunq"
              | "buut"
              | "handelsbanken"
              | "ing"
              | "knab"
              | "moneyou"
              | "n26"
              | "nn"
              | "rabobank"
              | "regiobank"
              | "revolut"
              | "sns_bank"
              | "triodos_bank"
              | "van_lanschot"
              | "yoursafe"
              | UnknownEnumStringValue
          }
          interac_present?: EmptyObject
          kakao_pay?: EmptyObject
          klarna?: {
            dob?: {
              day: number
              month: number
              year: number
            }
          }
          konbini?: EmptyObject
          kr_card?: EmptyObject
          link?: EmptyObject
          metadata?: {
            [key: string]: string | undefined
          }
          mobilepay?: EmptyObject
          multibanco?: EmptyObject
          naver_pay?: {
            funding?: "card" | "points" | UnknownEnumStringValue
          }
          nz_bank_account?: {
            account_holder_name?: string
            account_number: string
            bank_code: string
            branch_code: string
            reference?: string
            suffix: string
          }
          oxxo?: EmptyObject
          p24?: {
            bank?:
              | "alior_bank"
              | "bank_millennium"
              | "bank_nowy_bfg_sa"
              | "bank_pekao_sa"
              | "banki_spbdzielcze"
              | "blik"
              | "bnp_paribas"
              | "boz"
              | "citi_handlowy"
              | "credit_agricole"
              | "envelobank"
              | "etransfer_pocztowy24"
              | "getin_bank"
              | "ideabank"
              | "ing"
              | "inteligo"
              | "mbank_mtransfer"
              | "nest_przelew"
              | "noble_pay"
              | "pbac_z_ipko"
              | "plus_bank"
              | "santander_przelew24"
              | "tmobile_usbugi_bankowe"
              | "toyota_bank"
              | "velobank"
              | "volkswagen_bank"
              | UnknownEnumStringValue
          }
          pay_by_bank?: EmptyObject
          payco?: EmptyObject
          paynow?: EmptyObject
          paypal?: EmptyObject
          pix?: EmptyObject
          promptpay?: EmptyObject
          radar_options?: {
            session?: string
          }
          revolut_pay?: EmptyObject
          samsung_pay?: EmptyObject
          satispay?: EmptyObject
          sepa_debit?: {
            iban: string
          }
          sofort?: {
            country:
              | "AT"
              | "BE"
              | "DE"
              | "ES"
              | "IT"
              | "NL"
              | UnknownEnumStringValue
          }
          swish?: EmptyObject
          twint?: EmptyObject
          type:
            | "acss_debit"
            | "affirm"
            | "afterpay_clearpay"
            | "alipay"
            | "alma"
            | "amazon_pay"
            | "au_becs_debit"
            | "bacs_debit"
            | "bancontact"
            | "billie"
            | "blik"
            | "boleto"
            | "cashapp"
            | "crypto"
            | "customer_balance"
            | "eps"
            | "fpx"
            | "giropay"
            | "grabpay"
            | "ideal"
            | "kakao_pay"
            | "klarna"
            | "konbini"
            | "kr_card"
            | "link"
            | "mobilepay"
            | "multibanco"
            | "naver_pay"
            | "nz_bank_account"
            | "oxxo"
            | "p24"
            | "pay_by_bank"
            | "payco"
            | "paynow"
            | "paypal"
            | "pix"
            | "promptpay"
            | "revolut_pay"
            | "samsung_pay"
            | "satispay"
            | "sepa_debit"
            | "sofort"
            | "swish"
            | "twint"
            | "us_bank_account"
            | "wechat_pay"
            | "zip"
            | UnknownEnumStringValue
          us_bank_account?: {
            account_holder_type?:
              | "company"
              | "individual"
              | UnknownEnumStringValue
            account_number?: string
            account_type?: "checking" | "savings" | UnknownEnumStringValue
            financial_connections_account?: string
            routing_number?: string
          }
          wechat_pay?: EmptyObject
          zip?: EmptyObject
        }
        payment_method_options?: {
          acss_debit?:
            | {
                mandate_options?: {
                  custom_mandate_url?: string | "" | UnknownEnumStringValue
                  interval_description?: string
                  payment_schedule?:
                    | "combined"
                    | "interval"
                    | "sporadic"
                    | UnknownEnumStringValue
                  transaction_type?:
                    | "business"
                    | "personal"
                    | UnknownEnumStringValue
                }
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
                target_date?: string
                verification_method?:
                  | "automatic"
                  | "instant"
                  | "microdeposits"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          affirm?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                preferred_locale?: string
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          afterpay_clearpay?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                reference?: string
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          alipay?:
            | {
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          alma?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          amazon_pay?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          au_becs_debit?:
            | {
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
                target_date?: string
              }
            | ""
            | UnknownEnumStringValue
          bacs_debit?:
            | {
                mandate_options?: {
                  reference_prefix?: string | "" | UnknownEnumStringValue
                }
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
                target_date?: string
              }
            | ""
            | UnknownEnumStringValue
          bancontact?:
            | {
                preferred_language?:
                  | "de"
                  | "en"
                  | "fr"
                  | "nl"
                  | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          billie?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          blik?:
            | {
                code?: string
                setup_future_usage?: "" | "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          boleto?:
            | {
                expires_after_days?: number
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          card?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                cvc_token?: string
                installments?: {
                  enabled?: boolean
                  plan?:
                    | {
                        count?: number
                        interval?: "month" | UnknownEnumStringValue
                        type:
                          | "bonus"
                          | "fixed_count"
                          | "revolving"
                          | UnknownEnumStringValue
                      }
                    | ""
                    | UnknownEnumStringValue
                }
                mandate_options?: {
                  amount: number
                  amount_type: "fixed" | "maximum" | UnknownEnumStringValue
                  description?: string
                  end_date?: number
                  interval:
                    | "day"
                    | "month"
                    | "sporadic"
                    | "week"
                    | "year"
                    | UnknownEnumStringValue
                  interval_count?: number
                  reference: string
                  start_date: number
                  supported_types?: ("india" | UnknownEnumStringValue)[]
                }
                network?:
                  | "amex"
                  | "cartes_bancaires"
                  | "diners"
                  | "discover"
                  | "eftpos_au"
                  | "girocard"
                  | "interac"
                  | "jcb"
                  | "link"
                  | "mastercard"
                  | "unionpay"
                  | "unknown"
                  | "visa"
                  | UnknownEnumStringValue
                request_extended_authorization?:
                  | "if_available"
                  | "never"
                  | UnknownEnumStringValue
                request_incremental_authorization?:
                  | "if_available"
                  | "never"
                  | UnknownEnumStringValue
                request_multicapture?:
                  | "if_available"
                  | "never"
                  | UnknownEnumStringValue
                request_overcapture?:
                  | "if_available"
                  | "never"
                  | UnknownEnumStringValue
                request_three_d_secure?:
                  | "any"
                  | "automatic"
                  | "challenge"
                  | UnknownEnumStringValue
                require_cvc_recollection?: boolean
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
                statement_descriptor_suffix_kana?:
                  | string
                  | ""
                  | UnknownEnumStringValue
                statement_descriptor_suffix_kanji?:
                  | string
                  | ""
                  | UnknownEnumStringValue
                three_d_secure?: {
                  ares_trans_status?:
                    | "A"
                    | "C"
                    | "I"
                    | "N"
                    | "R"
                    | "U"
                    | "Y"
                    | UnknownEnumStringValue
                  cryptogram: string
                  electronic_commerce_indicator?:
                    | "01"
                    | "02"
                    | "05"
                    | "06"
                    | "07"
                    | UnknownEnumStringValue
                  exemption_indicator?:
                    | "low_risk"
                    | "none"
                    | UnknownEnumStringValue
                  network_options?: {
                    cartes_bancaires?: {
                      cb_avalgo:
                        | "0"
                        | "1"
                        | "2"
                        | "3"
                        | "4"
                        | "A"
                        | UnknownEnumStringValue
                      cb_exemption?: string
                      cb_score?: number
                    }
                  }
                  requestor_challenge_indicator?: string
                  transaction_id: string
                  version: "1.0.2" | "2.1.0" | "2.2.0" | UnknownEnumStringValue
                }
              }
            | ""
            | UnknownEnumStringValue
          card_present?:
            | {
                request_extended_authorization?: boolean
                request_incremental_authorization_support?: boolean
                routing?: {
                  requested_priority?:
                    | "domestic"
                    | "international"
                    | UnknownEnumStringValue
                }
              }
            | ""
            | UnknownEnumStringValue
          cashapp?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          crypto?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          customer_balance?:
            | {
                bank_transfer?: {
                  eu_bank_transfer?: {
                    country: string
                  }
                  requested_address_types?: (
                    | "aba"
                    | "iban"
                    | "sepa"
                    | "sort_code"
                    | "spei"
                    | "swift"
                    | "zengin"
                    | UnknownEnumStringValue
                  )[]
                  type:
                    | "eu_bank_transfer"
                    | "gb_bank_transfer"
                    | "jp_bank_transfer"
                    | "mx_bank_transfer"
                    | "us_bank_transfer"
                    | UnknownEnumStringValue
                }
                funding_type?: "bank_transfer" | UnknownEnumStringValue
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          eps?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          fpx?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          giropay?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          grabpay?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          ideal?:
            | {
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          interac_present?: EmptyObject | "" | UnknownEnumStringValue
          kakao_pay?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          klarna?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                on_demand?: {
                  average_amount?: number
                  maximum_amount?: number
                  minimum_amount?: number
                  purchase_interval?:
                    | "day"
                    | "month"
                    | "week"
                    | "year"
                    | UnknownEnumStringValue
                  purchase_interval_count?: number
                }
                preferred_locale?:
                  | "cs-CZ"
                  | "da-DK"
                  | "de-AT"
                  | "de-CH"
                  | "de-DE"
                  | "el-GR"
                  | "en-AT"
                  | "en-AU"
                  | "en-BE"
                  | "en-CA"
                  | "en-CH"
                  | "en-CZ"
                  | "en-DE"
                  | "en-DK"
                  | "en-ES"
                  | "en-FI"
                  | "en-FR"
                  | "en-GB"
                  | "en-GR"
                  | "en-IE"
                  | "en-IT"
                  | "en-NL"
                  | "en-NO"
                  | "en-NZ"
                  | "en-PL"
                  | "en-PT"
                  | "en-RO"
                  | "en-SE"
                  | "en-US"
                  | "es-ES"
                  | "es-US"
                  | "fi-FI"
                  | "fr-BE"
                  | "fr-CA"
                  | "fr-CH"
                  | "fr-FR"
                  | "it-CH"
                  | "it-IT"
                  | "nb-NO"
                  | "nl-BE"
                  | "nl-NL"
                  | "pl-PL"
                  | "pt-PT"
                  | "ro-RO"
                  | "sv-FI"
                  | "sv-SE"
                  | UnknownEnumStringValue
                setup_future_usage?:
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
                subscriptions?:
                  | {
                      interval:
                        | "day"
                        | "month"
                        | "week"
                        | "year"
                        | UnknownEnumStringValue
                      interval_count?: number
                      name?: string
                      next_billing?: {
                        amount: number
                        date: string
                      }
                      reference: string
                    }[]
                  | ""
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          konbini?:
            | {
                confirmation_number?: string | "" | UnknownEnumStringValue
                expires_after_days?: number | "" | UnknownEnumStringValue
                expires_at?: number | "" | UnknownEnumStringValue
                product_description?: string | "" | UnknownEnumStringValue
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          kr_card?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          link?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          mobilepay?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          multibanco?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          naver_pay?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          nz_bank_account?:
            | {
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
                target_date?: string
              }
            | ""
            | UnknownEnumStringValue
          oxxo?:
            | {
                expires_after_days?: number
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          p24?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
                tos_shown_and_accepted?: boolean
              }
            | ""
            | UnknownEnumStringValue
          pay_by_bank?: EmptyObject | "" | UnknownEnumStringValue
          payco?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          paynow?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          paypal?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                preferred_locale?:
                  | "cs-CZ"
                  | "da-DK"
                  | "de-AT"
                  | "de-DE"
                  | "de-LU"
                  | "el-GR"
                  | "en-GB"
                  | "en-US"
                  | "es-ES"
                  | "fi-FI"
                  | "fr-BE"
                  | "fr-FR"
                  | "fr-LU"
                  | "hu-HU"
                  | "it-IT"
                  | "nl-BE"
                  | "nl-NL"
                  | "pl-PL"
                  | "pt-PT"
                  | "sk-SK"
                  | "sv-SE"
                  | UnknownEnumStringValue
                reference?: string
                risk_correlation_id?: string
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          pix?:
            | {
                expires_after_seconds?: number
                expires_at?: number
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          promptpay?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          revolut_pay?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          samsung_pay?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          satispay?:
            | {
                capture_method?: "" | "manual" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          sepa_debit?:
            | {
                mandate_options?: {
                  reference_prefix?: string | "" | UnknownEnumStringValue
                }
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
                target_date?: string
              }
            | ""
            | UnknownEnumStringValue
          sofort?:
            | {
                preferred_language?:
                  | ""
                  | "de"
                  | "en"
                  | "es"
                  | "fr"
                  | "it"
                  | "nl"
                  | "pl"
                  | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          swish?:
            | {
                reference?: string | "" | UnknownEnumStringValue
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          twint?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          us_bank_account?:
            | {
                financial_connections?: {
                  filters?: {
                    account_subcategories?: (
                      | "checking"
                      | "savings"
                      | UnknownEnumStringValue
                    )[]
                  }
                  permissions?: (
                    | "balances"
                    | "ownership"
                    | "payment_method"
                    | "transactions"
                    | UnknownEnumStringValue
                  )[]
                  prefetch?: (
                    | "balances"
                    | "ownership"
                    | "transactions"
                    | UnknownEnumStringValue
                  )[]
                  return_url?: string
                }
                mandate_options?: {
                  collection_method?: "" | "paper" | UnknownEnumStringValue
                }
                networks?: {
                  requested?: (
                    | "ach"
                    | "us_domestic_wire"
                    | UnknownEnumStringValue
                  )[]
                }
                preferred_settlement_speed?:
                  | ""
                  | "fastest"
                  | "standard"
                  | UnknownEnumStringValue
                setup_future_usage?:
                  | ""
                  | "none"
                  | "off_session"
                  | "on_session"
                  | UnknownEnumStringValue
                target_date?: string
                verification_method?:
                  | "automatic"
                  | "instant"
                  | "microdeposits"
                  | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          wechat_pay?:
            | {
                app_id?: string
                client?: "android" | "ios" | "web" | UnknownEnumStringValue
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
          zip?:
            | {
                setup_future_usage?: "none" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
        }
        payment_method_types?: string[]
        radar_options?: {
          session?: string
        }
        receipt_email?: string | "" | UnknownEnumStringValue
        return_url?: string
        setup_future_usage?:
          | ""
          | "off_session"
          | "on_session"
          | UnknownEnumStringValue
        shipping?:
          | {
              address: {
                city?: string
                country?: string
                line1?: string
                line2?: string
                postal_code?: string
                state?: string
              }
              carrier?: string
              name: string
              phone?: string
              tracking_number?: string
            }
          | ""
          | UnknownEnumStringValue
        use_stripe_sdk?: boolean
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_intent> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/payment_intents/${p["intent"]}/confirm`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            mandate_data: {explode: true, style: "deepObject"},
            off_session: {explode: true, style: "deepObject"},
            payment_method_data: {explode: true, style: "deepObject"},
            payment_method_options: {explode: true, style: "deepObject"},
            payment_method_types: {explode: true, style: "deepObject"},
            radar_options: {explode: true, style: "deepObject"},
            receipt_email: {explode: true, style: "deepObject"},
            shipping: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postPaymentIntentsIntentIncrementAuthorization(
    p: {
      intent: string
      requestBody: {
        amount: number
        application_fee_amount?: number
        description?: string
        expand?: string[]
        metadata?: {
          [key: string]: string | undefined
        }
        statement_descriptor?: string
        transfer_data?: {
          amount?: number
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_intent> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/payment_intents/${p["intent"]}/increment_authorization`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
      transfer_data: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postPaymentIntentsIntentVerifyMicrodeposits(
    p: {
      intent: string
      requestBody?: {
        amounts?: number[]
        client_secret?: string
        descriptor_code?: string
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_intent> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/payment_intents/${p["intent"]}/verify_microdeposits`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            amounts: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getPaymentLinks(
    p: {
      active?: boolean
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_payment_link[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/payment_links`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      active: p["active"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postPaymentLinks(
    p: {
      requestBody: {
        after_completion?: {
          hosted_confirmation?: {
            custom_message?: string
          }
          redirect?: {
            url: string
          }
          type: "hosted_confirmation" | "redirect" | UnknownEnumStringValue
        }
        allow_promotion_codes?: boolean
        application_fee_amount?: number
        application_fee_percent?: number
        automatic_tax?: {
          enabled: boolean
          liability?: {
            account?: string
            type: "account" | "self" | UnknownEnumStringValue
          }
        }
        billing_address_collection?:
          | "auto"
          | "required"
          | UnknownEnumStringValue
        consent_collection?: {
          payment_method_reuse_agreement?: {
            position: "auto" | "hidden" | UnknownEnumStringValue
          }
          promotions?: "auto" | "none" | UnknownEnumStringValue
          terms_of_service?: "none" | "required" | UnknownEnumStringValue
        }
        currency?: string
        custom_fields?: {
          dropdown?: {
            default_value?: string
            options: {
              label: string
              value: string
            }[]
          }
          key: string
          label: {
            custom: string
            type: "custom" | UnknownEnumStringValue
          }
          numeric?: {
            default_value?: string
            maximum_length?: number
            minimum_length?: number
          }
          optional?: boolean
          text?: {
            default_value?: string
            maximum_length?: number
            minimum_length?: number
          }
          type: "dropdown" | "numeric" | "text" | UnknownEnumStringValue
        }[]
        custom_text?: {
          after_submit?:
            | {
                message: string
              }
            | ""
            | UnknownEnumStringValue
          shipping_address?:
            | {
                message: string
              }
            | ""
            | UnknownEnumStringValue
          submit?:
            | {
                message: string
              }
            | ""
            | UnknownEnumStringValue
          terms_of_service_acceptance?:
            | {
                message: string
              }
            | ""
            | UnknownEnumStringValue
        }
        customer_creation?: "always" | "if_required" | UnknownEnumStringValue
        expand?: string[]
        inactive_message?: string
        invoice_creation?: {
          enabled: boolean
          invoice_data?: {
            account_tax_ids?: string[] | "" | UnknownEnumStringValue
            custom_fields?:
              | {
                  name: string
                  value: string
                }[]
              | ""
              | UnknownEnumStringValue
            description?: string
            footer?: string
            issuer?: {
              account?: string
              type: "account" | "self" | UnknownEnumStringValue
            }
            metadata?:
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            rendering_options?:
              | {
                  amount_tax_display?:
                    | ""
                    | "exclude_tax"
                    | "include_inclusive_tax"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
          }
        }
        line_items: {
          adjustable_quantity?: {
            enabled: boolean
            maximum?: number
            minimum?: number
          }
          price: string
          quantity: number
        }[]
        metadata?: {
          [key: string]: string | undefined
        }
        on_behalf_of?: string
        optional_items?: {
          adjustable_quantity?: {
            enabled: boolean
            maximum?: number
            minimum?: number
          }
          price: string
          quantity: number
        }[]
        payment_intent_data?: {
          capture_method?:
            | "automatic"
            | "automatic_async"
            | "manual"
            | UnknownEnumStringValue
          description?: string
          metadata?: {
            [key: string]: string | undefined
          }
          setup_future_usage?:
            | "off_session"
            | "on_session"
            | UnknownEnumStringValue
          statement_descriptor?: string
          statement_descriptor_suffix?: string
          transfer_group?: string
        }
        payment_method_collection?:
          | "always"
          | "if_required"
          | UnknownEnumStringValue
        payment_method_types?: (
          | "affirm"
          | "afterpay_clearpay"
          | "alipay"
          | "alma"
          | "au_becs_debit"
          | "bacs_debit"
          | "bancontact"
          | "billie"
          | "blik"
          | "boleto"
          | "card"
          | "cashapp"
          | "eps"
          | "fpx"
          | "giropay"
          | "grabpay"
          | "ideal"
          | "klarna"
          | "konbini"
          | "link"
          | "mobilepay"
          | "multibanco"
          | "oxxo"
          | "p24"
          | "pay_by_bank"
          | "paynow"
          | "paypal"
          | "pix"
          | "promptpay"
          | "satispay"
          | "sepa_debit"
          | "sofort"
          | "swish"
          | "twint"
          | "us_bank_account"
          | "wechat_pay"
          | "zip"
          | UnknownEnumStringValue
        )[]
        phone_number_collection?: {
          enabled: boolean
        }
        restrictions?: {
          completed_sessions: {
            limit: number
          }
        }
        shipping_address_collection?: {
          allowed_countries: (
            | "AC"
            | "AD"
            | "AE"
            | "AF"
            | "AG"
            | "AI"
            | "AL"
            | "AM"
            | "AO"
            | "AQ"
            | "AR"
            | "AT"
            | "AU"
            | "AW"
            | "AX"
            | "AZ"
            | "BA"
            | "BB"
            | "BD"
            | "BE"
            | "BF"
            | "BG"
            | "BH"
            | "BI"
            | "BJ"
            | "BL"
            | "BM"
            | "BN"
            | "BO"
            | "BQ"
            | "BR"
            | "BS"
            | "BT"
            | "BV"
            | "BW"
            | "BY"
            | "BZ"
            | "CA"
            | "CD"
            | "CF"
            | "CG"
            | "CH"
            | "CI"
            | "CK"
            | "CL"
            | "CM"
            | "CN"
            | "CO"
            | "CR"
            | "CV"
            | "CW"
            | "CY"
            | "CZ"
            | "DE"
            | "DJ"
            | "DK"
            | "DM"
            | "DO"
            | "DZ"
            | "EC"
            | "EE"
            | "EG"
            | "EH"
            | "ER"
            | "ES"
            | "ET"
            | "FI"
            | "FJ"
            | "FK"
            | "FO"
            | "FR"
            | "GA"
            | "GB"
            | "GD"
            | "GE"
            | "GF"
            | "GG"
            | "GH"
            | "GI"
            | "GL"
            | "GM"
            | "GN"
            | "GP"
            | "GQ"
            | "GR"
            | "GS"
            | "GT"
            | "GU"
            | "GW"
            | "GY"
            | "HK"
            | "HN"
            | "HR"
            | "HT"
            | "HU"
            | "ID"
            | "IE"
            | "IL"
            | "IM"
            | "IN"
            | "IO"
            | "IQ"
            | "IS"
            | "IT"
            | "JE"
            | "JM"
            | "JO"
            | "JP"
            | "KE"
            | "KG"
            | "KH"
            | "KI"
            | "KM"
            | "KN"
            | "KR"
            | "KW"
            | "KY"
            | "KZ"
            | "LA"
            | "LB"
            | "LC"
            | "LI"
            | "LK"
            | "LR"
            | "LS"
            | "LT"
            | "LU"
            | "LV"
            | "LY"
            | "MA"
            | "MC"
            | "MD"
            | "ME"
            | "MF"
            | "MG"
            | "MK"
            | "ML"
            | "MM"
            | "MN"
            | "MO"
            | "MQ"
            | "MR"
            | "MS"
            | "MT"
            | "MU"
            | "MV"
            | "MW"
            | "MX"
            | "MY"
            | "MZ"
            | "NA"
            | "NC"
            | "NE"
            | "NG"
            | "NI"
            | "NL"
            | "NO"
            | "NP"
            | "NR"
            | "NU"
            | "NZ"
            | "OM"
            | "PA"
            | "PE"
            | "PF"
            | "PG"
            | "PH"
            | "PK"
            | "PL"
            | "PM"
            | "PN"
            | "PR"
            | "PS"
            | "PT"
            | "PY"
            | "QA"
            | "RE"
            | "RO"
            | "RS"
            | "RU"
            | "RW"
            | "SA"
            | "SB"
            | "SC"
            | "SD"
            | "SE"
            | "SG"
            | "SH"
            | "SI"
            | "SJ"
            | "SK"
            | "SL"
            | "SM"
            | "SN"
            | "SO"
            | "SR"
            | "SS"
            | "ST"
            | "SV"
            | "SX"
            | "SZ"
            | "TA"
            | "TC"
            | "TD"
            | "TF"
            | "TG"
            | "TH"
            | "TJ"
            | "TK"
            | "TL"
            | "TM"
            | "TN"
            | "TO"
            | "TR"
            | "TT"
            | "TV"
            | "TW"
            | "TZ"
            | "UA"
            | "UG"
            | "US"
            | "UY"
            | "UZ"
            | "VA"
            | "VC"
            | "VE"
            | "VG"
            | "VN"
            | "VU"
            | "WF"
            | "WS"
            | "XK"
            | "YE"
            | "YT"
            | "ZA"
            | "ZM"
            | "ZW"
            | "ZZ"
            | UnknownEnumStringValue
          )[]
        }
        shipping_options?: {
          shipping_rate?: string
        }[]
        submit_type?:
          | "auto"
          | "book"
          | "donate"
          | "pay"
          | "subscribe"
          | UnknownEnumStringValue
        subscription_data?: {
          description?: string
          invoice_settings?: {
            issuer?: {
              account?: string
              type: "account" | "self" | UnknownEnumStringValue
            }
          }
          metadata?: {
            [key: string]: string | undefined
          }
          trial_period_days?: number
          trial_settings?: {
            end_behavior: {
              missing_payment_method:
                | "cancel"
                | "create_invoice"
                | "pause"
                | UnknownEnumStringValue
            }
          }
        }
        tax_id_collection?: {
          enabled: boolean
          required?: "if_supported" | "never" | UnknownEnumStringValue
        }
        transfer_data?: {
          amount?: number
          destination: string
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_link> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/payment_links`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      after_completion: {explode: true, style: "deepObject"},
      automatic_tax: {explode: true, style: "deepObject"},
      consent_collection: {explode: true, style: "deepObject"},
      custom_fields: {explode: true, style: "deepObject"},
      custom_text: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
      invoice_creation: {explode: true, style: "deepObject"},
      line_items: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
      optional_items: {explode: true, style: "deepObject"},
      payment_intent_data: {explode: true, style: "deepObject"},
      payment_method_types: {explode: true, style: "deepObject"},
      phone_number_collection: {explode: true, style: "deepObject"},
      restrictions: {explode: true, style: "deepObject"},
      shipping_address_collection: {explode: true, style: "deepObject"},
      shipping_options: {explode: true, style: "deepObject"},
      subscription_data: {explode: true, style: "deepObject"},
      tax_id_collection: {explode: true, style: "deepObject"},
      transfer_data: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getPaymentLinksPaymentLink(
    p: {
      expand?: string[]
      paymentLink: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_link> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/payment_links/${p["paymentLink"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postPaymentLinksPaymentLink(
    p: {
      paymentLink: string
      requestBody?: {
        active?: boolean
        after_completion?: {
          hosted_confirmation?: {
            custom_message?: string
          }
          redirect?: {
            url: string
          }
          type: "hosted_confirmation" | "redirect" | UnknownEnumStringValue
        }
        allow_promotion_codes?: boolean
        automatic_tax?: {
          enabled: boolean
          liability?: {
            account?: string
            type: "account" | "self" | UnknownEnumStringValue
          }
        }
        billing_address_collection?:
          | "auto"
          | "required"
          | UnknownEnumStringValue
        custom_fields?:
          | {
              dropdown?: {
                default_value?: string
                options: {
                  label: string
                  value: string
                }[]
              }
              key: string
              label: {
                custom: string
                type: "custom" | UnknownEnumStringValue
              }
              numeric?: {
                default_value?: string
                maximum_length?: number
                minimum_length?: number
              }
              optional?: boolean
              text?: {
                default_value?: string
                maximum_length?: number
                minimum_length?: number
              }
              type: "dropdown" | "numeric" | "text" | UnknownEnumStringValue
            }[]
          | ""
          | UnknownEnumStringValue
        custom_text?: {
          after_submit?:
            | {
                message: string
              }
            | ""
            | UnknownEnumStringValue
          shipping_address?:
            | {
                message: string
              }
            | ""
            | UnknownEnumStringValue
          submit?:
            | {
                message: string
              }
            | ""
            | UnknownEnumStringValue
          terms_of_service_acceptance?:
            | {
                message: string
              }
            | ""
            | UnknownEnumStringValue
        }
        customer_creation?: "always" | "if_required" | UnknownEnumStringValue
        expand?: string[]
        inactive_message?: string | "" | UnknownEnumStringValue
        invoice_creation?: {
          enabled: boolean
          invoice_data?: {
            account_tax_ids?: string[] | "" | UnknownEnumStringValue
            custom_fields?:
              | {
                  name: string
                  value: string
                }[]
              | ""
              | UnknownEnumStringValue
            description?: string
            footer?: string
            issuer?: {
              account?: string
              type: "account" | "self" | UnknownEnumStringValue
            }
            metadata?:
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            rendering_options?:
              | {
                  amount_tax_display?:
                    | ""
                    | "exclude_tax"
                    | "include_inclusive_tax"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
          }
        }
        line_items?: {
          adjustable_quantity?: {
            enabled: boolean
            maximum?: number
            minimum?: number
          }
          id: string
          quantity?: number
        }[]
        metadata?: {
          [key: string]: string | undefined
        }
        payment_intent_data?: {
          description?: string | "" | UnknownEnumStringValue
          metadata?:
            | {
                [key: string]: string | undefined
              }
            | ""
            | UnknownEnumStringValue
          statement_descriptor?: string | "" | UnknownEnumStringValue
          statement_descriptor_suffix?: string | "" | UnknownEnumStringValue
          transfer_group?: string | "" | UnknownEnumStringValue
        }
        payment_method_collection?:
          | "always"
          | "if_required"
          | UnknownEnumStringValue
        payment_method_types?:
          | (
              | "affirm"
              | "afterpay_clearpay"
              | "alipay"
              | "alma"
              | "au_becs_debit"
              | "bacs_debit"
              | "bancontact"
              | "billie"
              | "blik"
              | "boleto"
              | "card"
              | "cashapp"
              | "eps"
              | "fpx"
              | "giropay"
              | "grabpay"
              | "ideal"
              | "klarna"
              | "konbini"
              | "link"
              | "mobilepay"
              | "multibanco"
              | "oxxo"
              | "p24"
              | "pay_by_bank"
              | "paynow"
              | "paypal"
              | "pix"
              | "promptpay"
              | "satispay"
              | "sepa_debit"
              | "sofort"
              | "swish"
              | "twint"
              | "us_bank_account"
              | "wechat_pay"
              | "zip"
              | UnknownEnumStringValue
            )[]
          | ""
          | UnknownEnumStringValue
        phone_number_collection?: {
          enabled: boolean
        }
        restrictions?:
          | {
              completed_sessions: {
                limit: number
              }
            }
          | ""
          | UnknownEnumStringValue
        shipping_address_collection?:
          | {
              allowed_countries: (
                | "AC"
                | "AD"
                | "AE"
                | "AF"
                | "AG"
                | "AI"
                | "AL"
                | "AM"
                | "AO"
                | "AQ"
                | "AR"
                | "AT"
                | "AU"
                | "AW"
                | "AX"
                | "AZ"
                | "BA"
                | "BB"
                | "BD"
                | "BE"
                | "BF"
                | "BG"
                | "BH"
                | "BI"
                | "BJ"
                | "BL"
                | "BM"
                | "BN"
                | "BO"
                | "BQ"
                | "BR"
                | "BS"
                | "BT"
                | "BV"
                | "BW"
                | "BY"
                | "BZ"
                | "CA"
                | "CD"
                | "CF"
                | "CG"
                | "CH"
                | "CI"
                | "CK"
                | "CL"
                | "CM"
                | "CN"
                | "CO"
                | "CR"
                | "CV"
                | "CW"
                | "CY"
                | "CZ"
                | "DE"
                | "DJ"
                | "DK"
                | "DM"
                | "DO"
                | "DZ"
                | "EC"
                | "EE"
                | "EG"
                | "EH"
                | "ER"
                | "ES"
                | "ET"
                | "FI"
                | "FJ"
                | "FK"
                | "FO"
                | "FR"
                | "GA"
                | "GB"
                | "GD"
                | "GE"
                | "GF"
                | "GG"
                | "GH"
                | "GI"
                | "GL"
                | "GM"
                | "GN"
                | "GP"
                | "GQ"
                | "GR"
                | "GS"
                | "GT"
                | "GU"
                | "GW"
                | "GY"
                | "HK"
                | "HN"
                | "HR"
                | "HT"
                | "HU"
                | "ID"
                | "IE"
                | "IL"
                | "IM"
                | "IN"
                | "IO"
                | "IQ"
                | "IS"
                | "IT"
                | "JE"
                | "JM"
                | "JO"
                | "JP"
                | "KE"
                | "KG"
                | "KH"
                | "KI"
                | "KM"
                | "KN"
                | "KR"
                | "KW"
                | "KY"
                | "KZ"
                | "LA"
                | "LB"
                | "LC"
                | "LI"
                | "LK"
                | "LR"
                | "LS"
                | "LT"
                | "LU"
                | "LV"
                | "LY"
                | "MA"
                | "MC"
                | "MD"
                | "ME"
                | "MF"
                | "MG"
                | "MK"
                | "ML"
                | "MM"
                | "MN"
                | "MO"
                | "MQ"
                | "MR"
                | "MS"
                | "MT"
                | "MU"
                | "MV"
                | "MW"
                | "MX"
                | "MY"
                | "MZ"
                | "NA"
                | "NC"
                | "NE"
                | "NG"
                | "NI"
                | "NL"
                | "NO"
                | "NP"
                | "NR"
                | "NU"
                | "NZ"
                | "OM"
                | "PA"
                | "PE"
                | "PF"
                | "PG"
                | "PH"
                | "PK"
                | "PL"
                | "PM"
                | "PN"
                | "PR"
                | "PS"
                | "PT"
                | "PY"
                | "QA"
                | "RE"
                | "RO"
                | "RS"
                | "RU"
                | "RW"
                | "SA"
                | "SB"
                | "SC"
                | "SD"
                | "SE"
                | "SG"
                | "SH"
                | "SI"
                | "SJ"
                | "SK"
                | "SL"
                | "SM"
                | "SN"
                | "SO"
                | "SR"
                | "SS"
                | "ST"
                | "SV"
                | "SX"
                | "SZ"
                | "TA"
                | "TC"
                | "TD"
                | "TF"
                | "TG"
                | "TH"
                | "TJ"
                | "TK"
                | "TL"
                | "TM"
                | "TN"
                | "TO"
                | "TR"
                | "TT"
                | "TV"
                | "TW"
                | "TZ"
                | "UA"
                | "UG"
                | "US"
                | "UY"
                | "UZ"
                | "VA"
                | "VC"
                | "VE"
                | "VG"
                | "VN"
                | "VU"
                | "WF"
                | "WS"
                | "XK"
                | "YE"
                | "YT"
                | "ZA"
                | "ZM"
                | "ZW"
                | "ZZ"
                | UnknownEnumStringValue
              )[]
            }
          | ""
          | UnknownEnumStringValue
        submit_type?:
          | "auto"
          | "book"
          | "donate"
          | "pay"
          | "subscribe"
          | UnknownEnumStringValue
        subscription_data?: {
          invoice_settings?: {
            issuer?: {
              account?: string
              type: "account" | "self" | UnknownEnumStringValue
            }
          }
          metadata?:
            | {
                [key: string]: string | undefined
              }
            | ""
            | UnknownEnumStringValue
          trial_period_days?: number | "" | UnknownEnumStringValue
          trial_settings?:
            | {
                end_behavior: {
                  missing_payment_method:
                    | "cancel"
                    | "create_invoice"
                    | "pause"
                    | UnknownEnumStringValue
                }
              }
            | ""
            | UnknownEnumStringValue
        }
        tax_id_collection?: {
          enabled: boolean
          required?: "if_supported" | "never" | UnknownEnumStringValue
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_link> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/payment_links/${p["paymentLink"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            after_completion: {explode: true, style: "deepObject"},
            automatic_tax: {explode: true, style: "deepObject"},
            custom_fields: {explode: true, style: "deepObject"},
            custom_text: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            inactive_message: {explode: true, style: "deepObject"},
            invoice_creation: {explode: true, style: "deepObject"},
            line_items: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            payment_intent_data: {explode: true, style: "deepObject"},
            payment_method_types: {explode: true, style: "deepObject"},
            phone_number_collection: {explode: true, style: "deepObject"},
            restrictions: {explode: true, style: "deepObject"},
            shipping_address_collection: {explode: true, style: "deepObject"},
            subscription_data: {explode: true, style: "deepObject"},
            tax_id_collection: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getPaymentLinksPaymentLinkLineItems(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      paymentLink: string
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_item[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/payment_links/${p["paymentLink"]}/line_items`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getPaymentMethodConfigurations(
    p: {
      application?: string | "" | UnknownEnumStringValue
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_payment_method_configuration[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/payment_method_configurations`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      application: p["application"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postPaymentMethodConfigurations(
    p: {
      requestBody?: {
        acss_debit?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        affirm?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        afterpay_clearpay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        alipay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        alma?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        amazon_pay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        apple_pay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        apple_pay_later?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        au_becs_debit?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        bacs_debit?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        bancontact?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        billie?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        blik?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        boleto?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        card?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        cartes_bancaires?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        cashapp?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        customer_balance?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        eps?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        expand?: string[]
        fpx?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        giropay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        google_pay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        grabpay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        ideal?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        jcb?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        kakao_pay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        klarna?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        konbini?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        kr_card?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        link?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        mobilepay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        multibanco?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        name?: string
        naver_pay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        nz_bank_account?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        oxxo?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        p24?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        parent?: string
        pay_by_bank?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        payco?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        paynow?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        paypal?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        pix?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        promptpay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        revolut_pay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        samsung_pay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        satispay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        sepa_debit?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        sofort?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        swish?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        twint?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        us_bank_account?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        wechat_pay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        zip?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
      }
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_payment_method_configuration> | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/payment_method_configurations`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            acss_debit: {explode: true, style: "deepObject"},
            affirm: {explode: true, style: "deepObject"},
            afterpay_clearpay: {explode: true, style: "deepObject"},
            alipay: {explode: true, style: "deepObject"},
            alma: {explode: true, style: "deepObject"},
            amazon_pay: {explode: true, style: "deepObject"},
            apple_pay: {explode: true, style: "deepObject"},
            apple_pay_later: {explode: true, style: "deepObject"},
            au_becs_debit: {explode: true, style: "deepObject"},
            bacs_debit: {explode: true, style: "deepObject"},
            bancontact: {explode: true, style: "deepObject"},
            billie: {explode: true, style: "deepObject"},
            blik: {explode: true, style: "deepObject"},
            boleto: {explode: true, style: "deepObject"},
            card: {explode: true, style: "deepObject"},
            cartes_bancaires: {explode: true, style: "deepObject"},
            cashapp: {explode: true, style: "deepObject"},
            customer_balance: {explode: true, style: "deepObject"},
            eps: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            fpx: {explode: true, style: "deepObject"},
            giropay: {explode: true, style: "deepObject"},
            google_pay: {explode: true, style: "deepObject"},
            grabpay: {explode: true, style: "deepObject"},
            ideal: {explode: true, style: "deepObject"},
            jcb: {explode: true, style: "deepObject"},
            kakao_pay: {explode: true, style: "deepObject"},
            klarna: {explode: true, style: "deepObject"},
            konbini: {explode: true, style: "deepObject"},
            kr_card: {explode: true, style: "deepObject"},
            link: {explode: true, style: "deepObject"},
            mobilepay: {explode: true, style: "deepObject"},
            multibanco: {explode: true, style: "deepObject"},
            naver_pay: {explode: true, style: "deepObject"},
            nz_bank_account: {explode: true, style: "deepObject"},
            oxxo: {explode: true, style: "deepObject"},
            p24: {explode: true, style: "deepObject"},
            pay_by_bank: {explode: true, style: "deepObject"},
            payco: {explode: true, style: "deepObject"},
            paynow: {explode: true, style: "deepObject"},
            paypal: {explode: true, style: "deepObject"},
            pix: {explode: true, style: "deepObject"},
            promptpay: {explode: true, style: "deepObject"},
            revolut_pay: {explode: true, style: "deepObject"},
            samsung_pay: {explode: true, style: "deepObject"},
            satispay: {explode: true, style: "deepObject"},
            sepa_debit: {explode: true, style: "deepObject"},
            sofort: {explode: true, style: "deepObject"},
            swish: {explode: true, style: "deepObject"},
            twint: {explode: true, style: "deepObject"},
            us_bank_account: {explode: true, style: "deepObject"},
            wechat_pay: {explode: true, style: "deepObject"},
            zip: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getPaymentMethodConfigurationsConfiguration(
    p: {
      configuration: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_payment_method_configuration> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/payment_method_configurations/${p["configuration"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postPaymentMethodConfigurationsConfiguration(
    p: {
      configuration: string
      requestBody?: {
        acss_debit?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        active?: boolean
        affirm?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        afterpay_clearpay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        alipay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        alma?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        amazon_pay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        apple_pay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        apple_pay_later?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        au_becs_debit?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        bacs_debit?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        bancontact?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        billie?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        blik?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        boleto?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        card?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        cartes_bancaires?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        cashapp?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        customer_balance?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        eps?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        expand?: string[]
        fpx?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        giropay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        google_pay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        grabpay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        ideal?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        jcb?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        kakao_pay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        klarna?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        konbini?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        kr_card?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        link?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        mobilepay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        multibanco?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        name?: string
        naver_pay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        nz_bank_account?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        oxxo?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        p24?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        pay_by_bank?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        payco?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        paynow?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        paypal?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        pix?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        promptpay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        revolut_pay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        samsung_pay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        satispay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        sepa_debit?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        sofort?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        swish?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        twint?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        us_bank_account?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        wechat_pay?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
        zip?: {
          display_preference?: {
            preference?: "none" | "off" | "on" | UnknownEnumStringValue
          }
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_payment_method_configuration> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/payment_method_configurations/${p["configuration"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            acss_debit: {explode: true, style: "deepObject"},
            affirm: {explode: true, style: "deepObject"},
            afterpay_clearpay: {explode: true, style: "deepObject"},
            alipay: {explode: true, style: "deepObject"},
            alma: {explode: true, style: "deepObject"},
            amazon_pay: {explode: true, style: "deepObject"},
            apple_pay: {explode: true, style: "deepObject"},
            apple_pay_later: {explode: true, style: "deepObject"},
            au_becs_debit: {explode: true, style: "deepObject"},
            bacs_debit: {explode: true, style: "deepObject"},
            bancontact: {explode: true, style: "deepObject"},
            billie: {explode: true, style: "deepObject"},
            blik: {explode: true, style: "deepObject"},
            boleto: {explode: true, style: "deepObject"},
            card: {explode: true, style: "deepObject"},
            cartes_bancaires: {explode: true, style: "deepObject"},
            cashapp: {explode: true, style: "deepObject"},
            customer_balance: {explode: true, style: "deepObject"},
            eps: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            fpx: {explode: true, style: "deepObject"},
            giropay: {explode: true, style: "deepObject"},
            google_pay: {explode: true, style: "deepObject"},
            grabpay: {explode: true, style: "deepObject"},
            ideal: {explode: true, style: "deepObject"},
            jcb: {explode: true, style: "deepObject"},
            kakao_pay: {explode: true, style: "deepObject"},
            klarna: {explode: true, style: "deepObject"},
            konbini: {explode: true, style: "deepObject"},
            kr_card: {explode: true, style: "deepObject"},
            link: {explode: true, style: "deepObject"},
            mobilepay: {explode: true, style: "deepObject"},
            multibanco: {explode: true, style: "deepObject"},
            naver_pay: {explode: true, style: "deepObject"},
            nz_bank_account: {explode: true, style: "deepObject"},
            oxxo: {explode: true, style: "deepObject"},
            p24: {explode: true, style: "deepObject"},
            pay_by_bank: {explode: true, style: "deepObject"},
            payco: {explode: true, style: "deepObject"},
            paynow: {explode: true, style: "deepObject"},
            paypal: {explode: true, style: "deepObject"},
            pix: {explode: true, style: "deepObject"},
            promptpay: {explode: true, style: "deepObject"},
            revolut_pay: {explode: true, style: "deepObject"},
            samsung_pay: {explode: true, style: "deepObject"},
            satispay: {explode: true, style: "deepObject"},
            sepa_debit: {explode: true, style: "deepObject"},
            sofort: {explode: true, style: "deepObject"},
            swish: {explode: true, style: "deepObject"},
            twint: {explode: true, style: "deepObject"},
            us_bank_account: {explode: true, style: "deepObject"},
            wechat_pay: {explode: true, style: "deepObject"},
            zip: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getPaymentMethodDomains(
    p: {
      domainName?: string
      enabled?: boolean
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_payment_method_domain[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/payment_method_domains`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      domain_name: p["domainName"],
      enabled: p["enabled"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postPaymentMethodDomains(
    p: {
      requestBody: {
        domain_name: string
        enabled?: boolean
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_method_domain> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/payment_method_domains`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getPaymentMethodDomainsPaymentMethodDomain(
    p: {
      expand?: string[]
      paymentMethodDomain: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_method_domain> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/payment_method_domains/${p["paymentMethodDomain"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postPaymentMethodDomainsPaymentMethodDomain(
    p: {
      paymentMethodDomain: string
      requestBody?: {
        enabled?: boolean
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_method_domain> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/payment_method_domains/${p["paymentMethodDomain"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postPaymentMethodDomainsPaymentMethodDomainValidate(
    p: {
      paymentMethodDomain: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_method_domain> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/payment_method_domains/${p["paymentMethodDomain"]}/validate`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getPaymentMethods(
    p: {
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      type?:
        | "acss_debit"
        | "affirm"
        | "afterpay_clearpay"
        | "alipay"
        | "alma"
        | "amazon_pay"
        | "au_becs_debit"
        | "bacs_debit"
        | "bancontact"
        | "billie"
        | "blik"
        | "boleto"
        | "card"
        | "cashapp"
        | "crypto"
        | "customer_balance"
        | "eps"
        | "fpx"
        | "giropay"
        | "grabpay"
        | "ideal"
        | "kakao_pay"
        | "klarna"
        | "konbini"
        | "kr_card"
        | "link"
        | "mobilepay"
        | "multibanco"
        | "naver_pay"
        | "nz_bank_account"
        | "oxxo"
        | "p24"
        | "pay_by_bank"
        | "payco"
        | "paynow"
        | "paypal"
        | "pix"
        | "promptpay"
        | "revolut_pay"
        | "samsung_pay"
        | "satispay"
        | "sepa_debit"
        | "sofort"
        | "swish"
        | "twint"
        | "us_bank_account"
        | "wechat_pay"
        | "zip"
        | UnknownEnumStringValue
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_payment_method[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/payment_methods`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      type: p["type"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postPaymentMethods(
    p: {
      requestBody?: {
        acss_debit?: {
          account_number: string
          institution_number: string
          transit_number: string
        }
        affirm?: EmptyObject
        afterpay_clearpay?: EmptyObject
        alipay?: EmptyObject
        allow_redisplay?:
          | "always"
          | "limited"
          | "unspecified"
          | UnknownEnumStringValue
        alma?: EmptyObject
        amazon_pay?: EmptyObject
        au_becs_debit?: {
          account_number: string
          bsb_number: string
        }
        bacs_debit?: {
          account_number?: string
          sort_code?: string
        }
        bancontact?: EmptyObject
        billie?: EmptyObject
        billing_details?: {
          address?:
            | {
                city?: string
                country?: string
                line1?: string
                line2?: string
                postal_code?: string
                state?: string
              }
            | ""
            | UnknownEnumStringValue
          email?: string | "" | UnknownEnumStringValue
          name?: string | "" | UnknownEnumStringValue
          phone?: string | "" | UnknownEnumStringValue
          tax_id?: string
        }
        blik?: EmptyObject
        boleto?: {
          tax_id: string
        }
        card?:
          | {
              cvc?: string
              exp_month: number
              exp_year: number
              networks?: {
                preferred?:
                  | "cartes_bancaires"
                  | "mastercard"
                  | "visa"
                  | UnknownEnumStringValue
              }
              number: string
            }
          | {
              token: string
            }
        cashapp?: EmptyObject
        crypto?: EmptyObject
        customer?: string
        customer_balance?: EmptyObject
        eps?: {
          bank?:
            | "arzte_und_apotheker_bank"
            | "austrian_anadi_bank_ag"
            | "bank_austria"
            | "bankhaus_carl_spangler"
            | "bankhaus_schelhammer_und_schattera_ag"
            | "bawag_psk_ag"
            | "bks_bank_ag"
            | "brull_kallmus_bank_ag"
            | "btv_vier_lander_bank"
            | "capital_bank_grawe_gruppe_ag"
            | "deutsche_bank_ag"
            | "dolomitenbank"
            | "easybank_ag"
            | "erste_bank_und_sparkassen"
            | "hypo_alpeadriabank_international_ag"
            | "hypo_bank_burgenland_aktiengesellschaft"
            | "hypo_noe_lb_fur_niederosterreich_u_wien"
            | "hypo_oberosterreich_salzburg_steiermark"
            | "hypo_tirol_bank_ag"
            | "hypo_vorarlberg_bank_ag"
            | "marchfelder_bank"
            | "oberbank_ag"
            | "raiffeisen_bankengruppe_osterreich"
            | "schoellerbank_ag"
            | "sparda_bank_wien"
            | "volksbank_gruppe"
            | "volkskreditbank_ag"
            | "vr_bank_braunau"
            | UnknownEnumStringValue
        }
        expand?: string[]
        fpx?: {
          bank:
            | "affin_bank"
            | "agrobank"
            | "alliance_bank"
            | "ambank"
            | "bank_islam"
            | "bank_muamalat"
            | "bank_of_china"
            | "bank_rakyat"
            | "bsn"
            | "cimb"
            | "deutsche_bank"
            | "hong_leong_bank"
            | "hsbc"
            | "kfh"
            | "maybank2e"
            | "maybank2u"
            | "ocbc"
            | "pb_enterprise"
            | "public_bank"
            | "rhb"
            | "standard_chartered"
            | "uob"
            | UnknownEnumStringValue
        }
        giropay?: EmptyObject
        grabpay?: EmptyObject
        ideal?: {
          bank?:
            | "abn_amro"
            | "asn_bank"
            | "bunq"
            | "buut"
            | "handelsbanken"
            | "ing"
            | "knab"
            | "moneyou"
            | "n26"
            | "nn"
            | "rabobank"
            | "regiobank"
            | "revolut"
            | "sns_bank"
            | "triodos_bank"
            | "van_lanschot"
            | "yoursafe"
            | UnknownEnumStringValue
        }
        interac_present?: EmptyObject
        kakao_pay?: EmptyObject
        klarna?: {
          dob?: {
            day: number
            month: number
            year: number
          }
        }
        konbini?: EmptyObject
        kr_card?: EmptyObject
        link?: EmptyObject
        metadata?: {
          [key: string]: string | undefined
        }
        mobilepay?: EmptyObject
        multibanco?: EmptyObject
        naver_pay?: {
          funding?: "card" | "points" | UnknownEnumStringValue
        }
        nz_bank_account?: {
          account_holder_name?: string
          account_number: string
          bank_code: string
          branch_code: string
          reference?: string
          suffix: string
        }
        oxxo?: EmptyObject
        p24?: {
          bank?:
            | "alior_bank"
            | "bank_millennium"
            | "bank_nowy_bfg_sa"
            | "bank_pekao_sa"
            | "banki_spbdzielcze"
            | "blik"
            | "bnp_paribas"
            | "boz"
            | "citi_handlowy"
            | "credit_agricole"
            | "envelobank"
            | "etransfer_pocztowy24"
            | "getin_bank"
            | "ideabank"
            | "ing"
            | "inteligo"
            | "mbank_mtransfer"
            | "nest_przelew"
            | "noble_pay"
            | "pbac_z_ipko"
            | "plus_bank"
            | "santander_przelew24"
            | "tmobile_usbugi_bankowe"
            | "toyota_bank"
            | "velobank"
            | "volkswagen_bank"
            | UnknownEnumStringValue
        }
        pay_by_bank?: EmptyObject
        payco?: EmptyObject
        payment_method?: string
        paynow?: EmptyObject
        paypal?: EmptyObject
        pix?: EmptyObject
        promptpay?: EmptyObject
        radar_options?: {
          session?: string
        }
        revolut_pay?: EmptyObject
        samsung_pay?: EmptyObject
        satispay?: EmptyObject
        sepa_debit?: {
          iban: string
        }
        sofort?: {
          country:
            | "AT"
            | "BE"
            | "DE"
            | "ES"
            | "IT"
            | "NL"
            | UnknownEnumStringValue
        }
        swish?: EmptyObject
        twint?: EmptyObject
        type?:
          | "acss_debit"
          | "affirm"
          | "afterpay_clearpay"
          | "alipay"
          | "alma"
          | "amazon_pay"
          | "au_becs_debit"
          | "bacs_debit"
          | "bancontact"
          | "billie"
          | "blik"
          | "boleto"
          | "card"
          | "cashapp"
          | "crypto"
          | "customer_balance"
          | "eps"
          | "fpx"
          | "giropay"
          | "grabpay"
          | "ideal"
          | "kakao_pay"
          | "klarna"
          | "konbini"
          | "kr_card"
          | "link"
          | "mobilepay"
          | "multibanco"
          | "naver_pay"
          | "nz_bank_account"
          | "oxxo"
          | "p24"
          | "pay_by_bank"
          | "payco"
          | "paynow"
          | "paypal"
          | "pix"
          | "promptpay"
          | "revolut_pay"
          | "samsung_pay"
          | "satispay"
          | "sepa_debit"
          | "sofort"
          | "swish"
          | "twint"
          | "us_bank_account"
          | "wechat_pay"
          | "zip"
          | UnknownEnumStringValue
        us_bank_account?: {
          account_holder_type?:
            | "company"
            | "individual"
            | UnknownEnumStringValue
          account_number?: string
          account_type?: "checking" | "savings" | UnknownEnumStringValue
          financial_connections_account?: string
          routing_number?: string
        }
        wechat_pay?: EmptyObject
        zip?: EmptyObject
      }
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_method> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/payment_methods`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            acss_debit: {explode: true, style: "deepObject"},
            affirm: {explode: true, style: "deepObject"},
            afterpay_clearpay: {explode: true, style: "deepObject"},
            alipay: {explode: true, style: "deepObject"},
            alma: {explode: true, style: "deepObject"},
            amazon_pay: {explode: true, style: "deepObject"},
            au_becs_debit: {explode: true, style: "deepObject"},
            bacs_debit: {explode: true, style: "deepObject"},
            bancontact: {explode: true, style: "deepObject"},
            billie: {explode: true, style: "deepObject"},
            billing_details: {explode: true, style: "deepObject"},
            blik: {explode: true, style: "deepObject"},
            boleto: {explode: true, style: "deepObject"},
            card: {explode: true, style: "deepObject"},
            cashapp: {explode: true, style: "deepObject"},
            crypto: {explode: true, style: "deepObject"},
            customer_balance: {explode: true, style: "deepObject"},
            eps: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            fpx: {explode: true, style: "deepObject"},
            giropay: {explode: true, style: "deepObject"},
            grabpay: {explode: true, style: "deepObject"},
            ideal: {explode: true, style: "deepObject"},
            interac_present: {explode: true, style: "deepObject"},
            kakao_pay: {explode: true, style: "deepObject"},
            klarna: {explode: true, style: "deepObject"},
            konbini: {explode: true, style: "deepObject"},
            kr_card: {explode: true, style: "deepObject"},
            link: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            mobilepay: {explode: true, style: "deepObject"},
            multibanco: {explode: true, style: "deepObject"},
            naver_pay: {explode: true, style: "deepObject"},
            nz_bank_account: {explode: true, style: "deepObject"},
            oxxo: {explode: true, style: "deepObject"},
            p24: {explode: true, style: "deepObject"},
            pay_by_bank: {explode: true, style: "deepObject"},
            payco: {explode: true, style: "deepObject"},
            paynow: {explode: true, style: "deepObject"},
            paypal: {explode: true, style: "deepObject"},
            pix: {explode: true, style: "deepObject"},
            promptpay: {explode: true, style: "deepObject"},
            radar_options: {explode: true, style: "deepObject"},
            revolut_pay: {explode: true, style: "deepObject"},
            samsung_pay: {explode: true, style: "deepObject"},
            satispay: {explode: true, style: "deepObject"},
            sepa_debit: {explode: true, style: "deepObject"},
            sofort: {explode: true, style: "deepObject"},
            swish: {explode: true, style: "deepObject"},
            twint: {explode: true, style: "deepObject"},
            us_bank_account: {explode: true, style: "deepObject"},
            wechat_pay: {explode: true, style: "deepObject"},
            zip: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getPaymentMethodsPaymentMethod(
    p: {
      expand?: string[]
      paymentMethod: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_method> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/payment_methods/${p["paymentMethod"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postPaymentMethodsPaymentMethod(
    p: {
      paymentMethod: string
      requestBody?: {
        allow_redisplay?:
          | "always"
          | "limited"
          | "unspecified"
          | UnknownEnumStringValue
        billing_details?: {
          address?:
            | {
                city?: string
                country?: string
                line1?: string
                line2?: string
                postal_code?: string
                state?: string
              }
            | ""
            | UnknownEnumStringValue
          email?: string | "" | UnknownEnumStringValue
          name?: string | "" | UnknownEnumStringValue
          phone?: string | "" | UnknownEnumStringValue
          tax_id?: string
        }
        card?: {
          exp_month?: number
          exp_year?: number
          networks?: {
            preferred?:
              | ""
              | "cartes_bancaires"
              | "mastercard"
              | "visa"
              | UnknownEnumStringValue
          }
        }
        expand?: string[]
        link?: EmptyObject
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        pay_by_bank?: EmptyObject
        us_bank_account?: {
          account_holder_type?:
            | "company"
            | "individual"
            | UnknownEnumStringValue
          account_type?: "checking" | "savings" | UnknownEnumStringValue
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_method> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/payment_methods/${p["paymentMethod"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            billing_details: {explode: true, style: "deepObject"},
            card: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            link: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            pay_by_bank: {explode: true, style: "deepObject"},
            us_bank_account: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postPaymentMethodsPaymentMethodAttach(
    p: {
      paymentMethod: string
      requestBody: {
        customer: string
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_method> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/payment_methods/${p["paymentMethod"]}/attach`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postPaymentMethodsPaymentMethodDetach(
    p: {
      paymentMethod: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payment_method> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/payment_methods/${p["paymentMethod"]}/detach`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getPayouts(
    p: {
      arrivalDate?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      destination?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_payout[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/payouts`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      arrival_date: p["arrivalDate"],
      created: p["created"],
      destination: p["destination"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postPayouts(
    p: {
      requestBody: {
        amount: number
        currency: string
        description?: string
        destination?: string
        expand?: string[]
        metadata?: {
          [key: string]: string | undefined
        }
        method?: "instant" | "standard" | UnknownEnumStringValue
        source_type?: "bank_account" | "card" | "fpx" | UnknownEnumStringValue
        statement_descriptor?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payout> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/payouts`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getPayoutsPayout(
    p: {
      expand?: string[]
      payout: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payout> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/payouts/${p["payout"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postPayoutsPayout(
    p: {
      payout: string
      requestBody?: {
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payout> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/payouts/${p["payout"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postPayoutsPayoutCancel(
    p: {
      payout: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payout> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/payouts/${p["payout"]}/cancel`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postPayoutsPayoutReverse(
    p: {
      payout: string
      requestBody?: {
        expand?: string[]
        metadata?: {
          [key: string]: string | undefined
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_payout> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/payouts/${p["payout"]}/reverse`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getPlans(
    p: {
      active?: boolean
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      product?: string
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_plan[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/plans`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      active: p["active"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      product: p["product"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postPlans(
    p: {
      requestBody: {
        active?: boolean
        amount?: number
        amount_decimal?: string
        billing_scheme?: "per_unit" | "tiered" | UnknownEnumStringValue
        currency: string
        expand?: string[]
        id?: string
        interval: "day" | "month" | "week" | "year" | UnknownEnumStringValue
        interval_count?: number
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        meter?: string
        nickname?: string
        product?:
          | {
              active?: boolean
              id?: string
              metadata?: {
                [key: string]: string | undefined
              }
              name: string
              statement_descriptor?: string
              tax_code?: string
              unit_label?: string
            }
          | string
        tiers?: {
          flat_amount?: number
          flat_amount_decimal?: string
          unit_amount?: number
          unit_amount_decimal?: string
          up_to: "inf" | UnknownEnumStringValue | number
        }[]
        tiers_mode?: "graduated" | "volume" | UnknownEnumStringValue
        transform_usage?: {
          divide_by: number
          round: "down" | "up" | UnknownEnumStringValue
        }
        trial_period_days?: number
        usage_type?: "licensed" | "metered" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_plan> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/plans`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
      product: {explode: true, style: "deepObject"},
      tiers: {explode: true, style: "deepObject"},
      transform_usage: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deletePlansPlan(
    p: {
      plan: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_deleted_plan> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/plans/${p["plan"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async getPlansPlan(
    p: {
      expand?: string[]
      plan: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_plan> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/plans/${p["plan"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postPlansPlan(
    p: {
      plan: string
      requestBody?: {
        active?: boolean
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        nickname?: string
        product?: string
        trial_period_days?: number
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_plan> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/plans/${p["plan"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getPrices(
    p: {
      active?: boolean
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      currency?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      lookupKeys?: string[]
      product?: string
      recurring?: {
        interval?: "day" | "month" | "week" | "year" | UnknownEnumStringValue
        meter?: string
        usage_type?: "licensed" | "metered" | UnknownEnumStringValue
      }
      startingAfter?: string
      type?: "one_time" | "recurring" | UnknownEnumStringValue
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_price[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/prices`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      active: p["active"],
      created: p["created"],
      currency: p["currency"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      lookup_keys: p["lookupKeys"],
      product: p["product"],
      recurring: p["recurring"],
      starting_after: p["startingAfter"],
      type: p["type"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postPrices(
    p: {
      requestBody: {
        active?: boolean
        billing_scheme?: "per_unit" | "tiered" | UnknownEnumStringValue
        currency: string
        currency_options?: {
          [key: string]:
            | {
                custom_unit_amount?: {
                  enabled: boolean
                  maximum?: number
                  minimum?: number
                  preset?: number
                }
                tax_behavior?:
                  | "exclusive"
                  | "inclusive"
                  | "unspecified"
                  | UnknownEnumStringValue
                tiers?: {
                  flat_amount?: number
                  flat_amount_decimal?: string
                  unit_amount?: number
                  unit_amount_decimal?: string
                  up_to: "inf" | UnknownEnumStringValue | number
                }[]
                unit_amount?: number
                unit_amount_decimal?: string
              }
            | undefined
        }
        custom_unit_amount?: {
          enabled: boolean
          maximum?: number
          minimum?: number
          preset?: number
        }
        expand?: string[]
        lookup_key?: string
        metadata?: {
          [key: string]: string | undefined
        }
        nickname?: string
        product?: string
        product_data?: {
          active?: boolean
          id?: string
          metadata?: {
            [key: string]: string | undefined
          }
          name: string
          statement_descriptor?: string
          tax_code?: string
          unit_label?: string
        }
        recurring?: {
          interval: "day" | "month" | "week" | "year" | UnknownEnumStringValue
          interval_count?: number
          meter?: string
          usage_type?: "licensed" | "metered" | UnknownEnumStringValue
        }
        tax_behavior?:
          | "exclusive"
          | "inclusive"
          | "unspecified"
          | UnknownEnumStringValue
        tiers?: {
          flat_amount?: number
          flat_amount_decimal?: string
          unit_amount?: number
          unit_amount_decimal?: string
          up_to: "inf" | UnknownEnumStringValue | number
        }[]
        tiers_mode?: "graduated" | "volume" | UnknownEnumStringValue
        transfer_lookup_key?: boolean
        transform_quantity?: {
          divide_by: number
          round: "down" | "up" | UnknownEnumStringValue
        }
        unit_amount?: number
        unit_amount_decimal?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_price> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/prices`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      currency_options: {explode: true, style: "deepObject"},
      custom_unit_amount: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
      product_data: {explode: true, style: "deepObject"},
      recurring: {explode: true, style: "deepObject"},
      tiers: {explode: true, style: "deepObject"},
      transform_quantity: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getPricesSearch(
    p: {
      expand?: string[]
      limit?: number
      page?: string
      query: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_price[]
          has_more: boolean
          next_page?: string | null
          object: "search_result" | UnknownEnumStringValue
          total_count?: number
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/prices/search`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      expand: p["expand"],
      limit: p["limit"],
      page: p["page"],
      query: p["query"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getPricesPrice(
    p: {
      expand?: string[]
      price: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_price> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/prices/${p["price"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postPricesPrice(
    p: {
      price: string
      requestBody?: {
        active?: boolean
        currency_options?:
          | {
              [key: string]:
                | {
                    custom_unit_amount?: {
                      enabled: boolean
                      maximum?: number
                      minimum?: number
                      preset?: number
                    }
                    tax_behavior?:
                      | "exclusive"
                      | "inclusive"
                      | "unspecified"
                      | UnknownEnumStringValue
                    tiers?: {
                      flat_amount?: number
                      flat_amount_decimal?: string
                      unit_amount?: number
                      unit_amount_decimal?: string
                      up_to: "inf" | UnknownEnumStringValue | number
                    }[]
                    unit_amount?: number
                    unit_amount_decimal?: string
                  }
                | undefined
            }
          | ""
          | UnknownEnumStringValue
        expand?: string[]
        lookup_key?: string
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        nickname?: string
        tax_behavior?:
          | "exclusive"
          | "inclusive"
          | "unspecified"
          | UnknownEnumStringValue
        transfer_lookup_key?: boolean
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_price> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/prices/${p["price"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            currency_options: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getProducts(
    p: {
      active?: boolean
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      ids?: string[]
      limit?: number
      shippable?: boolean
      startingAfter?: string
      url?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_product[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/products`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      active: p["active"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      ids: p["ids"],
      limit: p["limit"],
      shippable: p["shippable"],
      starting_after: p["startingAfter"],
      url: p["url"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postProducts(
    p: {
      requestBody: {
        active?: boolean
        default_price_data?: {
          currency: string
          currency_options?: {
            [key: string]:
              | {
                  custom_unit_amount?: {
                    enabled: boolean
                    maximum?: number
                    minimum?: number
                    preset?: number
                  }
                  tax_behavior?:
                    | "exclusive"
                    | "inclusive"
                    | "unspecified"
                    | UnknownEnumStringValue
                  tiers?: {
                    flat_amount?: number
                    flat_amount_decimal?: string
                    unit_amount?: number
                    unit_amount_decimal?: string
                    up_to: "inf" | UnknownEnumStringValue | number
                  }[]
                  unit_amount?: number
                  unit_amount_decimal?: string
                }
              | undefined
          }
          custom_unit_amount?: {
            enabled: boolean
            maximum?: number
            minimum?: number
            preset?: number
          }
          metadata?: {
            [key: string]: string | undefined
          }
          recurring?: {
            interval: "day" | "month" | "week" | "year" | UnknownEnumStringValue
            interval_count?: number
          }
          tax_behavior?:
            | "exclusive"
            | "inclusive"
            | "unspecified"
            | UnknownEnumStringValue
          unit_amount?: number
          unit_amount_decimal?: string
        }
        description?: string
        expand?: string[]
        id?: string
        images?: string[]
        marketing_features?: {
          name: string
        }[]
        metadata?: {
          [key: string]: string | undefined
        }
        name: string
        package_dimensions?: {
          height: number
          length: number
          weight: number
          width: number
        }
        shippable?: boolean
        statement_descriptor?: string
        tax_code?: string
        unit_label?: string
        url?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_product> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/products`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      default_price_data: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
      images: {explode: true, style: "deepObject"},
      marketing_features: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
      package_dimensions: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getProductsSearch(
    p: {
      expand?: string[]
      limit?: number
      page?: string
      query: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_product[]
          has_more: boolean
          next_page?: string | null
          object: "search_result" | UnknownEnumStringValue
          total_count?: number
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/products/search`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      expand: p["expand"],
      limit: p["limit"],
      page: p["page"],
      query: p["query"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async deleteProductsId(
    p: {
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_deleted_product> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/products/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async getProductsId(
    p: {
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_product> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/products/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postProductsId(
    p: {
      id: string
      requestBody?: {
        active?: boolean
        default_price?: string
        description?: string | "" | UnknownEnumStringValue
        expand?: string[]
        images?: string[] | "" | UnknownEnumStringValue
        marketing_features?:
          | {
              name: string
            }[]
          | ""
          | UnknownEnumStringValue
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        name?: string
        package_dimensions?:
          | {
              height: number
              length: number
              weight: number
              width: number
            }
          | ""
          | UnknownEnumStringValue
        shippable?: boolean
        statement_descriptor?: string
        tax_code?: string | "" | UnknownEnumStringValue
        unit_label?: string | "" | UnknownEnumStringValue
        url?: string | "" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_product> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/products/${p["id"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            description: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            images: {explode: true, style: "deepObject"},
            marketing_features: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            package_dimensions: {explode: true, style: "deepObject"},
            tax_code: {explode: true, style: "deepObject"},
            unit_label: {explode: true, style: "deepObject"},
            url: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getProductsProductFeatures(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      product: string
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_product_feature[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/products/${p["product"]}/features`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postProductsProductFeatures(
    p: {
      product: string
      requestBody: {
        entitlement_feature: string
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_product_feature> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/products/${p["product"]}/features`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteProductsProductFeaturesId(
    p: {
      id: string
      product: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_deleted_product_feature> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/products/${p["product"]}/features/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async getProductsProductFeaturesId(
    p: {
      expand?: string[]
      id: string
      product: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_product_feature> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/products/${p["product"]}/features/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getPromotionCodes(
    p: {
      active?: boolean
      code?: string
      coupon?: string
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_promotion_code[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/promotion_codes`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      active: p["active"],
      code: p["code"],
      coupon: p["coupon"],
      created: p["created"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postPromotionCodes(
    p: {
      requestBody: {
        active?: boolean
        code?: string
        coupon: string
        customer?: string
        expand?: string[]
        expires_at?: number
        max_redemptions?: number
        metadata?: {
          [key: string]: string | undefined
        }
        restrictions?: {
          currency_options?: {
            [key: string]:
              | {
                  minimum_amount?: number
                }
              | undefined
          }
          first_time_transaction?: boolean
          minimum_amount?: number
          minimum_amount_currency?: string
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_promotion_code> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/promotion_codes`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
      restrictions: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getPromotionCodesPromotionCode(
    p: {
      expand?: string[]
      promotionCode: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_promotion_code> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/promotion_codes/${p["promotionCode"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postPromotionCodesPromotionCode(
    p: {
      promotionCode: string
      requestBody?: {
        active?: boolean
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        restrictions?: {
          currency_options?: {
            [key: string]:
              | {
                  minimum_amount?: number
                }
              | undefined
          }
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_promotion_code> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/promotion_codes/${p["promotionCode"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            restrictions: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getQuotes(
    p: {
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?:
        | "accepted"
        | "canceled"
        | "draft"
        | "open"
        | UnknownEnumStringValue
      testClock?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_quote[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/quotes`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
      test_clock: p["testClock"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postQuotes(
    p: {
      requestBody?: {
        application_fee_amount?: number | "" | UnknownEnumStringValue
        application_fee_percent?: number | "" | UnknownEnumStringValue
        automatic_tax?: {
          enabled: boolean
          liability?: {
            account?: string
            type: "account" | "self" | UnknownEnumStringValue
          }
        }
        collection_method?:
          | "charge_automatically"
          | "send_invoice"
          | UnknownEnumStringValue
        customer?: string
        default_tax_rates?: string[] | "" | UnknownEnumStringValue
        description?: string | "" | UnknownEnumStringValue
        discounts?:
          | {
              coupon?: string
              discount?: string
              promotion_code?: string
            }[]
          | ""
          | UnknownEnumStringValue
        expand?: string[]
        expires_at?: number
        footer?: string | "" | UnknownEnumStringValue
        from_quote?: {
          is_revision?: boolean
          quote: string
        }
        header?: string | "" | UnknownEnumStringValue
        invoice_settings?: {
          days_until_due?: number
          issuer?: {
            account?: string
            type: "account" | "self" | UnknownEnumStringValue
          }
        }
        line_items?: {
          discounts?:
            | {
                coupon?: string
                discount?: string
                promotion_code?: string
              }[]
            | ""
            | UnknownEnumStringValue
          price?: string
          price_data?: {
            currency: string
            product: string
            recurring?: {
              interval:
                | "day"
                | "month"
                | "week"
                | "year"
                | UnknownEnumStringValue
              interval_count?: number
            }
            tax_behavior?:
              | "exclusive"
              | "inclusive"
              | "unspecified"
              | UnknownEnumStringValue
            unit_amount?: number
            unit_amount_decimal?: string
          }
          quantity?: number
          tax_rates?: string[] | "" | UnknownEnumStringValue
        }[]
        metadata?: {
          [key: string]: string | undefined
        }
        on_behalf_of?: string | "" | UnknownEnumStringValue
        subscription_data?: {
          billing_mode?: {
            type: "classic" | "flexible" | UnknownEnumStringValue
          }
          description?: string
          effective_date?:
            | "current_period_end"
            | UnknownEnumStringValue
            | number
            | ""
          metadata?: {
            [key: string]: string | undefined
          }
          trial_period_days?: number | "" | UnknownEnumStringValue
        }
        test_clock?: string
        transfer_data?:
          | {
              amount?: number
              amount_percent?: number
              destination: string
            }
          | ""
          | UnknownEnumStringValue
      }
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_quote> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/quotes`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            application_fee_amount: {explode: true, style: "deepObject"},
            application_fee_percent: {explode: true, style: "deepObject"},
            automatic_tax: {explode: true, style: "deepObject"},
            default_tax_rates: {explode: true, style: "deepObject"},
            description: {explode: true, style: "deepObject"},
            discounts: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            footer: {explode: true, style: "deepObject"},
            from_quote: {explode: true, style: "deepObject"},
            header: {explode: true, style: "deepObject"},
            invoice_settings: {explode: true, style: "deepObject"},
            line_items: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            on_behalf_of: {explode: true, style: "deepObject"},
            subscription_data: {explode: true, style: "deepObject"},
            transfer_data: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getQuotesQuote(
    p: {
      expand?: string[]
      quote: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_quote> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/quotes/${p["quote"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postQuotesQuote(
    p: {
      quote: string
      requestBody?: {
        application_fee_amount?: number | "" | UnknownEnumStringValue
        application_fee_percent?: number | "" | UnknownEnumStringValue
        automatic_tax?: {
          enabled: boolean
          liability?: {
            account?: string
            type: "account" | "self" | UnknownEnumStringValue
          }
        }
        collection_method?:
          | "charge_automatically"
          | "send_invoice"
          | UnknownEnumStringValue
        customer?: string
        default_tax_rates?: string[] | "" | UnknownEnumStringValue
        description?: string | "" | UnknownEnumStringValue
        discounts?:
          | {
              coupon?: string
              discount?: string
              promotion_code?: string
            }[]
          | ""
          | UnknownEnumStringValue
        expand?: string[]
        expires_at?: number
        footer?: string | "" | UnknownEnumStringValue
        header?: string | "" | UnknownEnumStringValue
        invoice_settings?: {
          days_until_due?: number
          issuer?: {
            account?: string
            type: "account" | "self" | UnknownEnumStringValue
          }
        }
        line_items?: {
          discounts?:
            | {
                coupon?: string
                discount?: string
                promotion_code?: string
              }[]
            | ""
            | UnknownEnumStringValue
          id?: string
          price?: string
          price_data?: {
            currency: string
            product: string
            recurring?: {
              interval:
                | "day"
                | "month"
                | "week"
                | "year"
                | UnknownEnumStringValue
              interval_count?: number
            }
            tax_behavior?:
              | "exclusive"
              | "inclusive"
              | "unspecified"
              | UnknownEnumStringValue
            unit_amount?: number
            unit_amount_decimal?: string
          }
          quantity?: number
          tax_rates?: string[] | "" | UnknownEnumStringValue
        }[]
        metadata?: {
          [key: string]: string | undefined
        }
        on_behalf_of?: string | "" | UnknownEnumStringValue
        subscription_data?: {
          description?: string | "" | UnknownEnumStringValue
          effective_date?:
            | "current_period_end"
            | UnknownEnumStringValue
            | number
            | ""
          metadata?: {
            [key: string]: string | undefined
          }
          trial_period_days?: number | "" | UnknownEnumStringValue
        }
        transfer_data?:
          | {
              amount?: number
              amount_percent?: number
              destination: string
            }
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_quote> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/quotes/${p["quote"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            application_fee_amount: {explode: true, style: "deepObject"},
            application_fee_percent: {explode: true, style: "deepObject"},
            automatic_tax: {explode: true, style: "deepObject"},
            default_tax_rates: {explode: true, style: "deepObject"},
            description: {explode: true, style: "deepObject"},
            discounts: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            footer: {explode: true, style: "deepObject"},
            header: {explode: true, style: "deepObject"},
            invoice_settings: {explode: true, style: "deepObject"},
            line_items: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            on_behalf_of: {explode: true, style: "deepObject"},
            subscription_data: {explode: true, style: "deepObject"},
            transfer_data: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postQuotesQuoteAccept(
    p: {
      quote: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_quote> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/quotes/${p["quote"]}/accept`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postQuotesQuoteCancel(
    p: {
      quote: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_quote> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/quotes/${p["quote"]}/cancel`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getQuotesQuoteComputedUpfrontLineItems(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      quote: string
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_item[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/quotes/${p["quote"]}/computed_upfront_line_items`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postQuotesQuoteFinalize(
    p: {
      quote: string
      requestBody?: {
        expand?: string[]
        expires_at?: number
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_quote> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/quotes/${p["quote"]}/finalize`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getQuotesQuoteLineItems(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      quote: string
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_item[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/quotes/${p["quote"]}/line_items`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getQuotesQuotePdf(
    p: {
      expand?: string[]
      quote: string
    },
    basePath:
      | Server<"getQuotesQuotePdf_StripeApi">
      | string = StripeApiServers.operations.getQuotesQuotePdf().build(),
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, string> | Res<StatusCode, t_error>> {
    const url = basePath + `/v1/quotes/${p["quote"]}/pdf`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getRadarEarlyFraudWarnings(
    p: {
      charge?: string
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      paymentIntent?: string
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_radar_early_fraud_warning[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/radar/early_fraud_warnings`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      charge: p["charge"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      payment_intent: p["paymentIntent"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getRadarEarlyFraudWarningsEarlyFraudWarning(
    p: {
      earlyFraudWarning: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_radar_early_fraud_warning> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/radar/early_fraud_warnings/${p["earlyFraudWarning"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getRadarValueListItems(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      value?: string
      valueList: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_radar_value_list_item[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/radar/value_list_items`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      value: p["value"],
      value_list: p["valueList"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postRadarValueListItems(
    p: {
      requestBody: {
        expand?: string[]
        value: string
        value_list: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_radar_value_list_item> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/radar/value_list_items`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteRadarValueListItemsItem(
    p: {
      item: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_deleted_radar_value_list_item> | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/radar/value_list_items/${p["item"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async getRadarValueListItemsItem(
    p: {
      expand?: string[]
      item: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_radar_value_list_item> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/radar/value_list_items/${p["item"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getRadarValueLists(
    p: {
      alias?: string
      contains?: string
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_radar_value_list[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/radar/value_lists`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      alias: p["alias"],
      contains: p["contains"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postRadarValueLists(
    p: {
      requestBody: {
        alias: string
        expand?: string[]
        item_type?:
          | "card_bin"
          | "card_fingerprint"
          | "case_sensitive_string"
          | "country"
          | "customer_id"
          | "email"
          | "ip_address"
          | "sepa_debit_fingerprint"
          | "string"
          | "us_bank_account_fingerprint"
          | UnknownEnumStringValue
        metadata?: {
          [key: string]: string | undefined
        }
        name: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_radar_value_list> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/radar/value_lists`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteRadarValueListsValueList(
    p: {
      valueList: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_deleted_radar_value_list> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/radar/value_lists/${p["valueList"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async getRadarValueListsValueList(
    p: {
      expand?: string[]
      valueList: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_radar_value_list> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/radar/value_lists/${p["valueList"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postRadarValueListsValueList(
    p: {
      valueList: string
      requestBody?: {
        alias?: string
        expand?: string[]
        metadata?: {
          [key: string]: string | undefined
        }
        name?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_radar_value_list> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/radar/value_lists/${p["valueList"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getRefunds(
    p: {
      charge?: string
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      paymentIntent?: string
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_refund[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/refunds`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      charge: p["charge"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      payment_intent: p["paymentIntent"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postRefunds(
    p: {
      requestBody?: {
        amount?: number
        charge?: string
        currency?: string
        customer?: string
        expand?: string[]
        instructions_email?: string
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        origin?: "customer_balance" | UnknownEnumStringValue
        payment_intent?: string
        reason?:
          | "duplicate"
          | "fraudulent"
          | "requested_by_customer"
          | UnknownEnumStringValue
        refund_application_fee?: boolean
        reverse_transfer?: boolean
      }
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_refund> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/refunds`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getRefundsRefund(
    p: {
      expand?: string[]
      refund: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_refund> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/refunds/${p["refund"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postRefundsRefund(
    p: {
      refund: string
      requestBody?: {
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_refund> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/refunds/${p["refund"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postRefundsRefundCancel(
    p: {
      refund: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_refund> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/refunds/${p["refund"]}/cancel`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getReportingReportRuns(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_reporting_report_run[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/reporting/report_runs`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postReportingReportRuns(
    p: {
      requestBody: {
        expand?: string[]
        parameters?: {
          columns?: string[]
          connected_account?: string
          currency?: string
          interval_end?: number
          interval_start?: number
          payout?: string
          reporting_category?:
            | "advance"
            | "advance_funding"
            | "anticipation_repayment"
            | "charge"
            | "charge_failure"
            | "climate_order_purchase"
            | "climate_order_refund"
            | "connect_collection_transfer"
            | "connect_reserved_funds"
            | "contribution"
            | "dispute"
            | "dispute_reversal"
            | "fee"
            | "financing_paydown"
            | "financing_paydown_reversal"
            | "financing_payout"
            | "financing_payout_reversal"
            | "issuing_authorization_hold"
            | "issuing_authorization_release"
            | "issuing_dispute"
            | "issuing_transaction"
            | "network_cost"
            | "other_adjustment"
            | "partial_capture_reversal"
            | "payout"
            | "payout_reversal"
            | "platform_earning"
            | "platform_earning_refund"
            | "refund"
            | "refund_failure"
            | "risk_reserved_funds"
            | "tax"
            | "topup"
            | "topup_reversal"
            | "transfer"
            | "transfer_reversal"
            | "unreconciled_customer_funds"
            | UnknownEnumStringValue
          timezone?:
            | "Africa/Abidjan"
            | "Africa/Accra"
            | "Africa/Addis_Ababa"
            | "Africa/Algiers"
            | "Africa/Asmara"
            | "Africa/Asmera"
            | "Africa/Bamako"
            | "Africa/Bangui"
            | "Africa/Banjul"
            | "Africa/Bissau"
            | "Africa/Blantyre"
            | "Africa/Brazzaville"
            | "Africa/Bujumbura"
            | "Africa/Cairo"
            | "Africa/Casablanca"
            | "Africa/Ceuta"
            | "Africa/Conakry"
            | "Africa/Dakar"
            | "Africa/Dar_es_Salaam"
            | "Africa/Djibouti"
            | "Africa/Douala"
            | "Africa/El_Aaiun"
            | "Africa/Freetown"
            | "Africa/Gaborone"
            | "Africa/Harare"
            | "Africa/Johannesburg"
            | "Africa/Juba"
            | "Africa/Kampala"
            | "Africa/Khartoum"
            | "Africa/Kigali"
            | "Africa/Kinshasa"
            | "Africa/Lagos"
            | "Africa/Libreville"
            | "Africa/Lome"
            | "Africa/Luanda"
            | "Africa/Lubumbashi"
            | "Africa/Lusaka"
            | "Africa/Malabo"
            | "Africa/Maputo"
            | "Africa/Maseru"
            | "Africa/Mbabane"
            | "Africa/Mogadishu"
            | "Africa/Monrovia"
            | "Africa/Nairobi"
            | "Africa/Ndjamena"
            | "Africa/Niamey"
            | "Africa/Nouakchott"
            | "Africa/Ouagadougou"
            | "Africa/Porto-Novo"
            | "Africa/Sao_Tome"
            | "Africa/Timbuktu"
            | "Africa/Tripoli"
            | "Africa/Tunis"
            | "Africa/Windhoek"
            | "America/Adak"
            | "America/Anchorage"
            | "America/Anguilla"
            | "America/Antigua"
            | "America/Araguaina"
            | "America/Argentina/Buenos_Aires"
            | "America/Argentina/Catamarca"
            | "America/Argentina/ComodRivadavia"
            | "America/Argentina/Cordoba"
            | "America/Argentina/Jujuy"
            | "America/Argentina/La_Rioja"
            | "America/Argentina/Mendoza"
            | "America/Argentina/Rio_Gallegos"
            | "America/Argentina/Salta"
            | "America/Argentina/San_Juan"
            | "America/Argentina/San_Luis"
            | "America/Argentina/Tucuman"
            | "America/Argentina/Ushuaia"
            | "America/Aruba"
            | "America/Asuncion"
            | "America/Atikokan"
            | "America/Atka"
            | "America/Bahia"
            | "America/Bahia_Banderas"
            | "America/Barbados"
            | "America/Belem"
            | "America/Belize"
            | "America/Blanc-Sablon"
            | "America/Boa_Vista"
            | "America/Bogota"
            | "America/Boise"
            | "America/Buenos_Aires"
            | "America/Cambridge_Bay"
            | "America/Campo_Grande"
            | "America/Cancun"
            | "America/Caracas"
            | "America/Catamarca"
            | "America/Cayenne"
            | "America/Cayman"
            | "America/Chicago"
            | "America/Chihuahua"
            | "America/Ciudad_Juarez"
            | "America/Coral_Harbour"
            | "America/Cordoba"
            | "America/Costa_Rica"
            | "America/Creston"
            | "America/Cuiaba"
            | "America/Curacao"
            | "America/Danmarkshavn"
            | "America/Dawson"
            | "America/Dawson_Creek"
            | "America/Denver"
            | "America/Detroit"
            | "America/Dominica"
            | "America/Edmonton"
            | "America/Eirunepe"
            | "America/El_Salvador"
            | "America/Ensenada"
            | "America/Fort_Nelson"
            | "America/Fort_Wayne"
            | "America/Fortaleza"
            | "America/Glace_Bay"
            | "America/Godthab"
            | "America/Goose_Bay"
            | "America/Grand_Turk"
            | "America/Grenada"
            | "America/Guadeloupe"
            | "America/Guatemala"
            | "America/Guayaquil"
            | "America/Guyana"
            | "America/Halifax"
            | "America/Havana"
            | "America/Hermosillo"
            | "America/Indiana/Indianapolis"
            | "America/Indiana/Knox"
            | "America/Indiana/Marengo"
            | "America/Indiana/Petersburg"
            | "America/Indiana/Tell_City"
            | "America/Indiana/Vevay"
            | "America/Indiana/Vincennes"
            | "America/Indiana/Winamac"
            | "America/Indianapolis"
            | "America/Inuvik"
            | "America/Iqaluit"
            | "America/Jamaica"
            | "America/Jujuy"
            | "America/Juneau"
            | "America/Kentucky/Louisville"
            | "America/Kentucky/Monticello"
            | "America/Knox_IN"
            | "America/Kralendijk"
            | "America/La_Paz"
            | "America/Lima"
            | "America/Los_Angeles"
            | "America/Louisville"
            | "America/Lower_Princes"
            | "America/Maceio"
            | "America/Managua"
            | "America/Manaus"
            | "America/Marigot"
            | "America/Martinique"
            | "America/Matamoros"
            | "America/Mazatlan"
            | "America/Mendoza"
            | "America/Menominee"
            | "America/Merida"
            | "America/Metlakatla"
            | "America/Mexico_City"
            | "America/Miquelon"
            | "America/Moncton"
            | "America/Monterrey"
            | "America/Montevideo"
            | "America/Montreal"
            | "America/Montserrat"
            | "America/Nassau"
            | "America/New_York"
            | "America/Nipigon"
            | "America/Nome"
            | "America/Noronha"
            | "America/North_Dakota/Beulah"
            | "America/North_Dakota/Center"
            | "America/North_Dakota/New_Salem"
            | "America/Nuuk"
            | "America/Ojinaga"
            | "America/Panama"
            | "America/Pangnirtung"
            | "America/Paramaribo"
            | "America/Phoenix"
            | "America/Port-au-Prince"
            | "America/Port_of_Spain"
            | "America/Porto_Acre"
            | "America/Porto_Velho"
            | "America/Puerto_Rico"
            | "America/Punta_Arenas"
            | "America/Rainy_River"
            | "America/Rankin_Inlet"
            | "America/Recife"
            | "America/Regina"
            | "America/Resolute"
            | "America/Rio_Branco"
            | "America/Rosario"
            | "America/Santa_Isabel"
            | "America/Santarem"
            | "America/Santiago"
            | "America/Santo_Domingo"
            | "America/Sao_Paulo"
            | "America/Scoresbysund"
            | "America/Shiprock"
            | "America/Sitka"
            | "America/St_Barthelemy"
            | "America/St_Johns"
            | "America/St_Kitts"
            | "America/St_Lucia"
            | "America/St_Thomas"
            | "America/St_Vincent"
            | "America/Swift_Current"
            | "America/Tegucigalpa"
            | "America/Thule"
            | "America/Thunder_Bay"
            | "America/Tijuana"
            | "America/Toronto"
            | "America/Tortola"
            | "America/Vancouver"
            | "America/Virgin"
            | "America/Whitehorse"
            | "America/Winnipeg"
            | "America/Yakutat"
            | "America/Yellowknife"
            | "Antarctica/Casey"
            | "Antarctica/Davis"
            | "Antarctica/DumontDUrville"
            | "Antarctica/Macquarie"
            | "Antarctica/Mawson"
            | "Antarctica/McMurdo"
            | "Antarctica/Palmer"
            | "Antarctica/Rothera"
            | "Antarctica/South_Pole"
            | "Antarctica/Syowa"
            | "Antarctica/Troll"
            | "Antarctica/Vostok"
            | "Arctic/Longyearbyen"
            | "Asia/Aden"
            | "Asia/Almaty"
            | "Asia/Amman"
            | "Asia/Anadyr"
            | "Asia/Aqtau"
            | "Asia/Aqtobe"
            | "Asia/Ashgabat"
            | "Asia/Ashkhabad"
            | "Asia/Atyrau"
            | "Asia/Baghdad"
            | "Asia/Bahrain"
            | "Asia/Baku"
            | "Asia/Bangkok"
            | "Asia/Barnaul"
            | "Asia/Beirut"
            | "Asia/Bishkek"
            | "Asia/Brunei"
            | "Asia/Calcutta"
            | "Asia/Chita"
            | "Asia/Choibalsan"
            | "Asia/Chongqing"
            | "Asia/Chungking"
            | "Asia/Colombo"
            | "Asia/Dacca"
            | "Asia/Damascus"
            | "Asia/Dhaka"
            | "Asia/Dili"
            | "Asia/Dubai"
            | "Asia/Dushanbe"
            | "Asia/Famagusta"
            | "Asia/Gaza"
            | "Asia/Harbin"
            | "Asia/Hebron"
            | "Asia/Ho_Chi_Minh"
            | "Asia/Hong_Kong"
            | "Asia/Hovd"
            | "Asia/Irkutsk"
            | "Asia/Istanbul"
            | "Asia/Jakarta"
            | "Asia/Jayapura"
            | "Asia/Jerusalem"
            | "Asia/Kabul"
            | "Asia/Kamchatka"
            | "Asia/Karachi"
            | "Asia/Kashgar"
            | "Asia/Kathmandu"
            | "Asia/Katmandu"
            | "Asia/Khandyga"
            | "Asia/Kolkata"
            | "Asia/Krasnoyarsk"
            | "Asia/Kuala_Lumpur"
            | "Asia/Kuching"
            | "Asia/Kuwait"
            | "Asia/Macao"
            | "Asia/Macau"
            | "Asia/Magadan"
            | "Asia/Makassar"
            | "Asia/Manila"
            | "Asia/Muscat"
            | "Asia/Nicosia"
            | "Asia/Novokuznetsk"
            | "Asia/Novosibirsk"
            | "Asia/Omsk"
            | "Asia/Oral"
            | "Asia/Phnom_Penh"
            | "Asia/Pontianak"
            | "Asia/Pyongyang"
            | "Asia/Qatar"
            | "Asia/Qostanay"
            | "Asia/Qyzylorda"
            | "Asia/Rangoon"
            | "Asia/Riyadh"
            | "Asia/Saigon"
            | "Asia/Sakhalin"
            | "Asia/Samarkand"
            | "Asia/Seoul"
            | "Asia/Shanghai"
            | "Asia/Singapore"
            | "Asia/Srednekolymsk"
            | "Asia/Taipei"
            | "Asia/Tashkent"
            | "Asia/Tbilisi"
            | "Asia/Tehran"
            | "Asia/Tel_Aviv"
            | "Asia/Thimbu"
            | "Asia/Thimphu"
            | "Asia/Tokyo"
            | "Asia/Tomsk"
            | "Asia/Ujung_Pandang"
            | "Asia/Ulaanbaatar"
            | "Asia/Ulan_Bator"
            | "Asia/Urumqi"
            | "Asia/Ust-Nera"
            | "Asia/Vientiane"
            | "Asia/Vladivostok"
            | "Asia/Yakutsk"
            | "Asia/Yangon"
            | "Asia/Yekaterinburg"
            | "Asia/Yerevan"
            | "Atlantic/Azores"
            | "Atlantic/Bermuda"
            | "Atlantic/Canary"
            | "Atlantic/Cape_Verde"
            | "Atlantic/Faeroe"
            | "Atlantic/Faroe"
            | "Atlantic/Jan_Mayen"
            | "Atlantic/Madeira"
            | "Atlantic/Reykjavik"
            | "Atlantic/South_Georgia"
            | "Atlantic/St_Helena"
            | "Atlantic/Stanley"
            | "Australia/ACT"
            | "Australia/Adelaide"
            | "Australia/Brisbane"
            | "Australia/Broken_Hill"
            | "Australia/Canberra"
            | "Australia/Currie"
            | "Australia/Darwin"
            | "Australia/Eucla"
            | "Australia/Hobart"
            | "Australia/LHI"
            | "Australia/Lindeman"
            | "Australia/Lord_Howe"
            | "Australia/Melbourne"
            | "Australia/NSW"
            | "Australia/North"
            | "Australia/Perth"
            | "Australia/Queensland"
            | "Australia/South"
            | "Australia/Sydney"
            | "Australia/Tasmania"
            | "Australia/Victoria"
            | "Australia/West"
            | "Australia/Yancowinna"
            | "Brazil/Acre"
            | "Brazil/DeNoronha"
            | "Brazil/East"
            | "Brazil/West"
            | "CET"
            | "CST6CDT"
            | "Canada/Atlantic"
            | "Canada/Central"
            | "Canada/Eastern"
            | "Canada/Mountain"
            | "Canada/Newfoundland"
            | "Canada/Pacific"
            | "Canada/Saskatchewan"
            | "Canada/Yukon"
            | "Chile/Continental"
            | "Chile/EasterIsland"
            | "Cuba"
            | "EET"
            | "EST"
            | "EST5EDT"
            | "Egypt"
            | "Eire"
            | "Etc/GMT"
            | "Etc/GMT+0"
            | "Etc/GMT+1"
            | "Etc/GMT+10"
            | "Etc/GMT+11"
            | "Etc/GMT+12"
            | "Etc/GMT+2"
            | "Etc/GMT+3"
            | "Etc/GMT+4"
            | "Etc/GMT+5"
            | "Etc/GMT+6"
            | "Etc/GMT+7"
            | "Etc/GMT+8"
            | "Etc/GMT+9"
            | "Etc/GMT-0"
            | "Etc/GMT-1"
            | "Etc/GMT-10"
            | "Etc/GMT-11"
            | "Etc/GMT-12"
            | "Etc/GMT-13"
            | "Etc/GMT-14"
            | "Etc/GMT-2"
            | "Etc/GMT-3"
            | "Etc/GMT-4"
            | "Etc/GMT-5"
            | "Etc/GMT-6"
            | "Etc/GMT-7"
            | "Etc/GMT-8"
            | "Etc/GMT-9"
            | "Etc/GMT0"
            | "Etc/Greenwich"
            | "Etc/UCT"
            | "Etc/UTC"
            | "Etc/Universal"
            | "Etc/Zulu"
            | "Europe/Amsterdam"
            | "Europe/Andorra"
            | "Europe/Astrakhan"
            | "Europe/Athens"
            | "Europe/Belfast"
            | "Europe/Belgrade"
            | "Europe/Berlin"
            | "Europe/Bratislava"
            | "Europe/Brussels"
            | "Europe/Bucharest"
            | "Europe/Budapest"
            | "Europe/Busingen"
            | "Europe/Chisinau"
            | "Europe/Copenhagen"
            | "Europe/Dublin"
            | "Europe/Gibraltar"
            | "Europe/Guernsey"
            | "Europe/Helsinki"
            | "Europe/Isle_of_Man"
            | "Europe/Istanbul"
            | "Europe/Jersey"
            | "Europe/Kaliningrad"
            | "Europe/Kiev"
            | "Europe/Kirov"
            | "Europe/Kyiv"
            | "Europe/Lisbon"
            | "Europe/Ljubljana"
            | "Europe/London"
            | "Europe/Luxembourg"
            | "Europe/Madrid"
            | "Europe/Malta"
            | "Europe/Mariehamn"
            | "Europe/Minsk"
            | "Europe/Monaco"
            | "Europe/Moscow"
            | "Europe/Nicosia"
            | "Europe/Oslo"
            | "Europe/Paris"
            | "Europe/Podgorica"
            | "Europe/Prague"
            | "Europe/Riga"
            | "Europe/Rome"
            | "Europe/Samara"
            | "Europe/San_Marino"
            | "Europe/Sarajevo"
            | "Europe/Saratov"
            | "Europe/Simferopol"
            | "Europe/Skopje"
            | "Europe/Sofia"
            | "Europe/Stockholm"
            | "Europe/Tallinn"
            | "Europe/Tirane"
            | "Europe/Tiraspol"
            | "Europe/Ulyanovsk"
            | "Europe/Uzhgorod"
            | "Europe/Vaduz"
            | "Europe/Vatican"
            | "Europe/Vienna"
            | "Europe/Vilnius"
            | "Europe/Volgograd"
            | "Europe/Warsaw"
            | "Europe/Zagreb"
            | "Europe/Zaporozhye"
            | "Europe/Zurich"
            | "Factory"
            | "GB"
            | "GB-Eire"
            | "GMT"
            | "GMT+0"
            | "GMT-0"
            | "GMT0"
            | "Greenwich"
            | "HST"
            | "Hongkong"
            | "Iceland"
            | "Indian/Antananarivo"
            | "Indian/Chagos"
            | "Indian/Christmas"
            | "Indian/Cocos"
            | "Indian/Comoro"
            | "Indian/Kerguelen"
            | "Indian/Mahe"
            | "Indian/Maldives"
            | "Indian/Mauritius"
            | "Indian/Mayotte"
            | "Indian/Reunion"
            | "Iran"
            | "Israel"
            | "Jamaica"
            | "Japan"
            | "Kwajalein"
            | "Libya"
            | "MET"
            | "MST"
            | "MST7MDT"
            | "Mexico/BajaNorte"
            | "Mexico/BajaSur"
            | "Mexico/General"
            | "NZ"
            | "NZ-CHAT"
            | "Navajo"
            | "PRC"
            | "PST8PDT"
            | "Pacific/Apia"
            | "Pacific/Auckland"
            | "Pacific/Bougainville"
            | "Pacific/Chatham"
            | "Pacific/Chuuk"
            | "Pacific/Easter"
            | "Pacific/Efate"
            | "Pacific/Enderbury"
            | "Pacific/Fakaofo"
            | "Pacific/Fiji"
            | "Pacific/Funafuti"
            | "Pacific/Galapagos"
            | "Pacific/Gambier"
            | "Pacific/Guadalcanal"
            | "Pacific/Guam"
            | "Pacific/Honolulu"
            | "Pacific/Johnston"
            | "Pacific/Kanton"
            | "Pacific/Kiritimati"
            | "Pacific/Kosrae"
            | "Pacific/Kwajalein"
            | "Pacific/Majuro"
            | "Pacific/Marquesas"
            | "Pacific/Midway"
            | "Pacific/Nauru"
            | "Pacific/Niue"
            | "Pacific/Norfolk"
            | "Pacific/Noumea"
            | "Pacific/Pago_Pago"
            | "Pacific/Palau"
            | "Pacific/Pitcairn"
            | "Pacific/Pohnpei"
            | "Pacific/Ponape"
            | "Pacific/Port_Moresby"
            | "Pacific/Rarotonga"
            | "Pacific/Saipan"
            | "Pacific/Samoa"
            | "Pacific/Tahiti"
            | "Pacific/Tarawa"
            | "Pacific/Tongatapu"
            | "Pacific/Truk"
            | "Pacific/Wake"
            | "Pacific/Wallis"
            | "Pacific/Yap"
            | "Poland"
            | "Portugal"
            | "ROC"
            | "ROK"
            | "Singapore"
            | "Turkey"
            | "UCT"
            | "US/Alaska"
            | "US/Aleutian"
            | "US/Arizona"
            | "US/Central"
            | "US/East-Indiana"
            | "US/Eastern"
            | "US/Hawaii"
            | "US/Indiana-Starke"
            | "US/Michigan"
            | "US/Mountain"
            | "US/Pacific"
            | "US/Pacific-New"
            | "US/Samoa"
            | "UTC"
            | "Universal"
            | "W-SU"
            | "WET"
            | "Zulu"
            | UnknownEnumStringValue
        }
        report_type: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_reporting_report_run> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/reporting/report_runs`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      parameters: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getReportingReportRunsReportRun(
    p: {
      expand?: string[]
      reportRun: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_reporting_report_run> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/reporting/report_runs/${p["reportRun"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getReportingReportTypes(
    p: {
      expand?: string[]
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_reporting_report_type[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/reporting/report_types`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getReportingReportTypesReportType(
    p: {
      expand?: string[]
      reportType: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_reporting_report_type> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/reporting/report_types/${p["reportType"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getReviews(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_review[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/reviews`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getReviewsReview(
    p: {
      expand?: string[]
      review: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_review> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/reviews/${p["review"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postReviewsReviewApprove(
    p: {
      review: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_review> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/reviews/${p["review"]}/approve`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getSetupAttempts(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      setupIntent: string
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_setup_attempt[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/setup_attempts`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      setup_intent: p["setupIntent"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getSetupIntents(
    p: {
      attachToSelf?: boolean
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      paymentMethod?: string
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_setup_intent[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/setup_intents`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      attach_to_self: p["attachToSelf"],
      created: p["created"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      payment_method: p["paymentMethod"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postSetupIntents(
    p: {
      requestBody?: {
        attach_to_self?: boolean
        automatic_payment_methods?: {
          allow_redirects?: "always" | "never" | UnknownEnumStringValue
          enabled: boolean
        }
        confirm?: boolean
        confirmation_token?: string
        customer?: string
        description?: string
        expand?: string[]
        flow_directions?: ("inbound" | "outbound" | UnknownEnumStringValue)[]
        mandate_data?:
          | {
              customer_acceptance: {
                accepted_at?: number
                offline?: EmptyObject
                online?: {
                  ip_address: string
                  user_agent: string
                }
                type: "offline" | "online" | UnknownEnumStringValue
              }
            }
          | ""
          | UnknownEnumStringValue
        metadata?: {
          [key: string]: string | undefined
        }
        on_behalf_of?: string
        payment_method?: string
        payment_method_configuration?: string
        payment_method_data?: {
          acss_debit?: {
            account_number: string
            institution_number: string
            transit_number: string
          }
          affirm?: EmptyObject
          afterpay_clearpay?: EmptyObject
          alipay?: EmptyObject
          allow_redisplay?:
            | "always"
            | "limited"
            | "unspecified"
            | UnknownEnumStringValue
          alma?: EmptyObject
          amazon_pay?: EmptyObject
          au_becs_debit?: {
            account_number: string
            bsb_number: string
          }
          bacs_debit?: {
            account_number?: string
            sort_code?: string
          }
          bancontact?: EmptyObject
          billie?: EmptyObject
          billing_details?: {
            address?:
              | {
                  city?: string
                  country?: string
                  line1?: string
                  line2?: string
                  postal_code?: string
                  state?: string
                }
              | ""
              | UnknownEnumStringValue
            email?: string | "" | UnknownEnumStringValue
            name?: string | "" | UnknownEnumStringValue
            phone?: string | "" | UnknownEnumStringValue
            tax_id?: string
          }
          blik?: EmptyObject
          boleto?: {
            tax_id: string
          }
          cashapp?: EmptyObject
          crypto?: EmptyObject
          customer_balance?: EmptyObject
          eps?: {
            bank?:
              | "arzte_und_apotheker_bank"
              | "austrian_anadi_bank_ag"
              | "bank_austria"
              | "bankhaus_carl_spangler"
              | "bankhaus_schelhammer_und_schattera_ag"
              | "bawag_psk_ag"
              | "bks_bank_ag"
              | "brull_kallmus_bank_ag"
              | "btv_vier_lander_bank"
              | "capital_bank_grawe_gruppe_ag"
              | "deutsche_bank_ag"
              | "dolomitenbank"
              | "easybank_ag"
              | "erste_bank_und_sparkassen"
              | "hypo_alpeadriabank_international_ag"
              | "hypo_bank_burgenland_aktiengesellschaft"
              | "hypo_noe_lb_fur_niederosterreich_u_wien"
              | "hypo_oberosterreich_salzburg_steiermark"
              | "hypo_tirol_bank_ag"
              | "hypo_vorarlberg_bank_ag"
              | "marchfelder_bank"
              | "oberbank_ag"
              | "raiffeisen_bankengruppe_osterreich"
              | "schoellerbank_ag"
              | "sparda_bank_wien"
              | "volksbank_gruppe"
              | "volkskreditbank_ag"
              | "vr_bank_braunau"
              | UnknownEnumStringValue
          }
          fpx?: {
            bank:
              | "affin_bank"
              | "agrobank"
              | "alliance_bank"
              | "ambank"
              | "bank_islam"
              | "bank_muamalat"
              | "bank_of_china"
              | "bank_rakyat"
              | "bsn"
              | "cimb"
              | "deutsche_bank"
              | "hong_leong_bank"
              | "hsbc"
              | "kfh"
              | "maybank2e"
              | "maybank2u"
              | "ocbc"
              | "pb_enterprise"
              | "public_bank"
              | "rhb"
              | "standard_chartered"
              | "uob"
              | UnknownEnumStringValue
          }
          giropay?: EmptyObject
          grabpay?: EmptyObject
          ideal?: {
            bank?:
              | "abn_amro"
              | "asn_bank"
              | "bunq"
              | "buut"
              | "handelsbanken"
              | "ing"
              | "knab"
              | "moneyou"
              | "n26"
              | "nn"
              | "rabobank"
              | "regiobank"
              | "revolut"
              | "sns_bank"
              | "triodos_bank"
              | "van_lanschot"
              | "yoursafe"
              | UnknownEnumStringValue
          }
          interac_present?: EmptyObject
          kakao_pay?: EmptyObject
          klarna?: {
            dob?: {
              day: number
              month: number
              year: number
            }
          }
          konbini?: EmptyObject
          kr_card?: EmptyObject
          link?: EmptyObject
          metadata?: {
            [key: string]: string | undefined
          }
          mobilepay?: EmptyObject
          multibanco?: EmptyObject
          naver_pay?: {
            funding?: "card" | "points" | UnknownEnumStringValue
          }
          nz_bank_account?: {
            account_holder_name?: string
            account_number: string
            bank_code: string
            branch_code: string
            reference?: string
            suffix: string
          }
          oxxo?: EmptyObject
          p24?: {
            bank?:
              | "alior_bank"
              | "bank_millennium"
              | "bank_nowy_bfg_sa"
              | "bank_pekao_sa"
              | "banki_spbdzielcze"
              | "blik"
              | "bnp_paribas"
              | "boz"
              | "citi_handlowy"
              | "credit_agricole"
              | "envelobank"
              | "etransfer_pocztowy24"
              | "getin_bank"
              | "ideabank"
              | "ing"
              | "inteligo"
              | "mbank_mtransfer"
              | "nest_przelew"
              | "noble_pay"
              | "pbac_z_ipko"
              | "plus_bank"
              | "santander_przelew24"
              | "tmobile_usbugi_bankowe"
              | "toyota_bank"
              | "velobank"
              | "volkswagen_bank"
              | UnknownEnumStringValue
          }
          pay_by_bank?: EmptyObject
          payco?: EmptyObject
          paynow?: EmptyObject
          paypal?: EmptyObject
          pix?: EmptyObject
          promptpay?: EmptyObject
          radar_options?: {
            session?: string
          }
          revolut_pay?: EmptyObject
          samsung_pay?: EmptyObject
          satispay?: EmptyObject
          sepa_debit?: {
            iban: string
          }
          sofort?: {
            country:
              | "AT"
              | "BE"
              | "DE"
              | "ES"
              | "IT"
              | "NL"
              | UnknownEnumStringValue
          }
          swish?: EmptyObject
          twint?: EmptyObject
          type:
            | "acss_debit"
            | "affirm"
            | "afterpay_clearpay"
            | "alipay"
            | "alma"
            | "amazon_pay"
            | "au_becs_debit"
            | "bacs_debit"
            | "bancontact"
            | "billie"
            | "blik"
            | "boleto"
            | "cashapp"
            | "crypto"
            | "customer_balance"
            | "eps"
            | "fpx"
            | "giropay"
            | "grabpay"
            | "ideal"
            | "kakao_pay"
            | "klarna"
            | "konbini"
            | "kr_card"
            | "link"
            | "mobilepay"
            | "multibanco"
            | "naver_pay"
            | "nz_bank_account"
            | "oxxo"
            | "p24"
            | "pay_by_bank"
            | "payco"
            | "paynow"
            | "paypal"
            | "pix"
            | "promptpay"
            | "revolut_pay"
            | "samsung_pay"
            | "satispay"
            | "sepa_debit"
            | "sofort"
            | "swish"
            | "twint"
            | "us_bank_account"
            | "wechat_pay"
            | "zip"
            | UnknownEnumStringValue
          us_bank_account?: {
            account_holder_type?:
              | "company"
              | "individual"
              | UnknownEnumStringValue
            account_number?: string
            account_type?: "checking" | "savings" | UnknownEnumStringValue
            financial_connections_account?: string
            routing_number?: string
          }
          wechat_pay?: EmptyObject
          zip?: EmptyObject
        }
        payment_method_options?: {
          acss_debit?: {
            currency?: "cad" | "usd" | UnknownEnumStringValue
            mandate_options?: {
              custom_mandate_url?: string | "" | UnknownEnumStringValue
              default_for?: (
                | "invoice"
                | "subscription"
                | UnknownEnumStringValue
              )[]
              interval_description?: string
              payment_schedule?:
                | "combined"
                | "interval"
                | "sporadic"
                | UnknownEnumStringValue
              transaction_type?:
                | "business"
                | "personal"
                | UnknownEnumStringValue
            }
            verification_method?:
              | "automatic"
              | "instant"
              | "microdeposits"
              | UnknownEnumStringValue
          }
          amazon_pay?: EmptyObject
          bacs_debit?: {
            mandate_options?: {
              reference_prefix?: string | "" | UnknownEnumStringValue
            }
          }
          card?: {
            mandate_options?: {
              amount: number
              amount_type: "fixed" | "maximum" | UnknownEnumStringValue
              currency: string
              description?: string
              end_date?: number
              interval:
                | "day"
                | "month"
                | "sporadic"
                | "week"
                | "year"
                | UnknownEnumStringValue
              interval_count?: number
              reference: string
              start_date: number
              supported_types?: ("india" | UnknownEnumStringValue)[]
            }
            network?:
              | "amex"
              | "cartes_bancaires"
              | "diners"
              | "discover"
              | "eftpos_au"
              | "girocard"
              | "interac"
              | "jcb"
              | "link"
              | "mastercard"
              | "unionpay"
              | "unknown"
              | "visa"
              | UnknownEnumStringValue
            request_three_d_secure?:
              | "any"
              | "automatic"
              | "challenge"
              | UnknownEnumStringValue
            three_d_secure?: {
              ares_trans_status?:
                | "A"
                | "C"
                | "I"
                | "N"
                | "R"
                | "U"
                | "Y"
                | UnknownEnumStringValue
              cryptogram?: string
              electronic_commerce_indicator?:
                | "01"
                | "02"
                | "05"
                | "06"
                | "07"
                | UnknownEnumStringValue
              network_options?: {
                cartes_bancaires?: {
                  cb_avalgo:
                    | "0"
                    | "1"
                    | "2"
                    | "3"
                    | "4"
                    | "A"
                    | UnknownEnumStringValue
                  cb_exemption?: string
                  cb_score?: number
                }
              }
              requestor_challenge_indicator?: string
              transaction_id?: string
              version?: "1.0.2" | "2.1.0" | "2.2.0" | UnknownEnumStringValue
            }
          }
          card_present?: EmptyObject
          klarna?: {
            currency?: string
            on_demand?: {
              average_amount?: number
              maximum_amount?: number
              minimum_amount?: number
              purchase_interval?:
                | "day"
                | "month"
                | "week"
                | "year"
                | UnknownEnumStringValue
              purchase_interval_count?: number
            }
            preferred_locale?:
              | "cs-CZ"
              | "da-DK"
              | "de-AT"
              | "de-CH"
              | "de-DE"
              | "el-GR"
              | "en-AT"
              | "en-AU"
              | "en-BE"
              | "en-CA"
              | "en-CH"
              | "en-CZ"
              | "en-DE"
              | "en-DK"
              | "en-ES"
              | "en-FI"
              | "en-FR"
              | "en-GB"
              | "en-GR"
              | "en-IE"
              | "en-IT"
              | "en-NL"
              | "en-NO"
              | "en-NZ"
              | "en-PL"
              | "en-PT"
              | "en-RO"
              | "en-SE"
              | "en-US"
              | "es-ES"
              | "es-US"
              | "fi-FI"
              | "fr-BE"
              | "fr-CA"
              | "fr-CH"
              | "fr-FR"
              | "it-CH"
              | "it-IT"
              | "nb-NO"
              | "nl-BE"
              | "nl-NL"
              | "pl-PL"
              | "pt-PT"
              | "ro-RO"
              | "sv-FI"
              | "sv-SE"
              | UnknownEnumStringValue
            subscriptions?:
              | {
                  interval:
                    | "day"
                    | "month"
                    | "week"
                    | "year"
                    | UnknownEnumStringValue
                  interval_count?: number
                  name?: string
                  next_billing: {
                    amount: number
                    date: string
                  }
                  reference: string
                }[]
              | ""
              | UnknownEnumStringValue
          }
          link?: EmptyObject
          paypal?: {
            billing_agreement_id?: string
          }
          sepa_debit?: {
            mandate_options?: {
              reference_prefix?: string | "" | UnknownEnumStringValue
            }
          }
          us_bank_account?: {
            financial_connections?: {
              filters?: {
                account_subcategories?: (
                  | "checking"
                  | "savings"
                  | UnknownEnumStringValue
                )[]
              }
              permissions?: (
                | "balances"
                | "ownership"
                | "payment_method"
                | "transactions"
                | UnknownEnumStringValue
              )[]
              prefetch?: (
                | "balances"
                | "ownership"
                | "transactions"
                | UnknownEnumStringValue
              )[]
              return_url?: string
            }
            mandate_options?: {
              collection_method?: "" | "paper" | UnknownEnumStringValue
            }
            networks?: {
              requested?: (
                | "ach"
                | "us_domestic_wire"
                | UnknownEnumStringValue
              )[]
            }
            verification_method?:
              | "automatic"
              | "instant"
              | "microdeposits"
              | UnknownEnumStringValue
          }
        }
        payment_method_types?: string[]
        return_url?: string
        single_use?: {
          amount: number
          currency: string
        }
        usage?: "off_session" | "on_session" | UnknownEnumStringValue
        use_stripe_sdk?: boolean
      }
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_setup_intent> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/setup_intents`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            automatic_payment_methods: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            flow_directions: {explode: true, style: "deepObject"},
            mandate_data: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            payment_method_data: {explode: true, style: "deepObject"},
            payment_method_options: {explode: true, style: "deepObject"},
            payment_method_types: {explode: true, style: "deepObject"},
            single_use: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getSetupIntentsIntent(
    p: {
      clientSecret?: string
      expand?: string[]
      intent: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_setup_intent> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/setup_intents/${p["intent"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      client_secret: p["clientSecret"],
      expand: p["expand"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postSetupIntentsIntent(
    p: {
      intent: string
      requestBody?: {
        attach_to_self?: boolean
        customer?: string
        description?: string
        expand?: string[]
        flow_directions?: ("inbound" | "outbound" | UnknownEnumStringValue)[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        payment_method?: string
        payment_method_configuration?: string
        payment_method_data?: {
          acss_debit?: {
            account_number: string
            institution_number: string
            transit_number: string
          }
          affirm?: EmptyObject
          afterpay_clearpay?: EmptyObject
          alipay?: EmptyObject
          allow_redisplay?:
            | "always"
            | "limited"
            | "unspecified"
            | UnknownEnumStringValue
          alma?: EmptyObject
          amazon_pay?: EmptyObject
          au_becs_debit?: {
            account_number: string
            bsb_number: string
          }
          bacs_debit?: {
            account_number?: string
            sort_code?: string
          }
          bancontact?: EmptyObject
          billie?: EmptyObject
          billing_details?: {
            address?:
              | {
                  city?: string
                  country?: string
                  line1?: string
                  line2?: string
                  postal_code?: string
                  state?: string
                }
              | ""
              | UnknownEnumStringValue
            email?: string | "" | UnknownEnumStringValue
            name?: string | "" | UnknownEnumStringValue
            phone?: string | "" | UnknownEnumStringValue
            tax_id?: string
          }
          blik?: EmptyObject
          boleto?: {
            tax_id: string
          }
          cashapp?: EmptyObject
          crypto?: EmptyObject
          customer_balance?: EmptyObject
          eps?: {
            bank?:
              | "arzte_und_apotheker_bank"
              | "austrian_anadi_bank_ag"
              | "bank_austria"
              | "bankhaus_carl_spangler"
              | "bankhaus_schelhammer_und_schattera_ag"
              | "bawag_psk_ag"
              | "bks_bank_ag"
              | "brull_kallmus_bank_ag"
              | "btv_vier_lander_bank"
              | "capital_bank_grawe_gruppe_ag"
              | "deutsche_bank_ag"
              | "dolomitenbank"
              | "easybank_ag"
              | "erste_bank_und_sparkassen"
              | "hypo_alpeadriabank_international_ag"
              | "hypo_bank_burgenland_aktiengesellschaft"
              | "hypo_noe_lb_fur_niederosterreich_u_wien"
              | "hypo_oberosterreich_salzburg_steiermark"
              | "hypo_tirol_bank_ag"
              | "hypo_vorarlberg_bank_ag"
              | "marchfelder_bank"
              | "oberbank_ag"
              | "raiffeisen_bankengruppe_osterreich"
              | "schoellerbank_ag"
              | "sparda_bank_wien"
              | "volksbank_gruppe"
              | "volkskreditbank_ag"
              | "vr_bank_braunau"
              | UnknownEnumStringValue
          }
          fpx?: {
            bank:
              | "affin_bank"
              | "agrobank"
              | "alliance_bank"
              | "ambank"
              | "bank_islam"
              | "bank_muamalat"
              | "bank_of_china"
              | "bank_rakyat"
              | "bsn"
              | "cimb"
              | "deutsche_bank"
              | "hong_leong_bank"
              | "hsbc"
              | "kfh"
              | "maybank2e"
              | "maybank2u"
              | "ocbc"
              | "pb_enterprise"
              | "public_bank"
              | "rhb"
              | "standard_chartered"
              | "uob"
              | UnknownEnumStringValue
          }
          giropay?: EmptyObject
          grabpay?: EmptyObject
          ideal?: {
            bank?:
              | "abn_amro"
              | "asn_bank"
              | "bunq"
              | "buut"
              | "handelsbanken"
              | "ing"
              | "knab"
              | "moneyou"
              | "n26"
              | "nn"
              | "rabobank"
              | "regiobank"
              | "revolut"
              | "sns_bank"
              | "triodos_bank"
              | "van_lanschot"
              | "yoursafe"
              | UnknownEnumStringValue
          }
          interac_present?: EmptyObject
          kakao_pay?: EmptyObject
          klarna?: {
            dob?: {
              day: number
              month: number
              year: number
            }
          }
          konbini?: EmptyObject
          kr_card?: EmptyObject
          link?: EmptyObject
          metadata?: {
            [key: string]: string | undefined
          }
          mobilepay?: EmptyObject
          multibanco?: EmptyObject
          naver_pay?: {
            funding?: "card" | "points" | UnknownEnumStringValue
          }
          nz_bank_account?: {
            account_holder_name?: string
            account_number: string
            bank_code: string
            branch_code: string
            reference?: string
            suffix: string
          }
          oxxo?: EmptyObject
          p24?: {
            bank?:
              | "alior_bank"
              | "bank_millennium"
              | "bank_nowy_bfg_sa"
              | "bank_pekao_sa"
              | "banki_spbdzielcze"
              | "blik"
              | "bnp_paribas"
              | "boz"
              | "citi_handlowy"
              | "credit_agricole"
              | "envelobank"
              | "etransfer_pocztowy24"
              | "getin_bank"
              | "ideabank"
              | "ing"
              | "inteligo"
              | "mbank_mtransfer"
              | "nest_przelew"
              | "noble_pay"
              | "pbac_z_ipko"
              | "plus_bank"
              | "santander_przelew24"
              | "tmobile_usbugi_bankowe"
              | "toyota_bank"
              | "velobank"
              | "volkswagen_bank"
              | UnknownEnumStringValue
          }
          pay_by_bank?: EmptyObject
          payco?: EmptyObject
          paynow?: EmptyObject
          paypal?: EmptyObject
          pix?: EmptyObject
          promptpay?: EmptyObject
          radar_options?: {
            session?: string
          }
          revolut_pay?: EmptyObject
          samsung_pay?: EmptyObject
          satispay?: EmptyObject
          sepa_debit?: {
            iban: string
          }
          sofort?: {
            country:
              | "AT"
              | "BE"
              | "DE"
              | "ES"
              | "IT"
              | "NL"
              | UnknownEnumStringValue
          }
          swish?: EmptyObject
          twint?: EmptyObject
          type:
            | "acss_debit"
            | "affirm"
            | "afterpay_clearpay"
            | "alipay"
            | "alma"
            | "amazon_pay"
            | "au_becs_debit"
            | "bacs_debit"
            | "bancontact"
            | "billie"
            | "blik"
            | "boleto"
            | "cashapp"
            | "crypto"
            | "customer_balance"
            | "eps"
            | "fpx"
            | "giropay"
            | "grabpay"
            | "ideal"
            | "kakao_pay"
            | "klarna"
            | "konbini"
            | "kr_card"
            | "link"
            | "mobilepay"
            | "multibanco"
            | "naver_pay"
            | "nz_bank_account"
            | "oxxo"
            | "p24"
            | "pay_by_bank"
            | "payco"
            | "paynow"
            | "paypal"
            | "pix"
            | "promptpay"
            | "revolut_pay"
            | "samsung_pay"
            | "satispay"
            | "sepa_debit"
            | "sofort"
            | "swish"
            | "twint"
            | "us_bank_account"
            | "wechat_pay"
            | "zip"
            | UnknownEnumStringValue
          us_bank_account?: {
            account_holder_type?:
              | "company"
              | "individual"
              | UnknownEnumStringValue
            account_number?: string
            account_type?: "checking" | "savings" | UnknownEnumStringValue
            financial_connections_account?: string
            routing_number?: string
          }
          wechat_pay?: EmptyObject
          zip?: EmptyObject
        }
        payment_method_options?: {
          acss_debit?: {
            currency?: "cad" | "usd" | UnknownEnumStringValue
            mandate_options?: {
              custom_mandate_url?: string | "" | UnknownEnumStringValue
              default_for?: (
                | "invoice"
                | "subscription"
                | UnknownEnumStringValue
              )[]
              interval_description?: string
              payment_schedule?:
                | "combined"
                | "interval"
                | "sporadic"
                | UnknownEnumStringValue
              transaction_type?:
                | "business"
                | "personal"
                | UnknownEnumStringValue
            }
            verification_method?:
              | "automatic"
              | "instant"
              | "microdeposits"
              | UnknownEnumStringValue
          }
          amazon_pay?: EmptyObject
          bacs_debit?: {
            mandate_options?: {
              reference_prefix?: string | "" | UnknownEnumStringValue
            }
          }
          card?: {
            mandate_options?: {
              amount: number
              amount_type: "fixed" | "maximum" | UnknownEnumStringValue
              currency: string
              description?: string
              end_date?: number
              interval:
                | "day"
                | "month"
                | "sporadic"
                | "week"
                | "year"
                | UnknownEnumStringValue
              interval_count?: number
              reference: string
              start_date: number
              supported_types?: ("india" | UnknownEnumStringValue)[]
            }
            network?:
              | "amex"
              | "cartes_bancaires"
              | "diners"
              | "discover"
              | "eftpos_au"
              | "girocard"
              | "interac"
              | "jcb"
              | "link"
              | "mastercard"
              | "unionpay"
              | "unknown"
              | "visa"
              | UnknownEnumStringValue
            request_three_d_secure?:
              | "any"
              | "automatic"
              | "challenge"
              | UnknownEnumStringValue
            three_d_secure?: {
              ares_trans_status?:
                | "A"
                | "C"
                | "I"
                | "N"
                | "R"
                | "U"
                | "Y"
                | UnknownEnumStringValue
              cryptogram?: string
              electronic_commerce_indicator?:
                | "01"
                | "02"
                | "05"
                | "06"
                | "07"
                | UnknownEnumStringValue
              network_options?: {
                cartes_bancaires?: {
                  cb_avalgo:
                    | "0"
                    | "1"
                    | "2"
                    | "3"
                    | "4"
                    | "A"
                    | UnknownEnumStringValue
                  cb_exemption?: string
                  cb_score?: number
                }
              }
              requestor_challenge_indicator?: string
              transaction_id?: string
              version?: "1.0.2" | "2.1.0" | "2.2.0" | UnknownEnumStringValue
            }
          }
          card_present?: EmptyObject
          klarna?: {
            currency?: string
            on_demand?: {
              average_amount?: number
              maximum_amount?: number
              minimum_amount?: number
              purchase_interval?:
                | "day"
                | "month"
                | "week"
                | "year"
                | UnknownEnumStringValue
              purchase_interval_count?: number
            }
            preferred_locale?:
              | "cs-CZ"
              | "da-DK"
              | "de-AT"
              | "de-CH"
              | "de-DE"
              | "el-GR"
              | "en-AT"
              | "en-AU"
              | "en-BE"
              | "en-CA"
              | "en-CH"
              | "en-CZ"
              | "en-DE"
              | "en-DK"
              | "en-ES"
              | "en-FI"
              | "en-FR"
              | "en-GB"
              | "en-GR"
              | "en-IE"
              | "en-IT"
              | "en-NL"
              | "en-NO"
              | "en-NZ"
              | "en-PL"
              | "en-PT"
              | "en-RO"
              | "en-SE"
              | "en-US"
              | "es-ES"
              | "es-US"
              | "fi-FI"
              | "fr-BE"
              | "fr-CA"
              | "fr-CH"
              | "fr-FR"
              | "it-CH"
              | "it-IT"
              | "nb-NO"
              | "nl-BE"
              | "nl-NL"
              | "pl-PL"
              | "pt-PT"
              | "ro-RO"
              | "sv-FI"
              | "sv-SE"
              | UnknownEnumStringValue
            subscriptions?:
              | {
                  interval:
                    | "day"
                    | "month"
                    | "week"
                    | "year"
                    | UnknownEnumStringValue
                  interval_count?: number
                  name?: string
                  next_billing: {
                    amount: number
                    date: string
                  }
                  reference: string
                }[]
              | ""
              | UnknownEnumStringValue
          }
          link?: EmptyObject
          paypal?: {
            billing_agreement_id?: string
          }
          sepa_debit?: {
            mandate_options?: {
              reference_prefix?: string | "" | UnknownEnumStringValue
            }
          }
          us_bank_account?: {
            financial_connections?: {
              filters?: {
                account_subcategories?: (
                  | "checking"
                  | "savings"
                  | UnknownEnumStringValue
                )[]
              }
              permissions?: (
                | "balances"
                | "ownership"
                | "payment_method"
                | "transactions"
                | UnknownEnumStringValue
              )[]
              prefetch?: (
                | "balances"
                | "ownership"
                | "transactions"
                | UnknownEnumStringValue
              )[]
              return_url?: string
            }
            mandate_options?: {
              collection_method?: "" | "paper" | UnknownEnumStringValue
            }
            networks?: {
              requested?: (
                | "ach"
                | "us_domestic_wire"
                | UnknownEnumStringValue
              )[]
            }
            verification_method?:
              | "automatic"
              | "instant"
              | "microdeposits"
              | UnknownEnumStringValue
          }
        }
        payment_method_types?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_setup_intent> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/setup_intents/${p["intent"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            flow_directions: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            payment_method_data: {explode: true, style: "deepObject"},
            payment_method_options: {explode: true, style: "deepObject"},
            payment_method_types: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postSetupIntentsIntentCancel(
    p: {
      intent: string
      requestBody?: {
        cancellation_reason?:
          | "abandoned"
          | "duplicate"
          | "requested_by_customer"
          | UnknownEnumStringValue
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_setup_intent> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/setup_intents/${p["intent"]}/cancel`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postSetupIntentsIntentConfirm(
    p: {
      intent: string
      requestBody?: {
        client_secret?: string
        confirmation_token?: string
        expand?: string[]
        mandate_data?:
          | {
              customer_acceptance: {
                accepted_at?: number
                offline?: EmptyObject
                online?: {
                  ip_address: string
                  user_agent: string
                }
                type: "offline" | "online" | UnknownEnumStringValue
              }
            }
          | ""
          | UnknownEnumStringValue
          | {
              customer_acceptance: {
                online: {
                  ip_address?: string
                  user_agent?: string
                }
                type: "online" | UnknownEnumStringValue
              }
            }
        payment_method?: string
        payment_method_data?: {
          acss_debit?: {
            account_number: string
            institution_number: string
            transit_number: string
          }
          affirm?: EmptyObject
          afterpay_clearpay?: EmptyObject
          alipay?: EmptyObject
          allow_redisplay?:
            | "always"
            | "limited"
            | "unspecified"
            | UnknownEnumStringValue
          alma?: EmptyObject
          amazon_pay?: EmptyObject
          au_becs_debit?: {
            account_number: string
            bsb_number: string
          }
          bacs_debit?: {
            account_number?: string
            sort_code?: string
          }
          bancontact?: EmptyObject
          billie?: EmptyObject
          billing_details?: {
            address?:
              | {
                  city?: string
                  country?: string
                  line1?: string
                  line2?: string
                  postal_code?: string
                  state?: string
                }
              | ""
              | UnknownEnumStringValue
            email?: string | "" | UnknownEnumStringValue
            name?: string | "" | UnknownEnumStringValue
            phone?: string | "" | UnknownEnumStringValue
            tax_id?: string
          }
          blik?: EmptyObject
          boleto?: {
            tax_id: string
          }
          cashapp?: EmptyObject
          crypto?: EmptyObject
          customer_balance?: EmptyObject
          eps?: {
            bank?:
              | "arzte_und_apotheker_bank"
              | "austrian_anadi_bank_ag"
              | "bank_austria"
              | "bankhaus_carl_spangler"
              | "bankhaus_schelhammer_und_schattera_ag"
              | "bawag_psk_ag"
              | "bks_bank_ag"
              | "brull_kallmus_bank_ag"
              | "btv_vier_lander_bank"
              | "capital_bank_grawe_gruppe_ag"
              | "deutsche_bank_ag"
              | "dolomitenbank"
              | "easybank_ag"
              | "erste_bank_und_sparkassen"
              | "hypo_alpeadriabank_international_ag"
              | "hypo_bank_burgenland_aktiengesellschaft"
              | "hypo_noe_lb_fur_niederosterreich_u_wien"
              | "hypo_oberosterreich_salzburg_steiermark"
              | "hypo_tirol_bank_ag"
              | "hypo_vorarlberg_bank_ag"
              | "marchfelder_bank"
              | "oberbank_ag"
              | "raiffeisen_bankengruppe_osterreich"
              | "schoellerbank_ag"
              | "sparda_bank_wien"
              | "volksbank_gruppe"
              | "volkskreditbank_ag"
              | "vr_bank_braunau"
              | UnknownEnumStringValue
          }
          fpx?: {
            bank:
              | "affin_bank"
              | "agrobank"
              | "alliance_bank"
              | "ambank"
              | "bank_islam"
              | "bank_muamalat"
              | "bank_of_china"
              | "bank_rakyat"
              | "bsn"
              | "cimb"
              | "deutsche_bank"
              | "hong_leong_bank"
              | "hsbc"
              | "kfh"
              | "maybank2e"
              | "maybank2u"
              | "ocbc"
              | "pb_enterprise"
              | "public_bank"
              | "rhb"
              | "standard_chartered"
              | "uob"
              | UnknownEnumStringValue
          }
          giropay?: EmptyObject
          grabpay?: EmptyObject
          ideal?: {
            bank?:
              | "abn_amro"
              | "asn_bank"
              | "bunq"
              | "buut"
              | "handelsbanken"
              | "ing"
              | "knab"
              | "moneyou"
              | "n26"
              | "nn"
              | "rabobank"
              | "regiobank"
              | "revolut"
              | "sns_bank"
              | "triodos_bank"
              | "van_lanschot"
              | "yoursafe"
              | UnknownEnumStringValue
          }
          interac_present?: EmptyObject
          kakao_pay?: EmptyObject
          klarna?: {
            dob?: {
              day: number
              month: number
              year: number
            }
          }
          konbini?: EmptyObject
          kr_card?: EmptyObject
          link?: EmptyObject
          metadata?: {
            [key: string]: string | undefined
          }
          mobilepay?: EmptyObject
          multibanco?: EmptyObject
          naver_pay?: {
            funding?: "card" | "points" | UnknownEnumStringValue
          }
          nz_bank_account?: {
            account_holder_name?: string
            account_number: string
            bank_code: string
            branch_code: string
            reference?: string
            suffix: string
          }
          oxxo?: EmptyObject
          p24?: {
            bank?:
              | "alior_bank"
              | "bank_millennium"
              | "bank_nowy_bfg_sa"
              | "bank_pekao_sa"
              | "banki_spbdzielcze"
              | "blik"
              | "bnp_paribas"
              | "boz"
              | "citi_handlowy"
              | "credit_agricole"
              | "envelobank"
              | "etransfer_pocztowy24"
              | "getin_bank"
              | "ideabank"
              | "ing"
              | "inteligo"
              | "mbank_mtransfer"
              | "nest_przelew"
              | "noble_pay"
              | "pbac_z_ipko"
              | "plus_bank"
              | "santander_przelew24"
              | "tmobile_usbugi_bankowe"
              | "toyota_bank"
              | "velobank"
              | "volkswagen_bank"
              | UnknownEnumStringValue
          }
          pay_by_bank?: EmptyObject
          payco?: EmptyObject
          paynow?: EmptyObject
          paypal?: EmptyObject
          pix?: EmptyObject
          promptpay?: EmptyObject
          radar_options?: {
            session?: string
          }
          revolut_pay?: EmptyObject
          samsung_pay?: EmptyObject
          satispay?: EmptyObject
          sepa_debit?: {
            iban: string
          }
          sofort?: {
            country:
              | "AT"
              | "BE"
              | "DE"
              | "ES"
              | "IT"
              | "NL"
              | UnknownEnumStringValue
          }
          swish?: EmptyObject
          twint?: EmptyObject
          type:
            | "acss_debit"
            | "affirm"
            | "afterpay_clearpay"
            | "alipay"
            | "alma"
            | "amazon_pay"
            | "au_becs_debit"
            | "bacs_debit"
            | "bancontact"
            | "billie"
            | "blik"
            | "boleto"
            | "cashapp"
            | "crypto"
            | "customer_balance"
            | "eps"
            | "fpx"
            | "giropay"
            | "grabpay"
            | "ideal"
            | "kakao_pay"
            | "klarna"
            | "konbini"
            | "kr_card"
            | "link"
            | "mobilepay"
            | "multibanco"
            | "naver_pay"
            | "nz_bank_account"
            | "oxxo"
            | "p24"
            | "pay_by_bank"
            | "payco"
            | "paynow"
            | "paypal"
            | "pix"
            | "promptpay"
            | "revolut_pay"
            | "samsung_pay"
            | "satispay"
            | "sepa_debit"
            | "sofort"
            | "swish"
            | "twint"
            | "us_bank_account"
            | "wechat_pay"
            | "zip"
            | UnknownEnumStringValue
          us_bank_account?: {
            account_holder_type?:
              | "company"
              | "individual"
              | UnknownEnumStringValue
            account_number?: string
            account_type?: "checking" | "savings" | UnknownEnumStringValue
            financial_connections_account?: string
            routing_number?: string
          }
          wechat_pay?: EmptyObject
          zip?: EmptyObject
        }
        payment_method_options?: {
          acss_debit?: {
            currency?: "cad" | "usd" | UnknownEnumStringValue
            mandate_options?: {
              custom_mandate_url?: string | "" | UnknownEnumStringValue
              default_for?: (
                | "invoice"
                | "subscription"
                | UnknownEnumStringValue
              )[]
              interval_description?: string
              payment_schedule?:
                | "combined"
                | "interval"
                | "sporadic"
                | UnknownEnumStringValue
              transaction_type?:
                | "business"
                | "personal"
                | UnknownEnumStringValue
            }
            verification_method?:
              | "automatic"
              | "instant"
              | "microdeposits"
              | UnknownEnumStringValue
          }
          amazon_pay?: EmptyObject
          bacs_debit?: {
            mandate_options?: {
              reference_prefix?: string | "" | UnknownEnumStringValue
            }
          }
          card?: {
            mandate_options?: {
              amount: number
              amount_type: "fixed" | "maximum" | UnknownEnumStringValue
              currency: string
              description?: string
              end_date?: number
              interval:
                | "day"
                | "month"
                | "sporadic"
                | "week"
                | "year"
                | UnknownEnumStringValue
              interval_count?: number
              reference: string
              start_date: number
              supported_types?: ("india" | UnknownEnumStringValue)[]
            }
            network?:
              | "amex"
              | "cartes_bancaires"
              | "diners"
              | "discover"
              | "eftpos_au"
              | "girocard"
              | "interac"
              | "jcb"
              | "link"
              | "mastercard"
              | "unionpay"
              | "unknown"
              | "visa"
              | UnknownEnumStringValue
            request_three_d_secure?:
              | "any"
              | "automatic"
              | "challenge"
              | UnknownEnumStringValue
            three_d_secure?: {
              ares_trans_status?:
                | "A"
                | "C"
                | "I"
                | "N"
                | "R"
                | "U"
                | "Y"
                | UnknownEnumStringValue
              cryptogram?: string
              electronic_commerce_indicator?:
                | "01"
                | "02"
                | "05"
                | "06"
                | "07"
                | UnknownEnumStringValue
              network_options?: {
                cartes_bancaires?: {
                  cb_avalgo:
                    | "0"
                    | "1"
                    | "2"
                    | "3"
                    | "4"
                    | "A"
                    | UnknownEnumStringValue
                  cb_exemption?: string
                  cb_score?: number
                }
              }
              requestor_challenge_indicator?: string
              transaction_id?: string
              version?: "1.0.2" | "2.1.0" | "2.2.0" | UnknownEnumStringValue
            }
          }
          card_present?: EmptyObject
          klarna?: {
            currency?: string
            on_demand?: {
              average_amount?: number
              maximum_amount?: number
              minimum_amount?: number
              purchase_interval?:
                | "day"
                | "month"
                | "week"
                | "year"
                | UnknownEnumStringValue
              purchase_interval_count?: number
            }
            preferred_locale?:
              | "cs-CZ"
              | "da-DK"
              | "de-AT"
              | "de-CH"
              | "de-DE"
              | "el-GR"
              | "en-AT"
              | "en-AU"
              | "en-BE"
              | "en-CA"
              | "en-CH"
              | "en-CZ"
              | "en-DE"
              | "en-DK"
              | "en-ES"
              | "en-FI"
              | "en-FR"
              | "en-GB"
              | "en-GR"
              | "en-IE"
              | "en-IT"
              | "en-NL"
              | "en-NO"
              | "en-NZ"
              | "en-PL"
              | "en-PT"
              | "en-RO"
              | "en-SE"
              | "en-US"
              | "es-ES"
              | "es-US"
              | "fi-FI"
              | "fr-BE"
              | "fr-CA"
              | "fr-CH"
              | "fr-FR"
              | "it-CH"
              | "it-IT"
              | "nb-NO"
              | "nl-BE"
              | "nl-NL"
              | "pl-PL"
              | "pt-PT"
              | "ro-RO"
              | "sv-FI"
              | "sv-SE"
              | UnknownEnumStringValue
            subscriptions?:
              | {
                  interval:
                    | "day"
                    | "month"
                    | "week"
                    | "year"
                    | UnknownEnumStringValue
                  interval_count?: number
                  name?: string
                  next_billing: {
                    amount: number
                    date: string
                  }
                  reference: string
                }[]
              | ""
              | UnknownEnumStringValue
          }
          link?: EmptyObject
          paypal?: {
            billing_agreement_id?: string
          }
          sepa_debit?: {
            mandate_options?: {
              reference_prefix?: string | "" | UnknownEnumStringValue
            }
          }
          us_bank_account?: {
            financial_connections?: {
              filters?: {
                account_subcategories?: (
                  | "checking"
                  | "savings"
                  | UnknownEnumStringValue
                )[]
              }
              permissions?: (
                | "balances"
                | "ownership"
                | "payment_method"
                | "transactions"
                | UnknownEnumStringValue
              )[]
              prefetch?: (
                | "balances"
                | "ownership"
                | "transactions"
                | UnknownEnumStringValue
              )[]
              return_url?: string
            }
            mandate_options?: {
              collection_method?: "" | "paper" | UnknownEnumStringValue
            }
            networks?: {
              requested?: (
                | "ach"
                | "us_domestic_wire"
                | UnknownEnumStringValue
              )[]
            }
            verification_method?:
              | "automatic"
              | "instant"
              | "microdeposits"
              | UnknownEnumStringValue
          }
        }
        return_url?: string
        use_stripe_sdk?: boolean
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_setup_intent> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/setup_intents/${p["intent"]}/confirm`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            mandate_data: {explode: true, style: "deepObject"},
            payment_method_data: {explode: true, style: "deepObject"},
            payment_method_options: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postSetupIntentsIntentVerifyMicrodeposits(
    p: {
      intent: string
      requestBody?: {
        amounts?: number[]
        client_secret?: string
        descriptor_code?: string
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_setup_intent> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/setup_intents/${p["intent"]}/verify_microdeposits`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            amounts: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getShippingRates(
    p: {
      active?: boolean
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      currency?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_shipping_rate[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/shipping_rates`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      active: p["active"],
      created: p["created"],
      currency: p["currency"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postShippingRates(
    p: {
      requestBody: {
        delivery_estimate?: {
          maximum?: {
            unit:
              | "business_day"
              | "day"
              | "hour"
              | "month"
              | "week"
              | UnknownEnumStringValue
            value: number
          }
          minimum?: {
            unit:
              | "business_day"
              | "day"
              | "hour"
              | "month"
              | "week"
              | UnknownEnumStringValue
            value: number
          }
        }
        display_name: string
        expand?: string[]
        fixed_amount?: {
          amount: number
          currency: string
          currency_options?: {
            [key: string]:
              | {
                  amount: number
                  tax_behavior?:
                    | "exclusive"
                    | "inclusive"
                    | "unspecified"
                    | UnknownEnumStringValue
                }
              | undefined
          }
        }
        metadata?: {
          [key: string]: string | undefined
        }
        tax_behavior?:
          | "exclusive"
          | "inclusive"
          | "unspecified"
          | UnknownEnumStringValue
        tax_code?: string
        type?: "fixed_amount" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_shipping_rate> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/shipping_rates`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      delivery_estimate: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
      fixed_amount: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getShippingRatesShippingRateToken(
    p: {
      expand?: string[]
      shippingRateToken: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_shipping_rate> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/shipping_rates/${p["shippingRateToken"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postShippingRatesShippingRateToken(
    p: {
      shippingRateToken: string
      requestBody?: {
        active?: boolean
        expand?: string[]
        fixed_amount?: {
          currency_options?: {
            [key: string]:
              | {
                  amount?: number
                  tax_behavior?:
                    | "exclusive"
                    | "inclusive"
                    | "unspecified"
                    | UnknownEnumStringValue
                }
              | undefined
          }
        }
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        tax_behavior?:
          | "exclusive"
          | "inclusive"
          | "unspecified"
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_shipping_rate> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/shipping_rates/${p["shippingRateToken"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            fixed_amount: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postSigmaSavedQueriesId(
    p: {
      id: string
      requestBody?: {
        expand?: string[]
        name?: string
        sql?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_sigma_sigma_api_query> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/sigma/saved_queries/${p["id"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getSigmaScheduledQueryRuns(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_scheduled_query_run[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/sigma/scheduled_query_runs`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getSigmaScheduledQueryRunsScheduledQueryRun(
    p: {
      expand?: string[]
      scheduledQueryRun: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_scheduled_query_run> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/sigma/scheduled_query_runs/${p["scheduledQueryRun"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postSources(
    p: {
      requestBody?: {
        amount?: number
        currency?: string
        customer?: string
        expand?: string[]
        flow?:
          | "code_verification"
          | "none"
          | "receiver"
          | "redirect"
          | UnknownEnumStringValue
        mandate?: {
          acceptance?: {
            date?: number
            ip?: string
            offline?: {
              contact_email: string
            }
            online?: {
              date?: number
              ip?: string
              user_agent?: string
            }
            status:
              | "accepted"
              | "pending"
              | "refused"
              | "revoked"
              | UnknownEnumStringValue
            type?: "offline" | "online" | UnknownEnumStringValue
            user_agent?: string
          }
          amount?: number | "" | UnknownEnumStringValue
          currency?: string
          interval?:
            | "one_time"
            | "scheduled"
            | "variable"
            | UnknownEnumStringValue
          notification_method?:
            | "deprecated_none"
            | "email"
            | "manual"
            | "none"
            | "stripe_email"
            | UnknownEnumStringValue
        }
        metadata?: {
          [key: string]: string | undefined
        }
        original_source?: string
        owner?: {
          address?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
          }
          email?: string
          name?: string
          phone?: string
        }
        receiver?: {
          refund_attributes_method?:
            | "email"
            | "manual"
            | "none"
            | UnknownEnumStringValue
        }
        redirect?: {
          return_url: string
        }
        source_order?: {
          items?: {
            amount?: number
            currency?: string
            description?: string
            parent?: string
            quantity?: number
            type?:
              | "discount"
              | "shipping"
              | "sku"
              | "tax"
              | UnknownEnumStringValue
          }[]
          shipping?: {
            address: {
              city?: string
              country?: string
              line1: string
              line2?: string
              postal_code?: string
              state?: string
            }
            carrier?: string
            name?: string
            phone?: string
            tracking_number?: string
          }
        }
        statement_descriptor?: string
        token?: string
        type?: string
        usage?: "reusable" | "single_use" | UnknownEnumStringValue
      }
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_source> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/sources`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            mandate: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            owner: {explode: true, style: "deepObject"},
            receiver: {explode: true, style: "deepObject"},
            redirect: {explode: true, style: "deepObject"},
            source_order: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getSourcesSource(
    p: {
      clientSecret?: string
      expand?: string[]
      source: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_source> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/sources/${p["source"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      client_secret: p["clientSecret"],
      expand: p["expand"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postSourcesSource(
    p: {
      source: string
      requestBody?: {
        amount?: number
        expand?: string[]
        mandate?: {
          acceptance?: {
            date?: number
            ip?: string
            offline?: {
              contact_email: string
            }
            online?: {
              date?: number
              ip?: string
              user_agent?: string
            }
            status:
              | "accepted"
              | "pending"
              | "refused"
              | "revoked"
              | UnknownEnumStringValue
            type?: "offline" | "online" | UnknownEnumStringValue
            user_agent?: string
          }
          amount?: number | "" | UnknownEnumStringValue
          currency?: string
          interval?:
            | "one_time"
            | "scheduled"
            | "variable"
            | UnknownEnumStringValue
          notification_method?:
            | "deprecated_none"
            | "email"
            | "manual"
            | "none"
            | "stripe_email"
            | UnknownEnumStringValue
        }
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        owner?: {
          address?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
          }
          email?: string
          name?: string
          phone?: string
        }
        source_order?: {
          items?: {
            amount?: number
            currency?: string
            description?: string
            parent?: string
            quantity?: number
            type?:
              | "discount"
              | "shipping"
              | "sku"
              | "tax"
              | UnknownEnumStringValue
          }[]
          shipping?: {
            address: {
              city?: string
              country?: string
              line1: string
              line2?: string
              postal_code?: string
              state?: string
            }
            carrier?: string
            name?: string
            phone?: string
            tracking_number?: string
          }
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_source> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/sources/${p["source"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            mandate: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            owner: {explode: true, style: "deepObject"},
            source_order: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getSourcesSourceMandateNotificationsMandateNotification(
    p: {
      expand?: string[]
      mandateNotification: string
      source: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_source_mandate_notification> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/sources/${p["source"]}/mandate_notifications/${p["mandateNotification"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getSourcesSourceSourceTransactions(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      source: string
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_source_transaction[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/sources/${p["source"]}/source_transactions`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getSourcesSourceSourceTransactionsSourceTransaction(
    p: {
      expand?: string[]
      source: string
      sourceTransaction: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_source_transaction> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/sources/${p["source"]}/source_transactions/${p["sourceTransaction"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postSourcesSourceVerify(
    p: {
      source: string
      requestBody: {
        expand?: string[]
        values: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_source> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/sources/${p["source"]}/verify`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      values: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getSubscriptionItems(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      subscription: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_subscription_item[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/subscription_items`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      subscription: p["subscription"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postSubscriptionItems(
    p: {
      requestBody: {
        billing_thresholds?:
          | {
              usage_gte: number
            }
          | ""
          | UnknownEnumStringValue
        discounts?:
          | {
              coupon?: string
              discount?: string
              promotion_code?: string
            }[]
          | ""
          | UnknownEnumStringValue
        expand?: string[]
        metadata?: {
          [key: string]: string | undefined
        }
        payment_behavior?:
          | "allow_incomplete"
          | "default_incomplete"
          | "error_if_incomplete"
          | "pending_if_incomplete"
          | UnknownEnumStringValue
        price?: string
        price_data?: {
          currency: string
          product: string
          recurring: {
            interval: "day" | "month" | "week" | "year" | UnknownEnumStringValue
            interval_count?: number
          }
          tax_behavior?:
            | "exclusive"
            | "inclusive"
            | "unspecified"
            | UnknownEnumStringValue
          unit_amount?: number
          unit_amount_decimal?: string
        }
        proration_behavior?:
          | "always_invoice"
          | "create_prorations"
          | "none"
          | UnknownEnumStringValue
        proration_date?: number
        quantity?: number
        subscription: string
        tax_rates?: string[] | "" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_subscription_item> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/subscription_items`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      billing_thresholds: {explode: true, style: "deepObject"},
      discounts: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
      price_data: {explode: true, style: "deepObject"},
      tax_rates: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteSubscriptionItemsItem(
    p: {
      item: string
      requestBody?: {
        clear_usage?: boolean
        proration_behavior?:
          | "always_invoice"
          | "create_prorations"
          | "none"
          | UnknownEnumStringValue
        proration_date?: number
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_deleted_subscription_item> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/subscription_items/${p["item"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {})
        : null

    return this._fetch(url, {method: "DELETE", body, ...opts, headers}, timeout)
  }

  async getSubscriptionItemsItem(
    p: {
      expand?: string[]
      item: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_subscription_item> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/subscription_items/${p["item"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postSubscriptionItemsItem(
    p: {
      item: string
      requestBody?: {
        billing_thresholds?:
          | {
              usage_gte: number
            }
          | ""
          | UnknownEnumStringValue
        discounts?:
          | {
              coupon?: string
              discount?: string
              promotion_code?: string
            }[]
          | ""
          | UnknownEnumStringValue
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        off_session?: boolean
        payment_behavior?:
          | "allow_incomplete"
          | "default_incomplete"
          | "error_if_incomplete"
          | "pending_if_incomplete"
          | UnknownEnumStringValue
        price?: string
        price_data?: {
          currency: string
          product: string
          recurring: {
            interval: "day" | "month" | "week" | "year" | UnknownEnumStringValue
            interval_count?: number
          }
          tax_behavior?:
            | "exclusive"
            | "inclusive"
            | "unspecified"
            | UnknownEnumStringValue
          unit_amount?: number
          unit_amount_decimal?: string
        }
        proration_behavior?:
          | "always_invoice"
          | "create_prorations"
          | "none"
          | UnknownEnumStringValue
        proration_date?: number
        quantity?: number
        tax_rates?: string[] | "" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_subscription_item> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/subscription_items/${p["item"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            billing_thresholds: {explode: true, style: "deepObject"},
            discounts: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            price_data: {explode: true, style: "deepObject"},
            tax_rates: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getSubscriptionSchedules(
    p: {
      canceledAt?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      completedAt?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      releasedAt?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      scheduled?: boolean
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_subscription_schedule[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/subscription_schedules`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      canceled_at: p["canceledAt"],
      completed_at: p["completedAt"],
      created: p["created"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      released_at: p["releasedAt"],
      scheduled: p["scheduled"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postSubscriptionSchedules(
    p: {
      requestBody?: {
        billing_mode?: {
          type: "classic" | "flexible" | UnknownEnumStringValue
        }
        customer?: string
        default_settings?: {
          application_fee_percent?: number
          automatic_tax?: {
            enabled: boolean
            liability?: {
              account?: string
              type: "account" | "self" | UnknownEnumStringValue
            }
          }
          billing_cycle_anchor?:
            | "automatic"
            | "phase_start"
            | UnknownEnumStringValue
          billing_thresholds?:
            | {
                amount_gte?: number
                reset_billing_cycle_anchor?: boolean
              }
            | ""
            | UnknownEnumStringValue
          collection_method?:
            | "charge_automatically"
            | "send_invoice"
            | UnknownEnumStringValue
          default_payment_method?: string
          description?: string | "" | UnknownEnumStringValue
          invoice_settings?: {
            account_tax_ids?: string[] | "" | UnknownEnumStringValue
            days_until_due?: number
            issuer?: {
              account?: string
              type: "account" | "self" | UnknownEnumStringValue
            }
          }
          on_behalf_of?: string | "" | UnknownEnumStringValue
          transfer_data?:
            | {
                amount_percent?: number
                destination: string
              }
            | ""
            | UnknownEnumStringValue
        }
        end_behavior?:
          | "cancel"
          | "none"
          | "release"
          | "renew"
          | UnknownEnumStringValue
        expand?: string[]
        from_subscription?: string
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        phases?: {
          add_invoice_items?: {
            discounts?: {
              coupon?: string
              discount?: string
              promotion_code?: string
            }[]
            price?: string
            price_data?: {
              currency: string
              product: string
              tax_behavior?:
                | "exclusive"
                | "inclusive"
                | "unspecified"
                | UnknownEnumStringValue
              unit_amount?: number
              unit_amount_decimal?: string
            }
            quantity?: number
            tax_rates?: string[] | "" | UnknownEnumStringValue
          }[]
          application_fee_percent?: number
          automatic_tax?: {
            enabled: boolean
            liability?: {
              account?: string
              type: "account" | "self" | UnknownEnumStringValue
            }
          }
          billing_cycle_anchor?:
            | "automatic"
            | "phase_start"
            | UnknownEnumStringValue
          billing_thresholds?:
            | {
                amount_gte?: number
                reset_billing_cycle_anchor?: boolean
              }
            | ""
            | UnknownEnumStringValue
          collection_method?:
            | "charge_automatically"
            | "send_invoice"
            | UnknownEnumStringValue
          currency?: string
          default_payment_method?: string
          default_tax_rates?: string[] | "" | UnknownEnumStringValue
          description?: string | "" | UnknownEnumStringValue
          discounts?:
            | {
                coupon?: string
                discount?: string
                promotion_code?: string
              }[]
            | ""
            | UnknownEnumStringValue
          end_date?: number
          invoice_settings?: {
            account_tax_ids?: string[] | "" | UnknownEnumStringValue
            days_until_due?: number
            issuer?: {
              account?: string
              type: "account" | "self" | UnknownEnumStringValue
            }
          }
          items: {
            billing_thresholds?:
              | {
                  usage_gte: number
                }
              | ""
              | UnknownEnumStringValue
            discounts?:
              | {
                  coupon?: string
                  discount?: string
                  promotion_code?: string
                }[]
              | ""
              | UnknownEnumStringValue
            metadata?: {
              [key: string]: string | undefined
            }
            price?: string
            price_data?: {
              currency: string
              product: string
              recurring: {
                interval:
                  | "day"
                  | "month"
                  | "week"
                  | "year"
                  | UnknownEnumStringValue
                interval_count?: number
              }
              tax_behavior?:
                | "exclusive"
                | "inclusive"
                | "unspecified"
                | UnknownEnumStringValue
              unit_amount?: number
              unit_amount_decimal?: string
            }
            quantity?: number
            tax_rates?: string[] | "" | UnknownEnumStringValue
          }[]
          iterations?: number
          metadata?: {
            [key: string]: string | undefined
          }
          on_behalf_of?: string
          proration_behavior?:
            | "always_invoice"
            | "create_prorations"
            | "none"
            | UnknownEnumStringValue
          transfer_data?: {
            amount_percent?: number
            destination: string
          }
          trial?: boolean
          trial_end?: number
        }[]
        start_date?: number | "now" | UnknownEnumStringValue
      }
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_subscription_schedule> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/subscription_schedules`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            billing_mode: {explode: true, style: "deepObject"},
            default_settings: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            phases: {explode: true, style: "deepObject"},
            start_date: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getSubscriptionSchedulesSchedule(
    p: {
      expand?: string[]
      schedule: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_subscription_schedule> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/subscription_schedules/${p["schedule"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postSubscriptionSchedulesSchedule(
    p: {
      schedule: string
      requestBody?: {
        default_settings?: {
          application_fee_percent?: number
          automatic_tax?: {
            enabled: boolean
            liability?: {
              account?: string
              type: "account" | "self" | UnknownEnumStringValue
            }
          }
          billing_cycle_anchor?:
            | "automatic"
            | "phase_start"
            | UnknownEnumStringValue
          billing_thresholds?:
            | {
                amount_gte?: number
                reset_billing_cycle_anchor?: boolean
              }
            | ""
            | UnknownEnumStringValue
          collection_method?:
            | "charge_automatically"
            | "send_invoice"
            | UnknownEnumStringValue
          default_payment_method?: string
          description?: string | "" | UnknownEnumStringValue
          invoice_settings?: {
            account_tax_ids?: string[] | "" | UnknownEnumStringValue
            days_until_due?: number
            issuer?: {
              account?: string
              type: "account" | "self" | UnknownEnumStringValue
            }
          }
          on_behalf_of?: string | "" | UnknownEnumStringValue
          transfer_data?:
            | {
                amount_percent?: number
                destination: string
              }
            | ""
            | UnknownEnumStringValue
        }
        end_behavior?:
          | "cancel"
          | "none"
          | "release"
          | "renew"
          | UnknownEnumStringValue
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        phases?: {
          add_invoice_items?: {
            discounts?: {
              coupon?: string
              discount?: string
              promotion_code?: string
            }[]
            price?: string
            price_data?: {
              currency: string
              product: string
              tax_behavior?:
                | "exclusive"
                | "inclusive"
                | "unspecified"
                | UnknownEnumStringValue
              unit_amount?: number
              unit_amount_decimal?: string
            }
            quantity?: number
            tax_rates?: string[] | "" | UnknownEnumStringValue
          }[]
          application_fee_percent?: number
          automatic_tax?: {
            enabled: boolean
            liability?: {
              account?: string
              type: "account" | "self" | UnknownEnumStringValue
            }
          }
          billing_cycle_anchor?:
            | "automatic"
            | "phase_start"
            | UnknownEnumStringValue
          billing_thresholds?:
            | {
                amount_gte?: number
                reset_billing_cycle_anchor?: boolean
              }
            | ""
            | UnknownEnumStringValue
          collection_method?:
            | "charge_automatically"
            | "send_invoice"
            | UnknownEnumStringValue
          default_payment_method?: string
          default_tax_rates?: string[] | "" | UnknownEnumStringValue
          description?: string | "" | UnknownEnumStringValue
          discounts?:
            | {
                coupon?: string
                discount?: string
                promotion_code?: string
              }[]
            | ""
            | UnknownEnumStringValue
          end_date?: number | "now" | UnknownEnumStringValue
          invoice_settings?: {
            account_tax_ids?: string[] | "" | UnknownEnumStringValue
            days_until_due?: number
            issuer?: {
              account?: string
              type: "account" | "self" | UnknownEnumStringValue
            }
          }
          items: {
            billing_thresholds?:
              | {
                  usage_gte: number
                }
              | ""
              | UnknownEnumStringValue
            discounts?:
              | {
                  coupon?: string
                  discount?: string
                  promotion_code?: string
                }[]
              | ""
              | UnknownEnumStringValue
            metadata?: {
              [key: string]: string | undefined
            }
            price?: string
            price_data?: {
              currency: string
              product: string
              recurring: {
                interval:
                  | "day"
                  | "month"
                  | "week"
                  | "year"
                  | UnknownEnumStringValue
                interval_count?: number
              }
              tax_behavior?:
                | "exclusive"
                | "inclusive"
                | "unspecified"
                | UnknownEnumStringValue
              unit_amount?: number
              unit_amount_decimal?: string
            }
            quantity?: number
            tax_rates?: string[] | "" | UnknownEnumStringValue
          }[]
          iterations?: number
          metadata?: {
            [key: string]: string | undefined
          }
          on_behalf_of?: string
          proration_behavior?:
            | "always_invoice"
            | "create_prorations"
            | "none"
            | UnknownEnumStringValue
          start_date?: number | "now" | UnknownEnumStringValue
          transfer_data?: {
            amount_percent?: number
            destination: string
          }
          trial?: boolean
          trial_end?: number | "now" | UnknownEnumStringValue
        }[]
        proration_behavior?:
          | "always_invoice"
          | "create_prorations"
          | "none"
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_subscription_schedule> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/subscription_schedules/${p["schedule"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            default_settings: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            phases: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postSubscriptionSchedulesScheduleCancel(
    p: {
      schedule: string
      requestBody?: {
        expand?: string[]
        invoice_now?: boolean
        prorate?: boolean
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_subscription_schedule> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/subscription_schedules/${p["schedule"]}/cancel`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postSubscriptionSchedulesScheduleRelease(
    p: {
      schedule: string
      requestBody?: {
        expand?: string[]
        preserve_cancel_date?: boolean
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_subscription_schedule> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/subscription_schedules/${p["schedule"]}/release`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getSubscriptions(
    p: {
      automaticTax?: {
        enabled: boolean
      }
      collectionMethod?:
        | "charge_automatically"
        | "send_invoice"
        | UnknownEnumStringValue
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      currentPeriodEnd?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      currentPeriodStart?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      price?: string
      startingAfter?: string
      status?:
        | "active"
        | "all"
        | "canceled"
        | "ended"
        | "incomplete"
        | "incomplete_expired"
        | "past_due"
        | "paused"
        | "trialing"
        | "unpaid"
        | UnknownEnumStringValue
      testClock?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_subscription[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/subscriptions`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      automatic_tax: p["automaticTax"],
      collection_method: p["collectionMethod"],
      created: p["created"],
      current_period_end: p["currentPeriodEnd"],
      current_period_start: p["currentPeriodStart"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      price: p["price"],
      starting_after: p["startingAfter"],
      status: p["status"],
      test_clock: p["testClock"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postSubscriptions(
    p: {
      requestBody: {
        add_invoice_items?: {
          discounts?: {
            coupon?: string
            discount?: string
            promotion_code?: string
          }[]
          price?: string
          price_data?: {
            currency: string
            product: string
            tax_behavior?:
              | "exclusive"
              | "inclusive"
              | "unspecified"
              | UnknownEnumStringValue
            unit_amount?: number
            unit_amount_decimal?: string
          }
          quantity?: number
          tax_rates?: string[] | "" | UnknownEnumStringValue
        }[]
        application_fee_percent?: number | "" | UnknownEnumStringValue
        automatic_tax?: {
          enabled: boolean
          liability?: {
            account?: string
            type: "account" | "self" | UnknownEnumStringValue
          }
        }
        backdate_start_date?: number
        billing_cycle_anchor?: number
        billing_cycle_anchor_config?: {
          day_of_month: number
          hour?: number
          minute?: number
          month?: number
          second?: number
        }
        billing_mode?: {
          type: "classic" | "flexible" | UnknownEnumStringValue
        }
        billing_thresholds?:
          | {
              amount_gte?: number
              reset_billing_cycle_anchor?: boolean
            }
          | ""
          | UnknownEnumStringValue
        cancel_at?: number
        cancel_at_period_end?: boolean
        collection_method?:
          | "charge_automatically"
          | "send_invoice"
          | UnknownEnumStringValue
        currency?: string
        customer: string
        days_until_due?: number
        default_payment_method?: string
        default_source?: string
        default_tax_rates?: string[] | "" | UnknownEnumStringValue
        description?: string
        discounts?:
          | {
              coupon?: string
              discount?: string
              promotion_code?: string
            }[]
          | ""
          | UnknownEnumStringValue
        expand?: string[]
        invoice_settings?: {
          account_tax_ids?: string[] | "" | UnknownEnumStringValue
          issuer?: {
            account?: string
            type: "account" | "self" | UnknownEnumStringValue
          }
        }
        items?: {
          billing_thresholds?:
            | {
                usage_gte: number
              }
            | ""
            | UnknownEnumStringValue
          discounts?:
            | {
                coupon?: string
                discount?: string
                promotion_code?: string
              }[]
            | ""
            | UnknownEnumStringValue
          metadata?: {
            [key: string]: string | undefined
          }
          price?: string
          price_data?: {
            currency: string
            product: string
            recurring: {
              interval:
                | "day"
                | "month"
                | "week"
                | "year"
                | UnknownEnumStringValue
              interval_count?: number
            }
            tax_behavior?:
              | "exclusive"
              | "inclusive"
              | "unspecified"
              | UnknownEnumStringValue
            unit_amount?: number
            unit_amount_decimal?: string
          }
          quantity?: number
          tax_rates?: string[] | "" | UnknownEnumStringValue
        }[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        off_session?: boolean
        on_behalf_of?: string | "" | UnknownEnumStringValue
        payment_behavior?:
          | "allow_incomplete"
          | "default_incomplete"
          | "error_if_incomplete"
          | "pending_if_incomplete"
          | UnknownEnumStringValue
        payment_settings?: {
          payment_method_options?: {
            acss_debit?:
              | {
                  mandate_options?: {
                    transaction_type?:
                      | "business"
                      | "personal"
                      | UnknownEnumStringValue
                  }
                  verification_method?:
                    | "automatic"
                    | "instant"
                    | "microdeposits"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
            bancontact?:
              | {
                  preferred_language?:
                    | "de"
                    | "en"
                    | "fr"
                    | "nl"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
            card?:
              | {
                  mandate_options?: {
                    amount?: number
                    amount_type?: "fixed" | "maximum" | UnknownEnumStringValue
                    description?: string
                  }
                  network?:
                    | "amex"
                    | "cartes_bancaires"
                    | "diners"
                    | "discover"
                    | "eftpos_au"
                    | "girocard"
                    | "interac"
                    | "jcb"
                    | "link"
                    | "mastercard"
                    | "unionpay"
                    | "unknown"
                    | "visa"
                    | UnknownEnumStringValue
                  request_three_d_secure?:
                    | "any"
                    | "automatic"
                    | "challenge"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
            customer_balance?:
              | {
                  bank_transfer?: {
                    eu_bank_transfer?: {
                      country: string
                    }
                    type?: string
                  }
                  funding_type?: string
                }
              | ""
              | UnknownEnumStringValue
            konbini?: EmptyObject | "" | UnknownEnumStringValue
            sepa_debit?: EmptyObject | "" | UnknownEnumStringValue
            us_bank_account?:
              | {
                  financial_connections?: {
                    filters?: {
                      account_subcategories?: (
                        | "checking"
                        | "savings"
                        | UnknownEnumStringValue
                      )[]
                    }
                    permissions?: (
                      | "balances"
                      | "ownership"
                      | "payment_method"
                      | "transactions"
                      | UnknownEnumStringValue
                    )[]
                    prefetch?: (
                      | "balances"
                      | "ownership"
                      | "transactions"
                      | UnknownEnumStringValue
                    )[]
                  }
                  verification_method?:
                    | "automatic"
                    | "instant"
                    | "microdeposits"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
          }
          payment_method_types?:
            | (
                | "ach_credit_transfer"
                | "ach_debit"
                | "acss_debit"
                | "affirm"
                | "amazon_pay"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "boleto"
                | "card"
                | "cashapp"
                | "crypto"
                | "customer_balance"
                | "eps"
                | "fpx"
                | "giropay"
                | "grabpay"
                | "ideal"
                | "jp_credit_transfer"
                | "kakao_pay"
                | "klarna"
                | "konbini"
                | "kr_card"
                | "link"
                | "multibanco"
                | "naver_pay"
                | "nz_bank_account"
                | "p24"
                | "payco"
                | "paynow"
                | "paypal"
                | "promptpay"
                | "revolut_pay"
                | "sepa_credit_transfer"
                | "sepa_debit"
                | "sofort"
                | "swish"
                | "us_bank_account"
                | "wechat_pay"
                | UnknownEnumStringValue
              )[]
            | ""
            | UnknownEnumStringValue
          save_default_payment_method?:
            | "off"
            | "on_subscription"
            | UnknownEnumStringValue
        }
        pending_invoice_item_interval?:
          | {
              interval:
                | "day"
                | "month"
                | "week"
                | "year"
                | UnknownEnumStringValue
              interval_count?: number
            }
          | ""
          | UnknownEnumStringValue
        proration_behavior?:
          | "always_invoice"
          | "create_prorations"
          | "none"
          | UnknownEnumStringValue
        transfer_data?: {
          amount_percent?: number
          destination: string
        }
        trial_end?: "now" | UnknownEnumStringValue | number
        trial_from_plan?: boolean
        trial_period_days?: number
        trial_settings?: {
          end_behavior: {
            missing_payment_method:
              | "cancel"
              | "create_invoice"
              | "pause"
              | UnknownEnumStringValue
          }
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_subscription> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/subscriptions`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      add_invoice_items: {explode: true, style: "deepObject"},
      application_fee_percent: {explode: true, style: "deepObject"},
      automatic_tax: {explode: true, style: "deepObject"},
      billing_cycle_anchor_config: {explode: true, style: "deepObject"},
      billing_mode: {explode: true, style: "deepObject"},
      billing_thresholds: {explode: true, style: "deepObject"},
      default_tax_rates: {explode: true, style: "deepObject"},
      discounts: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
      invoice_settings: {explode: true, style: "deepObject"},
      items: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
      on_behalf_of: {explode: true, style: "deepObject"},
      payment_settings: {explode: true, style: "deepObject"},
      pending_invoice_item_interval: {explode: true, style: "deepObject"},
      transfer_data: {explode: true, style: "deepObject"},
      trial_end: {explode: true, style: "deepObject"},
      trial_settings: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getSubscriptionsSearch(
    p: {
      expand?: string[]
      limit?: number
      page?: string
      query: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_subscription[]
          has_more: boolean
          next_page?: string | null
          object: "search_result" | UnknownEnumStringValue
          total_count?: number
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/subscriptions/search`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      expand: p["expand"],
      limit: p["limit"],
      page: p["page"],
      query: p["query"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async deleteSubscriptionsSubscriptionExposedId(
    p: {
      subscriptionExposedId: string
      requestBody?: {
        cancellation_details?: {
          comment?: string | "" | UnknownEnumStringValue
          feedback?:
            | ""
            | "customer_service"
            | "low_quality"
            | "missing_features"
            | "other"
            | "switched_service"
            | "too_complex"
            | "too_expensive"
            | "unused"
            | UnknownEnumStringValue
        }
        expand?: string[]
        invoice_now?: boolean
        prorate?: boolean
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_subscription> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/subscriptions/${p["subscriptionExposedId"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            cancellation_details: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "DELETE", body, ...opts, headers}, timeout)
  }

  async getSubscriptionsSubscriptionExposedId(
    p: {
      expand?: string[]
      subscriptionExposedId: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_subscription> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/subscriptions/${p["subscriptionExposedId"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postSubscriptionsSubscriptionExposedId(
    p: {
      subscriptionExposedId: string
      requestBody?: {
        add_invoice_items?: {
          discounts?: {
            coupon?: string
            discount?: string
            promotion_code?: string
          }[]
          price?: string
          price_data?: {
            currency: string
            product: string
            tax_behavior?:
              | "exclusive"
              | "inclusive"
              | "unspecified"
              | UnknownEnumStringValue
            unit_amount?: number
            unit_amount_decimal?: string
          }
          quantity?: number
          tax_rates?: string[] | "" | UnknownEnumStringValue
        }[]
        application_fee_percent?: number | "" | UnknownEnumStringValue
        automatic_tax?: {
          enabled: boolean
          liability?: {
            account?: string
            type: "account" | "self" | UnknownEnumStringValue
          }
        }
        billing_cycle_anchor?: "now" | "unchanged" | UnknownEnumStringValue
        billing_thresholds?:
          | {
              amount_gte?: number
              reset_billing_cycle_anchor?: boolean
            }
          | ""
          | UnknownEnumStringValue
        cancel_at?: number | "" | UnknownEnumStringValue
        cancel_at_period_end?: boolean
        cancellation_details?: {
          comment?: string | "" | UnknownEnumStringValue
          feedback?:
            | ""
            | "customer_service"
            | "low_quality"
            | "missing_features"
            | "other"
            | "switched_service"
            | "too_complex"
            | "too_expensive"
            | "unused"
            | UnknownEnumStringValue
        }
        collection_method?:
          | "charge_automatically"
          | "send_invoice"
          | UnknownEnumStringValue
        days_until_due?: number
        default_payment_method?: string
        default_source?: string | "" | UnknownEnumStringValue
        default_tax_rates?: string[] | "" | UnknownEnumStringValue
        description?: string | "" | UnknownEnumStringValue
        discounts?:
          | {
              coupon?: string
              discount?: string
              promotion_code?: string
            }[]
          | ""
          | UnknownEnumStringValue
        expand?: string[]
        invoice_settings?: {
          account_tax_ids?: string[] | "" | UnknownEnumStringValue
          issuer?: {
            account?: string
            type: "account" | "self" | UnknownEnumStringValue
          }
        }
        items?: {
          billing_thresholds?:
            | {
                usage_gte: number
              }
            | ""
            | UnknownEnumStringValue
          clear_usage?: boolean
          deleted?: boolean
          discounts?:
            | {
                coupon?: string
                discount?: string
                promotion_code?: string
              }[]
            | ""
            | UnknownEnumStringValue
          id?: string
          metadata?:
            | {
                [key: string]: string | undefined
              }
            | ""
            | UnknownEnumStringValue
          price?: string
          price_data?: {
            currency: string
            product: string
            recurring: {
              interval:
                | "day"
                | "month"
                | "week"
                | "year"
                | UnknownEnumStringValue
              interval_count?: number
            }
            tax_behavior?:
              | "exclusive"
              | "inclusive"
              | "unspecified"
              | UnknownEnumStringValue
            unit_amount?: number
            unit_amount_decimal?: string
          }
          quantity?: number
          tax_rates?: string[] | "" | UnknownEnumStringValue
        }[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        off_session?: boolean
        on_behalf_of?: string | "" | UnknownEnumStringValue
        pause_collection?:
          | {
              behavior:
                | "keep_as_draft"
                | "mark_uncollectible"
                | "void"
                | UnknownEnumStringValue
              resumes_at?: number
            }
          | ""
          | UnknownEnumStringValue
        payment_behavior?:
          | "allow_incomplete"
          | "default_incomplete"
          | "error_if_incomplete"
          | "pending_if_incomplete"
          | UnknownEnumStringValue
        payment_settings?: {
          payment_method_options?: {
            acss_debit?:
              | {
                  mandate_options?: {
                    transaction_type?:
                      | "business"
                      | "personal"
                      | UnknownEnumStringValue
                  }
                  verification_method?:
                    | "automatic"
                    | "instant"
                    | "microdeposits"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
            bancontact?:
              | {
                  preferred_language?:
                    | "de"
                    | "en"
                    | "fr"
                    | "nl"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
            card?:
              | {
                  mandate_options?: {
                    amount?: number
                    amount_type?: "fixed" | "maximum" | UnknownEnumStringValue
                    description?: string
                  }
                  network?:
                    | "amex"
                    | "cartes_bancaires"
                    | "diners"
                    | "discover"
                    | "eftpos_au"
                    | "girocard"
                    | "interac"
                    | "jcb"
                    | "link"
                    | "mastercard"
                    | "unionpay"
                    | "unknown"
                    | "visa"
                    | UnknownEnumStringValue
                  request_three_d_secure?:
                    | "any"
                    | "automatic"
                    | "challenge"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
            customer_balance?:
              | {
                  bank_transfer?: {
                    eu_bank_transfer?: {
                      country: string
                    }
                    type?: string
                  }
                  funding_type?: string
                }
              | ""
              | UnknownEnumStringValue
            konbini?: EmptyObject | "" | UnknownEnumStringValue
            sepa_debit?: EmptyObject | "" | UnknownEnumStringValue
            us_bank_account?:
              | {
                  financial_connections?: {
                    filters?: {
                      account_subcategories?: (
                        | "checking"
                        | "savings"
                        | UnknownEnumStringValue
                      )[]
                    }
                    permissions?: (
                      | "balances"
                      | "ownership"
                      | "payment_method"
                      | "transactions"
                      | UnknownEnumStringValue
                    )[]
                    prefetch?: (
                      | "balances"
                      | "ownership"
                      | "transactions"
                      | UnknownEnumStringValue
                    )[]
                  }
                  verification_method?:
                    | "automatic"
                    | "instant"
                    | "microdeposits"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
          }
          payment_method_types?:
            | (
                | "ach_credit_transfer"
                | "ach_debit"
                | "acss_debit"
                | "affirm"
                | "amazon_pay"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "boleto"
                | "card"
                | "cashapp"
                | "crypto"
                | "customer_balance"
                | "eps"
                | "fpx"
                | "giropay"
                | "grabpay"
                | "ideal"
                | "jp_credit_transfer"
                | "kakao_pay"
                | "klarna"
                | "konbini"
                | "kr_card"
                | "link"
                | "multibanco"
                | "naver_pay"
                | "nz_bank_account"
                | "p24"
                | "payco"
                | "paynow"
                | "paypal"
                | "promptpay"
                | "revolut_pay"
                | "sepa_credit_transfer"
                | "sepa_debit"
                | "sofort"
                | "swish"
                | "us_bank_account"
                | "wechat_pay"
                | UnknownEnumStringValue
              )[]
            | ""
            | UnknownEnumStringValue
          save_default_payment_method?:
            | "off"
            | "on_subscription"
            | UnknownEnumStringValue
        }
        pending_invoice_item_interval?:
          | {
              interval:
                | "day"
                | "month"
                | "week"
                | "year"
                | UnknownEnumStringValue
              interval_count?: number
            }
          | ""
          | UnknownEnumStringValue
        proration_behavior?:
          | "always_invoice"
          | "create_prorations"
          | "none"
          | UnknownEnumStringValue
        proration_date?: number
        transfer_data?:
          | {
              amount_percent?: number
              destination: string
            }
          | ""
          | UnknownEnumStringValue
        trial_end?: "now" | UnknownEnumStringValue | number
        trial_from_plan?: boolean
        trial_settings?: {
          end_behavior: {
            missing_payment_method:
              | "cancel"
              | "create_invoice"
              | "pause"
              | UnknownEnumStringValue
          }
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_subscription> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/subscriptions/${p["subscriptionExposedId"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            add_invoice_items: {explode: true, style: "deepObject"},
            application_fee_percent: {explode: true, style: "deepObject"},
            automatic_tax: {explode: true, style: "deepObject"},
            billing_thresholds: {explode: true, style: "deepObject"},
            cancel_at: {explode: true, style: "deepObject"},
            cancellation_details: {explode: true, style: "deepObject"},
            default_source: {explode: true, style: "deepObject"},
            default_tax_rates: {explode: true, style: "deepObject"},
            description: {explode: true, style: "deepObject"},
            discounts: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            invoice_settings: {explode: true, style: "deepObject"},
            items: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            on_behalf_of: {explode: true, style: "deepObject"},
            pause_collection: {explode: true, style: "deepObject"},
            payment_settings: {explode: true, style: "deepObject"},
            pending_invoice_item_interval: {explode: true, style: "deepObject"},
            transfer_data: {explode: true, style: "deepObject"},
            trial_end: {explode: true, style: "deepObject"},
            trial_settings: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteSubscriptionsSubscriptionExposedIdDiscount(
    p: {
      subscriptionExposedId: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_deleted_discount> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/subscriptions/${p["subscriptionExposedId"]}/discount`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async postSubscriptionsSubscriptionMigrate(
    p: {
      subscription: string
      requestBody: {
        billing_mode: {
          type: "flexible" | UnknownEnumStringValue
        }
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_subscription> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/subscriptions/${p["subscription"]}/migrate`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      billing_mode: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postSubscriptionsSubscriptionResume(
    p: {
      subscription: string
      requestBody?: {
        billing_cycle_anchor?: "now" | "unchanged" | UnknownEnumStringValue
        expand?: string[]
        proration_behavior?:
          | "always_invoice"
          | "create_prorations"
          | "none"
          | UnknownEnumStringValue
        proration_date?: number
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_subscription> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/subscriptions/${p["subscription"]}/resume`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTaxCalculations(
    p: {
      requestBody: {
        currency: string
        customer?: string
        customer_details?: {
          address?: {
            city?: string | "" | UnknownEnumStringValue
            country: string
            line1?: string | "" | UnknownEnumStringValue
            line2?: string | "" | UnknownEnumStringValue
            postal_code?: string | "" | UnknownEnumStringValue
            state?: string | "" | UnknownEnumStringValue
          }
          address_source?: "billing" | "shipping" | UnknownEnumStringValue
          ip_address?: string
          tax_ids?: {
            type:
              | "ad_nrt"
              | "ae_trn"
              | "al_tin"
              | "am_tin"
              | "ao_tin"
              | "ar_cuit"
              | "au_abn"
              | "au_arn"
              | "aw_tin"
              | "az_tin"
              | "ba_tin"
              | "bb_tin"
              | "bd_bin"
              | "bf_ifu"
              | "bg_uic"
              | "bh_vat"
              | "bj_ifu"
              | "bo_tin"
              | "br_cnpj"
              | "br_cpf"
              | "bs_tin"
              | "by_tin"
              | "ca_bn"
              | "ca_gst_hst"
              | "ca_pst_bc"
              | "ca_pst_mb"
              | "ca_pst_sk"
              | "ca_qst"
              | "cd_nif"
              | "ch_uid"
              | "ch_vat"
              | "cl_tin"
              | "cm_niu"
              | "cn_tin"
              | "co_nit"
              | "cr_tin"
              | "cv_nif"
              | "de_stn"
              | "do_rcn"
              | "ec_ruc"
              | "eg_tin"
              | "es_cif"
              | "et_tin"
              | "eu_oss_vat"
              | "eu_vat"
              | "gb_vat"
              | "ge_vat"
              | "gn_nif"
              | "hk_br"
              | "hr_oib"
              | "hu_tin"
              | "id_npwp"
              | "il_vat"
              | "in_gst"
              | "is_vat"
              | "jp_cn"
              | "jp_rn"
              | "jp_trn"
              | "ke_pin"
              | "kg_tin"
              | "kh_tin"
              | "kr_brn"
              | "kz_bin"
              | "la_tin"
              | "li_uid"
              | "li_vat"
              | "ma_vat"
              | "md_vat"
              | "me_pib"
              | "mk_vat"
              | "mr_nif"
              | "mx_rfc"
              | "my_frp"
              | "my_itn"
              | "my_sst"
              | "ng_tin"
              | "no_vat"
              | "no_voec"
              | "np_pan"
              | "nz_gst"
              | "om_vat"
              | "pe_ruc"
              | "ph_tin"
              | "ro_tin"
              | "rs_pib"
              | "ru_inn"
              | "ru_kpp"
              | "sa_vat"
              | "sg_gst"
              | "sg_uen"
              | "si_tin"
              | "sn_ninea"
              | "sr_fin"
              | "sv_nit"
              | "th_vat"
              | "tj_tin"
              | "tr_tin"
              | "tw_vat"
              | "tz_vat"
              | "ua_vat"
              | "ug_tin"
              | "us_ein"
              | "uy_ruc"
              | "uz_tin"
              | "uz_vat"
              | "ve_rif"
              | "vn_tin"
              | "za_vat"
              | "zm_tin"
              | "zw_tin"
              | UnknownEnumStringValue
            value: string
          }[]
          taxability_override?:
            | "customer_exempt"
            | "none"
            | "reverse_charge"
            | UnknownEnumStringValue
        }
        expand?: string[]
        line_items: {
          amount: number
          metadata?: {
            [key: string]: string | undefined
          }
          product?: string
          quantity?: number
          reference?: string
          tax_behavior?: "exclusive" | "inclusive" | UnknownEnumStringValue
          tax_code?: string
        }[]
        ship_from_details?: {
          address: {
            city?: string | "" | UnknownEnumStringValue
            country: string
            line1?: string | "" | UnknownEnumStringValue
            line2?: string | "" | UnknownEnumStringValue
            postal_code?: string | "" | UnknownEnumStringValue
            state?: string | "" | UnknownEnumStringValue
          }
        }
        shipping_cost?: {
          amount?: number
          shipping_rate?: string
          tax_behavior?: "exclusive" | "inclusive" | UnknownEnumStringValue
          tax_code?: string
        }
        tax_date?: number
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_tax_calculation> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/tax/calculations`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      customer_details: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
      line_items: {explode: true, style: "deepObject"},
      ship_from_details: {explode: true, style: "deepObject"},
      shipping_cost: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTaxCalculationsCalculation(
    p: {
      calculation: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_tax_calculation> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/tax/calculations/${p["calculation"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getTaxCalculationsCalculationLineItems(
    p: {
      calculation: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_tax_calculation_line_item[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/tax/calculations/${p["calculation"]}/line_items`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getTaxRegistrations(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?:
        | "active"
        | "all"
        | "expired"
        | "scheduled"
        | UnknownEnumStringValue
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_tax_registration[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/tax/registrations`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTaxRegistrations(
    p: {
      requestBody: {
        active_from: "now" | UnknownEnumStringValue | number
        country: string
        country_options: {
          ae?: {
            type: "standard" | UnknownEnumStringValue
          }
          al?: {
            type: "standard" | UnknownEnumStringValue
          }
          am?: {
            type: "simplified" | UnknownEnumStringValue
          }
          ao?: {
            type: "standard" | UnknownEnumStringValue
          }
          at?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          au?: {
            type: "standard" | UnknownEnumStringValue
          }
          aw?: {
            type: "standard" | UnknownEnumStringValue
          }
          az?: {
            type: "simplified" | UnknownEnumStringValue
          }
          ba?: {
            type: "standard" | UnknownEnumStringValue
          }
          bb?: {
            type: "standard" | UnknownEnumStringValue
          }
          bd?: {
            type: "standard" | UnknownEnumStringValue
          }
          be?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          bf?: {
            type: "standard" | UnknownEnumStringValue
          }
          bg?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          bh?: {
            type: "standard" | UnknownEnumStringValue
          }
          bj?: {
            type: "simplified" | UnknownEnumStringValue
          }
          bs?: {
            type: "standard" | UnknownEnumStringValue
          }
          by?: {
            type: "simplified" | UnknownEnumStringValue
          }
          ca?: {
            province_standard?: {
              province: string
            }
            type:
              | "province_standard"
              | "simplified"
              | "standard"
              | UnknownEnumStringValue
          }
          cd?: {
            type: "standard" | UnknownEnumStringValue
          }
          ch?: {
            type: "standard" | UnknownEnumStringValue
          }
          cl?: {
            type: "simplified" | UnknownEnumStringValue
          }
          cm?: {
            type: "simplified" | UnknownEnumStringValue
          }
          co?: {
            type: "simplified" | UnknownEnumStringValue
          }
          cr?: {
            type: "simplified" | UnknownEnumStringValue
          }
          cv?: {
            type: "simplified" | UnknownEnumStringValue
          }
          cy?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          cz?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          de?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          dk?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          ec?: {
            type: "simplified" | UnknownEnumStringValue
          }
          ee?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          eg?: {
            type: "simplified" | UnknownEnumStringValue
          }
          es?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          et?: {
            type: "standard" | UnknownEnumStringValue
          }
          fi?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          fr?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          gb?: {
            type: "standard" | UnknownEnumStringValue
          }
          ge?: {
            type: "simplified" | UnknownEnumStringValue
          }
          gn?: {
            type: "standard" | UnknownEnumStringValue
          }
          gr?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          hr?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          hu?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          id?: {
            type: "simplified" | UnknownEnumStringValue
          }
          ie?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          in?: {
            type: "simplified" | UnknownEnumStringValue
          }
          is?: {
            type: "standard" | UnknownEnumStringValue
          }
          it?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          jp?: {
            type: "standard" | UnknownEnumStringValue
          }
          ke?: {
            type: "simplified" | UnknownEnumStringValue
          }
          kg?: {
            type: "simplified" | UnknownEnumStringValue
          }
          kh?: {
            type: "simplified" | UnknownEnumStringValue
          }
          kr?: {
            type: "simplified" | UnknownEnumStringValue
          }
          kz?: {
            type: "simplified" | UnknownEnumStringValue
          }
          la?: {
            type: "simplified" | UnknownEnumStringValue
          }
          lt?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          lu?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          lv?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          ma?: {
            type: "simplified" | UnknownEnumStringValue
          }
          md?: {
            type: "simplified" | UnknownEnumStringValue
          }
          me?: {
            type: "standard" | UnknownEnumStringValue
          }
          mk?: {
            type: "standard" | UnknownEnumStringValue
          }
          mr?: {
            type: "standard" | UnknownEnumStringValue
          }
          mt?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          mx?: {
            type: "simplified" | UnknownEnumStringValue
          }
          my?: {
            type: "simplified" | UnknownEnumStringValue
          }
          ng?: {
            type: "simplified" | UnknownEnumStringValue
          }
          nl?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          no?: {
            type: "standard" | UnknownEnumStringValue
          }
          np?: {
            type: "simplified" | UnknownEnumStringValue
          }
          nz?: {
            type: "standard" | UnknownEnumStringValue
          }
          om?: {
            type: "standard" | UnknownEnumStringValue
          }
          pe?: {
            type: "simplified" | UnknownEnumStringValue
          }
          ph?: {
            type: "simplified" | UnknownEnumStringValue
          }
          pl?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          pt?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          ro?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          rs?: {
            type: "standard" | UnknownEnumStringValue
          }
          ru?: {
            type: "simplified" | UnknownEnumStringValue
          }
          sa?: {
            type: "simplified" | UnknownEnumStringValue
          }
          se?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          sg?: {
            type: "standard" | UnknownEnumStringValue
          }
          si?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          sk?: {
            standard?: {
              place_of_supply_scheme:
                | "small_seller"
                | "standard"
                | UnknownEnumStringValue
            }
            type:
              | "ioss"
              | "oss_non_union"
              | "oss_union"
              | "standard"
              | UnknownEnumStringValue
          }
          sn?: {
            type: "simplified" | UnknownEnumStringValue
          }
          sr?: {
            type: "standard" | UnknownEnumStringValue
          }
          th?: {
            type: "simplified" | UnknownEnumStringValue
          }
          tj?: {
            type: "simplified" | UnknownEnumStringValue
          }
          tr?: {
            type: "simplified" | UnknownEnumStringValue
          }
          tz?: {
            type: "simplified" | UnknownEnumStringValue
          }
          ua?: {
            type: "simplified" | UnknownEnumStringValue
          }
          ug?: {
            type: "simplified" | UnknownEnumStringValue
          }
          us?: {
            local_amusement_tax?: {
              jurisdiction: string
            }
            local_lease_tax?: {
              jurisdiction: string
            }
            state: string
            state_sales_tax?: {
              elections: {
                jurisdiction?: string
                type:
                  | "local_use_tax"
                  | "simplified_sellers_use_tax"
                  | "single_local_use_tax"
                  | UnknownEnumStringValue
              }[]
            }
            type:
              | "local_amusement_tax"
              | "local_lease_tax"
              | "state_communications_tax"
              | "state_retail_delivery_fee"
              | "state_sales_tax"
              | UnknownEnumStringValue
          }
          uy?: {
            type: "standard" | UnknownEnumStringValue
          }
          uz?: {
            type: "simplified" | UnknownEnumStringValue
          }
          vn?: {
            type: "simplified" | UnknownEnumStringValue
          }
          za?: {
            type: "standard" | UnknownEnumStringValue
          }
          zm?: {
            type: "simplified" | UnknownEnumStringValue
          }
          zw?: {
            type: "standard" | UnknownEnumStringValue
          }
        }
        expand?: string[]
        expires_at?: number
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_tax_registration> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/tax/registrations`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      active_from: {explode: true, style: "deepObject"},
      country_options: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTaxRegistrationsId(
    p: {
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_tax_registration> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/tax/registrations/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTaxRegistrationsId(
    p: {
      id: string
      requestBody?: {
        active_from?: "now" | UnknownEnumStringValue | number
        expand?: string[]
        expires_at?: "now" | UnknownEnumStringValue | number | ""
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_tax_registration> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/tax/registrations/${p["id"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            active_from: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            expires_at: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTaxSettings(
    p: {
      expand?: string[]
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_tax_settings> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/tax/settings`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTaxSettings(
    p: {
      requestBody?: {
        defaults?: {
          tax_behavior?:
            | "exclusive"
            | "inclusive"
            | "inferred_by_currency"
            | UnknownEnumStringValue
          tax_code?: string
        }
        expand?: string[]
        head_office?: {
          address: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
          }
        }
      }
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_tax_settings> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/tax/settings`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            defaults: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            head_office: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTaxTransactionsCreateFromCalculation(
    p: {
      requestBody: {
        calculation: string
        expand?: string[]
        metadata?: {
          [key: string]: string | undefined
        }
        posted_at?: number
        reference: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_tax_transaction> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/tax/transactions/create_from_calculation`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTaxTransactionsCreateReversal(
    p: {
      requestBody: {
        expand?: string[]
        flat_amount?: number
        line_items?: {
          amount: number
          amount_tax: number
          metadata?: {
            [key: string]: string | undefined
          }
          original_line_item: string
          quantity?: number
          reference: string
        }[]
        metadata?: {
          [key: string]: string | undefined
        }
        mode: "full" | "partial" | UnknownEnumStringValue
        original_transaction: string
        reference: string
        shipping_cost?: {
          amount: number
          amount_tax: number
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_tax_transaction> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/tax/transactions/create_reversal`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      line_items: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
      shipping_cost: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTaxTransactionsTransaction(
    p: {
      expand?: string[]
      transaction: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_tax_transaction> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/tax/transactions/${p["transaction"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getTaxTransactionsTransactionLineItems(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      transaction: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_tax_transaction_line_item[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/tax/transactions/${p["transaction"]}/line_items`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getTaxCodes(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_tax_code[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/tax_codes`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getTaxCodesId(
    p: {
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_tax_code> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/tax_codes/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getTaxIds(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      owner?: {
        account?: string
        customer?: string
        type:
          | "account"
          | "application"
          | "customer"
          | "self"
          | UnknownEnumStringValue
      }
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_tax_id[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/tax_ids`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      owner: p["owner"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTaxIds(
    p: {
      requestBody: {
        expand?: string[]
        owner?: {
          account?: string
          customer?: string
          type:
            | "account"
            | "application"
            | "customer"
            | "self"
            | UnknownEnumStringValue
        }
        type:
          | "ad_nrt"
          | "ae_trn"
          | "al_tin"
          | "am_tin"
          | "ao_tin"
          | "ar_cuit"
          | "au_abn"
          | "au_arn"
          | "aw_tin"
          | "az_tin"
          | "ba_tin"
          | "bb_tin"
          | "bd_bin"
          | "bf_ifu"
          | "bg_uic"
          | "bh_vat"
          | "bj_ifu"
          | "bo_tin"
          | "br_cnpj"
          | "br_cpf"
          | "bs_tin"
          | "by_tin"
          | "ca_bn"
          | "ca_gst_hst"
          | "ca_pst_bc"
          | "ca_pst_mb"
          | "ca_pst_sk"
          | "ca_qst"
          | "cd_nif"
          | "ch_uid"
          | "ch_vat"
          | "cl_tin"
          | "cm_niu"
          | "cn_tin"
          | "co_nit"
          | "cr_tin"
          | "cv_nif"
          | "de_stn"
          | "do_rcn"
          | "ec_ruc"
          | "eg_tin"
          | "es_cif"
          | "et_tin"
          | "eu_oss_vat"
          | "eu_vat"
          | "gb_vat"
          | "ge_vat"
          | "gn_nif"
          | "hk_br"
          | "hr_oib"
          | "hu_tin"
          | "id_npwp"
          | "il_vat"
          | "in_gst"
          | "is_vat"
          | "jp_cn"
          | "jp_rn"
          | "jp_trn"
          | "ke_pin"
          | "kg_tin"
          | "kh_tin"
          | "kr_brn"
          | "kz_bin"
          | "la_tin"
          | "li_uid"
          | "li_vat"
          | "ma_vat"
          | "md_vat"
          | "me_pib"
          | "mk_vat"
          | "mr_nif"
          | "mx_rfc"
          | "my_frp"
          | "my_itn"
          | "my_sst"
          | "ng_tin"
          | "no_vat"
          | "no_voec"
          | "np_pan"
          | "nz_gst"
          | "om_vat"
          | "pe_ruc"
          | "ph_tin"
          | "ro_tin"
          | "rs_pib"
          | "ru_inn"
          | "ru_kpp"
          | "sa_vat"
          | "sg_gst"
          | "sg_uen"
          | "si_tin"
          | "sn_ninea"
          | "sr_fin"
          | "sv_nit"
          | "th_vat"
          | "tj_tin"
          | "tr_tin"
          | "tw_vat"
          | "tz_vat"
          | "ua_vat"
          | "ug_tin"
          | "us_ein"
          | "uy_ruc"
          | "uz_tin"
          | "uz_vat"
          | "ve_rif"
          | "vn_tin"
          | "za_vat"
          | "zm_tin"
          | "zw_tin"
          | UnknownEnumStringValue
        value: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_tax_id> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/tax_ids`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      owner: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteTaxIdsId(
    p: {
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_deleted_tax_id> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/tax_ids/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async getTaxIdsId(
    p: {
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_tax_id> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/tax_ids/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getTaxRates(
    p: {
      active?: boolean
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      inclusive?: boolean
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_tax_rate[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/tax_rates`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      active: p["active"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      inclusive: p["inclusive"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTaxRates(
    p: {
      requestBody: {
        active?: boolean
        country?: string
        description?: string
        display_name: string
        expand?: string[]
        inclusive: boolean
        jurisdiction?: string
        metadata?: {
          [key: string]: string | undefined
        }
        percentage: number
        state?: string
        tax_type?:
          | "amusement_tax"
          | "communications_tax"
          | "gst"
          | "hst"
          | "igst"
          | "jct"
          | "lease_tax"
          | "pst"
          | "qst"
          | "retail_delivery_fee"
          | "rst"
          | "sales_tax"
          | "service_tax"
          | "vat"
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_tax_rate> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/tax_rates`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTaxRatesTaxRate(
    p: {
      expand?: string[]
      taxRate: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_tax_rate> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/tax_rates/${p["taxRate"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTaxRatesTaxRate(
    p: {
      taxRate: string
      requestBody?: {
        active?: boolean
        country?: string
        description?: string
        display_name?: string
        expand?: string[]
        jurisdiction?: string
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        state?: string
        tax_type?:
          | "amusement_tax"
          | "communications_tax"
          | "gst"
          | "hst"
          | "igst"
          | "jct"
          | "lease_tax"
          | "pst"
          | "qst"
          | "retail_delivery_fee"
          | "rst"
          | "sales_tax"
          | "service_tax"
          | "vat"
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_tax_rate> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/tax_rates/${p["taxRate"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTerminalConfigurations(
    p: {
      endingBefore?: string
      expand?: string[]
      isAccountDefault?: boolean
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_terminal_configuration[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/terminal/configurations`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      is_account_default: p["isAccountDefault"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTerminalConfigurations(
    p: {
      requestBody?: {
        bbpos_wisepos_e?: {
          splashscreen?: string | "" | UnknownEnumStringValue
        }
        expand?: string[]
        name?: string
        offline?:
          | {
              enabled: boolean
            }
          | ""
          | UnknownEnumStringValue
        reboot_window?: {
          end_hour: number
          start_hour: number
        }
        stripe_s700?: {
          splashscreen?: string | "" | UnknownEnumStringValue
        }
        tipping?:
          | {
              aud?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              cad?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              chf?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              czk?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              dkk?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              eur?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              gbp?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              hkd?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              jpy?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              myr?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              nok?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              nzd?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              pln?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              sek?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              sgd?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              usd?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
            }
          | ""
          | UnknownEnumStringValue
        verifone_p400?: {
          splashscreen?: string | "" | UnknownEnumStringValue
        }
        wifi?:
          | {
              enterprise_eap_peap?: {
                ca_certificate_file?: string
                password: string
                ssid: string
                username: string
              }
              enterprise_eap_tls?: {
                ca_certificate_file?: string
                client_certificate_file: string
                private_key_file: string
                private_key_file_password?: string
                ssid: string
              }
              personal_psk?: {
                password: string
                ssid: string
              }
              type:
                | "enterprise_eap_peap"
                | "enterprise_eap_tls"
                | "personal_psk"
                | UnknownEnumStringValue
            }
          | ""
          | UnknownEnumStringValue
      }
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_terminal_configuration> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/terminal/configurations`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            bbpos_wisepos_e: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            offline: {explode: true, style: "deepObject"},
            reboot_window: {explode: true, style: "deepObject"},
            stripe_s700: {explode: true, style: "deepObject"},
            tipping: {explode: true, style: "deepObject"},
            verifone_p400: {explode: true, style: "deepObject"},
            wifi: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteTerminalConfigurationsConfiguration(
    p: {
      configuration: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_deleted_terminal_configuration> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/terminal/configurations/${p["configuration"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async getTerminalConfigurationsConfiguration(
    p: {
      configuration: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<200, t_terminal_configuration | t_deleted_terminal_configuration>
    | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/terminal/configurations/${p["configuration"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTerminalConfigurationsConfiguration(
    p: {
      configuration: string
      requestBody?: {
        bbpos_wisepos_e?:
          | {
              splashscreen?: string | "" | UnknownEnumStringValue
            }
          | ""
          | UnknownEnumStringValue
        expand?: string[]
        name?: string
        offline?:
          | {
              enabled: boolean
            }
          | ""
          | UnknownEnumStringValue
        reboot_window?:
          | {
              end_hour: number
              start_hour: number
            }
          | ""
          | UnknownEnumStringValue
        stripe_s700?:
          | {
              splashscreen?: string | "" | UnknownEnumStringValue
            }
          | ""
          | UnknownEnumStringValue
        tipping?:
          | {
              aud?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              cad?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              chf?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              czk?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              dkk?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              eur?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              gbp?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              hkd?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              jpy?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              myr?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              nok?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              nzd?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              pln?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              sek?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              sgd?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
              usd?: {
                fixed_amounts?: number[]
                percentages?: number[]
                smart_tip_threshold?: number
              }
            }
          | ""
          | UnknownEnumStringValue
        verifone_p400?:
          | {
              splashscreen?: string | "" | UnknownEnumStringValue
            }
          | ""
          | UnknownEnumStringValue
        wifi?:
          | {
              enterprise_eap_peap?: {
                ca_certificate_file?: string
                password: string
                ssid: string
                username: string
              }
              enterprise_eap_tls?: {
                ca_certificate_file?: string
                client_certificate_file: string
                private_key_file: string
                private_key_file_password?: string
                ssid: string
              }
              personal_psk?: {
                password: string
                ssid: string
              }
              type:
                | "enterprise_eap_peap"
                | "enterprise_eap_tls"
                | "personal_psk"
                | UnknownEnumStringValue
            }
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<200, t_terminal_configuration | t_deleted_terminal_configuration>
    | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/terminal/configurations/${p["configuration"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            bbpos_wisepos_e: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            offline: {explode: true, style: "deepObject"},
            reboot_window: {explode: true, style: "deepObject"},
            stripe_s700: {explode: true, style: "deepObject"},
            tipping: {explode: true, style: "deepObject"},
            verifone_p400: {explode: true, style: "deepObject"},
            wifi: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTerminalConnectionTokens(
    p: {
      requestBody?: {
        expand?: string[]
        location?: string
      }
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_terminal_connection_token> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/terminal/connection_tokens`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTerminalLocations(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_terminal_location[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/terminal/locations`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTerminalLocations(
    p: {
      requestBody: {
        address: {
          city?: string
          country: string
          line1?: string
          line2?: string
          postal_code?: string
          state?: string
        }
        configuration_overrides?: string
        display_name: string
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_terminal_location> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/terminal/locations`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      address: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteTerminalLocationsLocation(
    p: {
      location: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_deleted_terminal_location> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/terminal/locations/${p["location"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async getTerminalLocationsLocation(
    p: {
      expand?: string[]
      location: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<200, t_terminal_location | t_deleted_terminal_location>
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/terminal/locations/${p["location"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTerminalLocationsLocation(
    p: {
      location: string
      requestBody?: {
        address?: {
          city?: string
          country?: string
          line1?: string
          line2?: string
          postal_code?: string
          state?: string
        }
        configuration_overrides?: string | "" | UnknownEnumStringValue
        display_name?: string | "" | UnknownEnumStringValue
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<200, t_terminal_location | t_deleted_terminal_location>
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/terminal/locations/${p["location"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            address: {explode: true, style: "deepObject"},
            configuration_overrides: {explode: true, style: "deepObject"},
            display_name: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTerminalReaders(
    p: {
      deviceType?:
        | "bbpos_chipper2x"
        | "bbpos_wisepad3"
        | "bbpos_wisepos_e"
        | "mobile_phone_reader"
        | "simulated_stripe_s700"
        | "simulated_wisepos_e"
        | "stripe_m2"
        | "stripe_s700"
        | "verifone_P400"
        | UnknownEnumStringValue
      endingBefore?: string
      expand?: string[]
      limit?: number
      location?: string
      serialNumber?: string
      startingAfter?: string
      status?: "offline" | "online" | UnknownEnumStringValue
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_terminal_reader[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/terminal/readers`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      device_type: p["deviceType"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      location: p["location"],
      serial_number: p["serialNumber"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTerminalReaders(
    p: {
      requestBody: {
        expand?: string[]
        label?: string
        location?: string
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        registration_code: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_terminal_reader> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/terminal/readers`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteTerminalReadersReader(
    p: {
      reader: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_deleted_terminal_reader> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/terminal/readers/${p["reader"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async getTerminalReadersReader(
    p: {
      expand?: string[]
      reader: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<200, t_terminal_reader | t_deleted_terminal_reader>
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/terminal/readers/${p["reader"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTerminalReadersReader(
    p: {
      reader: string
      requestBody?: {
        expand?: string[]
        label?: string | "" | UnknownEnumStringValue
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<200, t_terminal_reader | t_deleted_terminal_reader>
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/terminal/readers/${p["reader"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            label: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTerminalReadersReaderCancelAction(
    p: {
      reader: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_terminal_reader> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/terminal/readers/${p["reader"]}/cancel_action`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTerminalReadersReaderCollectInputs(
    p: {
      reader: string
      requestBody: {
        expand?: string[]
        inputs: {
          custom_text: {
            description?: string
            skip_button?: string
            submit_button?: string
            title: string
          }
          required?: boolean
          selection?: {
            choices: {
              id: string
              style?: "primary" | "secondary" | UnknownEnumStringValue
              text: string
            }[]
          }
          toggles?: {
            default_value?: "disabled" | "enabled" | UnknownEnumStringValue
            description?: string
            title?: string
          }[]
          type:
            | "email"
            | "numeric"
            | "phone"
            | "selection"
            | "signature"
            | "text"
            | UnknownEnumStringValue
        }[]
        metadata?: {
          [key: string]: string | undefined
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_terminal_reader> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/terminal/readers/${p["reader"]}/collect_inputs`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      inputs: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTerminalReadersReaderCollectPaymentMethod(
    p: {
      reader: string
      requestBody: {
        collect_config?: {
          allow_redisplay?:
            | "always"
            | "limited"
            | "unspecified"
            | UnknownEnumStringValue
          enable_customer_cancellation?: boolean
          skip_tipping?: boolean
          tipping?: {
            amount_eligible?: number
          }
        }
        expand?: string[]
        payment_intent: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_terminal_reader> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/terminal/readers/${p["reader"]}/collect_payment_method`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      collect_config: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTerminalReadersReaderConfirmPaymentIntent(
    p: {
      reader: string
      requestBody: {
        confirm_config?: {
          return_url?: string
        }
        expand?: string[]
        payment_intent: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_terminal_reader> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/terminal/readers/${p["reader"]}/confirm_payment_intent`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      confirm_config: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTerminalReadersReaderProcessPaymentIntent(
    p: {
      reader: string
      requestBody: {
        expand?: string[]
        payment_intent: string
        process_config?: {
          allow_redisplay?:
            | "always"
            | "limited"
            | "unspecified"
            | UnknownEnumStringValue
          enable_customer_cancellation?: boolean
          return_url?: string
          skip_tipping?: boolean
          tipping?: {
            amount_eligible?: number
          }
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_terminal_reader> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/terminal/readers/${p["reader"]}/process_payment_intent`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      process_config: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTerminalReadersReaderProcessSetupIntent(
    p: {
      reader: string
      requestBody: {
        allow_redisplay:
          | "always"
          | "limited"
          | "unspecified"
          | UnknownEnumStringValue
        expand?: string[]
        process_config?: {
          enable_customer_cancellation?: boolean
        }
        setup_intent: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_terminal_reader> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/terminal/readers/${p["reader"]}/process_setup_intent`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      process_config: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTerminalReadersReaderRefundPayment(
    p: {
      reader: string
      requestBody?: {
        amount?: number
        charge?: string
        expand?: string[]
        metadata?: {
          [key: string]: string | undefined
        }
        payment_intent?: string
        refund_application_fee?: boolean
        refund_payment_config?: {
          enable_customer_cancellation?: boolean
        }
        reverse_transfer?: boolean
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_terminal_reader> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/terminal/readers/${p["reader"]}/refund_payment`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            refund_payment_config: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTerminalReadersReaderSetReaderDisplay(
    p: {
      reader: string
      requestBody: {
        cart?: {
          currency: string
          line_items: {
            amount: number
            description: string
            quantity: number
          }[]
          tax?: number
          total: number
        }
        expand?: string[]
        type: "cart" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_terminal_reader> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/terminal/readers/${p["reader"]}/set_reader_display`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      cart: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersConfirmationTokens(
    p: {
      requestBody?: {
        expand?: string[]
        payment_method?: string
        payment_method_data?: {
          acss_debit?: {
            account_number: string
            institution_number: string
            transit_number: string
          }
          affirm?: EmptyObject
          afterpay_clearpay?: EmptyObject
          alipay?: EmptyObject
          allow_redisplay?:
            | "always"
            | "limited"
            | "unspecified"
            | UnknownEnumStringValue
          alma?: EmptyObject
          amazon_pay?: EmptyObject
          au_becs_debit?: {
            account_number: string
            bsb_number: string
          }
          bacs_debit?: {
            account_number?: string
            sort_code?: string
          }
          bancontact?: EmptyObject
          billie?: EmptyObject
          billing_details?: {
            address?:
              | {
                  city?: string
                  country?: string
                  line1?: string
                  line2?: string
                  postal_code?: string
                  state?: string
                }
              | ""
              | UnknownEnumStringValue
            email?: string | "" | UnknownEnumStringValue
            name?: string | "" | UnknownEnumStringValue
            phone?: string | "" | UnknownEnumStringValue
            tax_id?: string
          }
          blik?: EmptyObject
          boleto?: {
            tax_id: string
          }
          cashapp?: EmptyObject
          crypto?: EmptyObject
          customer_balance?: EmptyObject
          eps?: {
            bank?:
              | "arzte_und_apotheker_bank"
              | "austrian_anadi_bank_ag"
              | "bank_austria"
              | "bankhaus_carl_spangler"
              | "bankhaus_schelhammer_und_schattera_ag"
              | "bawag_psk_ag"
              | "bks_bank_ag"
              | "brull_kallmus_bank_ag"
              | "btv_vier_lander_bank"
              | "capital_bank_grawe_gruppe_ag"
              | "deutsche_bank_ag"
              | "dolomitenbank"
              | "easybank_ag"
              | "erste_bank_und_sparkassen"
              | "hypo_alpeadriabank_international_ag"
              | "hypo_bank_burgenland_aktiengesellschaft"
              | "hypo_noe_lb_fur_niederosterreich_u_wien"
              | "hypo_oberosterreich_salzburg_steiermark"
              | "hypo_tirol_bank_ag"
              | "hypo_vorarlberg_bank_ag"
              | "marchfelder_bank"
              | "oberbank_ag"
              | "raiffeisen_bankengruppe_osterreich"
              | "schoellerbank_ag"
              | "sparda_bank_wien"
              | "volksbank_gruppe"
              | "volkskreditbank_ag"
              | "vr_bank_braunau"
              | UnknownEnumStringValue
          }
          fpx?: {
            bank:
              | "affin_bank"
              | "agrobank"
              | "alliance_bank"
              | "ambank"
              | "bank_islam"
              | "bank_muamalat"
              | "bank_of_china"
              | "bank_rakyat"
              | "bsn"
              | "cimb"
              | "deutsche_bank"
              | "hong_leong_bank"
              | "hsbc"
              | "kfh"
              | "maybank2e"
              | "maybank2u"
              | "ocbc"
              | "pb_enterprise"
              | "public_bank"
              | "rhb"
              | "standard_chartered"
              | "uob"
              | UnknownEnumStringValue
          }
          giropay?: EmptyObject
          grabpay?: EmptyObject
          ideal?: {
            bank?:
              | "abn_amro"
              | "asn_bank"
              | "bunq"
              | "buut"
              | "handelsbanken"
              | "ing"
              | "knab"
              | "moneyou"
              | "n26"
              | "nn"
              | "rabobank"
              | "regiobank"
              | "revolut"
              | "sns_bank"
              | "triodos_bank"
              | "van_lanschot"
              | "yoursafe"
              | UnknownEnumStringValue
          }
          interac_present?: EmptyObject
          kakao_pay?: EmptyObject
          klarna?: {
            dob?: {
              day: number
              month: number
              year: number
            }
          }
          konbini?: EmptyObject
          kr_card?: EmptyObject
          link?: EmptyObject
          metadata?: {
            [key: string]: string | undefined
          }
          mobilepay?: EmptyObject
          multibanco?: EmptyObject
          naver_pay?: {
            funding?: "card" | "points" | UnknownEnumStringValue
          }
          nz_bank_account?: {
            account_holder_name?: string
            account_number: string
            bank_code: string
            branch_code: string
            reference?: string
            suffix: string
          }
          oxxo?: EmptyObject
          p24?: {
            bank?:
              | "alior_bank"
              | "bank_millennium"
              | "bank_nowy_bfg_sa"
              | "bank_pekao_sa"
              | "banki_spbdzielcze"
              | "blik"
              | "bnp_paribas"
              | "boz"
              | "citi_handlowy"
              | "credit_agricole"
              | "envelobank"
              | "etransfer_pocztowy24"
              | "getin_bank"
              | "ideabank"
              | "ing"
              | "inteligo"
              | "mbank_mtransfer"
              | "nest_przelew"
              | "noble_pay"
              | "pbac_z_ipko"
              | "plus_bank"
              | "santander_przelew24"
              | "tmobile_usbugi_bankowe"
              | "toyota_bank"
              | "velobank"
              | "volkswagen_bank"
              | UnknownEnumStringValue
          }
          pay_by_bank?: EmptyObject
          payco?: EmptyObject
          paynow?: EmptyObject
          paypal?: EmptyObject
          pix?: EmptyObject
          promptpay?: EmptyObject
          radar_options?: {
            session?: string
          }
          revolut_pay?: EmptyObject
          samsung_pay?: EmptyObject
          satispay?: EmptyObject
          sepa_debit?: {
            iban: string
          }
          sofort?: {
            country:
              | "AT"
              | "BE"
              | "DE"
              | "ES"
              | "IT"
              | "NL"
              | UnknownEnumStringValue
          }
          swish?: EmptyObject
          twint?: EmptyObject
          type:
            | "acss_debit"
            | "affirm"
            | "afterpay_clearpay"
            | "alipay"
            | "alma"
            | "amazon_pay"
            | "au_becs_debit"
            | "bacs_debit"
            | "bancontact"
            | "billie"
            | "blik"
            | "boleto"
            | "cashapp"
            | "crypto"
            | "customer_balance"
            | "eps"
            | "fpx"
            | "giropay"
            | "grabpay"
            | "ideal"
            | "kakao_pay"
            | "klarna"
            | "konbini"
            | "kr_card"
            | "link"
            | "mobilepay"
            | "multibanco"
            | "naver_pay"
            | "nz_bank_account"
            | "oxxo"
            | "p24"
            | "pay_by_bank"
            | "payco"
            | "paynow"
            | "paypal"
            | "pix"
            | "promptpay"
            | "revolut_pay"
            | "samsung_pay"
            | "satispay"
            | "sepa_debit"
            | "sofort"
            | "swish"
            | "twint"
            | "us_bank_account"
            | "wechat_pay"
            | "zip"
            | UnknownEnumStringValue
          us_bank_account?: {
            account_holder_type?:
              | "company"
              | "individual"
              | UnknownEnumStringValue
            account_number?: string
            account_type?: "checking" | "savings" | UnknownEnumStringValue
            financial_connections_account?: string
            routing_number?: string
          }
          wechat_pay?: EmptyObject
          zip?: EmptyObject
        }
        payment_method_options?: {
          card?: {
            installments?: {
              plan: {
                count?: number
                interval?: "month" | UnknownEnumStringValue
                type:
                  | "bonus"
                  | "fixed_count"
                  | "revolving"
                  | UnknownEnumStringValue
              }
            }
          }
        }
        return_url?: string
        setup_future_usage?:
          | "off_session"
          | "on_session"
          | UnknownEnumStringValue
        shipping?: {
          address: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
          }
          name: string
          phone?: string | "" | UnknownEnumStringValue
        }
      }
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_confirmation_token> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/test_helpers/confirmation_tokens`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            payment_method_data: {explode: true, style: "deepObject"},
            payment_method_options: {explode: true, style: "deepObject"},
            shipping: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersCustomersCustomerFundCashBalance(
    p: {
      customer: string
      requestBody: {
        amount: number
        currency: string
        expand?: string[]
        reference?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_customer_cash_balance_transaction> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/test_helpers/customers/${p["customer"]}/fund_cash_balance`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersIssuingAuthorizations(
    p: {
      requestBody: {
        amount?: number
        amount_details?: {
          atm_fee?: number
          cashback_amount?: number
        }
        authorization_method?:
          | "chip"
          | "contactless"
          | "keyed_in"
          | "online"
          | "swipe"
          | UnknownEnumStringValue
        card: string
        currency?: string
        expand?: string[]
        fleet?: {
          cardholder_prompt_data?: {
            driver_id?: string
            odometer?: number
            unspecified_id?: string
            user_id?: string
            vehicle_number?: string
          }
          purchase_type?:
            | "fuel_and_non_fuel_purchase"
            | "fuel_purchase"
            | "non_fuel_purchase"
            | UnknownEnumStringValue
          reported_breakdown?: {
            fuel?: {
              gross_amount_decimal?: string
            }
            non_fuel?: {
              gross_amount_decimal?: string
            }
            tax?: {
              local_amount_decimal?: string
              national_amount_decimal?: string
            }
          }
          service_type?:
            | "full_service"
            | "non_fuel_transaction"
            | "self_service"
            | UnknownEnumStringValue
        }
        fuel?: {
          industry_product_code?: string
          quantity_decimal?: string
          type?:
            | "diesel"
            | "other"
            | "unleaded_plus"
            | "unleaded_regular"
            | "unleaded_super"
            | UnknownEnumStringValue
          unit?:
            | "charging_minute"
            | "imperial_gallon"
            | "kilogram"
            | "kilowatt_hour"
            | "liter"
            | "other"
            | "pound"
            | "us_gallon"
            | UnknownEnumStringValue
          unit_cost_decimal?: string
        }
        is_amount_controllable?: boolean
        merchant_amount?: number
        merchant_currency?: string
        merchant_data?: {
          category?:
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electric_vehicle_charging"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "emergency_services_gcas_visa_use_only"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_licensed_horse_dog_racing_us_region_only"
            | "government_licensed_online_casions_online_gambling_us_region_only"
            | "government_owned_lotteries_non_us_region"
            | "government_owned_lotteries_us_region_only"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "marketplaces"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
            | UnknownEnumStringValue
          city?: string
          country?: string
          name?: string
          network_id?: string
          postal_code?: string
          state?: string
          terminal_id?: string
          url?: string
        }
        network_data?: {
          acquiring_institution_id?: string
        }
        verification_data?: {
          address_line1_check?:
            | "match"
            | "mismatch"
            | "not_provided"
            | UnknownEnumStringValue
          address_postal_code_check?:
            | "match"
            | "mismatch"
            | "not_provided"
            | UnknownEnumStringValue
          authentication_exemption?: {
            claimed_by: "acquirer" | "issuer" | UnknownEnumStringValue
            type:
              | "low_value_transaction"
              | "transaction_risk_analysis"
              | "unknown"
              | UnknownEnumStringValue
          }
          cvc_check?:
            | "match"
            | "mismatch"
            | "not_provided"
            | UnknownEnumStringValue
          expiry_check?:
            | "match"
            | "mismatch"
            | "not_provided"
            | UnknownEnumStringValue
          three_d_secure?: {
            result:
              | "attempt_acknowledged"
              | "authenticated"
              | "failed"
              | "required"
              | UnknownEnumStringValue
          }
        }
        wallet?:
          | "apple_pay"
          | "google_pay"
          | "samsung_pay"
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_authorization> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/test_helpers/issuing/authorizations`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      amount_details: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
      fleet: {explode: true, style: "deepObject"},
      fuel: {explode: true, style: "deepObject"},
      merchant_data: {explode: true, style: "deepObject"},
      network_data: {explode: true, style: "deepObject"},
      verification_data: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersIssuingAuthorizationsAuthorizationCapture(
    p: {
      authorization: string
      requestBody?: {
        capture_amount?: number
        close_authorization?: boolean
        expand?: string[]
        purchase_details?: {
          fleet?: {
            cardholder_prompt_data?: {
              driver_id?: string
              odometer?: number
              unspecified_id?: string
              user_id?: string
              vehicle_number?: string
            }
            purchase_type?:
              | "fuel_and_non_fuel_purchase"
              | "fuel_purchase"
              | "non_fuel_purchase"
              | UnknownEnumStringValue
            reported_breakdown?: {
              fuel?: {
                gross_amount_decimal?: string
              }
              non_fuel?: {
                gross_amount_decimal?: string
              }
              tax?: {
                local_amount_decimal?: string
                national_amount_decimal?: string
              }
            }
            service_type?:
              | "full_service"
              | "non_fuel_transaction"
              | "self_service"
              | UnknownEnumStringValue
          }
          flight?: {
            departure_at?: number
            passenger_name?: string
            refundable?: boolean
            segments?: {
              arrival_airport_code?: string
              carrier?: string
              departure_airport_code?: string
              flight_number?: string
              service_class?: string
              stopover_allowed?: boolean
            }[]
            travel_agency?: string
          }
          fuel?: {
            industry_product_code?: string
            quantity_decimal?: string
            type?:
              | "diesel"
              | "other"
              | "unleaded_plus"
              | "unleaded_regular"
              | "unleaded_super"
              | UnknownEnumStringValue
            unit?:
              | "charging_minute"
              | "imperial_gallon"
              | "kilogram"
              | "kilowatt_hour"
              | "liter"
              | "other"
              | "pound"
              | "us_gallon"
              | UnknownEnumStringValue
            unit_cost_decimal?: string
          }
          lodging?: {
            check_in_at?: number
            nights?: number
          }
          receipt?: {
            description?: string
            quantity?: string
            total?: number
            unit_cost?: number
          }[]
          reference?: string
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_authorization> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/test_helpers/issuing/authorizations/${p["authorization"]}/capture`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            purchase_details: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersIssuingAuthorizationsAuthorizationExpire(
    p: {
      authorization: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_authorization> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/test_helpers/issuing/authorizations/${p["authorization"]}/expire`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersIssuingAuthorizationsAuthorizationFinalizeAmount(
    p: {
      authorization: string
      requestBody: {
        expand?: string[]
        final_amount: number
        fleet?: {
          cardholder_prompt_data?: {
            driver_id?: string
            odometer?: number
            unspecified_id?: string
            user_id?: string
            vehicle_number?: string
          }
          purchase_type?:
            | "fuel_and_non_fuel_purchase"
            | "fuel_purchase"
            | "non_fuel_purchase"
            | UnknownEnumStringValue
          reported_breakdown?: {
            fuel?: {
              gross_amount_decimal?: string
            }
            non_fuel?: {
              gross_amount_decimal?: string
            }
            tax?: {
              local_amount_decimal?: string
              national_amount_decimal?: string
            }
          }
          service_type?:
            | "full_service"
            | "non_fuel_transaction"
            | "self_service"
            | UnknownEnumStringValue
        }
        fuel?: {
          industry_product_code?: string
          quantity_decimal?: string
          type?:
            | "diesel"
            | "other"
            | "unleaded_plus"
            | "unleaded_regular"
            | "unleaded_super"
            | UnknownEnumStringValue
          unit?:
            | "charging_minute"
            | "imperial_gallon"
            | "kilogram"
            | "kilowatt_hour"
            | "liter"
            | "other"
            | "pound"
            | "us_gallon"
            | UnknownEnumStringValue
          unit_cost_decimal?: string
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_authorization> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/test_helpers/issuing/authorizations/${p["authorization"]}/finalize_amount`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      fleet: {explode: true, style: "deepObject"},
      fuel: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespond(
    p: {
      authorization: string
      requestBody: {
        confirmed: boolean
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_authorization> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/test_helpers/issuing/authorizations/${p["authorization"]}/fraud_challenges/respond`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersIssuingAuthorizationsAuthorizationIncrement(
    p: {
      authorization: string
      requestBody: {
        expand?: string[]
        increment_amount: number
        is_amount_controllable?: boolean
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_authorization> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/test_helpers/issuing/authorizations/${p["authorization"]}/increment`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersIssuingAuthorizationsAuthorizationReverse(
    p: {
      authorization: string
      requestBody?: {
        expand?: string[]
        reverse_amount?: number
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_authorization> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/test_helpers/issuing/authorizations/${p["authorization"]}/reverse`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersIssuingCardsCardShippingDeliver(
    p: {
      card: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_card> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/test_helpers/issuing/cards/${p["card"]}/shipping/deliver`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersIssuingCardsCardShippingFail(
    p: {
      card: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_card> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/test_helpers/issuing/cards/${p["card"]}/shipping/fail`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersIssuingCardsCardShippingReturn(
    p: {
      card: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_card> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/test_helpers/issuing/cards/${p["card"]}/shipping/return`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersIssuingCardsCardShippingShip(
    p: {
      card: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_card> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/test_helpers/issuing/cards/${p["card"]}/shipping/ship`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersIssuingCardsCardShippingSubmit(
    p: {
      card: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_card> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/test_helpers/issuing/cards/${p["card"]}/shipping/submit`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivate(
    p: {
      personalizationDesign: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_issuing_personalization_design> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/test_helpers/issuing/personalization_designs/${p["personalizationDesign"]}/activate`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivate(
    p: {
      personalizationDesign: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_issuing_personalization_design> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/test_helpers/issuing/personalization_designs/${p["personalizationDesign"]}/deactivate`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignReject(
    p: {
      personalizationDesign: string
      requestBody: {
        expand?: string[]
        rejection_reasons: {
          card_logo?: (
            | "geographic_location"
            | "inappropriate"
            | "network_name"
            | "non_binary_image"
            | "non_fiat_currency"
            | "other"
            | "other_entity"
            | "promotional_material"
            | UnknownEnumStringValue
          )[]
          carrier_text?: (
            | "geographic_location"
            | "inappropriate"
            | "network_name"
            | "non_fiat_currency"
            | "other"
            | "other_entity"
            | "promotional_material"
            | UnknownEnumStringValue
          )[]
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_issuing_personalization_design> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/test_helpers/issuing/personalization_designs/${p["personalizationDesign"]}/reject`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      rejection_reasons: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersIssuingSettlements(
    p: {
      requestBody: {
        bin: string
        clearing_date: number
        currency: string
        expand?: string[]
        interchange_fees_amount?: number
        net_total_amount: number
        network?: "maestro" | "visa" | UnknownEnumStringValue
        network_settlement_identifier?: string
        transaction_amount?: number
        transaction_count?: number
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_settlement> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/test_helpers/issuing/settlements`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersIssuingSettlementsSettlementComplete(
    p: {
      settlement: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_settlement> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/test_helpers/issuing/settlements/${p["settlement"]}/complete`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersIssuingTransactionsCreateForceCapture(
    p: {
      requestBody: {
        amount: number
        card: string
        currency?: string
        expand?: string[]
        merchant_data?: {
          category?:
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electric_vehicle_charging"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "emergency_services_gcas_visa_use_only"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_licensed_horse_dog_racing_us_region_only"
            | "government_licensed_online_casions_online_gambling_us_region_only"
            | "government_owned_lotteries_non_us_region"
            | "government_owned_lotteries_us_region_only"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "marketplaces"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
            | UnknownEnumStringValue
          city?: string
          country?: string
          name?: string
          network_id?: string
          postal_code?: string
          state?: string
          terminal_id?: string
          url?: string
        }
        purchase_details?: {
          fleet?: {
            cardholder_prompt_data?: {
              driver_id?: string
              odometer?: number
              unspecified_id?: string
              user_id?: string
              vehicle_number?: string
            }
            purchase_type?:
              | "fuel_and_non_fuel_purchase"
              | "fuel_purchase"
              | "non_fuel_purchase"
              | UnknownEnumStringValue
            reported_breakdown?: {
              fuel?: {
                gross_amount_decimal?: string
              }
              non_fuel?: {
                gross_amount_decimal?: string
              }
              tax?: {
                local_amount_decimal?: string
                national_amount_decimal?: string
              }
            }
            service_type?:
              | "full_service"
              | "non_fuel_transaction"
              | "self_service"
              | UnknownEnumStringValue
          }
          flight?: {
            departure_at?: number
            passenger_name?: string
            refundable?: boolean
            segments?: {
              arrival_airport_code?: string
              carrier?: string
              departure_airport_code?: string
              flight_number?: string
              service_class?: string
              stopover_allowed?: boolean
            }[]
            travel_agency?: string
          }
          fuel?: {
            industry_product_code?: string
            quantity_decimal?: string
            type?:
              | "diesel"
              | "other"
              | "unleaded_plus"
              | "unleaded_regular"
              | "unleaded_super"
              | UnknownEnumStringValue
            unit?:
              | "charging_minute"
              | "imperial_gallon"
              | "kilogram"
              | "kilowatt_hour"
              | "liter"
              | "other"
              | "pound"
              | "us_gallon"
              | UnknownEnumStringValue
            unit_cost_decimal?: string
          }
          lodging?: {
            check_in_at?: number
            nights?: number
          }
          receipt?: {
            description?: string
            quantity?: string
            total?: number
            unit_cost?: number
          }[]
          reference?: string
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_transaction> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/test_helpers/issuing/transactions/create_force_capture`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      merchant_data: {explode: true, style: "deepObject"},
      purchase_details: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersIssuingTransactionsCreateUnlinkedRefund(
    p: {
      requestBody: {
        amount: number
        card: string
        currency?: string
        expand?: string[]
        merchant_data?: {
          category?:
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electric_vehicle_charging"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "emergency_services_gcas_visa_use_only"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_licensed_horse_dog_racing_us_region_only"
            | "government_licensed_online_casions_online_gambling_us_region_only"
            | "government_owned_lotteries_non_us_region"
            | "government_owned_lotteries_us_region_only"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "marketplaces"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
            | UnknownEnumStringValue
          city?: string
          country?: string
          name?: string
          network_id?: string
          postal_code?: string
          state?: string
          terminal_id?: string
          url?: string
        }
        purchase_details?: {
          fleet?: {
            cardholder_prompt_data?: {
              driver_id?: string
              odometer?: number
              unspecified_id?: string
              user_id?: string
              vehicle_number?: string
            }
            purchase_type?:
              | "fuel_and_non_fuel_purchase"
              | "fuel_purchase"
              | "non_fuel_purchase"
              | UnknownEnumStringValue
            reported_breakdown?: {
              fuel?: {
                gross_amount_decimal?: string
              }
              non_fuel?: {
                gross_amount_decimal?: string
              }
              tax?: {
                local_amount_decimal?: string
                national_amount_decimal?: string
              }
            }
            service_type?:
              | "full_service"
              | "non_fuel_transaction"
              | "self_service"
              | UnknownEnumStringValue
          }
          flight?: {
            departure_at?: number
            passenger_name?: string
            refundable?: boolean
            segments?: {
              arrival_airport_code?: string
              carrier?: string
              departure_airport_code?: string
              flight_number?: string
              service_class?: string
              stopover_allowed?: boolean
            }[]
            travel_agency?: string
          }
          fuel?: {
            industry_product_code?: string
            quantity_decimal?: string
            type?:
              | "diesel"
              | "other"
              | "unleaded_plus"
              | "unleaded_regular"
              | "unleaded_super"
              | UnknownEnumStringValue
            unit?:
              | "charging_minute"
              | "imperial_gallon"
              | "kilogram"
              | "kilowatt_hour"
              | "liter"
              | "other"
              | "pound"
              | "us_gallon"
              | UnknownEnumStringValue
            unit_cost_decimal?: string
          }
          lodging?: {
            check_in_at?: number
            nights?: number
          }
          receipt?: {
            description?: string
            quantity?: string
            total?: number
            unit_cost?: number
          }[]
          reference?: string
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_transaction> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/test_helpers/issuing/transactions/create_unlinked_refund`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      merchant_data: {explode: true, style: "deepObject"},
      purchase_details: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersIssuingTransactionsTransactionRefund(
    p: {
      transaction: string
      requestBody?: {
        expand?: string[]
        refund_amount?: number
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_issuing_transaction> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/test_helpers/issuing/transactions/${p["transaction"]}/refund`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersRefundsRefundExpire(
    p: {
      refund: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_refund> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/test_helpers/refunds/${p["refund"]}/expire`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersTerminalReadersReaderPresentPaymentMethod(
    p: {
      reader: string
      requestBody?: {
        amount_tip?: number
        card_present?: {
          number?: string
        }
        expand?: string[]
        interac_present?: {
          number?: string
        }
        type?: "card_present" | "interac_present" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_terminal_reader> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/test_helpers/terminal/readers/${p["reader"]}/present_payment_method`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            card_present: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            interac_present: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersTerminalReadersReaderSucceedInputCollection(
    p: {
      reader: string
      requestBody?: {
        expand?: string[]
        skip_non_required_inputs?: "all" | "none" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_terminal_reader> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/test_helpers/terminal/readers/${p["reader"]}/succeed_input_collection`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersTerminalReadersReaderTimeoutInputCollection(
    p: {
      reader: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_terminal_reader> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/test_helpers/terminal/readers/${p["reader"]}/timeout_input_collection`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTestHelpersTestClocks(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_test_helpers_test_clock[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/test_helpers/test_clocks`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTestHelpersTestClocks(
    p: {
      requestBody: {
        expand?: string[]
        frozen_time: number
        name?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_test_helpers_test_clock> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/test_helpers/test_clocks`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteTestHelpersTestClocksTestClock(
    p: {
      testClock: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_deleted_test_helpers_test_clock> | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/test_helpers/test_clocks/${p["testClock"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async getTestHelpersTestClocksTestClock(
    p: {
      expand?: string[]
      testClock: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_test_helpers_test_clock> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/test_helpers/test_clocks/${p["testClock"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTestHelpersTestClocksTestClockAdvance(
    p: {
      testClock: string
      requestBody: {
        expand?: string[]
        frozen_time: number
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_test_helpers_test_clock> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/test_helpers/test_clocks/${p["testClock"]}/advance`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersTreasuryInboundTransfersIdFail(
    p: {
      id: string
      requestBody?: {
        expand?: string[]
        failure_details?: {
          code?:
            | "account_closed"
            | "account_frozen"
            | "bank_account_restricted"
            | "bank_ownership_changed"
            | "debit_not_authorized"
            | "incorrect_account_holder_address"
            | "incorrect_account_holder_name"
            | "incorrect_account_holder_tax_id"
            | "insufficient_funds"
            | "invalid_account_number"
            | "invalid_currency"
            | "no_account"
            | "other"
            | UnknownEnumStringValue
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_treasury_inbound_transfer> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/test_helpers/treasury/inbound_transfers/${p["id"]}/fail`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            failure_details: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersTreasuryInboundTransfersIdReturn(
    p: {
      id: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_treasury_inbound_transfer> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/test_helpers/treasury/inbound_transfers/${p["id"]}/return`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersTreasuryInboundTransfersIdSucceed(
    p: {
      id: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_treasury_inbound_transfer> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/test_helpers/treasury/inbound_transfers/${p["id"]}/succeed`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersTreasuryOutboundPaymentsId(
    p: {
      id: string
      requestBody: {
        expand?: string[]
        tracking_details: {
          ach?: {
            trace_id: string
          }
          type: "ach" | "us_domestic_wire" | UnknownEnumStringValue
          us_domestic_wire?: {
            chips?: string
            imad?: string
            omad?: string
          }
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_treasury_outbound_payment> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/test_helpers/treasury/outbound_payments/${p["id"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      tracking_details: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersTreasuryOutboundPaymentsIdFail(
    p: {
      id: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_treasury_outbound_payment> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/test_helpers/treasury/outbound_payments/${p["id"]}/fail`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersTreasuryOutboundPaymentsIdPost(
    p: {
      id: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_treasury_outbound_payment> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/test_helpers/treasury/outbound_payments/${p["id"]}/post`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersTreasuryOutboundPaymentsIdReturn(
    p: {
      id: string
      requestBody?: {
        expand?: string[]
        returned_details?: {
          code?:
            | "account_closed"
            | "account_frozen"
            | "bank_account_restricted"
            | "bank_ownership_changed"
            | "declined"
            | "incorrect_account_holder_name"
            | "invalid_account_number"
            | "invalid_currency"
            | "no_account"
            | "other"
            | UnknownEnumStringValue
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_treasury_outbound_payment> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/test_helpers/treasury/outbound_payments/${p["id"]}/return`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            returned_details: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersTreasuryOutboundTransfersOutboundTransfer(
    p: {
      outboundTransfer: string
      requestBody: {
        expand?: string[]
        tracking_details: {
          ach?: {
            trace_id: string
          }
          type: "ach" | "us_domestic_wire" | UnknownEnumStringValue
          us_domestic_wire?: {
            chips?: string
            imad?: string
            omad?: string
          }
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_treasury_outbound_transfer> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/test_helpers/treasury/outbound_transfers/${p["outboundTransfer"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      tracking_details: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersTreasuryOutboundTransfersOutboundTransferFail(
    p: {
      outboundTransfer: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_treasury_outbound_transfer> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/test_helpers/treasury/outbound_transfers/${p["outboundTransfer"]}/fail`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersTreasuryOutboundTransfersOutboundTransferPost(
    p: {
      outboundTransfer: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_treasury_outbound_transfer> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/test_helpers/treasury/outbound_transfers/${p["outboundTransfer"]}/post`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersTreasuryOutboundTransfersOutboundTransferReturn(
    p: {
      outboundTransfer: string
      requestBody?: {
        expand?: string[]
        returned_details?: {
          code?:
            | "account_closed"
            | "account_frozen"
            | "bank_account_restricted"
            | "bank_ownership_changed"
            | "declined"
            | "incorrect_account_holder_name"
            | "invalid_account_number"
            | "invalid_currency"
            | "no_account"
            | "other"
            | UnknownEnumStringValue
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_treasury_outbound_transfer> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/test_helpers/treasury/outbound_transfers/${p["outboundTransfer"]}/return`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            returned_details: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersTreasuryReceivedCredits(
    p: {
      requestBody: {
        amount: number
        currency: string
        description?: string
        expand?: string[]
        financial_account: string
        initiating_payment_method_details?: {
          type: "us_bank_account" | UnknownEnumStringValue
          us_bank_account?: {
            account_holder_name?: string
            account_number?: string
            routing_number?: string
          }
        }
        network: "ach" | "us_domestic_wire" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_treasury_received_credit> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/test_helpers/treasury/received_credits`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      initiating_payment_method_details: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTestHelpersTreasuryReceivedDebits(
    p: {
      requestBody: {
        amount: number
        currency: string
        description?: string
        expand?: string[]
        financial_account: string
        initiating_payment_method_details?: {
          type: "us_bank_account" | UnknownEnumStringValue
          us_bank_account?: {
            account_holder_name?: string
            account_number?: string
            routing_number?: string
          }
        }
        network: "ach" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_treasury_received_debit> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/test_helpers/treasury/received_debits`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      initiating_payment_method_details: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTokens(
    p: {
      requestBody?: {
        account?: {
          business_type?:
            | "company"
            | "government_entity"
            | "individual"
            | "non_profit"
            | UnknownEnumStringValue
          company?: {
            address?: {
              city?: string
              country?: string
              line1?: string
              line2?: string
              postal_code?: string
              state?: string
            }
            address_kana?: {
              city?: string
              country?: string
              line1?: string
              line2?: string
              postal_code?: string
              state?: string
              town?: string
            }
            address_kanji?: {
              city?: string
              country?: string
              line1?: string
              line2?: string
              postal_code?: string
              state?: string
              town?: string
            }
            directors_provided?: boolean
            directorship_declaration?: {
              date?: number
              ip?: string
              user_agent?: string
            }
            executives_provided?: boolean
            export_license_id?: string
            export_purpose_code?: string
            name?: string
            name_kana?: string
            name_kanji?: string
            owners_provided?: boolean
            ownership_declaration?: {
              date?: number
              ip?: string
              user_agent?: string
            }
            ownership_declaration_shown_and_signed?: boolean
            ownership_exemption_reason?:
              | ""
              | "qualified_entity_exceeds_ownership_threshold"
              | "qualifies_as_financial_institution"
              | UnknownEnumStringValue
            phone?: string
            registration_date?:
              | {
                  day: number
                  month: number
                  year: number
                }
              | ""
              | UnknownEnumStringValue
            registration_number?: string
            structure?:
              | ""
              | "free_zone_establishment"
              | "free_zone_llc"
              | "government_instrumentality"
              | "governmental_unit"
              | "incorporated_non_profit"
              | "incorporated_partnership"
              | "limited_liability_partnership"
              | "llc"
              | "multi_member_llc"
              | "private_company"
              | "private_corporation"
              | "private_partnership"
              | "public_company"
              | "public_corporation"
              | "public_partnership"
              | "registered_charity"
              | "single_member_llc"
              | "sole_establishment"
              | "sole_proprietorship"
              | "tax_exempt_government_instrumentality"
              | "unincorporated_association"
              | "unincorporated_non_profit"
              | "unincorporated_partnership"
              | UnknownEnumStringValue
            tax_id?: string
            tax_id_registrar?: string
            vat_id?: string
            verification?: {
              document?: {
                back?: string
                front?: string
              }
            }
          }
          individual?: {
            address?: {
              city?: string
              country?: string
              line1?: string
              line2?: string
              postal_code?: string
              state?: string
            }
            address_kana?: {
              city?: string
              country?: string
              line1?: string
              line2?: string
              postal_code?: string
              state?: string
              town?: string
            }
            address_kanji?: {
              city?: string
              country?: string
              line1?: string
              line2?: string
              postal_code?: string
              state?: string
              town?: string
            }
            dob?:
              | {
                  day: number
                  month: number
                  year: number
                }
              | ""
              | UnknownEnumStringValue
            email?: string
            first_name?: string
            first_name_kana?: string
            first_name_kanji?: string
            full_name_aliases?: string[] | "" | UnknownEnumStringValue
            gender?: string
            id_number?: string
            id_number_secondary?: string
            last_name?: string
            last_name_kana?: string
            last_name_kanji?: string
            maiden_name?: string
            metadata?:
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            phone?: string
            political_exposure?: "existing" | "none" | UnknownEnumStringValue
            registered_address?: {
              city?: string
              country?: string
              line1?: string
              line2?: string
              postal_code?: string
              state?: string
            }
            relationship?: {
              director?: boolean
              executive?: boolean
              owner?: boolean
              percent_ownership?: number | "" | UnknownEnumStringValue
              title?: string
            }
            ssn_last_4?: string
            verification?: {
              additional_document?: {
                back?: string
                front?: string
              }
              document?: {
                back?: string
                front?: string
              }
            }
          }
          tos_shown_and_accepted?: boolean
        }
        bank_account?: {
          account_holder_name?: string
          account_holder_type?:
            | "company"
            | "individual"
            | UnknownEnumStringValue
          account_number: string
          account_type?:
            | "checking"
            | "futsu"
            | "savings"
            | "toza"
            | UnknownEnumStringValue
          country: string
          currency?: string
          payment_method?: string
          routing_number?: string
        }
        card?:
          | {
              address_city?: string
              address_country?: string
              address_line1?: string
              address_line2?: string
              address_state?: string
              address_zip?: string
              currency?: string
              cvc?: string
              exp_month: string
              exp_year: string
              name?: string
              networks?: {
                preferred?:
                  | "cartes_bancaires"
                  | "mastercard"
                  | "visa"
                  | UnknownEnumStringValue
              }
              number: string
            }
          | string
        customer?: string
        cvc_update?: {
          cvc: string
        }
        expand?: string[]
        person?: {
          additional_tos_acceptances?: {
            account?: {
              date?: number
              ip?: string
              user_agent?: string | "" | UnknownEnumStringValue
            }
          }
          address?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
          }
          address_kana?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
            town?: string
          }
          address_kanji?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
            town?: string
          }
          dob?:
            | {
                day: number
                month: number
                year: number
              }
            | ""
            | UnknownEnumStringValue
          documents?: {
            company_authorization?: {
              files?: (string | "" | UnknownEnumStringValue)[]
            }
            passport?: {
              files?: (string | "" | UnknownEnumStringValue)[]
            }
            visa?: {
              files?: (string | "" | UnknownEnumStringValue)[]
            }
          }
          email?: string
          first_name?: string
          first_name_kana?: string
          first_name_kanji?: string
          full_name_aliases?: string[] | "" | UnknownEnumStringValue
          gender?: string
          id_number?: string
          id_number_secondary?: string
          last_name?: string
          last_name_kana?: string
          last_name_kanji?: string
          maiden_name?: string
          metadata?:
            | {
                [key: string]: string | undefined
              }
            | ""
            | UnknownEnumStringValue
          nationality?: string
          phone?: string
          political_exposure?: "existing" | "none" | UnknownEnumStringValue
          registered_address?: {
            city?: string
            country?: string
            line1?: string
            line2?: string
            postal_code?: string
            state?: string
          }
          relationship?: {
            authorizer?: boolean
            director?: boolean
            executive?: boolean
            legal_guardian?: boolean
            owner?: boolean
            percent_ownership?: number | "" | UnknownEnumStringValue
            representative?: boolean
            title?: string
          }
          ssn_last_4?: string
          us_cfpb_data?: {
            ethnicity_details?: {
              ethnicity?: (
                | "cuban"
                | "hispanic_or_latino"
                | "mexican"
                | "not_hispanic_or_latino"
                | "other_hispanic_or_latino"
                | "prefer_not_to_answer"
                | "puerto_rican"
                | UnknownEnumStringValue
              )[]
              ethnicity_other?: string
            }
            race_details?: {
              race?: (
                | "african_american"
                | "american_indian_or_alaska_native"
                | "asian"
                | "asian_indian"
                | "black_or_african_american"
                | "chinese"
                | "ethiopian"
                | "filipino"
                | "guamanian_or_chamorro"
                | "haitian"
                | "jamaican"
                | "japanese"
                | "korean"
                | "native_hawaiian"
                | "native_hawaiian_or_other_pacific_islander"
                | "nigerian"
                | "other_asian"
                | "other_black_or_african_american"
                | "other_pacific_islander"
                | "prefer_not_to_answer"
                | "samoan"
                | "somali"
                | "vietnamese"
                | "white"
                | UnknownEnumStringValue
              )[]
              race_other?: string
            }
            self_identified_gender?: string
          }
          verification?: {
            additional_document?: {
              back?: string
              front?: string
            }
            document?: {
              back?: string
              front?: string
            }
          }
        }
        pii?: {
          id_number?: string
        }
      }
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_token> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/tokens`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            account: {explode: true, style: "deepObject"},
            bank_account: {explode: true, style: "deepObject"},
            card: {explode: true, style: "deepObject"},
            cvc_update: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            person: {explode: true, style: "deepObject"},
            pii: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTokensToken(
    p: {
      expand?: string[]
      token: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_token> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/tokens/${p["token"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getTopups(
    p: {
      amount?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?:
        | "canceled"
        | "failed"
        | "pending"
        | "succeeded"
        | UnknownEnumStringValue
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_topup[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/topups`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      amount: p["amount"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTopups(
    p: {
      requestBody: {
        amount: number
        currency: string
        description?: string
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        source?: string
        statement_descriptor?: string
        transfer_group?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_topup> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/topups`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTopupsTopup(
    p: {
      expand?: string[]
      topup: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_topup> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/topups/${p["topup"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTopupsTopup(
    p: {
      topup: string
      requestBody?: {
        description?: string
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_topup> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/topups/${p["topup"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTopupsTopupCancel(
    p: {
      topup: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_topup> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/topups/${p["topup"]}/cancel`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTransfers(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      destination?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      transferGroup?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_transfer[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/transfers`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      destination: p["destination"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      transfer_group: p["transferGroup"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTransfers(
    p: {
      requestBody: {
        amount?: number
        currency: string
        description?: string
        destination: string
        expand?: string[]
        metadata?: {
          [key: string]: string | undefined
        }
        source_transaction?: string
        source_type?: "bank_account" | "card" | "fpx" | UnknownEnumStringValue
        transfer_group?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_transfer> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/transfers`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTransfersIdReversals(
    p: {
      endingBefore?: string
      expand?: string[]
      id: string
      limit?: number
      startingAfter?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_transfer_reversal[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/transfers/${p["id"]}/reversals`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTransfersIdReversals(
    p: {
      id: string
      requestBody?: {
        amount?: number
        description?: string
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        refund_application_fee?: boolean
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_transfer_reversal> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/transfers/${p["id"]}/reversals`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTransfersTransfer(
    p: {
      expand?: string[]
      transfer: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_transfer> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/transfers/${p["transfer"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTransfersTransfer(
    p: {
      transfer: string
      requestBody?: {
        description?: string
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_transfer> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/transfers/${p["transfer"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTransfersTransferReversalsId(
    p: {
      expand?: string[]
      id: string
      transfer: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_transfer_reversal> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/transfers/${p["transfer"]}/reversals/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTransfersTransferReversalsId(
    p: {
      id: string
      transfer: string
      requestBody?: {
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_transfer_reversal> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/transfers/${p["transfer"]}/reversals/${p["id"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTreasuryCreditReversals(
    p: {
      endingBefore?: string
      expand?: string[]
      financialAccount: string
      limit?: number
      receivedCredit?: string
      startingAfter?: string
      status?: "canceled" | "posted" | "processing" | UnknownEnumStringValue
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_treasury_credit_reversal[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/treasury/credit_reversals`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      received_credit: p["receivedCredit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTreasuryCreditReversals(
    p: {
      requestBody: {
        expand?: string[]
        metadata?: {
          [key: string]: string | undefined
        }
        received_credit: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_treasury_credit_reversal> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/treasury/credit_reversals`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTreasuryCreditReversalsCreditReversal(
    p: {
      creditReversal: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_treasury_credit_reversal> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/treasury/credit_reversals/${p["creditReversal"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getTreasuryDebitReversals(
    p: {
      endingBefore?: string
      expand?: string[]
      financialAccount: string
      limit?: number
      receivedDebit?: string
      resolution?: "lost" | "won" | UnknownEnumStringValue
      startingAfter?: string
      status?: "canceled" | "completed" | "processing" | UnknownEnumStringValue
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_treasury_debit_reversal[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/treasury/debit_reversals`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      received_debit: p["receivedDebit"],
      resolution: p["resolution"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTreasuryDebitReversals(
    p: {
      requestBody: {
        expand?: string[]
        metadata?: {
          [key: string]: string | undefined
        }
        received_debit: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_treasury_debit_reversal> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/treasury/debit_reversals`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTreasuryDebitReversalsDebitReversal(
    p: {
      debitReversal: string
      expand?: string[]
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_treasury_debit_reversal> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/treasury/debit_reversals/${p["debitReversal"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getTreasuryFinancialAccounts(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?: "closed" | "open" | UnknownEnumStringValue
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_treasury_financial_account[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/treasury/financial_accounts`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTreasuryFinancialAccounts(
    p: {
      requestBody: {
        expand?: string[]
        features?: {
          card_issuing?: {
            requested: boolean
          }
          deposit_insurance?: {
            requested: boolean
          }
          financial_addresses?: {
            aba?: {
              requested: boolean
            }
          }
          inbound_transfers?: {
            ach?: {
              requested: boolean
            }
          }
          intra_stripe_flows?: {
            requested: boolean
          }
          outbound_payments?: {
            ach?: {
              requested: boolean
            }
            us_domestic_wire?: {
              requested: boolean
            }
          }
          outbound_transfers?: {
            ach?: {
              requested: boolean
            }
            us_domestic_wire?: {
              requested: boolean
            }
          }
        }
        metadata?: {
          [key: string]: string | undefined
        }
        nickname?: string | "" | UnknownEnumStringValue
        platform_restrictions?: {
          inbound_flows?: "restricted" | "unrestricted" | UnknownEnumStringValue
          outbound_flows?:
            | "restricted"
            | "unrestricted"
            | UnknownEnumStringValue
        }
        supported_currencies: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_treasury_financial_account> | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/treasury/financial_accounts`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      features: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
      nickname: {explode: true, style: "deepObject"},
      platform_restrictions: {explode: true, style: "deepObject"},
      supported_currencies: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTreasuryFinancialAccountsFinancialAccount(
    p: {
      expand?: string[]
      financialAccount: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_treasury_financial_account> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/treasury/financial_accounts/${p["financialAccount"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTreasuryFinancialAccountsFinancialAccount(
    p: {
      financialAccount: string
      requestBody?: {
        expand?: string[]
        features?: {
          card_issuing?: {
            requested: boolean
          }
          deposit_insurance?: {
            requested: boolean
          }
          financial_addresses?: {
            aba?: {
              requested: boolean
            }
          }
          inbound_transfers?: {
            ach?: {
              requested: boolean
            }
          }
          intra_stripe_flows?: {
            requested: boolean
          }
          outbound_payments?: {
            ach?: {
              requested: boolean
            }
            us_domestic_wire?: {
              requested: boolean
            }
          }
          outbound_transfers?: {
            ach?: {
              requested: boolean
            }
            us_domestic_wire?: {
              requested: boolean
            }
          }
        }
        forwarding_settings?: {
          financial_account?: string
          payment_method?: string
          type: "financial_account" | "payment_method" | UnknownEnumStringValue
        }
        metadata?: {
          [key: string]: string | undefined
        }
        nickname?: string | "" | UnknownEnumStringValue
        platform_restrictions?: {
          inbound_flows?: "restricted" | "unrestricted" | UnknownEnumStringValue
          outbound_flows?:
            | "restricted"
            | "unrestricted"
            | UnknownEnumStringValue
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_treasury_financial_account> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/treasury/financial_accounts/${p["financialAccount"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            features: {explode: true, style: "deepObject"},
            forwarding_settings: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
            nickname: {explode: true, style: "deepObject"},
            platform_restrictions: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async postTreasuryFinancialAccountsFinancialAccountClose(
    p: {
      financialAccount: string
      requestBody?: {
        expand?: string[]
        forwarding_settings?: {
          financial_account?: string
          payment_method?: string
          type: "financial_account" | "payment_method" | UnknownEnumStringValue
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_treasury_financial_account> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/treasury/financial_accounts/${p["financialAccount"]}/close`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
            forwarding_settings: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTreasuryFinancialAccountsFinancialAccountFeatures(
    p: {
      expand?: string[]
      financialAccount: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_treasury_financial_account_features> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/treasury/financial_accounts/${p["financialAccount"]}/features`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTreasuryFinancialAccountsFinancialAccountFeatures(
    p: {
      financialAccount: string
      requestBody?: {
        card_issuing?: {
          requested: boolean
        }
        deposit_insurance?: {
          requested: boolean
        }
        expand?: string[]
        financial_addresses?: {
          aba?: {
            requested: boolean
          }
        }
        inbound_transfers?: {
          ach?: {
            requested: boolean
          }
        }
        intra_stripe_flows?: {
          requested: boolean
        }
        outbound_payments?: {
          ach?: {
            requested: boolean
          }
          us_domestic_wire?: {
            requested: boolean
          }
        }
        outbound_transfers?: {
          ach?: {
            requested: boolean
          }
          us_domestic_wire?: {
            requested: boolean
          }
        }
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_treasury_financial_account_features> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/treasury/financial_accounts/${p["financialAccount"]}/features`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            card_issuing: {explode: true, style: "deepObject"},
            deposit_insurance: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            financial_addresses: {explode: true, style: "deepObject"},
            inbound_transfers: {explode: true, style: "deepObject"},
            intra_stripe_flows: {explode: true, style: "deepObject"},
            outbound_payments: {explode: true, style: "deepObject"},
            outbound_transfers: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTreasuryInboundTransfers(
    p: {
      endingBefore?: string
      expand?: string[]
      financialAccount: string
      limit?: number
      startingAfter?: string
      status?:
        | "canceled"
        | "failed"
        | "processing"
        | "succeeded"
        | UnknownEnumStringValue
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_treasury_inbound_transfer[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/treasury/inbound_transfers`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTreasuryInboundTransfers(
    p: {
      requestBody: {
        amount: number
        currency: string
        description?: string
        expand?: string[]
        financial_account: string
        metadata?: {
          [key: string]: string | undefined
        }
        origin_payment_method: string
        statement_descriptor?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_treasury_inbound_transfer> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/treasury/inbound_transfers`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTreasuryInboundTransfersId(
    p: {
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_treasury_inbound_transfer> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/treasury/inbound_transfers/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTreasuryInboundTransfersInboundTransferCancel(
    p: {
      inboundTransfer: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_treasury_inbound_transfer> | Res<StatusCode, t_error>> {
    const url =
      this.basePath +
      `/v1/treasury/inbound_transfers/${p["inboundTransfer"]}/cancel`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTreasuryOutboundPayments(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      financialAccount: string
      limit?: number
      startingAfter?: string
      status?:
        | "canceled"
        | "failed"
        | "posted"
        | "processing"
        | "returned"
        | UnknownEnumStringValue
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_treasury_outbound_payment[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/treasury/outbound_payments`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTreasuryOutboundPayments(
    p: {
      requestBody: {
        amount: number
        currency: string
        customer?: string
        description?: string
        destination_payment_method?: string
        destination_payment_method_data?: {
          billing_details?: {
            address?:
              | {
                  city?: string
                  country?: string
                  line1?: string
                  line2?: string
                  postal_code?: string
                  state?: string
                }
              | ""
              | UnknownEnumStringValue
            email?: string | "" | UnknownEnumStringValue
            name?: string | "" | UnknownEnumStringValue
            phone?: string | "" | UnknownEnumStringValue
          }
          financial_account?: string
          metadata?: {
            [key: string]: string | undefined
          }
          type: "financial_account" | "us_bank_account" | UnknownEnumStringValue
          us_bank_account?: {
            account_holder_type?:
              | "company"
              | "individual"
              | UnknownEnumStringValue
            account_number?: string
            account_type?: "checking" | "savings" | UnknownEnumStringValue
            financial_connections_account?: string
            routing_number?: string
          }
        }
        destination_payment_method_options?: {
          us_bank_account?:
            | {
                network?: "ach" | "us_domestic_wire" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
        }
        end_user_details?: {
          ip_address?: string
          present: boolean
        }
        expand?: string[]
        financial_account: string
        metadata?: {
          [key: string]: string | undefined
        }
        statement_descriptor?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_treasury_outbound_payment> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/treasury/outbound_payments`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      destination_payment_method_data: {explode: true, style: "deepObject"},
      destination_payment_method_options: {explode: true, style: "deepObject"},
      end_user_details: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTreasuryOutboundPaymentsId(
    p: {
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_treasury_outbound_payment> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/treasury/outbound_payments/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTreasuryOutboundPaymentsIdCancel(
    p: {
      id: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_treasury_outbound_payment> | Res<StatusCode, t_error>> {
    const url =
      this.basePath + `/v1/treasury/outbound_payments/${p["id"]}/cancel`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTreasuryOutboundTransfers(
    p: {
      endingBefore?: string
      expand?: string[]
      financialAccount: string
      limit?: number
      startingAfter?: string
      status?:
        | "canceled"
        | "failed"
        | "posted"
        | "processing"
        | "returned"
        | UnknownEnumStringValue
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_treasury_outbound_transfer[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/treasury/outbound_transfers`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTreasuryOutboundTransfers(
    p: {
      requestBody: {
        amount: number
        currency: string
        description?: string
        destination_payment_method?: string
        destination_payment_method_data?: {
          financial_account?: string
          type: "financial_account" | UnknownEnumStringValue
        }
        destination_payment_method_options?: {
          us_bank_account?:
            | {
                network?: "ach" | "us_domestic_wire" | UnknownEnumStringValue
              }
            | ""
            | UnknownEnumStringValue
        }
        expand?: string[]
        financial_account: string
        metadata?: {
          [key: string]: string | undefined
        }
        statement_descriptor?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_treasury_outbound_transfer> | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/treasury/outbound_transfers`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      destination_payment_method_data: {explode: true, style: "deepObject"},
      destination_payment_method_options: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTreasuryOutboundTransfersOutboundTransfer(
    p: {
      expand?: string[]
      outboundTransfer: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_treasury_outbound_transfer> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath + `/v1/treasury/outbound_transfers/${p["outboundTransfer"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postTreasuryOutboundTransfersOutboundTransferCancel(
    p: {
      outboundTransfer: string
      requestBody?: {
        expand?: string[]
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_treasury_outbound_transfer> | Res<StatusCode, t_error>
  > {
    const url =
      this.basePath +
      `/v1/treasury/outbound_transfers/${p["outboundTransfer"]}/cancel`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            expand: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async getTreasuryReceivedCredits(
    p: {
      endingBefore?: string
      expand?: string[]
      financialAccount: string
      limit?: number
      linkedFlows?: {
        source_flow_type:
          | "credit_reversal"
          | "other"
          | "outbound_payment"
          | "outbound_transfer"
          | "payout"
          | UnknownEnumStringValue
      }
      startingAfter?: string
      status?: "failed" | "succeeded" | UnknownEnumStringValue
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_treasury_received_credit[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/treasury/received_credits`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      linked_flows: p["linkedFlows"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getTreasuryReceivedCreditsId(
    p: {
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_treasury_received_credit> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/treasury/received_credits/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getTreasuryReceivedDebits(
    p: {
      endingBefore?: string
      expand?: string[]
      financialAccount: string
      limit?: number
      startingAfter?: string
      status?: "failed" | "succeeded" | UnknownEnumStringValue
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_treasury_received_debit[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/treasury/received_debits`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getTreasuryReceivedDebitsId(
    p: {
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_treasury_received_debit> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/treasury/received_debits/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getTreasuryTransactionEntries(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      effectiveAt?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      financialAccount: string
      limit?: number
      orderBy?: "created" | "effective_at" | UnknownEnumStringValue
      startingAfter?: string
      transaction?: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_treasury_transaction_entry[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/treasury/transaction_entries`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      effective_at: p["effectiveAt"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      order_by: p["orderBy"],
      starting_after: p["startingAfter"],
      transaction: p["transaction"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getTreasuryTransactionEntriesId(
    p: {
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    Res<200, t_treasury_transaction_entry> | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/treasury/transaction_entries/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getTreasuryTransactions(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      financialAccount: string
      limit?: number
      orderBy?: "created" | "posted_at" | UnknownEnumStringValue
      startingAfter?: string
      status?: "open" | "posted" | "void" | UnknownEnumStringValue
      statusTransitions?: {
        posted_at?:
          | {
              gt?: number
              gte?: number
              lt?: number
              lte?: number
            }
          | number
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_treasury_transaction[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/treasury/transactions`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      order_by: p["orderBy"],
      starting_after: p["startingAfter"],
      status: p["status"],
      status_transitions: p["statusTransitions"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getTreasuryTransactionsId(
    p: {
      expand?: string[]
      id: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_treasury_transaction> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/treasury/transactions/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async getWebhookEndpoints(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    | Res<
        200,
        {
          data: t_webhook_endpoint[]
          has_more: boolean
          object: "list" | UnknownEnumStringValue
          url: string
        }
      >
    | Res<StatusCode, t_error>
  > {
    const url = this.basePath + `/v1/webhook_endpoints`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postWebhookEndpoints(
    p: {
      requestBody: {
        api_version?:
          | "2011-01-01"
          | "2011-06-21"
          | "2011-06-28"
          | "2011-08-01"
          | "2011-09-15"
          | "2011-11-17"
          | "2012-02-23"
          | "2012-03-25"
          | "2012-06-18"
          | "2012-06-28"
          | "2012-07-09"
          | "2012-09-24"
          | "2012-10-26"
          | "2012-11-07"
          | "2013-02-11"
          | "2013-02-13"
          | "2013-07-05"
          | "2013-08-12"
          | "2013-08-13"
          | "2013-10-29"
          | "2013-12-03"
          | "2014-01-31"
          | "2014-03-13"
          | "2014-03-28"
          | "2014-05-19"
          | "2014-06-13"
          | "2014-06-17"
          | "2014-07-22"
          | "2014-07-26"
          | "2014-08-04"
          | "2014-08-20"
          | "2014-09-08"
          | "2014-10-07"
          | "2014-11-05"
          | "2014-11-20"
          | "2014-12-08"
          | "2014-12-17"
          | "2014-12-22"
          | "2015-01-11"
          | "2015-01-26"
          | "2015-02-10"
          | "2015-02-16"
          | "2015-02-18"
          | "2015-03-24"
          | "2015-04-07"
          | "2015-06-15"
          | "2015-07-07"
          | "2015-07-13"
          | "2015-07-28"
          | "2015-08-07"
          | "2015-08-19"
          | "2015-09-03"
          | "2015-09-08"
          | "2015-09-23"
          | "2015-10-01"
          | "2015-10-12"
          | "2015-10-16"
          | "2016-02-03"
          | "2016-02-19"
          | "2016-02-22"
          | "2016-02-23"
          | "2016-02-29"
          | "2016-03-07"
          | "2016-06-15"
          | "2016-07-06"
          | "2016-10-19"
          | "2017-01-27"
          | "2017-02-14"
          | "2017-04-06"
          | "2017-05-25"
          | "2017-06-05"
          | "2017-08-15"
          | "2017-12-14"
          | "2018-01-23"
          | "2018-02-05"
          | "2018-02-06"
          | "2018-02-28"
          | "2018-05-21"
          | "2018-07-27"
          | "2018-08-23"
          | "2018-09-06"
          | "2018-09-24"
          | "2018-10-31"
          | "2018-11-08"
          | "2019-02-11"
          | "2019-02-19"
          | "2019-03-14"
          | "2019-05-16"
          | "2019-08-14"
          | "2019-09-09"
          | "2019-10-08"
          | "2019-10-17"
          | "2019-11-05"
          | "2019-12-03"
          | "2020-03-02"
          | "2020-08-27"
          | "2022-08-01"
          | "2022-11-15"
          | "2023-08-16"
          | "2023-10-16"
          | "2024-04-10"
          | "2024-06-20"
          | "2024-09-30.acacia"
          | "2024-10-28.acacia"
          | "2024-11-20.acacia"
          | "2024-12-18.acacia"
          | "2025-01-27.acacia"
          | "2025-02-24.acacia"
          | "2025-03-01.dashboard"
          | "2025-03-31.basil"
          | "2025-04-30.basil"
          | "2025-05-28.basil"
          | "2025-06-30.basil"
          | UnknownEnumStringValue
        connect?: boolean
        description?: string | "" | UnknownEnumStringValue
        enabled_events: (
          | "*"
          | "account.application.authorized"
          | "account.application.deauthorized"
          | "account.external_account.created"
          | "account.external_account.deleted"
          | "account.external_account.updated"
          | "account.updated"
          | "application_fee.created"
          | "application_fee.refund.updated"
          | "application_fee.refunded"
          | "balance.available"
          | "billing.alert.triggered"
          | "billing_portal.configuration.created"
          | "billing_portal.configuration.updated"
          | "billing_portal.session.created"
          | "capability.updated"
          | "cash_balance.funds_available"
          | "charge.captured"
          | "charge.dispute.closed"
          | "charge.dispute.created"
          | "charge.dispute.funds_reinstated"
          | "charge.dispute.funds_withdrawn"
          | "charge.dispute.updated"
          | "charge.expired"
          | "charge.failed"
          | "charge.pending"
          | "charge.refund.updated"
          | "charge.refunded"
          | "charge.succeeded"
          | "charge.updated"
          | "checkout.session.async_payment_failed"
          | "checkout.session.async_payment_succeeded"
          | "checkout.session.completed"
          | "checkout.session.expired"
          | "climate.order.canceled"
          | "climate.order.created"
          | "climate.order.delayed"
          | "climate.order.delivered"
          | "climate.order.product_substituted"
          | "climate.product.created"
          | "climate.product.pricing_updated"
          | "coupon.created"
          | "coupon.deleted"
          | "coupon.updated"
          | "credit_note.created"
          | "credit_note.updated"
          | "credit_note.voided"
          | "customer.created"
          | "customer.deleted"
          | "customer.discount.created"
          | "customer.discount.deleted"
          | "customer.discount.updated"
          | "customer.source.created"
          | "customer.source.deleted"
          | "customer.source.expiring"
          | "customer.source.updated"
          | "customer.subscription.created"
          | "customer.subscription.deleted"
          | "customer.subscription.paused"
          | "customer.subscription.pending_update_applied"
          | "customer.subscription.pending_update_expired"
          | "customer.subscription.resumed"
          | "customer.subscription.trial_will_end"
          | "customer.subscription.updated"
          | "customer.tax_id.created"
          | "customer.tax_id.deleted"
          | "customer.tax_id.updated"
          | "customer.updated"
          | "customer_cash_balance_transaction.created"
          | "entitlements.active_entitlement_summary.updated"
          | "file.created"
          | "financial_connections.account.created"
          | "financial_connections.account.deactivated"
          | "financial_connections.account.disconnected"
          | "financial_connections.account.reactivated"
          | "financial_connections.account.refreshed_balance"
          | "financial_connections.account.refreshed_ownership"
          | "financial_connections.account.refreshed_transactions"
          | "identity.verification_session.canceled"
          | "identity.verification_session.created"
          | "identity.verification_session.processing"
          | "identity.verification_session.redacted"
          | "identity.verification_session.requires_input"
          | "identity.verification_session.verified"
          | "invoice.created"
          | "invoice.deleted"
          | "invoice.finalization_failed"
          | "invoice.finalized"
          | "invoice.marked_uncollectible"
          | "invoice.overdue"
          | "invoice.overpaid"
          | "invoice.paid"
          | "invoice.payment_action_required"
          | "invoice.payment_failed"
          | "invoice.payment_succeeded"
          | "invoice.sent"
          | "invoice.upcoming"
          | "invoice.updated"
          | "invoice.voided"
          | "invoice.will_be_due"
          | "invoice_payment.paid"
          | "invoiceitem.created"
          | "invoiceitem.deleted"
          | "issuing_authorization.created"
          | "issuing_authorization.request"
          | "issuing_authorization.updated"
          | "issuing_card.created"
          | "issuing_card.updated"
          | "issuing_cardholder.created"
          | "issuing_cardholder.updated"
          | "issuing_dispute.closed"
          | "issuing_dispute.created"
          | "issuing_dispute.funds_reinstated"
          | "issuing_dispute.funds_rescinded"
          | "issuing_dispute.submitted"
          | "issuing_dispute.updated"
          | "issuing_personalization_design.activated"
          | "issuing_personalization_design.deactivated"
          | "issuing_personalization_design.rejected"
          | "issuing_personalization_design.updated"
          | "issuing_token.created"
          | "issuing_token.updated"
          | "issuing_transaction.created"
          | "issuing_transaction.purchase_details_receipt_updated"
          | "issuing_transaction.updated"
          | "mandate.updated"
          | "payment_intent.amount_capturable_updated"
          | "payment_intent.canceled"
          | "payment_intent.created"
          | "payment_intent.partially_funded"
          | "payment_intent.payment_failed"
          | "payment_intent.processing"
          | "payment_intent.requires_action"
          | "payment_intent.succeeded"
          | "payment_link.created"
          | "payment_link.updated"
          | "payment_method.attached"
          | "payment_method.automatically_updated"
          | "payment_method.detached"
          | "payment_method.updated"
          | "payout.canceled"
          | "payout.created"
          | "payout.failed"
          | "payout.paid"
          | "payout.reconciliation_completed"
          | "payout.updated"
          | "person.created"
          | "person.deleted"
          | "person.updated"
          | "plan.created"
          | "plan.deleted"
          | "plan.updated"
          | "price.created"
          | "price.deleted"
          | "price.updated"
          | "product.created"
          | "product.deleted"
          | "product.updated"
          | "promotion_code.created"
          | "promotion_code.updated"
          | "quote.accepted"
          | "quote.canceled"
          | "quote.created"
          | "quote.finalized"
          | "radar.early_fraud_warning.created"
          | "radar.early_fraud_warning.updated"
          | "refund.created"
          | "refund.failed"
          | "refund.updated"
          | "reporting.report_run.failed"
          | "reporting.report_run.succeeded"
          | "reporting.report_type.updated"
          | "review.closed"
          | "review.opened"
          | "setup_intent.canceled"
          | "setup_intent.created"
          | "setup_intent.requires_action"
          | "setup_intent.setup_failed"
          | "setup_intent.succeeded"
          | "sigma.scheduled_query_run.created"
          | "source.canceled"
          | "source.chargeable"
          | "source.failed"
          | "source.mandate_notification"
          | "source.refund_attributes_required"
          | "source.transaction.created"
          | "source.transaction.updated"
          | "subscription_schedule.aborted"
          | "subscription_schedule.canceled"
          | "subscription_schedule.completed"
          | "subscription_schedule.created"
          | "subscription_schedule.expiring"
          | "subscription_schedule.released"
          | "subscription_schedule.updated"
          | "tax.settings.updated"
          | "tax_rate.created"
          | "tax_rate.updated"
          | "terminal.reader.action_failed"
          | "terminal.reader.action_succeeded"
          | "terminal.reader.action_updated"
          | "test_helpers.test_clock.advancing"
          | "test_helpers.test_clock.created"
          | "test_helpers.test_clock.deleted"
          | "test_helpers.test_clock.internal_failure"
          | "test_helpers.test_clock.ready"
          | "topup.canceled"
          | "topup.created"
          | "topup.failed"
          | "topup.reversed"
          | "topup.succeeded"
          | "transfer.created"
          | "transfer.reversed"
          | "transfer.updated"
          | "treasury.credit_reversal.created"
          | "treasury.credit_reversal.posted"
          | "treasury.debit_reversal.completed"
          | "treasury.debit_reversal.created"
          | "treasury.debit_reversal.initial_credit_granted"
          | "treasury.financial_account.closed"
          | "treasury.financial_account.created"
          | "treasury.financial_account.features_status_updated"
          | "treasury.inbound_transfer.canceled"
          | "treasury.inbound_transfer.created"
          | "treasury.inbound_transfer.failed"
          | "treasury.inbound_transfer.succeeded"
          | "treasury.outbound_payment.canceled"
          | "treasury.outbound_payment.created"
          | "treasury.outbound_payment.expected_arrival_date_updated"
          | "treasury.outbound_payment.failed"
          | "treasury.outbound_payment.posted"
          | "treasury.outbound_payment.returned"
          | "treasury.outbound_payment.tracking_details_updated"
          | "treasury.outbound_transfer.canceled"
          | "treasury.outbound_transfer.created"
          | "treasury.outbound_transfer.expected_arrival_date_updated"
          | "treasury.outbound_transfer.failed"
          | "treasury.outbound_transfer.posted"
          | "treasury.outbound_transfer.returned"
          | "treasury.outbound_transfer.tracking_details_updated"
          | "treasury.received_credit.created"
          | "treasury.received_credit.failed"
          | "treasury.received_credit.succeeded"
          | "treasury.received_debit.created"
          | UnknownEnumStringValue
        )[]
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        url: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_webhook_endpoint> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/webhook_endpoints`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      opts.headers,
    )
    const body = this._requestBodyToUrlSearchParams(p.requestBody, {
      description: {explode: true, style: "deepObject"},
      enabled_events: {explode: true, style: "deepObject"},
      expand: {explode: true, style: "deepObject"},
      metadata: {explode: true, style: "deepObject"},
    })

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }

  async deleteWebhookEndpointsWebhookEndpoint(
    p: {
      webhookEndpoint: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_deleted_webhook_endpoint> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/webhook_endpoints/${p["webhookEndpoint"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._fetch(url, {method: "DELETE", ...opts, headers}, timeout)
  }

  async getWebhookEndpointsWebhookEndpoint(
    p: {
      expand?: string[]
      webhookEndpoint: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_webhook_endpoint> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/webhook_endpoints/${p["webhookEndpoint"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({expand: p["expand"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async postWebhookEndpointsWebhookEndpoint(
    p: {
      webhookEndpoint: string
      requestBody?: {
        description?: string | "" | UnknownEnumStringValue
        disabled?: boolean
        enabled_events?: (
          | "*"
          | "account.application.authorized"
          | "account.application.deauthorized"
          | "account.external_account.created"
          | "account.external_account.deleted"
          | "account.external_account.updated"
          | "account.updated"
          | "application_fee.created"
          | "application_fee.refund.updated"
          | "application_fee.refunded"
          | "balance.available"
          | "billing.alert.triggered"
          | "billing_portal.configuration.created"
          | "billing_portal.configuration.updated"
          | "billing_portal.session.created"
          | "capability.updated"
          | "cash_balance.funds_available"
          | "charge.captured"
          | "charge.dispute.closed"
          | "charge.dispute.created"
          | "charge.dispute.funds_reinstated"
          | "charge.dispute.funds_withdrawn"
          | "charge.dispute.updated"
          | "charge.expired"
          | "charge.failed"
          | "charge.pending"
          | "charge.refund.updated"
          | "charge.refunded"
          | "charge.succeeded"
          | "charge.updated"
          | "checkout.session.async_payment_failed"
          | "checkout.session.async_payment_succeeded"
          | "checkout.session.completed"
          | "checkout.session.expired"
          | "climate.order.canceled"
          | "climate.order.created"
          | "climate.order.delayed"
          | "climate.order.delivered"
          | "climate.order.product_substituted"
          | "climate.product.created"
          | "climate.product.pricing_updated"
          | "coupon.created"
          | "coupon.deleted"
          | "coupon.updated"
          | "credit_note.created"
          | "credit_note.updated"
          | "credit_note.voided"
          | "customer.created"
          | "customer.deleted"
          | "customer.discount.created"
          | "customer.discount.deleted"
          | "customer.discount.updated"
          | "customer.source.created"
          | "customer.source.deleted"
          | "customer.source.expiring"
          | "customer.source.updated"
          | "customer.subscription.created"
          | "customer.subscription.deleted"
          | "customer.subscription.paused"
          | "customer.subscription.pending_update_applied"
          | "customer.subscription.pending_update_expired"
          | "customer.subscription.resumed"
          | "customer.subscription.trial_will_end"
          | "customer.subscription.updated"
          | "customer.tax_id.created"
          | "customer.tax_id.deleted"
          | "customer.tax_id.updated"
          | "customer.updated"
          | "customer_cash_balance_transaction.created"
          | "entitlements.active_entitlement_summary.updated"
          | "file.created"
          | "financial_connections.account.created"
          | "financial_connections.account.deactivated"
          | "financial_connections.account.disconnected"
          | "financial_connections.account.reactivated"
          | "financial_connections.account.refreshed_balance"
          | "financial_connections.account.refreshed_ownership"
          | "financial_connections.account.refreshed_transactions"
          | "identity.verification_session.canceled"
          | "identity.verification_session.created"
          | "identity.verification_session.processing"
          | "identity.verification_session.redacted"
          | "identity.verification_session.requires_input"
          | "identity.verification_session.verified"
          | "invoice.created"
          | "invoice.deleted"
          | "invoice.finalization_failed"
          | "invoice.finalized"
          | "invoice.marked_uncollectible"
          | "invoice.overdue"
          | "invoice.overpaid"
          | "invoice.paid"
          | "invoice.payment_action_required"
          | "invoice.payment_failed"
          | "invoice.payment_succeeded"
          | "invoice.sent"
          | "invoice.upcoming"
          | "invoice.updated"
          | "invoice.voided"
          | "invoice.will_be_due"
          | "invoice_payment.paid"
          | "invoiceitem.created"
          | "invoiceitem.deleted"
          | "issuing_authorization.created"
          | "issuing_authorization.request"
          | "issuing_authorization.updated"
          | "issuing_card.created"
          | "issuing_card.updated"
          | "issuing_cardholder.created"
          | "issuing_cardholder.updated"
          | "issuing_dispute.closed"
          | "issuing_dispute.created"
          | "issuing_dispute.funds_reinstated"
          | "issuing_dispute.funds_rescinded"
          | "issuing_dispute.submitted"
          | "issuing_dispute.updated"
          | "issuing_personalization_design.activated"
          | "issuing_personalization_design.deactivated"
          | "issuing_personalization_design.rejected"
          | "issuing_personalization_design.updated"
          | "issuing_token.created"
          | "issuing_token.updated"
          | "issuing_transaction.created"
          | "issuing_transaction.purchase_details_receipt_updated"
          | "issuing_transaction.updated"
          | "mandate.updated"
          | "payment_intent.amount_capturable_updated"
          | "payment_intent.canceled"
          | "payment_intent.created"
          | "payment_intent.partially_funded"
          | "payment_intent.payment_failed"
          | "payment_intent.processing"
          | "payment_intent.requires_action"
          | "payment_intent.succeeded"
          | "payment_link.created"
          | "payment_link.updated"
          | "payment_method.attached"
          | "payment_method.automatically_updated"
          | "payment_method.detached"
          | "payment_method.updated"
          | "payout.canceled"
          | "payout.created"
          | "payout.failed"
          | "payout.paid"
          | "payout.reconciliation_completed"
          | "payout.updated"
          | "person.created"
          | "person.deleted"
          | "person.updated"
          | "plan.created"
          | "plan.deleted"
          | "plan.updated"
          | "price.created"
          | "price.deleted"
          | "price.updated"
          | "product.created"
          | "product.deleted"
          | "product.updated"
          | "promotion_code.created"
          | "promotion_code.updated"
          | "quote.accepted"
          | "quote.canceled"
          | "quote.created"
          | "quote.finalized"
          | "radar.early_fraud_warning.created"
          | "radar.early_fraud_warning.updated"
          | "refund.created"
          | "refund.failed"
          | "refund.updated"
          | "reporting.report_run.failed"
          | "reporting.report_run.succeeded"
          | "reporting.report_type.updated"
          | "review.closed"
          | "review.opened"
          | "setup_intent.canceled"
          | "setup_intent.created"
          | "setup_intent.requires_action"
          | "setup_intent.setup_failed"
          | "setup_intent.succeeded"
          | "sigma.scheduled_query_run.created"
          | "source.canceled"
          | "source.chargeable"
          | "source.failed"
          | "source.mandate_notification"
          | "source.refund_attributes_required"
          | "source.transaction.created"
          | "source.transaction.updated"
          | "subscription_schedule.aborted"
          | "subscription_schedule.canceled"
          | "subscription_schedule.completed"
          | "subscription_schedule.created"
          | "subscription_schedule.expiring"
          | "subscription_schedule.released"
          | "subscription_schedule.updated"
          | "tax.settings.updated"
          | "tax_rate.created"
          | "tax_rate.updated"
          | "terminal.reader.action_failed"
          | "terminal.reader.action_succeeded"
          | "terminal.reader.action_updated"
          | "test_helpers.test_clock.advancing"
          | "test_helpers.test_clock.created"
          | "test_helpers.test_clock.deleted"
          | "test_helpers.test_clock.internal_failure"
          | "test_helpers.test_clock.ready"
          | "topup.canceled"
          | "topup.created"
          | "topup.failed"
          | "topup.reversed"
          | "topup.succeeded"
          | "transfer.created"
          | "transfer.reversed"
          | "transfer.updated"
          | "treasury.credit_reversal.created"
          | "treasury.credit_reversal.posted"
          | "treasury.debit_reversal.completed"
          | "treasury.debit_reversal.created"
          | "treasury.debit_reversal.initial_credit_granted"
          | "treasury.financial_account.closed"
          | "treasury.financial_account.created"
          | "treasury.financial_account.features_status_updated"
          | "treasury.inbound_transfer.canceled"
          | "treasury.inbound_transfer.created"
          | "treasury.inbound_transfer.failed"
          | "treasury.inbound_transfer.succeeded"
          | "treasury.outbound_payment.canceled"
          | "treasury.outbound_payment.created"
          | "treasury.outbound_payment.expected_arrival_date_updated"
          | "treasury.outbound_payment.failed"
          | "treasury.outbound_payment.posted"
          | "treasury.outbound_payment.returned"
          | "treasury.outbound_payment.tracking_details_updated"
          | "treasury.outbound_transfer.canceled"
          | "treasury.outbound_transfer.created"
          | "treasury.outbound_transfer.expected_arrival_date_updated"
          | "treasury.outbound_transfer.failed"
          | "treasury.outbound_transfer.posted"
          | "treasury.outbound_transfer.returned"
          | "treasury.outbound_transfer.tracking_details_updated"
          | "treasury.received_credit.created"
          | "treasury.received_credit.failed"
          | "treasury.received_credit.succeeded"
          | "treasury.received_debit.created"
          | UnknownEnumStringValue
        )[]
        expand?: string[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | ""
          | UnknownEnumStringValue
        url?: string
      }
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_webhook_endpoint> | Res<StatusCode, t_error>> {
    const url = this.basePath + `/v1/webhook_endpoints/${p["webhookEndpoint"]}`
    const headers = this._headers(
      {
        Accept: "application/json",
        "Content-Type":
          p.requestBody !== undefined
            ? "application/x-www-form-urlencoded"
            : undefined,
      },
      opts.headers,
    )
    const body =
      p.requestBody !== undefined
        ? this._requestBodyToUrlSearchParams(p.requestBody, {
            description: {explode: true, style: "deepObject"},
            enabled_events: {explode: true, style: "deepObject"},
            expand: {explode: true, style: "deepObject"},
            metadata: {explode: true, style: "deepObject"},
          })
        : null

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }
}

export {StripeApi as ApiClient}
export type {StripeApiConfig as ApiClientConfig}
