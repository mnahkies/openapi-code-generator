/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint:disable */

import { CreateUpdateTodoList, Error, TodoList } from "./models"
import qs from "querystring"

export interface ApiClientConfig {
  basePath: string
  defaultHeaders: Record<string, string>
}

export interface Res<StatusCode, Body> {
  status: StatusCode
  body: Body
}

export class ApiClient {
  constructor(private readonly config: ApiClientConfig) {}

  private _query(
    params: Record<
      string,
      string | number | boolean | string[] | undefined | null
    >
  ): string {
    const filtered = Object.fromEntries(
      Object.entries(params).filter(([k, v]) => v !== undefined)
    )

    return qs.stringify(filtered)
  }

  private _headers(
    headers: Record<string, string | undefined>
  ): Record<string, string> {
    return Object.fromEntries(
      Object.entries({ ...this.config.defaultHeaders, ...headers }).filter(
        (it): it is [string, string] => it[1] !== undefined
      )
    )
  }

  async getTodoListById(p: {
    listId: string
  }): Promise<Res<200, TodoList> | Res<number, Error> | Res<number, void>> {
    const headers: Record<string, string | undefined> = {}

    const res = await fetch(this.config.basePath + `/list/${p["listId"]}`, {
      method: "GET",
      headers: this._headers(headers),
    })

    // TODO: this is a poor assumption
    return { status: res.status as any, body: (await res.json()) as any }
  }

  async updateTodoListById(p: {
    listId: string
    requestBody: CreateUpdateTodoList
  }): Promise<Res<200, TodoList> | Res<number, Error> | Res<number, void>> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const res = await fetch(this.config.basePath + `/list/${p["listId"]}`, {
      method: "PUT",
      headers: this._headers(headers),
      body: JSON.stringify(p.requestBody),
    })

    // TODO: this is a poor assumption
    return { status: res.status as any, body: (await res.json()) as any }
  }

  async deleteTodoListById(p: {
    listId: string
  }): Promise<Res<204, void> | Res<number, Error> | Res<number, void>> {
    const headers: Record<string, string | undefined> = {}

    const res = await fetch(this.config.basePath + `/list/${p["listId"]}`, {
      method: "DELETE",
      headers: this._headers(headers),
    })

    // TODO: this is a poor assumption
    return { status: res.status as any, body: (await res.json()) as any }
  }
}
