/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  EmptyObject,
  t_actions_billing_usage,
  t_actions_cache_list,
  t_actions_cache_usage_by_repository,
  t_actions_cache_usage_org_enterprise,
  t_actions_enabled,
  t_actions_get_default_workflow_permissions,
  t_actions_organization_permissions,
  t_actions_public_key,
  t_actions_repository_permissions,
  t_actions_secret,
  t_actions_set_default_workflow_permissions,
  t_actions_variable,
  t_actions_workflow_access_to_repository,
  t_alert_number,
  t_allowed_actions,
  t_api_overview,
  t_app_permissions,
  t_artifact,
  t_authentication_token,
  t_authorization,
  t_autolink,
  t_base_gist,
  t_basic_error,
  t_blob,
  t_branch_protection,
  t_branch_restriction_policy,
  t_branch_short,
  t_branch_with_protection,
  t_check_annotation,
  t_check_run,
  t_check_suite,
  t_check_suite_preference,
  t_clone_traffic,
  t_code_frequency_stat,
  t_code_of_conduct,
  t_code_scanning_alert,
  t_code_scanning_alert_dismissed_comment,
  t_code_scanning_alert_dismissed_reason,
  t_code_scanning_alert_instance,
  t_code_scanning_alert_items,
  t_code_scanning_alert_set_state,
  t_code_scanning_alert_severity,
  t_code_scanning_alert_state,
  t_code_scanning_analysis,
  t_code_scanning_analysis_commit_sha,
  t_code_scanning_analysis_deletion,
  t_code_scanning_analysis_sarif_file,
  t_code_scanning_analysis_sarif_id,
  t_code_scanning_analysis_tool_guid,
  t_code_scanning_analysis_tool_name,
  t_code_scanning_codeql_database,
  t_code_scanning_default_setup,
  t_code_scanning_default_setup_update,
  t_code_scanning_default_setup_update_response,
  t_code_scanning_organization_alert_items,
  t_code_scanning_ref,
  t_code_scanning_sarifs_receipt,
  t_code_scanning_sarifs_status,
  t_code_search_result_item,
  t_codeowners_errors,
  t_codespace,
  t_codespace_export_details,
  t_codespace_machine,
  t_codespace_with_full_repository,
  t_codespaces_org_secret,
  t_codespaces_public_key,
  t_codespaces_secret,
  t_codespaces_user_public_key,
  t_collaborator,
  t_combined_billing_usage,
  t_combined_commit_status,
  t_commit,
  t_commit_activity,
  t_commit_comment,
  t_commit_comparison,
  t_commit_search_result_item,
  t_community_profile,
  t_content_directory,
  t_content_file,
  t_content_submodule,
  t_content_symlink,
  t_content_traffic,
  t_contributor,
  t_contributor_activity,
  t_custom_deployment_rule_app,
  t_dependabot_alert,
  t_dependabot_alert_with_repository,
  t_dependabot_public_key,
  t_dependabot_secret,
  t_dependency_graph_diff,
  t_dependency_graph_spdx_sbom,
  t_deploy_key,
  t_deployment,
  t_deployment_branch_policy,
  t_deployment_branch_policy_name_pattern,
  t_deployment_branch_policy_settings,
  t_deployment_protection_rule,
  t_deployment_reviewer_type,
  t_deployment_status,
  t_diff_entry,
  t_email,
  t_empty_object,
  t_enabled_repositories,
  t_environment,
  t_environment_approvals,
  t_event,
  t_feed,
  t_file_commit,
  t_full_repository,
  t_gist_comment,
  t_gist_commit,
  t_gist_simple,
  t_git_commit,
  t_git_ref,
  t_git_tag,
  t_git_tree,
  t_gitignore_template,
  t_gpg_key,
  t_hook,
  t_hook_delivery,
  t_hook_delivery_item,
  t_hovercard,
  t_import,
  t_installation,
  t_installation_token,
  t_integration,
  t_integration_installation_request,
  t_interaction_limit,
  t_interaction_limit_response,
  t_issue,
  t_issue_comment,
  t_issue_event,
  t_issue_event_for_issue,
  t_issue_search_result_item,
  t_job,
  t_key,
  t_key_simple,
  t_label,
  t_label_search_result_item,
  t_language,
  t_license,
  t_license_content,
  t_license_simple,
  t_marketplace_listing_plan,
  t_marketplace_purchase,
  t_merged_upstream,
  t_migration,
  t_milestone,
  t_minimal_repository,
  t_oidc_custom_sub,
  t_oidc_custom_sub_repo,
  t_org_hook,
  t_org_membership,
  t_org_ruleset_conditions,
  t_organization_actions_secret,
  t_organization_actions_variable,
  t_organization_dependabot_secret,
  t_organization_full,
  t_organization_invitation,
  t_organization_programmatic_access_grant,
  t_organization_programmatic_access_grant_request,
  t_organization_secret_scanning_alert,
  t_organization_simple,
  t_package,
  t_package_version,
  t_packages_billing_usage,
  t_page,
  t_page_build,
  t_page_build_status,
  t_page_deployment,
  t_pages_health_check,
  t_participation_stats,
  t_pending_deployment,
  t_porter_author,
  t_porter_large_file,
  t_private_user,
  t_private_vulnerability_report_create,
  t_project,
  t_project_card,
  t_project_collaborator_permission,
  t_project_column,
  t_protected_branch,
  t_protected_branch_admin_enforced,
  t_protected_branch_pull_request_review,
  t_public_user,
  t_pull_request,
  t_pull_request_merge_result,
  t_pull_request_review,
  t_pull_request_review_comment,
  t_pull_request_review_request,
  t_pull_request_simple,
  t_rate_limit_overview,
  t_reaction,
  t_referrer_traffic,
  t_release,
  t_release_asset,
  t_release_notes_content,
  t_repo_codespaces_secret,
  t_repo_required_workflow,
  t_repo_search_result_item,
  t_repository,
  t_repository_advisory,
  t_repository_advisory_create,
  t_repository_advisory_update,
  t_repository_collaborator_permission,
  t_repository_invitation,
  t_repository_rule,
  t_repository_rule_enforcement,
  t_repository_ruleset,
  t_repository_ruleset_bypass_actor,
  t_repository_ruleset_conditions,
  t_repository_subscription,
  t_required_workflow,
  t_review_comment,
  t_review_custom_gates_comment_required,
  t_review_custom_gates_state_required,
  t_root,
  t_runner,
  t_runner_application,
  t_runner_label,
  t_scim_error,
  t_secret_scanning_alert,
  t_secret_scanning_alert_resolution,
  t_secret_scanning_alert_resolution_comment,
  t_secret_scanning_alert_state,
  t_secret_scanning_location,
  t_selected_actions,
  t_short_blob,
  t_short_branch,
  t_simple_user,
  t_snapshot,
  t_social_account,
  t_ssh_signing_key,
  t_stargazer,
  t_starred_repository,
  t_status,
  t_status_check_policy,
  t_tag,
  t_tag_protection,
  t_team,
  t_team_discussion,
  t_team_discussion_comment,
  t_team_full,
  t_team_membership,
  t_team_project,
  t_team_repository,
  t_team_simple,
  t_thread,
  t_thread_subscription,
  t_timeline_issue_events,
  t_topic,
  t_topic_search_result_item,
  t_user_marketplace_purchase,
  t_user_search_result_item,
  t_validation_error,
  t_validation_error_simple,
  t_view_traffic,
  t_wait_timer,
  t_webhook_config,
  t_webhook_config_content_type,
  t_webhook_config_insecure_ssl,
  t_webhook_config_secret,
  t_webhook_config_url,
  t_workflow,
  t_workflow_run,
  t_workflow_run_usage,
  t_workflow_usage,
} from "./models"
import {
  AbstractFetchClient,
  AbstractFetchClientConfig,
  Res,
  StatusCode,
  StatusCode2xx,
  StatusCode3xx,
  StatusCode4xx,
  StatusCode5xx,
  TypedFetchResponse,
} from "@nahkies/typescript-fetch-runtime/main"

export interface ApiClientConfig extends AbstractFetchClientConfig {}

export class ApiClient extends AbstractFetchClient {
  constructor(config: ApiClientConfig) {
    super(config)
  }

  metaRoot(
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_root>> {
    const url = this.basePath + `/`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  appsGetAuthenticated(
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_integration>> {
    const url = this.basePath + `/app`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  appsCreateFromManifest(
    p: {
      code: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        201,
        t_integration &
          (
            | {
                client_id: string
                client_secret: string
                pem: string
                webhook_secret: string | null
              }
            | {
                [key: string]: unknown
              }
          )
      >
    | Res<404, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url = this.basePath + `/app-manifests/${p["code"]}/conversions`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  appsGetWebhookConfigForApp(
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_webhook_config>> {
    const url = this.basePath + `/app/hook/config`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  appsUpdateWebhookConfigForApp(
    p: {
      requestBody: {
        content_type?: t_webhook_config_content_type
        insecure_ssl?: t_webhook_config_insecure_ssl
        secret?: t_webhook_config_secret
        url?: t_webhook_config_url
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_webhook_config>> {
    const url = this.basePath + `/app/hook/config`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  appsListWebhookDeliveries(
    p: {
      perPage?: number
      cursor?: string
      redelivery?: boolean
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_hook_delivery_item[]>
    | Res<400, t_scim_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/app/hook/deliveries`
    const query = this._query({
      per_page: p["perPage"],
      cursor: p["cursor"],
      redelivery: p["redelivery"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  appsGetWebhookDelivery(
    p: {
      deliveryId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_hook_delivery>
    | Res<400, t_scim_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/app/hook/deliveries/${p["deliveryId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  appsRedeliverWebhookDelivery(
    p: {
      deliveryId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<202, EmptyObject>
    | Res<400, t_scim_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath + `/app/hook/deliveries/${p["deliveryId"]}/attempts`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  appsListInstallationRequestsForAuthenticatedApp(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_integration_installation_request[]>
    | Res<304, void>
    | Res<401, t_basic_error>
  > {
    const url = this.basePath + `/app/installation-requests`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  appsListInstallations(
    p: {
      perPage?: number
      page?: number
      since?: string
      outdated?: string
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_installation[]>> {
    const url = this.basePath + `/app/installations`
    const query = this._query({
      per_page: p["perPage"],
      page: p["page"],
      since: p["since"],
      outdated: p["outdated"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  appsGetInstallation(
    p: {
      installationId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_installation> | Res<404, t_basic_error>> {
    const url = this.basePath + `/app/installations/${p["installationId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  appsDeleteInstallation(
    p: {
      installationId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, t_basic_error>> {
    const url = this.basePath + `/app/installations/${p["installationId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  appsCreateInstallationAccessToken(
    p: {
      installationId: number
      requestBody?: {
        permissions?: t_app_permissions
        repositories?: string[]
        repository_ids?: number[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_installation_token>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath + `/app/installations/${p["installationId"]}/access_tokens`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  appsSuspendInstallation(
    p: {
      installationId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, t_basic_error>> {
    const url =
      this.basePath + `/app/installations/${p["installationId"]}/suspended`

    return this._fetch(url, { method: "PUT", ...(opts ?? {}) }, timeout)
  }

  appsUnsuspendInstallation(
    p: {
      installationId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, t_basic_error>> {
    const url =
      this.basePath + `/app/installations/${p["installationId"]}/suspended`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  appsDeleteAuthorization(
    p: {
      clientId: string
      requestBody: {
        access_token: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<422, t_validation_error>> {
    const url = this.basePath + `/applications/${p["clientId"]}/grant`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "DELETE", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  appsCheckToken(
    p: {
      clientId: string
      requestBody: {
        access_token: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_authorization>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/applications/${p["clientId"]}/token`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  appsResetToken(
    p: {
      clientId: string
      requestBody: {
        access_token: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_authorization> | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/applications/${p["clientId"]}/token`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  appsDeleteToken(
    p: {
      clientId: string
      requestBody: {
        access_token: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<422, t_validation_error>> {
    const url = this.basePath + `/applications/${p["clientId"]}/token`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "DELETE", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  appsScopeToken(
    p: {
      clientId: string
      requestBody: {
        access_token: string
        permissions?: t_app_permissions
        repositories?: string[]
        repository_ids?: number[]
        target?: string
        target_id?: number
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_authorization>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/applications/${p["clientId"]}/token/scoped`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  appsGetBySlug(
    p: {
      appSlug: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_integration> | Res<403, t_basic_error> | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/apps/${p["appSlug"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codesOfConductGetAllCodesOfConduct(
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_code_of_conduct[]> | Res<304, void>> {
    const url = this.basePath + `/codes_of_conduct`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codesOfConductGetConductCode(
    p: {
      key: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_code_of_conduct> | Res<304, void> | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/codes_of_conduct/${p["key"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  emojisGet(
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          [key: string]: string
        }
      >
    | Res<304, void>
  > {
    const url = this.basePath + `/emojis`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  dependabotListAlertsForEnterprise(
    p: {
      enterprise: string
      state?: string
      severity?: string
      ecosystem?: string
      package?: string
      scope?: "development" | "runtime"
      sort?: "created" | "updated"
      direction?: "asc" | "desc"
      before?: string
      after?: string
      first?: number
      last?: number
      perPage?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_dependabot_alert_with_repository[]>
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url =
      this.basePath + `/enterprises/${p["enterprise"]}/dependabot/alerts`
    const query = this._query({
      state: p["state"],
      severity: p["severity"],
      ecosystem: p["ecosystem"],
      package: p["package"],
      scope: p["scope"],
      sort: p["sort"],
      direction: p["direction"],
      before: p["before"],
      after: p["after"],
      first: p["first"],
      last: p["last"],
      per_page: p["perPage"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  secretScanningListAlertsForEnterprise(
    p: {
      enterprise: string
      state?: "open" | "resolved"
      secretType?: string
      resolution?: string
      sort?: "created" | "updated"
      direction?: "asc" | "desc"
      perPage?: number
      before?: string
      after?: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_organization_secret_scanning_alert[]>
    | Res<404, t_basic_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath + `/enterprises/${p["enterprise"]}/secret-scanning/alerts`
    const query = this._query({
      state: p["state"],
      secret_type: p["secretType"],
      resolution: p["resolution"],
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      before: p["before"],
      after: p["after"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  activityListPublicEvents(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_event[]>
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url = this.basePath + `/events`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  activityGetFeeds(
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_feed>> {
    const url = this.basePath + `/feeds`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  gistsList(
    p: {
      since?: string
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_base_gist[]> | Res<304, void> | Res<403, t_basic_error>
  > {
    const url = this.basePath + `/gists`
    const query = this._query({
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  gistsCreate(
    p: {
      requestBody: {
        description?: string
        files: {
          [key: string]: {
            content: string
          }
        }
        public?: boolean | "true" | "false"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_gist_simple>
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/gists`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  gistsListPublic(
    p: {
      since?: string
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_base_gist[]>
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/gists/public`
    const query = this._query({
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  gistsListStarred(
    p: {
      since?: string
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_base_gist[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
  > {
    const url = this.basePath + `/gists/starred`
    const query = this._query({
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  gistsGet(
    p: {
      gistId: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_gist_simple>
    | Res<304, void>
    | Res<
        403,
        {
          block?: {
            created_at?: string
            html_url?: string | null
            reason?: string
          }
          documentation_url?: string
          message?: string
        }
      >
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/gists/${p["gistId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  gistsUpdate(
    p: {
      gistId: string
      requestBody: {
        description?: string
        files?: {
          [key: string]: EmptyObject | null
        }
      } | null
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_gist_simple>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/gists/${p["gistId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  gistsDelete(
    p: {
      gistId: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/gists/${p["gistId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  gistsListComments(
    p: {
      gistId: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_gist_comment[]>
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/gists/${p["gistId"]}/comments`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  gistsCreateComment(
    p: {
      gistId: string
      requestBody: {
        body: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_gist_comment>
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/gists/${p["gistId"]}/comments`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  gistsGetComment(
    p: {
      gistId: string
      commentId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_gist_comment>
    | Res<304, void>
    | Res<
        403,
        {
          block?: {
            created_at?: string
            html_url?: string | null
            reason?: string
          }
          documentation_url?: string
          message?: string
        }
      >
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath + `/gists/${p["gistId"]}/comments/${p["commentId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  gistsUpdateComment(
    p: {
      gistId: string
      commentId: number
      requestBody: {
        body: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_gist_comment> | Res<404, t_basic_error>> {
    const url =
      this.basePath + `/gists/${p["gistId"]}/comments/${p["commentId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  gistsDeleteComment(
    p: {
      gistId: string
      commentId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath + `/gists/${p["gistId"]}/comments/${p["commentId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  gistsListCommits(
    p: {
      gistId: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_gist_commit[]>
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/gists/${p["gistId"]}/commits`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  gistsListForks(
    p: {
      gistId: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_gist_simple[]>
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/gists/${p["gistId"]}/forks`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  gistsFork(
    p: {
      gistId: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_base_gist>
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/gists/${p["gistId"]}/forks`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  gistsCheckIsStarred(
    p: {
      gistId: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<404, EmptyObject>
  > {
    const url = this.basePath + `/gists/${p["gistId"]}/star`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  gistsStar(
    p: {
      gistId: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/gists/${p["gistId"]}/star`

    return this._fetch(url, { method: "PUT", ...(opts ?? {}) }, timeout)
  }

  gistsUnstar(
    p: {
      gistId: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/gists/${p["gistId"]}/star`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  gistsGetRevision(
    p: {
      gistId: string
      sha: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_gist_simple>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/gists/${p["gistId"]}/${p["sha"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  gitignoreGetAllTemplates(
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, string[]> | Res<304, void>> {
    const url = this.basePath + `/gitignore/templates`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  gitignoreGetTemplate(
    p: {
      name: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_gitignore_template> | Res<304, void>> {
    const url = this.basePath + `/gitignore/templates/${p["name"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  appsListReposAccessibleToInstallation(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          repositories: t_repository[]
          repository_selection?: string
          total_count: number
        }
      >
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
  > {
    const url = this.basePath + `/installation/repositories`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  appsRevokeInstallationAccessToken(
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url = this.basePath + `/installation/token`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  issuesList(
    p: {
      filter?:
        | "assigned"
        | "created"
        | "mentioned"
        | "subscribed"
        | "repos"
        | "all"
      state?: "open" | "closed" | "all"
      labels?: string
      sort?: "created" | "updated" | "comments"
      direction?: "asc" | "desc"
      since?: string
      collab?: boolean
      orgs?: boolean
      owned?: boolean
      pulls?: boolean
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_issue[]>
    | Res<304, void>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/issues`
    const query = this._query({
      filter: p["filter"],
      state: p["state"],
      labels: p["labels"],
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      collab: p["collab"],
      orgs: p["orgs"],
      owned: p["owned"],
      pulls: p["pulls"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  licensesGetAllCommonlyUsed(
    p: {
      featured?: boolean
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_license_simple[]> | Res<304, void>> {
    const url = this.basePath + `/licenses`
    const query = this._query({
      featured: p["featured"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  licensesGet(
    p: {
      license: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_license>
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/licenses/${p["license"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  markdownRender(
    p: {
      requestBody: {
        context?: string
        mode?: "markdown" | "gfm"
        text: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, string> | Res<304, void>> {
    const url = this.basePath + `/markdown`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  markdownRenderRaw(
    p: {
      requestBody?: string
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, string> | Res<304, void>> {
    const url = this.basePath + `/markdown/raw`
    const headers = this._headers({ "Content-Type": "text/plain" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  appsGetSubscriptionPlanForAccount(
    p: {
      accountId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_marketplace_purchase>
    | Res<401, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath + `/marketplace_listing/accounts/${p["accountId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  appsListPlans(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_marketplace_listing_plan[]>
    | Res<401, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/marketplace_listing/plans`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  appsListAccountsForPlan(
    p: {
      planId: number
      sort?: "created" | "updated"
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_marketplace_purchase[]>
    | Res<401, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath + `/marketplace_listing/plans/${p["planId"]}/accounts`
    const query = this._query({
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  appsGetSubscriptionPlanForAccountStubbed(
    p: {
      accountId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_marketplace_purchase> | Res<401, t_basic_error> | Res<404, void>
  > {
    const url =
      this.basePath + `/marketplace_listing/stubbed/accounts/${p["accountId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  appsListPlansStubbed(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_marketplace_listing_plan[]> | Res<401, t_basic_error>
  > {
    const url = this.basePath + `/marketplace_listing/stubbed/plans`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  appsListAccountsForPlanStubbed(
    p: {
      planId: number
      sort?: "created" | "updated"
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_marketplace_purchase[]> | Res<401, t_basic_error>
  > {
    const url =
      this.basePath +
      `/marketplace_listing/stubbed/plans/${p["planId"]}/accounts`
    const query = this._query({
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  metaGet(
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_api_overview> | Res<304, void>> {
    const url = this.basePath + `/meta`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  activityListPublicEventsForRepoNetwork(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_event[]>
    | Res<301, t_basic_error>
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/networks/${p["owner"]}/${p["repo"]}/events`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  activityListNotificationsForAuthenticatedUser(
    p: {
      all?: boolean
      participating?: boolean
      since?: string
      before?: string
      page?: number
      perPage?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_thread[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/notifications`
    const query = this._query({
      all: p["all"],
      participating: p["participating"],
      since: p["since"],
      before: p["before"],
      page: p["page"],
      per_page: p["perPage"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  activityMarkNotificationsAsRead(
    p: {
      requestBody?: {
        last_read_at?: string
        read?: boolean
      }
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        202,
        {
          message?: string
        }
      >
    | Res<205, void>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
  > {
    const url = this.basePath + `/notifications`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  activityGetThread(
    p: {
      threadId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_thread>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
  > {
    const url = this.basePath + `/notifications/threads/${p["threadId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  activityMarkThreadAsRead(
    p: {
      threadId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<205, void> | Res<304, void> | Res<403, t_basic_error>
  > {
    const url = this.basePath + `/notifications/threads/${p["threadId"]}`

    return this._fetch(url, { method: "PATCH", ...(opts ?? {}) }, timeout)
  }

  activityGetThreadSubscriptionForAuthenticatedUser(
    p: {
      threadId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_thread_subscription>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
  > {
    const url =
      this.basePath + `/notifications/threads/${p["threadId"]}/subscription`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  activitySetThreadSubscription(
    p: {
      threadId: number
      requestBody?: {
        ignored?: boolean
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_thread_subscription>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
  > {
    const url =
      this.basePath + `/notifications/threads/${p["threadId"]}/subscription`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  activityDeleteThreadSubscription(
    p: {
      threadId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
  > {
    const url =
      this.basePath + `/notifications/threads/${p["threadId"]}/subscription`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  metaGetOctocat(
    p: {
      s?: string
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, string>> {
    const url = this.basePath + `/octocat`
    const query = this._query({ s: p["s"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsList(
    p: {
      since?: number
      perPage?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_organization_simple[]> | Res<304, void>> {
    const url = this.basePath + `/organizations`
    const query = this._query({ since: p["since"], per_page: p["perPage"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsListPatGrantRequests(
    p: {
      org: string
      perPage?: number
      page?: number
      sort?: "created_at"
      direction?: "asc" | "desc"
      owner?: string[]
      repository?: string
      permission?: string
      lastUsedBefore?: string
      lastUsedAfter?: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_organization_programmatic_access_grant_request[]>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
    | Res<500, t_basic_error>
  > {
    const url =
      this.basePath +
      `/organizations/${p["org"]}/personal-access-token-requests`
    const query = this._query({
      per_page: p["perPage"],
      page: p["page"],
      sort: p["sort"],
      direction: p["direction"],
      owner: p["owner"],
      repository: p["repository"],
      permission: p["permission"],
      last_used_before: p["lastUsedBefore"],
      last_used_after: p["lastUsedAfter"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsReviewPatGrantRequestsInBulk(
    p: {
      org: string
      requestBody: {
        action: "approve" | "deny"
        pat_request_ids?: number[]
        reason?: string | null
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<202, EmptyObject>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
    | Res<500, t_basic_error>
  > {
    const url =
      this.basePath +
      `/organizations/${p["org"]}/personal-access-token-requests`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  orgsReviewPatGrantRequest(
    p: {
      org: string
      patRequestId: number
      requestBody: {
        action: "approve" | "deny"
        reason?: string | null
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
    | Res<500, t_basic_error>
  > {
    const url =
      this.basePath +
      `/organizations/${p["org"]}/personal-access-token-requests/${p["patRequestId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  orgsListPatGrantRequestRepositories(
    p: {
      org: string
      patRequestId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_minimal_repository[]>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url =
      this.basePath +
      `/organizations/${p["org"]}/personal-access-token-requests/${p["patRequestId"]}/repositories`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsListPatGrants(
    p: {
      org: string
      perPage?: number
      page?: number
      sort?: "created_at"
      direction?: "asc" | "desc"
      owner?: string[]
      repository?: string
      permission?: string
      lastUsedBefore?: string
      lastUsedAfter?: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_organization_programmatic_access_grant[]>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
    | Res<500, t_basic_error>
  > {
    const url =
      this.basePath + `/organizations/${p["org"]}/personal-access-tokens`
    const query = this._query({
      per_page: p["perPage"],
      page: p["page"],
      sort: p["sort"],
      direction: p["direction"],
      owner: p["owner"],
      repository: p["repository"],
      permission: p["permission"],
      last_used_before: p["lastUsedBefore"],
      last_used_after: p["lastUsedAfter"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsUpdatePatAccesses(
    p: {
      org: string
      requestBody: {
        action: "revoke"
        pat_ids: number[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<202, EmptyObject>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
    | Res<500, t_basic_error>
  > {
    const url =
      this.basePath + `/organizations/${p["org"]}/personal-access-tokens`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  orgsUpdatePatAccess(
    p: {
      org: string
      patId: number
      requestBody: {
        action: "revoke"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
    | Res<500, t_basic_error>
  > {
    const url =
      this.basePath +
      `/organizations/${p["org"]}/personal-access-tokens/${p["patId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  orgsListPatGrantRepositories(
    p: {
      org: string
      patId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_minimal_repository[]>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url =
      this.basePath +
      `/organizations/${p["org"]}/personal-access-tokens/${p["patId"]}/repositories`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsGet(
    p: {
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_organization_full> | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsUpdate(
    p: {
      org: string
      requestBody?: {
        advanced_security_enabled_for_new_repositories?: boolean
        billing_email?: string
        blog?: string
        company?: string
        default_repository_permission?: "read" | "write" | "admin" | "none"
        dependabot_alerts_enabled_for_new_repositories?: boolean
        dependabot_security_updates_enabled_for_new_repositories?: boolean
        dependency_graph_enabled_for_new_repositories?: boolean
        description?: string
        email?: string
        has_organization_projects?: boolean
        has_repository_projects?: boolean
        location?: string
        members_allowed_repository_creation_type?: "all" | "private" | "none"
        members_can_create_internal_repositories?: boolean
        members_can_create_pages?: boolean
        members_can_create_private_pages?: boolean
        members_can_create_private_repositories?: boolean
        members_can_create_public_pages?: boolean
        members_can_create_public_repositories?: boolean
        members_can_create_repositories?: boolean
        members_can_fork_private_repositories?: boolean
        name?: string
        secret_scanning_enabled_for_new_repositories?: boolean
        secret_scanning_push_protection_custom_link?: string
        secret_scanning_push_protection_custom_link_enabled?: boolean
        secret_scanning_push_protection_enabled_for_new_repositories?: boolean
        twitter_username?: string
        web_commit_signoff_required?: boolean
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_organization_full>
    | Res<409, t_basic_error>
    | Res<422, t_validation_error | t_validation_error_simple>
  > {
    const url = this.basePath + `/orgs/${p["org"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  orgsDelete(
    p: {
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<202, EmptyObject> | Res<403, t_basic_error> | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  actionsGetActionsCacheUsageForOrg(
    p: {
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_actions_cache_usage_org_enterprise>> {
    const url = this.basePath + `/orgs/${p["org"]}/actions/cache/usage`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsGetActionsCacheUsageByRepoForOrg(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        repository_cache_usages: t_actions_cache_usage_by_repository[]
        total_count: number
      }
    >
  > {
    const url =
      this.basePath + `/orgs/${p["org"]}/actions/cache/usage-by-repository`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  oidcGetOidcCustomSubTemplateForOrg(
    p: {
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_oidc_custom_sub>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/actions/oidc/customization/sub`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  oidcUpdateOidcCustomSubTemplateForOrg(
    p: {
      org: string
      requestBody: t_oidc_custom_sub
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<201, t_empty_object> | Res<403, t_basic_error> | Res<404, t_basic_error>
  > {
    const url =
      this.basePath + `/orgs/${p["org"]}/actions/oidc/customization/sub`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsGetGithubActionsPermissionsOrganization(
    p: {
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_actions_organization_permissions>> {
    const url = this.basePath + `/orgs/${p["org"]}/actions/permissions`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsSetGithubActionsPermissionsOrganization(
    p: {
      org: string
      requestBody: {
        allowed_actions?: t_allowed_actions
        enabled_repositories: t_enabled_repositories
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url = this.basePath + `/orgs/${p["org"]}/actions/permissions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsListSelectedRepositoriesEnabledGithubActionsOrganization(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        repositories: t_repository[]
        total_count: number
      }
    >
  > {
    const url =
      this.basePath + `/orgs/${p["org"]}/actions/permissions/repositories`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsSetSelectedRepositoriesEnabledGithubActionsOrganization(
    p: {
      org: string
      requestBody: {
        selected_repository_ids: number[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/actions/permissions/repositories`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsEnableSelectedRepositoryGithubActionsOrganization(
    p: {
      org: string
      repositoryId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/actions/permissions/repositories/${p["repositoryId"]}`

    return this._fetch(url, { method: "PUT", ...(opts ?? {}) }, timeout)
  }

  actionsDisableSelectedRepositoryGithubActionsOrganization(
    p: {
      org: string
      repositoryId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/actions/permissions/repositories/${p["repositoryId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  actionsGetAllowedActionsOrganization(
    p: {
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_selected_actions>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/actions/permissions/selected-actions`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsSetAllowedActionsOrganization(
    p: {
      org: string
      requestBody?: t_selected_actions
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/actions/permissions/selected-actions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsGetGithubActionsDefaultWorkflowPermissionsOrganization(
    p: {
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_actions_get_default_workflow_permissions>> {
    const url = this.basePath + `/orgs/${p["org"]}/actions/permissions/workflow`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsSetGithubActionsDefaultWorkflowPermissionsOrganization(
    p: {
      org: string
      requestBody?: t_actions_set_default_workflow_permissions
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url = this.basePath + `/orgs/${p["org"]}/actions/permissions/workflow`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsListRequiredWorkflows(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        required_workflows: t_required_workflow[]
        total_count: number
      }
    >
  > {
    const url = this.basePath + `/orgs/${p["org"]}/actions/required_workflows`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsCreateRequiredWorkflow(
    p: {
      org: string
      requestBody: {
        repository_id: string
        scope?: "selected" | "all"
        selected_repository_ids?: number[]
        workflow_file_path: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<201, t_required_workflow> | Res<422, t_validation_error_simple>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/actions/required_workflows`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsGetRequiredWorkflow(
    p: {
      org: string
      requiredWorkflowId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_required_workflow>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/actions/required_workflows/${p["requiredWorkflowId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsUpdateRequiredWorkflow(
    p: {
      org: string
      requiredWorkflowId: number
      requestBody: {
        repository_id?: string
        scope?: "selected" | "all"
        selected_repository_ids?: number[]
        workflow_file_path?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_required_workflow> | Res<422, t_validation_error_simple>
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/actions/required_workflows/${p["requiredWorkflowId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsDeleteRequiredWorkflow(
    p: {
      org: string
      requiredWorkflowId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/actions/required_workflows/${p["requiredWorkflowId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  actionsListSelectedRepositoriesRequiredWorkflow(
    p: {
      org: string
      requiredWorkflowId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          repositories: t_repository[]
          total_count: number
        }
      >
    | Res<404, void>
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/actions/required_workflows/${p["requiredWorkflowId"]}/repositories`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsSetSelectedReposToRequiredWorkflow(
    p: {
      org: string
      requiredWorkflowId: number
      requestBody: {
        selected_repository_ids: number[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/actions/required_workflows/${p["requiredWorkflowId"]}/repositories`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsAddSelectedRepoToRequiredWorkflow(
    p: {
      org: string
      requiredWorkflowId: number
      repositoryId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, void> | Res<422, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/actions/required_workflows/${p["requiredWorkflowId"]}/repositories/${p["repositoryId"]}`

    return this._fetch(url, { method: "PUT", ...(opts ?? {}) }, timeout)
  }

  actionsRemoveSelectedRepoFromRequiredWorkflow(
    p: {
      org: string
      requiredWorkflowId: number
      repositoryId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, void> | Res<422, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/actions/required_workflows/${p["requiredWorkflowId"]}/repositories/${p["repositoryId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  actionsListSelfHostedRunnersForOrg(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        runners: t_runner[]
        total_count: number
      }
    >
  > {
    const url = this.basePath + `/orgs/${p["org"]}/actions/runners`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsListRunnerApplicationsForOrg(
    p: {
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_runner_application[]>> {
    const url = this.basePath + `/orgs/${p["org"]}/actions/runners/downloads`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsCreateRegistrationTokenForOrg(
    p: {
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_authentication_token>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/actions/runners/registration-token`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  actionsCreateRemoveTokenForOrg(
    p: {
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_authentication_token>> {
    const url = this.basePath + `/orgs/${p["org"]}/actions/runners/remove-token`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  actionsGetSelfHostedRunnerForOrg(
    p: {
      org: string
      runnerId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_runner>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/actions/runners/${p["runnerId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsDeleteSelfHostedRunnerFromOrg(
    p: {
      org: string
      runnerId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/actions/runners/${p["runnerId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  actionsListLabelsForSelfHostedRunnerForOrg(
    p: {
      org: string
      runnerId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          labels: t_runner_label[]
          total_count: number
        }
      >
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/actions/runners/${p["runnerId"]}/labels`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsAddCustomLabelsToSelfHostedRunnerForOrg(
    p: {
      org: string
      runnerId: number
      requestBody: {
        labels: string[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          labels: t_runner_label[]
          total_count: number
        }
      >
    | Res<404, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/actions/runners/${p["runnerId"]}/labels`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsSetCustomLabelsForSelfHostedRunnerForOrg(
    p: {
      org: string
      runnerId: number
      requestBody: {
        labels: string[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          labels: t_runner_label[]
          total_count: number
        }
      >
    | Res<404, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/actions/runners/${p["runnerId"]}/labels`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg(
    p: {
      org: string
      runnerId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          labels: t_runner_label[]
          total_count: number
        }
      >
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/actions/runners/${p["runnerId"]}/labels`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  actionsRemoveCustomLabelFromSelfHostedRunnerForOrg(
    p: {
      org: string
      runnerId: number
      name: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          labels: t_runner_label[]
          total_count: number
        }
      >
    | Res<404, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/actions/runners/${p["runnerId"]}/labels/${p["name"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  actionsListOrgSecrets(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        secrets: t_organization_actions_secret[]
        total_count: number
      }
    >
  > {
    const url = this.basePath + `/orgs/${p["org"]}/actions/secrets`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsGetOrgPublicKey(
    p: {
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_actions_public_key>> {
    const url = this.basePath + `/orgs/${p["org"]}/actions/secrets/public-key`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsGetOrgSecret(
    p: {
      org: string
      secretName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_organization_actions_secret>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsCreateOrUpdateOrgSecret(
    p: {
      org: string
      secretName: string
      requestBody: {
        encrypted_value?: string
        key_id?: string
        selected_repository_ids?: number[]
        visibility: "all" | "private" | "selected"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_empty_object> | Res<204, void>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsDeleteOrgSecret(
    p: {
      org: string
      secretName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  actionsListSelectedReposForOrgSecret(
    p: {
      org: string
      secretName: string
      page?: number
      perPage?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        repositories: t_minimal_repository[]
        total_count: number
      }
    >
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}/repositories`
    const query = this._query({ page: p["page"], per_page: p["perPage"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsSetSelectedReposForOrgSecret(
    p: {
      org: string
      secretName: string
      requestBody: {
        selected_repository_ids: number[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}/repositories`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsAddSelectedRepoToOrgSecret(
    p: {
      org: string
      secretName: string
      repositoryId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<409, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`

    return this._fetch(url, { method: "PUT", ...(opts ?? {}) }, timeout)
  }

  actionsRemoveSelectedRepoFromOrgSecret(
    p: {
      org: string
      secretName: string
      repositoryId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<409, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  actionsListOrgVariables(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        total_count: number
        variables: t_organization_actions_variable[]
      }
    >
  > {
    const url = this.basePath + `/orgs/${p["org"]}/actions/variables`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsCreateOrgVariable(
    p: {
      org: string
      requestBody: {
        name: string
        selected_repository_ids?: number[]
        value: string
        visibility: "all" | "private" | "selected"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_empty_object>> {
    const url = this.basePath + `/orgs/${p["org"]}/actions/variables`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsGetOrgVariable(
    p: {
      org: string
      name: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_organization_actions_variable>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/actions/variables/${p["name"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsUpdateOrgVariable(
    p: {
      org: string
      name: string
      requestBody: {
        name?: string
        selected_repository_ids?: number[]
        value?: string
        visibility?: "all" | "private" | "selected"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/actions/variables/${p["name"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsDeleteOrgVariable(
    p: {
      org: string
      name: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/actions/variables/${p["name"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  actionsListSelectedReposForOrgVariable(
    p: {
      org: string
      name: string
      page?: number
      perPage?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          repositories: t_minimal_repository[]
          total_count: number
        }
      >
    | Res<409, void>
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/actions/variables/${p["name"]}/repositories`
    const query = this._query({ page: p["page"], per_page: p["perPage"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsSetSelectedReposForOrgVariable(
    p: {
      org: string
      name: string
      requestBody: {
        selected_repository_ids: number[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<409, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/actions/variables/${p["name"]}/repositories`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsAddSelectedRepoToOrgVariable(
    p: {
      org: string
      name: string
      repositoryId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<409, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/actions/variables/${p["name"]}/repositories/${p["repositoryId"]}`

    return this._fetch(url, { method: "PUT", ...(opts ?? {}) }, timeout)
  }

  actionsRemoveSelectedRepoFromOrgVariable(
    p: {
      org: string
      name: string
      repositoryId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<409, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/actions/variables/${p["name"]}/repositories/${p["repositoryId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  orgsListBlockedUsers(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_simple_user[]>> {
    const url = this.basePath + `/orgs/${p["org"]}/blocks`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsCheckBlockedUser(
    p: {
      org: string
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, t_basic_error>> {
    const url = this.basePath + `/orgs/${p["org"]}/blocks/${p["username"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsBlockUser(
    p: {
      org: string
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<422, t_validation_error>> {
    const url = this.basePath + `/orgs/${p["org"]}/blocks/${p["username"]}`

    return this._fetch(url, { method: "PUT", ...(opts ?? {}) }, timeout)
  }

  orgsUnblockUser(
    p: {
      org: string
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url = this.basePath + `/orgs/${p["org"]}/blocks/${p["username"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  codeScanningListAlertsForOrg(
    p: {
      org: string
      toolName?: t_code_scanning_analysis_tool_name
      toolGuid?: t_code_scanning_analysis_tool_guid
      before?: string
      after?: string
      page?: number
      perPage?: number
      direction?: "asc" | "desc"
      state?: t_code_scanning_alert_state
      sort?: "created" | "updated"
      severity?: t_code_scanning_alert_severity
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_code_scanning_organization_alert_items[]>
    | Res<404, t_basic_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url = this.basePath + `/orgs/${p["org"]}/code-scanning/alerts`
    const query = this._query({
      tool_name: p["toolName"],
      tool_guid: p["toolGuid"],
      before: p["before"],
      after: p["after"],
      page: p["page"],
      per_page: p["perPage"],
      direction: p["direction"],
      state: p["state"],
      sort: p["sort"],
      severity: p["severity"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codespacesListInOrganization(
    p: {
      perPage?: number
      page?: number
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          codespaces: t_codespace[]
          total_count: number
        }
      >
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/codespaces`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codespacesSetCodespacesBilling(
    p: {
      org: string
      requestBody: {
        selected_usernames?: string[]
        visibility:
          | "disabled"
          | "selected_members"
          | "all_members"
          | "all_members_and_outside_collaborators"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<400, void>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
    | Res<500, t_basic_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/codespaces/billing`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  codespacesSetCodespacesBillingUsers(
    p: {
      org: string
      requestBody: {
        selected_usernames: string[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<400, void>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
    | Res<500, t_basic_error>
  > {
    const url =
      this.basePath + `/orgs/${p["org"]}/codespaces/billing/selected_users`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  codespacesDeleteCodespacesBillingUsers(
    p: {
      org: string
      requestBody: {
        selected_usernames: string[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<400, void>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
    | Res<500, t_basic_error>
  > {
    const url =
      this.basePath + `/orgs/${p["org"]}/codespaces/billing/selected_users`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "DELETE", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  codespacesListOrgSecrets(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        secrets: t_codespaces_org_secret[]
        total_count: number
      }
    >
  > {
    const url = this.basePath + `/orgs/${p["org"]}/codespaces/secrets`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codespacesGetOrgPublicKey(
    p: {
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_codespaces_public_key>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/codespaces/secrets/public-key`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codespacesGetOrgSecret(
    p: {
      org: string
      secretName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_codespaces_org_secret>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/codespaces/secrets/${p["secretName"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codespacesCreateOrUpdateOrgSecret(
    p: {
      org: string
      secretName: string
      requestBody: {
        encrypted_value?: string
        key_id?: string
        selected_repository_ids?: number[]
        visibility: "all" | "private" | "selected"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_empty_object>
    | Res<204, void>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath + `/orgs/${p["org"]}/codespaces/secrets/${p["secretName"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  codespacesDeleteOrgSecret(
    p: {
      org: string
      secretName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, t_basic_error>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/codespaces/secrets/${p["secretName"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  codespacesListSelectedReposForOrgSecret(
    p: {
      org: string
      secretName: string
      page?: number
      perPage?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          repositories: t_minimal_repository[]
          total_count: number
        }
      >
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/codespaces/secrets/${p["secretName"]}/repositories`
    const query = this._query({ page: p["page"], per_page: p["perPage"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codespacesSetSelectedReposForOrgSecret(
    p: {
      org: string
      secretName: string
      requestBody: {
        selected_repository_ids: number[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<204, void> | Res<404, t_basic_error> | Res<409, void>
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/codespaces/secrets/${p["secretName"]}/repositories`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  codespacesAddSelectedRepoToOrgSecret(
    p: {
      org: string
      secretName: string
      repositoryId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<404, t_basic_error>
    | Res<409, void>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/codespaces/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`

    return this._fetch(url, { method: "PUT", ...(opts ?? {}) }, timeout)
  }

  codespacesRemoveSelectedRepoFromOrgSecret(
    p: {
      org: string
      secretName: string
      repositoryId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<404, t_basic_error>
    | Res<409, void>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/codespaces/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  dependabotListAlertsForOrg(
    p: {
      org: string
      state?: string
      severity?: string
      ecosystem?: string
      package?: string
      scope?: "development" | "runtime"
      sort?: "created" | "updated"
      direction?: "asc" | "desc"
      before?: string
      after?: string
      first?: number
      last?: number
      perPage?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_dependabot_alert_with_repository[]>
    | Res<304, void>
    | Res<400, t_scim_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/dependabot/alerts`
    const query = this._query({
      state: p["state"],
      severity: p["severity"],
      ecosystem: p["ecosystem"],
      package: p["package"],
      scope: p["scope"],
      sort: p["sort"],
      direction: p["direction"],
      before: p["before"],
      after: p["after"],
      first: p["first"],
      last: p["last"],
      per_page: p["perPage"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  dependabotListOrgSecrets(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        secrets: t_organization_dependabot_secret[]
        total_count: number
      }
    >
  > {
    const url = this.basePath + `/orgs/${p["org"]}/dependabot/secrets`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  dependabotGetOrgPublicKey(
    p: {
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_dependabot_public_key>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/dependabot/secrets/public-key`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  dependabotGetOrgSecret(
    p: {
      org: string
      secretName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_organization_dependabot_secret>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/dependabot/secrets/${p["secretName"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  dependabotCreateOrUpdateOrgSecret(
    p: {
      org: string
      secretName: string
      requestBody: {
        encrypted_value?: string
        key_id?: string
        selected_repository_ids?: string[]
        visibility: "all" | "private" | "selected"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_empty_object> | Res<204, void>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/dependabot/secrets/${p["secretName"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  dependabotDeleteOrgSecret(
    p: {
      org: string
      secretName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/dependabot/secrets/${p["secretName"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  dependabotListSelectedReposForOrgSecret(
    p: {
      org: string
      secretName: string
      page?: number
      perPage?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        repositories: t_minimal_repository[]
        total_count: number
      }
    >
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/dependabot/secrets/${p["secretName"]}/repositories`
    const query = this._query({ page: p["page"], per_page: p["perPage"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  dependabotSetSelectedReposForOrgSecret(
    p: {
      org: string
      secretName: string
      requestBody: {
        selected_repository_ids: number[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/dependabot/secrets/${p["secretName"]}/repositories`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  dependabotAddSelectedRepoToOrgSecret(
    p: {
      org: string
      secretName: string
      repositoryId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<409, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/dependabot/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`

    return this._fetch(url, { method: "PUT", ...(opts ?? {}) }, timeout)
  }

  dependabotRemoveSelectedRepoFromOrgSecret(
    p: {
      org: string
      secretName: string
      repositoryId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<409, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/dependabot/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  packagesListDockerMigrationConflictingPackagesForOrganization(
    p: {
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_package[]> | Res<401, t_basic_error> | Res<403, t_basic_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/docker/conflicts`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  activityListPublicOrgEvents(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_event[]>> {
    const url = this.basePath + `/orgs/${p["org"]}/events`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsListFailedInvitations(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_organization_invitation[]> | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/failed_invitations`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsListWebhooks(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_org_hook[]> | Res<404, t_basic_error>> {
    const url = this.basePath + `/orgs/${p["org"]}/hooks`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsCreateWebhook(
    p: {
      org: string
      requestBody: {
        active?: boolean
        config: {
          content_type?: t_webhook_config_content_type
          insecure_ssl?: t_webhook_config_insecure_ssl
          password?: string
          secret?: t_webhook_config_secret
          url: t_webhook_config_url
          username?: string
        }
        events?: string[]
        name: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_org_hook>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/hooks`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  orgsGetWebhook(
    p: {
      org: string
      hookId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_org_hook> | Res<404, t_basic_error>> {
    const url = this.basePath + `/orgs/${p["org"]}/hooks/${p["hookId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsUpdateWebhook(
    p: {
      org: string
      hookId: number
      requestBody?: {
        active?: boolean
        config?: {
          content_type?: t_webhook_config_content_type
          insecure_ssl?: t_webhook_config_insecure_ssl
          secret?: t_webhook_config_secret
          url: t_webhook_config_url
        }
        events?: string[]
        name?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_org_hook>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/hooks/${p["hookId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  orgsDeleteWebhook(
    p: {
      org: string
      hookId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, t_basic_error>> {
    const url = this.basePath + `/orgs/${p["org"]}/hooks/${p["hookId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  orgsGetWebhookConfigForOrg(
    p: {
      org: string
      hookId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_webhook_config>> {
    const url = this.basePath + `/orgs/${p["org"]}/hooks/${p["hookId"]}/config`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsUpdateWebhookConfigForOrg(
    p: {
      org: string
      hookId: number
      requestBody?: {
        content_type?: t_webhook_config_content_type
        insecure_ssl?: t_webhook_config_insecure_ssl
        secret?: t_webhook_config_secret
        url?: t_webhook_config_url
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_webhook_config>> {
    const url = this.basePath + `/orgs/${p["org"]}/hooks/${p["hookId"]}/config`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  orgsListWebhookDeliveries(
    p: {
      org: string
      hookId: number
      perPage?: number
      cursor?: string
      redelivery?: boolean
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_hook_delivery_item[]>
    | Res<400, t_scim_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath + `/orgs/${p["org"]}/hooks/${p["hookId"]}/deliveries`
    const query = this._query({
      per_page: p["perPage"],
      cursor: p["cursor"],
      redelivery: p["redelivery"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsGetWebhookDelivery(
    p: {
      org: string
      hookId: number
      deliveryId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_hook_delivery>
    | Res<400, t_scim_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/hooks/${p["hookId"]}/deliveries/${p["deliveryId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsRedeliverWebhookDelivery(
    p: {
      org: string
      hookId: number
      deliveryId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<202, EmptyObject>
    | Res<400, t_scim_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/hooks/${p["hookId"]}/deliveries/${p["deliveryId"]}/attempts`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  orgsPingWebhook(
    p: {
      org: string
      hookId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, t_basic_error>> {
    const url = this.basePath + `/orgs/${p["org"]}/hooks/${p["hookId"]}/pings`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  appsGetOrgInstallation(
    p: {
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_installation>> {
    const url = this.basePath + `/orgs/${p["org"]}/installation`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsListAppInstallations(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        installations: t_installation[]
        total_count: number
      }
    >
  > {
    const url = this.basePath + `/orgs/${p["org"]}/installations`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  interactionsGetRestrictionsForOrg(
    p: {
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_interaction_limit_response | EmptyObject>> {
    const url = this.basePath + `/orgs/${p["org"]}/interaction-limits`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  interactionsSetRestrictionsForOrg(
    p: {
      org: string
      requestBody: t_interaction_limit
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_interaction_limit_response> | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/interaction-limits`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  interactionsRemoveRestrictionsForOrg(
    p: {
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url = this.basePath + `/orgs/${p["org"]}/interaction-limits`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  orgsListPendingInvitations(
    p: {
      org: string
      perPage?: number
      page?: number
      role?:
        | "all"
        | "admin"
        | "direct_member"
        | "billing_manager"
        | "hiring_manager"
      invitationSource?: "all" | "member" | "scim"
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_organization_invitation[]> | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/invitations`
    const query = this._query({
      per_page: p["perPage"],
      page: p["page"],
      role: p["role"],
      invitation_source: p["invitationSource"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsCreateInvitation(
    p: {
      org: string
      requestBody?: {
        email?: string
        invitee_id?: number
        role?: "admin" | "direct_member" | "billing_manager"
        team_ids?: number[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_organization_invitation>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/invitations`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  orgsCancelInvitation(
    p: {
      org: string
      invitationId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<204, void> | Res<404, t_basic_error> | Res<422, t_validation_error>
  > {
    const url =
      this.basePath + `/orgs/${p["org"]}/invitations/${p["invitationId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  orgsListInvitationTeams(
    p: {
      org: string
      invitationId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team[]> | Res<404, t_basic_error>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/invitations/${p["invitationId"]}/teams`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  issuesListForOrg(
    p: {
      org: string
      filter?:
        | "assigned"
        | "created"
        | "mentioned"
        | "subscribed"
        | "repos"
        | "all"
      state?: "open" | "closed" | "all"
      labels?: string
      sort?: "created" | "updated" | "comments"
      direction?: "asc" | "desc"
      since?: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_issue[]> | Res<404, t_basic_error>> {
    const url = this.basePath + `/orgs/${p["org"]}/issues`
    const query = this._query({
      filter: p["filter"],
      state: p["state"],
      labels: p["labels"],
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsListMembers(
    p: {
      org: string
      filter?: "2fa_disabled" | "all"
      role?: "all" | "admin" | "member"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_simple_user[]> | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/members`
    const query = this._query({
      filter: p["filter"],
      role: p["role"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsCheckMembershipForUser(
    p: {
      org: string
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<302, void> | Res<404, void>> {
    const url = this.basePath + `/orgs/${p["org"]}/members/${p["username"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsRemoveMember(
    p: {
      org: string
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<403, t_basic_error>> {
    const url = this.basePath + `/orgs/${p["org"]}/members/${p["username"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  codespacesGetCodespacesForUserInOrg(
    p: {
      perPage?: number
      page?: number
      org: string
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          codespaces: t_codespace[]
          total_count: number
        }
      >
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url =
      this.basePath + `/orgs/${p["org"]}/members/${p["username"]}/codespaces`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codespacesDeleteFromOrganization(
    p: {
      org: string
      username: string
      codespaceName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<202, EmptyObject>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/members/${p["username"]}/codespaces/${p["codespaceName"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  codespacesStopInOrganization(
    p: {
      org: string
      username: string
      codespaceName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_codespace>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/members/${p["username"]}/codespaces/${p["codespaceName"]}/stop`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  orgsGetMembershipForUser(
    p: {
      org: string
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_org_membership>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/memberships/${p["username"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsSetMembershipForUser(
    p: {
      org: string
      username: string
      requestBody?: {
        role?: "admin" | "member"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_org_membership>
    | Res<403, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/memberships/${p["username"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  orgsRemoveMembershipForUser(
    p: {
      org: string
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<204, void> | Res<403, t_basic_error> | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/memberships/${p["username"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  migrationsListForOrg(
    p: {
      org: string
      perPage?: number
      page?: number
      exclude?: "repositories"[]
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_migration[]>> {
    const url = this.basePath + `/orgs/${p["org"]}/migrations`
    const query = this._query({
      per_page: p["perPage"],
      page: p["page"],
      exclude: p["exclude"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  migrationsStartForOrg(
    p: {
      org: string
      requestBody: {
        exclude?: "repositories"[]
        exclude_attachments?: boolean
        exclude_git_data?: boolean
        exclude_metadata?: boolean
        exclude_owner_projects?: boolean
        exclude_releases?: boolean
        lock_repositories?: boolean
        org_metadata_only?: boolean
        repositories: string[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_migration>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/migrations`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  migrationsGetStatusForOrg(
    p: {
      org: string
      migrationId: number
      exclude?: "repositories"[]
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_migration> | Res<404, t_basic_error>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/migrations/${p["migrationId"]}`
    const query = this._query({ exclude: p["exclude"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  migrationsDownloadArchiveForOrg(
    p: {
      org: string
      migrationId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<302, void> | Res<404, t_basic_error>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/migrations/${p["migrationId"]}/archive`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  migrationsDeleteArchiveForOrg(
    p: {
      org: string
      migrationId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, t_basic_error>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/migrations/${p["migrationId"]}/archive`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  migrationsUnlockRepoForOrg(
    p: {
      org: string
      migrationId: number
      repoName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/migrations/${p["migrationId"]}/repos/${p["repoName"]}/lock`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  migrationsListReposForOrg(
    p: {
      org: string
      migrationId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_minimal_repository[]> | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/migrations/${p["migrationId"]}/repositories`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsListOutsideCollaborators(
    p: {
      org: string
      filter?: "2fa_disabled" | "all"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_simple_user[]>> {
    const url = this.basePath + `/orgs/${p["org"]}/outside_collaborators`
    const query = this._query({
      filter: p["filter"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsConvertMemberToOutsideCollaborator(
    p: {
      org: string
      username: string
      requestBody?: {
        async?: boolean
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<202, EmptyObject>
    | Res<204, void>
    | Res<403, void>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath + `/orgs/${p["org"]}/outside_collaborators/${p["username"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  orgsRemoveOutsideCollaborator(
    p: {
      org: string
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<
        422,
        {
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath + `/orgs/${p["org"]}/outside_collaborators/${p["username"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  packagesListPackagesForOrganization(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      org: string
      visibility?: "public" | "private" | "internal"
      page?: number
      perPage?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_package[]>
    | Res<400, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/packages`
    const query = this._query({
      package_type: p["packageType"],
      visibility: p["visibility"],
      page: p["page"],
      per_page: p["perPage"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  packagesGetPackageForOrganization(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_package>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/packages/${p["packageType"]}/${p["packageName"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  packagesDeletePackageForOrg(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/packages/${p["packageType"]}/${p["packageName"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  packagesRestorePackageForOrg(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      org: string
      token?: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/packages/${p["packageType"]}/${p["packageName"]}/restore`
    const query = this._query({ token: p["token"] })

    return this._fetch(
      url + query,
      { method: "POST", ...(opts ?? {}) },
      timeout
    )
  }

  packagesGetAllPackageVersionsForPackageOwnedByOrg(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      org: string
      page?: number
      perPage?: number
      state?: "active" | "deleted"
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_package_version[]>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/packages/${p["packageType"]}/${p["packageName"]}/versions`
    const query = this._query({
      page: p["page"],
      per_page: p["perPage"],
      state: p["state"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  packagesGetPackageVersionForOrganization(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      org: string
      packageVersionId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_package_version>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  packagesDeletePackageVersionForOrg(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      org: string
      packageVersionId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  packagesRestorePackageVersionForOrg(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      org: string
      packageVersionId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}/restore`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  projectsListForOrg(
    p: {
      org: string
      state?: "open" | "closed" | "all"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_project[]> | Res<422, t_validation_error_simple>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/projects`
    const query = this._query({
      state: p["state"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  projectsCreateForOrg(
    p: {
      org: string
      requestBody: {
        body?: string
        name: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_project>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<410, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/projects`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  orgsListPublicMembers(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_simple_user[]>> {
    const url = this.basePath + `/orgs/${p["org"]}/public_members`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsCheckPublicMembershipForUser(
    p: {
      org: string
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, void>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/public_members/${p["username"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsSetPublicMembershipForAuthenticatedUser(
    p: {
      org: string
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<403, t_basic_error>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/public_members/${p["username"]}`

    return this._fetch(url, { method: "PUT", ...(opts ?? {}) }, timeout)
  }

  orgsRemovePublicMembershipForAuthenticatedUser(
    p: {
      org: string
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/public_members/${p["username"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposListForOrg(
    p: {
      org: string
      type?: "all" | "public" | "private" | "forks" | "sources" | "member"
      sort?: "created" | "updated" | "pushed" | "full_name"
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_minimal_repository[]>> {
    const url = this.basePath + `/orgs/${p["org"]}/repos`
    const query = this._query({
      type: p["type"],
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCreateInOrg(
    p: {
      org: string
      requestBody: {
        allow_auto_merge?: boolean
        allow_merge_commit?: boolean
        allow_rebase_merge?: boolean
        allow_squash_merge?: boolean
        auto_init?: boolean
        delete_branch_on_merge?: boolean
        description?: string
        gitignore_template?: string
        has_downloads?: boolean
        has_issues?: boolean
        has_projects?: boolean
        has_wiki?: boolean
        homepage?: string
        is_template?: boolean
        license_template?: string
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK"
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE"
        name: string
        private?: boolean
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK"
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE"
        team_id?: number
        use_squash_pr_title_as_default?: boolean
        visibility?: "public" | "private"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_repository>
    | Res<403, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/repos`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposGetOrgRulesets(
    p: {
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_repository_ruleset[]>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/rulesets`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCreateOrgRuleset(
    p: {
      org: string
      requestBody: {
        bypass_actors?: t_repository_ruleset_bypass_actor[]
        conditions?: t_org_ruleset_conditions
        enforcement: t_repository_rule_enforcement
        name: string
        rules?: t_repository_rule[]
        target?: "branch" | "tag"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_repository_ruleset>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/rulesets`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposGetOrgRuleset(
    p: {
      org: string
      rulesetId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_repository_ruleset>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/rulesets/${p["rulesetId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposUpdateOrgRuleset(
    p: {
      org: string
      rulesetId: number
      requestBody?: {
        bypass_actors?: t_repository_ruleset_bypass_actor[]
        conditions?: t_org_ruleset_conditions
        enforcement?: t_repository_rule_enforcement
        name?: string
        rules?: t_repository_rule[]
        target?: "branch" | "tag"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_repository_ruleset>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/rulesets/${p["rulesetId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposDeleteOrgRuleset(
    p: {
      org: string
      rulesetId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<204, void> | Res<404, t_basic_error> | Res<500, t_basic_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/rulesets/${p["rulesetId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  secretScanningListAlertsForOrg(
    p: {
      org: string
      state?: "open" | "resolved"
      secretType?: string
      resolution?: string
      sort?: "created" | "updated"
      direction?: "asc" | "desc"
      page?: number
      perPage?: number
      before?: string
      after?: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_organization_secret_scanning_alert[]>
    | Res<404, t_basic_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url = this.basePath + `/orgs/${p["org"]}/secret-scanning/alerts`
    const query = this._query({
      state: p["state"],
      secret_type: p["secretType"],
      resolution: p["resolution"],
      sort: p["sort"],
      direction: p["direction"],
      page: p["page"],
      per_page: p["perPage"],
      before: p["before"],
      after: p["after"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsListSecurityManagerTeams(
    p: {
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team_simple[]>> {
    const url = this.basePath + `/orgs/${p["org"]}/security-managers`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsAddSecurityManagerTeam(
    p: {
      org: string
      teamSlug: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<409, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/security-managers/teams/${p["teamSlug"]}`

    return this._fetch(url, { method: "PUT", ...(opts ?? {}) }, timeout)
  }

  orgsRemoveSecurityManagerTeam(
    p: {
      org: string
      teamSlug: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/security-managers/teams/${p["teamSlug"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  billingGetGithubActionsBillingOrg(
    p: {
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_actions_billing_usage>> {
    const url = this.basePath + `/orgs/${p["org"]}/settings/billing/actions`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  billingGetGithubPackagesBillingOrg(
    p: {
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_packages_billing_usage>> {
    const url = this.basePath + `/orgs/${p["org"]}/settings/billing/packages`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  billingGetSharedStorageBillingOrg(
    p: {
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_combined_billing_usage>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/settings/billing/shared-storage`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsList(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team[]> | Res<403, t_basic_error>> {
    const url = this.basePath + `/orgs/${p["org"]}/teams`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsCreate(
    p: {
      org: string
      requestBody: {
        description?: string
        maintainers?: string[]
        name: string
        notification_setting?:
          | "notifications_enabled"
          | "notifications_disabled"
        parent_team_id?: number
        permission?: "pull" | "push"
        privacy?: "secret" | "closed"
        repo_names?: string[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_team_full>
    | Res<403, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/teams`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  teamsGetByName(
    p: {
      org: string
      teamSlug: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team_full> | Res<404, t_basic_error>> {
    const url = this.basePath + `/orgs/${p["org"]}/teams/${p["teamSlug"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsUpdateInOrg(
    p: {
      org: string
      teamSlug: string
      requestBody?: {
        description?: string
        name?: string
        notification_setting?:
          | "notifications_enabled"
          | "notifications_disabled"
        parent_team_id?: number | null
        permission?: "pull" | "push" | "admin"
        privacy?: "secret" | "closed"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_team_full>
    | Res<201, t_team_full>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/orgs/${p["org"]}/teams/${p["teamSlug"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  teamsDeleteInOrg(
    p: {
      org: string
      teamSlug: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url = this.basePath + `/orgs/${p["org"]}/teams/${p["teamSlug"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  teamsListDiscussionsInOrg(
    p: {
      org: string
      teamSlug: string
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
      pinned?: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team_discussion[]>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions`
    const query = this._query({
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
      pinned: p["pinned"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsCreateDiscussionInOrg(
    p: {
      org: string
      teamSlug: string
      requestBody: {
        body: string
        private?: boolean
        title: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_team_discussion>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  teamsGetDiscussionInOrg(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team_discussion>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsUpdateDiscussionInOrg(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
      requestBody?: {
        body?: string
        title?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team_discussion>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  teamsDeleteDiscussionInOrg(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  teamsListDiscussionCommentsInOrg(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team_discussion_comment[]>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments`
    const query = this._query({
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsCreateDiscussionCommentInOrg(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
      requestBody: {
        body: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_team_discussion_comment>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  teamsGetDiscussionCommentInOrg(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
      commentNumber: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team_discussion_comment>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsUpdateDiscussionCommentInOrg(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
      commentNumber: number
      requestBody: {
        body: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team_discussion_comment>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  teamsDeleteDiscussionCommentInOrg(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
      commentNumber: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reactionsListForTeamDiscussionCommentInOrg(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
      commentNumber: number
      content?:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_reaction[]>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}/reactions`
    const query = this._query({
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reactionsCreateForTeamDiscussionCommentInOrg(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
      commentNumber: number
      requestBody: {
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_reaction> | Res<201, t_reaction>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}/reactions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reactionsDeleteForTeamDiscussionComment(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
      commentNumber: number
      reactionId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}/reactions/${p["reactionId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reactionsListForTeamDiscussionInOrg(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
      content?:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_reaction[]>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/reactions`
    const query = this._query({
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reactionsCreateForTeamDiscussionInOrg(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
      requestBody: {
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_reaction> | Res<201, t_reaction>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/reactions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reactionsDeleteForTeamDiscussion(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
      reactionId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/reactions/${p["reactionId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  teamsListPendingInvitationsInOrg(
    p: {
      org: string
      teamSlug: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_organization_invitation[]>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/teams/${p["teamSlug"]}/invitations`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsListMembersInOrg(
    p: {
      org: string
      teamSlug: string
      role?: "member" | "maintainer" | "all"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_simple_user[]>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/teams/${p["teamSlug"]}/members`
    const query = this._query({
      role: p["role"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsGetMembershipForUserInOrg(
    p: {
      org: string
      teamSlug: string
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team_membership> | Res<404, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/teams/${p["teamSlug"]}/memberships/${p["username"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsAddOrUpdateMembershipForUserInOrg(
    p: {
      org: string
      teamSlug: string
      username: string
      requestBody?: {
        role?: "member" | "maintainer"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_team_membership> | Res<403, void> | Res<422, void>
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/teams/${p["teamSlug"]}/memberships/${p["username"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  teamsRemoveMembershipForUserInOrg(
    p: {
      org: string
      teamSlug: string
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<403, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/teams/${p["teamSlug"]}/memberships/${p["username"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  teamsListProjectsInOrg(
    p: {
      org: string
      teamSlug: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team_project[]>> {
    const url =
      this.basePath + `/orgs/${p["org"]}/teams/${p["teamSlug"]}/projects`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsCheckPermissionsForProjectInOrg(
    p: {
      org: string
      teamSlug: string
      projectId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team_project> | Res<404, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/teams/${p["teamSlug"]}/projects/${p["projectId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsAddOrUpdateProjectPermissionsInOrg(
    p: {
      org: string
      teamSlug: string
      projectId: number
      requestBody?: {
        permission?: "read" | "write" | "admin"
      } | null
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<
        403,
        {
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/teams/${p["teamSlug"]}/projects/${p["projectId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  teamsRemoveProjectInOrg(
    p: {
      org: string
      teamSlug: string
      projectId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/teams/${p["teamSlug"]}/projects/${p["projectId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  teamsListReposInOrg(
    p: {
      org: string
      teamSlug: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_minimal_repository[]>> {
    const url = this.basePath + `/orgs/${p["org"]}/teams/${p["teamSlug"]}/repos`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsCheckPermissionsForRepoInOrg(
    p: {
      org: string
      teamSlug: string
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_team_repository> | Res<204, void> | Res<404, void>
  > {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/teams/${p["teamSlug"]}/repos/${p["owner"]}/${p["repo"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsAddOrUpdateRepoPermissionsInOrg(
    p: {
      org: string
      teamSlug: string
      owner: string
      repo: string
      requestBody?: {
        permission?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/teams/${p["teamSlug"]}/repos/${p["owner"]}/${p["repo"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  teamsRemoveRepoInOrg(
    p: {
      org: string
      teamSlug: string
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/teams/${p["teamSlug"]}/repos/${p["owner"]}/${p["repo"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  teamsListChildInOrg(
    p: {
      org: string
      teamSlug: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team[]>> {
    const url = this.basePath + `/orgs/${p["org"]}/teams/${p["teamSlug"]}/teams`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsEnableOrDisableSecurityProductOnAllOrgRepos(
    p: {
      org: string
      securityProduct:
        | "dependency_graph"
        | "dependabot_alerts"
        | "dependabot_security_updates"
        | "advanced_security"
        | "code_scanning_default_setup"
        | "secret_scanning"
        | "secret_scanning_push_protection"
      enablement: "enable_all" | "disable_all"
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<422, void>> {
    const url =
      this.basePath +
      `/orgs/${p["org"]}/${p["securityProduct"]}/${p["enablement"]}`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  projectsGetCard(
    p: {
      cardId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_project_card>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/projects/columns/cards/${p["cardId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  projectsUpdateCard(
    p: {
      cardId: number
      requestBody?: {
        archived?: boolean
        note?: string | null
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_project_card>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url = this.basePath + `/projects/columns/cards/${p["cardId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  projectsDeleteCard(
    p: {
      cardId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<
        403,
        {
          documentation_url?: string
          errors?: string[]
          message?: string
        }
      >
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/projects/columns/cards/${p["cardId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  projectsMoveCard(
    p: {
      cardId: number
      requestBody: {
        column_id?: number
        position: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, EmptyObject>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<
        403,
        {
          documentation_url?: string
          errors?: {
            code?: string
            field?: string
            message?: string
            resource?: string
          }[]
          message?: string
        }
      >
    | Res<422, t_validation_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          errors?: {
            code?: string
            message?: string
          }[]
          message?: string
        }
      >
  > {
    const url = this.basePath + `/projects/columns/cards/${p["cardId"]}/moves`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  projectsGetColumn(
    p: {
      columnId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_project_column>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/projects/columns/${p["columnId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  projectsUpdateColumn(
    p: {
      columnId: number
      requestBody: {
        name: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_project_column>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
  > {
    const url = this.basePath + `/projects/columns/${p["columnId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  projectsDeleteColumn(
    p: {
      columnId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
  > {
    const url = this.basePath + `/projects/columns/${p["columnId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  projectsListCards(
    p: {
      columnId: number
      archivedState?: "all" | "archived" | "not_archived"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_project_card[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
  > {
    const url = this.basePath + `/projects/columns/${p["columnId"]}/cards`
    const query = this._query({
      archived_state: p["archivedState"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  projectsCreateCard(
    p: {
      columnId: number
      requestBody:
        | {
            note: string | null
          }
        | {
            content_id: number
            content_type: string
          }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_project_card>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<422, t_validation_error | t_validation_error_simple>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          errors?: {
            code?: string
            message?: string
          }[]
          message?: string
        }
      >
  > {
    const url = this.basePath + `/projects/columns/${p["columnId"]}/cards`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  projectsMoveColumn(
    p: {
      columnId: number
      requestBody: {
        position: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, EmptyObject>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url = this.basePath + `/projects/columns/${p["columnId"]}/moves`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  projectsGet(
    p: {
      projectId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_project>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
  > {
    const url = this.basePath + `/projects/${p["projectId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  projectsUpdate(
    p: {
      projectId: number
      requestBody?: {
        body?: string | null
        name?: string
        organization_permission?: "read" | "write" | "admin" | "none"
        private?: boolean
        state?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_project>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<
        403,
        {
          documentation_url?: string
          errors?: string[]
          message?: string
        }
      >
    | Res<404, void>
    | Res<410, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url = this.basePath + `/projects/${p["projectId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  projectsDelete(
    p: {
      projectId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<
        403,
        {
          documentation_url?: string
          errors?: string[]
          message?: string
        }
      >
    | Res<404, t_basic_error>
    | Res<410, t_basic_error>
  > {
    const url = this.basePath + `/projects/${p["projectId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  projectsListCollaborators(
    p: {
      projectId: number
      affiliation?: "outside" | "direct" | "all"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_simple_user[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/projects/${p["projectId"]}/collaborators`
    const query = this._query({
      affiliation: p["affiliation"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  projectsAddCollaborator(
    p: {
      projectId: number
      username: string
      requestBody?: {
        permission?: "read" | "write" | "admin"
      } | null
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/projects/${p["projectId"]}/collaborators/${p["username"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  projectsRemoveCollaborator(
    p: {
      projectId: number
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/projects/${p["projectId"]}/collaborators/${p["username"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  projectsGetPermissionForUser(
    p: {
      projectId: number
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_project_collaborator_permission>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/projects/${p["projectId"]}/collaborators/${p["username"]}/permission`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  projectsListColumns(
    p: {
      projectId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_project_column[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
  > {
    const url = this.basePath + `/projects/${p["projectId"]}/columns`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  projectsCreateColumn(
    p: {
      projectId: number
      requestBody: {
        name: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_project_column>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url = this.basePath + `/projects/${p["projectId"]}/columns`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  rateLimitGet(
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_rate_limit_overview> | Res<304, void> | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/rate_limit`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsListRepoRequiredWorkflows(
    p: {
      org: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          required_workflows: t_repo_required_workflow[]
          total_count: number
        }
      >
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["org"]}/${p["repo"]}/actions/required_workflows`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsGetRepoRequiredWorkflow(
    p: {
      org: string
      repo: string
      requiredWorkflowIdForRepo: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_repo_required_workflow> | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["org"]}/${p["repo"]}/actions/required_workflows/${p["requiredWorkflowIdForRepo"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsGetRepoRequiredWorkflowUsage(
    p: {
      org: string
      repo: string
      requiredWorkflowIdForRepo: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_workflow_usage> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["org"]}/${p["repo"]}/actions/required_workflows/${p["requiredWorkflowIdForRepo"]}/timing`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGet(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_full_repository>
    | Res<301, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposUpdate(
    p: {
      owner: string
      repo: string
      requestBody?: {
        allow_auto_merge?: boolean
        allow_forking?: boolean
        allow_merge_commit?: boolean
        allow_rebase_merge?: boolean
        allow_squash_merge?: boolean
        allow_update_branch?: boolean
        archived?: boolean
        default_branch?: string
        delete_branch_on_merge?: boolean
        description?: string
        has_issues?: boolean
        has_projects?: boolean
        has_wiki?: boolean
        homepage?: string
        is_template?: boolean
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK"
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE"
        name?: string
        private?: boolean
        security_and_analysis?: {
          advanced_security?: {
            status?: string
          }
          secret_scanning?: {
            status?: string
          }
          secret_scanning_push_protection?: {
            status?: string
          }
        } | null
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK"
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE"
        use_squash_pr_title_as_default?: boolean
        visibility?: "public" | "private"
        web_commit_signoff_required?: boolean
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_full_repository>
    | Res<307, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposDelete(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<307, t_basic_error>
    | Res<
        403,
        {
          documentation_url?: string
          message?: string
        }
      >
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  actionsListArtifactsForRepo(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
      name?: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        artifacts: t_artifact[]
        total_count: number
      }
    >
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/actions/artifacts`
    const query = this._query({
      per_page: p["perPage"],
      page: p["page"],
      name: p["name"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsGetArtifact(
    p: {
      owner: string
      repo: string
      artifactId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_artifact>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/artifacts/${p["artifactId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsDeleteArtifact(
    p: {
      owner: string
      repo: string
      artifactId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/artifacts/${p["artifactId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  actionsDownloadArtifact(
    p: {
      owner: string
      repo: string
      artifactId: number
      archiveFormat: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<302, void> | Res<410, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/artifacts/${p["artifactId"]}/${p["archiveFormat"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsGetActionsCacheUsage(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_actions_cache_usage_by_repository>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/actions/cache/usage`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsGetActionsCacheList(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
      ref?: string
      key?: string
      sort?: "created_at" | "last_accessed_at" | "size_in_bytes"
      direction?: "asc" | "desc"
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_actions_cache_list>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/actions/caches`
    const query = this._query({
      per_page: p["perPage"],
      page: p["page"],
      ref: p["ref"],
      key: p["key"],
      sort: p["sort"],
      direction: p["direction"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsDeleteActionsCacheByKey(
    p: {
      owner: string
      repo: string
      key: string
      ref?: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_actions_cache_list>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/actions/caches`
    const query = this._query({ key: p["key"], ref: p["ref"] })

    return this._fetch(
      url + query,
      { method: "DELETE", ...(opts ?? {}) },
      timeout
    )
  }

  actionsDeleteActionsCacheById(
    p: {
      owner: string
      repo: string
      cacheId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/caches/${p["cacheId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  actionsGetJobForWorkflowRun(
    p: {
      owner: string
      repo: string
      jobId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_job>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/jobs/${p["jobId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsDownloadJobLogsForWorkflowRun(
    p: {
      owner: string
      repo: string
      jobId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<302, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/jobs/${p["jobId"]}/logs`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsReRunJobForWorkflowRun(
    p: {
      owner: string
      repo: string
      jobId: number
      requestBody?: {
        enable_debug_logging?: boolean
      } | null
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_empty_object> | Res<403, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/jobs/${p["jobId"]}/rerun`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsGetCustomOidcSubClaimForRepo(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_oidc_custom_sub_repo>
    | Res<400, t_scim_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/oidc/customization/sub`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsSetCustomOidcSubClaimForRepo(
    p: {
      owner: string
      repo: string
      requestBody: {
        include_claim_keys?: string[]
        use_default: boolean
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_empty_object>
    | Res<400, t_scim_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/oidc/customization/sub`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsListRepoOrganizationSecrets(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        secrets: t_actions_secret[]
        total_count: number
      }
    >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/organization-secrets`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsListRepoOrganizationVariables(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        total_count: number
        variables: t_actions_variable[]
      }
    >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/organization-variables`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsGetGithubActionsPermissionsRepository(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_actions_repository_permissions>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/actions/permissions`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsSetGithubActionsPermissionsRepository(
    p: {
      owner: string
      repo: string
      requestBody: {
        allowed_actions?: t_allowed_actions
        enabled: t_actions_enabled
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/actions/permissions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsGetWorkflowAccessToRepository(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_actions_workflow_access_to_repository>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/permissions/access`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsSetWorkflowAccessToRepository(
    p: {
      owner: string
      repo: string
      requestBody: t_actions_workflow_access_to_repository
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/permissions/access`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsGetAllowedActionsRepository(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_selected_actions>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/permissions/selected-actions`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsSetAllowedActionsRepository(
    p: {
      owner: string
      repo: string
      requestBody?: t_selected_actions
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/permissions/selected-actions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsGetGithubActionsDefaultWorkflowPermissionsRepository(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_actions_get_default_workflow_permissions>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/permissions/workflow`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsSetGithubActionsDefaultWorkflowPermissionsRepository(
    p: {
      owner: string
      repo: string
      requestBody: t_actions_set_default_workflow_permissions
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<409, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/permissions/workflow`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsListRequiredWorkflowRuns(
    p: {
      owner: string
      repo: string
      requiredWorkflowIdForRepo: number
      actor?: string
      branch?: string
      event?: string
      status?:
        | "completed"
        | "action_required"
        | "cancelled"
        | "failure"
        | "neutral"
        | "skipped"
        | "stale"
        | "success"
        | "timed_out"
        | "in_progress"
        | "queued"
        | "requested"
        | "waiting"
        | "pending"
      perPage?: number
      page?: number
      created?: string
      excludePullRequests?: boolean
      checkSuiteId?: number
      headSha?: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        total_count: number
        workflow_runs: t_workflow_run[]
      }
    >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/required_workflows/${p["requiredWorkflowIdForRepo"]}/runs`
    const query = this._query({
      actor: p["actor"],
      branch: p["branch"],
      event: p["event"],
      status: p["status"],
      per_page: p["perPage"],
      page: p["page"],
      created: p["created"],
      exclude_pull_requests: p["excludePullRequests"],
      check_suite_id: p["checkSuiteId"],
      head_sha: p["headSha"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsListSelfHostedRunnersForRepo(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        runners: t_runner[]
        total_count: number
      }
    >
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/actions/runners`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsListRunnerApplicationsForRepo(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_runner_application[]>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runners/downloads`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsCreateRegistrationTokenForRepo(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_authentication_token>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runners/registration-token`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  actionsCreateRemoveTokenForRepo(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_authentication_token>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runners/remove-token`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  actionsGetSelfHostedRunnerForRepo(
    p: {
      owner: string
      repo: string
      runnerId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_runner>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runners/${p["runnerId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsDeleteSelfHostedRunnerFromRepo(
    p: {
      owner: string
      repo: string
      runnerId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runners/${p["runnerId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  actionsListLabelsForSelfHostedRunnerForRepo(
    p: {
      owner: string
      repo: string
      runnerId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          labels: t_runner_label[]
          total_count: number
        }
      >
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runners/${p["runnerId"]}/labels`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsAddCustomLabelsToSelfHostedRunnerForRepo(
    p: {
      owner: string
      repo: string
      runnerId: number
      requestBody: {
        labels: string[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          labels: t_runner_label[]
          total_count: number
        }
      >
    | Res<404, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runners/${p["runnerId"]}/labels`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsSetCustomLabelsForSelfHostedRunnerForRepo(
    p: {
      owner: string
      repo: string
      runnerId: number
      requestBody: {
        labels: string[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          labels: t_runner_label[]
          total_count: number
        }
      >
    | Res<404, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runners/${p["runnerId"]}/labels`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo(
    p: {
      owner: string
      repo: string
      runnerId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          labels: t_runner_label[]
          total_count: number
        }
      >
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runners/${p["runnerId"]}/labels`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  actionsRemoveCustomLabelFromSelfHostedRunnerForRepo(
    p: {
      owner: string
      repo: string
      runnerId: number
      name: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          labels: t_runner_label[]
          total_count: number
        }
      >
    | Res<404, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runners/${p["runnerId"]}/labels/${p["name"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  actionsListWorkflowRunsForRepo(
    p: {
      owner: string
      repo: string
      actor?: string
      branch?: string
      event?: string
      status?:
        | "completed"
        | "action_required"
        | "cancelled"
        | "failure"
        | "neutral"
        | "skipped"
        | "stale"
        | "success"
        | "timed_out"
        | "in_progress"
        | "queued"
        | "requested"
        | "waiting"
        | "pending"
      perPage?: number
      page?: number
      created?: string
      excludePullRequests?: boolean
      checkSuiteId?: number
      headSha?: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        total_count: number
        workflow_runs: t_workflow_run[]
      }
    >
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/actions/runs`
    const query = this._query({
      actor: p["actor"],
      branch: p["branch"],
      event: p["event"],
      status: p["status"],
      per_page: p["perPage"],
      page: p["page"],
      created: p["created"],
      exclude_pull_requests: p["excludePullRequests"],
      check_suite_id: p["checkSuiteId"],
      head_sha: p["headSha"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsGetWorkflowRun(
    p: {
      owner: string
      repo: string
      runId: number
      excludePullRequests?: boolean
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_workflow_run>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}`
    const query = this._query({
      exclude_pull_requests: p["excludePullRequests"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsDeleteWorkflowRun(
    p: {
      owner: string
      repo: string
      runId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  actionsGetReviewsForRun(
    p: {
      owner: string
      repo: string
      runId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_environment_approvals[]>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/approvals`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsApproveWorkflowRun(
    p: {
      owner: string
      repo: string
      runId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<201, t_empty_object> | Res<403, t_basic_error> | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/approve`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  actionsListWorkflowRunArtifacts(
    p: {
      owner: string
      repo: string
      runId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        artifacts: t_artifact[]
        total_count: number
      }
    >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/artifacts`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsGetWorkflowRunAttempt(
    p: {
      owner: string
      repo: string
      runId: number
      attemptNumber: number
      excludePullRequests?: boolean
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_workflow_run>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/attempts/${p["attemptNumber"]}`
    const query = this._query({
      exclude_pull_requests: p["excludePullRequests"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsListJobsForWorkflowRunAttempt(
    p: {
      owner: string
      repo: string
      runId: number
      attemptNumber: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          jobs: t_job[]
          total_count: number
        }
      >
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/attempts/${p["attemptNumber"]}/jobs`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsDownloadWorkflowRunAttemptLogs(
    p: {
      owner: string
      repo: string
      runId: number
      attemptNumber: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<302, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/attempts/${p["attemptNumber"]}/logs`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsCancelWorkflowRun(
    p: {
      owner: string
      repo: string
      runId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<202, t_empty_object> | Res<409, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/cancel`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  actionsReviewCustomGatesForRun(
    p: {
      owner: string
      repo: string
      runId: number
      requestBody:
        | t_review_custom_gates_comment_required
        | t_review_custom_gates_state_required
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/deployment_protection_rule`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsListJobsForWorkflowRun(
    p: {
      owner: string
      repo: string
      runId: number
      filter?: "latest" | "all"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        jobs: t_job[]
        total_count: number
      }
    >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/jobs`
    const query = this._query({
      filter: p["filter"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsDownloadWorkflowRunLogs(
    p: {
      owner: string
      repo: string
      runId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<302, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/logs`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsDeleteWorkflowRunLogs(
    p: {
      owner: string
      repo: string
      runId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<204, void> | Res<403, t_basic_error> | Res<500, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/logs`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  actionsGetPendingDeploymentsForRun(
    p: {
      owner: string
      repo: string
      runId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_pending_deployment[]>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/pending_deployments`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsReviewPendingDeploymentsForRun(
    p: {
      owner: string
      repo: string
      runId: number
      requestBody: {
        comment: string
        environment_ids: number[]
        state: "approved" | "rejected"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_deployment[]>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/pending_deployments`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsReRunWorkflow(
    p: {
      owner: string
      repo: string
      runId: number
      requestBody?: {
        enable_debug_logging?: boolean
      } | null
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_empty_object>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/rerun`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsReRunWorkflowFailedJobs(
    p: {
      owner: string
      repo: string
      runId: number
      requestBody?: {
        enable_debug_logging?: boolean
      } | null
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_empty_object>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/rerun-failed-jobs`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsGetWorkflowRunUsage(
    p: {
      owner: string
      repo: string
      runId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_workflow_run_usage>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/timing`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsListRepoSecrets(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        secrets: t_actions_secret[]
        total_count: number
      }
    >
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/actions/secrets`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsGetRepoPublicKey(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_actions_public_key>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/secrets/public-key`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsGetRepoSecret(
    p: {
      owner: string
      repo: string
      secretName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_actions_secret>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/secrets/${p["secretName"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsCreateOrUpdateRepoSecret(
    p: {
      owner: string
      repo: string
      secretName: string
      requestBody: {
        encrypted_value?: string
        key_id?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_empty_object> | Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/secrets/${p["secretName"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsDeleteRepoSecret(
    p: {
      owner: string
      repo: string
      secretName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/secrets/${p["secretName"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  actionsListRepoVariables(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        total_count: number
        variables: t_actions_variable[]
      }
    >
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/actions/variables`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsCreateRepoVariable(
    p: {
      owner: string
      repo: string
      requestBody: {
        name: string
        value: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_empty_object>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/actions/variables`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsGetRepoVariable(
    p: {
      owner: string
      repo: string
      name: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_actions_variable>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/variables/${p["name"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsUpdateRepoVariable(
    p: {
      owner: string
      repo: string
      name: string
      requestBody: {
        name?: string
        value?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/variables/${p["name"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsDeleteRepoVariable(
    p: {
      owner: string
      repo: string
      name: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/variables/${p["name"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  actionsListRepoWorkflows(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        total_count: number
        workflows: t_workflow[]
      }
    >
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/actions/workflows`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsGetWorkflow(
    p: {
      owner: string
      repo: string
      workflowId: number | string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_workflow>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/workflows/${p["workflowId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsDisableWorkflow(
    p: {
      owner: string
      repo: string
      workflowId: number | string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/workflows/${p["workflowId"]}/disable`

    return this._fetch(url, { method: "PUT", ...(opts ?? {}) }, timeout)
  }

  actionsCreateWorkflowDispatch(
    p: {
      owner: string
      repo: string
      workflowId: number | string
      requestBody: {
        inputs?: {
          [key: string]: unknown
        }
        ref: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/workflows/${p["workflowId"]}/dispatches`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsEnableWorkflow(
    p: {
      owner: string
      repo: string
      workflowId: number | string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/workflows/${p["workflowId"]}/enable`

    return this._fetch(url, { method: "PUT", ...(opts ?? {}) }, timeout)
  }

  actionsListWorkflowRuns(
    p: {
      owner: string
      repo: string
      workflowId: number | string
      actor?: string
      branch?: string
      event?: string
      status?:
        | "completed"
        | "action_required"
        | "cancelled"
        | "failure"
        | "neutral"
        | "skipped"
        | "stale"
        | "success"
        | "timed_out"
        | "in_progress"
        | "queued"
        | "requested"
        | "waiting"
        | "pending"
      perPage?: number
      page?: number
      created?: string
      excludePullRequests?: boolean
      checkSuiteId?: number
      headSha?: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        total_count: number
        workflow_runs: t_workflow_run[]
      }
    >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/workflows/${p["workflowId"]}/runs`
    const query = this._query({
      actor: p["actor"],
      branch: p["branch"],
      event: p["event"],
      status: p["status"],
      per_page: p["perPage"],
      page: p["page"],
      created: p["created"],
      exclude_pull_requests: p["excludePullRequests"],
      check_suite_id: p["checkSuiteId"],
      head_sha: p["headSha"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsGetWorkflowUsage(
    p: {
      owner: string
      repo: string
      workflowId: number | string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_workflow_usage>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/actions/workflows/${p["workflowId"]}/timing`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  issuesListAssignees(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_simple_user[]> | Res<404, t_basic_error>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/assignees`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  issuesCheckUserCanBeAssigned(
    p: {
      owner: string
      repo: string
      assignee: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/assignees/${p["assignee"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposListAutolinks(
    p: {
      owner: string
      repo: string
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_autolink[]>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/autolinks`
    const query = this._query({ page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCreateAutolink(
    p: {
      owner: string
      repo: string
      requestBody: {
        is_alphanumeric?: boolean
        key_prefix: string
        url_template: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_autolink> | Res<422, t_validation_error>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/autolinks`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposGetAutolink(
    p: {
      owner: string
      repo: string
      autolinkId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_autolink> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/autolinks/${p["autolinkId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposDeleteAutolink(
    p: {
      owner: string
      repo: string
      autolinkId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/autolinks/${p["autolinkId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposEnableAutomatedSecurityFixes(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/automated-security-fixes`

    return this._fetch(url, { method: "PUT", ...(opts ?? {}) }, timeout)
  }

  reposDisableAutomatedSecurityFixes(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/automated-security-fixes`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposListBranches(
    p: {
      owner: string
      repo: string
      protected?: boolean
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_short_branch[]> | Res<404, t_basic_error>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/branches`
    const query = this._query({
      protected: p["protected"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGetBranch(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_branch_with_protection>
    | Res<301, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGetBranchProtection(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_branch_protection> | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposUpdateBranchProtection(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody: {
        allow_deletions?: boolean
        allow_force_pushes?: boolean | null
        allow_fork_syncing?: boolean
        block_creations?: boolean
        enforce_admins: boolean | null
        lock_branch?: boolean
        required_conversation_resolution?: boolean
        required_linear_history?: boolean
        required_pull_request_reviews: {
          bypass_pull_request_allowances?: {
            apps?: string[]
            teams?: string[]
            users?: string[]
          }
          dismiss_stale_reviews?: boolean
          dismissal_restrictions?: {
            apps?: string[]
            teams?: string[]
            users?: string[]
          }
          require_code_owner_reviews?: boolean
          require_last_push_approval?: boolean
          required_approving_review_count?: number
        } | null
        required_status_checks: {
          checks?: {
            app_id?: number
            context: string
          }[]
          contexts: string[]
          strict: boolean
        } | null
        restrictions: {
          apps?: string[]
          teams: string[]
          users: string[]
        } | null
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_protected_branch>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposDeleteBranchProtection(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<403, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposGetAdminBranchProtection(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_protected_branch_admin_enforced>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/enforce_admins`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposSetAdminBranchProtection(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_protected_branch_admin_enforced>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/enforce_admins`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  reposDeleteAdminBranchProtection(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/enforce_admins`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposGetPullRequestReviewProtection(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_protected_branch_pull_request_review>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_pull_request_reviews`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposUpdatePullRequestReviewProtection(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody?: {
        bypass_pull_request_allowances?: {
          apps?: string[]
          teams?: string[]
          users?: string[]
        }
        dismiss_stale_reviews?: boolean
        dismissal_restrictions?: {
          apps?: string[]
          teams?: string[]
          users?: string[]
        }
        require_code_owner_reviews?: boolean
        require_last_push_approval?: boolean
        required_approving_review_count?: number
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_protected_branch_pull_request_review>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_pull_request_reviews`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposDeletePullRequestReviewProtection(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_pull_request_reviews`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposGetCommitSignatureProtection(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_protected_branch_admin_enforced> | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_signatures`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCreateCommitSignatureProtection(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_protected_branch_admin_enforced> | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_signatures`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  reposDeleteCommitSignatureProtection(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_signatures`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposGetStatusChecksProtection(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_status_check_policy> | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposUpdateStatusCheckProtection(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody?: {
        checks?: {
          app_id?: number
          context: string
        }[]
        contexts?: string[]
        strict?: boolean
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_status_check_policy>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposRemoveStatusCheckProtection(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposGetAllStatusCheckContexts(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, string[]> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks/contexts`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposAddStatusCheckContexts(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody?:
        | {
            contexts: string[]
          }
        | string[]
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, string[]>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks/contexts`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposSetStatusCheckContexts(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody?:
        | {
            contexts: string[]
          }
        | string[]
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, string[]> | Res<404, t_basic_error> | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks/contexts`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposRemoveStatusCheckContexts(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody:
        | {
            contexts: string[]
          }
        | string[]
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, string[]> | Res<404, t_basic_error> | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks/contexts`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "DELETE", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposGetAccessRestrictions(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_branch_restriction_policy> | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposDeleteAccessRestrictions(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposGetAppsWithAccessToProtectedBranch(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_integration[]> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/apps`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposAddAppAccessRestrictions(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody?:
        | {
            apps: string[]
          }
        | string[]
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_integration[]> | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/apps`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposSetAppAccessRestrictions(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody?:
        | {
            apps: string[]
          }
        | string[]
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_integration[]> | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/apps`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposRemoveAppAccessRestrictions(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody:
        | {
            apps: string[]
          }
        | string[]
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_integration[]> | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/apps`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "DELETE", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposGetTeamsWithAccessToProtectedBranch(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team[]> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/teams`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposAddTeamAccessRestrictions(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody?:
        | {
            teams: string[]
          }
        | string[]
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team[]> | Res<422, t_validation_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/teams`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposSetTeamAccessRestrictions(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody?:
        | {
            teams: string[]
          }
        | string[]
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team[]> | Res<422, t_validation_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/teams`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposRemoveTeamAccessRestrictions(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody:
        | {
            teams: string[]
          }
        | string[]
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team[]> | Res<422, t_validation_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/teams`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "DELETE", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposGetUsersWithAccessToProtectedBranch(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_simple_user[]> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/users`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposAddUserAccessRestrictions(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody?:
        | {
            users: string[]
          }
        | string[]
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_simple_user[]> | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/users`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposSetUserAccessRestrictions(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody?:
        | {
            users: string[]
          }
        | string[]
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_simple_user[]> | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/users`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposRemoveUserAccessRestrictions(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody:
        | {
            users: string[]
          }
        | string[]
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_simple_user[]> | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/users`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "DELETE", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposRenameBranch(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody: {
        new_name: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_branch_with_protection>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/rename`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  checksCreate(
    p: {
      owner: string
      repo: string
      requestBody:
        | {
            status: EmptyObject
          }
        | {
            [key: string]: unknown
          }
        | {
            status?: EmptyObject
          }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_check_run>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/check-runs`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  checksGet(
    p: {
      owner: string
      repo: string
      checkRunId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_check_run>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/check-runs/${p["checkRunId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  checksUpdate(
    p: {
      owner: string
      repo: string
      checkRunId: number
      requestBody: {
        actions?: {
          description: string
          identifier: string
          label: string
        }[]
        completed_at?: string
        conclusion?:
          | "action_required"
          | "cancelled"
          | "failure"
          | "neutral"
          | "success"
          | "skipped"
          | "stale"
          | "timed_out"
        details_url?: string
        external_id?: string
        name?: string
        output?: {
          annotations?: {
            annotation_level: "notice" | "warning" | "failure"
            end_column?: number
            end_line: number
            message: string
            path: string
            raw_details?: string
            start_column?: number
            start_line: number
            title?: string
          }[]
          images?: {
            alt: string
            caption?: string
            image_url: string
          }[]
          summary: string
          text?: string
          title?: string
        }
        started_at?: string
        status?: "queued" | "in_progress" | "completed"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_check_run>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/check-runs/${p["checkRunId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  checksListAnnotations(
    p: {
      owner: string
      repo: string
      checkRunId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_check_annotation[]>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/check-runs/${p["checkRunId"]}/annotations`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  checksRerequestRun(
    p: {
      owner: string
      repo: string
      checkRunId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_empty_object>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/check-runs/${p["checkRunId"]}/rerequest`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  checksCreateSuite(
    p: {
      owner: string
      repo: string
      requestBody: {
        head_sha: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_check_suite> | Res<201, t_check_suite>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/check-suites`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  checksSetSuitesPreferences(
    p: {
      owner: string
      repo: string
      requestBody: {
        auto_trigger_checks?: {
          app_id: number
          setting: boolean
        }[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_check_suite_preference>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/check-suites/preferences`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  checksGetSuite(
    p: {
      owner: string
      repo: string
      checkSuiteId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_check_suite>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/check-suites/${p["checkSuiteId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  checksListForSuite(
    p: {
      owner: string
      repo: string
      checkSuiteId: number
      checkName?: string
      status?: "queued" | "in_progress" | "completed"
      filter?: "latest" | "all"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        check_runs: t_check_run[]
        total_count: number
      }
    >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/check-suites/${p["checkSuiteId"]}/check-runs`
    const query = this._query({
      check_name: p["checkName"],
      status: p["status"],
      filter: p["filter"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  checksRerequestSuite(
    p: {
      owner: string
      repo: string
      checkSuiteId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_empty_object>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/check-suites/${p["checkSuiteId"]}/rerequest`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  codeScanningListAlertsForRepo(
    p: {
      owner: string
      repo: string
      toolName?: t_code_scanning_analysis_tool_name
      toolGuid?: t_code_scanning_analysis_tool_guid
      page?: number
      perPage?: number
      ref?: t_code_scanning_ref
      direction?: "asc" | "desc"
      sort?: "created" | "updated"
      state?: t_code_scanning_alert_state
      severity?: t_code_scanning_alert_severity
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_code_scanning_alert_items[]>
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/code-scanning/alerts`
    const query = this._query({
      tool_name: p["toolName"],
      tool_guid: p["toolGuid"],
      page: p["page"],
      per_page: p["perPage"],
      ref: p["ref"],
      direction: p["direction"],
      sort: p["sort"],
      state: p["state"],
      severity: p["severity"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codeScanningGetAlert(
    p: {
      owner: string
      repo: string
      alertNumber: t_alert_number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_code_scanning_alert>
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/code-scanning/alerts/${p["alertNumber"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codeScanningUpdateAlert(
    p: {
      owner: string
      repo: string
      alertNumber: t_alert_number
      requestBody: {
        dismissed_comment?: t_code_scanning_alert_dismissed_comment
        dismissed_reason?: t_code_scanning_alert_dismissed_reason
        state: t_code_scanning_alert_set_state
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_code_scanning_alert>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/code-scanning/alerts/${p["alertNumber"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  codeScanningListAlertInstances(
    p: {
      owner: string
      repo: string
      alertNumber: t_alert_number
      page?: number
      perPage?: number
      ref?: t_code_scanning_ref
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_code_scanning_alert_instance[]>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/code-scanning/alerts/${p["alertNumber"]}/instances`
    const query = this._query({
      page: p["page"],
      per_page: p["perPage"],
      ref: p["ref"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codeScanningListRecentAnalyses(
    p: {
      owner: string
      repo: string
      toolName?: t_code_scanning_analysis_tool_name
      toolGuid?: t_code_scanning_analysis_tool_guid
      page?: number
      perPage?: number
      ref?: t_code_scanning_ref
      sarifId?: t_code_scanning_analysis_sarif_id
      direction?: "asc" | "desc"
      sort?: "created"
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_code_scanning_analysis[]>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/code-scanning/analyses`
    const query = this._query({
      tool_name: p["toolName"],
      tool_guid: p["toolGuid"],
      page: p["page"],
      per_page: p["perPage"],
      ref: p["ref"],
      sarif_id: p["sarifId"],
      direction: p["direction"],
      sort: p["sort"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codeScanningGetAnalysis(
    p: {
      owner: string
      repo: string
      analysisId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          [key: string]: unknown
        }
      >
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/code-scanning/analyses/${p["analysisId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codeScanningDeleteAnalysis(
    p: {
      owner: string
      repo: string
      analysisId: number
      confirmDelete?: string | null
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_code_scanning_analysis_deletion>
    | Res<400, t_scim_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/code-scanning/analyses/${p["analysisId"]}`
    const query = this._query({ confirm_delete: p["confirmDelete"] })

    return this._fetch(
      url + query,
      { method: "DELETE", ...(opts ?? {}) },
      timeout
    )
  }

  codeScanningListCodeqlDatabases(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_code_scanning_codeql_database[]>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/code-scanning/codeql/databases`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codeScanningGetCodeqlDatabase(
    p: {
      owner: string
      repo: string
      language: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_code_scanning_codeql_database>
    | Res<302, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/code-scanning/codeql/databases/${p["language"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codeScanningGetDefaultSetup(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_code_scanning_default_setup>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/code-scanning/default-setup`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codeScanningUpdateDefaultSetup(
    p: {
      owner: string
      repo: string
      requestBody: t_code_scanning_default_setup_update
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_empty_object>
    | Res<202, t_code_scanning_default_setup_update_response>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<409, t_basic_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/code-scanning/default-setup`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  codeScanningUploadSarif(
    p: {
      owner: string
      repo: string
      requestBody: {
        checkout_uri?: string
        commit_sha: t_code_scanning_analysis_commit_sha
        ref: t_code_scanning_ref
        sarif: t_code_scanning_analysis_sarif_file
        started_at?: string
        tool_name?: string
        validate?: boolean
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<202, t_code_scanning_sarifs_receipt>
    | Res<400, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<413, void>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/code-scanning/sarifs`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  codeScanningGetSarif(
    p: {
      owner: string
      repo: string
      sarifId: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_code_scanning_sarifs_status>
    | Res<403, t_basic_error>
    | Res<404, void>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/code-scanning/sarifs/${p["sarifId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCodeownersErrors(
    p: {
      owner: string
      repo: string
      ref?: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_codeowners_errors> | Res<404, void>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/codeowners/errors`
    const query = this._query({ ref: p["ref"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codespacesListInRepositoryForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          codespaces: t_codespace[]
          total_count: number
        }
      >
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/codespaces`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codespacesCreateWithRepoForAuthenticatedUser(
    p: {
      owner: string
      repo: string
      requestBody: {
        client_ip?: string
        devcontainer_path?: string
        display_name?: string
        geo?: "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest"
        idle_timeout_minutes?: number
        location?: string
        machine?: string
        multi_repo_permissions_opt_out?: boolean
        ref?: string
        retention_period_minutes?: number
        working_directory?: string
      } | null
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_codespace>
    | Res<202, t_codespace>
    | Res<400, t_scim_error>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/codespaces`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  codespacesListDevcontainersInRepositoryForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          devcontainers: {
            display_name?: string
            name?: string
            path: string
          }[]
          total_count: number
        }
      >
    | Res<400, t_scim_error>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/codespaces/devcontainers`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codespacesRepoMachinesForAuthenticatedUser(
    p: {
      owner: string
      repo: string
      location?: string
      clientIp?: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          machines: t_codespace_machine[]
          total_count: number
        }
      >
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/codespaces/machines`
    const query = this._query({
      location: p["location"],
      client_ip: p["clientIp"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codespacesPreFlightWithRepoForAuthenticatedUser(
    p: {
      owner: string
      repo: string
      ref?: string
      clientIp?: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          billable_owner?: t_simple_user
          defaults?: {
            devcontainer_path: string | null
            location: string
          }
        }
      >
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/codespaces/new`
    const query = this._query({ ref: p["ref"], client_ip: p["clientIp"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codespacesListRepoSecrets(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        secrets: t_repo_codespaces_secret[]
        total_count: number
      }
    >
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/codespaces/secrets`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codespacesGetRepoPublicKey(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_codespaces_public_key>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/codespaces/secrets/public-key`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codespacesGetRepoSecret(
    p: {
      owner: string
      repo: string
      secretName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_repo_codespaces_secret>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/codespaces/secrets/${p["secretName"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codespacesCreateOrUpdateRepoSecret(
    p: {
      owner: string
      repo: string
      secretName: string
      requestBody: {
        encrypted_value?: string
        key_id?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_empty_object> | Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/codespaces/secrets/${p["secretName"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  codespacesDeleteRepoSecret(
    p: {
      owner: string
      repo: string
      secretName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/codespaces/secrets/${p["secretName"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposListCollaborators(
    p: {
      owner: string
      repo: string
      affiliation?: "outside" | "direct" | "all"
      permission?: "pull" | "triage" | "push" | "maintain" | "admin"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_collaborator[]> | Res<404, t_basic_error>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/collaborators`
    const query = this._query({
      affiliation: p["affiliation"],
      permission: p["permission"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCheckCollaborator(
    p: {
      owner: string
      repo: string
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/collaborators/${p["username"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposAddCollaborator(
    p: {
      owner: string
      repo: string
      username: string
      requestBody?: {
        permission?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_repository_invitation>
    | Res<204, void>
    | Res<403, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/collaborators/${p["username"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposRemoveCollaborator(
    p: {
      owner: string
      repo: string
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/collaborators/${p["username"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposGetCollaboratorPermissionLevel(
    p: {
      owner: string
      repo: string
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_repository_collaborator_permission> | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/collaborators/${p["username"]}/permission`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposListCommitCommentsForRepo(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_commit_comment[]>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/comments`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGetCommitComment(
    p: {
      owner: string
      repo: string
      commentId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_commit_comment> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/comments/${p["commentId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposUpdateCommitComment(
    p: {
      owner: string
      repo: string
      commentId: number
      requestBody: {
        body: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_commit_comment> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/comments/${p["commentId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposDeleteCommitComment(
    p: {
      owner: string
      repo: string
      commentId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/comments/${p["commentId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reactionsListForCommitComment(
    p: {
      owner: string
      repo: string
      commentId: number
      content?:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_reaction[]> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/comments/${p["commentId"]}/reactions`
    const query = this._query({
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reactionsCreateForCommitComment(
    p: {
      owner: string
      repo: string
      commentId: number
      requestBody: {
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_reaction> | Res<201, t_reaction> | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/comments/${p["commentId"]}/reactions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reactionsDeleteForCommitComment(
    p: {
      owner: string
      repo: string
      commentId: number
      reactionId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/comments/${p["commentId"]}/reactions/${p["reactionId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposListCommits(
    p: {
      owner: string
      repo: string
      sha?: string
      path?: string
      author?: string
      committer?: string
      since?: string
      until?: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_commit[]>
    | Res<400, t_scim_error>
    | Res<404, t_basic_error>
    | Res<409, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/commits`
    const query = this._query({
      sha: p["sha"],
      path: p["path"],
      author: p["author"],
      committer: p["committer"],
      since: p["since"],
      until: p["until"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposListBranchesForHeadCommit(
    p: {
      owner: string
      repo: string
      commitSha: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_branch_short[]> | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/commits/${p["commitSha"]}/branches-where-head`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposListCommentsForCommit(
    p: {
      owner: string
      repo: string
      commitSha: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_commit_comment[]>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/commits/${p["commitSha"]}/comments`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCreateCommitComment(
    p: {
      owner: string
      repo: string
      commitSha: string
      requestBody: {
        body: string
        line?: number
        path?: string
        position?: number
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_commit_comment>
    | Res<403, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/commits/${p["commitSha"]}/comments`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposListPullRequestsAssociatedWithCommit(
    p: {
      owner: string
      repo: string
      commitSha: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_pull_request_simple[]>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/commits/${p["commitSha"]}/pulls`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGetCommit(
    p: {
      owner: string
      repo: string
      page?: number
      perPage?: number
      ref: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_commit>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
    | Res<500, t_basic_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/commits/${p["ref"]}`
    const query = this._query({ page: p["page"], per_page: p["perPage"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  checksListForRef(
    p: {
      owner: string
      repo: string
      ref: string
      checkName?: string
      status?: "queued" | "in_progress" | "completed"
      filter?: "latest" | "all"
      perPage?: number
      page?: number
      appId?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        check_runs: t_check_run[]
        total_count: number
      }
    >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/commits/${p["ref"]}/check-runs`
    const query = this._query({
      check_name: p["checkName"],
      status: p["status"],
      filter: p["filter"],
      per_page: p["perPage"],
      page: p["page"],
      app_id: p["appId"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  checksListSuitesForRef(
    p: {
      owner: string
      repo: string
      ref: string
      appId?: number
      checkName?: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        check_suites: t_check_suite[]
        total_count: number
      }
    >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/commits/${p["ref"]}/check-suites`
    const query = this._query({
      app_id: p["appId"],
      check_name: p["checkName"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGetCombinedStatusForRef(
    p: {
      owner: string
      repo: string
      ref: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_combined_commit_status> | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/commits/${p["ref"]}/status`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposListCommitStatusesForRef(
    p: {
      owner: string
      repo: string
      ref: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_status[]> | Res<301, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/commits/${p["ref"]}/statuses`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGetCommunityProfileMetrics(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_community_profile>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/community/profile`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCompareCommits(
    p: {
      owner: string
      repo: string
      page?: number
      perPage?: number
      basehead: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_commit_comparison>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/compare/${p["basehead"]}`
    const query = this._query({ page: p["page"], per_page: p["perPage"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGetContent(
    p: {
      owner: string
      repo: string
      path: string
      ref?: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        | t_content_directory
        | t_content_file
        | t_content_symlink
        | t_content_submodule
      >
    | Res<302, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/contents/${p["path"]}`
    const query = this._query({ ref: p["ref"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCreateOrUpdateFileContents(
    p: {
      owner: string
      repo: string
      path: string
      requestBody: {
        author?: {
          date?: string
          email: string
          name: string
        }
        branch?: string
        committer?: {
          date?: string
          email: string
          name: string
        }
        content: string
        message: string
        sha?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_file_commit>
    | Res<201, t_file_commit>
    | Res<404, t_basic_error>
    | Res<409, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/contents/${p["path"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposDeleteFile(
    p: {
      owner: string
      repo: string
      path: string
      requestBody: {
        author?: {
          email?: string
          name?: string
        }
        branch?: string
        committer?: {
          email?: string
          name?: string
        }
        message: string
        sha: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_file_commit>
    | Res<404, t_basic_error>
    | Res<409, t_basic_error>
    | Res<422, t_validation_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/contents/${p["path"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "DELETE", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposListContributors(
    p: {
      owner: string
      repo: string
      anon?: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_contributor[]>
    | Res<204, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/contributors`
    const query = this._query({
      anon: p["anon"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  dependabotListAlertsForRepo(
    p: {
      owner: string
      repo: string
      state?: string
      severity?: string
      ecosystem?: string
      package?: string
      manifest?: string
      scope?: "development" | "runtime"
      sort?: "created" | "updated"
      direction?: "asc" | "desc"
      page?: number
      perPage?: number
      before?: string
      after?: string
      first?: number
      last?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_dependabot_alert[]>
    | Res<304, void>
    | Res<400, t_scim_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/dependabot/alerts`
    const query = this._query({
      state: p["state"],
      severity: p["severity"],
      ecosystem: p["ecosystem"],
      package: p["package"],
      manifest: p["manifest"],
      scope: p["scope"],
      sort: p["sort"],
      direction: p["direction"],
      page: p["page"],
      per_page: p["perPage"],
      before: p["before"],
      after: p["after"],
      first: p["first"],
      last: p["last"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  dependabotGetAlert(
    p: {
      owner: string
      repo: string
      alertNumber: t_alert_number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_dependabot_alert>
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/dependabot/alerts/${p["alertNumber"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  dependabotUpdateAlert(
    p: {
      owner: string
      repo: string
      alertNumber: t_alert_number
      requestBody: {
        dismissed_comment?: string
        dismissed_reason?:
          | "fix_started"
          | "inaccurate"
          | "no_bandwidth"
          | "not_used"
          | "tolerable_risk"
        state: "dismissed" | "open"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_dependabot_alert>
    | Res<400, t_scim_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<409, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/dependabot/alerts/${p["alertNumber"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  dependabotListRepoSecrets(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        secrets: t_dependabot_secret[]
        total_count: number
      }
    >
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/dependabot/secrets`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  dependabotGetRepoPublicKey(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_dependabot_public_key>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/dependabot/secrets/public-key`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  dependabotGetRepoSecret(
    p: {
      owner: string
      repo: string
      secretName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_dependabot_secret>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/dependabot/secrets/${p["secretName"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  dependabotCreateOrUpdateRepoSecret(
    p: {
      owner: string
      repo: string
      secretName: string
      requestBody: {
        encrypted_value?: string
        key_id?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_empty_object> | Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/dependabot/secrets/${p["secretName"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  dependabotDeleteRepoSecret(
    p: {
      owner: string
      repo: string
      secretName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/dependabot/secrets/${p["secretName"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  dependencyGraphDiffRange(
    p: {
      owner: string
      repo: string
      basehead: string
      name?: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_dependency_graph_diff>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/dependency-graph/compare/${p["basehead"]}`
    const query = this._query({ name: p["name"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  dependencyGraphExportSbom(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_dependency_graph_spdx_sbom>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/dependency-graph/sbom`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  dependencyGraphCreateRepositorySnapshot(
    p: {
      owner: string
      repo: string
      requestBody: t_snapshot
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      201,
      {
        created_at: string
        id: number
        message: string
        result: string
      }
    >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/dependency-graph/snapshots`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposListDeployments(
    p: {
      owner: string
      repo: string
      sha?: string
      ref?: string
      task?: string
      environment?: string | null
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_deployment[]>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/deployments`
    const query = this._query({
      sha: p["sha"],
      ref: p["ref"],
      task: p["task"],
      environment: p["environment"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCreateDeployment(
    p: {
      owner: string
      repo: string
      requestBody: {
        auto_merge?: boolean
        description?: string | null
        environment?: string
        payload?:
          | {
              [key: string]: unknown
            }
          | string
        production_environment?: boolean
        ref: string
        required_contexts?: string[]
        task?: string
        transient_environment?: boolean
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_deployment>
    | Res<
        202,
        {
          message?: string
        }
      >
    | Res<409, void>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/deployments`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposGetDeployment(
    p: {
      owner: string
      repo: string
      deploymentId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_deployment> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/deployments/${p["deploymentId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposDeleteDeployment(
    p: {
      owner: string
      repo: string
      deploymentId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/deployments/${p["deploymentId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposListDeploymentStatuses(
    p: {
      owner: string
      repo: string
      deploymentId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_deployment_status[]> | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/deployments/${p["deploymentId"]}/statuses`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCreateDeploymentStatus(
    p: {
      owner: string
      repo: string
      deploymentId: number
      requestBody: {
        auto_inactive?: boolean
        description?: string
        environment?: "production" | "staging" | "qa"
        environment_url?: string
        log_url?: string
        state:
          | "error"
          | "failure"
          | "inactive"
          | "in_progress"
          | "queued"
          | "pending"
          | "success"
        target_url?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<201, t_deployment_status> | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/deployments/${p["deploymentId"]}/statuses`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposGetDeploymentStatus(
    p: {
      owner: string
      repo: string
      deploymentId: number
      statusId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_deployment_status> | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/deployments/${p["deploymentId"]}/statuses/${p["statusId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCreateDispatchEvent(
    p: {
      owner: string
      repo: string
      requestBody: {
        client_payload?: {
          [key: string]: unknown
        }
        event_type: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<422, t_validation_error>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/dispatches`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposGetAllEnvironments(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        environments?: t_environment[]
        total_count?: number
      }
    >
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/environments`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGetEnvironment(
    p: {
      owner: string
      repo: string
      environmentName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_environment>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCreateOrUpdateEnvironment(
    p: {
      owner: string
      repo: string
      environmentName: string
      requestBody?: {
        deployment_branch_policy?: t_deployment_branch_policy_settings
        reviewers?:
          | {
              id?: number
              type?: t_deployment_reviewer_type
            }[]
          | null
        wait_timer?: t_wait_timer
      } | null
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_environment> | Res<422, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposDeleteAnEnvironment(
    p: {
      owner: string
      repo: string
      environmentName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposListDeploymentBranchPolicies(
    p: {
      owner: string
      repo: string
      environmentName: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        branch_policies: t_deployment_branch_policy[]
        total_count: number
      }
    >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment-branch-policies`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCreateDeploymentBranchPolicy(
    p: {
      owner: string
      repo: string
      environmentName: string
      requestBody: t_deployment_branch_policy_name_pattern
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_deployment_branch_policy> | Res<303, void> | Res<404, void>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment-branch-policies`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposGetDeploymentBranchPolicy(
    p: {
      owner: string
      repo: string
      environmentName: string
      branchPolicyId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_deployment_branch_policy>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment-branch-policies/${p["branchPolicyId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposUpdateDeploymentBranchPolicy(
    p: {
      owner: string
      repo: string
      environmentName: string
      branchPolicyId: number
      requestBody: t_deployment_branch_policy_name_pattern
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_deployment_branch_policy>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment-branch-policies/${p["branchPolicyId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposDeleteDeploymentBranchPolicy(
    p: {
      owner: string
      repo: string
      environmentName: string
      branchPolicyId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment-branch-policies/${p["branchPolicyId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposGetAllDeploymentProtectionRules(
    p: {
      environmentName: string
      repo: string
      owner: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        custom_deployment_protection_rules?: t_deployment_protection_rule[]
        total_count?: number
      }
    >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment_protection_rules`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCreateDeploymentProtectionRule(
    p: {
      environmentName: string
      repo: string
      owner: string
      requestBody: {
        integration_id?: number
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_deployment_protection_rule>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment_protection_rules`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposListCustomDeploymentRuleIntegrations(
    p: {
      environmentName: string
      repo: string
      owner: string
      page?: number
      perPage?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        available_custom_deployment_protection_rule_integrations?: t_custom_deployment_rule_app[]
        total_count?: number
      }
    >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment_protection_rules/apps`
    const query = this._query({ page: p["page"], per_page: p["perPage"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGetCustomDeploymentProtectionRule(
    p: {
      owner: string
      repo: string
      environmentName: string
      protectionRuleId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_deployment_protection_rule>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment_protection_rules/${p["protectionRuleId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposDisableDeploymentProtectionRule(
    p: {
      environmentName: string
      repo: string
      owner: string
      protectionRuleId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment_protection_rules/${p["protectionRuleId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  activityListRepoEvents(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_event[]>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/events`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposListForks(
    p: {
      owner: string
      repo: string
      sort?: "newest" | "oldest" | "stargazers" | "watchers"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_minimal_repository[]> | Res<400, t_scim_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/forks`
    const query = this._query({
      sort: p["sort"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCreateFork(
    p: {
      owner: string
      repo: string
      requestBody?: {
        default_branch_only?: boolean
        name?: string
        organization?: string
      } | null
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<202, t_full_repository>
    | Res<400, t_scim_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/forks`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  gitCreateBlob(
    p: {
      owner: string
      repo: string
      requestBody: {
        content: string
        encoding?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_short_blob>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<409, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/git/blobs`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  gitGetBlob(
    p: {
      owner: string
      repo: string
      fileSha: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_blob>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/git/blobs/${p["fileSha"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  gitCreateCommit(
    p: {
      owner: string
      repo: string
      requestBody: {
        author?: {
          date?: string
          email: string
          name: string
        }
        committer?: {
          date?: string
          email?: string
          name?: string
        }
        message: string
        parents?: string[]
        signature?: string
        tree: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_git_commit>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/git/commits`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  gitGetCommit(
    p: {
      owner: string
      repo: string
      commitSha: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_git_commit> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/git/commits/${p["commitSha"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  gitListMatchingRefs(
    p: {
      owner: string
      repo: string
      ref: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_git_ref[]>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/git/matching-refs/${p["ref"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  gitGetRef(
    p: {
      owner: string
      repo: string
      ref: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_git_ref> | Res<404, t_basic_error>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/git/ref/${p["ref"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  gitCreateRef(
    p: {
      owner: string
      repo: string
      requestBody: {
        ref: string
        sha: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_git_ref> | Res<422, t_validation_error>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/git/refs`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  gitUpdateRef(
    p: {
      owner: string
      repo: string
      ref: string
      requestBody: {
        force?: boolean
        sha: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_git_ref> | Res<422, t_validation_error>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/git/refs/${p["ref"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  gitDeleteRef(
    p: {
      owner: string
      repo: string
      ref: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<422, t_validation_error>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/git/refs/${p["ref"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  gitCreateTag(
    p: {
      owner: string
      repo: string
      requestBody: {
        message: string
        object: string
        tag: string
        tagger?: {
          date?: string
          email: string
          name: string
        }
        type: "commit" | "tree" | "blob"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_git_tag> | Res<422, t_validation_error>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/git/tags`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  gitGetTag(
    p: {
      owner: string
      repo: string
      tagSha: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_git_tag> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/git/tags/${p["tagSha"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  gitCreateTree(
    p: {
      owner: string
      repo: string
      requestBody: {
        base_tree?: string
        tree: {
          content?: string
          mode?: "100644" | "100755" | "040000" | "160000" | "120000"
          path?: string
          sha?: string | null
          type?: "blob" | "tree" | "commit"
        }[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_git_tree>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/git/trees`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  gitGetTree(
    p: {
      owner: string
      repo: string
      treeSha: string
      recursive?: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_git_tree>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/git/trees/${p["treeSha"]}`
    const query = this._query({ recursive: p["recursive"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposListWebhooks(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_hook[]> | Res<404, t_basic_error>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/hooks`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCreateWebhook(
    p: {
      owner: string
      repo: string
      requestBody?: {
        active?: boolean
        config?: {
          content_type?: t_webhook_config_content_type
          digest?: string
          insecure_ssl?: t_webhook_config_insecure_ssl
          secret?: t_webhook_config_secret
          token?: string
          url?: t_webhook_config_url
        }
        events?: string[]
        name?: string
      } | null
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_hook>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/hooks`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposGetWebhook(
    p: {
      owner: string
      repo: string
      hookId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_hook> | Res<404, t_basic_error>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposUpdateWebhook(
    p: {
      owner: string
      repo: string
      hookId: number
      requestBody: {
        active?: boolean
        add_events?: string[]
        config?: {
          address?: string
          content_type?: t_webhook_config_content_type
          insecure_ssl?: t_webhook_config_insecure_ssl
          room?: string
          secret?: t_webhook_config_secret
          url: t_webhook_config_url
        }
        events?: string[]
        remove_events?: string[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_hook> | Res<404, t_basic_error> | Res<422, t_validation_error>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposDeleteWebhook(
    p: {
      owner: string
      repo: string
      hookId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, t_basic_error>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposGetWebhookConfigForRepo(
    p: {
      owner: string
      repo: string
      hookId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_webhook_config>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}/config`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposUpdateWebhookConfigForRepo(
    p: {
      owner: string
      repo: string
      hookId: number
      requestBody?: {
        content_type?: t_webhook_config_content_type
        insecure_ssl?: t_webhook_config_insecure_ssl
        secret?: t_webhook_config_secret
        url?: t_webhook_config_url
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_webhook_config>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}/config`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposListWebhookDeliveries(
    p: {
      owner: string
      repo: string
      hookId: number
      perPage?: number
      cursor?: string
      redelivery?: boolean
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_hook_delivery_item[]>
    | Res<400, t_scim_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}/deliveries`
    const query = this._query({
      per_page: p["perPage"],
      cursor: p["cursor"],
      redelivery: p["redelivery"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGetWebhookDelivery(
    p: {
      owner: string
      repo: string
      hookId: number
      deliveryId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_hook_delivery>
    | Res<400, t_scim_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}/deliveries/${p["deliveryId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposRedeliverWebhookDelivery(
    p: {
      owner: string
      repo: string
      hookId: number
      deliveryId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<202, EmptyObject>
    | Res<400, t_scim_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}/deliveries/${p["deliveryId"]}/attempts`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  reposPingWebhook(
    p: {
      owner: string
      repo: string
      hookId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}/pings`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  reposTestPushWebhook(
    p: {
      owner: string
      repo: string
      hookId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}/tests`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  migrationsGetImportStatus(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_import> | Res<404, t_basic_error> | Res<503, t_basic_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/import`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  migrationsStartImport(
    p: {
      owner: string
      repo: string
      requestBody: {
        tfvc_project?: string
        vcs?: "subversion" | "git" | "mercurial" | "tfvc"
        vcs_password?: string
        vcs_url: string
        vcs_username?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_import>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
    | Res<503, t_basic_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/import`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  migrationsUpdateImport(
    p: {
      owner: string
      repo: string
      requestBody?: {
        tfvc_project?: string
        vcs?: "subversion" | "tfvc" | "git" | "mercurial"
        vcs_password?: string
        vcs_username?: string
      } | null
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_import> | Res<503, t_basic_error>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/import`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  migrationsCancelImport(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<503, t_basic_error>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/import`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  migrationsGetCommitAuthors(
    p: {
      owner: string
      repo: string
      since?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_porter_author[]>
    | Res<404, t_basic_error>
    | Res<503, t_basic_error>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/import/authors`
    const query = this._query({ since: p["since"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  migrationsMapCommitAuthor(
    p: {
      owner: string
      repo: string
      authorId: number
      requestBody?: {
        email?: string
        name?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_porter_author>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
    | Res<503, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/import/authors/${p["authorId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  migrationsGetLargeFiles(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_porter_large_file[]> | Res<503, t_basic_error>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/import/large_files`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  migrationsSetLfsPreference(
    p: {
      owner: string
      repo: string
      requestBody: {
        use_lfs: "opt_in" | "opt_out"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_import> | Res<422, t_validation_error> | Res<503, t_basic_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/import/lfs`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  appsGetRepoInstallation(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_installation> | Res<301, t_basic_error> | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/installation`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  interactionsGetRestrictionsForRepo(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_interaction_limit_response | EmptyObject>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/interaction-limits`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  interactionsSetRestrictionsForRepo(
    p: {
      owner: string
      repo: string
      requestBody: t_interaction_limit
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_interaction_limit_response> | Res<409, void>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/interaction-limits`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  interactionsRemoveRestrictionsForRepo(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<409, void>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/interaction-limits`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposListInvitations(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_repository_invitation[]>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/invitations`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposUpdateInvitation(
    p: {
      owner: string
      repo: string
      invitationId: number
      requestBody?: {
        permissions?: "read" | "write" | "maintain" | "triage" | "admin"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_repository_invitation>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/invitations/${p["invitationId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposDeleteInvitation(
    p: {
      owner: string
      repo: string
      invitationId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/invitations/${p["invitationId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  issuesListForRepo(
    p: {
      owner: string
      repo: string
      milestone?: string
      state?: "open" | "closed" | "all"
      assignee?: string
      creator?: string
      mentioned?: string
      labels?: string
      sort?: "created" | "updated" | "comments"
      direction?: "asc" | "desc"
      since?: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_issue[]>
    | Res<301, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/issues`
    const query = this._query({
      milestone: p["milestone"],
      state: p["state"],
      assignee: p["assignee"],
      creator: p["creator"],
      mentioned: p["mentioned"],
      labels: p["labels"],
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  issuesCreate(
    p: {
      owner: string
      repo: string
      requestBody: {
        assignee?: string | null
        assignees?: string[]
        body?: string
        labels?: (
          | string
          | {
              color?: string | null
              description?: string | null
              id?: number
              name?: string
            }
        )[]
        milestone?: string | number | null
        title: string | number
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_issue>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<410, t_basic_error>
    | Res<422, t_validation_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/issues`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  issuesListCommentsForRepo(
    p: {
      owner: string
      repo: string
      sort?: "created" | "updated"
      direction?: "asc" | "desc"
      since?: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_issue_comment[]>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/issues/comments`
    const query = this._query({
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  issuesGetComment(
    p: {
      owner: string
      repo: string
      commentId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_issue_comment> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/comments/${p["commentId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  issuesUpdateComment(
    p: {
      owner: string
      repo: string
      commentId: number
      requestBody: {
        body: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_issue_comment> | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/comments/${p["commentId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  issuesDeleteComment(
    p: {
      owner: string
      repo: string
      commentId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/comments/${p["commentId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reactionsListForIssueComment(
    p: {
      owner: string
      repo: string
      commentId: number
      content?:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_reaction[]> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/comments/${p["commentId"]}/reactions`
    const query = this._query({
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reactionsCreateForIssueComment(
    p: {
      owner: string
      repo: string
      commentId: number
      requestBody: {
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_reaction> | Res<201, t_reaction> | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/comments/${p["commentId"]}/reactions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reactionsDeleteForIssueComment(
    p: {
      owner: string
      repo: string
      commentId: number
      reactionId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/comments/${p["commentId"]}/reactions/${p["reactionId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  issuesListEventsForRepo(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_issue_event[]> | Res<422, t_validation_error>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/issues/events`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  issuesGetEvent(
    p: {
      owner: string
      repo: string
      eventId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_issue_event>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<410, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/events/${p["eventId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  issuesGet(
    p: {
      owner: string
      repo: string
      issueNumber: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_issue>
    | Res<301, t_basic_error>
    | Res<304, void>
    | Res<404, t_basic_error>
    | Res<410, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  issuesUpdate(
    p: {
      owner: string
      repo: string
      issueNumber: number
      requestBody?: {
        assignee?: string | null
        assignees?: string[]
        body?: string | null
        labels?: (
          | string
          | {
              color?: string | null
              description?: string | null
              id?: number
              name?: string
            }
        )[]
        milestone?: string | number | null
        state?: "open" | "closed"
        state_reason?: "completed" | "not_planned" | "reopened" | null
        title?: string | number | null
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_issue>
    | Res<301, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<410, t_basic_error>
    | Res<422, t_validation_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  issuesAddAssignees(
    p: {
      owner: string
      repo: string
      issueNumber: number
      requestBody?: {
        assignees?: string[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_issue>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/assignees`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  issuesRemoveAssignees(
    p: {
      owner: string
      repo: string
      issueNumber: number
      requestBody: {
        assignees?: string[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_issue>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/assignees`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "DELETE", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  issuesCheckUserCanBeAssignedToIssue(
    p: {
      owner: string
      repo: string
      issueNumber: number
      assignee: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/assignees/${p["assignee"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  issuesListComments(
    p: {
      owner: string
      repo: string
      issueNumber: number
      since?: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_issue_comment[]>
    | Res<404, t_basic_error>
    | Res<410, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/comments`
    const query = this._query({
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  issuesCreateComment(
    p: {
      owner: string
      repo: string
      issueNumber: number
      requestBody: {
        body: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_issue_comment>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<410, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/comments`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  issuesListEvents(
    p: {
      owner: string
      repo: string
      issueNumber: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_issue_event_for_issue[]> | Res<410, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/events`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  issuesListLabelsOnIssue(
    p: {
      owner: string
      repo: string
      issueNumber: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_label[]>
    | Res<301, t_basic_error>
    | Res<404, t_basic_error>
    | Res<410, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/labels`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  issuesAddLabels(
    p: {
      owner: string
      repo: string
      issueNumber: number
      requestBody?:
        | {
            labels?: string[]
          }
        | string[]
        | {
            labels?: {
              name: string
            }[]
          }
        | {
            name: string
          }[]
        | string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_label[]>
    | Res<301, t_basic_error>
    | Res<404, t_basic_error>
    | Res<410, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/labels`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  issuesSetLabels(
    p: {
      owner: string
      repo: string
      issueNumber: number
      requestBody?:
        | {
            labels?: string[]
          }
        | string[]
        | {
            labels?: {
              name: string
            }[]
          }
        | {
            name: string
          }[]
        | string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_label[]>
    | Res<301, t_basic_error>
    | Res<404, t_basic_error>
    | Res<410, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/labels`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  issuesRemoveAllLabels(
    p: {
      owner: string
      repo: string
      issueNumber: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<301, t_basic_error>
    | Res<404, t_basic_error>
    | Res<410, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/labels`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  issuesRemoveLabel(
    p: {
      owner: string
      repo: string
      issueNumber: number
      name: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_label[]>
    | Res<301, t_basic_error>
    | Res<404, t_basic_error>
    | Res<410, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/labels/${p["name"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  issuesLock(
    p: {
      owner: string
      repo: string
      issueNumber: number
      requestBody?: {
        lock_reason?: "off-topic" | "too heated" | "resolved" | "spam"
      } | null
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<410, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/lock`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  issuesUnlock(
    p: {
      owner: string
      repo: string
      issueNumber: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<204, void> | Res<403, t_basic_error> | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/lock`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reactionsListForIssue(
    p: {
      owner: string
      repo: string
      issueNumber: number
      content?:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_reaction[]> | Res<404, t_basic_error> | Res<410, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/reactions`
    const query = this._query({
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reactionsCreateForIssue(
    p: {
      owner: string
      repo: string
      issueNumber: number
      requestBody: {
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_reaction> | Res<201, t_reaction> | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/reactions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reactionsDeleteForIssue(
    p: {
      owner: string
      repo: string
      issueNumber: number
      reactionId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/reactions/${p["reactionId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  issuesListEventsForTimeline(
    p: {
      owner: string
      repo: string
      issueNumber: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_timeline_issue_events[]>
    | Res<404, t_basic_error>
    | Res<410, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/timeline`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposListDeployKeys(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_deploy_key[]>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/keys`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCreateDeployKey(
    p: {
      owner: string
      repo: string
      requestBody: {
        key: string
        read_only?: boolean
        title?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_deploy_key> | Res<422, t_validation_error>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/keys`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposGetDeployKey(
    p: {
      owner: string
      repo: string
      keyId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_deploy_key> | Res<404, t_basic_error>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/keys/${p["keyId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposDeleteDeployKey(
    p: {
      owner: string
      repo: string
      keyId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/keys/${p["keyId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  issuesListLabelsForRepo(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_label[]> | Res<404, t_basic_error>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/labels`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  issuesCreateLabel(
    p: {
      owner: string
      repo: string
      requestBody: {
        color?: string
        description?: string
        name: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<201, t_label> | Res<404, t_basic_error> | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/labels`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  issuesGetLabel(
    p: {
      owner: string
      repo: string
      name: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_label> | Res<404, t_basic_error>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/labels/${p["name"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  issuesUpdateLabel(
    p: {
      owner: string
      repo: string
      name: string
      requestBody?: {
        color?: string
        description?: string
        new_name?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_label>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/labels/${p["name"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  issuesDeleteLabel(
    p: {
      owner: string
      repo: string
      name: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/labels/${p["name"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposListLanguages(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_language>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/languages`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposEnableLfsForRepo(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<202, EmptyObject> | Res<403, void>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/lfs`

    return this._fetch(url, { method: "PUT", ...(opts ?? {}) }, timeout)
  }

  reposDisableLfsForRepo(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/lfs`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  licensesGetForRepo(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_license_content>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/license`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposMergeUpstream(
    p: {
      owner: string
      repo: string
      requestBody: {
        branch: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_merged_upstream> | Res<409, void> | Res<422, void>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/merge-upstream`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposMerge(
    p: {
      owner: string
      repo: string
      requestBody: {
        base: string
        commit_message?: string
        head: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_commit>
    | Res<204, void>
    | Res<403, t_basic_error>
    | Res<404, void>
    | Res<409, void>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/merges`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  issuesListMilestones(
    p: {
      owner: string
      repo: string
      state?: "open" | "closed" | "all"
      sort?: "due_on" | "completeness"
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_milestone[]> | Res<404, t_basic_error>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/milestones`
    const query = this._query({
      state: p["state"],
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  issuesCreateMilestone(
    p: {
      owner: string
      repo: string
      requestBody: {
        description?: string
        due_on?: string
        state?: "open" | "closed"
        title: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_milestone>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/milestones`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  issuesGetMilestone(
    p: {
      owner: string
      repo: string
      milestoneNumber: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_milestone> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/milestones/${p["milestoneNumber"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  issuesUpdateMilestone(
    p: {
      owner: string
      repo: string
      milestoneNumber: number
      requestBody?: {
        description?: string
        due_on?: string
        state?: "open" | "closed"
        title?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_milestone>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/milestones/${p["milestoneNumber"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  issuesDeleteMilestone(
    p: {
      owner: string
      repo: string
      milestoneNumber: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/milestones/${p["milestoneNumber"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  issuesListLabelsForMilestone(
    p: {
      owner: string
      repo: string
      milestoneNumber: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_label[]>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/milestones/${p["milestoneNumber"]}/labels`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  activityListRepoNotificationsForAuthenticatedUser(
    p: {
      owner: string
      repo: string
      all?: boolean
      participating?: boolean
      since?: string
      before?: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_thread[]>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/notifications`
    const query = this._query({
      all: p["all"],
      participating: p["participating"],
      since: p["since"],
      before: p["before"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  activityMarkRepoNotificationsAsRead(
    p: {
      owner: string
      repo: string
      requestBody?: {
        last_read_at?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        202,
        {
          message?: string
          url?: string
        }
      >
    | Res<205, void>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/notifications`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposGetPages(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_page> | Res<404, t_basic_error>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/pages`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCreatePagesSite(
    p: {
      owner: string
      repo: string
      requestBody: {
        build_type?: "legacy" | "workflow"
        source?: {
          branch: string
          path?: "/" | "/docs"
        }
      } | null
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<201, t_page> | Res<409, t_basic_error> | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/pages`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposUpdateInformationAboutPagesSite(
    p: {
      owner: string
      repo: string
      requestBody: {
        build_type?: "legacy" | "workflow"
        cname?: string | null
        https_enforced?: boolean
        source?:
          | "gh-pages"
          | "master"
          | "master /docs"
          | {
              branch: string
              path: "/" | "/docs"
            }
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<400, t_scim_error>
    | Res<409, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/pages`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposDeletePagesSite(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<404, t_basic_error>
    | Res<409, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/pages`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposListPagesBuilds(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_page_build[]>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/pages/builds`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposRequestPagesBuild(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_page_build_status>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/pages/builds`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  reposGetLatestPagesBuild(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_page_build>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/pages/builds/latest`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGetPagesBuild(
    p: {
      owner: string
      repo: string
      buildId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_page_build>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pages/builds/${p["buildId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCreatePagesDeployment(
    p: {
      owner: string
      repo: string
      requestBody: {
        artifact_url: string
        environment?: string
        oidc_token: string
        pages_build_version: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_page_deployment>
    | Res<400, t_scim_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/pages/deployment`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposGetPagesHealthCheck(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_pages_health_check>
    | Res<202, t_empty_object>
    | Res<400, void>
    | Res<404, t_basic_error>
    | Res<422, void>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/pages/health`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  projectsListForRepo(
    p: {
      owner: string
      repo: string
      state?: "open" | "closed" | "all"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_project[]>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<410, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/projects`
    const query = this._query({
      state: p["state"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  projectsCreateForRepo(
    p: {
      owner: string
      repo: string
      requestBody: {
        body?: string
        name: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_project>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<410, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/projects`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  pullsList(
    p: {
      owner: string
      repo: string
      state?: "open" | "closed" | "all"
      head?: string
      base?: string
      sort?: "created" | "updated" | "popularity" | "long-running"
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_pull_request_simple[]>
    | Res<304, void>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/pulls`
    const query = this._query({
      state: p["state"],
      head: p["head"],
      base: p["base"],
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  pullsCreate(
    p: {
      owner: string
      repo: string
      requestBody: {
        base: string
        body?: string
        draft?: boolean
        head: string
        head_repo?: string
        issue?: number
        maintainer_can_modify?: boolean
        title?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_pull_request>
    | Res<403, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/pulls`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  pullsListReviewCommentsForRepo(
    p: {
      owner: string
      repo: string
      sort?: "created" | "updated" | "created_at"
      direction?: "asc" | "desc"
      since?: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_pull_request_review_comment[]>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/pulls/comments`
    const query = this._query({
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  pullsGetReviewComment(
    p: {
      owner: string
      repo: string
      commentId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_pull_request_review_comment> | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/comments/${p["commentId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  pullsUpdateReviewComment(
    p: {
      owner: string
      repo: string
      commentId: number
      requestBody: {
        body: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_pull_request_review_comment>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/comments/${p["commentId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  pullsDeleteReviewComment(
    p: {
      owner: string
      repo: string
      commentId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/comments/${p["commentId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reactionsListForPullRequestReviewComment(
    p: {
      owner: string
      repo: string
      commentId: number
      content?:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_reaction[]> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/comments/${p["commentId"]}/reactions`
    const query = this._query({
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reactionsCreateForPullRequestReviewComment(
    p: {
      owner: string
      repo: string
      commentId: number
      requestBody: {
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_reaction> | Res<201, t_reaction> | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/comments/${p["commentId"]}/reactions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reactionsDeleteForPullRequestComment(
    p: {
      owner: string
      repo: string
      commentId: number
      reactionId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/comments/${p["commentId"]}/reactions/${p["reactionId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  pullsGet(
    p: {
      owner: string
      repo: string
      pullNumber: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_pull_request>
    | Res<304, void>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  pullsUpdate(
    p: {
      owner: string
      repo: string
      pullNumber: number
      requestBody?: {
        base?: string
        body?: string
        maintainer_can_modify?: boolean
        state?: "open" | "closed"
        title?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_pull_request>
    | Res<403, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  codespacesCreateWithPrForAuthenticatedUser(
    p: {
      owner: string
      repo: string
      pullNumber: number
      requestBody: {
        client_ip?: string
        devcontainer_path?: string
        display_name?: string
        geo?: "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest"
        idle_timeout_minutes?: number
        location?: string
        machine?: string
        multi_repo_permissions_opt_out?: boolean
        retention_period_minutes?: number
        working_directory?: string
      } | null
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_codespace>
    | Res<202, t_codespace>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/codespaces`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  pullsListReviewComments(
    p: {
      owner: string
      repo: string
      pullNumber: number
      sort?: "created" | "updated"
      direction?: "asc" | "desc"
      since?: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_pull_request_review_comment[]>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/comments`
    const query = this._query({
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  pullsCreateReviewComment(
    p: {
      owner: string
      repo: string
      pullNumber: number
      requestBody: {
        body: string
        commit_id: string
        in_reply_to?: number
        line?: number
        path: string
        position?: number
        side?: "LEFT" | "RIGHT"
        start_line?: number
        start_side?: "LEFT" | "RIGHT" | "side"
        subject_type?: "LINE" | "FILE"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_pull_request_review_comment>
    | Res<403, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/comments`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  pullsCreateReplyForReviewComment(
    p: {
      owner: string
      repo: string
      pullNumber: number
      commentId: number
      requestBody: {
        body: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<201, t_pull_request_review_comment> | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/comments/${p["commentId"]}/replies`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  pullsListCommits(
    p: {
      owner: string
      repo: string
      pullNumber: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_commit[]>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/commits`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  pullsListFiles(
    p: {
      owner: string
      repo: string
      pullNumber: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_diff_entry[]>
    | Res<422, t_validation_error>
    | Res<500, t_basic_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/files`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  pullsCheckIfMerged(
    p: {
      owner: string
      repo: string
      pullNumber: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/merge`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  pullsMerge(
    p: {
      owner: string
      repo: string
      pullNumber: number
      requestBody?: {
        commit_message?: string
        commit_title?: string
        merge_method?: "merge" | "squash" | "rebase"
        sha?: string
      } | null
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_pull_request_merge_result>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<
        405,
        {
          documentation_url?: string
          message?: string
        }
      >
    | Res<
        409,
        {
          documentation_url?: string
          message?: string
        }
      >
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/merge`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  pullsListRequestedReviewers(
    p: {
      owner: string
      repo: string
      pullNumber: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_pull_request_review_request>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/requested_reviewers`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  pullsRequestReviewers(
    p: {
      owner: string
      repo: string
      pullNumber: number
      requestBody?: {
        reviewers?: string[]
        team_reviewers?: string[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<201, t_pull_request_simple> | Res<403, t_basic_error> | Res<422, void>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/requested_reviewers`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  pullsRemoveRequestedReviewers(
    p: {
      owner: string
      repo: string
      pullNumber: number
      requestBody: {
        reviewers: string[]
        team_reviewers?: string[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_pull_request_simple> | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/requested_reviewers`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "DELETE", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  pullsListReviews(
    p: {
      owner: string
      repo: string
      pullNumber: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_pull_request_review[]>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  pullsCreateReview(
    p: {
      owner: string
      repo: string
      pullNumber: number
      requestBody?: {
        body?: string
        comments?: {
          body: string
          line?: number
          path: string
          position?: number
          side?: string
          start_line?: number
          start_side?: string
        }[]
        commit_id?: string
        event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_pull_request_review>
    | Res<403, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  pullsGetReview(
    p: {
      owner: string
      repo: string
      pullNumber: number
      reviewId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_pull_request_review> | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews/${p["reviewId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  pullsUpdateReview(
    p: {
      owner: string
      repo: string
      pullNumber: number
      reviewId: number
      requestBody: {
        body: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_pull_request_review> | Res<422, t_validation_error_simple>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews/${p["reviewId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  pullsDeletePendingReview(
    p: {
      owner: string
      repo: string
      pullNumber: number
      reviewId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_pull_request_review>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews/${p["reviewId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  pullsListCommentsForReview(
    p: {
      owner: string
      repo: string
      pullNumber: number
      reviewId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_review_comment[]> | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews/${p["reviewId"]}/comments`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  pullsDismissReview(
    p: {
      owner: string
      repo: string
      pullNumber: number
      reviewId: number
      requestBody: {
        event?: "DISMISS"
        message: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_pull_request_review>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews/${p["reviewId"]}/dismissals`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  pullsSubmitReview(
    p: {
      owner: string
      repo: string
      pullNumber: number
      reviewId: number
      requestBody: {
        body?: string
        event: "APPROVE" | "REQUEST_CHANGES" | "COMMENT"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_pull_request_review>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews/${p["reviewId"]}/events`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  pullsUpdateBranch(
    p: {
      owner: string
      repo: string
      pullNumber: number
      requestBody?: {
        expected_head_sha?: string
      } | null
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        202,
        {
          message?: string
          url?: string
        }
      >
    | Res<403, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/update-branch`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposGetReadme(
    p: {
      owner: string
      repo: string
      ref?: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_content_file>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/readme`
    const query = this._query({ ref: p["ref"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGetReadmeInDirectory(
    p: {
      owner: string
      repo: string
      dir: string
      ref?: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_content_file>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/readme/${p["dir"]}`
    const query = this._query({ ref: p["ref"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposListReleases(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_release[]> | Res<404, t_basic_error>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/releases`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCreateRelease(
    p: {
      owner: string
      repo: string
      requestBody: {
        body?: string
        discussion_category_name?: string
        draft?: boolean
        generate_release_notes?: boolean
        make_latest?: "true" | "false" | "legacy"
        name?: string
        prerelease?: boolean
        tag_name: string
        target_commitish?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<201, t_release> | Res<404, t_basic_error> | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/releases`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposGetReleaseAsset(
    p: {
      owner: string
      repo: string
      assetId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_release_asset> | Res<302, void> | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/releases/assets/${p["assetId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposUpdateReleaseAsset(
    p: {
      owner: string
      repo: string
      assetId: number
      requestBody?: {
        label?: string
        name?: string
        state?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_release_asset>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/releases/assets/${p["assetId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposDeleteReleaseAsset(
    p: {
      owner: string
      repo: string
      assetId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/releases/assets/${p["assetId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposGenerateReleaseNotes(
    p: {
      owner: string
      repo: string
      requestBody: {
        configuration_file_path?: string
        previous_tag_name?: string
        tag_name: string
        target_commitish?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_release_notes_content> | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/releases/generate-notes`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposGetLatestRelease(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_release>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/releases/latest`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGetReleaseByTag(
    p: {
      owner: string
      repo: string
      tag: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_release> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/releases/tags/${p["tag"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGetRelease(
    p: {
      owner: string
      repo: string
      releaseId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_release> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposUpdateRelease(
    p: {
      owner: string
      repo: string
      releaseId: number
      requestBody?: {
        body?: string
        discussion_category_name?: string
        draft?: boolean
        make_latest?: "true" | "false" | "legacy"
        name?: string
        prerelease?: boolean
        tag_name?: string
        target_commitish?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_release> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposDeleteRelease(
    p: {
      owner: string
      repo: string
      releaseId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposListReleaseAssets(
    p: {
      owner: string
      repo: string
      releaseId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_release_asset[]>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}/assets`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposUploadReleaseAsset(
    p: {
      owner: string
      repo: string
      releaseId: number
      name: string
      label?: string
      requestBody?: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_release_asset> | Res<422, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}/assets`
    const headers = this._headers({
      "Content-Type": "application/octet-stream",
    })
    const query = this._query({ name: p["name"], label: p["label"] })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url + query,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reactionsListForRelease(
    p: {
      owner: string
      repo: string
      releaseId: number
      content?: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_reaction[]> | Res<404, t_basic_error>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}/reactions`
    const query = this._query({
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reactionsCreateForRelease(
    p: {
      owner: string
      repo: string
      releaseId: number
      requestBody: {
        content: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_reaction> | Res<201, t_reaction> | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}/reactions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reactionsDeleteForRelease(
    p: {
      owner: string
      repo: string
      releaseId: number
      reactionId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}/reactions/${p["reactionId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposGetBranchRules(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_repository_rule[]>> {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/rules/branches/${p["branch"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGetRepoRulesets(
    p: {
      owner: string
      repo: string
      includesParents?: boolean
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_repository_ruleset[]>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/rulesets`
    const query = this._query({ includes_parents: p["includesParents"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCreateRepoRuleset(
    p: {
      owner: string
      repo: string
      requestBody: {
        bypass_actors?: t_repository_ruleset_bypass_actor[]
        bypass_mode?: "none" | "repository" | "organization"
        conditions?: t_repository_ruleset_conditions
        enforcement: t_repository_rule_enforcement
        name: string
        rules?: t_repository_rule[]
        target?: "branch" | "tag"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_repository_ruleset>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/rulesets`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposGetRepoRuleset(
    p: {
      owner: string
      repo: string
      rulesetId: number
      includesParents?: boolean
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_repository_ruleset>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/rulesets/${p["rulesetId"]}`
    const query = this._query({ includes_parents: p["includesParents"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposUpdateRepoRuleset(
    p: {
      owner: string
      repo: string
      rulesetId: number
      requestBody?: {
        bypass_actors?: t_repository_ruleset_bypass_actor[]
        bypass_mode?: "none" | "repository" | "organization"
        conditions?: t_repository_ruleset_conditions
        enforcement?: t_repository_rule_enforcement
        name?: string
        rules?: t_repository_rule[]
        target?: "branch" | "tag"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_repository_ruleset>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/rulesets/${p["rulesetId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposDeleteRepoRuleset(
    p: {
      owner: string
      repo: string
      rulesetId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<204, void> | Res<404, t_basic_error> | Res<500, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/rulesets/${p["rulesetId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  secretScanningListAlertsForRepo(
    p: {
      owner: string
      repo: string
      state?: "open" | "resolved"
      secretType?: string
      resolution?: string
      sort?: "created" | "updated"
      direction?: "asc" | "desc"
      page?: number
      perPage?: number
      before?: string
      after?: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_secret_scanning_alert[]>
    | Res<404, void>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/secret-scanning/alerts`
    const query = this._query({
      state: p["state"],
      secret_type: p["secretType"],
      resolution: p["resolution"],
      sort: p["sort"],
      direction: p["direction"],
      page: p["page"],
      per_page: p["perPage"],
      before: p["before"],
      after: p["after"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  secretScanningGetAlert(
    p: {
      owner: string
      repo: string
      alertNumber: t_alert_number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_secret_scanning_alert>
    | Res<304, void>
    | Res<404, void>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/secret-scanning/alerts/${p["alertNumber"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  secretScanningUpdateAlert(
    p: {
      owner: string
      repo: string
      alertNumber: t_alert_number
      requestBody: {
        resolution?: t_secret_scanning_alert_resolution
        resolution_comment?: t_secret_scanning_alert_resolution_comment
        state: t_secret_scanning_alert_state
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_secret_scanning_alert>
    | Res<400, void>
    | Res<404, void>
    | Res<422, void>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/secret-scanning/alerts/${p["alertNumber"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  secretScanningListLocationsForAlert(
    p: {
      owner: string
      repo: string
      alertNumber: t_alert_number
      page?: number
      perPage?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_secret_scanning_location[]>
    | Res<404, void>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/secret-scanning/alerts/${p["alertNumber"]}/locations`
    const query = this._query({ page: p["page"], per_page: p["perPage"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  securityAdvisoriesListRepositoryAdvisories(
    p: {
      owner: string
      repo: string
      direction?: "asc" | "desc"
      sort?: "created" | "updated" | "published"
      before?: string
      after?: string
      perPage?: number
      state?: "triage" | "draft" | "published" | "closed"
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_repository_advisory[]>
    | Res<400, t_scim_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/security-advisories`
    const query = this._query({
      direction: p["direction"],
      sort: p["sort"],
      before: p["before"],
      after: p["after"],
      per_page: p["perPage"],
      state: p["state"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  securityAdvisoriesCreateRepositoryAdvisory(
    p: {
      owner: string
      repo: string
      requestBody: t_repository_advisory_create
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_repository_advisory>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/security-advisories`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  securityAdvisoriesCreatePrivateVulnerabilityReport(
    p: {
      owner: string
      repo: string
      requestBody: t_private_vulnerability_report_create
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_repository_advisory>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/security-advisories/reports`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  securityAdvisoriesGetRepositoryAdvisory(
    p: {
      owner: string
      repo: string
      ghsaId: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_repository_advisory>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/security-advisories/${p["ghsaId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  securityAdvisoriesUpdateRepositoryAdvisory(
    p: {
      owner: string
      repo: string
      ghsaId: string
      requestBody: t_repository_advisory_update
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_repository_advisory>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/security-advisories/${p["ghsaId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  activityListStargazersForRepo(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_simple_user[] | t_stargazer[]> | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/stargazers`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGetCodeFrequencyStats(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_code_frequency_stat[]> | Res<202, EmptyObject> | Res<204, void>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/stats/code_frequency`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGetCommitActivityStats(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_commit_activity[]> | Res<202, EmptyObject> | Res<204, void>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/stats/commit_activity`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGetContributorsStats(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_contributor_activity[]> | Res<202, EmptyObject> | Res<204, void>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/stats/contributors`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGetParticipationStats(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_participation_stats> | Res<404, t_basic_error>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/stats/participation`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGetPunchCardStats(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_code_frequency_stat[]> | Res<204, void>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/stats/punch_card`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCreateCommitStatus(
    p: {
      owner: string
      repo: string
      sha: string
      requestBody: {
        context?: string
        description?: string | null
        state: "error" | "failure" | "pending" | "success"
        target_url?: string | null
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_status>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/statuses/${p["sha"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  activityListWatchersForRepo(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_simple_user[]>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/subscribers`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  activityGetRepoSubscription(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_repository_subscription>
    | Res<403, t_basic_error>
    | Res<404, void>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/subscription`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  activitySetRepoSubscription(
    p: {
      owner: string
      repo: string
      requestBody?: {
        ignored?: boolean
        subscribed?: boolean
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_repository_subscription>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/subscription`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  activityDeleteRepoSubscription(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/subscription`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposListTags(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_tag[]>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/tags`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposListTagProtection(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_tag_protection[]>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/tags/protection`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCreateTagProtection(
    p: {
      owner: string
      repo: string
      requestBody: {
        pattern: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_tag_protection>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/tags/protection`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposDeleteTagProtection(
    p: {
      owner: string
      repo: string
      tagProtectionId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<204, void> | Res<403, t_basic_error> | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/tags/protection/${p["tagProtectionId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposDownloadTarballArchive(
    p: {
      owner: string
      repo: string
      ref: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<302, void>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/tarball/${p["ref"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposListTeams(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team[]>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/teams`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGetAllTopics(
    p: {
      owner: string
      repo: string
      page?: number
      perPage?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_topic> | Res<404, t_basic_error>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/topics`
    const query = this._query({ page: p["page"], per_page: p["perPage"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposReplaceAllTopics(
    p: {
      owner: string
      repo: string
      requestBody: {
        names: string[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_topic>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/topics`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposGetClones(
    p: {
      owner: string
      repo: string
      per?: "day" | "week"
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_clone_traffic> | Res<403, t_basic_error>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/traffic/clones`
    const query = this._query({ per: p["per"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGetTopPaths(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_content_traffic[]> | Res<403, t_basic_error>
  > {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/traffic/popular/paths`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGetTopReferrers(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_referrer_traffic[]> | Res<403, t_basic_error>
  > {
    const url =
      this.basePath +
      `/repos/${p["owner"]}/${p["repo"]}/traffic/popular/referrers`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposGetViews(
    p: {
      owner: string
      repo: string
      per?: "day" | "week"
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_view_traffic> | Res<403, t_basic_error>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/traffic/views`
    const query = this._query({ per: p["per"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposTransfer(
    p: {
      owner: string
      repo: string
      requestBody: {
        new_name?: string
        new_owner: string
        team_ids?: number[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<202, t_minimal_repository>> {
    const url = this.basePath + `/repos/${p["owner"]}/${p["repo"]}/transfer`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposCheckVulnerabilityAlerts(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, void>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/vulnerability-alerts`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposEnableVulnerabilityAlerts(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/vulnerability-alerts`

    return this._fetch(url, { method: "PUT", ...(opts ?? {}) }, timeout)
  }

  reposDisableVulnerabilityAlerts(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/vulnerability-alerts`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reposDownloadZipballArchive(
    p: {
      owner: string
      repo: string
      ref: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<302, void>> {
    const url =
      this.basePath + `/repos/${p["owner"]}/${p["repo"]}/zipball/${p["ref"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCreateUsingTemplate(
    p: {
      templateOwner: string
      templateRepo: string
      requestBody: {
        description?: string
        include_all_branches?: boolean
        name: string
        owner?: string
        private?: boolean
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_repository>> {
    const url =
      this.basePath +
      `/repos/${p["templateOwner"]}/${p["templateRepo"]}/generate`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposListPublic(
    p: {
      since?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_minimal_repository[]>
    | Res<304, void>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/repositories`
    const query = this._query({ since: p["since"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsListEnvironmentSecrets(
    p: {
      repositoryId: number
      environmentName: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        secrets: t_actions_secret[]
        total_count: number
      }
    >
  > {
    const url =
      this.basePath +
      `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/secrets`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsGetEnvironmentPublicKey(
    p: {
      repositoryId: number
      environmentName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_actions_public_key>> {
    const url =
      this.basePath +
      `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/secrets/public-key`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsGetEnvironmentSecret(
    p: {
      repositoryId: number
      environmentName: string
      secretName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_actions_secret>> {
    const url =
      this.basePath +
      `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/secrets/${p["secretName"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsCreateOrUpdateEnvironmentSecret(
    p: {
      repositoryId: number
      environmentName: string
      secretName: string
      requestBody: {
        encrypted_value: string
        key_id: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_empty_object> | Res<204, void>> {
    const url =
      this.basePath +
      `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/secrets/${p["secretName"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsDeleteEnvironmentSecret(
    p: {
      repositoryId: number
      environmentName: string
      secretName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/secrets/${p["secretName"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  actionsListEnvironmentVariables(
    p: {
      repositoryId: number
      environmentName: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        total_count: number
        variables: t_actions_variable[]
      }
    >
  > {
    const url =
      this.basePath +
      `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/variables`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsCreateEnvironmentVariable(
    p: {
      repositoryId: number
      environmentName: string
      requestBody: {
        name: string
        value: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_empty_object>> {
    const url =
      this.basePath +
      `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/variables`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsGetEnvironmentVariable(
    p: {
      repositoryId: number
      environmentName: string
      name: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_actions_variable>> {
    const url =
      this.basePath +
      `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/variables/${p["name"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  actionsUpdateEnvironmentVariable(
    p: {
      repositoryId: number
      name: string
      environmentName: string
      requestBody: {
        name?: string
        value?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/variables/${p["name"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  actionsDeleteEnvironmentVariable(
    p: {
      repositoryId: number
      name: string
      environmentName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/variables/${p["name"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  searchCode(
    p: {
      q: string
      sort?: "indexed"
      order?: "desc" | "asc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          incomplete_results: boolean
          items: t_code_search_result_item[]
          total_count: number
        }
      >
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<422, t_validation_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url = this.basePath + `/search/code`
    const query = this._query({
      q: p["q"],
      sort: p["sort"],
      order: p["order"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  searchCommits(
    p: {
      q: string
      sort?: "author-date" | "committer-date"
      order?: "desc" | "asc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          incomplete_results: boolean
          items: t_commit_search_result_item[]
          total_count: number
        }
      >
    | Res<304, void>
  > {
    const url = this.basePath + `/search/commits`
    const query = this._query({
      q: p["q"],
      sort: p["sort"],
      order: p["order"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  searchIssuesAndPullRequests(
    p: {
      q: string
      sort?:
        | "comments"
        | "reactions"
        | "reactions-+1"
        | "reactions--1"
        | "reactions-smile"
        | "reactions-thinking_face"
        | "reactions-heart"
        | "reactions-tada"
        | "interactions"
        | "created"
        | "updated"
      order?: "desc" | "asc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          incomplete_results: boolean
          items: t_issue_search_result_item[]
          total_count: number
        }
      >
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<422, t_validation_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url = this.basePath + `/search/issues`
    const query = this._query({
      q: p["q"],
      sort: p["sort"],
      order: p["order"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  searchLabels(
    p: {
      repositoryId: number
      q: string
      sort?: "created" | "updated"
      order?: "desc" | "asc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          incomplete_results: boolean
          items: t_label_search_result_item[]
          total_count: number
        }
      >
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/search/labels`
    const query = this._query({
      repository_id: p["repositoryId"],
      q: p["q"],
      sort: p["sort"],
      order: p["order"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  searchRepos(
    p: {
      q: string
      sort?: "stars" | "forks" | "help-wanted-issues" | "updated"
      order?: "desc" | "asc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          incomplete_results: boolean
          items: t_repo_search_result_item[]
          total_count: number
        }
      >
    | Res<304, void>
    | Res<422, t_validation_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url = this.basePath + `/search/repositories`
    const query = this._query({
      q: p["q"],
      sort: p["sort"],
      order: p["order"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  searchTopics(
    p: {
      q: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          incomplete_results: boolean
          items: t_topic_search_result_item[]
          total_count: number
        }
      >
    | Res<304, void>
  > {
    const url = this.basePath + `/search/topics`
    const query = this._query({
      q: p["q"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  searchUsers(
    p: {
      q: string
      sort?: "followers" | "repositories" | "joined"
      order?: "desc" | "asc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          incomplete_results: boolean
          items: t_user_search_result_item[]
          total_count: number
        }
      >
    | Res<304, void>
    | Res<422, t_validation_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url = this.basePath + `/search/users`
    const query = this._query({
      q: p["q"],
      sort: p["sort"],
      order: p["order"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsGetLegacy(
    p: {
      teamId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team_full> | Res<404, t_basic_error>> {
    const url = this.basePath + `/teams/${p["teamId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsUpdateLegacy(
    p: {
      teamId: number
      requestBody: {
        description?: string
        name: string
        notification_setting?:
          | "notifications_enabled"
          | "notifications_disabled"
        parent_team_id?: number | null
        permission?: "pull" | "push" | "admin"
        privacy?: "secret" | "closed"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_team_full>
    | Res<201, t_team_full>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/teams/${p["teamId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  teamsDeleteLegacy(
    p: {
      teamId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<204, void> | Res<404, t_basic_error> | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/teams/${p["teamId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  teamsListDiscussionsLegacy(
    p: {
      teamId: number
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team_discussion[]>> {
    const url = this.basePath + `/teams/${p["teamId"]}/discussions`
    const query = this._query({
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsCreateDiscussionLegacy(
    p: {
      teamId: number
      requestBody: {
        body: string
        private?: boolean
        title: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_team_discussion>> {
    const url = this.basePath + `/teams/${p["teamId"]}/discussions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  teamsGetDiscussionLegacy(
    p: {
      teamId: number
      discussionNumber: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team_discussion>> {
    const url =
      this.basePath +
      `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsUpdateDiscussionLegacy(
    p: {
      teamId: number
      discussionNumber: number
      requestBody?: {
        body?: string
        title?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team_discussion>> {
    const url =
      this.basePath +
      `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  teamsDeleteDiscussionLegacy(
    p: {
      teamId: number
      discussionNumber: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  teamsListDiscussionCommentsLegacy(
    p: {
      teamId: number
      discussionNumber: number
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team_discussion_comment[]>> {
    const url =
      this.basePath +
      `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments`
    const query = this._query({
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsCreateDiscussionCommentLegacy(
    p: {
      teamId: number
      discussionNumber: number
      requestBody: {
        body: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_team_discussion_comment>> {
    const url =
      this.basePath +
      `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  teamsGetDiscussionCommentLegacy(
    p: {
      teamId: number
      discussionNumber: number
      commentNumber: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team_discussion_comment>> {
    const url =
      this.basePath +
      `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsUpdateDiscussionCommentLegacy(
    p: {
      teamId: number
      discussionNumber: number
      commentNumber: number
      requestBody: {
        body: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team_discussion_comment>> {
    const url =
      this.basePath +
      `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  teamsDeleteDiscussionCommentLegacy(
    p: {
      teamId: number
      discussionNumber: number
      commentNumber: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath +
      `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  reactionsListForTeamDiscussionCommentLegacy(
    p: {
      teamId: number
      discussionNumber: number
      commentNumber: number
      content?:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_reaction[]>> {
    const url =
      this.basePath +
      `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}/reactions`
    const query = this._query({
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reactionsCreateForTeamDiscussionCommentLegacy(
    p: {
      teamId: number
      discussionNumber: number
      commentNumber: number
      requestBody: {
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_reaction>> {
    const url =
      this.basePath +
      `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}/reactions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reactionsListForTeamDiscussionLegacy(
    p: {
      teamId: number
      discussionNumber: number
      content?:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_reaction[]>> {
    const url =
      this.basePath +
      `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/reactions`
    const query = this._query({
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reactionsCreateForTeamDiscussionLegacy(
    p: {
      teamId: number
      discussionNumber: number
      requestBody: {
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<201, t_reaction>> {
    const url =
      this.basePath +
      `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/reactions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  teamsListPendingInvitationsLegacy(
    p: {
      teamId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_organization_invitation[]>> {
    const url = this.basePath + `/teams/${p["teamId"]}/invitations`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsListMembersLegacy(
    p: {
      teamId: number
      role?: "member" | "maintainer" | "all"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_simple_user[]> | Res<404, t_basic_error>> {
    const url = this.basePath + `/teams/${p["teamId"]}/members`
    const query = this._query({
      role: p["role"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsGetMemberLegacy(
    p: {
      teamId: number
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, void>> {
    const url = this.basePath + `/teams/${p["teamId"]}/members/${p["username"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsAddMemberLegacy(
    p: {
      teamId: number
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<204, void> | Res<403, t_basic_error> | Res<404, void> | Res<422, void>
  > {
    const url = this.basePath + `/teams/${p["teamId"]}/members/${p["username"]}`

    return this._fetch(url, { method: "PUT", ...(opts ?? {}) }, timeout)
  }

  teamsRemoveMemberLegacy(
    p: {
      teamId: number
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, void>> {
    const url = this.basePath + `/teams/${p["teamId"]}/members/${p["username"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  teamsGetMembershipForUserLegacy(
    p: {
      teamId: number
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team_membership> | Res<404, t_basic_error>> {
    const url =
      this.basePath + `/teams/${p["teamId"]}/memberships/${p["username"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsAddOrUpdateMembershipForUserLegacy(
    p: {
      teamId: number
      username: string
      requestBody?: {
        role?: "member" | "maintainer"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_team_membership>
    | Res<403, void>
    | Res<404, t_basic_error>
    | Res<422, void>
  > {
    const url =
      this.basePath + `/teams/${p["teamId"]}/memberships/${p["username"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  teamsRemoveMembershipForUserLegacy(
    p: {
      teamId: number
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<403, void>> {
    const url =
      this.basePath + `/teams/${p["teamId"]}/memberships/${p["username"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  teamsListProjectsLegacy(
    p: {
      teamId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team_project[]> | Res<404, t_basic_error>> {
    const url = this.basePath + `/teams/${p["teamId"]}/projects`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsCheckPermissionsForProjectLegacy(
    p: {
      teamId: number
      projectId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_team_project> | Res<404, void>> {
    const url =
      this.basePath + `/teams/${p["teamId"]}/projects/${p["projectId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsAddOrUpdateProjectPermissionsLegacy(
    p: {
      teamId: number
      projectId: number
      requestBody?: {
        permission?: "read" | "write" | "admin"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<
        403,
        {
          documentation_url?: string
          message?: string
        }
      >
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url =
      this.basePath + `/teams/${p["teamId"]}/projects/${p["projectId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  teamsRemoveProjectLegacy(
    p: {
      teamId: number
      projectId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<204, void> | Res<404, t_basic_error> | Res<422, t_validation_error>
  > {
    const url =
      this.basePath + `/teams/${p["teamId"]}/projects/${p["projectId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  teamsListReposLegacy(
    p: {
      teamId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_minimal_repository[]> | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/teams/${p["teamId"]}/repos`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsCheckPermissionsForRepoLegacy(
    p: {
      teamId: number
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_team_repository> | Res<204, void> | Res<404, void>
  > {
    const url =
      this.basePath + `/teams/${p["teamId"]}/repos/${p["owner"]}/${p["repo"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsAddOrUpdateRepoPermissionsLegacy(
    p: {
      teamId: number
      owner: string
      repo: string
      requestBody?: {
        permission?: "pull" | "push" | "admin"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<204, void> | Res<403, t_basic_error> | Res<422, t_validation_error>
  > {
    const url =
      this.basePath + `/teams/${p["teamId"]}/repos/${p["owner"]}/${p["repo"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  teamsRemoveRepoLegacy(
    p: {
      teamId: number
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url =
      this.basePath + `/teams/${p["teamId"]}/repos/${p["owner"]}/${p["repo"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  teamsListChildLegacy(
    p: {
      teamId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_team[]>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/teams/${p["teamId"]}/teams`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersGetAuthenticated(
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_private_user | t_public_user>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
  > {
    const url = this.basePath + `/user`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersUpdateAuthenticated(
    p: {
      requestBody?: {
        bio?: string
        blog?: string
        company?: string
        email?: string
        hireable?: boolean
        location?: string
        name?: string
        twitter_username?: string | null
      }
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_private_user>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/user`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  usersListBlockedByAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_simple_user[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/blocks`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersCheckBlocked(
    p: {
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/blocks/${p["username"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersBlock(
    p: {
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/user/blocks/${p["username"]}`

    return this._fetch(url, { method: "PUT", ...(opts ?? {}) }, timeout)
  }

  usersUnblock(
    p: {
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/blocks/${p["username"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  codespacesListForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
      repositoryId?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          codespaces: t_codespace[]
          total_count: number
        }
      >
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url = this.basePath + `/user/codespaces`
    const query = this._query({
      per_page: p["perPage"],
      page: p["page"],
      repository_id: p["repositoryId"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codespacesCreateForAuthenticatedUser(
    p: {
      requestBody:
        | {
            client_ip?: string
            devcontainer_path?: string
            display_name?: string
            geo?: "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest"
            idle_timeout_minutes?: number
            location?: string
            machine?: string
            multi_repo_permissions_opt_out?: boolean
            ref?: string
            repository_id: number
            retention_period_minutes?: number
            working_directory?: string
          }
        | {
            devcontainer_path?: string
            geo?: "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest"
            idle_timeout_minutes?: number
            location?: string
            machine?: string
            pull_request: {
              pull_request_number: number
              repository_id: number
            }
            working_directory?: string
          }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_codespace>
    | Res<202, t_codespace>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<
        503,
        {
          code?: string
          documentation_url?: string
          message?: string
        }
      >
  > {
    const url = this.basePath + `/user/codespaces`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  codespacesListSecretsForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<
      200,
      {
        secrets: t_codespaces_secret[]
        total_count: number
      }
    >
  > {
    const url = this.basePath + `/user/codespaces/secrets`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codespacesGetPublicKeyForAuthenticatedUser(
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_codespaces_user_public_key>> {
    const url = this.basePath + `/user/codespaces/secrets/public-key`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codespacesGetSecretForAuthenticatedUser(
    p: {
      secretName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_codespaces_secret>> {
    const url = this.basePath + `/user/codespaces/secrets/${p["secretName"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codespacesCreateOrUpdateSecretForAuthenticatedUser(
    p: {
      secretName: string
      requestBody: {
        encrypted_value?: string
        key_id: string
        selected_repository_ids?: (number | string)[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_empty_object>
    | Res<204, void>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/user/codespaces/secrets/${p["secretName"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  codespacesDeleteSecretForAuthenticatedUser(
    p: {
      secretName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url = this.basePath + `/user/codespaces/secrets/${p["secretName"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  codespacesListRepositoriesForSecretForAuthenticatedUser(
    p: {
      secretName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          repositories: t_minimal_repository[]
          total_count: number
        }
      >
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url =
      this.basePath + `/user/codespaces/secrets/${p["secretName"]}/repositories`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codespacesSetRepositoriesForSecretForAuthenticatedUser(
    p: {
      secretName: string
      requestBody: {
        selected_repository_ids: number[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url =
      this.basePath + `/user/codespaces/secrets/${p["secretName"]}/repositories`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  codespacesAddRepositoryForSecretForAuthenticatedUser(
    p: {
      secretName: string
      repositoryId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url =
      this.basePath +
      `/user/codespaces/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`

    return this._fetch(url, { method: "PUT", ...(opts ?? {}) }, timeout)
  }

  codespacesRemoveRepositoryForSecretForAuthenticatedUser(
    p: {
      secretName: string
      repositoryId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url =
      this.basePath +
      `/user/codespaces/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  codespacesGetForAuthenticatedUser(
    p: {
      codespaceName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_codespace>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url = this.basePath + `/user/codespaces/${p["codespaceName"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codespacesUpdateForAuthenticatedUser(
    p: {
      codespaceName: string
      requestBody?: {
        display_name?: string
        machine?: string
        recent_folders?: string[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_codespace>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/codespaces/${p["codespaceName"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  codespacesDeleteForAuthenticatedUser(
    p: {
      codespaceName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<202, EmptyObject>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url = this.basePath + `/user/codespaces/${p["codespaceName"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  codespacesExportForAuthenticatedUser(
    p: {
      codespaceName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<202, t_codespace_export_details>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
    | Res<500, t_basic_error>
  > {
    const url = this.basePath + `/user/codespaces/${p["codespaceName"]}/exports`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  codespacesGetExportDetailsForAuthenticatedUser(
    p: {
      codespaceName: string
      exportId: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_codespace_export_details> | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/user/codespaces/${p["codespaceName"]}/exports/${p["exportId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codespacesCodespaceMachinesForAuthenticatedUser(
    p: {
      codespaceName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          machines: t_codespace_machine[]
          total_count: number
        }
      >
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url =
      this.basePath + `/user/codespaces/${p["codespaceName"]}/machines`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  codespacesPublishForAuthenticatedUser(
    p: {
      codespaceName: string
      requestBody: {
        name?: string
        private?: boolean
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_codespace_with_full_repository>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/user/codespaces/${p["codespaceName"]}/publish`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  codespacesStartForAuthenticatedUser(
    p: {
      codespaceName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_codespace>
    | Res<304, void>
    | Res<400, t_scim_error>
    | Res<401, t_basic_error>
    | Res<402, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<409, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url = this.basePath + `/user/codespaces/${p["codespaceName"]}/start`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  codespacesStopForAuthenticatedUser(
    p: {
      codespaceName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_codespace>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<500, t_basic_error>
  > {
    const url = this.basePath + `/user/codespaces/${p["codespaceName"]}/stop`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  packagesListDockerMigrationConflictingPackagesForAuthenticatedUser(
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_package[]>> {
    const url = this.basePath + `/user/docker/conflicts`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersSetPrimaryEmailVisibilityForAuthenticatedUser(
    p: {
      requestBody: {
        visibility: "public" | "private"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_email[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/user/email/visibility`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  usersListEmailsForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_email[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/emails`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersAddEmailForAuthenticatedUser(
    p: {
      requestBody?:
        | {
            emails: string[]
          }
        | string[]
        | string
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_email[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/user/emails`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  usersDeleteEmailForAuthenticatedUser(
    p: {
      requestBody:
        | {
            emails: string[]
          }
        | string[]
        | string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/user/emails`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "DELETE", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  usersListFollowersForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_simple_user[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
  > {
    const url = this.basePath + `/user/followers`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersListFollowedByAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_simple_user[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
  > {
    const url = this.basePath + `/user/following`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersCheckPersonIsFollowedByAuthenticated(
    p: {
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/following/${p["username"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersFollow(
    p: {
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/following/${p["username"]}`

    return this._fetch(url, { method: "PUT", ...(opts ?? {}) }, timeout)
  }

  usersUnfollow(
    p: {
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/following/${p["username"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  usersListGpgKeysForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_gpg_key[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/gpg_keys`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersCreateGpgKeyForAuthenticatedUser(
    p: {
      requestBody: {
        armored_public_key: string
        name?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_gpg_key>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/user/gpg_keys`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  usersGetGpgKeyForAuthenticatedUser(
    p: {
      gpgKeyId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_gpg_key>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/gpg_keys/${p["gpgKeyId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersDeleteGpgKeyForAuthenticatedUser(
    p: {
      gpgKeyId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/user/gpg_keys/${p["gpgKeyId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  appsListInstallationsForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          installations: t_installation[]
          total_count: number
        }
      >
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
  > {
    const url = this.basePath + `/user/installations`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  appsListInstallationReposForAuthenticatedUser(
    p: {
      installationId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<
        200,
        {
          repositories: t_repository[]
          repository_selection?: string
          total_count: number
        }
      >
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath + `/user/installations/${p["installationId"]}/repositories`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  appsAddRepoToInstallationForAuthenticatedUser(
    p: {
      installationId: number
      repositoryId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/user/installations/${p["installationId"]}/repositories/${p["repositoryId"]}`

    return this._fetch(url, { method: "PUT", ...(opts ?? {}) }, timeout)
  }

  appsRemoveRepoFromInstallationForAuthenticatedUser(
    p: {
      installationId: number
      repositoryId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/user/installations/${p["installationId"]}/repositories/${p["repositoryId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  interactionsGetRestrictionsForAuthenticatedUser(
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_interaction_limit_response | EmptyObject> | Res<204, void>
  > {
    const url = this.basePath + `/user/interaction-limits`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  interactionsSetRestrictionsForAuthenticatedUser(
    p: {
      requestBody: t_interaction_limit
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_interaction_limit_response> | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/user/interaction-limits`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  interactionsRemoveRestrictionsForAuthenticatedUser(
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void>> {
    const url = this.basePath + `/user/interaction-limits`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  issuesListForAuthenticatedUser(
    p: {
      filter?:
        | "assigned"
        | "created"
        | "mentioned"
        | "subscribed"
        | "repos"
        | "all"
      state?: "open" | "closed" | "all"
      labels?: string
      sort?: "created" | "updated" | "comments"
      direction?: "asc" | "desc"
      since?: string
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_issue[]> | Res<304, void> | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/issues`
    const query = this._query({
      filter: p["filter"],
      state: p["state"],
      labels: p["labels"],
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersListPublicSshKeysForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_key[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/keys`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersCreatePublicSshKeyForAuthenticatedUser(
    p: {
      requestBody: {
        key: string
        title?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_key>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/user/keys`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  usersGetPublicSshKeyForAuthenticatedUser(
    p: {
      keyId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_key>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/keys/${p["keyId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersDeletePublicSshKeyForAuthenticatedUser(
    p: {
      keyId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/keys/${p["keyId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  appsListSubscriptionsForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_user_marketplace_purchase[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/marketplace_purchases`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  appsListSubscriptionsForAuthenticatedUserStubbed(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_user_marketplace_purchase[]>
    | Res<304, void>
    | Res<401, t_basic_error>
  > {
    const url = this.basePath + `/user/marketplace_purchases/stubbed`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsListMembershipsForAuthenticatedUser(
    p: {
      state?: "active" | "pending"
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_org_membership[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/user/memberships/orgs`
    const query = this._query({
      state: p["state"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsGetMembershipForAuthenticatedUser(
    p: {
      org: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_org_membership>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/memberships/orgs/${p["org"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsUpdateMembershipForAuthenticatedUser(
    p: {
      org: string
      requestBody: {
        state: "active"
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_org_membership>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/user/memberships/orgs/${p["org"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  migrationsListForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_migration[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
  > {
    const url = this.basePath + `/user/migrations`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  migrationsStartForAuthenticatedUser(
    p: {
      requestBody: {
        exclude?: "repositories"[]
        exclude_attachments?: boolean
        exclude_git_data?: boolean
        exclude_metadata?: boolean
        exclude_owner_projects?: boolean
        exclude_releases?: boolean
        lock_repositories?: boolean
        org_metadata_only?: boolean
        repositories: string[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_migration>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/user/migrations`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  migrationsGetStatusForAuthenticatedUser(
    p: {
      migrationId: number
      exclude?: string[]
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_migration>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/migrations/${p["migrationId"]}`
    const query = this._query({ exclude: p["exclude"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  migrationsGetArchiveForAuthenticatedUser(
    p: {
      migrationId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<302, void>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
  > {
    const url = this.basePath + `/user/migrations/${p["migrationId"]}/archive`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  migrationsDeleteArchiveForAuthenticatedUser(
    p: {
      migrationId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/migrations/${p["migrationId"]}/archive`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  migrationsUnlockRepoForAuthenticatedUser(
    p: {
      migrationId: number
      repoName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/user/migrations/${p["migrationId"]}/repos/${p["repoName"]}/lock`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  migrationsListReposForAuthenticatedUser(
    p: {
      migrationId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_minimal_repository[]> | Res<404, t_basic_error>
  > {
    const url =
      this.basePath + `/user/migrations/${p["migrationId"]}/repositories`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsListForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_organization_simple[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
  > {
    const url = this.basePath + `/user/orgs`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  packagesListPackagesForAuthenticatedUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      visibility?: "public" | "private" | "internal"
      page?: number
      perPage?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_package[]> | Res<400, void>> {
    const url = this.basePath + `/user/packages`
    const query = this._query({
      package_type: p["packageType"],
      visibility: p["visibility"],
      page: p["page"],
      per_page: p["perPage"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  packagesGetPackageForAuthenticatedUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_package>> {
    const url =
      this.basePath + `/user/packages/${p["packageType"]}/${p["packageName"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  packagesDeletePackageForAuthenticatedUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath + `/user/packages/${p["packageType"]}/${p["packageName"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  packagesRestorePackageForAuthenticatedUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      token?: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/user/packages/${p["packageType"]}/${p["packageName"]}/restore`
    const query = this._query({ token: p["token"] })

    return this._fetch(
      url + query,
      { method: "POST", ...(opts ?? {}) },
      timeout
    )
  }

  packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      page?: number
      perPage?: number
      state?: "active" | "deleted"
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_package_version[]>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/user/packages/${p["packageType"]}/${p["packageName"]}/versions`
    const query = this._query({
      page: p["page"],
      per_page: p["perPage"],
      state: p["state"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  packagesGetPackageVersionForAuthenticatedUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      packageVersionId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_package_version>> {
    const url =
      this.basePath +
      `/user/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  packagesDeletePackageVersionForAuthenticatedUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      packageVersionId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/user/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  packagesRestorePackageVersionForAuthenticatedUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      packageVersionId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/user/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}/restore`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  projectsCreateForAuthenticatedUser(
    p: {
      requestBody: {
        body?: string | null
        name: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_project>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<422, t_validation_error_simple>
  > {
    const url = this.basePath + `/user/projects`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  usersListPublicEmailsForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_email[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/public_emails`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposListForAuthenticatedUser(
    p: {
      visibility?: "all" | "public" | "private"
      affiliation?: string
      type?: "all" | "owner" | "public" | "private" | "member"
      sort?: "created" | "updated" | "pushed" | "full_name"
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
      since?: string
      before?: string
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_repository[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/user/repos`
    const query = this._query({
      visibility: p["visibility"],
      affiliation: p["affiliation"],
      type: p["type"],
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
      since: p["since"],
      before: p["before"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposCreateForAuthenticatedUser(
    p: {
      requestBody: {
        allow_auto_merge?: boolean
        allow_merge_commit?: boolean
        allow_rebase_merge?: boolean
        allow_squash_merge?: boolean
        auto_init?: boolean
        delete_branch_on_merge?: boolean
        description?: string
        gitignore_template?: string
        has_discussions?: boolean
        has_downloads?: boolean
        has_issues?: boolean
        has_projects?: boolean
        has_wiki?: boolean
        homepage?: string
        is_template?: boolean
        license_template?: string
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK"
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE"
        name: string
        private?: boolean
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK"
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE"
        team_id?: number
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_repository>
    | Res<304, void>
    | Res<400, t_scim_error>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/user/repos`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  reposListInvitationsForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_repository_invitation[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/repository_invitations`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposAcceptInvitationForAuthenticatedUser(
    p: {
      invitationId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<409, t_basic_error>
  > {
    const url =
      this.basePath + `/user/repository_invitations/${p["invitationId"]}`

    return this._fetch(url, { method: "PATCH", ...(opts ?? {}) }, timeout)
  }

  reposDeclineInvitationForAuthenticatedUser(
    p: {
      invitationId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<409, t_basic_error>
  > {
    const url =
      this.basePath + `/user/repository_invitations/${p["invitationId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  usersListSocialAccountsForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_social_account[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/social_accounts`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersAddSocialAccountForAuthenticatedUser(
    p: {
      requestBody: {
        account_urls: string[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_social_account[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/user/social_accounts`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  usersDeleteSocialAccountForAuthenticatedUser(
    p: {
      requestBody: {
        account_urls: string[]
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/user/social_accounts`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "DELETE", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  usersListSshSigningKeysForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_ssh_signing_key[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/ssh_signing_keys`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersCreateSshSigningKeyForAuthenticatedUser(
    p: {
      requestBody: {
        key: string
        title?: string
      }
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<201, t_ssh_signing_key>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/user/ssh_signing_keys`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout
    )
  }

  usersGetSshSigningKeyForAuthenticatedUser(
    p: {
      sshSigningKeyId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_ssh_signing_key>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/ssh_signing_keys/${p["sshSigningKeyId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersDeleteSshSigningKeyForAuthenticatedUser(
    p: {
      sshSigningKeyId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/ssh_signing_keys/${p["sshSigningKeyId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  activityListReposStarredByAuthenticatedUser(
    p: {
      sort?: "created" | "updated"
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_starred_repository[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
  > {
    const url = this.basePath + `/user/starred`
    const query = this._query({
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  activityCheckRepoIsStarredByAuthenticatedUser(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/starred/${p["owner"]}/${p["repo"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  activityStarRepoForAuthenticatedUser(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/starred/${p["owner"]}/${p["repo"]}`

    return this._fetch(url, { method: "PUT", ...(opts ?? {}) }, timeout)
  }

  activityUnstarRepoForAuthenticatedUser(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/starred/${p["owner"]}/${p["repo"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  activityListWatchedReposForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_minimal_repository[]>
    | Res<304, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
  > {
    const url = this.basePath + `/user/subscriptions`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  teamsListForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_team_full[]>
    | Res<304, void>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/user/teams`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersList(
    p: {
      since?: number
      perPage?: number
    } = {},
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_simple_user[]> | Res<304, void>> {
    const url = this.basePath + `/users`
    const query = this._query({ since: p["since"], per_page: p["perPage"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersGetByUsername(
    p: {
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_private_user | t_public_user> | Res<404, t_basic_error>
  > {
    const url = this.basePath + `/users/${p["username"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  packagesListDockerMigrationConflictingPackagesForUser(
    p: {
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_package[]> | Res<401, t_basic_error> | Res<403, t_basic_error>
  > {
    const url = this.basePath + `/users/${p["username"]}/docker/conflicts`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  activityListEventsForAuthenticatedUser(
    p: {
      username: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_event[]>> {
    const url = this.basePath + `/users/${p["username"]}/events`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  activityListOrgEventsForAuthenticatedUser(
    p: {
      username: string
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_event[]>> {
    const url =
      this.basePath + `/users/${p["username"]}/events/orgs/${p["org"]}`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  activityListPublicEventsForUser(
    p: {
      username: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_event[]>> {
    const url = this.basePath + `/users/${p["username"]}/events/public`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersListFollowersForUser(
    p: {
      username: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_simple_user[]>> {
    const url = this.basePath + `/users/${p["username"]}/followers`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersListFollowingForUser(
    p: {
      username: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_simple_user[]>> {
    const url = this.basePath + `/users/${p["username"]}/following`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersCheckFollowingForUser(
    p: {
      username: string
      targetUser: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<204, void> | Res<404, void>> {
    const url =
      this.basePath + `/users/${p["username"]}/following/${p["targetUser"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  gistsListForUser(
    p: {
      username: string
      since?: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    Res<200, t_base_gist[]> | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/users/${p["username"]}/gists`
    const query = this._query({
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersListGpgKeysForUser(
    p: {
      username: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_gpg_key[]>> {
    const url = this.basePath + `/users/${p["username"]}/gpg_keys`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersGetContextForUser(
    p: {
      username: string
      subjectType?: "organization" | "repository" | "issue" | "pull_request"
      subjectId?: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_hovercard>
    | Res<404, t_basic_error>
    | Res<422, t_validation_error>
  > {
    const url = this.basePath + `/users/${p["username"]}/hovercard`
    const query = this._query({
      subject_type: p["subjectType"],
      subject_id: p["subjectId"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  appsGetUserInstallation(
    p: {
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_installation>> {
    const url = this.basePath + `/users/${p["username"]}/installation`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersListPublicKeysForUser(
    p: {
      username: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_key_simple[]>> {
    const url = this.basePath + `/users/${p["username"]}/keys`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  orgsListForUser(
    p: {
      username: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_organization_simple[]>> {
    const url = this.basePath + `/users/${p["username"]}/orgs`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  packagesListPackagesForUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      visibility?: "public" | "private" | "internal"
      username: string
      page?: number
      perPage?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_package[]>
    | Res<400, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
  > {
    const url = this.basePath + `/users/${p["username"]}/packages`
    const query = this._query({
      package_type: p["packageType"],
      visibility: p["visibility"],
      page: p["page"],
      per_page: p["perPage"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  packagesGetPackageForUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_package>> {
    const url =
      this.basePath +
      `/users/${p["username"]}/packages/${p["packageType"]}/${p["packageName"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  packagesDeletePackageForUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/users/${p["username"]}/packages/${p["packageType"]}/${p["packageName"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  packagesRestorePackageForUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      username: string
      token?: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/users/${p["username"]}/packages/${p["packageType"]}/${p["packageName"]}/restore`
    const query = this._query({ token: p["token"] })

    return this._fetch(
      url + query,
      { method: "POST", ...(opts ?? {}) },
      timeout
    )
  }

  packagesGetAllPackageVersionsForPackageOwnedByUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<200, t_package_version[]>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/users/${p["username"]}/packages/${p["packageType"]}/${p["packageName"]}/versions`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  packagesGetPackageVersionForUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      packageVersionId: number
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_package_version>> {
    const url =
      this.basePath +
      `/users/${p["username"]}/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  packagesDeletePackageVersionForUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      username: string
      packageVersionId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/users/${p["username"]}/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  packagesRestorePackageVersionForUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      username: string
      packageVersionId: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<
    | Res<204, void>
    | Res<401, t_basic_error>
    | Res<403, t_basic_error>
    | Res<404, t_basic_error>
  > {
    const url =
      this.basePath +
      `/users/${p["username"]}/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}/restore`

    return this._fetch(url, { method: "POST", ...(opts ?? {}) }, timeout)
  }

  projectsListForUser(
    p: {
      username: string
      state?: "open" | "closed" | "all"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_project[]> | Res<422, t_validation_error>> {
    const url = this.basePath + `/users/${p["username"]}/projects`
    const query = this._query({
      state: p["state"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  activityListReceivedEventsForUser(
    p: {
      username: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_event[]>> {
    const url = this.basePath + `/users/${p["username"]}/received_events`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  activityListReceivedPublicEventsForUser(
    p: {
      username: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_event[]>> {
    const url = this.basePath + `/users/${p["username"]}/received_events/public`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  reposListForUser(
    p: {
      username: string
      type?: "all" | "owner" | "member"
      sort?: "created" | "updated" | "pushed" | "full_name"
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_minimal_repository[]>> {
    const url = this.basePath + `/users/${p["username"]}/repos`
    const query = this._query({
      type: p["type"],
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  billingGetGithubActionsBillingUser(
    p: {
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_actions_billing_usage>> {
    const url =
      this.basePath + `/users/${p["username"]}/settings/billing/actions`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  billingGetGithubPackagesBillingUser(
    p: {
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_packages_billing_usage>> {
    const url =
      this.basePath + `/users/${p["username"]}/settings/billing/packages`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  billingGetSharedStorageBillingUser(
    p: {
      username: string
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_combined_billing_usage>> {
    const url =
      this.basePath + `/users/${p["username"]}/settings/billing/shared-storage`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersListSocialAccountsForUser(
    p: {
      username: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_social_account[]>> {
    const url = this.basePath + `/users/${p["username"]}/social_accounts`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  usersListSshSigningKeysForUser(
    p: {
      username: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_ssh_signing_key[]>> {
    const url = this.basePath + `/users/${p["username"]}/ssh_signing_keys`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  activityListReposStarredByUser(
    p: {
      username: string
      sort?: "created" | "updated"
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_starred_repository[] | t_repository[]>> {
    const url = this.basePath + `/users/${p["username"]}/starred`
    const query = this._query({
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  activityListReposWatchedByUser(
    p: {
      username: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, t_minimal_repository[]>> {
    const url = this.basePath + `/users/${p["username"]}/subscriptions`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    return this._fetch(url + query, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  metaGetAllVersions(
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, string[]> | Res<404, t_basic_error>> {
    const url = this.basePath + `/versions`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  metaGetZen(
    timeout?: number,
    opts?: RequestInit
  ): TypedFetchResponse<Res<200, string>> {
    const url = this.basePath + `/zen`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }
}
