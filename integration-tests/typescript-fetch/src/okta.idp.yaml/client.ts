/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  EmptyObject,
  t_AppAuthenticatorEnrollment,
  t_AppAuthenticatorEnrollmentRequest,
  t_Email,
  t_Error,
  t_Phone,
  t_Profile,
  t_PushNotificationChallenge,
  t_PushNotificationVerification,
  t_Schema,
  t_UpdateAppAuthenticatorEnrollmentRequest,
} from "./models"
import {
  AbstractFetchClient,
  AbstractFetchClientConfig,
  Res,
  StatusCode,
  StatusCode2xx,
  StatusCode3xx,
  StatusCode4xx,
  StatusCode5xx,
  TypedFetchResponse,
} from "@nahkies/typescript-fetch-runtime/main"

export interface ApiClientConfig extends AbstractFetchClientConfig {}

export class ApiClient extends AbstractFetchClient {
  constructor(config: ApiClientConfig) {
    super(config)
  }

  async createAppAuthenticatorEnrollment(
    p: {
      requestBody: t_AppAuthenticatorEnrollmentRequest
    },
    timeout?: number,
    opts?: RequestInit,
  ): Promise<
    TypedFetchResponse<
      | Res<200, t_AppAuthenticatorEnrollment>
      | Res<400, t_Error>
      | Res<401, t_Error>
      | Res<403, t_Error>
      | Res<404, t_Error>
    >
  > {
    const url = this.basePath + `/idp/myaccount/app-authenticators`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout,
    )
  }

  async verifyAppAuthenticatorPushNotificationChallenge(
    p: {
      challengeId: string
      requestBody: t_PushNotificationVerification
    },
    timeout?: number,
    opts?: RequestInit,
  ): Promise<
    TypedFetchResponse<Res<200, void> | Res<204, void> | Res<400, void>>
  > {
    const url =
      this.basePath +
      `/idp/myaccount/app-authenticators/challenge/${p["challengeId"]}/verify`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout,
    )
  }

  async updateAppAuthenticatorEnrollment(
    p: {
      enrollmentId: string
      requestBody: t_UpdateAppAuthenticatorEnrollmentRequest
    },
    timeout?: number,
    opts?: RequestInit,
  ): Promise<
    TypedFetchResponse<
      | Res<200, t_UpdateAppAuthenticatorEnrollmentRequest>
      | Res<401, t_Error>
      | Res<403, t_Error>
      | Res<404, t_Error>
    >
  > {
    const url =
      this.basePath + `/idp/myaccount/app-authenticators/${p["enrollmentId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PATCH", headers, body, ...(opts ?? {}) },
      timeout,
    )
  }

  async deleteAppAuthenticatorEnrollment(
    p: {
      enrollmentId: string
    },
    timeout?: number,
    opts?: RequestInit,
  ): Promise<
    TypedFetchResponse<
      Res<204, void> | Res<401, t_Error> | Res<403, t_Error> | Res<404, t_Error>
    >
  > {
    const url =
      this.basePath + `/idp/myaccount/app-authenticators/${p["enrollmentId"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  async listAppAuthenticatorPendingPushNotificationChallenges(
    p: {
      enrollmentId: string
    },
    timeout?: number,
    opts?: RequestInit,
  ): Promise<TypedFetchResponse<Res<200, t_PushNotificationChallenge[]>>> {
    const url =
      this.basePath +
      `/idp/myaccount/app-authenticators/${p["enrollmentId"]}/push/notifications`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  async listEmails(
    timeout?: number,
    opts?: RequestInit,
  ): Promise<TypedFetchResponse<Res<200, t_Email[]> | Res<401, t_Error>>> {
    const url = this.basePath + `/idp/myaccount/emails`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  async createEmail(
    p: {
      requestBody: {
        profile: {
          email: string
        }
        role?: "PRIMARY" | "SECONDARY"
        sendEmail?: boolean
        state?: string
      }
    },
    timeout?: number,
    opts?: RequestInit,
  ): Promise<
    TypedFetchResponse<
      | Res<201, t_Email>
      | Res<400, t_Error>
      | Res<401, t_Error>
      | Res<403, t_Error>
      | Res<409, t_Error>
    >
  > {
    const url = this.basePath + `/idp/myaccount/emails`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout,
    )
  }

  async getEmail(
    p: {
      id: string
    },
    timeout?: number,
    opts?: RequestInit,
  ): Promise<TypedFetchResponse<Res<200, t_Email> | Res<401, t_Error>>> {
    const url = this.basePath + `/idp/myaccount/emails/${p["id"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  async deleteEmail(
    p: {
      id: string
    },
    timeout?: number,
    opts?: RequestInit,
  ): Promise<
    TypedFetchResponse<
      | Res<204, void>
      | Res<400, t_Error>
      | Res<401, t_Error>
      | Res<403, t_Error>
      | Res<404, t_Error>
    >
  > {
    const url = this.basePath + `/idp/myaccount/emails/${p["id"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  async sendEmailChallenge(
    p: {
      id: string
      requestBody: {
        state: string
      }
    },
    timeout?: number,
    opts?: RequestInit,
  ): Promise<
    TypedFetchResponse<
      | Res<
          201,
          {
            _links: {
              poll: {
                hints: {
                  allow: string[]
                }
                href: string
              }
              verify: {
                hints: {
                  allow: string[]
                }
                href: string
              }
            }
            expiresAt: string
            id: string
            profile: {
              email: string
            }
            status: string
          }
        >
      | Res<401, t_Error>
      | Res<403, t_Error>
      | Res<404, t_Error>
    >
  > {
    const url = this.basePath + `/idp/myaccount/emails/${p["id"]}/challenge`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout,
    )
  }

  async pollChallengeForEmailMagicLink(
    p: {
      id: string
      challengeId: string
    },
    timeout?: number,
    opts?: RequestInit,
  ): Promise<
    TypedFetchResponse<
      | Res<
          200,
          {
            _links: {
              poll: {
                hints: {
                  allow: string[]
                }
                href: string
              }
              verify: {
                hints: {
                  allow: string[]
                }
                href: string
              }
            }
            expiresAt: string
            id: string
            profile: {
              email: string
            }
            status: string
          }
        >
      | Res<401, t_Error>
      | Res<404, t_Error>
    >
  > {
    const url =
      this.basePath +
      `/idp/myaccount/emails/${p["id"]}/challenge/${p["challengeId"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  async verifyEmailOtp(
    p: {
      id: string
      challengeId: string
      requestBody: {
        verificationCode: string
      }
    },
    timeout?: number,
    opts?: RequestInit,
  ): Promise<
    TypedFetchResponse<
      Res<200, void> | Res<401, t_Error> | Res<403, t_Error> | Res<404, t_Error>
    >
  > {
    const url =
      this.basePath +
      `/idp/myaccount/emails/${p["id"]}/challenge/${p["challengeId"]}/verify`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout,
    )
  }

  async listPhones(
    timeout?: number,
    opts?: RequestInit,
  ): Promise<TypedFetchResponse<Res<200, t_Phone[]> | Res<401, t_Error>>> {
    const url = this.basePath + `/idp/myaccount/phones`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  async createPhone(
    p: {
      requestBody: {
        method?: "SMS" | "CALL"
        profile?: {
          phoneNumber?: string
        }
        sendCode?: boolean
      }
    },
    timeout?: number,
    opts?: RequestInit,
  ): Promise<
    TypedFetchResponse<
      | Res<201, t_Phone>
      | Res<400, t_Error>
      | Res<401, t_Error>
      | Res<403, t_Error>
      | Res<409, t_Error>
      | Res<500, t_Error>
    >
  > {
    const url = this.basePath + `/idp/myaccount/phones`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout,
    )
  }

  async getPhone(
    p: {
      id: string
    },
    timeout?: number,
    opts?: RequestInit,
  ): Promise<
    TypedFetchResponse<
      Res<200, t_Phone> | Res<401, t_Error> | Res<404, t_Error>
    >
  > {
    const url = this.basePath + `/idp/myaccount/phones/${p["id"]}`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  async deletePhone(
    p: {
      id: string
    },
    timeout?: number,
    opts?: RequestInit,
  ): Promise<
    TypedFetchResponse<
      Res<204, void> | Res<401, t_Error> | Res<403, t_Error> | Res<404, t_Error>
    >
  > {
    const url = this.basePath + `/idp/myaccount/phones/${p["id"]}`

    return this._fetch(url, { method: "DELETE", ...(opts ?? {}) }, timeout)
  }

  async sendPhoneChallenge(
    p: {
      id: string
      requestBody: {
        method: "SMS" | "CALL"
        retry?: boolean
      }
    },
    timeout?: number,
    opts?: RequestInit,
  ): Promise<
    TypedFetchResponse<
      | Res<
          200,
          {
            _links?: {
              verify?: {
                hints: {
                  allow: string[]
                }
                href: string
              }
            }
          }
        >
      | Res<400, t_Error>
      | Res<401, t_Error>
      | Res<403, t_Error>
      | Res<404, t_Error>
      | Res<500, t_Error>
    >
  > {
    const url = this.basePath + `/idp/myaccount/phones/${p["id"]}/challenge`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout,
    )
  }

  async verifyPhoneChallenge(
    p: {
      id: string
      requestBody: {
        verificationCode: string
      }
    },
    timeout?: number,
    opts?: RequestInit,
  ): Promise<
    TypedFetchResponse<
      | Res<204, void>
      | Res<400, t_Error>
      | Res<401, t_Error>
      | Res<403, t_Error>
      | Res<404, t_Error>
      | Res<409, t_Error>
    >
  > {
    const url = this.basePath + `/idp/myaccount/phones/${p["id"]}/verify`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "POST", headers, body, ...(opts ?? {}) },
      timeout,
    )
  }

  async getProfile(
    timeout?: number,
    opts?: RequestInit,
  ): Promise<TypedFetchResponse<Res<200, t_Profile> | Res<401, t_Error>>> {
    const url = this.basePath + `/idp/myaccount/profile`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }

  async replaceProfile(
    p: {
      requestBody: {
        profile?: EmptyObject
      }
    },
    timeout?: number,
    opts?: RequestInit,
  ): Promise<
    TypedFetchResponse<
      | Res<200, t_Profile>
      | Res<400, t_Error>
      | Res<401, t_Error>
      | Res<403, t_Error>
    >
  > {
    const url = this.basePath + `/idp/myaccount/profile`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      { method: "PUT", headers, body, ...(opts ?? {}) },
      timeout,
    )
  }

  async getProfileSchema(
    timeout?: number,
    opts?: RequestInit,
  ): Promise<TypedFetchResponse<Res<200, t_Schema> | Res<401, t_Error>>> {
    const url = this.basePath + `/idp/myaccount/profile/schema`

    return this._fetch(url, { method: "GET", ...(opts ?? {}) }, timeout)
  }
}
