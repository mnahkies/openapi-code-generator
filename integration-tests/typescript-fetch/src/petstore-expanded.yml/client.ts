/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import { t_Error, t_NewPet, t_Pet } from "./models"
import {
  AbstractFetchClient,
  AbstractFetchClientConfig,
  Response,
  StatusCode,
  StatusCode2xx,
  StatusCode3xx,
  StatusCode4xx,
  StatusCode5xx,
} from "@nahkies/typescript-fetch-runtime/main"

export interface ApiClientConfig extends AbstractFetchClientConfig {}

export class ApiClient extends AbstractFetchClient {
  constructor(config: ApiClientConfig) {
    super(config)
  }

  async findPets(
    p: {
      tags?: string[]
      limit?: number
    } = {}
  ): Promise<Response<200, t_Pet[]> | Response<StatusCode, t_Error>> {
    const url = this.basePath + `/pets`
    const query = this._query({ tags: p["tags"], limit: p["limit"] })
    const res = await fetch(url + query, { method: "GET" })

    // TODO: this is a poor assumption
    return { status: res.status as any, body: (await res.json()) as any }
  }

  async addPet(p: {
    requestBody: t_NewPet
  }): Promise<Response<200, t_Pet> | Response<StatusCode, t_Error>> {
    const url = this.basePath + `/pets`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)
    const res = await fetch(url, { method: "POST", headers, body })

    // TODO: this is a poor assumption
    return { status: res.status as any, body: (await res.json()) as any }
  }

  async findPetById(p: {
    id: number
  }): Promise<Response<200, t_Pet> | Response<StatusCode, t_Error>> {
    const url = this.basePath + `/pets/${p["id"]}`

    const res = await fetch(url, { method: "GET" })

    // TODO: this is a poor assumption
    return { status: res.status as any, body: (await res.json()) as any }
  }

  async deletePet(p: {
    id: number
  }): Promise<Response<204, void> | Response<StatusCode, t_Error>> {
    const url = this.basePath + `/pets/${p["id"]}`

    const res = await fetch(url, { method: "DELETE" })

    // TODO: this is a poor assumption
    return { status: res.status as any, body: (await res.json()) as any }
  }
}
